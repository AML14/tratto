project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    MockFile mockFile0 = new MockFile(""02`RCo%"", ""02`RCo%"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""02`RCo%"");
    int int0 = zipArchiveEntry0.getVersionRequired();
    assertEquals(0L, zipArchiveEntry0.getSize());
}",0,
project,0,test001,"public void test001() throws Throwable {
    MockFile mockFile0 = new MockFile(""02`RCo%"", ""02`RCo%"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""02`RCo%"");
    int int0 = zipArchiveEntry0.getVersionRequired();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test002,"public void test002() throws Throwable {
    MockFile mockFile0 = new MockFile(""02`RCo%"", ""02`RCo%"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""02`RCo%"");
    int int0 = zipArchiveEntry0.getVersionRequired();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test003,"public void test003() throws Throwable {
    MockFile mockFile0 = new MockFile(""02`RCo%"", ""02`RCo%"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""02`RCo%"");
    int int0 = zipArchiveEntry0.getVersionRequired();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test004,"public void test004() throws Throwable {
    MockFile mockFile0 = new MockFile(""02`RCo%"", ""02`RCo%"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""02`RCo%"");
    int int0 = zipArchiveEntry0.getVersionRequired();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test005,"public void test005() throws Throwable {
    MockFile mockFile0 = new MockFile(""02`RCo%"", ""02`RCo%"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""02`RCo%"");
    int int0 = zipArchiveEntry0.getVersionRequired();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test016,"public void test016() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    ZipArchiveEntry zipArchiveEntry2 = null;
    try {
        zipArchiveEntry2 = new ZipArchiveEntry(zipArchiveEntry1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test027,"public void test027() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.setMethod(3);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(3, zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test028,"public void test028() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.setMethod(3);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test039,"public void test039() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test0310,"public void test0310() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test0311,"public void test0311() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0312,"public void test0312() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0313,"public void test0313() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test0414,"public void test0414() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.setExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(3, zipExtraFieldArray0.length);
}",0,
project,0,test0415,"public void test0415() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.setExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test0416,"public void test0416() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.setExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0417,"public void test0417() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.setExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0418,"public void test0418() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.setExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test0519,"public void test0519() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,
project,0,test0520,"public void test0520() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test0521,"public void test0521() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0522,"public void test0522() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0523,"public void test0523() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0624,"public void test0624() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test0625,"public void test0625() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0626,"public void test0626() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0627,"public void test0627() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0628,"public void test0628() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test0729,"public void test0729() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setRawFlag(0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test0730,"public void test0730() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setRawFlag(0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test0731,"public void test0731() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setRawFlag(0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0732,"public void test0732() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setRawFlag(0);
    assertEquals(0, zipArchiveEntry0.getRawFlag());
}",0,
project,0,test0733,"public void test0733() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setRawFlag(0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0834,"public void test0834() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setVersionMadeBy((-1));
    assertEquals((-1), zipArchiveEntry0.getVersionMadeBy());
}",0,
project,0,test0936,"public void test0936() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""6{k+a[>g]"");
    int int0 = zipArchiveEntry0.getVersionMadeBy();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test0937,"public void test0937() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""6{k+a[>g]"");
    int int0 = zipArchiveEntry0.getVersionMadeBy();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(1, zipArchiveEntry0.getSize())"
project,0,test0938,"public void test0938() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""6{k+a[>g]"");
    int int0 = zipArchiveEntry0.getVersionMadeBy();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test0939,"public void test0939() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""6{k+a[>g]"");
    int int0 = zipArchiveEntry0.getVersionMadeBy();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0940,"public void test0940() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""6{k+a[>g]"");
    int int0 = zipArchiveEntry0.getVersionMadeBy();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test0941,"public void test0941() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""6{k+a[>g]"");
    int int0 = zipArchiveEntry0.getVersionMadeBy();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1042,"public void test1042() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(3);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(3, zipArchiveEntry0.getMethod());
}",0,"assertEquals(1, zipArchiveEntry0.getMethod())"
project,0,test1043,"public void test1043() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(3);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test1144,"public void test1144() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test1145,"public void test1145() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test1146,"public void test1146() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test1147,"public void test1147() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry1.getPlatform())"
project,0,test1148,"public void test1148() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,
project,0,test1249,"public void test1249() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setVersionRequired(0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1250,"public void test1250() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setVersionRequired(0);
    assertEquals(0, zipArchiveEntry0.getVersionRequired());
}",0,"assertEquals(0, zipArchiveEntry0.getVersionRequired())"
project,0,test1251,"public void test1251() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setVersionRequired(0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1252,"public void test1252() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setVersionRequired(0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test1253,"public void test1253() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setVersionRequired(0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1254,"public void test1254() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setVersionRequired(0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1355,"public void test1355() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getRawFlag();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1356,"public void test1356() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getRawFlag();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1357,"public void test1357() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getRawFlag();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1358,"public void test1358() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getRawFlag();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1359,"public void test1359() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getRawFlag();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1360,"public void test1360() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getRawFlag();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1461,"public void test1461() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1462,"public void test1462() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1463,"public void test1463() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1464,"public void test1464() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1465,"public void test1465() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1566,"public void test1566() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1567,"public void test1567() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1568,"public void test1568() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1569,"public void test1569() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1570,"public void test1570() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1671,"public void test1671() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""9/"");
    zipArchiveEntry0.setUnixMode((-1));
    assertTrue(zipArchiveEntry0.isUnixSymlink());
}",0,assertTrue(zipArchiveEntry0.isUnixSymlink())
project,0,test1772,"public void test1772() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode((-1));
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertEquals((-65536L), zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1773,"public void test1773() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode((-1));
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1874,"public void test1874() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1875,"public void test1875() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1876,"public void test1876() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1877,"public void test1877() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertEquals(0, zipArchiveEntry0.getUnixMode());
}",0,"assertEquals(0, zipArchiveEntry0.getUnixMode())"
project,0,test1878,"public void test1878() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1879,"public void test1879() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1880,"public void test1880() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1981,"public void test1981() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(false);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1982,"public void test1982() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test1983,"public void test1983() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(false);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test1984,"public void test1984() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test1985,"public void test1985() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test2086,"public void test2086() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test2087,"public void test2087() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test2088,"public void test2088() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test2089,"public void test2089() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test2090,"public void test2090() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test2191,"public void test2191() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals(1, zipExtraFieldArray0.length);
}",0,
project,0,test2192,"public void test2192() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test2193,"public void test2193() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test2194,"public void test2194() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test2195,"public void test2195() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test2196,"public void test2196() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test2297,"public void test2297() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test2298,"public void test2298() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,
project,0,test2399,"public void test2399() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addAsFirstExtraField(x000A_NTFS0);
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test23100,"public void test23100() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addAsFirstExtraField(x000A_NTFS0);
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test23101,"public void test23101() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    zipArchiveEntry0.addAsFirstExtraField(x000A_NTFS0);
    zipArchiveEntry0.addExtraField(x000A_NTFS0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test24102,"public void test24102() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test24103,"public void test24103() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test24104,"public void test24104() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test24105,"public void test24105() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test24106,"public void test24106() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test25107,"public void test25107() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
    zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
    zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test25108,"public void test25108() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
    zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
    zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test25109,"public void test25109() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
    ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
    zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
    zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test26110,"public void test26110() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipShort zipShort0 = UnicodePathExtraField.UPATH_ID;
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test27111,"public void test27111() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    JarMarker jarMarker0 = JarMarker.getInstance();
    ZipShort zipShort0 = jarMarker0.getCentralDirectoryLength();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test28112,"public void test28112() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test29113,"public void test29113() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setName((String) null);
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test30114,"public void test30114() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test30115,"public void test30115() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setPlatform(3);
    zipArchiveEntry0.setName(""n|Ea6ZtYw/"");
    assertEquals(3, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test31116,"public void test31116() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setSize((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid entry size
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test32117,"public void test32117() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test32118,"public void test32118() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test32119,"public void test32119() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test32120,"public void test32120() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test32121,"public void test32121() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test33122,"public void test33122() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setName("">Iq\""e"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test33123,"public void test33123() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setName("">Iq\""e"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test33124,"public void test33124() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setName("">Iq\""e"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test33125,"public void test33125() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setName("">Iq\""e"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test33126,"public void test33126() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setName("">Iq\""e"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test34127,"public void test34127() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test34128,"public void test34128() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    byte[] byteArray0 = new byte[4];
    byteArray0[2] = (byte) 3;
    zipArchiveEntry1.setCentralDirectoryExtra(byteArray0);
    assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test34129,"public void test34129() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    byte[] byteArray0 = new byte[4];
    byteArray0[2] = (byte) 3;
    zipArchiveEntry1.setCentralDirectoryExtra(byteArray0);
    assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
}",0,
project,0,test35130,"public void test35130() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test35131,"public void test35131() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[13];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test36132,"public void test36132() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertTrue(boolean0);
}",0,
project,0,test36133,"public void test36133() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test36134,"public void test36134() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test36135,"public void test36135() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test36136,"public void test36136() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test36137,"public void test36137() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test37138,"public void test37138() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertFalse(boolean0);
}",0,
project,0,test37139,"public void test37139() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test37140,"public void test37140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test37141,"public void test37141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test37142,"public void test37142() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test37143,"public void test37143() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test38144,"public void test38144() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(""gz;BR:f0i"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test38145,"public void test38145() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(""gz;BR:f0i"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,
project,0,test38146,"public void test38146() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(""gz;BR:f0i"");
    assertFalse(boolean0);
}",0,
project,0,test38147,"public void test38147() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(""gz;BR:f0i"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test38148,"public void test38148() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(""gz;BR:f0i"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test38149,"public void test38149() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(""gz;BR:f0i"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test39150,"public void test39150() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""WV._0Q-"");
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test39151,"public void test39151() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""WV._0Q-"");
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test39152,"public void test39152() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""WV._0Q-"");
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test39153,"public void test39153() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""WV._0Q-"");
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,"assertEquals(0, zipArchiveEntry1.getSize())"
project,0,test39154,"public void test39154() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""WV._0Q-"");
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,
project,0,test39155,"public void test39155() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""WV._0Q-"");
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry1.getPlatform())"
project,0,test40156,"public void test40156() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment(""org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test40157,"public void test40157() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment(""org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",1,
project,0,test40158,"public void test40158() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment(""org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertTrue(boolean0);
}",0,
project,0,test40159,"public void test40159() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment(""org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test40160,"public void test40160() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment(""org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry1.getPlatform())"
project,0,test40161,"public void test40161() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment(""org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,"assertEquals(0, zipArchiveEntry1.getSize())"
project,0,test41162,"public void test41162() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test41163,"public void test41163() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setTime(3);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test41164,"public void test41164() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setTime(3);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test42165,"public void test42165() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("" but is "");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",1,
project,0,test42166,"public void test42166() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("" but is "");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry1.getPlatform())"
project,0,test42167,"public void test42167() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("" but is "");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,
project,0,test42168,"public void test42168() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("" but is "");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(zipArchiveEntry0.equals((Object) zipArchiveEntry1));
}",0,
project,0,test42169,"public void test42169() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("" but is "");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry1.getExternalAttributes())"
project,0,test42170,"public void test42170() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("" but is "");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,
project,0,test42171,"public void test42171() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("" but is "");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry1.getInternalAttributes())"
project,0,test43172,"public void test43172() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setInternalAttributes((-1));
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry1.getInternalAttributes())"
project,0,test43173,"public void test43173() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setInternalAttributes((-1));
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,
project,0,test44174,"public void test44174() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setUnixMode(0);
    zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(3, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry1.getPlatform())"
project,0,test45175,"public void test45175() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test45176,"public void test45176() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setExternalAttributes((-1));
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,
project,0,test46177,"public void test46177() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setMethod(0);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getMethod());
}",0,"assertEquals(0, zipArchiveEntry1.getMethod())"
project,0,test46178,"public void test46178() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setMethod(0);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,
project,0,test47179,"public void test47179() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setSize(3);
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(3L, zipArchiveEntry1.getSize());
}",0,"assertEquals(0, zipArchiveEntry1.getSize())"
project,0,test47180,"public void test47180() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setSize(3);
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,
project,0,test48182,"public void test48182() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setCrc(3);
    zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test49184,"public void test49184() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setCompressedSize(0);
    zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test50185,"public void test50185() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry1.getPlatform())"
project,0,test50186,"public void test50186() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test50187,"public void test50187() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test50188,"public void test50188() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",1,
project,0,test51189,"public void test51189() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,"assertEquals(0, zipArchiveEntry1.getSize())"
project,0,test51190,"public void test51190() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test51191,"public void test51191() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test51192,"public void test51192() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,
project,0,test51193,"public void test51193() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry1.getPlatform())"
project,0,test51194,"public void test51194() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry1.getExternalAttributes())"
