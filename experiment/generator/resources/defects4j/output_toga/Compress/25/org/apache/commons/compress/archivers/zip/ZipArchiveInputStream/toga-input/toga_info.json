{
  "test1113" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1113() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    long long0 = zipArchiveInputStream0.skip(0L);\n}",
    "testName" : "test1113"
  },
  "test1214" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1214() throws Throwable {\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1301);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, (String) null, false, false);\n    zipArchiveInputStream0.skip((-1L));\n}",
    "testName" : "test1214"
  },
  "test1820" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1820() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);\n    zipArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test1820"
  },
  "test1012" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1012() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);\n    long long0 = zipArchiveInputStream0.skip(1393L);\n}",
    "testName" : "test1012"
  },
  "test000" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    byteArray0[0] = (byte) 119;\n    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 119);\n}",
    "testName" : "test000"
  },
  "test1517" : {
    "methodSignature" : "public boolean canReadEntryData(ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);\n    File file0 = MockFile.createTempFile(\"]9T7 \", \"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry\");\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, \"L<X\");\n    boolean boolean0 = zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n}",
    "testName" : "test1517"
  },
  "test012" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, \"DIRECTORY\", true, true);\n    zipArchiveInputStream0.getNextEntry();\n    zipArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test012"
  },
  "test023" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    ZipArchiveInputStream.matches((byte[]) null, 26);\n}",
    "testName" : "test023"
  },
  "test034" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test034"
  },
  "test045" : {
    "methodSignature" : "public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields)",
    "methodName" : "ZipArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = null;\n    zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, \"nQNy!G[`/^,`EY\", false);\n}",
    "testName" : "test045"
  },
  "test056" : {
    "methodSignature" : "public ZipArchiveInputStream(InputStream inputStream, String encoding)",
    "methodName" : "ZipArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = null;\n    zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, \"TgUR0lt5}4zQ$$O'=\");\n}",
    "testName" : "test056"
  },
  "test067" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(611);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, false);\n    zipArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test067"
  },
  "test1618" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.getCount();\n}",
    "testName" : "test1618"
  },
  "test1315" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1315() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    long long0 = zipArchiveInputStream0.skip(541L);\n}",
    "testName" : "test1315"
  },
  "test0810" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0810() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 1);\n}",
    "testName" : "test0810"
  },
  "test1921" : {
    "methodSignature" : "public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields, boolean allowStoredEntriesWithDataDescriptor)",
    "methodName" : "ZipArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = null;\n    zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, \"\", true, true);\n}",
    "testName" : "test1921"
  },
  "test1416" : {
    "methodSignature" : "public boolean canReadEntryData(ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);\n    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();\n    boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);\n}",
    "testName" : "test1416"
  },
  "test0911" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 214);\n}",
    "testName" : "test0911"
  },
  "test1719" : {
    "methodSignature" : "public int read(byte[] buffer, int offset, int length) throws IOException",
    "methodName" : "read",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1719() throws Throwable {\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    int int0 = zipArchiveInputStream0.read((byte[]) null, 26, 3301);\n}",
    "testName" : "test1719"
  },
  "test079" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.getCount();\n}",
    "testName" : "test079"
  }
}