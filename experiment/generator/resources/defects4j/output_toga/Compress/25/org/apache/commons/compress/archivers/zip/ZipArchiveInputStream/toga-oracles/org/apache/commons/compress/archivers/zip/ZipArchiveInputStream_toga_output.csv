project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 119;
    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 119);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test012,"public void test012() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, ""DIRECTORY"", true, true);
    zipArchiveInputStream0.getNextEntry();
    assertEquals(6L, zipArchiveInputStream0.getBytesRead());
}",0,"assertEquals(0, zipArchiveInputStream0.getBytesRead())"
project,0,test023,"public void test023() throws Throwable {
    // Undeclared exception!
    try {
        ZipArchiveInputStream.matches((byte[]) null, 26);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test034,"public void test034() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    try {
        zipArchiveInputStream0.getNextZipEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.PushbackInputStream"", e);
    }
}",0,
project,0,test045,"public void test045() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = null;
    try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, ""nQNy!G[`/^,`EY"", false);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // nQNy!G[`/^,`EY
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test056,"public void test056() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = null;
    try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, ""TgUR0lt5}4zQ$$O'="");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // TgUR0lt5}4zQ$$O'=
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test067,"public void test067() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(611);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, false);
    assertEquals(0L, zipArchiveInputStream0.getBytesRead());
}",0,
project,0,test079,"public void test079() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    zipArchiveInputStream0.getNextZipEntry();
    assertEquals(5, zipArchiveInputStream0.getCount());
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    byte[] byteArray0 = new byte[5];
    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0911,"public void test0911() throws Throwable {
    byte[] byteArray0 = new byte[5];
    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 214);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1012,"public void test1012() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
    long long0 = zipArchiveInputStream0.skip(1393L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1113,"public void test1113() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    long long0 = zipArchiveInputStream0.skip(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1214,"public void test1214() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1301);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, (String) null, false, false);
    // Undeclared exception!
    try {
        zipArchiveInputStream0.skip((-1L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test1315,"public void test1315() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    long long0 = zipArchiveInputStream0.skip(541L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1416,"public void test1416() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1517,"public void test1517() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
    File file0 = MockFile.createTempFile(""]9T7 "", ""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, ""L<X"");
    boolean boolean0 = zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1618,"public void test1618() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    zipArchiveInputStream0.close();
    zipArchiveInputStream0.getNextZipEntry();
    assertEquals(0, zipArchiveInputStream0.getCount());
}",0,
project,0,test1719,"public void test1719() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    int int0 = zipArchiveInputStream0.read((byte[]) null, 26, 3301);
    assertEquals((-1), int0);
}",0,
project,0,test1820,"public void test1820() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
    try {
        zipArchiveInputStream0.getNextEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.PushbackInputStream"", e);
    }
}",0,
project,0,test1921,"public void test1921() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = null;
    try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, """", true, true);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        //
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
