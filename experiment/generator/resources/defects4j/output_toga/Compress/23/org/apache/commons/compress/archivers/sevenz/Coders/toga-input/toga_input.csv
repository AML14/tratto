focal_method,test_prefix,docstring
"static OutputStream addEncoder(final OutputStream out, final SevenZMethod method, final byte[] password) throws IOException {
    for (final CoderId coderId : coderTable) {
        if (coderId.method.equals(method)) {
            return coderId.coder.encode(out, password);
        }
    }
    throw new IOException(""Unsupported compression method "" + method);
}","public void test022() throws Throwable {
    byte[] byteArray0 = new byte[1];
    SevenZMethod sevenZMethod0 = SevenZMethod.BZIP2;
    // Undeclared exception!
    try {
        Coders.addEncoder((OutputStream) null, sevenZMethod0, byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"", e);
    }
}",""
"static OutputStream addEncoder(final OutputStream out, final SevenZMethod method, final byte[] password) throws IOException {
    for (final CoderId coderId : coderTable) {
        if (coderId.method.equals(method)) {
            return coderId.coder.encode(out, password);
        }
    }
    throw new IOException(""Unsupported compression method "" + method);
}","public void test033() throws Throwable {
    SevenZMethod sevenZMethod0 = SevenZMethod.DEFLATE;
    byte[] byteArray0 = new byte[1];
    // Undeclared exception!
    try {
        Coders.addEncoder((OutputStream) null, sevenZMethod0, byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.zip.DeflaterOutputStream"", e);
    }
}",""
"static OutputStream addEncoder(final OutputStream out, final SevenZMethod method, final byte[] password) throws IOException {
    for (final CoderId coderId : coderTable) {
        if (coderId.method.equals(method)) {
            return coderId.coder.encode(out, password);
        }
    }
    throw new IOException(""Unsupported compression method "" + method);
}","public void test044() throws Throwable {
    byte[] byteArray0 = new byte[1];
    SevenZMethod sevenZMethod0 = SevenZMethod.COPY;
    OutputStream outputStream0 = Coders.addEncoder((OutputStream) null, sevenZMethod0, byteArray0);
    assertNull(outputStream0);
}",""
"static InputStream addDecoder(final InputStream is, final Coder coder, final byte[] password) throws IOException {
    for (final CoderId coderId : coderTable) {
        if (Arrays.equals(coderId.method.getId(), coder.decompressionMethodId)) {
            return coderId.coder.decode(is, coder, password);
        }
    }
    throw new IOException(""Unsupported compression method "" + Arrays.toString(coder.decompressionMethodId));
}","public void test055() throws Throwable {
    Coder coder0 = new Coder();
    byte[] byteArray0 = new byte[1];
    coder0.decompressionMethodId = byteArray0;
    InputStream inputStream0 = Coders.addDecoder((InputStream) null, coder0, byteArray0);
    assertNull(inputStream0);
}",""
"static OutputStream addEncoder(final OutputStream out, final SevenZMethod method, final byte[] password) throws IOException {
    for (final CoderId coderId : coderTable) {
        if (coderId.method.equals(method)) {
            return coderId.coder.encode(out, password);
        }
    }
    throw new IOException(""Unsupported compression method "" + method);
}","public void test077() throws Throwable {
    SevenZMethod sevenZMethod0 = SevenZMethod.AES256SHA256;
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        Coders.addEncoder((OutputStream) null, sevenZMethod0, byteArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // method doesn't support writing
        //
        verifyException(""org.apache.commons.compress.archivers.sevenz.Coders$CoderBase"", e);
    }
}",""
"static InputStream addDecoder(final InputStream is, final Coder coder, final byte[] password) throws IOException {
    for (final CoderId coderId : coderTable) {
        if (Arrays.equals(coderId.method.getId(), coder.decompressionMethodId)) {
            return coderId.coder.decode(is, coder, password);
        }
    }
    throw new IOException(""Unsupported compression method "" + Arrays.toString(coder.decompressionMethodId));
}","public void test088() throws Throwable {
    byte[] byteArray0 = new byte[1];
    Coder coder0 = new Coder();
    try {
        Coders.addDecoder((InputStream) null, coder0, byteArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unsupported compression method null
        //
        verifyException(""org.apache.commons.compress.archivers.sevenz.Coders"", e);
    }
}",""
"static OutputStream addEncoder(final OutputStream out, final SevenZMethod method, final byte[] password) throws IOException {
    for (final CoderId coderId : coderTable) {
        if (coderId.method.equals(method)) {
            return coderId.coder.encode(out, password);
        }
    }
    throw new IOException(""Unsupported compression method "" + method);
}","public void test099() throws Throwable {
    byte[] byteArray0 = new byte[10];
    try {
        Coders.addEncoder((OutputStream) null, (SevenZMethod) null, byteArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unsupported compression method null
        //
        verifyException(""org.apache.commons.compress.archivers.sevenz.Coders"", e);
    }
}",""
