project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 3);
    byte[] byteArray0 = new byte[6];
    tarArchiveOutputStream0.write(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
}",1,
project,0,test011,"public void test011() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 2958, ""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"");
    tarArchiveOutputStream0.setLongFileMode(898);
}",0,
project,0,test022,"public void test022() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 2958, ""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"");
    tarArchiveOutputStream0.finish();
    tarArchiveOutputStream0.getCount();
}",0,
project,0,test033,"public void test033() throws Throwable {
    File file0 = MockFile.createTempFile(""XJ_"", ""XJ_"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, ""XJ_"");
    tarArchiveOutputStream0.createArchiveEntry(file0, """");
}",0,
project,0,test044,"public void test044() throws Throwable {
    File file0 = MockFile.createTempFile(""XJ_"", ""XJ_"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, ""XJ_"");
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.writePaxHeaders((String) null, map0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    MockFile mockFile0 = new MockFile(""wIp{s2qfiJD2"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, (byte) 48, 193);
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.writePaxHeaders("""", map0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 193
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 249);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.flush();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.FilterOutputStream"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2241);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.utils.CountingOutputStream"", e);
    }
}",1,
project,0,test088,"public void test088() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Ejd5R|eeb^5z4*"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 57);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",1,
project,0,test099,"public void test099() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(pipedOutputStream0, 468);
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",1,
project,0,test1010,"public void test1010() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2241);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.close();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.utils.CountingOutputStream"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, ""1*vz+F`<>Ky&"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // 1*vz+F`<>Ky&
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2028, ""#"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // #
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("".m7{au(E"", true);
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 3, 0, """");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        //
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""size"");
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, (-1823), (-192), ""size"");
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    File file0 = MockFile.createTempFile(""])u3J8n5D`"", ""])u3J8n5D`"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 0, 0, (String) null);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // / by zero
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream(bufferedOutputStream0, (-295));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 2958, ""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"");
    tarArchiveOutputStream0.write((byte[]) null, 0, 0);
}",1,
project,0,test2020,"public void test2020() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
    CountingOutputStream countingOutputStream0 = new CountingOutputStream(mockPrintStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(countingOutputStream0, 76, 9617, (String) null);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 3825, 3825);
    tarArchiveOutputStream0.getBytesWritten();
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 3825, 3825);
    MockFile mockFile0 = new MockFile((File) null, """");
    tarArchiveOutputStream0.createArchiveEntry(mockFile0, ""uid"");
}",1,
project,0,test2323,"public void test2323() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(filterOutputStream0);
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    tarArchiveOutputStream0.writePaxHeaders("">mytEE(@T>JeW"", map0);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 1);
    byte[] byteArray0 = new byte[9];
    try {
        tarArchiveOutputStream0.write(byteArray0, (int) (byte) 76, (int) (byte) 97);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // request to write '97' bytes exceeds size in header of '0' bytes for entry 'null'
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test2525,"public void test2525() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2241);
    HashMap<String, String> hashMap0 = new HashMap<String, String>(2, 1);
    hashMap0.put(""org.apache.commons.compress.archivers.zip.ZipShort"", ""org.apache.commons.compress.archivers.zip.ZipShort"");
    tarArchiveOutputStream0.writePaxHeaders(""org.apache.commons.compress.archivers.zip.ZipShort"", hashMap0);
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    try {
        tarArchiveOutputStream0.closeArchiveEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No current entry to close
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test2727,"public void test2727() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    MockFile mockFile1 = new MockFile(mockFile0, ""gid"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    tarArchiveOutputStream0.close();
    try {
        tarArchiveOutputStream0.closeArchiveEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream has already been finished
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test2828,"public void test2828() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2241);
    HashMap<String, String> hashMap0 = new HashMap<String, String>(2, 1);
    tarArchiveOutputStream0.writePaxHeaders(""org.apache.commons.compress.archivers.zip.ZipShort"", hashMap0);
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    File file0 = MockFile.createTempFile(""HLg^m']W't D%} ou"", (String) null);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.close();
    tarArchiveOutputStream0.getBytesWritten();
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""minor device number"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 100);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""minor device number"", (byte) 87);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    File file0 = MockFile.createTempFile(""HLg^m']W't D%} ou"", (String) null);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    File file0 = MockFile.createTempFile(""HLg^m']W't D%} ou"", (String) null);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.setBigNumberMode(977);
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    File file0 = MockFile.createTempFile(""XJ_"", ""XJ_"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, ""XJ_"");
    tarArchiveOutputStream0.flush();
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 2958, ""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"");
    tarArchiveOutputStream0.finish();
    MockFile mockFile0 = new MockFile(""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"", ""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"");
    try {
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, ""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream has already been finished
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    File file0 = MockFile.createTempFile(""HLg^m']W't D%} ou"", (String) null);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    int int0 = tarArchiveOutputStream0.getRecordSize();
    assertEquals(512, int0);
}",0,"assertEquals(0, int0)"
project,0,test3636,"public void test3636() throws Throwable {
    File file0 = MockFile.createTempFile(""iG+${/kZ*G4fl"", ""iG+${/kZ*G4fl"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 479);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.close();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    File file0 = MockFile.createTempFile(""HLg^m']W't D%} ou"", (String) null);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    int int0 = tarArchiveOutputStream0.getCount();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test3838,"public void test3838() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 474, 88);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""gu{f4#3*aBo5{"");
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.apache.commons.compress.archivers.zip.ZipArchiveEntry cannot be cast to org.apache.commons.compress.archivers.tar.TarArchiveEntry
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
