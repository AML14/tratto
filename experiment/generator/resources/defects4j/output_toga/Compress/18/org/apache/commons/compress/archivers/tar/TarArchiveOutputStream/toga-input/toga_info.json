{
  "test1212" : {
    "methodSignature" : "public TarArchiveOutputStream(OutputStream os, int blockSize, String encoding)",
    "methodName" : "TarArchiveOutputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = null;\n    tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2028, \"#\");\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException",
    "methodName" : "writePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(filterOutputStream0);\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    tarArchiveOutputStream0.writePaxHeaders(\">mytEE(@T>JeW\", map0);\n}",
    "testName" : "test2323"
  },
  "test3434" : {
    "methodSignature" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException",
    "methodName" : "createArchiveEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 2958, \"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField\");\n    tarArchiveOutputStream0.finish();\n    MockFile mockFile0 = new MockFile(\"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField\", \"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField\");\n    tarArchiveOutputStream0.createArchiveEntry(mockFile0, \"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField\");\n}",
    "testName" : "test3434"
  },
  "test1313" : {
    "methodSignature" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize, String encoding)",
    "methodName" : "TarArchiveOutputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(\".m7{au(E\", true);\n    TarArchiveOutputStream tarArchiveOutputStream0 = null;\n    tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 3, 0, \"\");\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
    "methodName" : "write",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 1);\n    byte[] byteArray0 = new byte[9];\n    tarArchiveOutputStream0.write(byteArray0, (int) (byte) 76, (int) (byte) 97);\n}",
    "testName" : "test2424"
  },
  "test3535" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    File file0 = MockFile.createTempFile(\"HLg^m']W't D%} ou\", (String) null);\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);\n    int int0 = tarArchiveOutputStream0.getRecordSize();\n}",
    "testName" : "test3535"
  },
  "test1010" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2241);\n    tarArchiveOutputStream0.close();\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public long getBytesWritten()",
    "methodName" : "getBytesWritten",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 3825, 3825);\n    tarArchiveOutputStream0.getBytesWritten();\n}",
    "testName" : "test2121"
  },
  "test3232" : {
    "methodSignature" : "public void setBigNumberMode(int bigNumberMode)",
    "methodName" : "setBigNumberMode",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    File file0 = MockFile.createTempFile(\"HLg^m']W't D%} ou\", (String) null);\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);\n    tarArchiveOutputStream0.setBigNumberMode(977);\n}",
    "testName" : "test3232"
  },
  "test1111" : {
    "methodSignature" : "public TarArchiveOutputStream(OutputStream os, String encoding)",
    "methodName" : "TarArchiveOutputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = null;\n    tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, \"1*vz+F`<>Ky&\");\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException",
    "methodName" : "createArchiveEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 3825, 3825);\n    MockFile mockFile0 = new MockFile((File) null, \"\");\n    tarArchiveOutputStream0.createArchiveEntry(mockFile0, \"uid\");\n}",
    "testName" : "test2222"
  },
  "test3333" : {
    "methodSignature" : "public void flush() throws IOException",
    "methodName" : "flush",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    File file0 = MockFile.createTempFile(\"XJ_\", \"XJ_\");\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, \"XJ_\");\n    tarArchiveOutputStream0.flush();\n}",
    "testName" : "test3333"
  },
  "test011" : {
    "methodSignature" : "public void setLongFileMode(int longFileMode)",
    "methodName" : "setLongFileMode",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 2958, \"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField\");\n    tarArchiveOutputStream0.setLongFileMode(898);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException",
    "methodName" : "createArchiveEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    File file0 = MockFile.createTempFile(\"XJ_\", \"XJ_\");\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, \"XJ_\");\n    tarArchiveOutputStream0.createArchiveEntry(file0, \"\");\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException",
    "methodName" : "writePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"wIp{s2qfiJD2\");\n    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, (byte) 48, 193);\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    tarArchiveOutputStream0.writePaxHeaders(\"\", map0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public void finish() throws IOException",
    "methodName" : "finish",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2241);\n    tarArchiveOutputStream0.finish();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public void finish() throws IOException",
    "methodName" : "finish",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(pipedOutputStream0, 468);\n    tarArchiveOutputStream0.finish();\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public void closeArchiveEntry() throws IOException",
    "methodName" : "closeArchiveEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"\");\n    MockFile mockFile1 = new MockFile(mockFile0, \"gid\");\n    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);\n    tarArchiveOutputStream0.close();\n    tarArchiveOutputStream0.closeArchiveEntry();\n}",
    "testName" : "test2727"
  },
  "test3838" : {
    "methodSignature" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
    "methodName" : "putArchiveEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 474, 88);\n    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(\"gu{f4#3*aBo5{\");\n    tarArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException",
    "methodName" : "writePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2241);\n    HashMap<String, String> hashMap0 = new HashMap<String, String>(2, 1);\n    tarArchiveOutputStream0.writePaxHeaders(\"org.apache.commons.compress.archivers.zip.ZipShort\", hashMap0);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize, String encoding)",
    "methodName" : "TarArchiveOutputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(\"size\");\n    TarArchiveOutputStream tarArchiveOutputStream0 = null;\n    tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, (-1823), (-192), \"size\");\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException",
    "methodName" : "writePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2241);\n    HashMap<String, String> hashMap0 = new HashMap<String, String>(2, 1);\n    hashMap0.put(\"org.apache.commons.compress.archivers.zip.ZipShort\", \"org.apache.commons.compress.archivers.zip.ZipShort\");\n    tarArchiveOutputStream0.writePaxHeaders(\"org.apache.commons.compress.archivers.zip.ZipShort\", hashMap0);\n}",
    "testName" : "test2525"
  },
  "test3636" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    File file0 = MockFile.createTempFile(\"iG+${/kZ*G4fl\", \"iG+${/kZ*G4fl\");\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 479);\n    tarArchiveOutputStream0.close();\n}",
    "testName" : "test3636"
  },
  "test1515" : {
    "methodSignature" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize, String encoding)",
    "methodName" : "TarArchiveOutputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    File file0 = MockFile.createTempFile(\"])u3J8n5D`\", \"])u3J8n5D`\");\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);\n    TarArchiveOutputStream tarArchiveOutputStream0 = null;\n    tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 0, 0, (String) null);\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "public void closeArchiveEntry() throws IOException",
    "methodName" : "closeArchiveEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);\n    tarArchiveOutputStream0.closeArchiveEntry();\n}",
    "testName" : "test2626"
  },
  "test3737" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    File file0 = MockFile.createTempFile(\"HLg^m']W't D%} ou\", (String) null);\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);\n    int int0 = tarArchiveOutputStream0.getCount();\n}",
    "testName" : "test3737"
  },
  "test3030" : {
    "methodSignature" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
    "methodName" : "putArchiveEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"minor device number\");\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 100);\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"minor device number\", (byte) 87);\n    tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize, String encoding)",
    "methodName" : "TarArchiveOutputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);\n    CountingOutputStream countingOutputStream0 = new CountingOutputStream(mockPrintStream0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(countingOutputStream0, 76, 9617, (String) null);\n}",
    "testName" : "test2020"
  },
  "test3131" : {
    "methodSignature" : "public void setAddPaxHeadersForNonAsciiNames(boolean b)",
    "methodName" : "setAddPaxHeadersForNonAsciiNames",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    File file0 = MockFile.createTempFile(\"HLg^m']W't D%} ou\", (String) null);\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);\n    tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);\n}",
    "testName" : "test3131"
  },
  "test000" : {
    "methodSignature" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
    "methodName" : "write",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 3);\n    byte[] byteArray0 = new byte[6];\n    tarArchiveOutputStream0.write(byteArray0, (int) (byte) (-1), (int) (byte) (-1));\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 2958, \"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField\");\n    tarArchiveOutputStream0.finish();\n    tarArchiveOutputStream0.getCount();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException",
    "methodName" : "writePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    File file0 = MockFile.createTempFile(\"XJ_\", \"XJ_\");\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, \"XJ_\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    tarArchiveOutputStream0.writePaxHeaders((String) null, map0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public void flush() throws IOException",
    "methodName" : "flush",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 249);\n    tarArchiveOutputStream0.flush();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public void finish() throws IOException",
    "methodName" : "finish",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"Ejd5R|eeb^5z4*\");\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 57);\n    tarArchiveOutputStream0.finish();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
    "methodName" : "TarArchiveOutputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);\n    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = null;\n    tarArchiveOutputStream0 = new TarArchiveOutputStream(bufferedOutputStream0, (-295));\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "public long getBytesWritten()",
    "methodName" : "getBytesWritten",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    File file0 = MockFile.createTempFile(\"HLg^m']W't D%} ou\", (String) null);\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);\n    tarArchiveOutputStream0.close();\n    tarArchiveOutputStream0.getBytesWritten();\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
    "methodName" : "write",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 2958, \"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField\");\n    tarArchiveOutputStream0.write((byte[]) null, 0, 0);\n}",
    "testName" : "test1919"
  }
}