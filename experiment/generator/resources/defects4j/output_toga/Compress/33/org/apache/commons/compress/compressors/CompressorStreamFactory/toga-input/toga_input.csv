focal_method,test_prefix,docstring
"// For Unit tests
boolean getDecompressConcatenated() {
    return decompressConcatenated;
}","public void test000() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    boolean boolean0 = compressorStreamFactory0.getDecompressConcatenated();
    assertFalse(boolean0);
}",""
"@Deprecated
public void setDecompressConcatenated(boolean decompressConcatenated) {
    if (this.decompressUntilEOF != null) {
        throw new IllegalStateException(""Cannot override the setting defined by the constructor"");
    }
    this.decompressConcatenated = decompressConcatenated;
}","public void test011() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    compressorStreamFactory0.setDecompressConcatenated(true);
}","/**
 * Whether to decompress the full input or only the first stream
 * in formats supporting multiple concatenated input streams.
 *
 * <p>This setting applies to the gzip, bzip2 and xz formats only.</p>
 *
 * @param       decompressConcatenated
 *                          if true, decompress until the end of the
 *                          input; if false, stop after the first
 *                          stream and leave the input position to point
 *                          to the next byte after the stream
 * @since 1.5
 * @deprecated 1.10 use the {@link #CompressorStreamFactory(boolean)} constructor instead
 * @throws IllegalStateException if the constructor {@link #CompressorStreamFactory(boolean)}
 * was used to create the factory
 */"
"@Deprecated
public void setDecompressConcatenated(boolean decompressConcatenated) {
    if (this.decompressUntilEOF != null) {
        throw new IllegalStateException(""Cannot override the setting defined by the constructor"");
    }
    this.decompressConcatenated = decompressConcatenated;
}","public void test022() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
    // Undeclared exception!
    try {
        compressorStreamFactory0.setDecompressConcatenated(true);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Cannot override the setting defined by the constructor
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Whether to decompress the full input or only the first stream
 * in formats supporting multiple concatenated input streams.
 *
 * <p>This setting applies to the gzip, bzip2 and xz formats only.</p>
 *
 * @param       decompressConcatenated
 *                          if true, decompress until the end of the
 *                          input; if false, stop after the first
 *                          stream and leave the input position to point
 *                          to the next byte after the stream
 * @since 1.5
 * @deprecated 1.10 use the {@link #CompressorStreamFactory(boolean)} constructor instead
 * @throws IllegalStateException if the constructor {@link #CompressorStreamFactory(boolean)}
 * was used to create the factory
 */"
"public CompressorInputStream createCompressorInputStream(final InputStream in) throws CompressorException {
    if (in == null) {
        throw new IllegalArgumentException(""Stream must not be null."");
    }
    if (!in.markSupported()) {
        throw new IllegalArgumentException(""Mark is not supported."");
    }
    final byte[] signature = new byte[12];
    in.mark(signature.length);
    try {
        int signatureLength = IOUtils.readFully(in, signature);
        in.reset();
        if (BZip2CompressorInputStream.matches(signature, signatureLength)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (GzipCompressorInputStream.matches(signature, signatureLength)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (Pack200CompressorInputStream.matches(signature, signatureLength)) {
            return new Pack200CompressorInputStream(in);
        }
        if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (ZCompressorInputStream.matches(signature, signatureLength)) {
            return new ZCompressorInputStream(in);
        }
        if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) {
            return new LZMACompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Failed to detect Compressor from InputStream."", e);
    }
    throw new CompressorException(""No Compressor found for the stream signature."");
}","public void test033() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    try {
        compressorStreamFactory0.createCompressorInputStream((InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // No Compressor found for the stream signature.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create an compressor input stream from an input stream, autodetecting
 * the compressor type from the first few bytes of the stream. The InputStream
 * must support marks, like BufferedInputStream.
 *
 * @param in the input stream
 * @return the compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the stream is null or does not support mark
 * @since 1.1
 */"
"public CompressorInputStream createCompressorInputStream(final InputStream in) throws CompressorException {
    if (in == null) {
        throw new IllegalArgumentException(""Stream must not be null."");
    }
    if (!in.markSupported()) {
        throw new IllegalArgumentException(""Mark is not supported."");
    }
    final byte[] signature = new byte[12];
    in.mark(signature.length);
    try {
        int signatureLength = IOUtils.readFully(in, signature);
        in.reset();
        if (BZip2CompressorInputStream.matches(signature, signatureLength)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (GzipCompressorInputStream.matches(signature, signatureLength)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (Pack200CompressorInputStream.matches(signature, signatureLength)) {
            return new Pack200CompressorInputStream(in);
        }
        if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (ZCompressorInputStream.matches(signature, signatureLength)) {
            return new ZCompressorInputStream(in);
        }
        if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) {
            return new LZMACompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Failed to detect Compressor from InputStream."", e);
    }
    throw new CompressorException(""No Compressor found for the stream signature."");
}","public void test044() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    // Undeclared exception!
    try {
        compressorStreamFactory0.createCompressorInputStream((InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Stream must not be null.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create an compressor input stream from an input stream, autodetecting
 * the compressor type from the first few bytes of the stream. The InputStream
 * must support marks, like BufferedInputStream.
 *
 * @param in the input stream
 * @return the compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the stream is null or does not support mark
 * @since 1.1
 */"
"public CompressorInputStream createCompressorInputStream(final InputStream in) throws CompressorException {
    if (in == null) {
        throw new IllegalArgumentException(""Stream must not be null."");
    }
    if (!in.markSupported()) {
        throw new IllegalArgumentException(""Mark is not supported."");
    }
    final byte[] signature = new byte[12];
    in.mark(signature.length);
    try {
        int signatureLength = IOUtils.readFully(in, signature);
        in.reset();
        if (BZip2CompressorInputStream.matches(signature, signatureLength)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (GzipCompressorInputStream.matches(signature, signatureLength)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (Pack200CompressorInputStream.matches(signature, signatureLength)) {
            return new Pack200CompressorInputStream(in);
        }
        if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (ZCompressorInputStream.matches(signature, signatureLength)) {
            return new ZCompressorInputStream(in);
        }
        if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) {
            return new LZMACompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Failed to detect Compressor from InputStream."", e);
    }
    throw new CompressorException(""No Compressor found for the stream signature."");
}","public void test055() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    // Undeclared exception!
    try {
        compressorStreamFactory0.createCompressorInputStream((InputStream) pipedInputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Mark is not supported.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create an compressor input stream from an input stream, autodetecting
 * the compressor type from the first few bytes of the stream. The InputStream
 * must support marks, like BufferedInputStream.
 *
 * @param in the input stream
 * @return the compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the stream is null or does not support mark
 * @since 1.1
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test066() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    // Undeclared exception!
    try {
        compressorStreamFactory0.createCompressorInputStream((String) null, (InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Compressor name and stream must not be null.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public int getSize() {
    return size;
}","public void test077() throws Throwable {
    byte[] byteArray0 = new byte[10];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    SnappyCompressorInputStream snappyCompressorInputStream0 = (SnappyCompressorInputStream) compressorStreamFactory0.createCompressorInputStream(""snappy-raw"", (InputStream) byteArrayInputStream0);
    assertEquals(0, snappyCompressorInputStream0.getSize());
}","/**
 * Get the uncompressed size of the stream
 *
 * @return the uncompressed size
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test088() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    // Undeclared exception!
    try {
        compressorStreamFactory0.createCompressorInputStream(""pack200"", (InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Compressor name and stream must not be null.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test099() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    try {
        compressorStreamFactory0.createCompressorInputStream(""gz"", (InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not create CompressorInputStream.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1010() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    try {
        compressorStreamFactory0.createCompressorInputStream(""bzip2"", (InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not create CompressorInputStream.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1111() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        compressorStreamFactory0.createCompressorInputStream(""xz"", (InputStream) pipedInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not create CompressorInputStream.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1212() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        compressorStreamFactory0.createCompressorInputStream(""lzma"", (InputStream) pipedInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not create CompressorInputStream.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1313() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    try {
        compressorStreamFactory0.createCompressorInputStream(""pack200"", (InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not create CompressorInputStream.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1515() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        compressorStreamFactory0.createCompressorInputStream(""snappy-framed"", (InputStream) pipedInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not create CompressorInputStream.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1616() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        compressorStreamFactory0.createCompressorInputStream(""z"", (InputStream) pipedInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not create CompressorInputStream.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException {
    if (name == null || in == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorInputStream(in, decompressConcatenated);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorInputStream(in, decompressConcatenated);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorInputStream(in, decompressConcatenated);
        }
        if (LZMA.equalsIgnoreCase(name)) {
            return new LZMACompressorInputStream(in);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorInputStream(in);
        }
        if (SNAPPY_RAW.equalsIgnoreCase(name)) {
            return new SnappyCompressorInputStream(in);
        }
        if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
            return new FramedSnappyCompressorInputStream(in);
        }
        if (Z.equalsIgnoreCase(name)) {
            return new ZCompressorInputStream(in);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorInputStream(in);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorInputStream."", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1717() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        compressorStreamFactory0.createCompressorInputStream(""n2#_qxif8|"", (InputStream) pipedInputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Compressor: n2#_qxif8| not found.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create a compressor input stream from a compressor name and an input stream.
 *
 * @param name of the compressor,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ}, {@value #LZMA},
 * {@value #PACK200}, {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED},
 * {@value #Z} or {@value #DEFLATE}
 * @param in the input stream
 * @return compressor input stream
 * @throws CompressorException if the compressor name is not known
 * @throws IllegalArgumentException if the name or input stream is null
 */"
"public CompressorOutputStream createCompressorOutputStream(final String name, final OutputStream out) throws CompressorException {
    if (name == null || out == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorOutputStream(out);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorOutputStream(out);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorOutputStream(out);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorOutputStream(out);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorOutputStream(out);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorOutputStream"", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1818() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    // Undeclared exception!
    try {
        compressorStreamFactory0.createCompressorOutputStream((String) null, (OutputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Compressor name and stream must not be null.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create an compressor output stream from an compressor name and an output stream.
 *
 * @param name the compressor name,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ},
 * {@value #PACK200} or {@value #DEFLATE}
 * @param out the output stream
 * @return the compressor output stream
 * @throws CompressorException if the archiver name is not known
 * @throws IllegalArgumentException if the archiver name or stream is null
 */"
"public CompressorOutputStream createCompressorOutputStream(final String name, final OutputStream out) throws CompressorException {
    if (name == null || out == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorOutputStream(out);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorOutputStream(out);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorOutputStream(out);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorOutputStream(out);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorOutputStream(out);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorOutputStream"", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test1919() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    try {
        compressorStreamFactory0.createCompressorOutputStream(""lzma"", pipedOutputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Compressor: lzma not found.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create an compressor output stream from an compressor name and an output stream.
 *
 * @param name the compressor name,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ},
 * {@value #PACK200} or {@value #DEFLATE}
 * @param out the output stream
 * @return the compressor output stream
 * @throws CompressorException if the archiver name is not known
 * @throws IllegalArgumentException if the archiver name or stream is null
 */"
"public CompressorOutputStream createCompressorOutputStream(final String name, final OutputStream out) throws CompressorException {
    if (name == null || out == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorOutputStream(out);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorOutputStream(out);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorOutputStream(out);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorOutputStream(out);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorOutputStream(out);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorOutputStream"", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test2020() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    // Undeclared exception!
    try {
        compressorStreamFactory0.createCompressorOutputStream(""xz"", (OutputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Compressor name and stream must not be null.
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create an compressor output stream from an compressor name and an output stream.
 *
 * @param name the compressor name,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ},
 * {@value #PACK200} or {@value #DEFLATE}
 * @param out the output stream
 * @return the compressor output stream
 * @throws CompressorException if the archiver name is not known
 * @throws IllegalArgumentException if the archiver name or stream is null
 */"
"public CompressorOutputStream createCompressorOutputStream(final String name, final OutputStream out) throws CompressorException {
    if (name == null || out == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorOutputStream(out);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorOutputStream(out);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorOutputStream(out);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorOutputStream(out);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorOutputStream(out);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorOutputStream"", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test2121() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    try {
        compressorStreamFactory0.createCompressorOutputStream(""gz"", pipedOutputStream0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Could not create CompressorOutputStream
        //
        verifyException(""org.apache.commons.compress.compressors.CompressorStreamFactory"", e);
    }
}","/**
 * Create an compressor output stream from an compressor name and an output stream.
 *
 * @param name the compressor name,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ},
 * {@value #PACK200} or {@value #DEFLATE}
 * @param out the output stream
 * @return the compressor output stream
 * @throws CompressorException if the archiver name is not known
 * @throws IllegalArgumentException if the archiver name or stream is null
 */"
"public CompressorOutputStream createCompressorOutputStream(final String name, final OutputStream out) throws CompressorException {
    if (name == null || out == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorOutputStream(out);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorOutputStream(out);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorOutputStream(out);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorOutputStream(out);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorOutputStream(out);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorOutputStream"", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test2426() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream(""pack200"", pipedOutputStream0);
    assertNotNull(compressorOutputStream0);
}","/**
 * Create an compressor output stream from an compressor name and an output stream.
 *
 * @param name the compressor name,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ},
 * {@value #PACK200} or {@value #DEFLATE}
 * @param out the output stream
 * @return the compressor output stream
 * @throws CompressorException if the archiver name is not known
 * @throws IllegalArgumentException if the archiver name or stream is null
 */"
"public CompressorOutputStream createCompressorOutputStream(final String name, final OutputStream out) throws CompressorException {
    if (name == null || out == null) {
        throw new IllegalArgumentException(""Compressor name and stream must not be null."");
    }
    try {
        if (GZIP.equalsIgnoreCase(name)) {
            return new GzipCompressorOutputStream(out);
        }
        if (BZIP2.equalsIgnoreCase(name)) {
            return new BZip2CompressorOutputStream(out);
        }
        if (XZ.equalsIgnoreCase(name)) {
            return new XZCompressorOutputStream(out);
        }
        if (PACK200.equalsIgnoreCase(name)) {
            return new Pack200CompressorOutputStream(out);
        }
        if (DEFLATE.equalsIgnoreCase(name)) {
            return new DeflateCompressorOutputStream(out);
        }
    } catch (IOException e) {
        throw new CompressorException(""Could not create CompressorOutputStream"", e);
    }
    throw new CompressorException(""Compressor: "" + name + "" not found."");
}","public void test2527() throws Throwable {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream(""deflate"", byteArrayOutputStream0);
    assertNotNull(compressorOutputStream0);
}","/**
 * Create an compressor output stream from an compressor name and an output stream.
 *
 * @param name the compressor name,
 * i.e. {@value #GZIP}, {@value #BZIP2}, {@value #XZ},
 * {@value #PACK200} or {@value #DEFLATE}
 * @param out the output stream
 * @return the compressor output stream
 * @throws CompressorException if the archiver name is not known
 * @throws IllegalArgumentException if the archiver name or stream is null
 */"
