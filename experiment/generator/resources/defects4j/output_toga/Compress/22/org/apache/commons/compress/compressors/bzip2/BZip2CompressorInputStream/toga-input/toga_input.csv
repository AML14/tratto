focal_method,test_prefix,docstring
"public static boolean matches(byte[] signature, int length) {
    if (length < 3) {
        return false;
    }
    if (signature[0] != 'B') {
        return false;
    }
    if (signature[1] != 'Z') {
        return false;
    }
    if (signature[2] != 'h') {
        return false;
    }
    return true;
}","public void test00() throws Throwable {
    // Undeclared exception!
    try {
        BZip2CompressorInputStream.matches((byte[]) null, 1027);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"", e);
    }
}","/**
 * Checks if the signature matches what is expected for a bzip2 file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this stream is a bzip2 compressed stream, false otherwise
 *
 * @since 1.1
 */"
"public static boolean matches(byte[] signature, int length) {
    if (length < 3) {
        return false;
    }
    if (signature[0] != 'B') {
        return false;
    }
    if (signature[1] != 'Z') {
        return false;
    }
    if (signature[2] != 'h') {
        return false;
    }
    return true;
}","public void test11() throws Throwable {
    byte[] byteArray0 = new byte[2];
    boolean boolean0 = BZip2CompressorInputStream.matches(byteArray0, 0);
    assertFalse(boolean0);
}","/**
 * Checks if the signature matches what is expected for a bzip2 file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this stream is a bzip2 compressed stream, false otherwise
 *
 * @since 1.1
 */"
"public static boolean matches(byte[] signature, int length) {
    if (length < 3) {
        return false;
    }
    if (signature[0] != 'B') {
        return false;
    }
    if (signature[1] != 'Z') {
        return false;
    }
    if (signature[2] != 'h') {
        return false;
    }
    return true;
}","public void test22() throws Throwable {
    byte[] byteArray0 = new byte[8];
    boolean boolean0 = BZip2CompressorInputStream.matches(byteArray0, 849);
    assertFalse(boolean0);
}","/**
 * Checks if the signature matches what is expected for a bzip2 file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this stream is a bzip2 compressed stream, false otherwise
 *
 * @since 1.1
 */"
"public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {
    this.in = in;
    this.decompressConcatenated = decompressConcatenated;
    init(true);
    initBlock();
    setupBlock();
}","public void test33() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
    BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
    try {
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream(dataInputStream0, true);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // Stream is not in the BZip2 format
        //
        verifyException(""org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"", e);
    }
}","/**
 * Constructs a new BZip2CompressorInputStream which decompresses bytes
 * read from the specified stream.
 *
 * @param in the InputStream from which this object should be created
 * @param decompressConcatenated
 *                     if true, decompress until the end of the input;
 *                     if false, stop after the first .bz2 stream and
 *                     leave the input position to point to the next
 *                     byte after the .bz2 stream
 *
 * @throws IOException
 *             if the stream content is malformed or an I/O error occurs.
 * @throws NullPointerException
 *             if <tt>in == null</tt>
 */"
"public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {
    this.in = in;
    this.decompressConcatenated = decompressConcatenated;
    init(true);
    initBlock();
    setupBlock();
}","public void test44() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
    try {
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream(byteArrayInputStream0, false);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // Stream is not in the BZip2 format
        //
        verifyException(""org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"", e);
    }
}","/**
 * Constructs a new BZip2CompressorInputStream which decompresses bytes
 * read from the specified stream.
 *
 * @param in the InputStream from which this object should be created
 * @param decompressConcatenated
 *                     if true, decompress until the end of the input;
 *                     if false, stop after the first .bz2 stream and
 *                     leave the input position to point to the next
 *                     byte after the .bz2 stream
 *
 * @throws IOException
 *             if the stream content is malformed or an I/O error occurs.
 * @throws NullPointerException
 *             if <tt>in == null</tt>
 */"
"public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {
    this.in = in;
    this.decompressConcatenated = decompressConcatenated;
    init(true);
    initBlock();
    setupBlock();
}","public void test55() throws Throwable {
    DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, (InputStream) null);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
    BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
    try {
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream(bufferedInputStream0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.DataInputStream"", e);
    }
}","/**
 * Constructs a new BZip2CompressorInputStream which decompresses bytes
 * read from the specified stream.
 *
 * @param in the InputStream from which this object should be created
 * @param decompressConcatenated
 *                     if true, decompress until the end of the input;
 *                     if false, stop after the first .bz2 stream and
 *                     leave the input position to point to the next
 *                     byte after the .bz2 stream
 *
 * @throws IOException
 *             if the stream content is malformed or an I/O error occurs.
 * @throws NullPointerException
 *             if <tt>in == null</tt>
 */"
"public BZip2CompressorInputStream(final InputStream in) throws IOException {
    this(in, false);
}","public void test66() throws Throwable {
    BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
    try {
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream((InputStream) null);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // No InputStream
        //
        verifyException(""org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"", e);
    }
}","/**
 * Constructs a new BZip2CompressorInputStream which decompresses bytes
 * read from the specified stream. This doesn't suppprt decompressing
 * concatenated .bz2 files.
 *
 * @throws IOException
 *             if the stream content is malformed or an I/O error occurs.
 * @throws NullPointerException
 *             if <tt>in == null</tt>
 */"
