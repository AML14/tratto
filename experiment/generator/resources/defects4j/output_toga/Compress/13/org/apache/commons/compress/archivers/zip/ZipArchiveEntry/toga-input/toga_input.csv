focal_method,test_prefix,docstring
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test000() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes((-1069L));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1069L), zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test001() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes((-1069L));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test012() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setUnixMode((-2140976120));
    zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(19464, zipArchiveEntry1.getUnixMode());
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getPlatform() {
    return platform;
}","public void test013() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setUnixMode((-2140976120));
    zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(3, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test024() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes((-9));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-9), zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test025() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes((-9));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"@Override
public int getMethod() {
    return method;
}","public void test036() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test037() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"public int getPlatform() {
    return platform;
}","public void test038() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test039() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public long getSize() {
    return size;
}","public void test0310() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test0311() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test0312() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""0q"");
    MockFile mockFile0 = new MockFile(""0q"", ""0q"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""0q"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test0413() throws Throwable {
    MockFile mockFile0 = new MockFile(""0jM8;"", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setUnixMode((-539));
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(3, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test0414() throws Throwable {
    MockFile mockFile0 = new MockFile(""0jM8;"", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setUnixMode((-539));
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(64997, int0);
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getPlatform() {
    return platform;
}","public void test0515() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setPlatform(6207);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(6207, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test0516() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setPlatform(6207);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test0617() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test0618() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test0619() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test0620() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test0621() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test0722() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""-/~Q|,v5/Py$`wt"");
    zipArchiveEntry0.setMethod(1907);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    assertEquals(1907, zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test0723() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""-/~Q|,v5/Py$`wt"");
    zipArchiveEntry0.setMethod(1907);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",""
"@Override
public long getSize() {
    return size;
}","public void test0824() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test0825() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test0826() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test0827() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test0828() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setName(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getPlatform() {
    return platform;
}","public void test0929() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test0930() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test0931() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertTrue(boolean0);
}",""
"@Override
public long getSize() {
    return size;
}","public void test0932() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test0933() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test0934() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1035() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test1036() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1037() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1038() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test1039() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test1141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1142() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public boolean isDirectory() {
    return getName().endsWith(""/"");
}","public void test1143() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertFalse(boolean0);
}","/**
 * Is this entry a directory?
 * @return true if the entry is a directory
 */"
"public int getPlatform() {
    return platform;
}","public void test1144() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1145() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test1246() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setSize(3);
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(3L, long0);
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public long getSize() {
    return size;
}","public void test1347() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1348() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test1349() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public byte[] getRawName() {
    if (rawName != null) {
        byte[] b = new byte[rawName.length];
        System.arraycopy(rawName, 0, b, 0, rawName.length);
        return b;
    }
    return null;
}","public void test1350() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0, byteArray1.length);
}","/**
 * Returns the raw bytes that made up the name before it has been
 * converted using the configured or guessed encoding.
 *
 * <p>This method will return null if this instance has not been
 * read from an archive.</p>
 *
 * @since Apache Commons Compress 1.2
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1351() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1353() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"", byteArray0);
    byte[] byteArray1 = zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1454() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setUnixMode((byte) 19);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(1245185L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test1455() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.setUnixMode((byte) 19);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(3, int0);
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1556() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1557() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    zipArchiveEntry0.setMethod(0);
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, int0);
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1658() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    zipArchiveEntry0.setMethod(144);
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(144, int0);
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1759() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1760() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes(3);
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(3, int0);
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1861() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setInternalAttributes((-3));
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals((-3), int0);
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1962() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1963() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1964() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test1965() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test1966() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2067() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2068() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes(134695760L);
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(134695760L, long0);
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test2169() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""v<"");
    zipArchiveEntry0.setUnixMode((-404));
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(3, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2170() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""v<"");
    zipArchiveEntry0.setUnixMode((-404));
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals((-26476543L), long0);
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public void setExtraFields(ZipExtraField[] fields) {
    extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof UnparseableExtraFieldData) {
            unparseableExtra = (UnparseableExtraFieldData) fields[i];
        } else {
            extraFields.put(fields[i].getHeaderId(), fields[i]);
        }
    }
    setExtra();
}","public void test2271() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields((ZipExtraField[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Replaces all currently attached extra fields with the new array.
 * @param fields an array of extra fields
 */"
"@Override
public void setExtra(byte[] extra) throws RuntimeException {
    try {
        ZipExtraField[] local = ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ);
        mergeExtraFields(local, true);
    } catch (ZipException e) {
        // actually this is not possible as of Commons Compress 1.1
        throw new RuntimeException(""Error parsing extra fields for entry: "" + getName() + "" - "" + e.getMessage(), e);
    }
}","public void test2372() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    try {
        zipArchiveEntry0.setExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Parses the given bytes as extra field data and consumes any
 * unparseable data as an {@link UnparseableExtraFieldData}
 * instance.
 * @param extra an array of bytes to be parsed into extra fields
 * @throws RuntimeException if the bytes cannot be parsed
 * @throws RuntimeException on error
 */"
"public void setCentralDirectoryExtra(byte[] b) {
    try {
        ZipExtraField[] central = ExtraFieldUtils.parse(b, false, ExtraFieldUtils.UnparseableExtraField.READ);
        mergeExtraFields(central, false);
    } catch (ZipException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}","public void test2473() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Sets the central directory part of extra fields.
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test2574() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
    // Undeclared exception!
    try {
        zipArchiveEntry0.equals(zipArchiveEntry1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",""
"public void addExtraField(ZipExtraField ze) {
    if (ze instanceof UnparseableExtraFieldData) {
        unparseableExtra = (UnparseableExtraFieldData) ze;
    } else {
        if (extraFields == null) {
            extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
        }
        extraFields.put(ze.getHeaderId(), ze);
    }
    setExtra();
}","public void test2675() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Adds an extra field - replacing an already present extra field
 * of the same type.
 *
 * <p>If no extra field of the same type exists, the field will be
 * added as last field.</p>
 * @param ze an extra field
 */"
"public void addExtraField(ZipExtraField ze) {
    if (ze instanceof UnparseableExtraFieldData) {
        unparseableExtra = (UnparseableExtraFieldData) ze;
    } else {
        if (extraFields == null) {
            extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
        }
        extraFields.put(ze.getHeaderId(), ze);
    }
    setExtra();
}","public void test2776() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
    zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Zip64 extended information must contain both size values in the local file header.
        //
        verifyException(""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"", e);
    }
}","/**
 * Adds an extra field - replacing an already present extra field
 * of the same type.
 *
 * <p>If no extra field of the same type exists, the field will be
 * added as last field.</p>
 * @param ze an extra field
 */"
"public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException {
    this((java.util.zip.ZipEntry) entry);
    setInternalAttributes(entry.getInternalAttributes());
    setExternalAttributes(entry.getExternalAttributes());
    setExtraFields(entry.getExtraFields(true));
}","public void test2877() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
    this.size = entry.getSize();
}","public void test2978() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public ZipArchiveEntry(String name) {
    super(name);
    setName(name);
}","public void test3079() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // name
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with the specified name.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param name the name of the entry
 */"
"public ZipArchiveEntry(File inputFile, String entryName) {
    this(inputFile.isDirectory() && !entryName.endsWith(""/"") ? entryName + ""/"" : entryName);
    if (inputFile.isFile()) {
        setSize(inputFile.length());
    }
    setTime(inputFile.lastModified());
    // TODO are there any other fields we can set here?
}","public void test3180() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, ""s1aT[?@{%;&56t6i`d"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry taking some information from the given
 * file and using the provided name.
 *
 * <p>The name will be adjusted to end with a forward slash ""/"" if
 * the file is a directory.  If the file is not a directory a
 * potential trailing forward slash will be stripped from the
 * entry name.</p>
 */"
"public int getPlatform() {
    return platform;
}","public void test3281() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test3282() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test3283() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public String getName() {
    return name == null ? super.getName() : name;
}","public void test3284() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertNotNull(string0);
}","/**
 * Get the name of the entry.
 * @return the entry name
 */"
"@Override
public int getMethod() {
    return method;
}","public void test3285() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3286() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName((String) null, byteArray0);
    String string0 = zipArchiveEntry0.getName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test3387() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test3388() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test3389() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test3390() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3391() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    zipArchiveEntry0.getName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public UnparseableExtraFieldData getUnparseableExtraFieldData() {
    return unparseableExtra;
}","public void test3492() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    assertNotNull(unparseableExtraFieldData0);
}","/**
 * Looks up extra field data that couldn't be parsed correctly.
 *
 * @return null if no such field exists.
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test3493() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test3494() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3495() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test3496() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 1;
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test3597() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3598() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public ZipExtraField[] getExtraFields(boolean includeUnparseable) {
    if (extraFields == null) {
        return !includeUnparseable || unparseableExtra == null ? new ZipExtraField[0] : new ZipExtraField[] { unparseableExtra };
    }
    List<ZipExtraField> result = new ArrayList<ZipExtraField>(extraFields.values());
    if (includeUnparseable && unparseableExtra != null) {
        result.add(unparseableExtra);
    }
    return result.toArray(new ZipExtraField[0]);
}","public void test3599() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals(1, zipExtraFieldArray0.length);
}","/**
 * Retrieves extra fields.
 * @param includeUnparseable whether to also return unparseable
 * extra fields as {@link UnparseableExtraFieldData} if such data
 * exists.
 * @return an array of the extra fields
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test35100() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test36101() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test36102() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test36103() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test36104() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test36105() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getExtraFields(false);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test37106() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test37107() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test37108() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test37109() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test37110() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test38111() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test38112() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test38113() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test38114() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test38115() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public void setExtraFields(ZipExtraField[] fields) {
    extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof UnparseableExtraFieldData) {
            unparseableExtra = (UnparseableExtraFieldData) fields[i];
        } else {
            extraFields.put(fields[i].getHeaderId(), fields[i]);
        }
    }
    setExtra();
}","public void test39116() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipExtraFieldArray0[0] = (ZipExtraField) unparseableExtraFieldData0;
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipExtraFieldArray0[1] = (ZipExtraField) jarMarker0;
    ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(3);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, (ZipEightByteInteger) null, zipEightByteInteger0, (ZipLong) null);
    zipExtraFieldArray0[2] = (ZipExtraField) zip64ExtendedInformationExtraField0;
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""E)q08!d"", byteArray0);
    zipExtraFieldArray0[3] = (ZipExtraField) unicodePathExtraField0;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Zip64 extended information must contain both size values in the local file header.
        //
        verifyException(""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"", e);
    }
}","/**
 * Replaces all currently attached extra fields with the new array.
 * @param fields an array of extra fields
 */"
"@Override
public void setMethod(int method) {
    if (method < 0) {
        throw new IllegalArgumentException(""ZIP compression method can not be negative: "" + method);
    }
    this.method = method;
}","public void test40117() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setMethod((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Sets the compression method of this entry.
 *
 * @param method compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
    this.size = entry.getSize();
}","public void test41118() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""iT~$"");
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"@Override
public int getMethod() {
    return method;
}","public void test42119() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test42120() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0L, long0);
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test42121() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test42122() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test42123() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test43124() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test43125() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test43126() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test43127() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test43128() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals((-1), int0);
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test44129() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test44130() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test44131() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test44132() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test44133() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""qv^9!#T1s!#T"");
    zipArchiveEntry0.isDirectory();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test45134() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test45135() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0L, long0);
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test45136() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test45137() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test45138() throws Throwable {
    MockFile mockFile0 = new MockFile(""Q>w:2K1~"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""s%8DMZ[CIQg{.q!x"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getPlatform() {
    return platform;
}","public void test46139() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0, int0);
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test46140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test46141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test46142() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test46143() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test47144() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test47145() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",""
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test48146() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0, int0);
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test48147() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test48148() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test48149() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test48150() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test49151() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",""
"@Override
public int getMethod() {
    return method;
}","public void test49152() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test49153() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test49154() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test49155() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[7];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1L), zipArchiveEntry1.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test50156() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test50157() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry0.setCompressedSize(65280L);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test51159() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry0.setCrc(0);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"@Override
public int getMethod() {
    return method;
}","public void test52160() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setMethod(31);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(31, zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test52161() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setMethod(31);
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test53162() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes(3468L);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(3468L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test53163() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes(3468L);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test54164() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode((byte) 3);
    zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(3, zipArchiveEntry0.getUnixMode());
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test55165() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes(3);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(3, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test55166() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setInternalAttributes(3);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test56167() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"");
    Object object0 = zipArchiveEntry0.clone();
    assertTrue(object0.equals((Object) zipArchiveEntry0));
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test56168() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"");
    Object object0 = zipArchiveEntry0.clone();
    zipArchiveEntry0.setTime(750L);
    boolean boolean0 = zipArchiveEntry0.equals(object0);
    assertFalse(boolean0);
}",""
"@Override
public int getMethod() {
    return method;
}","public void test57169() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test57170() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test57171() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertTrue(boolean0);
}",""
"@Override
public long getSize() {
    return size;
}","public void test57172() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1L), zipArchiveEntry1.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test57173() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test57174() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment("""");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test58176() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setComment("""");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test58177() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setComment("""");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test59178() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test59179() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"@Override
public int getMethod() {
    return method;
}","public void test59180() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test59181() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test59182() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test59183() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    zipArchiveEntry0.setComment(""qqQkqe~qA[E"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getPlatform() {
    return platform;
}","public void test60184() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test60185() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test60186() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"@Override
public long getSize() {
    return size;
}","public void test60187() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test60188() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test60189() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test60190() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test61191() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test61192() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test61193() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test61194() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertFalse(boolean0);
}",""
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test61195() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test61196() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"", "":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    boolean boolean0 = zipArchiveEntry0.equals("":m:y21!PS"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test62197() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test62198() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test62199() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test62200() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test62201() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test62202() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertFalse(boolean0);
}",""
"@Override
public long getSize() {
    return size;
}","public void test63203() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setSize(0);
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test63204() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry1.setSize(0);
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",""
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test64205() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test64206() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test64207() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test64208() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test65209() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[9];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test65210() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[9];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test66211() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test66212() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test66213() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test66214() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test66215() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setName(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"", byteArray0);
    zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test67216() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test67217() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test67218() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test67219() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test67220() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public void setSize(long size) {
    if (size < 0) {
        throw new IllegalArgumentException(""invalid entry size"");
    }
    this.size = size;
}","public void test68221() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setSize((-329L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid entry size
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Sets the uncompressed size of the entry data.
 * @param size the uncompressed size in bytes
 * @exception IllegalArgumentException if the specified size is less
 *            than 0
 */"
"@Override
public int getMethod() {
    return method;
}","public void test69222() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public byte[] getLocalFileDataExtra() {
    byte[] extra = getExtra();
    return extra != null ? extra : new byte[0];
}","public void test69223() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(18, byteArray1.length);
}","/**
 * Retrieves the extra data for the local file data.
 * @return the extra data for local file
 */"
"public int getPlatform() {
    return platform;
}","public void test69224() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test69225() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test69226() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test69227() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    byte[] byteArray1 = zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test70228() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test70229() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test70230() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test70231() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test70232() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public void removeUnparseableExtraFieldData() {
    if (unparseableExtra == null) {
        throw new java.util.NoSuchElementException();
    }
    unparseableExtra = null;
    setExtra();
}","public void test71233() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Removes unparseable extra field data.
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test72234() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test72235() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""LF,`mwf"");
    byte[] byteArray0 = new byte[8];
    byteArray0[3] = (byte) (-84);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public void removeExtraField(ZipShort type) {
    if (extraFields == null) {
        throw new java.util.NoSuchElementException();
    }
    if (extraFields.remove(type) == null) {
        throw new java.util.NoSuchElementException();
    }
    setExtra();
}","public void test73236() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField((ZipShort) null);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Remove an extra field.
 * @param type the type of extra field to remove
 */"
"public void removeExtraField(ZipShort type) {
    if (extraFields == null) {
        throw new java.util.NoSuchElementException();
    }
    if (extraFields.remove(type) == null) {
        throw new java.util.NoSuchElementException();
    }
    setExtra();
}","public void test74237() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Remove an extra field.
 * @param type the type of extra field to remove
 */"
"@Override
public long getSize() {
    return size;
}","public void test75238() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test75239() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test75240() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test75241() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test75242() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test76243() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test76244() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test76245() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test76246() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test76247() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[6];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test77248() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test77249() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test77250() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test77251() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test77252() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test78253() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test78254() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test78255() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test78256() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test78257() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test79258() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[9];
    zipArchiveEntry0.setExtra(byteArray0);
    byteArray0[3] = (byte) 26;
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test80259() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test80260() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test80261() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public ZipExtraField getExtraField(ZipShort type) {
    if (extraFields != null) {
        return extraFields.get(type);
    }
    return null;
}","public void test80262() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertNotNull(zipExtraField0);
}","/**
 * Looks up an extra field by its header id.
 *
 * @return null if no such field exists.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test80263() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test80264() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&}{b(W'LqVf"", ""KS!!0%&{&}{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&}{b(W'LqVf/KS!!0%&{&}{b(W'LqVf"");
    byte[] byteArray0 = new byte[6];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""M7a9<?S+^"", byteArray0);
    zipArchiveEntry0.addExtraField(unicodePathExtraField0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public ZipExtraField[] getExtraFields() {
    return getExtraFields(false);
}","public void test81265() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(1, zipExtraFieldArray0.length);
}","/**
 * Retrieves all extra fields that have been parsed successfully.
 * @return an array of the extra fields
 */"
"@Override
public long getSize() {
    return size;
}","public void test81266() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test81267() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test81268() throws Throwable {
    MockFile mockFile0 = new MockFile(""E("");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "";7v0N_ybi4n;;G1"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public void addAsFirstExtraField(ZipExtraField ze) {
    if (ze instanceof UnparseableExtraFieldData) {
        unparseableExtra = (UnparseableExtraFieldData) ze;
    } else {
        LinkedHashMap<ZipShort, ZipExtraField> copy = extraFields;
        extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
        extraFields.put(ze.getHeaderId(), ze);
        if (copy != null) {
            copy.remove(ze.getHeaderId());
            extraFields.putAll(copy);
        }
    }
    setExtra();
}","public void test82269() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    // Undeclared exception!
    try {
        zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Adds an extra field - replacing an already present extra field
 * of the same type.
 *
 * <p>The new extra field will be the first one.</p>
 * @param ze an extra field
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test83270() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test83271() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getPlatform() {
    return platform;
}","public void test83272() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test83273() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test83274() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test83275() throws Throwable {
    MockFile mockFile0 = new MockFile("":m:y21!PS"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""|/"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test84276() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("";/"");
    zipArchiveEntry0.setUnixMode(0);
    assertEquals(3, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test85277() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test85278() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test85279() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test85280() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test85281() throws Throwable {
    MockFile mockFile0 = new MockFile(""/"", ""/"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test86282() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test86283() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals((-1L), long0);
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test86284() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test86285() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test86286() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""KS!!0%&{&8{b(W'LqVf/KS!!0%&{&8{b(W'LqVf"");
    FileSystemHandling.createFolder(evoSuiteFile0);
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    long long0 = zipArchiveEntry0.getSize();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException {
    this((java.util.zip.ZipEntry) entry);
    setInternalAttributes(entry.getInternalAttributes());
    setExternalAttributes(entry.getExternalAttributes());
    setExtraFields(entry.getExtraFields(true));
}","public void test87287() throws Throwable {
    MockFile mockFile0 = new MockFile(""[#K.lmr7["");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "".V"");
    zipArchiveEntry0.setExtra();
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test88288() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test88289() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test88290() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test88291() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test88292() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test89293() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test89294() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test89295() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test89296() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test89297() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/Users/elliottzackrone/IdeaProjects/defects4jprefix/KS!!0%&{&8{b(W'LqVf"");
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test90298() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test90299() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test90300() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test90301() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test90302() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FVKr<;C$I7D<\""wbw&"");
    zipArchiveEntry0.hashCode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test91303() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test91304() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test91305() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public ZipExtraField[] getExtraFields() {
    return getExtraFields(false);
}","public void test91306() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipExtraFieldArray0.length);
}","/**
 * Retrieves all extra fields that have been parsed successfully.
 * @return an array of the extra fields
 */"
"@Override
public long getSize() {
    return size;
}","public void test91307() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test91308() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test92309() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since Apache Commons Compress 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test92310() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test92311() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test92312() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test92313() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
