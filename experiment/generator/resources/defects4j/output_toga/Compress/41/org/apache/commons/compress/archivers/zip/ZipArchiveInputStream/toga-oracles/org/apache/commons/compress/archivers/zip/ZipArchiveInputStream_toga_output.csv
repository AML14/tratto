project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    File file0 = MockFile.createTempFile(""Truncated ZIP entry: "", ""uncompressed size is required for STORED method when not writing to a file"");
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    ZipArchiveInputStream zipArchiveInputStream0 = null;
    try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, ""Truncated ZIP entry: "", true, true);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // Truncated ZIP entry:
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    try {
        zipArchiveInputStream0.getNextEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.PushbackInputStream"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);
    JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("""");
    boolean boolean0 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test033,"public void test033() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);
    byte[] byteArray0 = new byte[2];
    int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte) 106, (-2770));
    assertEquals((-1), int0);
}",1,
project,0,test044,"public void test044() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, (String) null);
    zipArchiveInputStream0.close();
    byte[] byteArray0 = new byte[8];
    try {
        zipArchiveInputStream0.read(byteArray0, 0, (int) (byte) 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // The stream is closed
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(1576);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, ""org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp"");
    zipArchiveInputStream0.close();
    zipArchiveInputStream0.close();
    assertEquals(0L, zipArchiveInputStream0.getBytesRead());
}",0,
project,0,test066,"public void test066() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 11);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    // Undeclared exception!
    try {
        zipArchiveInputStream0.skip((-291L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    long long0 = zipArchiveInputStream0.skip(86L);
    assertEquals(0L, long0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    zipArchiveInputStream0.skip(1041L);
}",0,
project,0,test099,"public void test099() throws Throwable {
    // Undeclared exception!
    try {
        ZipArchiveInputStream.matches((byte[]) null, 703);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ZipArchiveInputStream.matches(byteArray0, 0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    byte[] byteArray0 = new byte[3];
    ZipArchiveInputStream.matches(byteArray0, 2048);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, ""0"");
    zipArchiveInputStream0.getNextEntry();
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);
    try {
        zipArchiveInputStream0.getNextZipEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.PushbackInputStream"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = null;
    try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, ""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(407);
    ZipArchiveInputStream zipArchiveInputStream0 = null;
    try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, """", false);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        //
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 11);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    zipArchiveInputStream0.getNextZipEntry();
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(1576);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, ""org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp"");
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(zipArchiveInputStream0, 1576);
    ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(pushbackInputStream0, ""org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp"", true, true);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 117;
    ZipArchiveInputStream.matches(byteArray0, 1367);
}",0,
