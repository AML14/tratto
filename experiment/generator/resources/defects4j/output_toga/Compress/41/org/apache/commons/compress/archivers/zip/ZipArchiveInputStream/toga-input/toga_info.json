{
  "test1212" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, \"0\");\n    zipArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);\n    zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    byte[] byteArray0 = new byte[1];\n    ZipArchiveInputStream.matches(byteArray0, 0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    byte[] byteArray0 = new byte[3];\n    ZipArchiveInputStream.matches(byteArray0, 2048);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    zipArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public int read(final byte[] buffer, final int offset, final int length) throws IOException",
    "methodName" : "read",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);\n    byte[] byteArray0 = new byte[2];\n    int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte) 106, (-2770));\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(1576);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, \"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp\");\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public long skip(final long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    long long0 = zipArchiveInputStream0.skip(86L);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    ZipArchiveInputStream.matches((byte[]) null, 703);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 11);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor)",
    "methodName" : "ZipArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(1576);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, \"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp\");\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(zipArchiveInputStream0, 1576);\n    ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(pushbackInputStream0, \"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp\", true, true);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public ZipArchiveInputStream(final InputStream inputStream, final String encoding)",
    "methodName" : "ZipArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = null;\n    zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, \"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1\");\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields)",
    "methodName" : "ZipArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(407);\n    ZipArchiveInputStream zipArchiveInputStream0 = null;\n    zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, \"\", false);\n}",
    "testName" : "test1515"
  },
  "test000" : {
    "methodSignature" : "public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor)",
    "methodName" : "ZipArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    File file0 = MockFile.createTempFile(\"Truncated ZIP entry: \", \"uncompressed size is required for STORED method when not writing to a file\");\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    ZipArchiveInputStream zipArchiveInputStream0 = null;\n    zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, \"Truncated ZIP entry: \", true, true);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public boolean canReadEntryData(final ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);\n    JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(\"\");\n    boolean boolean0 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public int read(final byte[] buffer, final int offset, final int length) throws IOException",
    "methodName" : "read",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    FileDescriptor fileDescriptor0 = new FileDescriptor();\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, (String) null);\n    zipArchiveInputStream0.close();\n    byte[] byteArray0 = new byte[8];\n    zipArchiveInputStream0.read(byteArray0, 0, (int) (byte) 0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public long skip(final long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 11);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.skip((-291L));\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public long skip(final long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    zipArchiveInputStream0.skip(1041L);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    byte[] byteArray0 = new byte[3];\n    byteArray0[0] = (byte) 117;\n    ZipArchiveInputStream.matches(byteArray0, 1367);\n}",
    "testName" : "test1818"
  }
}