focal_method,test_prefix,docstring
"public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {
    if ((currBytes + numToWrite) > currSize) {
        throw new IOException(""request to write '"" + numToWrite + ""' bytes exceeds size in header of '"" + currSize + ""' bytes for entry '"" + currName + ""'"");
        //
        // We have to deal with assembly!!!
        // The programmer can be writing little 32 byte chunks for all
        // we know, and we must assemble complete records for writing.
        // REVIEW Maybe this should be in TarBuffer? Could that help to
        // eliminate some of the buffer copying.
        //
    }
    if (assemLen > 0) {
        if ((assemLen + numToWrite) >= recordBuf.length) {
            int aLen = recordBuf.length - assemLen;
            System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen);
            System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen);
            buffer.writeRecord(recordBuf);
            currBytes += recordBuf.length;
            wOffset += aLen;
            numToWrite -= aLen;
            assemLen = 0;
        } else {
            System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite);
            wOffset += numToWrite;
            assemLen += numToWrite;
            numToWrite = 0;
        }
    }
    //
    // When we get here we have EITHER:
    // o An empty ""assemble"" buffer.
    // o No bytes to write (numToWrite == 0)
    //
    while (numToWrite > 0) {
        if (numToWrite < recordBuf.length) {
            System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite);
            assemLen += numToWrite;
            break;
        }
        buffer.writeRecord(wBuf, wOffset);
        int num = recordBuf.length;
        currBytes += num;
        numToWrite -= num;
        wOffset += num;
    }
}","public void test000() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2227);
    byte[] byteArray0 = new byte[2];
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 0, 1332);
    tarArchiveOutputStream0.write(byteArray0, 2227, 0);
    assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
}","/**
 * Writes bytes to the current tar archive entry. This method
 * is aware of the current entry and will throw an exception if
 * you attempt to write bytes past the length specified for the
 * current entry. The method is also (painfully) aware of the
 * record buffering required by TarBuffer, and manages buffers
 * that are not a multiple of recordsize in length, including
 * assembling records from small buffers.
 *
 * @param wBuf The buffer to write to the archive.
 * @param wOffset The offset in the buffer from which to get bytes.
 * @param numToWrite The number of bytes to write.
 * @throws IOException on error
 */"
"public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
    if (entry.getName().length() >= TarConstants.NAMELEN) {
        if (longFileMode == LONGFILE_GNU) {
            // create a TarEntry for the LongLink, the contents
            // of which are the entry's name
            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);
            // TODO is it correct to use the default charset here?
            final byte[] nameBytes = entry.getName().getBytes();
            // +1 for NUL
            longLinkEntry.setSize(nameBytes.length + 1);
            putArchiveEntry(longLinkEntry);
            write(nameBytes);
            // NUL terminator
            write(0);
            closeArchiveEntry();
        } else if (longFileMode != LONGFILE_TRUNCATE) {
            throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + TarConstants.NAMELEN + "" bytes)"");
        }
    }
    entry.writeEntryHeader(recordBuf);
    buffer.writeRecord(recordBuf);
    currBytes = 0;
    if (entry.isDirectory()) {
        currSize = 0;
    } else {
        currSize = entry.getSize();
    }
    currName = entry.getName();
}","public void test011() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 512, 512);
    tarArchiveOutputStream0.setLongFileMode(512);
    MockFile mockFile0 = new MockFile(""org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"", ""x}b2[UXFW`1/#1${. "");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // file name 'Users/elliottzackrone/IdeaProjects/defects4jprefix/org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField/x}b2[UXFW`1/#1${. ' is too long ( > 100 bytes)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}","/**
 * Put an entry on the output stream. This writes the entry's
 * header record and positions the output stream for writing
 * the contents of the entry. Once this method is called, the
 * stream is ready for calls to write() to write the entry's
 * contents. Once the contents are written, closeArchiveEntry()
 * <B>MUST</B> be called to ensure that all buffered data
 * is completely written to the output stream.
 *
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 */"
"public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
    if (entry.getName().length() >= TarConstants.NAMELEN) {
        if (longFileMode == LONGFILE_GNU) {
            // create a TarEntry for the LongLink, the contents
            // of which are the entry's name
            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);
            // TODO is it correct to use the default charset here?
            final byte[] nameBytes = entry.getName().getBytes();
            // +1 for NUL
            longLinkEntry.setSize(nameBytes.length + 1);
            putArchiveEntry(longLinkEntry);
            write(nameBytes);
            // NUL terminator
            write(0);
            closeArchiveEntry();
        } else if (longFileMode != LONGFILE_TRUNCATE) {
            throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + TarConstants.NAMELEN + "" bytes)"");
        }
    }
    entry.writeEntryHeader(recordBuf);
    buffer.writeRecord(recordBuf);
    currBytes = 0;
    if (entry.isDirectory()) {
        currSize = 0;
    } else {
        currSize = entry.getSize();
    }
    currName = entry.getName();
}","public void test022() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 1, 1);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}","/**
 * Put an entry on the output stream. This writes the entry's
 * header record and positions the output stream for writing
 * the contents of the entry. Once this method is called, the
 * stream is ready for calls to write() to write the entry's
 * contents. Once the contents are written, closeArchiveEntry()
 * <B>MUST</B> be called to ensure that all buffered data
 * is completely written to the output stream.
 *
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 */"
"public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
    if (entry.getName().length() >= TarConstants.NAMELEN) {
        if (longFileMode == LONGFILE_GNU) {
            // create a TarEntry for the LongLink, the contents
            // of which are the entry's name
            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);
            // TODO is it correct to use the default charset here?
            final byte[] nameBytes = entry.getName().getBytes();
            // +1 for NUL
            longLinkEntry.setSize(nameBytes.length + 1);
            putArchiveEntry(longLinkEntry);
            write(nameBytes);
            // NUL terminator
            write(0);
            closeArchiveEntry();
        } else if (longFileMode != LONGFILE_TRUNCATE) {
            throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + TarConstants.NAMELEN + "" bytes)"");
        }
    }
    entry.writeEntryHeader(recordBuf);
    buffer.writeRecord(recordBuf);
    currBytes = 0;
    if (entry.isDirectory()) {
        currSize = 0;
    } else {
        currSize = entry.getSize();
    }
    currName = entry.getName();
}","public void test033() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""opsGjde"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    ZipEntry zipEntry0 = new ZipEntry(""opsGjde"");
    JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipEntry0);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.apache.commons.compress.archivers.jar.JarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.tar.TarArchiveEntry
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}","/**
 * Put an entry on the output stream. This writes the entry's
 * header record and positions the output stream for writing
 * the contents of the entry. Once this method is called, the
 * stream is ready for calls to write() to write the entry's
 * contents. Once the contents are written, closeArchiveEntry()
 * <B>MUST</B> be called to ensure that all buffered data
 * is completely written to the output stream.
 *
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 */"
"public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
    if (entry.getName().length() >= TarConstants.NAMELEN) {
        if (longFileMode == LONGFILE_GNU) {
            // create a TarEntry for the LongLink, the contents
            // of which are the entry's name
            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);
            // TODO is it correct to use the default charset here?
            final byte[] nameBytes = entry.getName().getBytes();
            // +1 for NUL
            longLinkEntry.setSize(nameBytes.length + 1);
            putArchiveEntry(longLinkEntry);
            write(nameBytes);
            // NUL terminator
            write(0);
            closeArchiveEntry();
        } else if (longFileMode != LONGFILE_TRUNCATE) {
            throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + TarConstants.NAMELEN + "" bytes)"");
        }
    }
    entry.writeEntryHeader(recordBuf);
    buffer.writeRecord(recordBuf);
    currBytes = 0;
    if (entry.isDirectory()) {
        currSize = 0;
    } else {
        currSize = entry.getSize();
    }
    currName = entry.getName();
}","public void test044() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Size is out of range: "", false);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 2479, 100);
    MockFile mockFile0 = new MockFile(""]"", ""Vj*zW|3Z{\""S%S:d"");
    ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, ""]"");
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 105
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Put an entry on the output stream. This writes the entry's
 * header record and positions the output stream for writing
 * the contents of the entry. Once this method is called, the
 * stream is ready for calls to write() to write the entry's
 * contents. Once the contents are written, closeArchiveEntry()
 * <B>MUST</B> be called to ensure that all buffered data
 * is completely written to the output stream.
 *
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 */"
"public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
    if (entry.getName().length() >= TarConstants.NAMELEN) {
        if (longFileMode == LONGFILE_GNU) {
            // create a TarEntry for the LongLink, the contents
            // of which are the entry's name
            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);
            // TODO is it correct to use the default charset here?
            final byte[] nameBytes = entry.getName().getBytes();
            // +1 for NUL
            longLinkEntry.setSize(nameBytes.length + 1);
            putArchiveEntry(longLinkEntry);
            write(nameBytes);
            // NUL terminator
            write(0);
            closeArchiveEntry();
        } else if (longFileMode != LONGFILE_TRUNCATE) {
            throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + TarConstants.NAMELEN + "" bytes)"");
        }
    }
    entry.writeEntryHeader(recordBuf);
    buffer.writeRecord(recordBuf);
    currBytes = 0;
    if (entry.isDirectory()) {
        currSize = 0;
    } else {
        currSize = entry.getSize();
    }
    currName = entry.getName();
}","public void test055() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 0, 8192);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    try {
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Output buffer is closed
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}","/**
 * Put an entry on the output stream. This writes the entry's
 * header record and positions the output stream for writing
 * the contents of the entry. Once this method is called, the
 * stream is ready for calls to write() to write the entry's
 * contents. Once the contents are written, closeArchiveEntry()
 * <B>MUST</B> be called to ensure that all buffered data
 * is completely written to the output stream.
 *
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 */"
"// used to be implemented via FilterOutputStream
public void flush() throws IOException {
    out.flush();
}","public void test066() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.flush();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",""
"public void finish() throws IOException {
    writeEOFRecord();
    writeEOFRecord();
}","public void test077() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1747);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 37);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(objectOutputStream0, 37, 728);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Ends the TAR archive without closing the underlying OutputStream.
 *
 * An archive consists of a series of file entries terminated by an
 * end-of-archive entry, which consists of two 512 blocks of zero bytes.
 * POSIX.1 requires two EOF records, like some other implementations.
 *
 * @throws IOException on error
 */"
"public void finish() throws IOException {
    writeEOFRecord();
    writeEOFRecord();
}","public void test088() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 215, 215);
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Output buffer is closed
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}","/**
 * Ends the TAR archive without closing the underlying OutputStream.
 *
 * An archive consists of a series of file entries terminated by an
 * end-of-archive entry, which consists of two 512 blocks of zero bytes.
 * POSIX.1 requires two EOF records, like some other implementations.
 *
 * @throws IOException on error
 */"
"public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException {
    return new TarArchiveEntry(inputFile, entryName);
}","public void test099() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""5,CY cLcM(YN2"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    MockFile mockFile0 = new MockFile((File) null, """");
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, "" bytes)"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException {
    return new TarArchiveEntry(inputFile, entryName);
}","public void test1010() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""k*"");
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(bufferedOutputStream0, 8192, 166);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.createArchiveEntry((File) null, ""k*"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",""
"public void close() throws IOException {
    if (!closed) {
        finish();
        buffer.close();
        out.close();
        closed = true;
    }
}","public void test1111() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2227);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 0, 1332);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.close();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Ends the TAR archive and closes the underlying OutputStream.
 * This means that finish() is called followed by calling the
 * TarBuffer's close().
 * @throws IOException on error
 */"
"public void close() throws IOException {
    if (!closed) {
        finish();
        buffer.close();
        out.close();
        closed = true;
    }
}","public void test1212() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
    try {
        tarArchiveOutputStream0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Output buffer is closed
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}","/**
 * Ends the TAR archive and closes the underlying OutputStream.
 * This means that finish() is called followed by calling the
 * TarBuffer's close().
 * @throws IOException on error
 */"
"public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) {
    out = os;
    this.buffer = new TarBuffer(os, blockSize, recordSize);
    this.assemLen = 0;
    this.assemBuf = new byte[recordSize];
    this.recordBuf = new byte[recordSize];
}","public void test1313() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""././@LongLink"");
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, (-2001), (-2001));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}","/**
 * Constructor for TarInputStream.
 * @param os the output stream to use
 * @param blockSize the block size to use
 * @param recordSize the record size to use
 */"
"public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) {
    out = os;
    this.buffer = new TarBuffer(os, blockSize, recordSize);
    this.assemLen = 0;
    this.assemBuf = new byte[recordSize];
    this.recordBuf = new byte[recordSize];
}","public void test1414() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Size is out of range: "");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    TarArchiveOutputStream tarArchiveOutputStream1 = null;
    try {
        tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, 512, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // / by zero
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}","/**
 * Constructor for TarInputStream.
 * @param os the output stream to use
 * @param blockSize the block size to use
 * @param recordSize the record size to use
 */"
"public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {
    if ((currBytes + numToWrite) > currSize) {
        throw new IOException(""request to write '"" + numToWrite + ""' bytes exceeds size in header of '"" + currSize + ""' bytes for entry '"" + currName + ""'"");
        //
        // We have to deal with assembly!!!
        // The programmer can be writing little 32 byte chunks for all
        // we know, and we must assemble complete records for writing.
        // REVIEW Maybe this should be in TarBuffer? Could that help to
        // eliminate some of the buffer copying.
        //
    }
    if (assemLen > 0) {
        if ((assemLen + numToWrite) >= recordBuf.length) {
            int aLen = recordBuf.length - assemLen;
            System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen);
            System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen);
            buffer.writeRecord(recordBuf);
            currBytes += recordBuf.length;
            wOffset += aLen;
            numToWrite -= aLen;
            assemLen = 0;
        } else {
            System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite);
            wOffset += numToWrite;
            assemLen += numToWrite;
            numToWrite = 0;
        }
    }
    //
    // When we get here we have EITHER:
    // o An empty ""assemble"" buffer.
    // o No bytes to write (numToWrite == 0)
    //
    while (numToWrite > 0) {
        if (numToWrite < recordBuf.length) {
            System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite);
            assemLen += numToWrite;
            break;
        }
        buffer.writeRecord(wBuf, wOffset);
        int num = recordBuf.length;
        currBytes += num;
        numToWrite -= num;
        wOffset += num;
    }
}","public void test1515() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(bufferedOutputStream0);
    try {
        tarArchiveOutputStream0.write((byte[]) null, 2234, 2234);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // request to write '2234' bytes exceeds size in header of '0' bytes for entry 'null'
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}","/**
 * Writes bytes to the current tar archive entry. This method
 * is aware of the current entry and will throw an exception if
 * you attempt to write bytes past the length specified for the
 * current entry. The method is also (painfully) aware of the
 * record buffering required by TarBuffer, and manages buffers
 * that are not a multiple of recordsize in length, including
 * assembling records from small buffers.
 *
 * @param wBuf The buffer to write to the archive.
 * @param wOffset The offset in the buffer from which to get bytes.
 * @param numToWrite The number of bytes to write.
 * @throws IOException on error
 */"
"public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
    if (entry.getName().length() >= TarConstants.NAMELEN) {
        if (longFileMode == LONGFILE_GNU) {
            // create a TarEntry for the LongLink, the contents
            // of which are the entry's name
            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);
            // TODO is it correct to use the default charset here?
            final byte[] nameBytes = entry.getName().getBytes();
            // +1 for NUL
            longLinkEntry.setSize(nameBytes.length + 1);
            putArchiveEntry(longLinkEntry);
            write(nameBytes);
            // NUL terminator
            write(0);
            closeArchiveEntry();
        } else if (longFileMode != LONGFILE_TRUNCATE) {
            throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + TarConstants.NAMELEN + "" bytes)"");
        }
    }
    entry.writeEntryHeader(recordBuf);
    buffer.writeRecord(recordBuf);
    currBytes = 0;
    if (entry.isDirectory()) {
        currSize = 0;
    } else {
        currSize = entry.getSize();
    }
    currName = entry.getName();
}","public void test1616() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 10240);
    File file0 = MockFile.createTempFile("" 83:q[%/`"", "" 83:q[%/`"");
    TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry) tarArchiveOutputStream0.createArchiveEntry(file0, "" 83:q[%/`"");
    MockDate mockDate0 = new MockDate((-2579), 1000, 2917, 10240, 0);
    tarArchiveEntry0.setModTime((Date) mockDate0);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -80676460800=1777777776646723563400 will not fit in octal number buffer of length 11
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Put an entry on the output stream. This writes the entry's
 * header record and positions the output stream for writing
 * the contents of the entry. Once this method is called, the
 * stream is ready for calls to write() to write the entry's
 * contents. Once the contents are written, closeArchiveEntry()
 * <B>MUST</B> be called to ensure that all buffered data
 * is completely written to the output stream.
 *
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 */"
"// Generic implementations of OutputStream methods that may be useful to sub-classes
/**
 * Writes a byte to the current archive entry.
 *
 * This method simply calls write( byte[], 0, 1 ).
 *
 * MUST be overridden if the {@link #write(byte[], int, int)} method
 * is not overridden; may be overridden otherwise.
 *
 * @param b The byte to be written.
 * @throws IOException on error
 */
public void write(int b) throws IOException {
    oneByte[0] = (byte) (b & BYTE_MASK);
    write(oneByte, 0, 1);
}","public void test1717() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    try {
        tarArchiveOutputStream0.write(420);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // request to write '1' bytes exceeds size in header of '0' bytes for entry 'null'
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",""
"public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {
    if ((currBytes + numToWrite) > currSize) {
        throw new IOException(""request to write '"" + numToWrite + ""' bytes exceeds size in header of '"" + currSize + ""' bytes for entry '"" + currName + ""'"");
        //
        // We have to deal with assembly!!!
        // The programmer can be writing little 32 byte chunks for all
        // we know, and we must assemble complete records for writing.
        // REVIEW Maybe this should be in TarBuffer? Could that help to
        // eliminate some of the buffer copying.
        //
    }
    if (assemLen > 0) {
        if ((assemLen + numToWrite) >= recordBuf.length) {
            int aLen = recordBuf.length - assemLen;
            System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen);
            System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen);
            buffer.writeRecord(recordBuf);
            currBytes += recordBuf.length;
            wOffset += aLen;
            numToWrite -= aLen;
            assemLen = 0;
        } else {
            System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite);
            wOffset += numToWrite;
            assemLen += numToWrite;
            numToWrite = 0;
        }
    }
    //
    // When we get here we have EITHER:
    // o An empty ""assemble"" buffer.
    // o No bytes to write (numToWrite == 0)
    //
    while (numToWrite > 0) {
        if (numToWrite < recordBuf.length) {
            System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite);
            assemLen += numToWrite;
            break;
        }
        buffer.writeRecord(wBuf, wOffset);
        int num = recordBuf.length;
        currBytes += num;
        numToWrite -= num;
        wOffset += num;
    }
}","public void test1818() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    tarArchiveOutputStream0.write((byte[]) null, 1117, (-3384));
    assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
}","/**
 * Writes bytes to the current tar archive entry. This method
 * is aware of the current entry and will throw an exception if
 * you attempt to write bytes past the length specified for the
 * current entry. The method is also (painfully) aware of the
 * record buffering required by TarBuffer, and manages buffers
 * that are not a multiple of recordsize in length, including
 * assembling records from small buffers.
 *
 * @param wBuf The buffer to write to the archive.
 * @param wOffset The offset in the buffer from which to get bytes.
 * @param numToWrite The number of bytes to write.
 * @throws IOException on error
 */"
"public void closeArchiveEntry() throws IOException {
    if (assemLen > 0) {
        for (int i = assemLen; i < assemBuf.length; ++i) {
            assemBuf[i] = 0;
        }
        buffer.writeRecord(assemBuf);
        currBytes += assemLen;
        assemLen = 0;
    }
    if (currBytes < currSize) {
        throw new IOException(""entry '"" + currName + ""' closed at '"" + currBytes + ""' before the '"" + currSize + ""' bytes specified in the header were written"");
    }
}","public void test1919() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/foo.bar"");
    FileSystemHandling.appendStringToFile(evoSuiteFile0, ""cqVGd$$m9}jPOr"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, ""cqVGd$$m9}jPOr"");
    tarArchiveOutputStream0.putArchiveEntry(archiveEntry0);
    try {
        tarArchiveOutputStream0.closeArchiveEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // entry 'cqVGd$$m9}jPOr' closed at '0' before the '15' bytes specified in the header were written
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}","/**
 * Close an entry. This method MUST be called for all file
 * entries that contain data. The reason is that we must
 * buffer data written to the stream in order to satisfy
 * the buffer's record based writes. Thus, there may be
 * data fragments still being assembled that must be written
 * to the output stream before this entry is closed and the
 * next entry written.
 * @throws IOException on error
 */"
"public void closeArchiveEntry() throws IOException {
    if (assemLen > 0) {
        for (int i = assemLen; i < assemBuf.length; ++i) {
            assemBuf[i] = 0;
        }
        buffer.writeRecord(assemBuf);
        currBytes += assemLen;
        assemLen = 0;
    }
    if (currBytes < currSize) {
        throw new IOException(""entry '"" + currName + ""' closed at '"" + currBytes + ""' before the '"" + currSize + ""' bytes specified in the header were written"");
    }
}","public void test2020() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    tarArchiveOutputStream0.closeArchiveEntry();
    assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
}","/**
 * Close an entry. This method MUST be called for all file
 * entries that contain data. The reason is that we must
 * buffer data written to the stream in order to satisfy
 * the buffer's record based writes. Thus, there may be
 * data fragments still being assembled that must be written
 * to the output stream before this entry is closed and the
 * next entry written.
 * @throws IOException on error
 */"
"public String getUserName() {
    return userName.toString();
}","public void test2121() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream("".)@Xuhr_H;VxmdX@7y"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry) tarArchiveOutputStream0.createArchiveEntry(mockFile0, """");
    tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    assertEquals(""elliottzackrone"", tarArchiveEntry0.getUserName());
}","/**
 * Get this entry's user name.
 *
 * @return This entry's user name.
 */"
"public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
    if (entry.getName().length() >= TarConstants.NAMELEN) {
        if (longFileMode == LONGFILE_GNU) {
            // create a TarEntry for the LongLink, the contents
            // of which are the entry's name
            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);
            // TODO is it correct to use the default charset here?
            final byte[] nameBytes = entry.getName().getBytes();
            // +1 for NUL
            longLinkEntry.setSize(nameBytes.length + 1);
            putArchiveEntry(longLinkEntry);
            write(nameBytes);
            // NUL terminator
            write(0);
            closeArchiveEntry();
        } else if (longFileMode != LONGFILE_TRUNCATE) {
            throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + TarConstants.NAMELEN + "" bytes)"");
        }
    }
    entry.writeEntryHeader(recordBuf);
    buffer.writeRecord(recordBuf);
    currBytes = 0;
    if (entry.isDirectory()) {
        currSize = 0;
    } else {
        currSize = entry.getSize();
    }
    currName = entry.getName();
}","public void test2222() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 512, 512);
    MockFile mockFile0 = new MockFile(""org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"", ""x}b2[UXFW`1/#1${. "");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    // Undeclared exception!
    try {
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // file name 'Users/elliottzackrone/IdeaProjects/defects4jprefix/org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField/x}b2[UXFW`1/#1${. ' is too long ( > 100 bytes)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}","/**
 * Put an entry on the output stream. This writes the entry's
 * header record and positions the output stream for writing
 * the contents of the entry. Once this method is called, the
 * stream is ready for calls to write() to write the entry's
 * contents. Once the contents are written, closeArchiveEntry()
 * <B>MUST</B> be called to ensure that all buffered data
 * is completely written to the output stream.
 *
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 */"
"public int getRecordSize() {
    return buffer.getRecordSize();
}","public void test2424() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""opsGjde"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    int int0 = tarArchiveOutputStream0.getRecordSize();
    assertEquals(512, int0);
}","/**
 * Get the record size being used by this stream's TarBuffer.
 *
 * @return The TarBuffer record size.
 */"
"public TarArchiveOutputStream(OutputStream os, int blockSize) {
    this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);
}","public void test2525() throws Throwable {
    MockFile mockFile0 = new MockFile("""", "":"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
    DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = null;
    try {
        tarArchiveOutputStream0 = new TarArchiveOutputStream(dataOutputStream0, (-2448));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarBuffer"", e);
    }
}","/**
 * Constructor for TarInputStream.
 * @param os the output stream to use
 * @param blockSize the block size to use
 */"
"// used to be implemented via FilterOutputStream
public void flush() throws IOException {
    out.flush();
}","public void test2626() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""L9kQ9,T2?fnVgtc"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
    tarArchiveOutputStream0.flush();
    assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
}",""
