focal_method,test_prefix,docstring
"public static boolean verifyCheckSum(byte[] header) {
    long storedSum = 0;
    long unsignedSum = 0;
    long signedSum = 0;
    int digits = 0;
    for (int i = 0; i < header.length; i++) {
        byte b = header[i];
        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
            if ('0' <= b && b <= '7' && digits++ < 6) {
                storedSum = storedSum * 8 + b - '0';
            } else if (digits > 0) {
                digits = 6;
            }
            b = ' ';
        }
        unsignedSum += 0xff & b;
        signedSum += b;
    }
    return storedSum == unsignedSum || storedSum == signedSum;
}","public void test000() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[2] = (byte) 3;
    boolean boolean0 = TarUtils.verifyCheckSum(byteArray0);
    assertFalse(boolean0);
}","/**
 * Wikipedia <a href=""http://en.wikipedia.org/wiki/Tar_(file_format)#File_header"">says</a>:
 * <blockquote>
 * The checksum is calculated by taking the sum of the unsigned byte values
 * of the header block with the eight checksum bytes taken to be ascii
 * spaces (decimal value 32). It is stored as a six digit octal number with
 * leading zeroes followed by a NUL and then a space. Various
 * implementations do not adhere to this format. For better compatibility,
 * ignore leading and trailing whitespace, and get the first six digits. In
 * addition, some historic tar implementations treated bytes as signed.
 * Implementations typically calculate the checksum both ways, and treat it
 * as good if either the signed or unsigned sum matches the included
 * checksum.
 * </blockquote>
 * <p>
 * The return value of this method should be treated as a best-effort
 * heuristic rather than an absolute and final truth. The checksum
 * verification logic may well evolve over time as more special cases
 * are encountered.
 *
 * @param header tar header
 * @return whether the checksum is reasonably good
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-191"">COMPRESS-191</a>
 * @since 1.5
 */"
"public static int formatLongOctalOrBinaryBytes(final long value, byte[] buf, final int offset, final int length) {
    // Check whether we are dealing with UID/GID or SIZE field
    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
    final boolean negative = value < 0;
    if (!negative && value <= maxAsOctalChar) {
        // OK to store as octal chars
        return formatLongOctalBytes(value, buf, offset, length);
    }
    if (length < 9) {
        formatLongBinary(value, buf, offset, length, negative);
    }
    formatBigIntegerBinary(value, buf, offset, length, negative);
    buf[offset] = (byte) (negative ? 0xff : 0x80);
    return offset + length;
}","public void test011() throws Throwable {
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalOrBinaryBytes((-1033L), byteArray0, 2146806635, 9);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Write an long integer into a buffer as an octal string if this
 * will fit, or as a binary number otherwise.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write into the buffer.
 * @param buf The destination buffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer.
 * @return The updated offset.
 * @throws IllegalArgumentException if the value (and trailer)
 * will not fit in the buffer.
 * @since 1.4
 */"
"public static int formatLongOctalOrBinaryBytes(final long value, byte[] buf, final int offset, final int length) {
    // Check whether we are dealing with UID/GID or SIZE field
    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
    final boolean negative = value < 0;
    if (!negative && value <= maxAsOctalChar) {
        // OK to store as octal chars
        return formatLongOctalBytes(value, buf, offset, length);
    }
    if (length < 9) {
        formatLongBinary(value, buf, offset, length, negative);
    }
    formatBigIntegerBinary(value, buf, offset, length, negative);
    buf[offset] = (byte) (negative ? 0xff : 0x80);
    return offset + length;
}","public void test022() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalOrBinaryBytes(8589934591L, (byte[]) null, 1, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 8589934591=77777777777 will not fit in octal number buffer of length 0
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an long integer into a buffer as an octal string if this
 * will fit, or as a binary number otherwise.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write into the buffer.
 * @param buf The destination buffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer.
 * @return The updated offset.
 * @throws IllegalArgumentException if the value (and trailer)
 * will not fit in the buffer.
 * @since 1.4
 */"
"public static int formatLongOctalOrBinaryBytes(final long value, byte[] buf, final int offset, final int length) {
    // Check whether we are dealing with UID/GID or SIZE field
    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
    final boolean negative = value < 0;
    if (!negative && value <= maxAsOctalChar) {
        // OK to store as octal chars
        return formatLongOctalBytes(value, buf, offset, length);
    }
    if (length < 9) {
        formatLongBinary(value, buf, offset, length, negative);
    }
    formatBigIntegerBinary(value, buf, offset, length, negative);
    buf[offset] = (byte) (negative ? 0xff : 0x80);
    return offset + length;
}","public void test033() throws Throwable {
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalOrBinaryBytes(0L, byteArray0, 1407, 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1405
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an long integer into a buffer as an octal string if this
 * will fit, or as a binary number otherwise.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write into the buffer.
 * @param buf The destination buffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer.
 * @return The updated offset.
 * @throws IllegalArgumentException if the value (and trailer)
 * will not fit in the buffer.
 * @since 1.4
 */"
"public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // For space
    int idx = length - 1;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing space
    buf[offset + idx] = (byte) ' ';
    return offset + length;
}","public void test044() throws Throwable {
    byte[] byteArray0 = new byte[9];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalBytes((-556L), byteArray0, (byte) 0, (byte) 2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -556=1777777777777777776724 will not fit in octal number buffer of length 1
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an octal long integer into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write as octal
 * @param buf The destinationbuffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer
 * @return The updated offset
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static long parseOctal(final byte[] buffer, final int offset, final int length) {
    long result = 0;
    int end = offset + length;
    int start = offset;
    if (length < 2) {
        throw new IllegalArgumentException(""Length "" + length + "" must be at least 2"");
    }
    if (buffer[start] == 0) {
        return 0L;
    }
    // Skip leading spaces
    while (start < end) {
        if (buffer[start] == ' ') {
            start++;
        } else {
            break;
        }
    }
    // Trim all trailing NULs and spaces.
    // The ustar and POSIX tar specs require a trailing NUL or
    // space but some implementations use the extra digit for big
    // sizes/uids/gids ...
    byte trailer = buffer[end - 1];
    while (start < end && (trailer == 0 || trailer == ' ')) {
        end--;
        trailer = buffer[end - 1];
    }
    for (; start < end; start++) {
        final byte currentByte = buffer[start];
        // CheckStyle:MagicNumber OFF
        if (currentByte < '0' || currentByte > '7') {
            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
        }
        // convert from ASCII
        result = (result << 3) + (currentByte - '0');
        // CheckStyle:MagicNumber ON
    }
    return result;
}","public void test055() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[5] = (byte) (-107);
    // Undeclared exception!
    try {
        TarUtils.parseOctal(byteArray0, 5, 7);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 11
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an octal string from a buffer.
 *
 * <p>Leading spaces are ignored.
 * The buffer must contain a trailing space or NUL,
 * and may contain an additional trailing space or NUL.</p>
 *
 * <p>The input buffer is allowed to contain all NULs,
 * in which case the method returns 0L
 * (this allows for missing fields).</p>
 *
 * <p>To work-around some tar implementations that insert a
 * leading NUL this method returns 0 if it detects a leading NUL
 * since Commons Compress 1.4.</p>
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse - must be at least 2 bytes.
 * @return The long value of the octal string.
 * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
 */"
"public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // For space
    int idx = length - 1;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing space
    buf[offset + idx] = (byte) ' ';
    return offset + length;
}","public void test066() throws Throwable {
    byte[] byteArray0 = new byte[5];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalBytes(0L, byteArray0, (byte) 32, (byte) 3);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 33
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an octal long integer into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write as octal
 * @param buf The destinationbuffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer
 * @return The updated offset
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // for NUL and space
    int idx = length - 2;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing null
    buf[offset + idx++] = 0;
    // Trailing space
    buf[offset + idx] = (byte) ' ';
    return offset + length;
}","public void test077() throws Throwable {
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        TarUtils.formatCheckSumOctalBytes((byte) 61, byteArray0, (byte) 0, 4);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 3
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Writes an octal value into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by NUL and then space.
 *
 * @param value The value to convert
 * @param buf The destination buffer
 * @param offset The starting offset into the buffer.
 * @param length The size of the buffer.
 * @return The updated value of offset, i.e. offset+length
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) {
    try {
        return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);
    } catch (IOException ex) {
        try {
            return formatNameBytes(name, buf, offset, length, FALLBACK_ENCODING);
        } catch (IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test088() throws Throwable {
    byte[] byteArray0 = new byte[3];
    int int0 = TarUtils.formatNameBytes(""ibm437"", byteArray0, (int) (byte) 0, 0);
    assertEquals(0, int0);
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @return The updated offset, i.e. offset + length
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) {
    try {
        return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);
    } catch (IOException ex) {
        try {
            return formatNameBytes(name, buf, offset, length, FALLBACK_ENCODING);
        } catch (IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test099() throws Throwable {
    byte[] byteArray0 = new byte[1];
    int int0 = TarUtils.formatNameBytes("" is too large for "", byteArray0, (int) (byte) 1, 0);
    assertEquals(1, int0);
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @return The updated offset, i.e. offset + length
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) {
    try {
        return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);
    } catch (IOException ex) {
        try {
            return formatNameBytes(name, buf, offset, length, FALLBACK_ENCODING);
        } catch (IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test1010() throws Throwable {
    byte[] byteArray0 = new byte[7];
    int int0 = TarUtils.formatNameBytes(""Jx0DNRLj<alwcB8)!l"", byteArray0, 0, (int) (byte) (-7));
    assertEquals((-7), int0);
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @return The updated offset, i.e. offset + length
 */"
"public static long computeCheckSum(final byte[] buf) {
    long sum = 0;
    for (byte element : buf) {
        sum += BYTE_MASK & element;
    }
    return sum;
}","public void test1111() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) (-100);
    long long0 = TarUtils.computeCheckSum(byteArray0);
    assertEquals(156L, long0);
}","/**
 * Compute the checksum of a tar entry header.
 *
 * @param buf The tar entry's header buffer.
 * @return The computed checksum.
 */"
"public static boolean verifyCheckSum(byte[] header) {
    long storedSum = 0;
    long unsignedSum = 0;
    long signedSum = 0;
    int digits = 0;
    for (int i = 0; i < header.length; i++) {
        byte b = header[i];
        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
            if ('0' <= b && b <= '7' && digits++ < 6) {
                storedSum = storedSum * 8 + b - '0';
            } else if (digits > 0) {
                digits = 6;
            }
            b = ' ';
        }
        unsignedSum += 0xff & b;
        signedSum += b;
    }
    return storedSum == unsignedSum || storedSum == signedSum;
}","public void test1212() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.verifyCheckSum((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Wikipedia <a href=""http://en.wikipedia.org/wiki/Tar_(file_format)#File_header"">says</a>:
 * <blockquote>
 * The checksum is calculated by taking the sum of the unsigned byte values
 * of the header block with the eight checksum bytes taken to be ascii
 * spaces (decimal value 32). It is stored as a six digit octal number with
 * leading zeroes followed by a NUL and then a space. Various
 * implementations do not adhere to this format. For better compatibility,
 * ignore leading and trailing whitespace, and get the first six digits. In
 * addition, some historic tar implementations treated bytes as signed.
 * Implementations typically calculate the checksum both ways, and treat it
 * as good if either the signed or unsigned sum matches the included
 * checksum.
 * </blockquote>
 * <p>
 * The return value of this method should be treated as a best-effort
 * heuristic rather than an absolute and final truth. The checksum
 * verification logic may well evolve over time as more special cases
 * are encountered.
 *
 * @param header tar header
 * @return whether the checksum is reasonably good
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-191"">COMPRESS-191</a>
 * @since 1.5
 */"
"public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) {
    if ((buffer[offset] & 0x80) == 0) {
        return parseOctal(buffer, offset, length);
    }
    final boolean negative = buffer[offset] == (byte) 0xff;
    if (length < 9) {
        return parseBinaryLong(buffer, offset, length, negative);
    }
    return parseBinaryBigInteger(buffer, offset, length, negative);
}","public void test1313() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.parseOctalOrBinary((byte[]) null, (-1010), 2270);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Compute the value contained in a byte buffer.  If the most
 * significant bit of the first byte in the buffer is set, this
 * bit is ignored and the rest of the buffer is interpreted as a
 * binary number.  Otherwise, the buffer is interpreted as an
 * octal number as per the parseOctal function above.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @return The long value of the octal or binary string.
 * @throws IllegalArgumentException if the trailing space/NUL is
 * missing or an invalid byte is detected in an octal number, or
 * if a binary number would exceed the size of a signed long
 * 64-bit integer.
 * @since 1.4
 */"
"public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException {
    int len = length;
    for (; len > 0; len--) {
        if (buffer[offset + len - 1] != 0) {
            break;
        }
    }
    if (len > 0) {
        byte[] b = new byte[len];
        System.arraycopy(buffer, offset, b, 0, len);
        return encoding.decode(b);
    }
    return """";
}","public void test1414() throws Throwable {
    ZipEncoding zipEncoding0 = TarUtils.DEFAULT_ENCODING;
    // Undeclared exception!
    try {
        TarUtils.parseName((byte[]) null, (-4302), 253, zipEncoding0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an entry name from a buffer.
 * Parsing stops when a NUL is found
 * or the buffer length is reached.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 * @return The entry name.
 * @throws IOException on error
 */"
"public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException {
    int len = length;
    for (; len > 0; len--) {
        if (buffer[offset + len - 1] != 0) {
            break;
        }
    }
    if (len > 0) {
        byte[] b = new byte[len];
        System.arraycopy(buffer, offset, b, 0, len);
        return encoding.decode(b);
    }
    return """";
}","public void test1515() throws Throwable {
    byte[] byteArray0 = new byte[3];
    ZipEncoding zipEncoding0 = TarUtils.DEFAULT_ENCODING;
    // Undeclared exception!
    try {
        TarUtils.parseName(byteArray0, (int) (byte) (-101), 226, zipEncoding0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 124
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an entry name from a buffer.
 * Parsing stops when a NUL is found
 * or the buffer length is reached.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 * @return The entry name.
 * @throws IOException on error
 */"
"public static String parseName(byte[] buffer, final int offset, final int length) {
    try {
        return parseName(buffer, offset, length, DEFAULT_ENCODING);
    } catch (IOException ex) {
        try {
            return parseName(buffer, offset, length, FALLBACK_ENCODING);
        } catch (IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test1616() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.parseName((byte[]) null, 2901, 2901);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an entry name from a buffer.
 * Parsing stops when a NUL is found
 * or the buffer length is reached.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @return The entry name.
 */"
"public static boolean parseBoolean(final byte[] buffer, final int offset) {
    return buffer[offset] == 1;
}","public void test1717() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.parseBoolean((byte[]) null, 2028);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse a boolean byte from a buffer.
 * Leading spaces and NUL are ignored.
 * The buffer may contain trailing spaces or NULs.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @return The boolean value of the bytes.
 * @throws IllegalArgumentException if an invalid byte is detected.
 */"
"public static boolean parseBoolean(final byte[] buffer, final int offset) {
    return buffer[offset] == 1;
}","public void test1818() throws Throwable {
    byte[] byteArray0 = new byte[8];
    // Undeclared exception!
    try {
        TarUtils.parseBoolean(byteArray0, 55);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 55
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse a boolean byte from a buffer.
 * Leading spaces and NUL are ignored.
 * The buffer may contain trailing spaces or NULs.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @return The boolean value of the bytes.
 * @throws IllegalArgumentException if an invalid byte is detected.
 */"
"public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // For space and trailing null
    int idx = length - 2;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing space
    buf[offset + idx++] = (byte) ' ';
    // Trailing null
    buf[offset + idx] = 0;
    return offset + length;
}","public void test1919() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.formatOctalBytes(0L, (byte[]) null, 3293, 3293);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an octal integer into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by space and NUL
 *
 * @param value The value to write
 * @param buf The buffer to receive the output
 * @param offset The starting offset into the buffer
 * @param length The size of the output buffer
 * @return The updated offset, i.e offset+length
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // For space and trailing null
    int idx = length - 2;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing space
    buf[offset + idx++] = (byte) ' ';
    // Trailing null
    buf[offset + idx] = 0;
    return offset + length;
}","public void test2020() throws Throwable {
    byte[] byteArray0 = new byte[7];
    // Undeclared exception!
    try {
        TarUtils.formatOctalBytes(929L, byteArray0, 225, (-3730));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 929=1641 will not fit in octal number buffer of length -3732
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an octal integer into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by space and NUL
 *
 * @param value The value to write
 * @param buf The buffer to receive the output
 * @param offset The starting offset into the buffer
 * @param length The size of the output buffer
 * @return The updated offset, i.e offset+length
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length, final ZipEncoding encoding) throws IOException {
    int len = name.length();
    ByteBuffer b = encoding.encode(name);
    while (b.limit() > length && len > 0) {
        b = encoding.encode(name.substring(0, --len));
    }
    final int limit = b.limit() - b.position();
    System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);
    // Pad any remaining output bytes with NUL
    for (int i = limit; i < length; ++i) {
        buf[offset + i] = 0;
    }
    return offset + length;
}","public void test2121() throws Throwable {
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        TarUtils.formatNameBytes(""\""jpGIED/po-SHzQnU"", byteArray0, 0, (int) (byte) 106, (ZipEncoding) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 * @return The updated offset, i.e. offset + length
 * @throws IOException on error
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length, final ZipEncoding encoding) throws IOException {
    int len = name.length();
    ByteBuffer b = encoding.encode(name);
    while (b.limit() > length && len > 0) {
        b = encoding.encode(name.substring(0, --len));
    }
    final int limit = b.limit() - b.position();
    System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);
    // Pad any remaining output bytes with NUL
    for (int i = limit; i < length; ++i) {
        buf[offset + i] = 0;
    }
    return offset + length;
}","public void test2222() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ZipEncoding zipEncoding0 = TarUtils.DEFAULT_ENCODING;
    // Undeclared exception!
    try {
        TarUtils.formatNameBytes(""L=uZ"", byteArray0, 684, 0, zipEncoding0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 * @return The updated offset, i.e. offset + length
 * @throws IOException on error
 */"
"public static int formatLongOctalOrBinaryBytes(final long value, byte[] buf, final int offset, final int length) {
    // Check whether we are dealing with UID/GID or SIZE field
    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
    final boolean negative = value < 0;
    if (!negative && value <= maxAsOctalChar) {
        // OK to store as octal chars
        return formatLongOctalBytes(value, buf, offset, length);
    }
    if (length < 9) {
        formatLongBinary(value, buf, offset, length, negative);
    }
    formatBigIntegerBinary(value, buf, offset, length, negative);
    buf[offset] = (byte) (negative ? 0xff : 0x80);
    return offset + length;
}","public void test2323() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalOrBinaryBytes((-408L), (byte[]) null, (-845), 13);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}","/**
 * Write an long integer into a buffer as an octal string if this
 * will fit, or as a binary number otherwise.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write into the buffer.
 * @param buf The destination buffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer.
 * @return The updated offset.
 * @throws IllegalArgumentException if the value (and trailer)
 * will not fit in the buffer.
 * @since 1.4
 */"
"public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // For space
    int idx = length - 1;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing space
    buf[offset + idx] = (byte) ' ';
    return offset + length;
}","public void test2424() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalBytes(0L, (byte[]) null, 9, 2);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an octal long integer into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write as octal
 * @param buf The destinationbuffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer
 * @return The updated offset
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // For space
    int idx = length - 1;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing space
    buf[offset + idx] = (byte) ' ';
    return offset + length;
}","public void test2525() throws Throwable {
    byte[] byteArray0 = new byte[5];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalBytes((-217L), byteArray0, 170, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -217=1777777777777777777447 will not fit in octal number buffer of length -1
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an octal long integer into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write as octal
 * @param buf The destinationbuffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer
 * @return The updated offset
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // for NUL and space
    int idx = length - 2;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing null
    buf[offset + idx++] = 0;
    // Trailing space
    buf[offset + idx] = (byte) ' ';
    return offset + length;
}","public void test2626() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.formatCheckSumOctalBytes(0L, (byte[]) null, 789, 789);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Writes an octal value into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by NUL and then space.
 *
 * @param value The value to convert
 * @param buf The destination buffer
 * @param offset The starting offset into the buffer.
 * @param length The size of the buffer.
 * @return The updated value of offset, i.e. offset+length
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static long computeCheckSum(final byte[] buf) {
    long sum = 0;
    for (byte element : buf) {
        sum += BYTE_MASK & element;
    }
    return sum;
}","public void test2727() throws Throwable {
    // Undeclared exception!
    try {
        TarUtils.computeCheckSum((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Compute the checksum of a tar entry header.
 *
 * @param buf The tar entry's header buffer.
 * @return The computed checksum.
 */"
"public static int formatLongOctalOrBinaryBytes(final long value, byte[] buf, final int offset, final int length) {
    // Check whether we are dealing with UID/GID or SIZE field
    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
    final boolean negative = value < 0;
    if (!negative && value <= maxAsOctalChar) {
        // OK to store as octal chars
        return formatLongOctalBytes(value, buf, offset, length);
    }
    if (length < 9) {
        formatLongBinary(value, buf, offset, length, negative);
    }
    formatBigIntegerBinary(value, buf, offset, length, negative);
    buf[offset] = (byte) (negative ? 0xff : 0x80);
    return offset + length;
}","public void test2828() throws Throwable {
    byte[] byteArray0 = new byte[1];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalOrBinaryBytes((-1259L), byteArray0, 68, (-1715));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Write an long integer into a buffer as an octal string if this
 * will fit, or as a binary number otherwise.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write into the buffer.
 * @param buf The destination buffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer.
 * @return The updated offset.
 * @throws IllegalArgumentException if the value (and trailer)
 * will not fit in the buffer.
 * @since 1.4
 */"
"public static void formatUnsignedOctalString(final long value, byte[] buffer, final int offset, final int length) {
    int remaining = length;
    remaining--;
    if (value == 0) {
        buffer[offset + remaining--] = (byte) '0';
    } else {
        long val = value;
        for (; remaining >= 0 && val != 0; --remaining) {
            // CheckStyle:MagicNumber OFF
            buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));
            val = val >>> 3;
            // CheckStyle:MagicNumber ON
        }
        if (val != 0) {
            throw new IllegalArgumentException(value + ""="" + Long.toOctalString(value) + "" will not fit in octal number buffer of length "" + length);
        }
    }
    for (; remaining >= 0; --remaining) {
        // leading zeros
        buffer[offset + remaining] = (byte) '0';
    }
}","public void test2929() throws Throwable {
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        TarUtils.formatUnsignedOctalString((-395L), byteArray0, (byte) (-118), (byte) (-118));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -395=1777777777777777777165 will not fit in octal number buffer of length -118
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Fill buffer with unsigned octal number, padded with leading zeroes.
 *
 * @param value number to convert to octal - treated as unsigned
 * @param buffer destination buffer
 * @param offset starting offset in buffer
 * @param length length of buffer to fill
 * @throws IllegalArgumentException if the value will not fit in the buffer
 */"
"public static void formatUnsignedOctalString(final long value, byte[] buffer, final int offset, final int length) {
    int remaining = length;
    remaining--;
    if (value == 0) {
        buffer[offset + remaining--] = (byte) '0';
    } else {
        long val = value;
        for (; remaining >= 0 && val != 0; --remaining) {
            // CheckStyle:MagicNumber OFF
            buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));
            val = val >>> 3;
            // CheckStyle:MagicNumber ON
        }
        if (val != 0) {
            throw new IllegalArgumentException(value + ""="" + Long.toOctalString(value) + "" will not fit in octal number buffer of length "" + length);
        }
    }
    for (; remaining >= 0; --remaining) {
        // leading zeros
        buffer[offset + remaining] = (byte) '0';
    }
}","public void test3030() throws Throwable {
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        TarUtils.formatUnsignedOctalString(0L, byteArray0, 4572, 913);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 5484
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Fill buffer with unsigned octal number, padded with leading zeroes.
 *
 * @param value number to convert to octal - treated as unsigned
 * @param buffer destination buffer
 * @param offset starting offset in buffer
 * @param length length of buffer to fill
 * @throws IllegalArgumentException if the value will not fit in the buffer
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length, final ZipEncoding encoding) throws IOException {
    int len = name.length();
    ByteBuffer b = encoding.encode(name);
    while (b.limit() > length && len > 0) {
        b = encoding.encode(name.substring(0, --len));
    }
    final int limit = b.limit() - b.position();
    System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);
    // Pad any remaining output bytes with NUL
    for (int i = limit; i < length; ++i) {
        buf[offset + i] = 0;
    }
    return offset + length;
}","public void test3131() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ZipEncoding zipEncoding0 = TarUtils.DEFAULT_ENCODING;
    int int0 = TarUtils.formatNameBytes(""AEp]<"", byteArray0, (int) (byte) 0, (int) (byte) 0, zipEncoding0);
    assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 * @return The updated offset, i.e. offset + length
 * @throws IOException on error
 */"
"public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException {
    int len = length;
    for (; len > 0; len--) {
        if (buffer[offset + len - 1] != 0) {
            break;
        }
    }
    if (len > 0) {
        byte[] b = new byte[len];
        System.arraycopy(buffer, offset, b, 0, len);
        return encoding.decode(b);
    }
    return """";
}","public void test3233() throws Throwable {
    byte[] byteArray0 = new byte[0];
    ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
    String string0 = TarUtils.parseName(byteArray0, (-1173), (-1173), zipEncoding0);
    assertEquals("""", string0);
}","/**
 * Parse an entry name from a buffer.
 * Parsing stops when a NUL is found
 * or the buffer length is reached.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 * @return The entry name.
 * @throws IOException on error
 */"
"public static long parseOctal(final byte[] buffer, final int offset, final int length) {
    long result = 0;
    int end = offset + length;
    int start = offset;
    if (length < 2) {
        throw new IllegalArgumentException(""Length "" + length + "" must be at least 2"");
    }
    if (buffer[start] == 0) {
        return 0L;
    }
    // Skip leading spaces
    while (start < end) {
        if (buffer[start] == ' ') {
            start++;
        } else {
            break;
        }
    }
    // Trim all trailing NULs and spaces.
    // The ustar and POSIX tar specs require a trailing NUL or
    // space but some implementations use the extra digit for big
    // sizes/uids/gids ...
    byte trailer = buffer[end - 1];
    while (start < end && (trailer == 0 || trailer == ' ')) {
        end--;
        trailer = buffer[end - 1];
    }
    for (; start < end; start++) {
        final byte currentByte = buffer[start];
        // CheckStyle:MagicNumber OFF
        if (currentByte < '0' || currentByte > '7') {
            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
        }
        // convert from ASCII
        result = (result << 3) + (currentByte - '0');
        // CheckStyle:MagicNumber ON
    }
    return result;
}","public void test3334() throws Throwable {
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        TarUtils.parseOctal(byteArray0, (byte) 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Length 0 must be at least 2
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an octal string from a buffer.
 *
 * <p>Leading spaces are ignored.
 * The buffer must contain a trailing space or NUL,
 * and may contain an additional trailing space or NUL.</p>
 *
 * <p>The input buffer is allowed to contain all NULs,
 * in which case the method returns 0L
 * (this allows for missing fields).</p>
 *
 * <p>To work-around some tar implementations that insert a
 * leading NUL this method returns 0 if it detects a leading NUL
 * since Commons Compress 1.4.</p>
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse - must be at least 2 bytes.
 * @return The long value of the octal string.
 * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
 */"
"public static boolean verifyCheckSum(byte[] header) {
    long storedSum = 0;
    long unsignedSum = 0;
    long signedSum = 0;
    int digits = 0;
    for (int i = 0; i < header.length; i++) {
        byte b = header[i];
        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
            if ('0' <= b && b <= '7' && digits++ < 6) {
                storedSum = storedSum * 8 + b - '0';
            } else if (digits > 0) {
                digits = 6;
            }
            b = ' ';
        }
        unsignedSum += 0xff & b;
        signedSum += b;
    }
    return storedSum == unsignedSum || storedSum == signedSum;
}","public void test3435() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-26);
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 7;
    byteArray0[3] = (byte) 8;
    byteArray0[4] = (byte) 115;
    byteArray0[5] = (byte) (-107);
    boolean boolean0 = TarUtils.verifyCheckSum(byteArray0);
    assertTrue(boolean0);
}","/**
 * Wikipedia <a href=""http://en.wikipedia.org/wiki/Tar_(file_format)#File_header"">says</a>:
 * <blockquote>
 * The checksum is calculated by taking the sum of the unsigned byte values
 * of the header block with the eight checksum bytes taken to be ascii
 * spaces (decimal value 32). It is stored as a six digit octal number with
 * leading zeroes followed by a NUL and then a space. Various
 * implementations do not adhere to this format. For better compatibility,
 * ignore leading and trailing whitespace, and get the first six digits. In
 * addition, some historic tar implementations treated bytes as signed.
 * Implementations typically calculate the checksum both ways, and treat it
 * as good if either the signed or unsigned sum matches the included
 * checksum.
 * </blockquote>
 * <p>
 * The return value of this method should be treated as a best-effort
 * heuristic rather than an absolute and final truth. The checksum
 * verification logic may well evolve over time as more special cases
 * are encountered.
 *
 * @param header tar header
 * @return whether the checksum is reasonably good
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-191"">COMPRESS-191</a>
 * @since 1.5
 */"
"public static boolean verifyCheckSum(byte[] header) {
    long storedSum = 0;
    long unsignedSum = 0;
    long signedSum = 0;
    int digits = 0;
    for (int i = 0; i < header.length; i++) {
        byte b = header[i];
        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
            if ('0' <= b && b <= '7' && digits++ < 6) {
                storedSum = storedSum * 8 + b - '0';
            } else if (digits > 0) {
                digits = 6;
            }
            b = ' ';
        }
        unsignedSum += 0xff & b;
        signedSum += b;
    }
    return storedSum == unsignedSum || storedSum == signedSum;
}","public void test3536() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-26);
    boolean boolean0 = TarUtils.verifyCheckSum(byteArray0);
    assertFalse(boolean0);
}","/**
 * Wikipedia <a href=""http://en.wikipedia.org/wiki/Tar_(file_format)#File_header"">says</a>:
 * <blockquote>
 * The checksum is calculated by taking the sum of the unsigned byte values
 * of the header block with the eight checksum bytes taken to be ascii
 * spaces (decimal value 32). It is stored as a six digit octal number with
 * leading zeroes followed by a NUL and then a space. Various
 * implementations do not adhere to this format. For better compatibility,
 * ignore leading and trailing whitespace, and get the first six digits. In
 * addition, some historic tar implementations treated bytes as signed.
 * Implementations typically calculate the checksum both ways, and treat it
 * as good if either the signed or unsigned sum matches the included
 * checksum.
 * </blockquote>
 * <p>
 * The return value of this method should be treated as a best-effort
 * heuristic rather than an absolute and final truth. The checksum
 * verification logic may well evolve over time as more special cases
 * are encountered.
 *
 * @param header tar header
 * @return whether the checksum is reasonably good
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-191"">COMPRESS-191</a>
 * @since 1.5
 */"
"public static boolean verifyCheckSum(byte[] header) {
    long storedSum = 0;
    long unsignedSum = 0;
    long signedSum = 0;
    int digits = 0;
    for (int i = 0; i < header.length; i++) {
        byte b = header[i];
        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
            if ('0' <= b && b <= '7' && digits++ < 6) {
                storedSum = storedSum * 8 + b - '0';
            } else if (digits > 0) {
                digits = 6;
            }
            b = ' ';
        }
        unsignedSum += 0xff & b;
        signedSum += b;
    }
    return storedSum == unsignedSum || storedSum == signedSum;
}","public void test3637() throws Throwable {
    byte[] byteArray0 = new byte[6];
    boolean boolean0 = TarUtils.verifyCheckSum(byteArray0);
    assertTrue(boolean0);
}","/**
 * Wikipedia <a href=""http://en.wikipedia.org/wiki/Tar_(file_format)#File_header"">says</a>:
 * <blockquote>
 * The checksum is calculated by taking the sum of the unsigned byte values
 * of the header block with the eight checksum bytes taken to be ascii
 * spaces (decimal value 32). It is stored as a six digit octal number with
 * leading zeroes followed by a NUL and then a space. Various
 * implementations do not adhere to this format. For better compatibility,
 * ignore leading and trailing whitespace, and get the first six digits. In
 * addition, some historic tar implementations treated bytes as signed.
 * Implementations typically calculate the checksum both ways, and treat it
 * as good if either the signed or unsigned sum matches the included
 * checksum.
 * </blockquote>
 * <p>
 * The return value of this method should be treated as a best-effort
 * heuristic rather than an absolute and final truth. The checksum
 * verification logic may well evolve over time as more special cases
 * are encountered.
 *
 * @param header tar header
 * @return whether the checksum is reasonably good
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-191"">COMPRESS-191</a>
 * @since 1.5
 */"
"public static long computeCheckSum(final byte[] buf) {
    long sum = 0;
    for (byte element : buf) {
        sum += BYTE_MASK & element;
    }
    return sum;
}","public void test3738() throws Throwable {
    byte[] byteArray0 = new byte[8];
    long long0 = TarUtils.computeCheckSum(byteArray0);
    assertEquals(0L, long0);
}","/**
 * Compute the checksum of a tar entry header.
 *
 * @param buf The tar entry's header buffer.
 * @return The computed checksum.
 */"
"public static int formatLongOctalOrBinaryBytes(final long value, byte[] buf, final int offset, final int length) {
    // Check whether we are dealing with UID/GID or SIZE field
    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
    final boolean negative = value < 0;
    if (!negative && value <= maxAsOctalChar) {
        // OK to store as octal chars
        return formatLongOctalBytes(value, buf, offset, length);
    }
    if (length < 9) {
        formatLongBinary(value, buf, offset, length, negative);
    }
    formatBigIntegerBinary(value, buf, offset, length, negative);
    buf[offset] = (byte) (negative ? 0xff : 0x80);
    return offset + length;
}","public void test3839() throws Throwable {
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalOrBinaryBytes((-4136L), byteArray0, 0, (byte) (-63));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -4136 is too large for -63 byte field.
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an long integer into a buffer as an octal string if this
 * will fit, or as a binary number otherwise.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write into the buffer.
 * @param buf The destination buffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer.
 * @return The updated offset.
 * @throws IllegalArgumentException if the value (and trailer)
 * will not fit in the buffer.
 * @since 1.4
 */"
"public static int formatLongOctalOrBinaryBytes(final long value, byte[] buf, final int offset, final int length) {
    // Check whether we are dealing with UID/GID or SIZE field
    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
    final boolean negative = value < 0;
    if (!negative && value <= maxAsOctalChar) {
        // OK to store as octal chars
        return formatLongOctalBytes(value, buf, offset, length);
    }
    if (length < 9) {
        formatLongBinary(value, buf, offset, length, negative);
    }
    formatBigIntegerBinary(value, buf, offset, length, negative);
    buf[offset] = (byte) (negative ? 0xff : 0x80);
    return offset + length;
}","public void test3940() throws Throwable {
    byte[] byteArray0 = new byte[7];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalOrBinaryBytes((-1510L), byteArray0, (byte) 26, 3);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 28
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an long integer into a buffer as an octal string if this
 * will fit, or as a binary number otherwise.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write into the buffer.
 * @param buf The destination buffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer.
 * @return The updated offset.
 * @throws IllegalArgumentException if the value (and trailer)
 * will not fit in the buffer.
 * @since 1.4
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) {
    try {
        return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);
    } catch (IOException ex) {
        try {
            return formatNameBytes(name, buf, offset, length, FALLBACK_ENCODING);
        } catch (IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test4041() throws Throwable {
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        TarUtils.formatNameBytes("""", byteArray0, 0, 163);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @return The updated offset, i.e. offset + length
 */"
"public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException {
    int len = length;
    for (; len > 0; len--) {
        if (buffer[offset + len - 1] != 0) {
            break;
        }
    }
    if (len > 0) {
        byte[] b = new byte[len];
        System.arraycopy(buffer, offset, b, 0, len);
        return encoding.decode(b);
    }
    return """";
}","public void test4142() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[2] = (byte) 3;
    ZipEncoding zipEncoding0 = TarUtils.DEFAULT_ENCODING;
    String string0 = TarUtils.parseName(byteArray0, 0, (int) (byte) 3, zipEncoding0);
    assertEquals(""\u0000\u0000\u0003"", string0);
}","/**
 * Parse an entry name from a buffer.
 * Parsing stops when a NUL is found
 * or the buffer length is reached.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 * @return The entry name.
 * @throws IOException on error
 */"
"public static String parseName(byte[] buffer, final int offset, final int length) {
    try {
        return parseName(buffer, offset, length, DEFAULT_ENCODING);
    } catch (IOException ex) {
        try {
            return parseName(buffer, offset, length, FALLBACK_ENCODING);
        } catch (IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test4243() throws Throwable {
    byte[] byteArray0 = new byte[9];
    // Undeclared exception!
    try {
        TarUtils.parseName(byteArray0, (int) (byte) 6, (int) (byte) 28);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 33
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an entry name from a buffer.
 * Parsing stops when a NUL is found
 * or the buffer length is reached.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @return The entry name.
 */"
"public static boolean parseBoolean(final byte[] buffer, final int offset) {
    return buffer[offset] == 1;
}","public void test4344() throws Throwable {
    byte[] byteArray0 = new byte[8];
    byteArray0[1] = (byte) 1;
    boolean boolean0 = TarUtils.parseBoolean(byteArray0, (byte) 1);
    assertTrue(boolean0);
}","/**
 * Parse a boolean byte from a buffer.
 * Leading spaces and NUL are ignored.
 * The buffer may contain trailing spaces or NULs.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @return The boolean value of the bytes.
 * @throws IllegalArgumentException if an invalid byte is detected.
 */"
"public static boolean parseBoolean(final byte[] buffer, final int offset) {
    return buffer[offset] == 1;
}","public void test4445() throws Throwable {
    byte[] byteArray0 = new byte[9];
    boolean boolean0 = TarUtils.parseBoolean(byteArray0, (byte) 0);
    assertFalse(boolean0);
}","/**
 * Parse a boolean byte from a buffer.
 * Leading spaces and NUL are ignored.
 * The buffer may contain trailing spaces or NULs.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @return The boolean value of the bytes.
 * @throws IllegalArgumentException if an invalid byte is detected.
 */"
"public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) {
    if ((buffer[offset] & 0x80) == 0) {
        return parseOctal(buffer, offset, length);
    }
    final boolean negative = buffer[offset] == (byte) 0xff;
    if (length < 9) {
        return parseBinaryLong(buffer, offset, length, negative);
    }
    return parseBinaryBigInteger(buffer, offset, length, negative);
}","public void test4546() throws Throwable {
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-60);
    // Undeclared exception!
    try {
        TarUtils.parseOctalOrBinary(byteArray0, (byte) 0, (byte) 108);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Compute the value contained in a byte buffer.  If the most
 * significant bit of the first byte in the buffer is set, this
 * bit is ignored and the rest of the buffer is interpreted as a
 * binary number.  Otherwise, the buffer is interpreted as an
 * octal number as per the parseOctal function above.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @return The long value of the octal or binary string.
 * @throws IllegalArgumentException if the trailing space/NUL is
 * missing or an invalid byte is detected in an octal number, or
 * if a binary number would exceed the size of a signed long
 * 64-bit integer.
 * @since 1.4
 */"
"public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) {
    if ((buffer[offset] & 0x80) == 0) {
        return parseOctal(buffer, offset, length);
    }
    final boolean negative = buffer[offset] == (byte) 0xff;
    if (length < 9) {
        return parseBinaryLong(buffer, offset, length, negative);
    }
    return parseBinaryBigInteger(buffer, offset, length, negative);
}","public void test4647() throws Throwable {
    byte[] byteArray0 = new byte[10];
    byteArray0[0] = (byte) (-5);
    long long0 = TarUtils.parseOctalOrBinary(byteArray0, 0, (byte) (-5));
    assertEquals(0L, long0);
}","/**
 * Compute the value contained in a byte buffer.  If the most
 * significant bit of the first byte in the buffer is set, this
 * bit is ignored and the rest of the buffer is interpreted as a
 * binary number.  Otherwise, the buffer is interpreted as an
 * octal number as per the parseOctal function above.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @return The long value of the octal or binary string.
 * @throws IllegalArgumentException if the trailing space/NUL is
 * missing or an invalid byte is detected in an octal number, or
 * if a binary number would exceed the size of a signed long
 * 64-bit integer.
 * @since 1.4
 */"
"public static long parseOctal(final byte[] buffer, final int offset, final int length) {
    long result = 0;
    int end = offset + length;
    int start = offset;
    if (length < 2) {
        throw new IllegalArgumentException(""Length "" + length + "" must be at least 2"");
    }
    if (buffer[start] == 0) {
        return 0L;
    }
    // Skip leading spaces
    while (start < end) {
        if (buffer[start] == ' ') {
            start++;
        } else {
            break;
        }
    }
    // Trim all trailing NULs and spaces.
    // The ustar and POSIX tar specs require a trailing NUL or
    // space but some implementations use the extra digit for big
    // sizes/uids/gids ...
    byte trailer = buffer[end - 1];
    while (start < end && (trailer == 0 || trailer == ' ')) {
        end--;
        trailer = buffer[end - 1];
    }
    for (; start < end; start++) {
        final byte currentByte = buffer[start];
        // CheckStyle:MagicNumber OFF
        if (currentByte < '0' || currentByte > '7') {
            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
        }
        // convert from ASCII
        result = (result << 3) + (currentByte - '0');
        // CheckStyle:MagicNumber ON
    }
    return result;
}","public void test4748() throws Throwable {
    byte[] byteArray0 = new byte[9];
    TarUtils.formatUnsignedOctalString(540L, byteArray0, 0, 9);
    long long0 = TarUtils.parseOctal(byteArray0, 0, (byte) 2);
    assertArrayEquals(new byte[] { (byte) 48, (byte) 48, (byte) 48, (byte) 48, (byte) 48, (byte) 49, (byte) 48, (byte) 51, (byte) 52 }, byteArray0);
}","/**
 * Parse an octal string from a buffer.
 *
 * <p>Leading spaces are ignored.
 * The buffer must contain a trailing space or NUL,
 * and may contain an additional trailing space or NUL.</p>
 *
 * <p>The input buffer is allowed to contain all NULs,
 * in which case the method returns 0L
 * (this allows for missing fields).</p>
 *
 * <p>To work-around some tar implementations that insert a
 * leading NUL this method returns 0 if it detects a leading NUL
 * since Commons Compress 1.4.</p>
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse - must be at least 2 bytes.
 * @return The long value of the octal string.
 * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
 */"
"public static long parseOctal(final byte[] buffer, final int offset, final int length) {
    long result = 0;
    int end = offset + length;
    int start = offset;
    if (length < 2) {
        throw new IllegalArgumentException(""Length "" + length + "" must be at least 2"");
    }
    if (buffer[start] == 0) {
        return 0L;
    }
    // Skip leading spaces
    while (start < end) {
        if (buffer[start] == ' ') {
            start++;
        } else {
            break;
        }
    }
    // Trim all trailing NULs and spaces.
    // The ustar and POSIX tar specs require a trailing NUL or
    // space but some implementations use the extra digit for big
    // sizes/uids/gids ...
    byte trailer = buffer[end - 1];
    while (start < end && (trailer == 0 || trailer == ' ')) {
        end--;
        trailer = buffer[end - 1];
    }
    for (; start < end; start++) {
        final byte currentByte = buffer[start];
        // CheckStyle:MagicNumber OFF
        if (currentByte < '0' || currentByte > '7') {
            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
        }
        // convert from ASCII
        result = (result << 3) + (currentByte - '0');
        // CheckStyle:MagicNumber ON
    }
    return result;
}","public void test4850() throws Throwable {
    byte[] byteArray0 = new byte[4];
    long long0 = TarUtils.parseOctal(byteArray0, (byte) 0, (byte) 67);
    assertEquals(0L, long0);
}","/**
 * Parse an octal string from a buffer.
 *
 * <p>Leading spaces are ignored.
 * The buffer must contain a trailing space or NUL,
 * and may contain an additional trailing space or NUL.</p>
 *
 * <p>The input buffer is allowed to contain all NULs,
 * in which case the method returns 0L
 * (this allows for missing fields).</p>
 *
 * <p>To work-around some tar implementations that insert a
 * leading NUL this method returns 0 if it detects a leading NUL
 * since Commons Compress 1.4.</p>
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse - must be at least 2 bytes.
 * @return The long value of the octal string.
 * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
 */"
"public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) {
    if ((buffer[offset] & 0x80) == 0) {
        return parseOctal(buffer, offset, length);
    }
    final boolean negative = buffer[offset] == (byte) 0xff;
    if (length < 9) {
        return parseBinaryLong(buffer, offset, length, negative);
    }
    return parseBinaryBigInteger(buffer, offset, length, negative);
}","public void test4951() throws Throwable {
    byte[] byteArray0 = new byte[1];
    // Undeclared exception!
    try {
        TarUtils.parseOctalOrBinary(byteArray0, 0, (byte) (-16));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Length -16 must be at least 2
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Compute the value contained in a byte buffer.  If the most
 * significant bit of the first byte in the buffer is set, this
 * bit is ignored and the rest of the buffer is interpreted as a
 * binary number.  Otherwise, the buffer is interpreted as an
 * octal number as per the parseOctal function above.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @return The long value of the octal or binary string.
 * @throws IllegalArgumentException if the trailing space/NUL is
 * missing or an invalid byte is detected in an octal number, or
 * if a binary number would exceed the size of a signed long
 * 64-bit integer.
 * @since 1.4
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length, final ZipEncoding encoding) throws IOException {
    int len = name.length();
    ByteBuffer b = encoding.encode(name);
    while (b.limit() > length && len > 0) {
        b = encoding.encode(name.substring(0, --len));
    }
    final int limit = b.limit() - b.position();
    System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);
    // Pad any remaining output bytes with NUL
    for (int i = limit; i < length; ++i) {
        buf[offset + i] = 0;
    }
    return offset + length;
}","public void test5052() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
    int int0 = TarUtils.formatNameBytes(""dv@VnX%"", byteArray0, 0, (-668), zipEncoding0);
    assertEquals((-668), int0);
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 * @return The updated offset, i.e. offset + length
 * @throws IOException on error
 */"
"public static String parseName(byte[] buffer, final int offset, final int length) {
    try {
        return parseName(buffer, offset, length, DEFAULT_ENCODING);
    } catch (IOException ex) {
        try {
            return parseName(buffer, offset, length, FALLBACK_ENCODING);
        } catch (IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test5154() throws Throwable {
    byte[] byteArray0 = new byte[0];
    String string0 = TarUtils.parseName(byteArray0, 0, 0);
    assertEquals("""", string0);
}","/**
 * Parse an entry name from a buffer.
 * Parsing stops when a NUL is found
 * or the buffer length is reached.
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse.
 * @return The entry name.
 */"
"public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // For space and trailing null
    int idx = length - 2;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing space
    buf[offset + idx++] = (byte) ' ';
    // Trailing null
    buf[offset + idx] = 0;
    return offset + length;
}","public void test5255() throws Throwable {
    byte[] byteArray0 = new byte[1];
    // Undeclared exception!
    try {
        TarUtils.formatOctalBytes(0L, byteArray0, (byte) 74, 1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 72
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an octal integer into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by space and NUL
 *
 * @param value The value to write
 * @param buf The buffer to receive the output
 * @param offset The starting offset into the buffer
 * @param length The size of the output buffer
 * @return The updated offset, i.e offset+length
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static long parseOctal(final byte[] buffer, final int offset, final int length) {
    long result = 0;
    int end = offset + length;
    int start = offset;
    if (length < 2) {
        throw new IllegalArgumentException(""Length "" + length + "" must be at least 2"");
    }
    if (buffer[start] == 0) {
        return 0L;
    }
    // Skip leading spaces
    while (start < end) {
        if (buffer[start] == ' ') {
            start++;
        } else {
            break;
        }
    }
    // Trim all trailing NULs and spaces.
    // The ustar and POSIX tar specs require a trailing NUL or
    // space but some implementations use the extra digit for big
    // sizes/uids/gids ...
    byte trailer = buffer[end - 1];
    while (start < end && (trailer == 0 || trailer == ' ')) {
        end--;
        trailer = buffer[end - 1];
    }
    for (; start < end; start++) {
        final byte currentByte = buffer[start];
        // CheckStyle:MagicNumber OFF
        if (currentByte < '0' || currentByte > '7') {
            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
        }
        // convert from ASCII
        result = (result << 3) + (currentByte - '0');
        // CheckStyle:MagicNumber ON
    }
    return result;
}","public void test5356() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 116;
    // Undeclared exception!
    try {
        TarUtils.parseOctal(byteArray0, 0, (byte) 2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid byte 116 at offset 0 in 't{NUL}' len=2
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an octal string from a buffer.
 *
 * <p>Leading spaces are ignored.
 * The buffer must contain a trailing space or NUL,
 * and may contain an additional trailing space or NUL.</p>
 *
 * <p>The input buffer is allowed to contain all NULs,
 * in which case the method returns 0L
 * (this allows for missing fields).</p>
 *
 * <p>To work-around some tar implementations that insert a
 * leading NUL this method returns 0 if it detects a leading NUL
 * since Commons Compress 1.4.</p>
 *
 * @param buffer The buffer from which to parse.
 * @param offset The offset into the buffer from which to parse.
 * @param length The maximum number of bytes to parse - must be at least 2 bytes.
 * @return The long value of the octal string.
 * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
 */"
"public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length) {
    // for NUL and space
    int idx = length - 2;
    formatUnsignedOctalString(value, buf, offset, idx);
    // Trailing null
    buf[offset + idx++] = 0;
    // Trailing space
    buf[offset + idx] = (byte) ' ';
    return offset + length;
}","public void test5457() throws Throwable {
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        TarUtils.formatCheckSumOctalBytes((-1260L), byteArray0, 55, (-3132));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -1260=1777777777777777775424 will not fit in octal number buffer of length -3134
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Writes an octal value into a buffer.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by NUL and then space.
 *
 * @param value The value to convert
 * @param buf The destination buffer
 * @param offset The starting offset into the buffer.
 * @param length The size of the buffer.
 * @return The updated value of offset, i.e. offset+length
 * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
 */"
"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) {
    try {
        return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);
    } catch (IOException ex) {
        try {
            return formatNameBytes(name, buf, offset, length, FALLBACK_ENCODING);
        } catch (IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test5558() throws Throwable {
    byte[] byteArray0 = new byte[7];
    // Undeclared exception!
    try {
        TarUtils.formatNameBytes((String) null, byteArray0, (int) (byte) 0, (int) (byte) (-128));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Copy a name into a buffer.
 * Copies characters from the name into the buffer
 * starting at the specified offset.
 * If the buffer is longer than the name, the buffer
 * is filled with trailing NULs.
 * If the name is longer than the buffer,
 * the output is truncated.
 *
 * @param name The header name from which to copy the characters.
 * @param buf The buffer where the name is to be stored.
 * @param offset The starting offset into the buffer
 * @param length The maximum number of header bytes to copy.
 * @return The updated offset, i.e. offset + length
 */"
"public static int formatLongOctalOrBinaryBytes(final long value, byte[] buf, final int offset, final int length) {
    // Check whether we are dealing with UID/GID or SIZE field
    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
    final boolean negative = value < 0;
    if (!negative && value <= maxAsOctalChar) {
        // OK to store as octal chars
        return formatLongOctalBytes(value, buf, offset, length);
    }
    if (length < 9) {
        formatLongBinary(value, buf, offset, length, negative);
    }
    formatBigIntegerBinary(value, buf, offset, length, negative);
    buf[offset] = (byte) (negative ? 0xff : 0x80);
    return offset + length;
}","public void test5659() throws Throwable {
    byte[] byteArray0 = new byte[4];
    // Undeclared exception!
    try {
        TarUtils.formatLongOctalOrBinaryBytes(67L, byteArray0, 194, (byte) 8);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 200
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an long integer into a buffer as an octal string if this
 * will fit, or as a binary number otherwise.
 *
 * Uses {@link #formatUnsignedOctalString} to format
 * the value as an octal string with leading zeros.
 * The converted number is followed by a space.
 *
 * @param value The value to write into the buffer.
 * @param buf The destination buffer.
 * @param offset The starting offset into the buffer.
 * @param length The length of the buffer.
 * @return The updated offset.
 * @throws IllegalArgumentException if the value (and trailer)
 * will not fit in the buffer.
 * @since 1.4
 */"
