project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test0023,"public void test0023() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test0034,"public void test0034() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = Vector3D.distance1(vector3D0, vector3D0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test0045,"public void test0045() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test0046,"public void test0046() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals((-1.0), vector3D1.getZ(), 0.01);
}",0,
project,0,test0047,"public void test0047() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(1.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test0048,"public void test0048() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test0049,"public void test0049() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00510,"public void test00510() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test00511,"public void test00511() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test00512,"public void test00512() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals((-2.0), vector3D1.getY(), 0.01);
}",0,
project,0,test00513,"public void test00513() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(4.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test00514,"public void test00514() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(vector3D0.equals((Object) vector3D1));
}",0,
project,0,test00515,"public void test00515() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00616,"public void test00616() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(2.4741236059851676E7, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test00617,"public void test00617() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(vector3D0.equals((Object) vector3D1));
}",0,
project,0,test00618,"public void test00618() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00719,"public void test00719() throws Throwable {
    Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));
    Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
    Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);
    Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));
    double double0 = Vector3D.angle(vector3D1, vector3D4);
    assertEquals(3.141592653559801, double0, 0.01);
}",1,
project,0,test00720,"public void test00720() throws Throwable {
    Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));
    Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
    Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);
    Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));
    double double0 = Vector3D.angle(vector3D1, vector3D4);
    assertEquals(294.0708254142704, vector3D1.getY(), 0.01);
}",0,
project,0,test00821,"public void test00821() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.6, 342.0);
    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
    double double0 = Vector3D.angle(vector3D1, vector3D0);
    assertEquals((-0.5123901464912445), vector3D0.getY(), 0.01);
}",0,
project,0,test00822,"public void test00822() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.6, 342.0);
    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
    double double0 = Vector3D.angle(vector3D1, vector3D0);
    assertEquals(6.647751099882482E-17, double0, 0.01);
}",1,
project,0,test00823,"public void test00823() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.6, 342.0);
    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
    double double0 = Vector3D.angle(vector3D1, vector3D0);
    assertEquals((-0.7489586004490071), vector3D0.getX(), 0.01);
}",0,
project,0,test00924,"public void test00924() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = Vector3D.angle(vector3D0, vector3D0);
    assertEquals(Double.NaN, double0, 0.01);
}",1,
project,0,test01025,"public void test01025() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
    Vector3D.angle(vector3D0, vector3D1);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
}",0,
project,0,test01026,"public void test01026() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
    Vector3D.angle(vector3D0, vector3D1);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
}",0,
project,0,test01027,"public void test01027() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
    Vector3D.angle(vector3D0, vector3D1);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
}",0,
project,0,test01128,"public void test01128() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test01129,"public void test01129() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test01130,"public void test01130() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}",0,
project,0,test01231,"public void test01231() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NaN.normalize();
    assertTrue(vector3D1.isNaN());
}",0,assertTrue(vector3D1.isNaN())
project,0,test01332,"public void test01332() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test01333,"public void test01333() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test01334,"public void test01334() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test01335,"public void test01335() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(0.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test01336,"public void test01336() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test01437,"public void test01437() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(-0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test01438,"public void test01438() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(-0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test01439,"public void test01439() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test01440,"public void test01440() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(1.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test01441,"public void test01441() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test01542,"public void test01542() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.getNormSq();
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test01643,"public void test01643() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    double double0 = vector3D0.getNorm1();
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test01744,"public void test01744() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
    assertEquals(2.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test01745,"public void test01745() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
    assertEquals((-1.0), vector3D1.getY(), 0.01);
}",0,
project,0,test01746,"public void test01746() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
    assertEquals(1.0, vector3D1.getX(), 0.01);
}",0,
project,0,test01747,"public void test01747() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test01848,"public void test01848() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
}",0,
project,0,test01849,"public void test01849() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
    assertTrue(vector3D1.isInfinite());
}",0,assertTrue(vector3D1.isInfinite())
project,0,test01850,"public void test01850() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
}",0,
project,0,test01851,"public void test01851() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
}",0,
project,0,test01952,"public void test01952() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals((-0.48297428029025974), vector3D0.getZ(), 0.01);
}",0,
project,0,test01953,"public void test01953() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}",0,
project,0,test01954,"public void test01954() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D0.getY(), 0.01);
}",0,
project,0,test01955,"public void test01955() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test01956,"public void test01956() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.8756345382510363, vector3D0.getX(), 0.01);
}",0,
project,0,test01957,"public void test01957() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D2.getNormSq(), 0.01);
}",0,
project,0,test01958,"public void test01958() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test02059,"public void test02059() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
}",0,
project,0,test02060,"public void test02060() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
}",0,
project,0,test02061,"public void test02061() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
}",0,
project,0,test02162,"public void test02162() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
    assertEquals(3070629.5879694405, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test02163,"public void test02163() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test02164,"public void test02164() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
    assertEquals((-1752.3212), vector3D1.getX(), 0.01);
}",0,
project,0,test02165,"public void test02165() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test02266,"public void test02266() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
    assertEquals(0.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test02267,"public void test02267() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test02268,"public void test02268() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test02269,"public void test02269() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test02370,"public void test02370() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.orthogonal();
    assertEquals(0.9999, vector3D0.getX(), 0.01);
}",0,
project,0,test02371,"public void test02371() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.orthogonal();
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test02372,"public void test02372() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.orthogonal();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test02373,"public void test02373() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.orthogonal();
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test02474,"public void test02474() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
    double double0 = Vector3D.distance1(vector3D1, vector3D1);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test02475,"public void test02475() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
    double double0 = Vector3D.distance1(vector3D1, vector3D1);
    assertEquals((-1.0), vector3D1.getY(), 0.01);
}",0,
project,0,test02476,"public void test02476() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
    double double0 = Vector3D.distance1(vector3D1, vector3D1);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test02477,"public void test02477() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
    double double0 = Vector3D.distance1(vector3D1, vector3D1);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test02578,"public void test02578() throws Throwable {
    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.negate();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
}",0,
project,0,test02579,"public void test02579() throws Throwable {
    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.negate();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
}",0,
project,0,test02580,"public void test02580() throws Throwable {
    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.negate();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
}",0,
project,0,test02681,"public void test02681() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.ZERO.negate();
    assertEquals(-0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test02682,"public void test02682() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.ZERO.negate();
    assertEquals(-0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test02683,"public void test02683() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.ZERO.negate();
    assertEquals(-0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test02784,"public void test02784() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
    double double0 = vector3D0.getZ();
    assertEquals(400.0123002055866, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test02785,"public void test02785() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
    double double0 = vector3D0.getZ();
    assertEquals(0.07842259109020233, double0, 0.01);
}",0,
project,0,test02786,"public void test02786() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
    double double0 = vector3D0.getZ();
    assertEquals(0.07842259109020233, vector3D0.getX(), 0.01);
}",0,
project,0,test02787,"public void test02787() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
    double double0 = vector3D0.getZ();
    assertEquals(20.0, vector3D0.getY(), 0.01);
}",0,
project,0,test02888,"public void test02888() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.getZ();
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}",0,
project,0,test02989,"public void test02989() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    double double0 = vector3D0.getY();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test03090,"public void test03090() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
    double double0 = vector3D0.getY();
    assertEquals(409.0, double0, 0.01);
}",0,
project,0,test03091,"public void test03091() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
    double double0 = vector3D0.getY();
    assertEquals(409.0, vector3D0.getZ(), 0.01);
}",0,
project,0,test03092,"public void test03092() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
    double double0 = vector3D0.getY();
    assertEquals(0.0, vector3D0.getX(), 0.01);
}",0,
project,0,test03093,"public void test03093() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
    double double0 = vector3D0.getY();
    assertEquals(334562.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test03194,"public void test03194() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
    double double0 = vector3D1.getX();
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}",0,
project,0,test03195,"public void test03195() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
    double double0 = vector3D1.getX();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test03196,"public void test03196() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
    double double0 = vector3D1.getX();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}",0,
project,0,test03297,"public void test03297() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.getX();
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}",0,
project,0,test03398,"public void test03398() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    double double0 = vector3D0.getNormSq();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test03499,"public void test03499() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.ZERO.getNormInf();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test035100,"public void test035100() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.ZERO.getNorm1();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test036101,"public void test036101() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    double double0 = vector3D0.ZERO.getNorm();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test037102,"public void test037102() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    double double0 = vector3D0.getDelta();
    assertEquals(1.5707963267948966, double0, 0.01);
}",0,
project,0,test038103,"public void test038103() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = vector3D0.MINUS_K.getDelta();
    assertEquals((-1.5707963267948966), double0, 0.01);
}",0,
project,0,test039104,"public void test039104() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    double double0 = vector3D0.MINUS_I.getAlpha();
    assertEquals(3.141592653589793, double0, 0.01);
}",0,
project,0,test040105,"public void test040105() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = vector3D0.NEGATIVE_INFINITY.getAlpha();
    assertEquals((-2.356194490192345), double0, 0.01);
}",0,
project,0,test041106,"public void test041106() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = Vector3D.dotProduct(vector3D0, vector3D0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test042107,"public void test042107() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test042108,"public void test042108() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    assertEquals(1.0, vector3D1.getX(), 0.01);
}",0,
project,0,test042109,"public void test042109() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    assertEquals((-1.0), double0, 0.01);
}",0,
project,0,test042110,"public void test042110() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    assertEquals(2.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test043111,"public void test043111() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test043112,"public void test043112() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test043113,"public void test043113() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test043114,"public void test043114() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test044115,"public void test044115() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.orthogonal();
    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test044116,"public void test044116() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.orthogonal();
    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(1.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test044117,"public void test044117() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.orthogonal();
    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test044118,"public void test044118() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.orthogonal();
    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test045119,"public void test045119() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
    double double0 = Vector3D.distance1(vector3D1, vector3D0);
    assertEquals(2.0, double0, 0.01);
}",0,
project,0,test045120,"public void test045120() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
    double double0 = Vector3D.distance1(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test045121,"public void test045121() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
    double double0 = Vector3D.distance1(vector3D1, vector3D0);
    assertEquals(-0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test045122,"public void test045122() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
    double double0 = Vector3D.distance1(vector3D1, vector3D0);
    assertEquals((-1.0), vector3D1.getZ(), 0.01);
}",0,
project,0,test046123,"public void test046123() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = Vector3D.distance(vector3D0, vector3D0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test047124,"public void test047124() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
    double double0 = Vector3D.distance(vector3D0, vector3D1);
    assertEquals(-0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test047125,"public void test047125() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
    double double0 = Vector3D.distance(vector3D0, vector3D1);
    assertEquals(4281.08, double0, 0.01);
}",0,
project,0,test047126,"public void test047126() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
    double double0 = Vector3D.distance(vector3D0, vector3D1);
    assertEquals(-0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test048127,"public void test048127() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
    assertEquals((-368.18896542120007), vector3D3.getY(), 0.01);
}",0,
project,0,test048128,"public void test048128() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
    assertEquals((-8.0E298), vector3D2.getY(), 0.01);
}",0,
project,0,test048129,"public void test048129() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
    assertTrue(vector3D3.isInfinite());
}",0,assertTrue(vector3D3.isInfinite())
project,0,test049130,"public void test049130() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));
    Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.9999999999999998, vector3D3.getNormSq(), 0.01);
}",0,
project,0,test049131,"public void test049131() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));
    Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals((-0.7071067811865475), vector3D3.getX(), 0.01);
}",0,
project,0,test050132,"public void test050132() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test050133,"public void test050133() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}",0,
project,0,test050134,"public void test050134() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getX(), 0.01);
}",0,
project,0,test051135,"public void test051135() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
}",0,
project,0,test051136,"public void test051136() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
}",0,
project,0,test051137,"public void test051137() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
}",0,
project,0,test051138,"public void test051138() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
    assertFalse(vector3D1.isNaN());
}",0,assertTrue(vector3D1.isNaN())
project,0,test052139,"public void test052139() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D vector3D2 = vector3D0.add(vector3D1);
    assertEquals(Double.NaN, vector3D2.getX(), 0.01);
}",0,
project,0,test052140,"public void test052140() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D vector3D2 = vector3D0.add(vector3D1);
    assertEquals(Double.NaN, vector3D2.getY(), 0.01);
}",0,
project,0,test052141,"public void test052141() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D vector3D2 = vector3D0.add(vector3D1);
    assertEquals(0.0, vector3D2.getZ(), 0.01);
}",0,
project,0,test053142,"public void test053142() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.0, vector3D2.getX(), 0.01);
}",0,
project,0,test053143,"public void test053143() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals((-0.7063126629085149), vector3D0.getZ(), 0.01);
}",0,
project,0,test053144,"public void test053144() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.49999874016678386, vector3D0.getY(), 0.01);
}",0,
project,0,test053145,"public void test053145() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.9999999999999998, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test053146,"public void test053146() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.0, vector3D2.getNormSq(), 0.01);
}",0,
project,0,test053147,"public void test053147() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals((-0.5011224222150824), vector3D1.getX(), 0.01);
}",0,
project,0,test053148,"public void test053148() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}",0,
project,0,test054149,"public void test054149() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D2 = vector3D1.add(0.0, vector3D0);
    assertTrue(vector3D2.equals((Object) vector3D1));
}",0,
project,0,test055150,"public void test055150() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(1.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test055151,"public void test055151() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}",0,
project,0,test055152,"public void test055152() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(0.0, vector3D2.getX(), 0.01);
}",0,
project,0,test055153,"public void test055153() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(0.0, vector3D2.getNormSq(), 0.01);
}",0,
project,0,test055154,"public void test055154() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(0.0, vector3D2.getZ(), 0.01);
}",0,
project,0,test055155,"public void test055155() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(-0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test055156,"public void test055156() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(-0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test056157,"public void test056157() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    // Undeclared exception!
    try {
        vector3D0.PLUS_I.subtract((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test057158,"public void test057158() throws Throwable {
    Vector3D vector3D0 = new Vector3D(2714.53457909, 2714.53457909, 2714.53457909);
    // Undeclared exception!
    try {
        vector3D0.subtract(2714.53457909, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test058159,"public void test058159() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    // Undeclared exception!
    try {
        Vector3D.distanceSq(vector3D0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test059160,"public void test059160() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-1036.6), Double.NEGATIVE_INFINITY, (-610.2));
    // Undeclared exception!
    try {
        Vector3D.distanceInf(vector3D0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test060161,"public void test060161() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.097, (-4218.6746623851), 0.0);
    // Undeclared exception!
    try {
        Vector3D.distance1((Vector3D) null, vector3D0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test061162,"public void test061162() throws Throwable {
    // Undeclared exception!
    try {
        Vector3D.distance((Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test062163,"public void test062163() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    // Undeclared exception!
    try {
        Vector3D.crossProduct(vector3D0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test063164,"public void test063164() throws Throwable {
    // Undeclared exception!
    try {
        Vector3D.angle((Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",1,
project,0,test064165,"public void test064165() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_J;
    // Undeclared exception!
    try {
        vector3D0.add((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test065166,"public void test065166() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    // Undeclared exception!
    try {
        vector3D0.PLUS_I.add((-135.3), (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test066167,"public void test066167() throws Throwable {
    Vector3D vector3D0 = null;
    try {
        vector3D0 = new Vector3D((-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test067168,"public void test067168() throws Throwable {
    Vector3D vector3D0 = null;
    try {
        vector3D0 = new Vector3D(0.0, (Vector3D) null, 0.0, (Vector3D) null, 0.0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test068169,"public void test068169() throws Throwable {
    Vector3D vector3D0 = null;
    try {
        vector3D0 = new Vector3D(10.0, (Vector3D) null, Double.NaN, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test069170,"public void test069170() throws Throwable {
    Vector3D vector3D0 = null;
    try {
        vector3D0 = new Vector3D((-3672.146764020265), (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test070171,"public void test070171() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    boolean boolean0 = vector3D0.isNaN();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test071172,"public void test071172() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    boolean boolean0 = vector3D0.isNaN();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test072173,"public void test072173() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test072174,"public void test072174() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertFalse(vector3D0.isNaN());
}",0,assertTrue(vector3D0.isNaN())
project,0,test072175,"public void test072175() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
}",0,
project,0,test072176,"public void test072176() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}",0,
project,0,test072177,"public void test072177() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test073178,"public void test073178() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test073179,"public void test073179() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test073180,"public void test073180() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test073181,"public void test073181() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test073182,"public void test073182() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}",0,
project,0,test074183,"public void test074183() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.getZ();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test075184,"public void test075184() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.getY();
    assertEquals((-1.0), double0, 0.01);
}",0,
project,0,test076185,"public void test076185() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    // Undeclared exception!
    try {
        Vector3D.dotProduct((Vector3D) null, vector3D0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",0,
project,0,test077186,"public void test077186() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
    double double0 = vector3D0.getX();
    assertEquals((-1411.89255812476), vector3D0.getZ(), 0.01);
}",0,
project,0,test077187,"public void test077187() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
    double double0 = vector3D0.getX();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test077188,"public void test077188() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
    double double0 = vector3D0.getX();
    assertEquals(0.0, vector3D0.getY(), 0.01);
}",0,
project,0,test077189,"public void test077189() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
    double double0 = vector3D0.getX();
    assertEquals(1993440.5956880786, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test078190,"public void test078190() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    double double0 = vector3D0.MINUS_K.getNorm();
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test079191,"public void test079191() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test079192,"public void test079192() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertFalse(vector3D0.isNaN());
}",0,assertTrue(vector3D0.isNaN())
project,0,test079193,"public void test079193() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}",0,
project,0,test079194,"public void test079194() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertEquals(1.0, vector3D0.getX(), 0.01);
}",0,
project,0,test079195,"public void test079195() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertEquals(0.0, vector3D0.getY(), 0.01);
}",0,
project,0,test080196,"public void test080196() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test080197,"public void test080197() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}",0,
project,0,test080198,"public void test080198() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertEquals(0.0, vector3D3.getX(), 0.01);
}",0,
project,0,test080199,"public void test080199() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertFalse(vector3D3.equals((Object) vector3D1));
}",0,
project,0,test080200,"public void test080200() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
}",0,
project,0,test080201,"public void test080201() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test081202,"public void test081202() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(vector3D0.equals((Object) vector3D1));
}",0,
project,0,test081203,"public void test081203() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(-0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test081204,"public void test081204() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test081205,"public void test081205() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(1.0, vector3D1.getY(), 0.01);
}",0,
project,0,test081206,"public void test081206() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test082207,"public void test082207() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals((-1.0), vector3D2.getZ(), 0.01);
}",0,
project,0,test082208,"public void test082208() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
}",0,
project,0,test082209,"public void test082209() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(0.0, vector3D2.getX(), 0.01);
}",0,
project,0,test082210,"public void test082210() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(1.0, vector3D2.getNormSq(), 0.01);
}",0,
project,0,test082211,"public void test082211() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test082212,"public void test082212() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertFalse(vector3D2.equals((Object) vector3D1));
}",0,
project,0,test082213,"public void test082213() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(0.4632477837450123, vector3D0.getX(), 0.01);
}",0,
project,0,test082214,"public void test082214() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test082215,"public void test082215() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(0.7326337531502269, vector3D0.getZ(), 0.01);
}",0,
project,0,test083216,"public void test083216() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test083217,"public void test083217() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertEquals(0.4201396822393068, vector3D0.getZ(), 0.01);
}",0,
project,0,test083218,"public void test083218() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertEquals((-0.6247762571148826), vector3D0.getY(), 0.01);
}",0,
project,0,test083219,"public void test083219() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test083220,"public void test083220() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertEquals((-0.6581316554864781), vector3D0.getX(), 0.01);
}",0,
project,0,test084221,"public void test084221() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertEquals(0.0, vector3D0.getY(), 0.01);
}",0,
project,0,test084222,"public void test084222() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test084223,"public void test084223() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}",0,
project,0,test084224,"public void test084224() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertEquals(1.0, vector3D0.getX(), 0.01);
}",0,
project,0,test084225,"public void test084225() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test085226,"public void test085226() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(47.9603363, vector3D0.getX(), 0.01);
}",0,
project,0,test085227,"public void test085227() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(47.9603363, vector3D0.getY(), 0.01);
}",0,
project,0,test085228,"public void test085228() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test085229,"public void test085229() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
}",0,
project,0,test086230,"public void test086230() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(47.9603363, vector3D0.getX(), 0.01);
}",0,
project,0,test086231,"public void test086231() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01);
}",0,
project,0,test086232,"public void test086232() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test086233,"public void test086233() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
}",0,
project,0,test087234,"public void test087234() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    boolean boolean0 = vector3D0.isInfinite();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test088235,"public void test088235() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    boolean boolean0 = vector3D0.isInfinite();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test088236,"public void test088236() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    boolean boolean0 = vector3D0.isInfinite();
    assertFalse(vector3D0.isNaN());
}",0,assertTrue(vector3D0.isNaN())
project,0,test089237,"public void test089237() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(0.0, vector3D0.getY(), 0.01);
}",0,
project,0,test089238,"public void test089238() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}",0,
project,0,test089239,"public void test089239() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(1.0, vector3D0.getX(), 0.01);
}",0,
project,0,test089240,"public void test089240() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test089241,"public void test089241() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertFalse(vector3D0.isNaN());
}",0,assertTrue(vector3D0.isNaN())
project,0,test089242,"public void test089242() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertTrue(vector3D1.isNaN());
}",0,assertTrue(vector3D1.isNaN())
project,0,test089243,"public void test089243() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test089244,"public void test089244() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test089245,"public void test089245() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}",0,
project,0,test090246,"public void test090246() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertTrue(vector3D1.isNaN());
}",0,assertTrue(vector3D1.isNaN())
project,0,test090247,"public void test090247() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.4632477837450123, vector3D0.getX(), 0.01);
}",0,
project,0,test090248,"public void test090248() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
}",0,
project,0,test090249,"public void test090249() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test090250,"public void test090250() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertFalse(vector3D1.equals((Object) vector3D0));
}",0,
project,0,test090251,"public void test090251() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.7326337531502269, vector3D0.getZ(), 0.01);
}",0,
project,0,test090252,"public void test090252() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test091253,"public void test091253() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D.angle(vector3D1, vector3D1);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test091254,"public void test091254() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D.angle(vector3D1, vector3D1);
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test092255,"public void test092255() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(-0.0, vector3D1.getZ(), 0.01);
}",0,
project,0,test092256,"public void test092256() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.0, vector3D2.getZ(), 0.01);
}",0,
project,0,test092257,"public void test092257() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.7071067811865475, vector3D3.getY(), 0.01);
}",0,
project,0,test092258,"public void test092258() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.7071067811865475, vector3D3.getX(), 0.01);
}",0,
project,0,test093259,"public void test093259() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
    Vector3D vector3D2 = vector3D1.subtract(vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.37696688233705905, vector3D2.getY(), 0.01);
}",0,
project,0,test093260,"public void test093260() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
    Vector3D vector3D2 = vector3D1.subtract(vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(1.0, vector3D3.getNormSq(), 0.01);
}",0,
project,0,test093261,"public void test093261() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
    Vector3D vector3D2 = vector3D1.subtract(vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test093262,"public void test093262() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
    Vector3D vector3D2 = vector3D1.subtract(vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.7933476776241507, vector3D3.getZ(), 0.01);
}",0,
project,0,test094263,"public void test094263() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertTrue(vector3D2.equals((Object) vector3D1));
}",0,
project,0,test094264,"public void test094264() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals((-1.0), vector3D1.getY(), 0.01);
}",0,
project,0,test094265,"public void test094265() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals(-0.0, vector3D2.getZ(), 0.01);
}",0,
project,0,test094266,"public void test094266() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}",0,
project,0,test094267,"public void test094267() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals((-1.0), vector3D2.getY(), 0.01);
}",0,
project,0,test094268,"public void test094268() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals(0.0, vector3D2.getX(), 0.01);
}",0,
project,0,test095269,"public void test095269() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    // Undeclared exception!
    try {
        vector3D0.normalize();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // cannot normalize a zero norm vector
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",1,
project,0,test096270,"public void test096270() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
    boolean boolean0 = vector3D1.isInfinite();
    assertEquals(Double.NaN, vector3D1.getX(), 0.01);
}",0,
project,0,test096271,"public void test096271() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
    boolean boolean0 = vector3D1.isInfinite();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test096272,"public void test096272() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
    boolean boolean0 = vector3D1.isInfinite();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test096273,"public void test096273() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
    boolean boolean0 = vector3D1.isInfinite();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}",0,
project,0,test097274,"public void test097274() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.MINUS_I.getNormInf();
    assertEquals(0.0, vector3D0.getY(), 0.01);
}",0,
project,0,test097275,"public void test097275() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.MINUS_I.getNormInf();
    assertEquals(1.0, vector3D0.getX(), 0.01);
}",0,
project,0,test097276,"public void test097276() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.MINUS_I.getNormInf();
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}",0,
project,0,test097277,"public void test097277() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.MINUS_I.getNormInf();
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}",0,
project,0,test098278,"public void test098278() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
}",0,
project,0,test098279,"public void test098279() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
}",0,
project,0,test098280,"public void test098280() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
}",0,
project,0,test099281,"public void test099281() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.getNormSq();
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}",0,
project,0,test100282,"public void test100282() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getX(), 0.01);
}",0,
project,0,test100283,"public void test100283() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}",0,
project,0,test100284,"public void test100284() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}",0,
project,0,test101285,"public void test101285() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.PLUS_J.getDelta();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test102286,"public void test102286() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.MINUS_I.add(vector3D0);
    assertTrue(vector3D1.equals((Object) vector3D0));
}",0,
project,0,test103287,"public void test103287() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    String string0 = vector3D0.MINUS_I.toString();
    assertEquals(""{-1; 0; 0}"", string0);
}",0,
project,0,test104288,"public void test104288() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = Vector3D.distance(vector3D0, vector3D0);
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test105289,"public void test105289() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.ZERO.getAlpha();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test106290,"public void test106290() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test107291,"public void test107291() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test107292,"public void test107292() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.0, vector3D0.getY(), 0.01);
}",0,
project,0,test107293,"public void test107293() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(1.3599999999999999, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test107294,"public void test107294() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.6, vector3D1.getX(), 0.01);
}",0,
project,0,test107295,"public void test107295() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals((-1.0), vector3D1.getZ(), 0.01);
}",0,
project,0,test107296,"public void test107296() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}",0,
project,0,test108297,"public void test108297() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
    // Undeclared exception!
    try {
        Vector3D.angle(vector3D0, vector3D1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // zero norm
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}",1,
project,0,test109298,"public void test109298() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D.angle(vector3D0, vector3D0);
}",1,
