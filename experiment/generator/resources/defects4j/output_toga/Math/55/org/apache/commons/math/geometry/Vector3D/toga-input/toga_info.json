{
  "test036101" : {
    "methodSignature" : "public double getNorm()",
    "methodName" : "getNorm",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036101() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    double double0 = vector3D0.ZERO.getNorm();\n}",
    "testName" : "test036101"
  },
  "test042108" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042108() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);\n    vector3D1.getX();\n}",
    "testName" : "test042108"
  },
  "test079193" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079193() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.POSITIVE_INFINITY.hashCode();\n    vector3D0.getZ();\n}",
    "testName" : "test079193"
  },
  "test042107" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042107() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);\n    vector3D1.getZ();\n}",
    "testName" : "test042107"
  },
  "test079192" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079192() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.POSITIVE_INFINITY.hashCode();\n    vector3D0.isNaN();\n}",
    "testName" : "test079192"
  },
  "test079191" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079191() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.POSITIVE_INFINITY.hashCode();\n    vector3D0.getNormSq();\n}",
    "testName" : "test079191"
  },
  "test042109" : {
    "methodSignature" : "public static double dotProduct(Vector3D v1, Vector3D v2)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042109() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);\n}",
    "testName" : "test042109"
  },
  "test0000" : {
    "methodSignature" : "public static double distanceSq(Vector3D v1, Vector3D v2)",
    "methodName" : "distanceSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = Vector3D.distanceSq(vector3D0, vector3D0);\n}",
    "testName" : "test0000"
  },
  "test079195" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079195() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.POSITIVE_INFINITY.hashCode();\n    vector3D0.getY();\n}",
    "testName" : "test079195"
  },
  "test079194" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079194() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.POSITIVE_INFINITY.hashCode();\n    vector3D0.getX();\n}",
    "testName" : "test079194"
  },
  "test083216" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083216() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);\n    Object object0 = new Object();\n    boolean boolean0 = vector3D0.equals(object0);\n    vector3D0.getNormSq();\n}",
    "testName" : "test083216"
  },
  "test083217" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083217() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);\n    Object object0 = new Object();\n    boolean boolean0 = vector3D0.equals(object0);\n    vector3D0.getZ();\n}",
    "testName" : "test083217"
  },
  "test063164" : {
    "methodSignature" : "public static double angle(Vector3D v1, Vector3D v2)",
    "methodName" : "angle",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063164() throws Throwable {\n    Vector3D.angle((Vector3D) null, (Vector3D) null);\n}",
    "testName" : "test063164"
  },
  "test01336" : {
    "methodSignature" : "public double getDelta()",
    "methodName" : "getDelta",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01336() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = vector3D1.getDelta();\n}",
    "testName" : "test01336"
  },
  "test093260" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093260() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));\n    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);\n    Vector3D vector3D2 = vector3D1.subtract(vector3D0);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D3.getNormSq();\n}",
    "testName" : "test093260"
  },
  "test098279" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098279() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test098279"
  },
  "test01335" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01335() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = vector3D1.getDelta();\n    vector3D1.getNormSq();\n}",
    "testName" : "test01335"
  },
  "test02787" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02787() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);\n    double double0 = vector3D0.getZ();\n    vector3D0.getY();\n}",
    "testName" : "test02787"
  },
  "test093261" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093261() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));\n    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);\n    Vector3D vector3D2 = vector3D1.subtract(vector3D0);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D1.getX();\n}",
    "testName" : "test093261"
  },
  "test098278" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098278() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test098278"
  },
  "test01334" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01334() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = vector3D1.getDelta();\n    vector3D1.getX();\n}",
    "testName" : "test01334"
  },
  "test02786" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02786() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);\n    double double0 = vector3D0.getZ();\n    vector3D0.getX();\n}",
    "testName" : "test02786"
  },
  "test047124" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047124() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);\n    double double0 = Vector3D.distance(vector3D0, vector3D1);\n    vector3D1.getY();\n}",
    "testName" : "test047124"
  },
  "test093262" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093262() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));\n    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);\n    Vector3D vector3D2 = vector3D1.subtract(vector3D0);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D3.getZ();\n}",
    "testName" : "test093262"
  },
  "test01333" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01333() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = vector3D1.getDelta();\n    vector3D1.getY();\n}",
    "testName" : "test01333"
  },
  "test02785" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02785() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);\n    double double0 = vector3D0.getZ();\n}",
    "testName" : "test02785"
  },
  "test047125" : {
    "methodSignature" : "public static double distance(Vector3D v1, Vector3D v2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047125() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);\n    double double0 = Vector3D.distance(vector3D0, vector3D1);\n}",
    "testName" : "test047125"
  },
  "test047126" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047126() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);\n    double double0 = Vector3D.distance(vector3D0, vector3D1);\n    vector3D1.getZ();\n}",
    "testName" : "test047126"
  },
  "test074183" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074183() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    double double0 = vector3D0.getZ();\n}",
    "testName" : "test074183"
  },
  "test00924" : {
    "methodSignature" : "public static double angle(Vector3D v1, Vector3D v2)",
    "methodName" : "angle",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00924() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = Vector3D.angle(vector3D0, vector3D0);\n}",
    "testName" : "test00924"
  },
  "test083220" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083220() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);\n    Object object0 = new Object();\n    boolean boolean0 = vector3D0.equals(object0);\n    vector3D0.getX();\n}",
    "testName" : "test083220"
  },
  "test03194" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03194() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);\n    double double0 = vector3D1.getX();\n}",
    "testName" : "test03194"
  },
  "test0011" : {
    "methodSignature" : "public static double distanceSq(Vector3D v1, Vector3D v2)",
    "methodName" : "distanceSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    double double0 = Vector3D.distanceSq(vector3D0, vector3D0);\n}",
    "testName" : "test0011"
  },
  "test068169" : {
    "methodSignature" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2)",
    "methodName" : "Vector3D",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068169() throws Throwable {\n    Vector3D vector3D0 = null;\n    vector3D0 = new Vector3D(10.0, (Vector3D) null, Double.NaN, (Vector3D) null);\n}",
    "testName" : "test068169"
  },
  "test042110" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042110() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);\n    vector3D1.getNormSq();\n}",
    "testName" : "test042110"
  },
  "test01332" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01332() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = vector3D1.getDelta();\n    vector3D1.getZ();\n}",
    "testName" : "test01332"
  },
  "test02784" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02784() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);\n    double double0 = vector3D0.getZ();\n    vector3D0.getNormSq();\n}",
    "testName" : "test02784"
  },
  "test03195" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03195() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);\n    double double0 = vector3D1.getX();\n    vector3D1.getY();\n}",
    "testName" : "test03195"
  },
  "test080197" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080197() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();\n    boolean boolean0 = vector3D3.equals(vector3D2);\n    vector3D2.getY();\n}",
    "testName" : "test080197"
  },
  "test03196" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03196() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);\n    double double0 = vector3D1.getX();\n    vector3D1.getZ();\n}",
    "testName" : "test03196"
  },
  "test080196" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080196() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();\n    boolean boolean0 = vector3D3.equals(vector3D2);\n}",
    "testName" : "test080196"
  },
  "test080199" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080199() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();\n    boolean boolean0 = vector3D3.equals(vector3D2);\n    vector3D3.equals((Object) vector3D1);\n}",
    "testName" : "test080199"
  },
  "test088236" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088236() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    boolean boolean0 = vector3D0.isInfinite();\n    vector3D0.isNaN();\n}",
    "testName" : "test088236"
  },
  "test080198" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080198() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();\n    boolean boolean0 = vector3D3.equals(vector3D2);\n    vector3D3.getX();\n}",
    "testName" : "test080198"
  },
  "test088235" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088235() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    boolean boolean0 = vector3D0.isInfinite();\n}",
    "testName" : "test088235"
  },
  "test083218" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083218() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);\n    Object object0 = new Object();\n    boolean boolean0 = vector3D0.equals(object0);\n    vector3D0.getY();\n}",
    "testName" : "test083218"
  },
  "test083219" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083219() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);\n    Object object0 = new Object();\n    boolean boolean0 = vector3D0.equals(object0);\n}",
    "testName" : "test083219"
  },
  "test057158" : {
    "methodSignature" : "public Vector3D subtract(double factor, Vector3D v)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057158() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(2714.53457909, 2714.53457909, 2714.53457909);\n    vector3D0.subtract(2714.53457909, (Vector3D) null);\n}",
    "testName" : "test057158"
  },
  "test093259" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093259() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));\n    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);\n    Vector3D vector3D2 = vector3D1.subtract(vector3D0);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D2.getY();\n}",
    "testName" : "test093259"
  },
  "test052140" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052140() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.NaN.orthogonal();\n    Vector3D vector3D2 = vector3D0.add(vector3D1);\n    vector3D2.getY();\n}",
    "testName" : "test052140"
  },
  "test052141" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052141() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.NaN.orthogonal();\n    Vector3D vector3D2 = vector3D0.add(vector3D1);\n    vector3D2.getZ();\n}",
    "testName" : "test052141"
  },
  "test0022" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.NaN.orthogonal();\n    Vector3D.distanceInf(vector3D1, vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test0022"
  },
  "test0023" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0023() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.NaN.orthogonal();\n    Vector3D.distanceInf(vector3D1, vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test0023"
  },
  "test01441" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01441() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    double double0 = vector3D1.getNormSq();\n    vector3D0.getNormSq();\n}",
    "testName" : "test01441"
  },
  "test01440" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01440() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    double double0 = vector3D1.getNormSq();\n    vector3D1.getZ();\n}",
    "testName" : "test01440"
  },
  "test087234" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087234() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    boolean boolean0 = vector3D0.isInfinite();\n}",
    "testName" : "test087234"
  },
  "test01439" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01439() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    double double0 = vector3D1.getNormSq();\n}",
    "testName" : "test01439"
  },
  "test053147" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053147() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);\n    Vector3D vector3D1 = vector3D0.negate();\n    Vector3D vector3D2 = vector3D1.add(vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test053147"
  },
  "test108297" : {
    "methodSignature" : "public static double angle(Vector3D v1, Vector3D v2)",
    "methodName" : "angle",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108297() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0);\n    Vector3D.angle(vector3D0, vector3D1);\n}",
    "testName" : "test108297"
  },
  "test01438" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01438() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    double double0 = vector3D1.getNormSq();\n    vector3D1.getY();\n}",
    "testName" : "test01438"
  },
  "test053148" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053148() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);\n    Vector3D vector3D1 = vector3D0.negate();\n    Vector3D vector3D2 = vector3D1.add(vector3D0);\n    vector3D2.getY();\n}",
    "testName" : "test053148"
  },
  "test103287" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103287() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    String string0 = vector3D0.MINUS_I.toString();\n}",
    "testName" : "test103287"
  },
  "test01437" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01437() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    double double0 = vector3D1.getNormSq();\n    vector3D1.getX();\n}",
    "testName" : "test01437"
  },
  "test02888" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02888() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = vector3D0.getZ();\n}",
    "testName" : "test02888"
  },
  "test053143" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053143() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);\n    Vector3D vector3D1 = vector3D0.negate();\n    Vector3D vector3D2 = vector3D1.add(vector3D0);\n    vector3D0.getZ();\n}",
    "testName" : "test053143"
  },
  "test053144" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053144() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);\n    Vector3D vector3D1 = vector3D0.negate();\n    Vector3D vector3D2 = vector3D1.add(vector3D0);\n    vector3D0.getY();\n}",
    "testName" : "test053144"
  },
  "test053145" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053145() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);\n    Vector3D vector3D1 = vector3D0.negate();\n    Vector3D vector3D2 = vector3D1.add(vector3D0);\n    vector3D1.getNormSq();\n}",
    "testName" : "test053145"
  },
  "test058159" : {
    "methodSignature" : "public static double distanceSq(Vector3D v1, Vector3D v2)",
    "methodName" : "distanceSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058159() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NaN;\n    Vector3D.distanceSq(vector3D0, (Vector3D) null);\n}",
    "testName" : "test058159"
  },
  "test053146" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053146() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);\n    Vector3D vector3D1 = vector3D0.negate();\n    Vector3D vector3D2 = vector3D1.add(vector3D0);\n    vector3D2.getNormSq();\n}",
    "testName" : "test053146"
  },
  "test053142" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053142() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);\n    Vector3D vector3D1 = vector3D0.negate();\n    Vector3D vector3D2 = vector3D1.add(vector3D0);\n    vector3D2.getX();\n}",
    "testName" : "test053142"
  },
  "test037102" : {
    "methodSignature" : "public double getDelta()",
    "methodName" : "getDelta",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037102() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    double double0 = vector3D0.getDelta();\n}",
    "testName" : "test037102"
  },
  "test0034" : {
    "methodSignature" : "public static double distance1(Vector3D v1, Vector3D v2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0034() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = Vector3D.distance1(vector3D0, vector3D0);\n}",
    "testName" : "test0034"
  },
  "test03297" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03297() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = vector3D0.getX();\n}",
    "testName" : "test03297"
  },
  "test097277" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097277() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.MINUS_I.getNormInf();\n    vector3D0.getZ();\n}",
    "testName" : "test097277"
  },
  "test097275" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097275() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.MINUS_I.getNormInf();\n    vector3D0.getX();\n}",
    "testName" : "test097275"
  },
  "test01542" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01542() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    double double0 = vector3D0.getNormSq();\n}",
    "testName" : "test01542"
  },
  "test097276" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097276() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.MINUS_I.getNormInf();\n    vector3D0.getNormSq();\n}",
    "testName" : "test097276"
  },
  "test097274" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097274() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    vector3D0.MINUS_I.getNormInf();\n    vector3D0.getY();\n}",
    "testName" : "test097274"
  },
  "test067168" : {
    "methodSignature" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2, double a3, Vector3D u3)",
    "methodName" : "Vector3D",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067168() throws Throwable {\n    Vector3D vector3D0 = null;\n    vector3D0 = new Vector3D(0.0, (Vector3D) null, 0.0, (Vector3D) null, 0.0, (Vector3D) null);\n}",
    "testName" : "test067168"
  },
  "test073178" : {
    "methodSignature" : "public static double dotProduct(Vector3D v1, Vector3D v2)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073178() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);\n}",
    "testName" : "test073178"
  },
  "test073179" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073179() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);\n    vector3D1.getNormSq();\n}",
    "testName" : "test073179"
  },
  "test02989" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02989() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    double double0 = vector3D0.getY();\n}",
    "testName" : "test02989"
  },
  "test092256" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092256() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D2.getZ();\n}",
    "testName" : "test092256"
  },
  "test056157" : {
    "methodSignature" : "public Vector3D subtract(Vector3D v)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056157() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    vector3D0.PLUS_I.subtract((Vector3D) null);\n}",
    "testName" : "test056157"
  },
  "test092257" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092257() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D3.getY();\n}",
    "testName" : "test092257"
  },
  "test092258" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092258() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D3.getX();\n}",
    "testName" : "test092258"
  },
  "test092255" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092255() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D1.getZ();\n}",
    "testName" : "test092255"
  },
  "test035100" : {
    "methodSignature" : "public double getNorm1()",
    "methodName" : "getNorm1",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035100() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    double double0 = vector3D0.ZERO.getNorm1();\n}",
    "testName" : "test035100"
  },
  "test041106" : {
    "methodSignature" : "public static double dotProduct(Vector3D v1, Vector3D v2)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041106() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    double double0 = Vector3D.dotProduct(vector3D0, vector3D0);\n}",
    "testName" : "test041106"
  },
  "test078190" : {
    "methodSignature" : "public double getNorm()",
    "methodName" : "getNorm",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078190() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    double double0 = vector3D0.MINUS_K.getNorm();\n}",
    "testName" : "test078190"
  },
  "test02061" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02061() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);\n    vector3D1.getY();\n}",
    "testName" : "test02061"
  },
  "test02060" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02060() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);\n    vector3D1.getX();\n}",
    "testName" : "test02060"
  },
  "test073180" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073180() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test073180"
  },
  "test082215" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082215() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n    vector3D0.getZ();\n}",
    "testName" : "test082215"
  },
  "test03398" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03398() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    double double0 = vector3D0.getNormSq();\n}",
    "testName" : "test03398"
  },
  "test082213" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082213() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n    vector3D0.getX();\n}",
    "testName" : "test082213"
  },
  "test082214" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082214() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n    vector3D0.getNormSq();\n}",
    "testName" : "test082214"
  },
  "test082211" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082211() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n}",
    "testName" : "test082211"
  },
  "test082212" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082212() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n    vector3D2.equals((Object) vector3D1);\n}",
    "testName" : "test082212"
  },
  "test082210" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082210() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n    vector3D2.getNormSq();\n}",
    "testName" : "test082210"
  },
  "test051137" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051137() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test051137"
  },
  "test01643" : {
    "methodSignature" : "public double getNorm1()",
    "methodName" : "getNorm1",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01643() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    double double0 = vector3D0.getNorm1();\n}",
    "testName" : "test01643"
  },
  "test051136" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051136() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test051136"
  },
  "test051135" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051135() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test051135"
  },
  "test02059" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02059() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);\n    vector3D1.getZ();\n}",
    "testName" : "test02059"
  },
  "test082208" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082208() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n    vector3D0.getY();\n}",
    "testName" : "test082208"
  },
  "test104288" : {
    "methodSignature" : "public static double distance(Vector3D v1, Vector3D v2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104288() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = Vector3D.distance(vector3D0, vector3D0);\n}",
    "testName" : "test104288"
  },
  "test109298" : {
    "methodSignature" : "public static double angle(Vector3D v1, Vector3D v2)",
    "methodName" : "angle",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109298() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D.angle(vector3D0, vector3D0);\n}",
    "testName" : "test109298"
  },
  "test082209" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082209() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n    vector3D2.getX();\n}",
    "testName" : "test082209"
  },
  "test051138" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051138() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);\n    vector3D1.isNaN();\n}",
    "testName" : "test051138"
  },
  "test082207" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082207() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    boolean boolean0 = vector3D1.equals(vector3D2);\n    vector3D2.getZ();\n}",
    "testName" : "test082207"
  },
  "test073181" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073181() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test073181"
  },
  "test073182" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073182() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test073182"
  },
  "test046123" : {
    "methodSignature" : "public static double distance(Vector3D v1, Vector3D v2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046123() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    double double0 = Vector3D.distance(vector3D0, vector3D0);\n}",
    "testName" : "test046123"
  },
  "test052139" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052139() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.NaN.orthogonal();\n    Vector3D vector3D2 = vector3D0.add(vector3D1);\n    vector3D2.getX();\n}",
    "testName" : "test052139"
  },
  "test081206" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081206() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n}",
    "testName" : "test081206"
  },
  "test096272" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096272() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);\n    boolean boolean0 = vector3D1.isInfinite();\n}",
    "testName" : "test096272"
  },
  "test081205" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081205() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test081205"
  },
  "test096273" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096273() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);\n    boolean boolean0 = vector3D1.isInfinite();\n    vector3D1.getZ();\n}",
    "testName" : "test096273"
  },
  "test096270" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096270() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);\n    boolean boolean0 = vector3D1.isInfinite();\n    vector3D1.getX();\n}",
    "testName" : "test096270"
  },
  "test096271" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096271() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);\n    boolean boolean0 = vector3D1.isInfinite();\n    vector3D1.getY();\n}",
    "testName" : "test096271"
  },
  "test02164" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02164() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);\n    vector3D1.getX();\n}",
    "testName" : "test02164"
  },
  "test02163" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02163() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);\n    vector3D1.getY();\n}",
    "testName" : "test02163"
  },
  "test02162" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02162() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);\n    vector3D1.getNormSq();\n}",
    "testName" : "test02162"
  },
  "test03499" : {
    "methodSignature" : "public double getNormInf()",
    "methodName" : "getNormInf",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03499() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    double double0 = vector3D0.ZERO.getNormInf();\n}",
    "testName" : "test03499"
  },
  "test086230" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086230() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n    boolean boolean0 = vector3D0.isInfinite();\n    vector3D0.getX();\n}",
    "testName" : "test086230"
  },
  "test086231" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086231() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n    boolean boolean0 = vector3D0.isInfinite();\n    vector3D0.getY();\n}",
    "testName" : "test086231"
  },
  "test086232" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086232() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n    boolean boolean0 = vector3D0.isInfinite();\n}",
    "testName" : "test086232"
  },
  "test062163" : {
    "methodSignature" : "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)",
    "methodName" : "crossProduct",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062163() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D.crossProduct(vector3D0, (Vector3D) null);\n}",
    "testName" : "test062163"
  },
  "test086233" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086233() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n    boolean boolean0 = vector3D0.isInfinite();\n    vector3D0.getZ();\n}",
    "testName" : "test086233"
  },
  "test02165" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02165() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);\n    vector3D1.getZ();\n}",
    "testName" : "test02165"
  },
  "test01747" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01747() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test01747"
  },
  "test01746" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01746() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test01746"
  },
  "test01745" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01745() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test01745"
  },
  "test01744" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01744() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);\n    vector3D1.getNormSq();\n}",
    "testName" : "test01744"
  },
  "test091254" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091254() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.NaN.orthogonal();\n    Vector3D.angle(vector3D1, vector3D1);\n    vector3D1.getY();\n}",
    "testName" : "test091254"
  },
  "test091253" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091253() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.NaN.orthogonal();\n    Vector3D.angle(vector3D1, vector3D1);\n    vector3D1.getZ();\n}",
    "testName" : "test091253"
  },
  "test01851" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01851() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test01851"
  },
  "test02269" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02269() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NaN;\n    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);\n    vector3D1.getY();\n}",
    "testName" : "test02269"
  },
  "test050134" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050134() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test050134"
  },
  "test01850" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01850() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test01850"
  },
  "test02268" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02268() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NaN;\n    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);\n    vector3D1.getX();\n}",
    "testName" : "test02268"
  },
  "test050133" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050133() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test050133"
  },
  "test105289" : {
    "methodSignature" : "public double getAlpha()",
    "methodName" : "getAlpha",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105289() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = vector3D0.ZERO.getAlpha();\n}",
    "testName" : "test105289"
  },
  "test050132" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050132() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test050132"
  },
  "test039104" : {
    "methodSignature" : "public double getAlpha()",
    "methodName" : "getAlpha",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039104() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    double double0 = vector3D0.MINUS_I.getAlpha();\n}",
    "testName" : "test039104"
  },
  "test081202" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081202() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D0.equals((Object) vector3D1);\n}",
    "testName" : "test081202"
  },
  "test049130" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049130() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));\n    Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);\n    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D3.getNormSq();\n}",
    "testName" : "test049130"
  },
  "test081204" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081204() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test081204"
  },
  "test081203" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081203() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test081203"
  },
  "test02267" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02267() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NaN;\n    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);\n    vector3D1.getZ();\n}",
    "testName" : "test02267"
  },
  "test02266" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02266() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NaN;\n    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);\n    vector3D1.getNormSq();\n}",
    "testName" : "test02266"
  },
  "test049131" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049131() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));\n    Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);\n    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);\n    Vector3D vector3D3 = vector3D2.orthogonal();\n    vector3D3.getX();\n}",
    "testName" : "test049131"
  },
  "test060161" : {
    "methodSignature" : "public static double distance1(Vector3D v1, Vector3D v2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060161() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.097, (-4218.6746623851), 0.0);\n    Vector3D.distance1((Vector3D) null, vector3D0);\n}",
    "testName" : "test060161"
  },
  "test00510" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00510() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test00510"
  },
  "test072177" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072177() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);\n    boolean boolean0 = vector3D1.isNaN();\n    vector3D1.getY();\n}",
    "testName" : "test072177"
  },
  "test00511" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00511() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test00511"
  },
  "test00514" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00514() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D0.equals((Object) vector3D1);\n}",
    "testName" : "test00514"
  },
  "test100282" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100282() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test100282"
  },
  "test00515" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00515() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n}",
    "testName" : "test00515"
  },
  "test00512" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00512() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test00512"
  },
  "test100284" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100284() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test100284"
  },
  "test00513" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00513() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getNormSq();\n}",
    "testName" : "test00513"
  },
  "test100283" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100283() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test100283"
  },
  "test077187" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077187() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));\n    double double0 = vector3D0.getX();\n}",
    "testName" : "test077187"
  },
  "test01849" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01849() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);\n    vector3D1.isInfinite();\n}",
    "testName" : "test01849"
  },
  "test077188" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077188() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));\n    double double0 = vector3D0.getX();\n    vector3D0.getY();\n}",
    "testName" : "test077188"
  },
  "test01848" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01848() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test01848"
  },
  "test077186" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077186() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));\n    double double0 = vector3D0.getX();\n    vector3D0.getZ();\n}",
    "testName" : "test077186"
  },
  "test072173" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072173() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);\n    boolean boolean0 = vector3D1.isNaN();\n}",
    "testName" : "test072173"
  },
  "test072174" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072174() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);\n    boolean boolean0 = vector3D1.isNaN();\n    vector3D0.isNaN();\n}",
    "testName" : "test072174"
  },
  "test072175" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072175() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);\n    boolean boolean0 = vector3D1.isNaN();\n    vector3D1.getX();\n}",
    "testName" : "test072175"
  },
  "test077189" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077189() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));\n    double double0 = vector3D0.getX();\n    vector3D0.getNormSq();\n}",
    "testName" : "test077189"
  },
  "test072176" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072176() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);\n    boolean boolean0 = vector3D1.isNaN();\n    vector3D1.getZ();\n}",
    "testName" : "test072176"
  },
  "test040105" : {
    "methodSignature" : "public double getAlpha()",
    "methodName" : "getAlpha",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040105() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    double double0 = vector3D0.NEGATIVE_INFINITY.getAlpha();\n}",
    "testName" : "test040105"
  },
  "test090249" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090249() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D0.getNormSq();\n}",
    "testName" : "test090249"
  },
  "test090248" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090248() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D0.getY();\n}",
    "testName" : "test090248"
  },
  "test090247" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090247() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D0.getX();\n}",
    "testName" : "test090247"
  },
  "test045119" : {
    "methodSignature" : "public static double distance1(Vector3D v1, Vector3D v2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045119() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();\n    double double0 = Vector3D.distance1(vector3D1, vector3D0);\n}",
    "testName" : "test045119"
  },
  "test02373" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02373() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    vector3D1.getZ();\n}",
    "testName" : "test02373"
  },
  "test080201" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080201() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();\n    boolean boolean0 = vector3D3.equals(vector3D2);\n    vector3D0.getNormSq();\n}",
    "testName" : "test080201"
  },
  "test02372" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02372() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    vector3D1.getX();\n}",
    "testName" : "test02372"
  },
  "test080200" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080200() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = Vector3D.ZERO;\n    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);\n    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();\n    boolean boolean0 = vector3D3.equals(vector3D2);\n    vector3D0.getY();\n}",
    "testName" : "test080200"
  },
  "test02371" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02371() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    vector3D1.getY();\n}",
    "testName" : "test02371"
  },
  "test02370" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02370() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    vector3D0.getX();\n}",
    "testName" : "test02370"
  },
  "test061162" : {
    "methodSignature" : "public static double distance(Vector3D v1, Vector3D v2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061162() throws Throwable {\n    Vector3D.distance((Vector3D) null, (Vector3D) null);\n}",
    "testName" : "test061162"
  },
  "test01952" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01952() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);\n    vector3D0.getZ();\n}",
    "testName" : "test01952"
  },
  "test071172" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071172() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    boolean boolean0 = vector3D0.isNaN();\n}",
    "testName" : "test071172"
  },
  "test01956" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01956() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);\n    vector3D0.getX();\n}",
    "testName" : "test01956"
  },
  "test01955" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01955() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);\n    vector3D1.getX();\n}",
    "testName" : "test01955"
  },
  "test01954" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01954() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);\n    vector3D0.getY();\n}",
    "testName" : "test01954"
  },
  "test01953" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01953() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);\n    vector3D2.getY();\n}",
    "testName" : "test01953"
  },
  "test090252" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090252() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n}",
    "testName" : "test090252"
  },
  "test01958" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01958() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);\n    vector3D1.getZ();\n}",
    "testName" : "test01958"
  },
  "test090251" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090251() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D0.getZ();\n}",
    "testName" : "test090251"
  },
  "test01957" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01957() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);\n    vector3D2.getNormSq();\n}",
    "testName" : "test01957"
  },
  "test076185" : {
    "methodSignature" : "public static double dotProduct(Vector3D v1, Vector3D v2)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076185() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D.dotProduct((Vector3D) null, vector3D0);\n}",
    "testName" : "test076185"
  },
  "test090250" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090250() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D1.equals((Object) vector3D0);\n}",
    "testName" : "test090250"
  },
  "test095269" : {
    "methodSignature" : "public Vector3D normalize()",
    "methodName" : "normalize",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095269() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    vector3D0.normalize();\n}",
    "testName" : "test095269"
  },
  "test055151" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055151() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);\n    vector3D2.getY();\n}",
    "testName" : "test055151"
  },
  "test055150" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055150() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);\n    vector3D1.getNormSq();\n}",
    "testName" : "test055150"
  },
  "test085229" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085229() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);\n    boolean boolean0 = vector3D0.isInfinite();\n    vector3D0.getZ();\n}",
    "testName" : "test085229"
  },
  "test085228" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085228() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);\n    boolean boolean0 = vector3D0.isInfinite();\n}",
    "testName" : "test085228"
  },
  "test085227" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085227() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);\n    boolean boolean0 = vector3D0.isInfinite();\n    vector3D0.getY();\n}",
    "testName" : "test085227"
  },
  "test085226" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085226() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);\n    boolean boolean0 = vector3D0.isInfinite();\n    vector3D0.getX();\n}",
    "testName" : "test085226"
  },
  "test045122" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045122() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();\n    double double0 = Vector3D.distance1(vector3D1, vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test045122"
  },
  "test045121" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045121() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();\n    double double0 = Vector3D.distance1(vector3D1, vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test045121"
  },
  "test045120" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045120() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();\n    double double0 = Vector3D.distance1(vector3D1, vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test045120"
  },
  "test066167" : {
    "methodSignature" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2, double a3, Vector3D u3, double a4, Vector3D u4)",
    "methodName" : "Vector3D",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066167() throws Throwable {\n    Vector3D vector3D0 = null;\n    vector3D0 = new Vector3D((-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null);\n}",
    "testName" : "test066167"
  },
  "test01027" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01027() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));\n    Vector3D.angle(vector3D0, vector3D1);\n    vector3D1.getY();\n}",
    "testName" : "test01027"
  },
  "test01026" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01026() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));\n    Vector3D.angle(vector3D0, vector3D1);\n    vector3D1.getX();\n}",
    "testName" : "test01026"
  },
  "test01025" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01025() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));\n    Vector3D.angle(vector3D0, vector3D1);\n    vector3D1.getZ();\n}",
    "testName" : "test01025"
  },
  "test02477" : {
    "methodSignature" : "public static double distance1(Vector3D v1, Vector3D v2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02477() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();\n    double double0 = Vector3D.distance1(vector3D1, vector3D1);\n}",
    "testName" : "test02477"
  },
  "test00617" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00617() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D0.equals((Object) vector3D1);\n}",
    "testName" : "test00617"
  },
  "test00618" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00618() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n}",
    "testName" : "test00618"
  },
  "test055156" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055156() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);\n    vector3D1.getY();\n}",
    "testName" : "test055156"
  },
  "test00616" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00616() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getNormSq();\n}",
    "testName" : "test00616"
  },
  "test055153" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055153() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);\n    vector3D2.getNormSq();\n}",
    "testName" : "test055153"
  },
  "test090246" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090246() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);\n    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D1.isNaN();\n}",
    "testName" : "test090246"
  },
  "test055152" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055152() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);\n    vector3D2.getX();\n}",
    "testName" : "test055152"
  },
  "test055155" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055155() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);\n    vector3D1.getX();\n}",
    "testName" : "test055155"
  },
  "test055154" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055154() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_K.negate();\n    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);\n    vector3D2.getZ();\n}",
    "testName" : "test055154"
  },
  "test0046" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0046() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test0046"
  },
  "test084221" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084221() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    boolean boolean0 = vector3D0.equals(vector3D0);\n    vector3D0.getY();\n}",
    "testName" : "test084221"
  },
  "test089239" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089239() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D0.getX();\n}",
    "testName" : "test089239"
  },
  "test0047" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0047() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getNormSq();\n}",
    "testName" : "test0047"
  },
  "test089238" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089238() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D1.getZ();\n}",
    "testName" : "test089238"
  },
  "test0048" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0048() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test0048"
  },
  "test0049" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0049() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n}",
    "testName" : "test0049"
  },
  "test0045" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0045() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();\n    boolean boolean0 = vector3D1.equals(vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test0045"
  },
  "test043113" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043113() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test043113"
  },
  "test043114" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043114() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test043114"
  },
  "test043111" : {
    "methodSignature" : "public static double distanceSq(Vector3D v1, Vector3D v2)",
    "methodName" : "distanceSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043111() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);\n}",
    "testName" : "test043111"
  },
  "test099281" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099281() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = vector3D0.getNormSq();\n}",
    "testName" : "test099281"
  },
  "test043112" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043112() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test043112"
  },
  "test02476" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02476() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();\n    double double0 = Vector3D.distance1(vector3D1, vector3D1);\n    vector3D1.getZ();\n}",
    "testName" : "test02476"
  },
  "test084225" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084225() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    boolean boolean0 = vector3D0.equals(vector3D0);\n}",
    "testName" : "test084225"
  },
  "test02475" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02475() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();\n    double double0 = Vector3D.distance1(vector3D1, vector3D1);\n    vector3D1.getY();\n}",
    "testName" : "test02475"
  },
  "test084224" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084224() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    boolean boolean0 = vector3D0.equals(vector3D0);\n    vector3D0.getX();\n}",
    "testName" : "test084224"
  },
  "test02474" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02474() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();\n    double double0 = Vector3D.distance1(vector3D1, vector3D1);\n    vector3D1.getX();\n}",
    "testName" : "test02474"
  },
  "test084223" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084223() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    boolean boolean0 = vector3D0.equals(vector3D0);\n    vector3D0.getZ();\n}",
    "testName" : "test084223"
  },
  "test089237" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089237() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D0.getY();\n}",
    "testName" : "test089237"
  },
  "test084222" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084222() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    boolean boolean0 = vector3D0.equals(vector3D0);\n    vector3D0.getNormSq();\n}",
    "testName" : "test084222"
  },
  "test00720" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00720() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));\n    Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);\n    Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);\n    Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);\n    Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));\n    double double0 = Vector3D.angle(vector3D1, vector3D4);\n    vector3D1.getY();\n}",
    "testName" : "test00720"
  },
  "test101285" : {
    "methodSignature" : "public double getDelta()",
    "methodName" : "getDelta",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101285() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    double double0 = vector3D0.PLUS_J.getDelta();\n}",
    "testName" : "test101285"
  },
  "test106290" : {
    "methodSignature" : "public static double distanceInf(Vector3D v1, Vector3D v2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106290() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    double double0 = Vector3D.distanceInf(vector3D0, vector3D0);\n}",
    "testName" : "test106290"
  },
  "test01130" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01130() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();\n    vector3D1.getZ();\n}",
    "testName" : "test01130"
  },
  "test089242" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089242() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D1.isNaN();\n}",
    "testName" : "test089242"
  },
  "test089241" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089241() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D0.isNaN();\n}",
    "testName" : "test089241"
  },
  "test02580" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02580() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.negate();\n    vector3D1.getZ();\n}",
    "testName" : "test02580"
  },
  "test089244" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089244() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D0.getNormSq();\n}",
    "testName" : "test089244"
  },
  "test089243" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089243() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D1.getX();\n}",
    "testName" : "test089243"
  },
  "test089245" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089245() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D0.getZ();\n}",
    "testName" : "test089245"
  },
  "test064165" : {
    "methodSignature" : "public Vector3D add(Vector3D v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064165() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_J;\n    vector3D0.add((Vector3D) null);\n}",
    "testName" : "test064165"
  },
  "test02579" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02579() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.negate();\n    vector3D1.getX();\n}",
    "testName" : "test02579"
  },
  "test02578" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02578() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.negate();\n    vector3D1.getY();\n}",
    "testName" : "test02578"
  },
  "test094264" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094264() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    Vector3D vector3D2 = vector3D1.normalize();\n    vector3D1.getY();\n}",
    "testName" : "test094264"
  },
  "test094263" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094263() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    Vector3D vector3D2 = vector3D1.normalize();\n    vector3D2.equals((Object) vector3D1);\n}",
    "testName" : "test094263"
  },
  "test048127" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048127() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);\n    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);\n    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);\n    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);\n    vector3D3.getY();\n}",
    "testName" : "test048127"
  },
  "test069170" : {
    "methodSignature" : "public Vector3D(double a, Vector3D u)",
    "methodName" : "Vector3D",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069170() throws Throwable {\n    Vector3D vector3D0 = null;\n    vector3D0 = new Vector3D((-3672.146764020265), (Vector3D) null);\n}",
    "testName" : "test069170"
  },
  "test048128" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048128() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);\n    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);\n    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);\n    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);\n    vector3D2.getY();\n}",
    "testName" : "test048128"
  },
  "test01129" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01129() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();\n    vector3D1.getX();\n}",
    "testName" : "test01129"
  },
  "test048129" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048129() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);\n    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);\n    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);\n    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);\n    vector3D3.isInfinite();\n}",
    "testName" : "test048129"
  },
  "test089240" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089240() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();\n    vector3D1.hashCode();\n    vector3D1.getY();\n}",
    "testName" : "test089240"
  },
  "test01128" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01128() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();\n    vector3D1.getY();\n}",
    "testName" : "test01128"
  },
  "test094266" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094266() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    Vector3D vector3D2 = vector3D1.normalize();\n    vector3D1.getX();\n}",
    "testName" : "test094266"
  },
  "test094265" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094265() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    Vector3D vector3D2 = vector3D1.normalize();\n    vector3D2.getZ();\n}",
    "testName" : "test094265"
  },
  "test094268" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094268() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    Vector3D vector3D2 = vector3D1.normalize();\n    vector3D2.getX();\n}",
    "testName" : "test094268"
  },
  "test00719" : {
    "methodSignature" : "public static double angle(Vector3D v1, Vector3D v2)",
    "methodName" : "angle",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00719() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));\n    Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);\n    Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);\n    Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);\n    Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));\n    double double0 = Vector3D.angle(vector3D1, vector3D4);\n}",
    "testName" : "test00719"
  },
  "test094267" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094267() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    Vector3D vector3D2 = vector3D1.normalize();\n    vector3D2.getY();\n}",
    "testName" : "test094267"
  },
  "test038103" : {
    "methodSignature" : "public double getDelta()",
    "methodName" : "getDelta",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038103() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    double double0 = vector3D0.MINUS_K.getDelta();\n}",
    "testName" : "test038103"
  },
  "test059160" : {
    "methodSignature" : "public static double distanceInf(Vector3D v1, Vector3D v2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059160() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-1036.6), Double.NEGATIVE_INFINITY, (-610.2));\n    Vector3D.distanceInf(vector3D0, (Vector3D) null);\n}",
    "testName" : "test059160"
  },
  "test065166" : {
    "methodSignature" : "public Vector3D add(double factor, Vector3D v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065166() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    vector3D0.PLUS_I.add((-135.3), (Vector3D) null);\n}",
    "testName" : "test065166"
  },
  "test00822" : {
    "methodSignature" : "public static double angle(Vector3D v1, Vector3D v2)",
    "methodName" : "angle",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00822() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.6, 342.0);\n    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);\n    double double0 = Vector3D.angle(vector3D1, vector3D0);\n}",
    "testName" : "test00822"
  },
  "test00823" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00823() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.6, 342.0);\n    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);\n    double double0 = Vector3D.angle(vector3D1, vector3D0);\n    vector3D0.getX();\n}",
    "testName" : "test00823"
  },
  "test00821" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00821() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.6, 342.0);\n    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);\n    double double0 = Vector3D.angle(vector3D1, vector3D0);\n    vector3D0.getY();\n}",
    "testName" : "test00821"
  },
  "test03092" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03092() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);\n    double double0 = vector3D0.getY();\n    vector3D0.getX();\n}",
    "testName" : "test03092"
  },
  "test03093" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03093() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);\n    double double0 = vector3D0.getY();\n    vector3D0.getNormSq();\n}",
    "testName" : "test03093"
  },
  "test044118" : {
    "methodSignature" : "public static double distanceInf(Vector3D v1, Vector3D v2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044118() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);\n}",
    "testName" : "test044118"
  },
  "test03090" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03090() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);\n    double double0 = vector3D0.getY();\n}",
    "testName" : "test03090"
  },
  "test044116" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044116() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test044116"
  },
  "test03091" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03091() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);\n    double double0 = vector3D0.getY();\n    vector3D0.getZ();\n}",
    "testName" : "test03091"
  },
  "test044117" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044117() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);\n    vector3D1.getX();\n}",
    "testName" : "test044117"
  },
  "test02681" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02681() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.ZERO.negate();\n    vector3D1.getX();\n}",
    "testName" : "test02681"
  },
  "test044115" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044115() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.orthogonal();\n    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);\n    vector3D1.getY();\n}",
    "testName" : "test044115"
  },
  "test098280" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098280() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);\n    vector3D1.getZ();\n}",
    "testName" : "test098280"
  },
  "test01231" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01231() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.NaN.normalize();\n    vector3D1.isNaN();\n}",
    "testName" : "test01231"
  },
  "test02683" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02683() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.ZERO.negate();\n    vector3D1.getZ();\n}",
    "testName" : "test02683"
  },
  "test02682" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02682() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.ZERO.negate();\n    vector3D1.getY();\n}",
    "testName" : "test02682"
  },
  "test070171" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070171() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NaN;\n    boolean boolean0 = vector3D0.isNaN();\n}",
    "testName" : "test070171"
  },
  "test107295" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107295() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D1.getZ();\n}",
    "testName" : "test107295"
  },
  "test054149" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054149() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D2 = vector3D1.add(0.0, vector3D0);\n    vector3D2.equals((Object) vector3D1);\n}",
    "testName" : "test054149"
  },
  "test102286" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102286() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Vector3D vector3D1 = vector3D0.MINUS_I.add(vector3D0);\n    vector3D1.equals((Object) vector3D0);\n}",
    "testName" : "test102286"
  },
  "test107296" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107296() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D0.getZ();\n}",
    "testName" : "test107296"
  },
  "test075184" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075184() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    double double0 = vector3D0.getY();\n}",
    "testName" : "test075184"
  },
  "test107291" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107291() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n}",
    "testName" : "test107291"
  },
  "test107292" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107292() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D0.getY();\n}",
    "testName" : "test107292"
  },
  "test107293" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107293() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D1.getNormSq();\n}",
    "testName" : "test107293"
  },
  "test107294" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math.geometry.Vector3D",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107294() throws Throwable {\n    Vector3D vector3D0 = new Vector3D(0.0, 0.0);\n    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);\n    boolean boolean0 = vector3D0.equals(vector3D1);\n    vector3D1.getX();\n}",
    "testName" : "test107294"
  }
}