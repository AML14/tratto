focal_method,test_prefix,docstring
"public static double distanceSq(Vector3D v1, Vector3D v2) {
    final double dx = v2.x - v1.x;
    final double dy = v2.y - v1.y;
    final double dz = v2.z - v1.z;
    return dx * dx + dy * dy + dz * dz;
}","public void test0000() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the square of the distance between two vectors.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the square of the distance between v1 and v2
 */"
"public static double distanceSq(Vector3D v1, Vector3D v2) {
    final double dx = v2.x - v1.x;
    final double dy = v2.y - v1.y;
    final double dz = v2.z - v1.z;
    return dx * dx + dy * dy + dz * dz;
}","public void test0011() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the square of the distance between two vectors.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the square of the distance between v1 and v2
 */"
"public double getZ() {
    return z;
}","public void test0022() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test0023() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double distance1(Vector3D v1, Vector3D v2) {
    final double dx = FastMath.abs(v2.x - v1.x);
    final double dy = FastMath.abs(v2.y - v1.y);
    final double dz = FastMath.abs(v2.z - v1.z);
    return dx + dy + dz;
}","public void test0034() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = Vector3D.distance1(vector3D0, vector3D0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the distance between two vectors according to the L<sub>1</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>1</sub> norm
 */"
"public double getY() {
    return y;
}","public void test0045() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test0046() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals((-1.0), vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test0047() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(1.0, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getX() {
    return x;
}","public void test0048() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test0049() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getZ() {
    return z;
}","public void test00510() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test00511() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test00512() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals((-2.0), vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test00513() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(4.0, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test00514() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(vector3D0.equals((Object) vector3D1));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test00515() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test00616() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(2.4741236059851676E7, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test00617() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(vector3D0.equals((Object) vector3D1));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test00618() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public static double angle(Vector3D v1, Vector3D v2) {
    double normProduct = v1.getNorm() * v2.getNorm();
    if (normProduct == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
    }
    double dot = dotProduct(v1, v2);
    double threshold = normProduct * 0.9999;
    if ((dot < -threshold) || (dot > threshold)) {
        // the vectors are almost aligned, compute using the sine
        Vector3D v3 = crossProduct(v1, v2);
        if (dot >= 0) {
            return FastMath.asin(v3.getNorm() / normProduct);
        }
        return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
    }
    // the vectors are sufficiently separated to use the cosine
    return FastMath.acos(dot / normProduct);
}","public void test00719() throws Throwable {
    Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));
    Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
    Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);
    Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));
    double double0 = Vector3D.angle(vector3D1, vector3D4);
    assertEquals(3.141592653559801, double0, 0.01);
}","/**
 * Compute the angular separation between two vectors.
 * <p>This method computes the angular separation between two
 * vectors using the dot product for well separated vectors and the
 * cross product for almost aligned vectors. This allows to have a
 * good accuracy in all cases, even for vectors very close to each
 * other.</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return angular separation between v1 and v2
 * @exception ArithmeticException if either vector has a null norm
 */"
"public double getY() {
    return y;
}","public void test00720() throws Throwable {
    Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));
    Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
    Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);
    Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));
    double double0 = Vector3D.angle(vector3D1, vector3D4);
    assertEquals(294.0708254142704, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test00821() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.6, 342.0);
    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
    double double0 = Vector3D.angle(vector3D1, vector3D0);
    assertEquals((-0.5123901464912445), vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double angle(Vector3D v1, Vector3D v2) {
    double normProduct = v1.getNorm() * v2.getNorm();
    if (normProduct == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
    }
    double dot = dotProduct(v1, v2);
    double threshold = normProduct * 0.9999;
    if ((dot < -threshold) || (dot > threshold)) {
        // the vectors are almost aligned, compute using the sine
        Vector3D v3 = crossProduct(v1, v2);
        if (dot >= 0) {
            return FastMath.asin(v3.getNorm() / normProduct);
        }
        return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
    }
    // the vectors are sufficiently separated to use the cosine
    return FastMath.acos(dot / normProduct);
}","public void test00822() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.6, 342.0);
    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
    double double0 = Vector3D.angle(vector3D1, vector3D0);
    assertEquals(6.647751099882482E-17, double0, 0.01);
}","/**
 * Compute the angular separation between two vectors.
 * <p>This method computes the angular separation between two
 * vectors using the dot product for well separated vectors and the
 * cross product for almost aligned vectors. This allows to have a
 * good accuracy in all cases, even for vectors very close to each
 * other.</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return angular separation between v1 and v2
 * @exception ArithmeticException if either vector has a null norm
 */"
"public double getX() {
    return x;
}","public void test00823() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.6, 342.0);
    Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
    double double0 = Vector3D.angle(vector3D1, vector3D0);
    assertEquals((-0.7489586004490071), vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double angle(Vector3D v1, Vector3D v2) {
    double normProduct = v1.getNorm() * v2.getNorm();
    if (normProduct == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
    }
    double dot = dotProduct(v1, v2);
    double threshold = normProduct * 0.9999;
    if ((dot < -threshold) || (dot > threshold)) {
        // the vectors are almost aligned, compute using the sine
        Vector3D v3 = crossProduct(v1, v2);
        if (dot >= 0) {
            return FastMath.asin(v3.getNorm() / normProduct);
        }
        return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
    }
    // the vectors are sufficiently separated to use the cosine
    return FastMath.acos(dot / normProduct);
}","public void test00924() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = Vector3D.angle(vector3D0, vector3D0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the angular separation between two vectors.
 * <p>This method computes the angular separation between two
 * vectors using the dot product for well separated vectors and the
 * cross product for almost aligned vectors. This allows to have a
 * good accuracy in all cases, even for vectors very close to each
 * other.</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return angular separation between v1 and v2
 * @exception ArithmeticException if either vector has a null norm
 */"
"public double getZ() {
    return z;
}","public void test01025() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
    Vector3D.angle(vector3D0, vector3D1);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test01026() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
    Vector3D.angle(vector3D0, vector3D1);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test01027() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
    Vector3D.angle(vector3D0, vector3D1);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test01128() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test01129() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test01130() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test01231() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NaN.normalize();
    assertTrue(vector3D1.isNaN());
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public double getZ() {
    return z;
}","public void test01332() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test01333() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test01334() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test01335() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(0.0, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getDelta() {
    return FastMath.asin(z / getNorm());
}","public void test01336() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = vector3D1.getDelta();
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Get the elevation of the vector.
 * @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2
 * @see #Vector3D(double, double)
 */"
"public double getX() {
    return x;
}","public void test01437() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(-0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test01438() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(-0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test01439() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(1.0, double0, 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test01440() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(1.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test01441() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    double double0 = vector3D1.getNormSq();
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test01542() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.getNormSq();
    assertEquals(1.0, double0, 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getNorm1() {
    return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);
}","public void test01643() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    double double0 = vector3D0.getNorm1();
    assertEquals(1.0, double0, 0.01);
}","/**
 * Get the L<sub>1</sub> norm for the vector.
 * @return L<sub>1</sub> norm for the vector
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test01744() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
    assertEquals(2.0, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getY() {
    return y;
}","public void test01745() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
    assertEquals((-1.0), vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test01746() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
    assertEquals(1.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test01747() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test01848() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isInfinite() {
    return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
}","public void test01849() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
    assertTrue(vector3D1.isInfinite());
}","/**
 * Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 * @return  true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 */"
"public double getX() {
    return x;
}","public void test01850() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test01851() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test01952() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals((-0.48297428029025974), vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test01953() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test01954() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test01955() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test01956() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.8756345382510363, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test01957() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D2.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test01958() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test02059() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02060() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test02061() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test02162() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
    assertEquals(3070629.5879694405, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getY() {
    return y;
}","public void test02163() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02164() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
    assertEquals((-1752.3212), vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test02165() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test02266() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
    assertEquals(0.0, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test02267() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02268() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test02269() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02370() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.orthogonal();
    assertEquals(0.9999, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test02371() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.orthogonal();
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02372() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.orthogonal();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test02373() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.orthogonal();
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02474() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
    double double0 = Vector3D.distance1(vector3D1, vector3D1);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test02475() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
    double double0 = Vector3D.distance1(vector3D1, vector3D1);
    assertEquals((-1.0), vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test02476() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
    double double0 = Vector3D.distance1(vector3D1, vector3D1);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double distance1(Vector3D v1, Vector3D v2) {
    final double dx = FastMath.abs(v2.x - v1.x);
    final double dy = FastMath.abs(v2.y - v1.y);
    final double dz = FastMath.abs(v2.z - v1.z);
    return dx + dy + dz;
}","public void test02477() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
    double double0 = Vector3D.distance1(vector3D1, vector3D1);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the distance between two vectors according to the L<sub>1</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>1</sub> norm
 */"
"public double getY() {
    return y;
}","public void test02578() throws Throwable {
    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.negate();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02579() throws Throwable {
    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.negate();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test02580() throws Throwable {
    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.negate();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02681() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.ZERO.negate();
    assertEquals(-0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test02682() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.ZERO.negate();
    assertEquals(-0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test02683() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.ZERO.negate();
    assertEquals(-0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test02784() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
    double double0 = vector3D0.getZ();
    assertEquals(400.0123002055866, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test02785() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
    double double0 = vector3D0.getZ();
    assertEquals(0.07842259109020233, double0, 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test02786() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
    double double0 = vector3D0.getZ();
    assertEquals(0.07842259109020233, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test02787() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
    double double0 = vector3D0.getZ();
    assertEquals(20.0, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test02888() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.getZ();
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test02989() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    double double0 = vector3D0.getY();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test03090() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
    double double0 = vector3D0.getY();
    assertEquals(409.0, double0, 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test03091() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
    double double0 = vector3D0.getY();
    assertEquals(409.0, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test03092() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
    double double0 = vector3D0.getY();
    assertEquals(0.0, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test03093() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
    double double0 = vector3D0.getY();
    assertEquals(334562.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getX() {
    return x;
}","public void test03194() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
    double double0 = vector3D1.getX();
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test03195() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
    double double0 = vector3D1.getX();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test03196() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
    double double0 = vector3D1.getX();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test03297() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.getX();
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test03398() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    double double0 = vector3D0.getNormSq();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getNormInf() {
    return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));
}","public void test03499() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.ZERO.getNormInf();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the L<sub>&infin;</sub> norm for the vector.
 * @return L<sub>&infin;</sub> norm for the vector
 */"
"public double getNorm1() {
    return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);
}","public void test035100() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.ZERO.getNorm1();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the L<sub>1</sub> norm for the vector.
 * @return L<sub>1</sub> norm for the vector
 */"
"public double getNorm() {
    return FastMath.sqrt(x * x + y * y + z * z);
}","public void test036101() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    double double0 = vector3D0.ZERO.getNorm();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the L<sub>2</sub> norm for the vector.
 * @return euclidian norm for the vector
 */"
"public double getDelta() {
    return FastMath.asin(z / getNorm());
}","public void test037102() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    double double0 = vector3D0.getDelta();
    assertEquals(1.5707963267948966, double0, 0.01);
}","/**
 * Get the elevation of the vector.
 * @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2
 * @see #Vector3D(double, double)
 */"
"public double getDelta() {
    return FastMath.asin(z / getNorm());
}","public void test038103() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = vector3D0.MINUS_K.getDelta();
    assertEquals((-1.5707963267948966), double0, 0.01);
}","/**
 * Get the elevation of the vector.
 * @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2
 * @see #Vector3D(double, double)
 */"
"public double getAlpha() {
    return FastMath.atan2(y, x);
}","public void test039104() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    double double0 = vector3D0.MINUS_I.getAlpha();
    assertEquals(3.141592653589793, double0, 0.01);
}","/**
 * Get the azimuth of the vector.
 * @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;
 * @see #Vector3D(double, double)
 */"
"public double getAlpha() {
    return FastMath.atan2(y, x);
}","public void test040105() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = vector3D0.NEGATIVE_INFINITY.getAlpha();
    assertEquals((-2.356194490192345), double0, 0.01);
}","/**
 * Get the azimuth of the vector.
 * @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;
 * @see #Vector3D(double, double)
 */"
"public static double dotProduct(Vector3D v1, Vector3D v2) {
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}","public void test041106() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = Vector3D.dotProduct(vector3D0, vector3D0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Compute the dot-product of two vectors.
 * @param v1 first vector
 * @param v2 second vector
 * @return the dot product v1.v2
 */"
"public double getZ() {
    return z;
}","public void test042107() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test042108() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    assertEquals(1.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double dotProduct(Vector3D v1, Vector3D v2) {
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}","public void test042109() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Compute the dot-product of two vectors.
 * @param v1 first vector
 * @param v2 second vector
 * @return the dot product v1.v2
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test042110() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
    double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    assertEquals(2.0, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public static double distanceSq(Vector3D v1, Vector3D v2) {
    final double dx = v2.x - v1.x;
    final double dy = v2.y - v1.y;
    final double dz = v2.z - v1.z;
    return dx * dx + dy * dy + dz * dz;
}","public void test043111() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Compute the square of the distance between two vectors.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the square of the distance between v1 and v2
 */"
"public double getX() {
    return x;
}","public void test043112() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test043113() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test043114() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test044115() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.orthogonal();
    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test044116() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.orthogonal();
    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(1.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test044117() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.orthogonal();
    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double distanceInf(Vector3D v1, Vector3D v2) {
    final double dx = FastMath.abs(v2.x - v1.x);
    final double dy = FastMath.abs(v2.y - v1.y);
    final double dz = FastMath.abs(v2.z - v1.z);
    return FastMath.max(FastMath.max(dx, dy), dz);
}","public void test044118() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.orthogonal();
    double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
 */"
"public static double distance1(Vector3D v1, Vector3D v2) {
    final double dx = FastMath.abs(v2.x - v1.x);
    final double dy = FastMath.abs(v2.y - v1.y);
    final double dz = FastMath.abs(v2.z - v1.z);
    return dx + dy + dz;
}","public void test045119() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
    double double0 = Vector3D.distance1(vector3D1, vector3D0);
    assertEquals(2.0, double0, 0.01);
}","/**
 * Compute the distance between two vectors according to the L<sub>1</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>1</sub> norm
 */"
"public double getY() {
    return y;
}","public void test045120() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
    double double0 = Vector3D.distance1(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test045121() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
    double double0 = Vector3D.distance1(vector3D1, vector3D0);
    assertEquals(-0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test045122() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
    double double0 = Vector3D.distance1(vector3D1, vector3D0);
    assertEquals((-1.0), vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double distance(Vector3D v1, Vector3D v2) {
    final double dx = v2.x - v1.x;
    final double dy = v2.y - v1.y;
    final double dz = v2.z - v1.z;
    return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
}","public void test046123() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    double double0 = Vector3D.distance(vector3D0, vector3D0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the distance between two vectors according to the L<sub>2</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNorm()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>2</sub> norm
 */"
"public double getY() {
    return y;
}","public void test047124() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
    double double0 = Vector3D.distance(vector3D0, vector3D1);
    assertEquals(-0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double distance(Vector3D v1, Vector3D v2) {
    final double dx = v2.x - v1.x;
    final double dy = v2.y - v1.y;
    final double dz = v2.z - v1.z;
    return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
}","public void test047125() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
    double double0 = Vector3D.distance(vector3D0, vector3D1);
    assertEquals(4281.08, double0, 0.01);
}","/**
 * Compute the distance between two vectors according to the L<sub>2</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNorm()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>2</sub> norm
 */"
"public double getZ() {
    return z;
}","public void test047126() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
    double double0 = Vector3D.distance(vector3D0, vector3D1);
    assertEquals(-0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test048127() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
    assertEquals((-368.18896542120007), vector3D3.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test048128() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
    assertEquals((-8.0E298), vector3D2.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isInfinite() {
    return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
}","public void test048129() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
    assertTrue(vector3D3.isInfinite());
}","/**
 * Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 * @return  true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test049130() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));
    Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.9999999999999998, vector3D3.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getX() {
    return x;
}","public void test049131() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));
    Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);
    Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals((-0.7071067811865475), vector3D3.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test050132() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test050133() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test050134() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test051135() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test051136() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test051137() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test051138() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
    assertFalse(vector3D1.isNaN());
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public double getX() {
    return x;
}","public void test052139() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D vector3D2 = vector3D0.add(vector3D1);
    assertEquals(Double.NaN, vector3D2.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test052140() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D vector3D2 = vector3D0.add(vector3D1);
    assertEquals(Double.NaN, vector3D2.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test052141() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D vector3D2 = vector3D0.add(vector3D1);
    assertEquals(0.0, vector3D2.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test053142() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.0, vector3D2.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test053143() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals((-0.7063126629085149), vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test053144() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.49999874016678386, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test053145() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.9999999999999998, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test053146() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.0, vector3D2.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getX() {
    return x;
}","public void test053147() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals((-0.5011224222150824), vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test053148() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
    Vector3D vector3D1 = vector3D0.negate();
    Vector3D vector3D2 = vector3D1.add(vector3D0);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test054149() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D2 = vector3D1.add(0.0, vector3D0);
    assertTrue(vector3D2.equals((Object) vector3D1));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test055150() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(1.0, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getY() {
    return y;
}","public void test055151() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test055152() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(0.0, vector3D2.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test055153() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(0.0, vector3D2.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test055154() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(0.0, vector3D2.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test055155() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(-0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test055156() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.MINUS_K.negate();
    Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
    assertEquals(-0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public Vector3D subtract(Vector3D v) {
    return new Vector3D(x - v.x, y - v.y, z - v.z);
}","public void test056157() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    // Undeclared exception!
    try {
        vector3D0.PLUS_I.subtract((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Subtract a vector from the instance.
 * @param v vector to subtract
 * @return a new vector
 */"
"public Vector3D subtract(double factor, Vector3D v) {
    return new Vector3D(x - factor * v.x, y - factor * v.y, z - factor * v.z);
}","public void test057158() throws Throwable {
    Vector3D vector3D0 = new Vector3D(2714.53457909, 2714.53457909, 2714.53457909);
    // Undeclared exception!
    try {
        vector3D0.subtract(2714.53457909, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Subtract a scaled vector from the instance.
 * @param factor scale factor to apply to v before subtracting it
 * @param v vector to subtract
 * @return a new vector
 */"
"public static double distanceSq(Vector3D v1, Vector3D v2) {
    final double dx = v2.x - v1.x;
    final double dy = v2.y - v1.y;
    final double dz = v2.z - v1.z;
    return dx * dx + dy * dy + dz * dz;
}","public void test058159() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    // Undeclared exception!
    try {
        Vector3D.distanceSq(vector3D0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Compute the square of the distance between two vectors.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the square of the distance between v1 and v2
 */"
"public static double distanceInf(Vector3D v1, Vector3D v2) {
    final double dx = FastMath.abs(v2.x - v1.x);
    final double dy = FastMath.abs(v2.y - v1.y);
    final double dz = FastMath.abs(v2.z - v1.z);
    return FastMath.max(FastMath.max(dx, dy), dz);
}","public void test059160() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-1036.6), Double.NEGATIVE_INFINITY, (-610.2));
    // Undeclared exception!
    try {
        Vector3D.distanceInf(vector3D0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
 */"
"public static double distance1(Vector3D v1, Vector3D v2) {
    final double dx = FastMath.abs(v2.x - v1.x);
    final double dy = FastMath.abs(v2.y - v1.y);
    final double dz = FastMath.abs(v2.z - v1.z);
    return dx + dy + dz;
}","public void test060161() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.097, (-4218.6746623851), 0.0);
    // Undeclared exception!
    try {
        Vector3D.distance1((Vector3D) null, vector3D0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Compute the distance between two vectors according to the L<sub>1</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>1</sub> norm
 */"
"public static double distance(Vector3D v1, Vector3D v2) {
    final double dx = v2.x - v1.x;
    final double dy = v2.y - v1.y;
    final double dz = v2.z - v1.z;
    return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
}","public void test061162() throws Throwable {
    // Undeclared exception!
    try {
        Vector3D.distance((Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Compute the distance between two vectors according to the L<sub>2</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNorm()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>2</sub> norm
 */"
"public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
    // rescale both vectors without losing precision,
    // to ensure their norm are the same order of magnitude
    // we reduce cancellation errors by preconditioning,
    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
    // v3 without loss of precision. See Kahan lecture
    // ""Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces""
    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
    // compute rho as an 8 bits approximation of v1.v2 / v2.v2
    // compute cross product from v3 and v2 instead of v1 and v2
    return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
}","public void test062163() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    // Undeclared exception!
    try {
        Vector3D.crossProduct(vector3D0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Compute the cross-product of two vectors.
 * @param v1 first vector
 * @param v2 second vector
 * @return the cross product v1 ^ v2 as a new Vector
 */"
"public static double angle(Vector3D v1, Vector3D v2) {
    double normProduct = v1.getNorm() * v2.getNorm();
    if (normProduct == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
    }
    double dot = dotProduct(v1, v2);
    double threshold = normProduct * 0.9999;
    if ((dot < -threshold) || (dot > threshold)) {
        // the vectors are almost aligned, compute using the sine
        Vector3D v3 = crossProduct(v1, v2);
        if (dot >= 0) {
            return FastMath.asin(v3.getNorm() / normProduct);
        }
        return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
    }
    // the vectors are sufficiently separated to use the cosine
    return FastMath.acos(dot / normProduct);
}","public void test063164() throws Throwable {
    // Undeclared exception!
    try {
        Vector3D.angle((Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Compute the angular separation between two vectors.
 * <p>This method computes the angular separation between two
 * vectors using the dot product for well separated vectors and the
 * cross product for almost aligned vectors. This allows to have a
 * good accuracy in all cases, even for vectors very close to each
 * other.</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return angular separation between v1 and v2
 * @exception ArithmeticException if either vector has a null norm
 */"
"public Vector3D add(Vector3D v) {
    return new Vector3D(x + v.x, y + v.y, z + v.z);
}","public void test064165() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_J;
    // Undeclared exception!
    try {
        vector3D0.add((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Add a vector to the instance.
 * @param v vector to add
 * @return a new vector
 */"
"public Vector3D add(double factor, Vector3D v) {
    return new Vector3D(x + factor * v.x, y + factor * v.y, z + factor * v.z);
}","public void test065166() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    // Undeclared exception!
    try {
        vector3D0.PLUS_I.add((-135.3), (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Add a scaled vector to the instance.
 * @param factor scale factor to apply to v before adding it
 * @param v vector to add
 * @return a new vector
 */"
"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2, double a3, Vector3D u3, double a4, Vector3D u4) {
    this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
    this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;
    this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;
}","public void test066167() throws Throwable {
    Vector3D vector3D0 = null;
    try {
        vector3D0 = new Vector3D((-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Linear constructor
 * Build a vector from four other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
 * @param a1 first scale factor
 * @param u1 first base (unscaled) vector
 * @param a2 second scale factor
 * @param u2 second base (unscaled) vector
 * @param a3 third scale factor
 * @param u3 third base (unscaled) vector
 * @param a4 fourth scale factor
 * @param u4 fourth base (unscaled) vector
 */"
"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2, double a3, Vector3D u3) {
    this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
    this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;
    this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;
}","public void test067168() throws Throwable {
    Vector3D vector3D0 = null;
    try {
        vector3D0 = new Vector3D(0.0, (Vector3D) null, 0.0, (Vector3D) null, 0.0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Linear constructor
 * Build a vector from three other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2 + a3 * u3
 * @param a1 first scale factor
 * @param u1 first base (unscaled) vector
 * @param a2 second scale factor
 * @param u2 second base (unscaled) vector
 * @param a3 third scale factor
 * @param u3 third base (unscaled) vector
 */"
"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {
    this.x = a1 * u1.x + a2 * u2.x;
    this.y = a1 * u1.y + a2 * u2.y;
    this.z = a1 * u1.z + a2 * u2.z;
}","public void test068169() throws Throwable {
    Vector3D vector3D0 = null;
    try {
        vector3D0 = new Vector3D(10.0, (Vector3D) null, Double.NaN, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Linear constructor
 * Build a vector from two other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2
 * @param a1 first scale factor
 * @param u1 first base (unscaled) vector
 * @param a2 second scale factor
 * @param u2 second base (unscaled) vector
 */"
"public Vector3D(double a, Vector3D u) {
    this.x = a * u.x;
    this.y = a * u.y;
    this.z = a * u.z;
}","public void test069170() throws Throwable {
    Vector3D vector3D0 = null;
    try {
        vector3D0 = new Vector3D((-3672.146764020265), (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Multiplicative constructor
 * Build a vector from another one and a scale factor.
 * The vector built will be a * u
 * @param a scale factor
 * @param u base (unscaled) vector
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test070171() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    boolean boolean0 = vector3D0.isNaN();
    assertTrue(boolean0);
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test071172() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    boolean boolean0 = vector3D0.isNaN();
    assertFalse(boolean0);
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test072173() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertTrue(boolean0);
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test072174() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertFalse(vector3D0.isNaN());
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public double getX() {
    return x;
}","public void test072175() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test072176() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test072177() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
    boolean boolean0 = vector3D1.isNaN();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double dotProduct(Vector3D v1, Vector3D v2) {
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}","public void test073178() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the dot-product of two vectors.
 * @param v1 first vector
 * @param v2 second vector
 * @return the dot product v1.v2
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test073179() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getX() {
    return x;
}","public void test073180() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test073181() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test073182() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    assertEquals(0.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test074183() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.getZ();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test075184() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    double double0 = vector3D0.getY();
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double dotProduct(Vector3D v1, Vector3D v2) {
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}","public void test076185() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    // Undeclared exception!
    try {
        Vector3D.dotProduct((Vector3D) null, vector3D0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Compute the dot-product of two vectors.
 * @param v1 first vector
 * @param v2 second vector
 * @return the dot product v1.v2
 */"
"public double getZ() {
    return z;
}","public void test077186() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
    double double0 = vector3D0.getX();
    assertEquals((-1411.89255812476), vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test077187() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
    double double0 = vector3D0.getX();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test077188() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
    double double0 = vector3D0.getX();
    assertEquals(0.0, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test077189() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
    double double0 = vector3D0.getX();
    assertEquals(1993440.5956880786, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getNorm() {
    return FastMath.sqrt(x * x + y * y + z * z);
}","public void test078190() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    double double0 = vector3D0.MINUS_K.getNorm();
    assertEquals(1.0, double0, 0.01);
}","/**
 * Get the L<sub>2</sub> norm for the vector.
 * @return euclidian norm for the vector
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test079191() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test079192() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertFalse(vector3D0.isNaN());
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public double getZ() {
    return z;
}","public void test079193() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test079194() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertEquals(1.0, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test079195() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.POSITIVE_INFINITY.hashCode();
    assertEquals(0.0, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test080196() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertTrue(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getY() {
    return y;
}","public void test080197() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test080198() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertEquals(0.0, vector3D3.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test080199() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertFalse(vector3D3.equals((Object) vector3D1));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getY() {
    return y;
}","public void test080200() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test080201() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
    boolean boolean0 = vector3D3.equals(vector3D2);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test081202() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(vector3D0.equals((Object) vector3D1));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getZ() {
    return z;
}","public void test081203() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(-0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test081204() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test081205() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertEquals(1.0, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test081206() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    boolean boolean0 = vector3D1.equals(vector3D0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getZ() {
    return z;
}","public void test082207() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals((-1.0), vector3D2.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test082208() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test082209() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(0.0, vector3D2.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test082210() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(1.0, vector3D2.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test082211() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test082212() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertFalse(vector3D2.equals((Object) vector3D1));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getX() {
    return x;
}","public void test082213() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(0.4632477837450123, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test082214() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test082215() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = Vector3D.ZERO;
    Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
    boolean boolean0 = vector3D1.equals(vector3D2);
    assertEquals(0.7326337531502269, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test083216() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test083217() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertEquals(0.4201396822393068, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test083218() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertEquals((-0.6247762571148826), vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test083219() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getX() {
    return x;
}","public void test083220() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
    Object object0 = new Object();
    boolean boolean0 = vector3D0.equals(object0);
    assertEquals((-0.6581316554864781), vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test084221() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertEquals(0.0, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test084222() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test084223() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test084224() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertEquals(1.0, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test084225() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    boolean boolean0 = vector3D0.equals(vector3D0);
    assertTrue(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getX() {
    return x;
}","public void test085226() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(47.9603363, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test085227() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(47.9603363, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isInfinite() {
    return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
}","public void test085228() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertTrue(boolean0);
}","/**
 * Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 * @return  true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 */"
"public double getZ() {
    return z;
}","public void test085229() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test086230() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(47.9603363, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test086231() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isInfinite() {
    return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
}","public void test086232() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertTrue(boolean0);
}","/**
 * Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 * @return  true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 */"
"public double getZ() {
    return z;
}","public void test086233() throws Throwable {
    Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
    boolean boolean0 = vector3D0.isInfinite();
    assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isInfinite() {
    return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
}","public void test087234() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    boolean boolean0 = vector3D0.isInfinite();
    assertTrue(boolean0);
}","/**
 * Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 * @return  true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 */"
"public boolean isInfinite() {
    return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
}","public void test088235() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    boolean boolean0 = vector3D0.isInfinite();
    assertFalse(boolean0);
}","/**
 * Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 * @return  true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test088236() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    boolean boolean0 = vector3D0.isInfinite();
    assertFalse(vector3D0.isNaN());
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public double getY() {
    return y;
}","public void test089237() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(0.0, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test089238() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test089239() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(1.0, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test089240() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test089241() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertFalse(vector3D0.isNaN());
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test089242() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertTrue(vector3D1.isNaN());
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public double getX() {
    return x;
}","public void test089243() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test089244() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test089245() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
    vector3D1.hashCode();
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isNaN() {
    return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
}","public void test090246() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertTrue(vector3D1.isNaN());
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public double getX() {
    return x;
}","public void test090247() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.4632477837450123, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test090248() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test090249() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test090250() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertFalse(vector3D1.equals((Object) vector3D0));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getZ() {
    return z;
}","public void test090251() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.7326337531502269, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test090252() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
    Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getZ() {
    return z;
}","public void test091253() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D.angle(vector3D1, vector3D1);
    assertEquals(0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test091254() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.NaN.orthogonal();
    Vector3D.angle(vector3D1, vector3D1);
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test092255() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(-0.0, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test092256() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.0, vector3D2.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test092257() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.7071067811865475, vector3D3.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test092258() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
    Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.7071067811865475, vector3D3.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test093259() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
    Vector3D vector3D2 = vector3D1.subtract(vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.37696688233705905, vector3D2.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test093260() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
    Vector3D vector3D2 = vector3D1.subtract(vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(1.0, vector3D3.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getX() {
    return x;
}","public void test093261() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
    Vector3D vector3D2 = vector3D1.subtract(vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test093262() throws Throwable {
    Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
    Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
    Vector3D vector3D2 = vector3D1.subtract(vector3D0);
    Vector3D vector3D3 = vector3D2.orthogonal();
    assertEquals(0.7933476776241507, vector3D3.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test094263() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertTrue(vector3D2.equals((Object) vector3D1));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getY() {
    return y;
}","public void test094264() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals((-1.0), vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test094265() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals(-0.0, vector3D2.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test094266() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals(0.0, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test094267() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals((-1.0), vector3D2.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test094268() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = vector3D0.orthogonal();
    Vector3D vector3D2 = vector3D1.normalize();
    assertEquals(0.0, vector3D2.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public Vector3D normalize() {
    double s = getNorm();
    if (s == 0) {
        throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
    }
    return scalarMultiply(1 / s);
}","public void test095269() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    // Undeclared exception!
    try {
        vector3D0.normalize();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // cannot normalize a zero norm vector
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Get a normalized vector aligned with the instance.
 * @return a new normalized vector
 * @exception ArithmeticException if the norm is zero
 */"
"public double getX() {
    return x;
}","public void test096270() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
    boolean boolean0 = vector3D1.isInfinite();
    assertEquals(Double.NaN, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test096271() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
    boolean boolean0 = vector3D1.isInfinite();
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public boolean isInfinite() {
    return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
}","public void test096272() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
    boolean boolean0 = vector3D1.isInfinite();
    assertFalse(boolean0);
}","/**
 * Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 * @return  true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise
 */"
"public double getZ() {
    return z;
}","public void test096273() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
    boolean boolean0 = vector3D1.isInfinite();
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test097274() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.MINUS_I.getNormInf();
    assertEquals(0.0, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test097275() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.MINUS_I.getNormInf();
    assertEquals(1.0, vector3D0.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test097276() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.MINUS_I.getNormInf();
    assertEquals(1.0, vector3D0.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getZ() {
    return z;
}","public void test097277() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    vector3D0.MINUS_I.getNormInf();
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getX() {
    return x;
}","public void test098278() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test098279() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test098280() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
    assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test099281() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.getNormSq();
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getX() {
    return x;
}","public void test100282() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getY() {
    return y;
}","public void test100283() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test100284() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
    assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getDelta() {
    return FastMath.asin(z / getNorm());
}","public void test101285() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.PLUS_J.getDelta();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the elevation of the vector.
 * @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2
 * @see #Vector3D(double, double)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test102286() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = vector3D0.MINUS_I.add(vector3D0);
    assertTrue(vector3D1.equals((Object) vector3D0));
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"@Override
public String toString() {
    return DEFAULT_FORMAT.format(this);
}","public void test103287() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    String string0 = vector3D0.MINUS_I.toString();
    assertEquals(""{-1; 0; 0}"", string0);
}","/**
 * Get a string representation of this vector.
 * @return a string representation of this vector
 */"
"public static double distance(Vector3D v1, Vector3D v2) {
    final double dx = v2.x - v1.x;
    final double dy = v2.y - v1.y;
    final double dz = v2.z - v1.z;
    return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
}","public void test104288() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = Vector3D.distance(vector3D0, vector3D0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the distance between two vectors according to the L<sub>2</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNorm()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>2</sub> norm
 */"
"public double getAlpha() {
    return FastMath.atan2(y, x);
}","public void test105289() throws Throwable {
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    double double0 = vector3D0.ZERO.getAlpha();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the azimuth of the vector.
 * @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;
 * @see #Vector3D(double, double)
 */"
"public static double distanceInf(Vector3D v1, Vector3D v2) {
    final double dx = FastMath.abs(v2.x - v1.x);
    final double dy = FastMath.abs(v2.y - v1.y);
    final double dz = FastMath.abs(v2.z - v1.z);
    return FastMath.max(FastMath.max(dx, dy), dz);
}","public void test106290() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
 * vector is built</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Vector3D) {
        final Vector3D rhs = (Vector3D) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }
        return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
    }
    return false;
}","public void test107291() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two 3D vectors.
 * <p>
 * If all coordinates of two 3D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to
 * {@link #NaN}.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two 3D vector objects are equal, false if
 *         object is null, not an instance of Vector3D, or
 *         not equal to this Vector3D instance
 */"
"public double getY() {
    return y;
}","public void test107292() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.0, vector3D0.getY(), 0.01);
}","/**
 * Get the ordinate of the vector.
 * @return ordinate of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getNormSq() {
    return x * x + y * y + z * z;
}","public void test107293() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(1.3599999999999999, vector3D1.getNormSq(), 0.01);
}","/**
 * Get the square of the norm for the vector.
 * @return square of the euclidian norm for the vector
 */"
"public double getX() {
    return x;
}","public void test107294() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.6, vector3D1.getX(), 0.01);
}","/**
 * Get the abscissa of the vector.
 * @return abscissa of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test107295() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals((-1.0), vector3D1.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public double getZ() {
    return z;
}","public void test107296() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.0);
    Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
    boolean boolean0 = vector3D0.equals(vector3D1);
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}","/**
 * Get the height of the vector.
 * @return height of the vector
 * @see #Vector3D(double, double, double)
 */"
"public static double angle(Vector3D v1, Vector3D v2) {
    double normProduct = v1.getNorm() * v2.getNorm();
    if (normProduct == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
    }
    double dot = dotProduct(v1, v2);
    double threshold = normProduct * 0.9999;
    if ((dot < -threshold) || (dot > threshold)) {
        // the vectors are almost aligned, compute using the sine
        Vector3D v3 = crossProduct(v1, v2);
        if (dot >= 0) {
            return FastMath.asin(v3.getNorm() / normProduct);
        }
        return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
    }
    // the vectors are sufficiently separated to use the cosine
    return FastMath.acos(dot / normProduct);
}","public void test108297() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
    Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
    // Undeclared exception!
    try {
        Vector3D.angle(vector3D0, vector3D1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // zero norm
        //
        verifyException(""org.apache.commons.math.geometry.Vector3D"", e);
    }
}","/**
 * Compute the angular separation between two vectors.
 * <p>This method computes the angular separation between two
 * vectors using the dot product for well separated vectors and the
 * cross product for almost aligned vectors. This allows to have a
 * good accuracy in all cases, even for vectors very close to each
 * other.</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return angular separation between v1 and v2
 * @exception ArithmeticException if either vector has a null norm
 */"
"public static double angle(Vector3D v1, Vector3D v2) {
    double normProduct = v1.getNorm() * v2.getNorm();
    if (normProduct == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
    }
    double dot = dotProduct(v1, v2);
    double threshold = normProduct * 0.9999;
    if ((dot < -threshold) || (dot > threshold)) {
        // the vectors are almost aligned, compute using the sine
        Vector3D v3 = crossProduct(v1, v2);
        if (dot >= 0) {
            return FastMath.asin(v3.getNorm() / normProduct);
        }
        return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
    }
    // the vectors are sufficiently separated to use the cosine
    return FastMath.acos(dot / normProduct);
}","public void test109298() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D.angle(vector3D0, vector3D0);
}","/**
 * Compute the angular separation between two vectors.
 * <p>This method computes the angular separation between two
 * vectors using the dot product for well separated vectors and the
 * cross product for almost aligned vectors. This allows to have a
 * good accuracy in all cases, even for vectors very close to each
 * other.</p>
 * @param v1 first vector
 * @param v2 second vector
 * @return angular separation between v1 and v2
 * @exception ArithmeticException if either vector has a null norm
 */"
