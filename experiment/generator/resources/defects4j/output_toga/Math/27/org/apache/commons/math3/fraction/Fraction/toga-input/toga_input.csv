focal_method,test_prefix,docstring
"public Fraction divide(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (fraction.numerator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);
    }
    return multiply(fraction.reciprocal());
}","public void test000() throws Throwable {
    int int0 = 2;
    Fraction fraction0 = new Fraction(14.101419448852539, 2);
    fraction0.doubleValue();
    Fraction fraction1 = Fraction.ZERO;
    fraction0.divide(fraction1);
    // Undeclared exception!
    try {
        fraction1.divide(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // the fraction to divide by must not be zero: 0/1
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws IllegalArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction negate() {
    if (numerator == Integer.MIN_VALUE) {
        throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
    }
    return new Fraction(-numerator, denominator);
}","public void test011() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(1577, (-566));
    Fraction fraction1 = Fraction.ONE_FIFTH;
    Fraction fraction2 = fraction1.ONE_FIFTH.add(Integer.MAX_VALUE);
    fraction1.negate();
    Fraction fraction3 = Fraction.TWO_FIFTHS;
    fraction1.toString();
    fraction2.TWO_QUARTERS.add(2);
    Fraction fraction4 = Fraction.ONE_QUARTER;
    Fraction fraction5 = fraction2.TWO.negate();
    Fraction fraction6 = fraction5.ZERO.add(fraction4);
    fraction6.ZERO.subtract(1577);
    Fraction fraction7 = Fraction.ONE_THIRD;
    fraction6.THREE_FIFTHS.subtract(31);
    fraction6.ONE_FIFTH.getField();
    Fraction fraction8 = Fraction.getReducedFraction(1577, 1);
    Fraction fraction9 = fraction2.TWO_FIFTHS.multiply(fraction8);
    Fraction fraction10 = fraction4.multiply((-566));
    Fraction.getReducedFraction(1577, 2);
    fraction9.toString();
    fraction10.TWO_FIFTHS.multiply((Fraction) null);
    fraction0.negate();
}","/**
 * Return the additive inverse of this fraction.
 * @return the negation of this fraction.
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test022() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    fraction0.equals(""Me|<[@o.O]r,Iz"");
    Fraction fraction1 = fraction0.subtract(753);
    Fraction fraction2 = fraction1.reciprocal();
    int int0 = 2379;
    fraction2.MINUS_ONE.percentageValue();
    Fraction fraction3 = fraction1.ONE_QUARTER.subtract(2379);
    fraction3.FOUR_FIFTHS.add(2379);
    fraction0.negate();
    Fraction fraction4 = new Fraction((double) 2379, 753);
    fraction4.TWO.toString();
    // Undeclared exception!
    try {
        fraction4.THREE_FIFTHS.add(fraction2);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 2,379 to fraction (9,223,372,036,854,773,430/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction multiply(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);
    int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);
    return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test033() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = Fraction.TWO;
    Fraction fraction2 = fraction0.add(fraction1);
    int int0 = 2236;
    Fraction fraction3 = Fraction.getReducedFraction(2236, (-2329));
    fraction0.getNumerator();
    Fraction fraction4 = new Fraction(2);
    Fraction fraction5 = fraction0.FOUR_FIFTHS.divide(fraction4);
    Fraction fraction6 = fraction3.TWO_FIFTHS.multiply(fraction5);
    fraction6.add(fraction5);
    Fraction fraction7 = fraction5.ONE_THIRD.add(fraction2);
    fraction0.hashCode();
    Fraction fraction8 = fraction0.subtract(613);
    fraction0.compareTo(fraction1);
    fraction0.getField();
    fraction5.equals(fraction4);
    Fraction fraction9 = fraction0.subtract(fraction8);
    fraction9.ONE_FIFTH.percentageValue();
    fraction8.MINUS_ONE.divide(0);
    fraction8.abs();
    // Undeclared exception!
    try {
        fraction3.multiply(fraction7);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction -1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction reciprocal() {
    return new Fraction(denominator, numerator);
}","public void test044() throws Throwable {
    Fraction fraction0 = Fraction.TWO_FIFTHS;
    fraction0.getField();
    fraction0.MINUS_ONE.getField();
    Fraction fraction1 = Fraction.MINUS_ONE;
    fraction1.ZERO.toString();
    Fraction fraction2 = fraction1.ONE_HALF.subtract(3);
    Fraction fraction3 = fraction0.TWO_QUARTERS.reciprocal();
    Fraction fraction4 = Fraction.getReducedFraction(3, 3);
    fraction0.compareTo(fraction1);
    fraction0.longValue();
    Fraction fraction5 = fraction3.TWO.divide(fraction2);
    Fraction fraction6 = fraction0.multiply(1);
    fraction6.negate();
    Fraction.getReducedFraction(1, 3);
    Fraction fraction7 = fraction5.multiply(3);
    fraction0.getNumerator();
    fraction6.getField();
    Fraction fraction8 = fraction3.divide(fraction0);
    fraction8.THREE_FIFTHS.percentageValue();
    Fraction fraction9 = fraction7.divide(2);
    Fraction fraction10 = fraction7.MINUS_ONE.subtract(3);
    fraction9.TWO_THIRDS.reciprocal();
    fraction0.ONE_FIFTH.multiply(fraction7);
    fraction2.getNumerator();
    fraction0.percentageValue();
    Fraction.getReducedFraction((-503), 3);
    Fraction fraction11 = fraction4.abs();
    Object object0 = new Object();
    fraction11.equals(object0);
    fraction3.floatValue();
    fraction10.toString();
    fraction6.reciprocal();
}","/**
 * Return the multiplicative inverse of this fraction.
 * @return the reciprocal fraction
 */"
"public Fraction add(final int i) {
    return new Fraction(numerator + i * denominator, denominator);
}","public void test055() throws Throwable {
    Fraction fraction0 = new Fraction(244);
    Fraction fraction1 = Fraction.TWO_FIFTHS;
    Fraction fraction2 = fraction0.TWO.subtract(160);
    Fraction fraction3 = fraction1.TWO_QUARTERS.add(fraction2);
    fraction0.MINUS_ONE.getField();
    Fraction fraction4 = fraction2.ZERO.subtract(201);
    fraction1.THREE_QUARTERS.add(fraction0);
    Fraction fraction5 = fraction1.ONE.add(54);
    fraction5.ONE_THIRD.getField();
    fraction0.compareTo(fraction1);
    fraction0.percentageValue();
    fraction4.ONE_FIFTH.abs();
    Fraction fraction6 = new Fraction((-47.374153064));
    Fraction fraction7 = fraction2.ONE_FIFTH.add(1);
    fraction7.TWO_THIRDS.getField();
    fraction7.ONE.percentageValue();
    fraction4.multiply(fraction6);
    fraction5.THREE_QUARTERS.divide(fraction6);
    Fraction fraction8 = fraction2.THREE_QUARTERS.abs();
    fraction5.abs();
    fraction4.hashCode();
    fraction3.doubleValue();
    fraction0.add(fraction8);
    fraction0.getDenominator();
    fraction6.subtract(1);
    fraction0.add(fraction3);
    fraction0.toString();
    fraction5.add(1);
}","/**
 * Add an integer to the fraction.
 * @param i the <tt>integer</tt> to add.
 * @return this + i
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test066() throws Throwable {
    int int0 = 1475;
    Fraction fraction0 = Fraction.getReducedFraction(0, 1475);
    Fraction fraction1 = Fraction.getReducedFraction((-3096), (-3096));
    fraction1.ONE.add(fraction0);
    fraction1.divide(2058);
    fraction1.subtract(5);
    Fraction fraction2 = Fraction.getReducedFraction((-131), 0);
    int int1 = (-238);
    Fraction fraction3 = Fraction.getReducedFraction(int1, int0);
    fraction2.compareTo(fraction3);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"public Fraction divide(final int i) {
    return new Fraction(numerator, denominator * i);
}","public void test077() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.THREE_QUARTERS.abs();
    Fraction fraction2 = new Fraction(2082.036, 5);
    Fraction fraction3 = fraction2.ONE_FIFTH.negate();
    Fraction fraction4 = fraction2.TWO_FIFTHS.subtract(fraction3);
    fraction0.compareTo(fraction2);
    Fraction fraction5 = fraction0.multiply(fraction2);
    fraction1.TWO_THIRDS.toString();
    Fraction fraction6 = fraction0.subtract(fraction5);
    Fraction fraction7 = fraction2.subtract(fraction5);
    fraction7.TWO.divide(fraction1);
    Fraction.getReducedFraction(5, 5);
    Fraction fraction8 = Fraction.ONE_HALF;
    fraction8.THREE_FIFTHS.percentageValue();
    fraction1.divide(fraction8);
    Fraction fraction9 = Fraction.THREE_QUARTERS;
    Fraction fraction10 = fraction7.ONE_QUARTER.divide(5);
    fraction10.THREE_FIFTHS.percentageValue();
    Fraction fraction11 = fraction3.divide((-1));
    Fraction fraction12 = fraction11.TWO_THIRDS.multiply(fraction4);
    Fraction fraction13 = fraction12.FOUR_FIFTHS.negate();
    Fraction fraction14 = fraction11.FOUR_FIFTHS.reciprocal();
    Fraction fraction15 = fraction14.TWO_QUARTERS.divide(fraction0);
    fraction0.FOUR_FIFTHS.add(5);
    fraction0.TWO_FIFTHS.add(fraction3);
    fraction7.toString();
    fraction8.getNumerator();
    fraction15.floatValue();
    fraction7.subtract(fraction0);
    fraction3.floatValue();
    fraction2.multiply(5);
    fraction13.divide(29);
    fraction2.intValue();
    fraction8.multiply(fraction6);
    fraction7.divide((-1));
}","/**
 * Divide the fraction by an integer.
 * @param i the <tt>integer</tt> to divide by.
 * @return this * i
 */"
"public Fraction reciprocal() {
    return new Fraction(denominator, numerator);
}","public void test088() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = 37;
    Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(37);
    fraction1.ZERO.multiply(fraction0);
    fraction1.ONE.negate();
    fraction0.TWO_FIFTHS.abs();
    fraction0.ONE_FIFTH.add(fraction0);
    // Undeclared exception!
    try {
        fraction0.reciprocal();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Return the multiplicative inverse of this fraction.
 * @return the reciprocal fraction
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test099() throws Throwable {
    Fraction fraction0 = new Fraction(55);
    Fraction fraction1 = fraction0.ONE_THIRD.add(55);
    fraction0.getField();
    fraction0.ONE_FIFTH.getField();
    fraction1.THREE_QUARTERS.percentageValue();
    Fraction fraction2 = fraction0.subtract(592);
    fraction2.equals(fraction1);
    fraction2.compareTo(fraction0);
    Fraction fraction3 = fraction2.ZERO.divide(592);
    Fraction fraction4 = fraction2.add((-1));
    Fraction fraction5 = Fraction.ONE_THIRD;
    Fraction.getReducedFraction(34, (-1));
    fraction1.equals(fraction5);
    Fraction fraction6 = fraction2.abs();
    fraction6.THREE_FIFTHS.percentageValue();
    fraction4.multiply(fraction5);
    fraction0.abs();
    Fraction fraction7 = fraction5.subtract(2446);
    fraction3.add(fraction7);
    Object object0 = new Object();
    fraction6.equals(object0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public Fraction subtract(final int i) {
    return new Fraction(numerator - i * denominator, denominator);
}","public void test1010() throws Throwable {
    Fraction fraction0 = new Fraction(0.0, 7.734335768410164E-14, 1879048192);
    Fraction fraction1 = fraction0.add((-2290));
    Fraction fraction2 = fraction1.TWO_THIRDS.abs();
    fraction0.getDenominator();
    fraction1.getDenominator();
    Fraction fraction3 = fraction1.subtract(fraction2);
    fraction2.getField();
    Fraction fraction4 = Fraction.TWO_QUARTERS;
    Fraction fraction5 = fraction0.subtract(fraction4);
    fraction0.TWO_FIFTHS.multiply(fraction4);
    Fraction fraction6 = fraction0.TWO_FIFTHS.negate();
    Fraction fraction7 = fraction1.divide((-2147483646));
    Fraction fraction8 = fraction7.ONE_THIRD.multiply(fraction2);
    fraction3.getField();
    Fraction fraction9 = fraction6.add(fraction5);
    fraction9.TWO_THIRDS.multiply((-2147483646));
    fraction6.abs();
    Fraction fraction10 = fraction4.reciprocal();
    fraction10.getDenominator();
    Fraction fraction11 = fraction4.subtract(fraction6);
    fraction3.multiply(fraction10);
    fraction9.multiply(1);
    Fraction fraction12 = fraction11.subtract(fraction8);
    fraction5.compareTo(fraction0);
    fraction8.compareTo(fraction0);
    Fraction fraction13 = Fraction.ONE_HALF;
    fraction5.add(fraction13);
    fraction12.subtract((-90));
}","/**
 * Subtract an integer from the fraction.
 * @param i the <tt>integer</tt> to subtract.
 * @return this - i
 */"
"public Fraction subtract(Fraction fraction) {
    return addSub(fraction, false);
}","public void test1111() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    fraction0.ONE_THIRD.getField();
    fraction0.getField();
    Fraction fraction1 = null;
    fraction0.ONE_QUARTER.negate();
    // Undeclared exception!
    try {
        fraction0.subtract((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p>
 *
 * @param fraction  the fraction to subtract, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator
 *   cannot be represented in an {@code int}.
 */"
"public double percentageValue() {
    return multiply(100).doubleValue();
}","public void test1212() throws Throwable {
    int int0 = (-2038);
    Fraction fraction0 = new Fraction((-1886.8021), (-1.0), (-2038));
    Fraction fraction1 = fraction0.ONE_QUARTER.abs();
    // Undeclared exception!
    try {
        fraction1.percentageValue();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Unable to convert -1,886.802 to fraction after -2,038 iterations
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test1414() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
    Fraction fraction2 = fraction1.ONE_HALF.divide((-541));
    Fraction.getReducedFraction((-541), 25);
    fraction2.THREE_QUARTERS.multiply(fraction0);
    fraction0.getField();
    fraction0.getNumerator();
    fraction1.compareTo(fraction0);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"public Fraction abs() {
    Fraction ret;
    if (numerator >= 0) {
        ret = this;
    } else {
        ret = negate();
    }
    return ret;
}","public void test1515() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    fraction0.THREE_FIFTHS.percentageValue();
    fraction0.abs();
}","/**
 * Returns the absolute value of this fraction.
 * @return the absolute value.
 */"
"public Fraction subtract(final int i) {
    return new Fraction(numerator - i * denominator, denominator);
}","public void test1616() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.abs();
    Fraction fraction2 = fraction1.TWO_FIFTHS.divide(714);
    fraction2.abs();
    fraction1.getField();
    fraction1.subtract(409);
}","/**
 * Subtract an integer from the fraction.
 * @param i the <tt>integer</tt> to subtract.
 * @return this - i
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test1717() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    fraction0.equals(""np&|kvzC"");
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test1818() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.TWO;
    fraction0.add(fraction1);
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction add(final int i) {
    return new Fraction(numerator + i * denominator, denominator);
}","public void test1919() throws Throwable {
    Fraction fraction0 = new Fraction(0.0036, (-561));
    fraction0.add((-561));
}","/**
 * Add an integer to the fraction.
 * @param i the <tt>integer</tt> to add.
 * @return this + i
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test2020() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = fraction0.negate();
    Fraction fraction2 = fraction1.TWO_THIRDS.divide(1);
    Fraction fraction3 = fraction2.TWO.subtract(fraction0);
    fraction3.reciprocal();
    fraction1.add(fraction0);
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction divide(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (fraction.numerator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);
    }
    return multiply(fraction.reciprocal());
}","public void test2121() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.ONE_QUARTER;
    fraction0.divide(fraction1);
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws IllegalArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public int getDenominator() {
    return denominator;
}","public void test2222() throws Throwable {
    Fraction fraction0 = new Fraction(4);
    fraction0.getDenominator();
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test2323() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    fraction0.doubleValue();
    fraction0.floatValue();
    Fraction fraction1 = Fraction.ZERO;
    fraction0.compareTo(fraction1);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"public Fraction multiply(final int i) {
    return new Fraction(numerator * i, denominator);
}","public void test2424() throws Throwable {
    Fraction fraction0 = new Fraction(1.0E-5);
    fraction0.THREE_FIFTHS.getField();
    Fraction fraction1 = fraction0.divide((-379));
    fraction1.multiply((-379));
}","/**
 * Multiply the fraction by an integer.
 * @param i the <tt>integer</tt> to multiply by.
 * @return this * i
 */"
"public Fraction subtract(final int i) {
    return new Fraction(numerator - i * denominator, denominator);
}","public void test2525() throws Throwable {
    Fraction fraction0 = new Fraction(402, 402);
    Fraction fraction1 = fraction0.reciprocal();
    fraction0.compareTo(fraction1);
    fraction0.toString();
    fraction1.getNumerator();
    fraction0.floatValue();
    fraction1.getNumerator();
    fraction1.subtract(1);
}","/**
 * Subtract an integer from the fraction.
 * @param i the <tt>integer</tt> to subtract.
 * @return this - i
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test2626() throws Throwable {
    Fraction fraction0 = new Fraction(292, 1814);
    fraction0.longValue();
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"@Override
public int hashCode() {
    return 37 * (37 * 17 + numerator) + denominator;
}","public void test2727() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    fraction0.hashCode();
}","/**
 * Gets a hashCode for the fraction.
 * @return a hash code value for this object
 */"
"@Override
public String toString() {
    String str = null;
    if (denominator == 1) {
        str = Integer.toString(numerator);
    } else if (numerator == 0) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test2828() throws Throwable {
    Fraction fraction0 = new Fraction(0.0);
    Fraction fraction1 = Fraction.ZERO;
    fraction0.TWO_THIRDS.subtract(fraction1);
    Fraction fraction2 = Fraction.TWO;
    Fraction fraction3 = fraction0.add(fraction2);
    fraction1.divide(fraction3);
    fraction0.toString();
}","/**
 * <p>
 * Returns the {@code String} representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test2929() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    fraction0.intValue();
    Fraction fraction1 = Fraction.TWO_QUARTERS;
    Fraction fraction2 = fraction0.subtract(fraction1);
    fraction2.THREE_QUARTERS.abs();
    Fraction.getReducedFraction(0, 38);
    Fraction fraction3 = Fraction.TWO_QUARTERS;
    fraction0.compareTo(fraction3);
    Fraction fraction4 = fraction1.add(fraction2);
    Fraction fraction5 = fraction0.subtract(1);
    Fraction fraction6 = fraction5.THREE_QUARTERS.multiply(38);
    Fraction fraction7 = fraction5.MINUS_ONE.reciprocal();
    Fraction fraction8 = fraction7.THREE_QUARTERS.negate();
    fraction8.TWO_QUARTERS.subtract(fraction0);
    fraction7.ONE_HALF.toString();
    fraction3.getField();
    fraction2.subtract(323);
    fraction4.add(fraction6);
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction divide(final int i) {
    return new Fraction(numerator, denominator * i);
}","public void test3030() throws Throwable {
    Fraction fraction0 = new Fraction((-1.0), (-888.2572836470878), (-1906));
    int int0 = (-1487);
    fraction0.divide(int0);
}","/**
 * Divide the fraction by an integer.
 * @param i the <tt>integer</tt> to divide by.
 * @return this * i
 */"
"public Fraction subtract(Fraction fraction) {
    return addSub(fraction, false);
}","public void test3131() throws Throwable {
    Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
    Fraction fraction1 = Fraction.MINUS_ONE;
    fraction0.subtract(fraction1);
}","/**
 * <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p>
 *
 * @param fraction  the fraction to subtract, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator
 *   cannot be represented in an {@code int}.
 */"
"public Fraction divide(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (fraction.numerator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);
    }
    return multiply(fraction.reciprocal());
}","public void test3232() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = Fraction.TWO_QUARTERS;
    fraction1.THREE_FIFTHS.percentageValue();
    fraction0.divide(fraction1);
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws IllegalArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"@Override
public int intValue() {
    return (int) doubleValue();
}","public void test3333() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.getReducedFraction(3, (-1));
    fraction0.THREE_QUARTERS.multiply(fraction1);
    fraction0.intValue();
}","/**
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test3434() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = Fraction.FOUR_FIFTHS;
    fraction0.divide(1842);
    fraction0.ZERO.add(1842);
    fraction0.TWO_THIRDS.divide(fraction1);
    fraction0.longValue();
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test3535() throws Throwable {
    Fraction fraction0 = new Fraction(0);
    Fraction fraction1 = Fraction.MINUS_ONE;
    fraction0.TWO_QUARTERS.divide(fraction1);
    fraction0.MINUS_ONE.add(0);
    Object object0 = new Object();
    fraction0.equals(object0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test3636() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-2464), (-2464));
    fraction0.MINUS_ONE.negate();
    fraction0.hashCode();
    fraction0.equals(""\"""");
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test3737() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-2317), Integer.MAX_VALUE);
    Fraction fraction1 = Fraction.TWO_QUARTERS;
    fraction0.compareTo(fraction1);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test3838() throws Throwable {
    Fraction fraction0 = new Fraction(0.0);
    Fraction fraction1 = fraction0.TWO_FIFTHS.divide(2);
    fraction1.ONE_HALF.add(2);
    Object object0 = new Object();
    fraction0.equals(object0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public Fraction multiply(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);
    int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);
    return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test3939() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = Fraction.TWO;
    fraction0.multiply(fraction1);
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction subtract(final int i) {
    return new Fraction(numerator - i * denominator, denominator);
}","public void test4040() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    fraction0.floatValue();
    Fraction fraction1 = Fraction.TWO;
    fraction0.multiply(fraction1);
    fraction0.subtract((-1082));
}","/**
 * Subtract an integer from the fraction.
 * @param i the <tt>integer</tt> to subtract.
 * @return this - i
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test4141() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-2580), 63);
    fraction0.TWO_QUARTERS.toString();
    Fraction fraction1 = Fraction.ONE;
    fraction0.add(fraction1);
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction add(final int i) {
    return new Fraction(numerator + i * denominator, denominator);
}","public void test4242() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    fraction0.ONE_HALF.abs();
    Fraction fraction1 = fraction0.ONE_HALF.subtract((-277));
    fraction0.ONE_THIRD.reciprocal();
    fraction0.doubleValue();
    fraction0.hashCode();
    Fraction fraction2 = fraction1.subtract(fraction0);
    Fraction fraction3 = fraction2.ONE_THIRD.multiply(fraction0);
    fraction1.ONE.abs();
    fraction3.THREE_QUARTERS.multiply(fraction2);
    fraction0.compareTo(fraction2);
    fraction1.add((-277));
}","/**
 * Add an integer to the fraction.
 * @param i the <tt>integer</tt> to add.
 * @return this + i
 */"
"@Override
public int hashCode() {
    return 37 * (37 * 17 + numerator) + denominator;
}","public void test4343() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = fraction0.divide((-783));
    fraction0.TWO_THIRDS.multiply(2);
    fraction1.TWO_THIRDS.percentageValue();
    fraction0.divide(fraction1);
    fraction1.longValue();
    fraction0.hashCode();
}","/**
 * Gets a hashCode for the fraction.
 * @return a hash code value for this object
 */"
"public Fraction negate() {
    if (numerator == Integer.MIN_VALUE) {
        throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
    }
    return new Fraction(-numerator, denominator);
}","public void test4444() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    fraction0.TWO_QUARTERS.multiply(984);
    fraction0.negate();
}","/**
 * Return the additive inverse of this fraction.
 * @return the negation of this fraction.
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test4545() throws Throwable {
    Fraction fraction0 = new Fraction(1030, 179);
    Fraction fraction1 = Fraction.THREE_FIFTHS;
    fraction1.ONE.subtract(fraction0);
    fraction0.MINUS_ONE.multiply(fraction1);
    Fraction.getReducedFraction(4, 1030);
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public Fraction divide(final int i) {
    return new Fraction(numerator, denominator * i);
}","public void test4646() throws Throwable {
    Fraction fraction0 = new Fraction(4061.2371117112, 4061.2371117112, 8388607);
    fraction0.MINUS_ONE.add(8388607);
    Fraction fraction1 = Fraction.ONE_THIRD;
    fraction0.ONE.multiply(fraction1);
    fraction0.divide(2);
}","/**
 * Divide the fraction by an integer.
 * @param i the <tt>integer</tt> to divide by.
 * @return this * i
 */"
"public Fraction divide(final int i) {
    return new Fraction(numerator, denominator * i);
}","public void test4747() throws Throwable {
    Fraction fraction0 = new Fraction(2069);
    fraction0.ONE_THIRD.subtract(2069);
    Fraction fraction1 = fraction0.multiply(2069);
    Fraction fraction2 = Fraction.THREE_QUARTERS;
    Fraction fraction3 = fraction0.add(fraction2);
    Fraction fraction4 = fraction3.FOUR_FIFTHS.abs();
    fraction2.getDenominator();
    fraction2.floatValue();
    fraction3.divide(4);
    fraction0.MINUS_ONE.subtract(fraction4);
    fraction1.divide(297);
}","/**
 * Divide the fraction by an integer.
 * @param i the <tt>integer</tt> to divide by.
 * @return this * i
 */"
"@Override
public int hashCode() {
    return 37 * (37 * 17 + numerator) + denominator;
}","public void test4848() throws Throwable {
    Fraction fraction0 = new Fraction((-1454.18), 2);
    fraction0.ONE.getField();
    Fraction fraction1 = fraction0.subtract(2);
    Fraction fraction2 = fraction1.THREE_FIFTHS.multiply(0);
    fraction0.negate();
    fraction2.TWO_THIRDS.getField();
    fraction1.percentageValue();
    fraction2.hashCode();
}","/**
 * Gets a hashCode for the fraction.
 * @return a hash code value for this object
 */"
"public Fraction divide(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (fraction.numerator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);
    }
    return multiply(fraction.reciprocal());
}","public void test4949() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.subtract(fraction1);
    fraction2.TWO_THIRDS.toString();
    fraction2.TWO_FIFTHS.percentageValue();
    fraction0.hashCode();
    Fraction fraction3 = fraction2.abs();
    fraction0.ONE_FIFTH.percentageValue();
    fraction0.hashCode();
    fraction2.getNumerator();
    fraction3.intValue();
    Fraction fraction4 = fraction3.abs();
    fraction3.ONE_HALF.add(1761);
    fraction1.abs();
    Fraction fraction5 = fraction4.negate();
    fraction5.THREE_FIFTHS.abs();
    fraction1.divide(fraction4);
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws IllegalArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test5050() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = new Fraction(5);
    Fraction fraction2 = fraction1.TWO_FIFTHS.subtract(fraction0);
    fraction2.TWO_THIRDS.toString();
    Fraction fraction3 = fraction0.ONE_FIFTH.multiply(fraction1);
    fraction3.ZERO.add(fraction1);
    Fraction fraction4 = new Fraction((-416), (-416));
    Fraction.getReducedFraction(5, 4);
    fraction0.compareTo(fraction4);
    fraction3.longValue();
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test5151() throws Throwable {
    Fraction.getReducedFraction((-1227), (-1442));
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public Fraction multiply(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);
    int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);
    return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test5252() throws Throwable {
    Fraction fraction0 = new Fraction(82, 84);
    fraction0.MINUS_ONE.multiply(5);
    Fraction fraction1 = fraction0.ONE_THIRD.divide(82);
    fraction1.ONE_QUARTER.toString();
    fraction0.getDenominator();
    fraction0.doubleValue();
    fraction0.multiply(fraction1);
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test5353() throws Throwable {
    Fraction fraction0 = new Fraction(1223, 1223);
    Fraction fraction1 = fraction0.ONE_HALF.reciprocal();
    Fraction fraction2 = fraction0.THREE_FIFTHS.multiply((-1341));
    Fraction fraction3 = fraction0.multiply((-1341));
    Fraction fraction4 = fraction0.ONE_THIRD.subtract(fraction3);
    fraction3.divide(15);
    Fraction fraction5 = fraction1.divide(15);
    fraction5.ONE_HALF.reciprocal();
    Fraction fraction6 = fraction2.multiply(1223);
    fraction6.TWO_QUARTERS.subtract((-1341));
    Fraction fraction7 = Fraction.ONE;
    fraction3.divide(fraction7);
    fraction0.getField();
    fraction2.toString();
    fraction4.compareTo(fraction3);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"public int getDenominator() {
    return denominator;
}","public void test5454() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.ONE_THIRD;
    fraction0.TWO.divide(fraction1);
    Fraction fraction2 = fraction0.divide((-2774));
    fraction0.doubleValue();
    fraction0.intValue();
    fraction2.negate();
    fraction0.getDenominator();
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public Fraction subtract(final int i) {
    return new Fraction(numerator - i * denominator, denominator);
}","public void test5555() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    fraction0.getDenominator();
    Fraction fraction1 = Fraction.FOUR_FIFTHS;
    Fraction fraction2 = fraction0.add(fraction1);
    Fraction fraction3 = fraction2.ONE_QUARTER.multiply(fraction0);
    Fraction fraction4 = Fraction.TWO_QUARTERS;
    fraction2.TWO_FIFTHS.divide(fraction4);
    Fraction fraction5 = fraction3.ONE_QUARTER.subtract(80);
    fraction0.floatValue();
    fraction2.toString();
    fraction5.floatValue();
    fraction0.subtract(80);
}","/**
 * Subtract an integer from the fraction.
 * @param i the <tt>integer</tt> to subtract.
 * @return this - i
 */"
"public Fraction multiply(final int i) {
    return new Fraction(numerator * i, denominator);
}","public void test5656() throws Throwable {
    Fraction fraction0 = new Fraction((-208.791664943), 959);
    Fraction fraction1 = fraction0.abs();
    fraction0.MINUS_ONE.subtract(fraction1);
    fraction0.getDenominator();
    fraction1.getField();
    fraction1.multiply(959);
}","/**
 * Multiply the fraction by an integer.
 * @param i the <tt>integer</tt> to multiply by.
 * @return this * i
 */"
"public Fraction reciprocal() {
    return new Fraction(denominator, numerator);
}","public void test5757() throws Throwable {
    Fraction fraction0 = new Fraction(4414.6, 4);
    Fraction fraction1 = fraction0.TWO_THIRDS.reciprocal();
    fraction0.longValue();
    fraction0.TWO_QUARTERS.add(4);
    fraction0.ONE_QUARTER.add(fraction1);
    fraction0.getField();
    fraction0.hashCode();
    fraction1.reciprocal();
}","/**
 * Return the multiplicative inverse of this fraction.
 * @return the reciprocal fraction
 */"
"public Fraction subtract(Fraction fraction) {
    return addSub(fraction, false);
}","public void test5858() throws Throwable {
    Fraction fraction0 = new Fraction(2.479773539153719E-5, 5);
    Object object0 = new Object();
    fraction0.equals(object0);
    fraction0.getField();
    fraction0.getField();
    Fraction fraction1 = new Fraction(5, 5, 165);
    fraction0.subtract(fraction1);
}","/**
 * <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p>
 *
 * @param fraction  the fraction to subtract, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator
 *   cannot be represented in an {@code int}.
 */"
"public double percentageValue() {
    return multiply(100).doubleValue();
}","public void test5959() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = Fraction.TWO_THIRDS;
    fraction1.TWO_QUARTERS.percentageValue();
    fraction1.ONE_FIFTH.subtract(fraction0);
    Fraction fraction2 = fraction0.subtract(fraction1);
    fraction2.ONE.add(3);
    fraction2.percentageValue();
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public Fraction add(final int i) {
    return new Fraction(numerator + i * denominator, denominator);
}","public void test6060() throws Throwable {
    Fraction fraction0 = new Fraction((-3056));
    fraction0.MINUS_ONE.add((-3056));
    fraction0.getField();
    Fraction fraction1 = Fraction.MINUS_ONE;
    fraction0.equals(fraction1);
    fraction1.multiply((-3056));
    fraction1.add(945);
}","/**
 * Add an integer to the fraction.
 * @param i the <tt>integer</tt> to add.
 * @return this + i
 */"
"public Fraction divide(final int i) {
    return new Fraction(numerator, denominator * i);
}","public void test6161() throws Throwable {
    Fraction fraction0 = new Fraction((-1066), (-1066));
    Fraction fraction1 = fraction0.divide(199);
    Fraction fraction2 = fraction0.add(fraction1);
    fraction2.ONE_THIRD.multiply(fraction1);
    Fraction fraction3 = Fraction.TWO;
    Fraction fraction4 = fraction3.subtract(fraction1);
    Fraction fraction5 = fraction4.divide(Integer.MIN_VALUE);
    Fraction fraction6 = fraction5.THREE_FIFTHS.add(fraction4);
    int int0 = 2936;
    // Undeclared exception!
    try {
        fraction6.divide(int0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 397/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Divide the fraction by an integer.
 * @param i the <tt>integer</tt> to divide by.
 * @return this * i
 */"
"public Fraction(int num, int den) {
    if (den == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den);
    }
    if (den < 0) {
        if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den);
        }
        num = -num;
        den = -den;
    }
    // reduce numerator and denominator by greatest common denominator.
    final int d = ArithmeticUtils.gcd(num, den);
    if (d > 1) {
        num /= d;
        den /= d;
    }
    // move sign to numerator.
    if (den < 0) {
        num = -num;
        den = -den;
    }
    this.numerator = num;
    this.denominator = den;
}","public void test6262() throws Throwable {
    int int0 = 1;
    int int1 = 0;
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(1, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.
 * @param num the numerator.
 * @param den the denominator.
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test6363() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = Fraction.ONE;
    fraction0.TWO_FIFTHS.subtract(fraction1);
    Fraction fraction2 = fraction0.negate();
    fraction2.doubleValue();
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public Fraction reciprocal() {
    return new Fraction(denominator, numerator);
}","public void test6464() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    Fraction fraction1 = new Fraction(1.1974215507507324, 1.1974215507507324, 4);
    Fraction fraction2 = fraction0.THREE_QUARTERS.subtract(fraction1);
    fraction0.hashCode();
    fraction0.hashCode();
    Fraction fraction3 = fraction1.subtract(fraction2);
    fraction3.TWO_THIRDS.getField();
    fraction0.equals(fraction2);
    fraction2.reciprocal();
}","/**
 * Return the multiplicative inverse of this fraction.
 * @return the reciprocal fraction
 */"
"public Fraction(double value, double epsilon, int maxIterations) throws FractionConversionException {
    this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}","public void test6565() throws Throwable {
    Fraction fraction0 = new Fraction((-2701.0064), (-581.631083304973), (-2568));
}","/**
 * Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 * @param value the double value to convert to a fraction.
 * @param epsilon maximum error allowed.  The resulting fraction is within
 *        {@code epsilon} of {@code value}, in absolute terms.
 * @param maxIterations maximum number of convergents
 * @throws FractionConversionException if the continued fraction failed to
 *         converge.
 */"
"public Fraction reciprocal() {
    return new Fraction(denominator, numerator);
}","public void test6666() throws Throwable {
    Fraction fraction0 = Fraction.TWO_FIFTHS;
    Fraction fraction1 = fraction0.TWO_QUARTERS.add((-1059));
    Fraction fraction2 = fraction1.multiply((Fraction) null);
    fraction1.ONE_THIRD.toString();
    // Undeclared exception!
    try {
        fraction2.THREE_FIFTHS.reciprocal();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Return the multiplicative inverse of this fraction.
 * @return the reciprocal fraction
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test6868() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.MINUS_ONE;
    fraction0.compareTo(fraction1);
    Fraction fraction2 = fraction1.divide(fraction0);
    fraction0.ONE.getField();
    Fraction fraction3 = fraction0.ONE_FIFTH.multiply(fraction1);
    Fraction fraction4 = fraction3.ZERO.abs();
    fraction2.longValue();
    fraction0.floatValue();
    fraction4.floatValue();
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test6969() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    Fraction fraction1 = new Fraction(0.0);
    fraction0.THREE_QUARTERS.multiply(fraction1);
    fraction0.TWO_FIFTHS.negate();
    fraction0.doubleValue();
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public Fraction add(final int i) {
    return new Fraction(numerator + i * denominator, denominator);
}","public void test7070() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    fraction0.ONE_QUARTER.toString();
    Fraction fraction1 = fraction0.negate();
    fraction1.compareTo(fraction0);
    fraction0.getDenominator();
    fraction1.add(193);
}","/**
 * Add an integer to the fraction.
 * @param i the <tt>integer</tt> to add.
 * @return this + i
 */"
"@Override
public int intValue() {
    return (int) doubleValue();
}","public void test7171() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.THREE_FIFTHS.divide(1668);
    fraction0.doubleValue();
    fraction0.longValue();
    Fraction fraction2 = fraction1.divide(1668);
    Fraction fraction3 = fraction1.divide(fraction2);
    Fraction fraction4 = fraction3.abs();
    fraction4.TWO_THIRDS.add(fraction1);
    fraction4.ZERO.multiply(fraction0);
    fraction3.percentageValue();
    Fraction fraction5 = fraction0.add(1668);
    Fraction fraction6 = fraction5.reciprocal();
    Fraction fraction7 = fraction0.divide(1668);
    fraction6.divide(fraction7);
    fraction1.intValue();
}","/**
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"@Override
public String toString() {
    String str = null;
    if (denominator == 1) {
        str = Integer.toString(numerator);
    } else if (numerator == 0) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test7272() throws Throwable {
    Fraction fraction0 = new Fraction(577.784);
    Fraction fraction1 = fraction0.MINUS_ONE.negate();
    Fraction fraction2 = Fraction.ONE_FIFTH;
    Fraction fraction3 = fraction0.ONE_QUARTER.divide(fraction2);
    int int0 = 1317;
    Fraction fraction4 = fraction1.TWO_THIRDS.multiply(1317);
    fraction4.TWO.add(fraction2);
    Fraction fraction5 = fraction0.FOUR_FIFTHS.abs();
    fraction5.MINUS_ONE.divide(fraction1);
    fraction3.ZERO.reciprocal();
    // Undeclared exception!
    try {
        fraction5.TWO.toString();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>
 * Returns the {@code String} representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"public Fraction abs() {
    Fraction ret;
    if (numerator >= 0) {
        ret = this;
    } else {
        ret = negate();
    }
    return ret;
}","public void test7373() throws Throwable {
    Fraction fraction0 = Fraction.TWO_FIFTHS;
    fraction0.THREE_QUARTERS.subtract((Fraction) null);
    // Undeclared exception!
    try {
        fraction0.abs();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Returns the absolute value of this fraction.
 * @return the absolute value.
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test7474() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    Fraction fraction1 = null;
    // Undeclared exception!
    try {
        fraction0.ZERO.add((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction multiply(final int i) {
    return new Fraction(numerator * i, denominator);
}","public void test7575() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.FOUR_FIFTHS.add(2);
    fraction0.FOUR_FIFTHS.percentageValue();
    fraction0.FOUR_FIFTHS.percentageValue();
    fraction0.toString();
    Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(3971);
    fraction2.ONE_FIFTH.subtract(3814);
    fraction1.getDenominator();
    Fraction fraction3 = Fraction.THREE_QUARTERS;
    Fraction fraction4 = fraction0.ONE_HALF.abs();
    fraction4.TWO_THIRDS.subtract(fraction0);
    fraction4.subtract(2);
    Fraction fraction5 = fraction0.divide(fraction3);
    fraction0.floatValue();
    fraction5.toString();
    fraction5.floatValue();
    Fraction fraction6 = Fraction.THREE_FIFTHS;
    fraction3.equals(fraction6);
    fraction6.TWO_FIFTHS.abs();
    fraction6.intValue();
    fraction6.floatValue();
    fraction0.multiply(31);
}","/**
 * Multiply the fraction by an integer.
 * @param i the <tt>integer</tt> to multiply by.
 * @return this * i
 */"
"public Fraction subtract(Fraction fraction) {
    return addSub(fraction, false);
}","public void test7676() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(1, 1);
    fraction0.getNumerator();
    Fraction fraction1 = fraction0.add((-351));
    Fraction fraction2 = fraction1.ZERO.divide(fraction0);
    Fraction fraction3 = fraction1.ONE_FIFTH.add(1);
    Fraction fraction4 = fraction3.THREE_QUARTERS.multiply(fraction2);
    Fraction fraction5 = fraction1.ONE_QUARTER.negate();
    fraction5.TWO_THIRDS.percentageValue();
    fraction1.doubleValue();
    Fraction fraction6 = fraction0.add((-3465));
    fraction6.TWO_THIRDS.divide(99);
    Fraction fraction7 = fraction2.subtract(1);
    fraction7.ONE_HALF.multiply(31);
    fraction1.getField();
    fraction7.ONE_QUARTER.divide(201);
    fraction7.add(1);
    fraction6.getDenominator();
    fraction5.subtract(1);
    Fraction fraction8 = fraction7.negate();
    fraction8.floatValue();
    fraction5.compareTo(fraction7);
    fraction4.subtract(fraction1);
}","/**
 * <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p>
 *
 * @param fraction  the fraction to subtract, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator
 *   cannot be represented in an {@code int}.
 */"
"public Fraction divide(final int i) {
    return new Fraction(numerator, denominator * i);
}","public void test7777() throws Throwable {
    int int0 = (-3077);
    Fraction fraction0 = new Fraction(2219.5, (-3077));
    fraction0.ZERO.toString();
    int int1 = fraction0.compareTo((Fraction) null);
    Fraction fraction1 = fraction0.multiply(int1);
    // Undeclared exception!
    try {
        fraction1.divide(int1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Divide the fraction by an integer.
 * @param i the <tt>integer</tt> to divide by.
 * @return this * i
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test7878() throws Throwable {
    Fraction fraction0 = new Fraction((-1.0));
    fraction0.ONE_HALF.percentageValue();
    Fraction fraction1 = fraction0.add(4312);
    fraction1.hashCode();
    fraction1.getNumerator();
    fraction1.floatValue();
    Fraction fraction2 = Fraction.getReducedFraction(3320, 3320);
    fraction2.TWO_QUARTERS.multiply(4312);
    fraction0.getField();
    Fraction fraction3 = Fraction.getReducedFraction(4312, 3320);
    fraction3.ONE_FIFTH.abs();
    fraction0.intValue();
    fraction2.negate();
    Fraction fraction4 = new Fraction(0.0, 4311);
    fraction1.equals(fraction4);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test7979() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = fraction0.multiply(2275);
    fraction1.hashCode();
    Fraction fraction2 = fraction0.TWO_FIFTHS.multiply(fraction1);
    fraction2.ZERO.percentageValue();
    fraction0.add(2);
    fraction0.divide(fraction1);
    Fraction.getReducedFraction(2, 0);
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test8080() throws Throwable {
    int int0 = (-17);
    int int1 = 0;
    // Undeclared exception!
    try {
        Fraction.getReducedFraction((-17), 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction -17/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public double percentageValue() {
    return multiply(100).doubleValue();
}","public void test8181() throws Throwable {
    Fraction fraction0 = Fraction.TWO_FIFTHS;
    Fraction fraction1 = Fraction.MINUS_ONE;
    fraction1.ONE.percentageValue();
    Fraction fraction2 = fraction0.TWO_THIRDS.divide(fraction1);
    Fraction fraction3 = fraction2.ONE_THIRD.divide(fraction1);
    Fraction fraction4 = fraction3.ONE_FIFTH.multiply(fraction1);
    Fraction.getReducedFraction(31, 31);
    fraction4.ZERO.divide(54);
    fraction0.getDenominator();
    fraction0.percentageValue();
    fraction0.percentageValue();
    fraction2.reciprocal();
    Fraction.getReducedFraction(5, (-1440));
    fraction3.percentageValue();
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public Fraction multiply(final int i) {
    return new Fraction(numerator * i, denominator);
}","public void test8383() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.multiply(1);
    Fraction fraction2 = fraction1.TWO_QUARTERS.multiply(fraction0);
    Fraction fraction3 = fraction0.reciprocal();
    Fraction fraction4 = Fraction.getReducedFraction(1, 1);
    Fraction fraction5 = fraction4.TWO_QUARTERS.multiply((-80));
    fraction3.floatValue();
    Fraction fraction6 = fraction3.add(0);
    int int0 = 1;
    int int1 = 8;
    fraction6.MINUS_ONE.multiply(3);
    Fraction fraction7 = Fraction.getReducedFraction(1, 8);
    fraction7.THREE_QUARTERS.add(1349);
    fraction0.percentageValue();
    Fraction fraction8 = fraction3.add(fraction6);
    Fraction fraction9 = fraction8.ZERO.negate();
    Fraction fraction10 = fraction9.TWO_FIFTHS.divide(fraction5);
    fraction10.FOUR_FIFTHS.toString();
    Fraction fraction11 = fraction2.divide((Fraction) null);
    Fraction fraction12 = fraction11.divide(fraction9);
    fraction1.getNumerator();
    fraction4.compareTo(fraction8);
    Fraction fraction13 = fraction12.divide(fraction9);
    fraction1.floatValue();
    // Undeclared exception!
    try {
        fraction13.multiply(int0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Multiply the fraction by an integer.
 * @param i the <tt>integer</tt> to multiply by.
 * @return this * i
 */"
"@Override
public String toString() {
    String str = null;
    if (denominator == 1) {
        str = Integer.toString(numerator);
    } else if (numerator == 0) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test8484() throws Throwable {
    int int0 = 275;
    Fraction fraction0 = new Fraction(275);
    fraction0.ZERO.subtract((Fraction) null);
    // Undeclared exception!
    try {
        fraction0.THREE_QUARTERS.toString();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>
 * Returns the {@code String} representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"public int getDenominator() {
    return denominator;
}","public void test8585() throws Throwable {
    Fraction fraction0 = new Fraction(0.0);
    Fraction fraction1 = fraction0.add((-1266));
    Fraction fraction2 = Fraction.getReducedFraction((-1037), (-1037));
    Fraction fraction3 = fraction1.TWO_QUARTERS.add(fraction0);
    Fraction fraction4 = fraction3.TWO.add(1);
    fraction1.intValue();
    fraction0.doubleValue();
    Fraction fraction5 = fraction1.divide((-1266));
    fraction3.TWO_FIFTHS.toString();
    fraction5.ONE.subtract(fraction1);
    fraction4.floatValue();
    fraction2.divide((-1266));
    fraction0.getDenominator();
    fraction3.divide((-1037));
    fraction5.compareTo(fraction3);
    fraction0.getDenominator();
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public Fraction multiply(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);
    int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);
    return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test8686() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = Fraction.TWO;
    Fraction fraction2 = fraction0.add(fraction1);
    int int0 = 2236;
    Fraction fraction3 = Fraction.getReducedFraction(2236, (-2329));
    fraction0.getNumerator();
    Fraction fraction4 = new Fraction(2);
    Fraction fraction5 = fraction0.FOUR_FIFTHS.divide(fraction4);
    fraction3.TWO_FIFTHS.multiply(fraction5);
    Fraction fraction6 = fraction5.ONE_THIRD.add(fraction2);
    fraction0.hashCode();
    Fraction fraction7 = fraction0.subtract(613);
    fraction0.compareTo(fraction1);
    fraction0.getField();
    fraction5.equals(fraction4);
    Fraction fraction8 = fraction0.subtract(fraction7);
    fraction8.ONE_FIFTH.percentageValue();
    fraction7.MINUS_ONE.divide(0);
    fraction7.abs();
    // Undeclared exception!
    try {
        fraction3.multiply(fraction6);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction -1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test8787() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = fraction0.ONE_FIFTH.reciprocal();
    fraction1.FOUR_FIFTHS.abs();
    Object object0 = new Object();
    fraction0.equals(object0);
    fraction0.ZERO.toString();
    fraction0.floatValue();
    Fraction fraction2 = Fraction.MINUS_ONE;
    fraction0.FOUR_FIFTHS.divide(fraction2);
    Fraction fraction3 = Fraction.FOUR_FIFTHS;
    int int0 = Integer.MAX_VALUE;
    Fraction fraction4 = Fraction.getReducedFraction((-3869), Integer.MAX_VALUE);
    Fraction fraction5 = fraction4.TWO.negate();
    Fraction fraction6 = Fraction.TWO;
    fraction5.MINUS_ONE.multiply(fraction6);
    fraction5.ONE_THIRD.negate();
    Fraction fraction7 = fraction3.ONE_FIFTH.divide(Integer.MAX_VALUE);
    fraction7.THREE_QUARTERS.add(fraction4);
    // Undeclared exception!
    try {
        fraction0.compareTo(fraction3);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // arithmetic exception
        //
        verifyException(""org.apache.commons.math3.util.ArithmeticUtils"", e);
    }
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test8888() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    fraction0.equals(""Me|<[@o.O]r,Iz"");
    Fraction fraction1 = fraction0.subtract(754);
    Fraction fraction2 = fraction1.reciprocal();
    fraction2.MINUS_ONE.percentageValue();
    Fraction fraction3 = fraction1.ONE_QUARTER.subtract(2379);
    fraction3.FOUR_FIFTHS.add(2379);
    fraction0.FOUR_FIFTHS.abs();
    Fraction fraction4 = fraction0.negate();
    fraction4.ONE.toString();
    Fraction fraction5 = fraction0.negate();
    Fraction fraction6 = fraction5.THREE_FIFTHS.add(fraction2);
    fraction6.TWO_FIFTHS.abs();
    fraction6.TWO_FIFTHS.divide(fraction3);
    fraction5.negate();
    Fraction.getReducedFraction(2379, 2379);
    fraction2.subtract(754);
    fraction5.equals(fraction4);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public Fraction subtract(final int i) {
    return new Fraction(numerator - i * denominator, denominator);
}","public void test8989() throws Throwable {
    int int0 = 3;
    Fraction fraction0 = new Fraction((-378), 3);
    Fraction fraction1 = Fraction.getReducedFraction(584703393, 3);
    Object object0 = new Object();
    Fraction.getReducedFraction(584703393, (-378));
    fraction1.ZERO.abs();
    Fraction fraction2 = Fraction.getReducedFraction(3, 3);
    fraction2.reciprocal();
    fraction0.equals(object0);
    Fraction fraction3 = fraction0.multiply(fraction1);
    Fraction fraction4 = fraction3.subtract(int0);
    // Undeclared exception!
    try {
        fraction4.subtract(int0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // arithmetic exception
        //
        verifyException(""org.apache.commons.math3.util.ArithmeticUtils"", e);
    }
}","/**
 * Subtract an integer from the fraction.
 * @param i the <tt>integer</tt> to subtract.
 * @return this - i
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test9090() throws Throwable {
    Fraction fraction0 = new Fraction(244);
    Fraction fraction1 = Fraction.TWO_FIFTHS;
    Fraction fraction2 = fraction0.TWO.subtract(160);
    Fraction fraction3 = fraction1.TWO_QUARTERS.add(fraction2);
    fraction0.MINUS_ONE.getField();
    Fraction fraction4 = fraction2.ZERO.subtract(201);
    fraction1.THREE_QUARTERS.add(fraction0);
    Fraction fraction5 = fraction1.ONE.add(54);
    fraction5.ONE_THIRD.getField();
    fraction0.compareTo(fraction1);
    fraction0.percentageValue();
    fraction4.ONE_FIFTH.abs();
    Fraction fraction6 = new Fraction((-47.374153064));
    Fraction fraction7 = fraction2.ONE_FIFTH.add(1);
    fraction7.TWO_THIRDS.negate();
    fraction7.TWO_THIRDS.getField();
    fraction7.ONE.percentageValue();
    fraction4.multiply(fraction6);
    fraction5.THREE_QUARTERS.divide(fraction6);
    Fraction fraction8 = fraction2.THREE_QUARTERS.abs();
    Fraction fraction9 = fraction5.abs();
    fraction4.hashCode();
    fraction3.doubleValue();
    fraction0.add(fraction8);
    fraction0.getDenominator();
    fraction6.subtract(1);
    fraction0.add(fraction3);
    fraction0.toString();
    fraction9.equals(fraction5);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
