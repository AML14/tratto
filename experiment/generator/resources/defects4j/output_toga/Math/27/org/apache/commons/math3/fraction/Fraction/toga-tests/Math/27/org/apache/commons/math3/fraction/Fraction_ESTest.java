/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 11:57:42 GMT 2023
 */
package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        int int0 = 2;
        Fraction fraction0 = new Fraction(14.101419448852539, 2);
        fraction0.doubleValue();
        Fraction fraction1 = Fraction.ZERO;
        fraction0.divide(fraction1);
        fraction1.divide(fraction0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1577, (-566));
        Fraction fraction1 = Fraction.ONE_FIFTH;
        Fraction fraction2 = fraction1.ONE_FIFTH.add(Integer.MAX_VALUE);
        fraction1.negate();
        Fraction fraction3 = Fraction.TWO_FIFTHS;
        fraction1.toString();
        fraction2.TWO_QUARTERS.add(2);
        Fraction fraction4 = Fraction.ONE_QUARTER;
        Fraction fraction5 = fraction2.TWO.negate();
        Fraction fraction6 = fraction5.ZERO.add(fraction4);
        fraction6.ZERO.subtract(1577);
        Fraction fraction7 = Fraction.ONE_THIRD;
        fraction6.THREE_FIFTHS.subtract(31);
        fraction6.ONE_FIFTH.getField();
        Fraction fraction8 = Fraction.getReducedFraction(1577, 1);
        Fraction fraction9 = fraction2.TWO_FIFTHS.multiply(fraction8);
        Fraction fraction10 = fraction4.multiply((-566));
        Fraction.getReducedFraction(1577, 2);
        fraction9.toString();
        fraction10.TWO_FIFTHS.multiply((Fraction) null);
        fraction0.negate();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        fraction0.equals("Me|<[@o.O]r,Iz");
        Fraction fraction1 = fraction0.subtract(753);
        Fraction fraction2 = fraction1.reciprocal();
        int int0 = 2379;
        fraction2.MINUS_ONE.percentageValue();
        Fraction fraction3 = fraction1.ONE_QUARTER.subtract(2379);
        fraction3.FOUR_FIFTHS.add(2379);
        fraction0.negate();
        Fraction fraction4 = new Fraction((double) 2379, 753);
        fraction4.TWO.toString();
        fraction4.THREE_FIFTHS.add(fraction2);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        Fraction fraction1 = Fraction.TWO;
        Fraction fraction2 = fraction0.add(fraction1);
        int int0 = 2236;
        Fraction fraction3 = Fraction.getReducedFraction(2236, (-2329));
        fraction0.getNumerator();
        Fraction fraction4 = new Fraction(2);
        Fraction fraction5 = fraction0.FOUR_FIFTHS.divide(fraction4);
        Fraction fraction6 = fraction3.TWO_FIFTHS.multiply(fraction5);
        fraction6.add(fraction5);
        Fraction fraction7 = fraction5.ONE_THIRD.add(fraction2);
        fraction0.hashCode();
        Fraction fraction8 = fraction0.subtract(613);
        fraction0.compareTo(fraction1);
        fraction0.getField();
        fraction5.equals(fraction4);
        Fraction fraction9 = fraction0.subtract(fraction8);
        fraction9.ONE_FIFTH.percentageValue();
        fraction8.MINUS_ONE.divide(0);
        fraction8.abs();
        fraction3.multiply(fraction7);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        fraction0.getField();
        fraction0.MINUS_ONE.getField();
        Fraction fraction1 = Fraction.MINUS_ONE;
        fraction1.ZERO.toString();
        Fraction fraction2 = fraction1.ONE_HALF.subtract(3);
        Fraction fraction3 = fraction0.TWO_QUARTERS.reciprocal();
        Fraction fraction4 = Fraction.getReducedFraction(3, 3);
        fraction0.compareTo(fraction1);
        fraction0.longValue();
        Fraction fraction5 = fraction3.TWO.divide(fraction2);
        Fraction fraction6 = fraction0.multiply(1);
        fraction6.negate();
        Fraction.getReducedFraction(1, 3);
        Fraction fraction7 = fraction5.multiply(3);
        fraction0.getNumerator();
        fraction6.getField();
        Fraction fraction8 = fraction3.divide(fraction0);
        fraction8.THREE_FIFTHS.percentageValue();
        Fraction fraction9 = fraction7.divide(2);
        Fraction fraction10 = fraction7.MINUS_ONE.subtract(3);
        fraction9.TWO_THIRDS.reciprocal();
        fraction0.ONE_FIFTH.multiply(fraction7);
        fraction2.getNumerator();
        fraction0.percentageValue();
        Fraction.getReducedFraction((-503), 3);
        Fraction fraction11 = fraction4.abs();
        Object object0 = new Object();
        fraction11.equals(object0);
        fraction3.floatValue();
        fraction10.toString();
        fraction6.reciprocal();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Fraction fraction0 = new Fraction(244);
        Fraction fraction1 = Fraction.TWO_FIFTHS;
        Fraction fraction2 = fraction0.TWO.subtract(160);
        Fraction fraction3 = fraction1.TWO_QUARTERS.add(fraction2);
        fraction0.MINUS_ONE.getField();
        Fraction fraction4 = fraction2.ZERO.subtract(201);
        fraction1.THREE_QUARTERS.add(fraction0);
        Fraction fraction5 = fraction1.ONE.add(54);
        fraction5.ONE_THIRD.getField();
        fraction0.compareTo(fraction1);
        fraction0.percentageValue();
        fraction4.ONE_FIFTH.abs();
        Fraction fraction6 = new Fraction((-47.374153064));
        Fraction fraction7 = fraction2.ONE_FIFTH.add(1);
        fraction7.TWO_THIRDS.getField();
        fraction7.ONE.percentageValue();
        fraction4.multiply(fraction6);
        fraction5.THREE_QUARTERS.divide(fraction6);
        Fraction fraction8 = fraction2.THREE_QUARTERS.abs();
        fraction5.abs();
        fraction4.hashCode();
        fraction3.doubleValue();
        fraction0.add(fraction8);
        fraction0.getDenominator();
        fraction6.subtract(1);
        fraction0.add(fraction3);
        fraction0.toString();
        fraction5.add(1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        int int0 = 1475;
        Fraction fraction0 = Fraction.getReducedFraction(0, 1475);
        Fraction fraction1 = Fraction.getReducedFraction((-3096), (-3096));
        fraction1.ONE.add(fraction0);
        fraction1.divide(2058);
        fraction1.subtract(5);
        Fraction fraction2 = Fraction.getReducedFraction((-131), 0);
        int int1 = (-238);
        Fraction fraction3 = Fraction.getReducedFraction(int1, int0);
        fraction2.compareTo(fraction3);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = fraction0.THREE_QUARTERS.abs();
        Fraction fraction2 = new Fraction(2082.036, 5);
        Fraction fraction3 = fraction2.ONE_FIFTH.negate();
        Fraction fraction4 = fraction2.TWO_FIFTHS.subtract(fraction3);
        fraction0.compareTo(fraction2);
        Fraction fraction5 = fraction0.multiply(fraction2);
        fraction1.TWO_THIRDS.toString();
        Fraction fraction6 = fraction0.subtract(fraction5);
        Fraction fraction7 = fraction2.subtract(fraction5);
        fraction7.TWO.divide(fraction1);
        Fraction.getReducedFraction(5, 5);
        Fraction fraction8 = Fraction.ONE_HALF;
        fraction8.THREE_FIFTHS.percentageValue();
        fraction1.divide(fraction8);
        Fraction fraction9 = Fraction.THREE_QUARTERS;
        Fraction fraction10 = fraction7.ONE_QUARTER.divide(5);
        fraction10.THREE_FIFTHS.percentageValue();
        Fraction fraction11 = fraction3.divide((-1));
        Fraction fraction12 = fraction11.TWO_THIRDS.multiply(fraction4);
        Fraction fraction13 = fraction12.FOUR_FIFTHS.negate();
        Fraction fraction14 = fraction11.FOUR_FIFTHS.reciprocal();
        Fraction fraction15 = fraction14.TWO_QUARTERS.divide(fraction0);
        fraction0.FOUR_FIFTHS.add(5);
        fraction0.TWO_FIFTHS.add(fraction3);
        fraction7.toString();
        fraction8.getNumerator();
        fraction15.floatValue();
        fraction7.subtract(fraction0);
        fraction3.floatValue();
        fraction2.multiply(5);
        fraction13.divide(29);
        fraction2.intValue();
        fraction8.multiply(fraction6);
        fraction7.divide((-1));
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        int int0 = 37;
        Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(37);
        fraction1.ZERO.multiply(fraction0);
        fraction1.ONE.negate();
        fraction0.TWO_FIFTHS.abs();
        fraction0.ONE_FIFTH.add(fraction0);
        fraction0.reciprocal();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Fraction fraction0 = new Fraction(55);
        Fraction fraction1 = fraction0.ONE_THIRD.add(55);
        fraction0.getField();
        fraction0.ONE_FIFTH.getField();
        fraction1.THREE_QUARTERS.percentageValue();
        Fraction fraction2 = fraction0.subtract(592);
        fraction2.equals(fraction1);
        fraction2.compareTo(fraction0);
        Fraction fraction3 = fraction2.ZERO.divide(592);
        Fraction fraction4 = fraction2.add((-1));
        Fraction fraction5 = Fraction.ONE_THIRD;
        Fraction.getReducedFraction(34, (-1));
        fraction1.equals(fraction5);
        Fraction fraction6 = fraction2.abs();
        fraction6.THREE_FIFTHS.percentageValue();
        fraction4.multiply(fraction5);
        fraction0.abs();
        Fraction fraction7 = fraction5.subtract(2446);
        fraction3.add(fraction7);
        Object object0 = new Object();
        fraction6.equals(object0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Fraction fraction0 = new Fraction(0.0, 7.734335768410164E-14, 1879048192);
        Fraction fraction1 = fraction0.add((-2290));
        Fraction fraction2 = fraction1.TWO_THIRDS.abs();
        fraction0.getDenominator();
        fraction1.getDenominator();
        Fraction fraction3 = fraction1.subtract(fraction2);
        fraction2.getField();
        Fraction fraction4 = Fraction.TWO_QUARTERS;
        Fraction fraction5 = fraction0.subtract(fraction4);
        fraction0.TWO_FIFTHS.multiply(fraction4);
        Fraction fraction6 = fraction0.TWO_FIFTHS.negate();
        Fraction fraction7 = fraction1.divide((-2147483646));
        Fraction fraction8 = fraction7.ONE_THIRD.multiply(fraction2);
        fraction3.getField();
        Fraction fraction9 = fraction6.add(fraction5);
        fraction9.TWO_THIRDS.multiply((-2147483646));
        fraction6.abs();
        Fraction fraction10 = fraction4.reciprocal();
        fraction10.getDenominator();
        Fraction fraction11 = fraction4.subtract(fraction6);
        fraction3.multiply(fraction10);
        fraction9.multiply(1);
        Fraction fraction12 = fraction11.subtract(fraction8);
        fraction5.compareTo(fraction0);
        fraction8.compareTo(fraction0);
        Fraction fraction13 = Fraction.ONE_HALF;
        fraction5.add(fraction13);
        fraction12.subtract((-90));
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        fraction0.ONE_THIRD.getField();
        fraction0.getField();
        Fraction fraction1 = null;
        fraction0.ONE_QUARTER.negate();
        fraction0.subtract((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        int int0 = (-2038);
        Fraction fraction0 = new Fraction((-1886.8021), (-1.0), (-2038));
        Fraction fraction1 = fraction0.ONE_QUARTER.abs();
        fraction1.percentageValue();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        int int0 = (-1137);
        Fraction fraction0 = new Fraction(0.0, (-1137));
        Fraction fraction1 = null;
        fraction1 = Fraction.ONE_QUARTER;
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
        Fraction fraction2 = fraction1.ONE_HALF.divide((-541));
        Fraction.getReducedFraction((-541), 25);
        fraction2.THREE_QUARTERS.multiply(fraction0);
        fraction0.getField();
        fraction0.getNumerator();
        fraction1.compareTo(fraction0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        fraction0.THREE_FIFTHS.percentageValue();
        fraction0.abs();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = fraction0.abs();
        Fraction fraction2 = fraction1.TWO_FIFTHS.divide(714);
        fraction2.abs();
        fraction1.getField();
        fraction1.subtract(409);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        fraction0.equals("np&|kvzC");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = Fraction.TWO;
        fraction0.add(fraction1);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Fraction fraction0 = new Fraction(0.0036, (-561));
        fraction0.add((-561));
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction1.TWO_THIRDS.divide(1);
        Fraction fraction3 = fraction2.TWO.subtract(fraction0);
        fraction3.reciprocal();
        fraction1.add(fraction0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = Fraction.ONE_QUARTER;
        fraction0.divide(fraction1);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Fraction fraction0 = new Fraction(4);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        fraction0.doubleValue();
        fraction0.floatValue();
        Fraction fraction1 = Fraction.ZERO;
        fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Fraction fraction0 = new Fraction(1.0E-5);
        fraction0.THREE_FIFTHS.getField();
        Fraction fraction1 = fraction0.divide((-379));
        fraction1.multiply((-379));
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Fraction fraction0 = new Fraction(402, 402);
        Fraction fraction1 = fraction0.reciprocal();
        fraction0.compareTo(fraction1);
        fraction0.toString();
        fraction1.getNumerator();
        fraction0.floatValue();
        fraction1.getNumerator();
        fraction1.subtract(1);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Fraction fraction0 = new Fraction(292, 1814);
        fraction0.longValue();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        fraction0.hashCode();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Fraction fraction0 = new Fraction(0.0);
        Fraction fraction1 = Fraction.ZERO;
        fraction0.TWO_THIRDS.subtract(fraction1);
        Fraction fraction2 = Fraction.TWO;
        Fraction fraction3 = fraction0.add(fraction2);
        fraction1.divide(fraction3);
        fraction0.toString();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        fraction0.intValue();
        Fraction fraction1 = Fraction.TWO_QUARTERS;
        Fraction fraction2 = fraction0.subtract(fraction1);
        fraction2.THREE_QUARTERS.abs();
        Fraction.getReducedFraction(0, 38);
        Fraction fraction3 = Fraction.TWO_QUARTERS;
        fraction0.compareTo(fraction3);
        Fraction fraction4 = fraction1.add(fraction2);
        Fraction fraction5 = fraction0.subtract(1);
        Fraction fraction6 = fraction5.THREE_QUARTERS.multiply(38);
        Fraction fraction7 = fraction5.MINUS_ONE.reciprocal();
        Fraction fraction8 = fraction7.THREE_QUARTERS.negate();
        fraction8.TWO_QUARTERS.subtract(fraction0);
        fraction7.ONE_HALF.toString();
        fraction3.getField();
        fraction2.subtract(323);
        fraction4.add(fraction6);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Fraction fraction0 = new Fraction((-1.0), (-888.2572836470878), (-1906));
        int int0 = (-1487);
        fraction0.divide(int0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
        Fraction fraction1 = Fraction.MINUS_ONE;
        fraction0.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = Fraction.TWO_QUARTERS;
        fraction1.THREE_FIFTHS.percentageValue();
        fraction0.divide(fraction1);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = Fraction.getReducedFraction(3, (-1));
        fraction0.THREE_QUARTERS.multiply(fraction1);
        fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = Fraction.FOUR_FIFTHS;
        fraction0.divide(1842);
        fraction0.ZERO.add(1842);
        fraction0.TWO_THIRDS.divide(fraction1);
        fraction0.longValue();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Fraction fraction0 = new Fraction(0);
        Fraction fraction1 = Fraction.MINUS_ONE;
        fraction0.TWO_QUARTERS.divide(fraction1);
        fraction0.MINUS_ONE.add(0);
        Object object0 = new Object();
        fraction0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2464), (-2464));
        fraction0.MINUS_ONE.negate();
        fraction0.hashCode();
        fraction0.equals("\"");
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2317), Integer.MAX_VALUE);
        Fraction fraction1 = Fraction.TWO_QUARTERS;
        fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Fraction fraction0 = new Fraction(0.0);
        Fraction fraction1 = fraction0.TWO_FIFTHS.divide(2);
        fraction1.ONE_HALF.add(2);
        Object object0 = new Object();
        fraction0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = Fraction.TWO;
        fraction0.multiply(fraction1);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        fraction0.floatValue();
        Fraction fraction1 = Fraction.TWO;
        fraction0.multiply(fraction1);
        fraction0.subtract((-1082));
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-2580), 63);
        fraction0.TWO_QUARTERS.toString();
        Fraction fraction1 = Fraction.ONE;
        fraction0.add(fraction1);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        fraction0.ONE_HALF.abs();
        Fraction fraction1 = fraction0.ONE_HALF.subtract((-277));
        fraction0.ONE_THIRD.reciprocal();
        fraction0.doubleValue();
        fraction0.hashCode();
        Fraction fraction2 = fraction1.subtract(fraction0);
        Fraction fraction3 = fraction2.ONE_THIRD.multiply(fraction0);
        fraction1.ONE.abs();
        fraction3.THREE_QUARTERS.multiply(fraction2);
        fraction0.compareTo(fraction2);
        fraction1.add((-277));
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.divide((-783));
        fraction0.TWO_THIRDS.multiply(2);
        fraction1.TWO_THIRDS.percentageValue();
        fraction0.divide(fraction1);
        fraction1.longValue();
        fraction0.hashCode();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        fraction0.TWO_QUARTERS.multiply(984);
        fraction0.negate();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Fraction fraction0 = new Fraction(1030, 179);
        Fraction fraction1 = Fraction.THREE_FIFTHS;
        fraction1.ONE.subtract(fraction0);
        fraction0.MINUS_ONE.multiply(fraction1);
        Fraction.getReducedFraction(4, 1030);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Fraction fraction0 = new Fraction(4061.2371117112, 4061.2371117112, 8388607);
        fraction0.MINUS_ONE.add(8388607);
        Fraction fraction1 = Fraction.ONE_THIRD;
        fraction0.ONE.multiply(fraction1);
        fraction0.divide(2);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        Fraction fraction0 = new Fraction(2069);
        fraction0.ONE_THIRD.subtract(2069);
        Fraction fraction1 = fraction0.multiply(2069);
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = fraction0.add(fraction2);
        Fraction fraction4 = fraction3.FOUR_FIFTHS.abs();
        fraction2.getDenominator();
        fraction2.floatValue();
        fraction3.divide(4);
        fraction0.MINUS_ONE.subtract(fraction4);
        fraction1.divide(297);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Fraction fraction0 = new Fraction((-1454.18), 2);
        fraction0.ONE.getField();
        Fraction fraction1 = fraction0.subtract(2);
        Fraction fraction2 = fraction1.THREE_FIFTHS.multiply(0);
        fraction0.negate();
        fraction2.TWO_THIRDS.getField();
        fraction1.percentageValue();
        fraction2.hashCode();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = Fraction.ONE;
        Fraction fraction2 = fraction0.ONE_THIRD.subtract(fraction1);
        fraction2.TWO_THIRDS.toString();
        fraction2.TWO_FIFTHS.percentageValue();
        fraction0.hashCode();
        Fraction fraction3 = fraction2.abs();
        fraction0.ONE_FIFTH.percentageValue();
        fraction0.hashCode();
        fraction2.getNumerator();
        fraction3.intValue();
        Fraction fraction4 = fraction3.abs();
        fraction3.ONE_HALF.add(1761);
        fraction1.abs();
        Fraction fraction5 = fraction4.negate();
        fraction5.THREE_FIFTHS.abs();
        fraction1.divide(fraction4);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = new Fraction(5);
        Fraction fraction2 = fraction1.TWO_FIFTHS.subtract(fraction0);
        fraction2.TWO_THIRDS.toString();
        Fraction fraction3 = fraction0.ONE_FIFTH.multiply(fraction1);
        fraction3.ZERO.add(fraction1);
        Fraction fraction4 = new Fraction((-416), (-416));
        Fraction.getReducedFraction(5, 4);
        fraction0.compareTo(fraction4);
        fraction3.longValue();
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Fraction.getReducedFraction((-1227), (-1442));
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        Fraction fraction0 = new Fraction(82, 84);
        fraction0.MINUS_ONE.multiply(5);
        Fraction fraction1 = fraction0.ONE_THIRD.divide(82);
        fraction1.ONE_QUARTER.toString();
        fraction0.getDenominator();
        fraction0.doubleValue();
        fraction0.multiply(fraction1);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        Fraction fraction0 = new Fraction(1223, 1223);
        Fraction fraction1 = fraction0.ONE_HALF.reciprocal();
        Fraction fraction2 = fraction0.THREE_FIFTHS.multiply((-1341));
        Fraction fraction3 = fraction0.multiply((-1341));
        Fraction fraction4 = fraction0.ONE_THIRD.subtract(fraction3);
        fraction3.divide(15);
        Fraction fraction5 = fraction1.divide(15);
        fraction5.ONE_HALF.reciprocal();
        Fraction fraction6 = fraction2.multiply(1223);
        fraction6.TWO_QUARTERS.subtract((-1341));
        Fraction fraction7 = Fraction.ONE;
        fraction3.divide(fraction7);
        fraction0.getField();
        fraction2.toString();
        fraction4.compareTo(fraction3);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = Fraction.ONE_THIRD;
        fraction0.TWO.divide(fraction1);
        Fraction fraction2 = fraction0.divide((-2774));
        fraction0.doubleValue();
        fraction0.intValue();
        fraction2.negate();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        fraction0.getDenominator();
        Fraction fraction1 = Fraction.FOUR_FIFTHS;
        Fraction fraction2 = fraction0.add(fraction1);
        Fraction fraction3 = fraction2.ONE_QUARTER.multiply(fraction0);
        Fraction fraction4 = Fraction.TWO_QUARTERS;
        fraction2.TWO_FIFTHS.divide(fraction4);
        Fraction fraction5 = fraction3.ONE_QUARTER.subtract(80);
        fraction0.floatValue();
        fraction2.toString();
        fraction5.floatValue();
        fraction0.subtract(80);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        Fraction fraction0 = new Fraction((-208.791664943), 959);
        Fraction fraction1 = fraction0.abs();
        fraction0.MINUS_ONE.subtract(fraction1);
        fraction0.getDenominator();
        fraction1.getField();
        fraction1.multiply(959);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        Fraction fraction0 = new Fraction(4414.6, 4);
        Fraction fraction1 = fraction0.TWO_THIRDS.reciprocal();
        fraction0.longValue();
        fraction0.TWO_QUARTERS.add(4);
        fraction0.ONE_QUARTER.add(fraction1);
        fraction0.getField();
        fraction0.hashCode();
        fraction1.reciprocal();
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        Fraction fraction0 = new Fraction(2.479773539153719E-5, 5);
        Object object0 = new Object();
        fraction0.equals(object0);
        fraction0.getField();
        fraction0.getField();
        Fraction fraction1 = new Fraction(5, 5, 165);
        fraction0.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        fraction1.TWO_QUARTERS.percentageValue();
        fraction1.ONE_FIFTH.subtract(fraction0);
        Fraction fraction2 = fraction0.subtract(fraction1);
        fraction2.ONE.add(3);
        fraction2.percentageValue();
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Fraction fraction0 = new Fraction((-3056));
        fraction0.MINUS_ONE.add((-3056));
        fraction0.getField();
        Fraction fraction1 = Fraction.MINUS_ONE;
        fraction0.equals(fraction1);
        fraction1.multiply((-3056));
        fraction1.add(945);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        Fraction fraction0 = new Fraction((-1066), (-1066));
        Fraction fraction1 = fraction0.divide(199);
        Fraction fraction2 = fraction0.add(fraction1);
        fraction2.ONE_THIRD.multiply(fraction1);
        Fraction fraction3 = Fraction.TWO;
        Fraction fraction4 = fraction3.subtract(fraction1);
        Fraction fraction5 = fraction4.divide(Integer.MIN_VALUE);
        Fraction fraction6 = fraction5.THREE_FIFTHS.add(fraction4);
        int int0 = 2936;
        fraction6.divide(int0);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        int int0 = 1;
        int int1 = 0;
        Fraction fraction0 = null;
        fraction0 = new Fraction(1, 0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.ONE;
        fraction0.TWO_FIFTHS.subtract(fraction1);
        Fraction fraction2 = fraction0.negate();
        fraction2.doubleValue();
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = new Fraction(1.1974215507507324, 1.1974215507507324, 4);
        Fraction fraction2 = fraction0.THREE_QUARTERS.subtract(fraction1);
        fraction0.hashCode();
        fraction0.hashCode();
        Fraction fraction3 = fraction1.subtract(fraction2);
        fraction3.TWO_THIRDS.getField();
        fraction0.equals(fraction2);
        fraction2.reciprocal();
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        Fraction fraction0 = new Fraction((-2701.0064), (-581.631083304973), (-2568));
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = fraction0.TWO_QUARTERS.add((-1059));
        Fraction fraction2 = fraction1.multiply((Fraction) null);
        fraction1.ONE_THIRD.toString();
        fraction2.THREE_FIFTHS.reciprocal();
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        fraction0.ONE_FIFTH.multiply((Fraction) null);
        Fraction fraction1 = null;
        fraction1 = Fraction.ONE;
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = Fraction.MINUS_ONE;
        fraction0.compareTo(fraction1);
        Fraction fraction2 = fraction1.divide(fraction0);
        fraction0.ONE.getField();
        Fraction fraction3 = fraction0.ONE_FIFTH.multiply(fraction1);
        Fraction fraction4 = fraction3.ZERO.abs();
        fraction2.longValue();
        fraction0.floatValue();
        fraction4.floatValue();
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = new Fraction(0.0);
        fraction0.THREE_QUARTERS.multiply(fraction1);
        fraction0.TWO_FIFTHS.negate();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        fraction0.ONE_QUARTER.toString();
        Fraction fraction1 = fraction0.negate();
        fraction1.compareTo(fraction0);
        fraction0.getDenominator();
        fraction1.add(193);
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.THREE_FIFTHS.divide(1668);
        fraction0.doubleValue();
        fraction0.longValue();
        Fraction fraction2 = fraction1.divide(1668);
        Fraction fraction3 = fraction1.divide(fraction2);
        Fraction fraction4 = fraction3.abs();
        fraction4.TWO_THIRDS.add(fraction1);
        fraction4.ZERO.multiply(fraction0);
        fraction3.percentageValue();
        Fraction fraction5 = fraction0.add(1668);
        Fraction fraction6 = fraction5.reciprocal();
        Fraction fraction7 = fraction0.divide(1668);
        fraction6.divide(fraction7);
        fraction1.intValue();
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        Fraction fraction0 = new Fraction(577.784);
        Fraction fraction1 = fraction0.MINUS_ONE.negate();
        Fraction fraction2 = Fraction.ONE_FIFTH;
        Fraction fraction3 = fraction0.ONE_QUARTER.divide(fraction2);
        int int0 = 1317;
        Fraction fraction4 = fraction1.TWO_THIRDS.multiply(1317);
        fraction4.TWO.add(fraction2);
        Fraction fraction5 = fraction0.FOUR_FIFTHS.abs();
        fraction5.MINUS_ONE.divide(fraction1);
        fraction3.ZERO.reciprocal();
        fraction5.TWO.toString();
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        fraction0.THREE_QUARTERS.subtract((Fraction) null);
        fraction0.abs();
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = null;
        fraction0.ZERO.add((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.FOUR_FIFTHS.add(2);
        fraction0.FOUR_FIFTHS.percentageValue();
        fraction0.FOUR_FIFTHS.percentageValue();
        fraction0.toString();
        Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(3971);
        fraction2.ONE_FIFTH.subtract(3814);
        fraction1.getDenominator();
        Fraction fraction3 = Fraction.THREE_QUARTERS;
        Fraction fraction4 = fraction0.ONE_HALF.abs();
        fraction4.TWO_THIRDS.subtract(fraction0);
        fraction4.subtract(2);
        Fraction fraction5 = fraction0.divide(fraction3);
        fraction0.floatValue();
        fraction5.toString();
        fraction5.floatValue();
        Fraction fraction6 = Fraction.THREE_FIFTHS;
        fraction3.equals(fraction6);
        fraction6.TWO_FIFTHS.abs();
        fraction6.intValue();
        fraction6.floatValue();
        fraction0.multiply(31);
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1, 1);
        fraction0.getNumerator();
        Fraction fraction1 = fraction0.add((-351));
        Fraction fraction2 = fraction1.ZERO.divide(fraction0);
        Fraction fraction3 = fraction1.ONE_FIFTH.add(1);
        Fraction fraction4 = fraction3.THREE_QUARTERS.multiply(fraction2);
        Fraction fraction5 = fraction1.ONE_QUARTER.negate();
        fraction5.TWO_THIRDS.percentageValue();
        fraction1.doubleValue();
        Fraction fraction6 = fraction0.add((-3465));
        fraction6.TWO_THIRDS.divide(99);
        Fraction fraction7 = fraction2.subtract(1);
        fraction7.ONE_HALF.multiply(31);
        fraction1.getField();
        fraction7.ONE_QUARTER.divide(201);
        fraction7.add(1);
        fraction6.getDenominator();
        fraction5.subtract(1);
        Fraction fraction8 = fraction7.negate();
        fraction8.floatValue();
        fraction5.compareTo(fraction7);
        fraction4.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        int int0 = (-3077);
        Fraction fraction0 = new Fraction(2219.5, (-3077));
        fraction0.ZERO.toString();
        int int1 = fraction0.compareTo((Fraction) null);
        Fraction fraction1 = fraction0.multiply(int1);
        fraction1.divide(int1);
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        Fraction fraction0 = new Fraction((-1.0));
        fraction0.ONE_HALF.percentageValue();
        Fraction fraction1 = fraction0.add(4312);
        fraction1.hashCode();
        fraction1.getNumerator();
        fraction1.floatValue();
        Fraction fraction2 = Fraction.getReducedFraction(3320, 3320);
        fraction2.TWO_QUARTERS.multiply(4312);
        fraction0.getField();
        Fraction fraction3 = Fraction.getReducedFraction(4312, 3320);
        fraction3.ONE_FIFTH.abs();
        fraction0.intValue();
        fraction2.negate();
        Fraction fraction4 = new Fraction(0.0, 4311);
        fraction1.equals(fraction4);
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        Fraction fraction1 = fraction0.multiply(2275);
        fraction1.hashCode();
        Fraction fraction2 = fraction0.TWO_FIFTHS.multiply(fraction1);
        fraction2.ZERO.percentageValue();
        fraction0.add(2);
        fraction0.divide(fraction1);
        Fraction.getReducedFraction(2, 0);
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        int int0 = (-17);
        int int1 = 0;
        Fraction.getReducedFraction((-17), 0);
    }

    @Test(timeout = 4000)
    public void test8181() throws Throwable {
        Fraction fraction0 = Fraction.TWO_FIFTHS;
        Fraction fraction1 = Fraction.MINUS_ONE;
        fraction1.ONE.percentageValue();
        Fraction fraction2 = fraction0.TWO_THIRDS.divide(fraction1);
        Fraction fraction3 = fraction2.ONE_THIRD.divide(fraction1);
        Fraction fraction4 = fraction3.ONE_FIFTH.multiply(fraction1);
        Fraction.getReducedFraction(31, 31);
        fraction4.ZERO.divide(54);
        fraction0.getDenominator();
        fraction0.percentageValue();
        fraction0.percentageValue();
        fraction2.reciprocal();
        Fraction.getReducedFraction(5, (-1440));
        fraction3.percentageValue();
    }

    @Test(timeout = 4000)
    public void test8282() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        double double0 = 0.0;
        fraction0.TWO_QUARTERS.divide((Fraction) null);
        int int0 = 340;
    }

    @Test(timeout = 4000)
    public void test8383() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.multiply(1);
        Fraction fraction2 = fraction1.TWO_QUARTERS.multiply(fraction0);
        Fraction fraction3 = fraction0.reciprocal();
        Fraction fraction4 = Fraction.getReducedFraction(1, 1);
        Fraction fraction5 = fraction4.TWO_QUARTERS.multiply((-80));
        fraction3.floatValue();
        Fraction fraction6 = fraction3.add(0);
        int int0 = 1;
        int int1 = 8;
        fraction6.MINUS_ONE.multiply(3);
        Fraction fraction7 = Fraction.getReducedFraction(1, 8);
        fraction7.THREE_QUARTERS.add(1349);
        fraction0.percentageValue();
        Fraction fraction8 = fraction3.add(fraction6);
        Fraction fraction9 = fraction8.ZERO.negate();
        Fraction fraction10 = fraction9.TWO_FIFTHS.divide(fraction5);
        fraction10.FOUR_FIFTHS.toString();
        Fraction fraction11 = fraction2.divide((Fraction) null);
        Fraction fraction12 = fraction11.divide(fraction9);
        fraction1.getNumerator();
        fraction4.compareTo(fraction8);
        Fraction fraction13 = fraction12.divide(fraction9);
        fraction1.floatValue();
        fraction13.multiply(int0);
    }

    @Test(timeout = 4000)
    public void test8484() throws Throwable {
        int int0 = 275;
        Fraction fraction0 = new Fraction(275);
        fraction0.ZERO.subtract((Fraction) null);
        fraction0.THREE_QUARTERS.toString();
    }

    @Test(timeout = 4000)
    public void test8585() throws Throwable {
        Fraction fraction0 = new Fraction(0.0);
        Fraction fraction1 = fraction0.add((-1266));
        Fraction fraction2 = Fraction.getReducedFraction((-1037), (-1037));
        Fraction fraction3 = fraction1.TWO_QUARTERS.add(fraction0);
        Fraction fraction4 = fraction3.TWO.add(1);
        fraction1.intValue();
        fraction0.doubleValue();
        Fraction fraction5 = fraction1.divide((-1266));
        fraction3.TWO_FIFTHS.toString();
        fraction5.ONE.subtract(fraction1);
        fraction4.floatValue();
        fraction2.divide((-1266));
        fraction0.getDenominator();
        fraction3.divide((-1037));
        fraction5.compareTo(fraction3);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test8686() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        Fraction fraction1 = Fraction.TWO;
        Fraction fraction2 = fraction0.add(fraction1);
        int int0 = 2236;
        Fraction fraction3 = Fraction.getReducedFraction(2236, (-2329));
        fraction0.getNumerator();
        Fraction fraction4 = new Fraction(2);
        Fraction fraction5 = fraction0.FOUR_FIFTHS.divide(fraction4);
        fraction3.TWO_FIFTHS.multiply(fraction5);
        Fraction fraction6 = fraction5.ONE_THIRD.add(fraction2);
        fraction0.hashCode();
        Fraction fraction7 = fraction0.subtract(613);
        fraction0.compareTo(fraction1);
        fraction0.getField();
        fraction5.equals(fraction4);
        Fraction fraction8 = fraction0.subtract(fraction7);
        fraction8.ONE_FIFTH.percentageValue();
        fraction7.MINUS_ONE.divide(0);
        fraction7.abs();
        fraction3.multiply(fraction6);
    }

    @Test(timeout = 4000)
    public void test8787() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        Fraction fraction1 = fraction0.ONE_FIFTH.reciprocal();
        fraction1.FOUR_FIFTHS.abs();
        Object object0 = new Object();
        fraction0.equals(object0);
        fraction0.ZERO.toString();
        fraction0.floatValue();
        Fraction fraction2 = Fraction.MINUS_ONE;
        fraction0.FOUR_FIFTHS.divide(fraction2);
        Fraction fraction3 = Fraction.FOUR_FIFTHS;
        int int0 = Integer.MAX_VALUE;
        Fraction fraction4 = Fraction.getReducedFraction((-3869), Integer.MAX_VALUE);
        Fraction fraction5 = fraction4.TWO.negate();
        Fraction fraction6 = Fraction.TWO;
        fraction5.MINUS_ONE.multiply(fraction6);
        fraction5.ONE_THIRD.negate();
        Fraction fraction7 = fraction3.ONE_FIFTH.divide(Integer.MAX_VALUE);
        fraction7.THREE_QUARTERS.add(fraction4);
        fraction0.compareTo(fraction3);
    }

    @Test(timeout = 4000)
    public void test8888() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        fraction0.equals("Me|<[@o.O]r,Iz");
        Fraction fraction1 = fraction0.subtract(754);
        Fraction fraction2 = fraction1.reciprocal();
        fraction2.MINUS_ONE.percentageValue();
        Fraction fraction3 = fraction1.ONE_QUARTER.subtract(2379);
        fraction3.FOUR_FIFTHS.add(2379);
        fraction0.FOUR_FIFTHS.abs();
        Fraction fraction4 = fraction0.negate();
        fraction4.ONE.toString();
        Fraction fraction5 = fraction0.negate();
        Fraction fraction6 = fraction5.THREE_FIFTHS.add(fraction2);
        fraction6.TWO_FIFTHS.abs();
        fraction6.TWO_FIFTHS.divide(fraction3);
        fraction5.negate();
        Fraction.getReducedFraction(2379, 2379);
        fraction2.subtract(754);
        fraction5.equals(fraction4);
    }

    @Test(timeout = 4000)
    public void test8989() throws Throwable {
        int int0 = 3;
        Fraction fraction0 = new Fraction((-378), 3);
        Fraction fraction1 = Fraction.getReducedFraction(584703393, 3);
        Object object0 = new Object();
        Fraction.getReducedFraction(584703393, (-378));
        fraction1.ZERO.abs();
        Fraction fraction2 = Fraction.getReducedFraction(3, 3);
        fraction2.reciprocal();
        fraction0.equals(object0);
        Fraction fraction3 = fraction0.multiply(fraction1);
        Fraction fraction4 = fraction3.subtract(int0);
        fraction4.subtract(int0);
    }

    @Test(timeout = 4000)
    public void test9090() throws Throwable {
        Fraction fraction0 = new Fraction(244);
        Fraction fraction1 = Fraction.TWO_FIFTHS;
        Fraction fraction2 = fraction0.TWO.subtract(160);
        Fraction fraction3 = fraction1.TWO_QUARTERS.add(fraction2);
        fraction0.MINUS_ONE.getField();
        Fraction fraction4 = fraction2.ZERO.subtract(201);
        fraction1.THREE_QUARTERS.add(fraction0);
        Fraction fraction5 = fraction1.ONE.add(54);
        fraction5.ONE_THIRD.getField();
        fraction0.compareTo(fraction1);
        fraction0.percentageValue();
        fraction4.ONE_FIFTH.abs();
        Fraction fraction6 = new Fraction((-47.374153064));
        Fraction fraction7 = fraction2.ONE_FIFTH.add(1);
        fraction7.TWO_THIRDS.negate();
        fraction7.TWO_THIRDS.getField();
        fraction7.ONE.percentageValue();
        fraction4.multiply(fraction6);
        fraction5.THREE_QUARTERS.divide(fraction6);
        Fraction fraction8 = fraction2.THREE_QUARTERS.abs();
        Fraction fraction9 = fraction5.abs();
        fraction4.hashCode();
        fraction3.doubleValue();
        fraction0.add(fraction8);
        fraction0.getDenominator();
        fraction6.subtract(1);
        fraction0.add(fraction3);
        fraction0.toString();
        fraction9.equals(fraction5);
    }

    @Test(timeout = 4000)
    public void test9191() throws Throwable {
        int int0 = Integer.MIN_VALUE;
        Fraction fraction0 = new Fraction(4269, Integer.MIN_VALUE);
        int int1 = 752;
    }
}
