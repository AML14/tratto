/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 13:22:06 GMT 2023
 */
package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[0];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-4096.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-4096.0));
        simplexTableau0.getOriginalNumDecisionVariables();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        simplexTableau0.subtractRow(0, 0, 0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, (-4096.0), 0);
        simplexTableau1.divideRow(0, (-4096.0));
        simplexTableau0.getNumDecisionVariables();
        simplexTableau1.equals(simplexTableau0);
        simplexTableau1.getSolution();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1111, 1);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1111);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-9);
        simplexTableau0.isOptimal();
        simplexTableau0.setEntry(1, 1, 0.0);
        int int0 = 19;
        simplexTableau0.getEntry(int0, int0);
        simplexTableau0.getNumArtificialVariables();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, true, (-1729.0120869142556), 0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 245.355668;
        doubleArray0[1] = 245.355668;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = (-2593.4);
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
        linkedList0.offerLast(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2008.0));
        simplexTableau0.hashCode();
        simplexTableau0.createTableau(true);
        simplexTableau0.getRhsOffset();
        simplexTableau0.getHeight();
        simplexTableau0.getOriginalNumDecisionVariables();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(10);
        simplexTableau0.getSolution();
        linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-4015.521787973);
        doubleArray0[3] = (-1293.721951736128);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.1170711061865695);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
        openMapRealVector1.getDistance(openMapRealVector0);
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector1);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3.7999795083850525E-8));
        simplexTableau0.getHeight();
        GoalType goalType1 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 1.0E-12, 1096);
        simplexTableau0.equals(simplexTableau1);
        simplexTableau0.dropPhase1Objective();
        simplexTableau0.normalizeConstraints(linkedList0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1525.0300557987;
        doubleArray0[1] = 1.0;
        doubleArray0[4] = 379.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2112.0374798150333));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2578.0);
        simplexTableau0.equals(linearObjectiveFunction0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1525.0300557987;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = 379.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2112.0374798150333));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) null, relationship0, 1525.0300557987);
        linkedList0.add(linearConstraint0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1), (-1));
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 2205.70153582;
        doubleArray0[3] = 2578.0;
        doubleArray0[4] = 580.40377433441;
        doubleArray0[3] = 531.9117748201945;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 580.40377433441);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        linearObjectiveFunction0.getValue(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        double[] doubleArray0 = new double[0];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1.0);
        linkedList0.offerFirst(linearConstraint0);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 4764.511);
        simplexTableau0.dropPhase1Objective();
        simplexTableau0.normalizeConstraints(linkedList0);
        simplexTableau0.createTableau(true);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-1529.30917227013);
        doubleArray0[3] = (-1529.30917227013);
        doubleArray0[4] = (-3143.667);
        doubleArray0[5] = 2579.0;
        doubleArray0[6] = 4336.3156847424;
        doubleArray0[7] = 4336.3156847424;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3143.667));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-1.0), relationship0, doubleArray0, 2579.0);
        linkedList0.add(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 73.14469528, 1082);
        linkedList0.toArray();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 2579.0);
        simplexTableau1.getSolution();
        simplexTableau1.getNumObjectiveFunctions();
        SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0, 2);
        simplexTableau2.getHeight();
        simplexTableau1.equals(simplexTableau2);
        simplexTableau0.isOptimal();
        simplexTableau1.getNumDecisionVariables();
        simplexTableau0.getBasicRow(3);
        simplexTableau0.dropPhase1Objective();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1429.97681318279);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-219.22847);
        doubleArray0[3] = 1123.543217;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 0.0);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        Relationship relationship1 = Relationship.GEQ;
        RealVector.unmodifiableRealVector(openMapRealVector0);
        LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship1, 1123.543217);
        linkedList0.add(linearConstraint1);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-219.22847));
        simplexTableau0.getWidth();
        simplexTableau0.getSolution();
        simplexTableau0.normalizeConstraints(linkedList0);
        LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, 2617.484130840218);
        simplexTableau0.getHeight();
        GoalType goalType1 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType1, true, 0.9, 294);
        simplexTableau0.equals(simplexTableau1);
        simplexTableau0.getOriginalNumDecisionVariables();
        simplexTableau0.getNumSlackVariables();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-1.0);
        doubleArray0[3] = (-1220.0);
        doubleArray0[4] = (-3143.667);
        doubleArray0[5] = 2579.0;
        doubleArray0[6] = 4336.3156847424;
        doubleArray0[7] = 5.206150291559893E-8;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3143.667));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 73.14469528, 1082);
        linkedList0.toArray();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1910.968713));
        linkedList0.add(linearConstraint0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 3294198.0);
        simplexTableau1.getNumSlackVariables();
        simplexTableau1.getSolution();
        simplexTableau1.getNumObjectiveFunctions();
        SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0, 1);
        simplexTableau2.getRhsOffset();
        simplexTableau2.getHeight();
        simplexTableau1.equals(simplexTableau2);
        simplexTableau0.isOptimal();
        simplexTableau1.getNumDecisionVariables();
        simplexTableau0.getBasicRow(3);
        simplexTableau0.dropPhase1Objective();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 2618.4567860653606;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2618.4567860653606, (-2593));
        simplexTableau0.getData();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, (Collection<LinearConstraint>) null, goalType0, true, (-2359.0));
        simplexTableau0.getData();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        int int0 = (-766);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-766), (-766));
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-696.727838960969));
        simplexTableau0.getEntry(int0, int0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2940.4271991), 0);
        simplexTableau0.getData();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(10, (-1), 0.0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 3.141592653589793);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3.141592653589793);
        simplexTableau0.getSlackVariableOffset();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0E-12);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 1.0E-12);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.0E-12, relationship0, doubleArray0, 7795.873571);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1830);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 1830);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 1.0);
        simplexTableau1.getBasicRow(1830);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (-2441.6853992);
        doubleArray0[1] = 3095.6549208342385;
        doubleArray0[2] = 408.427035683;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = 5061.0;
        doubleArray0[5] = (-909.30493547674);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2441.6853992));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 408.427035683, 0);
        simplexTableau0.getBasicRow(0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double(865.485583809);
        doubleArray0[0] = double0;
        Double double1 = new Double((double) doubleArray0[0]);
        doubleArray0[1] = double1;
        Double double2 = new Double(865.485583809);
        doubleArray0[2] = double2;
        Double double3 = new Double((double) doubleArray0[1]);
        doubleArray0[3] = double3;
        Double double4 = new Double((double) doubleArray0[0]);
        doubleArray0[4] = double4;
        Double double5 = new Double(0.0);
        doubleArray0[5] = double5;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
        simplexTableau0.getArtificialVariableOffset();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (-1680.4941);
        doubleArray0[1] = (-1.0);
        doubleArray0[2] = 221.9127656;
        doubleArray0[3] = (-2059.201481);
        doubleArray0[4] = 10.0;
        doubleArray0[5] = 1569.369305256;
        doubleArray0[6] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1680.4941));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
        simplexTableau0.hashCode();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Double[] doubleArray0 = new Double[5];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        Double double1 = new Double(0.0);
        doubleArray0[1] = double1;
        Double double2 = Double.valueOf((double) doubleArray0[0]);
        doubleArray0[2] = double2;
        Double double3 = new Double(0.0);
        doubleArray0[3] = double3;
        Double double4 = new Double((-1721.36667));
        doubleArray0[4] = double4;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-3471.442816367518));
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 3426.53120054);
        Collection<LinearConstraint> collection0 = null;
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, false, (-685.11517));
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(collection0);
        boolean boolean0 = true;
        int int0 = 350;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, boolean0, (double) doubleArray0[3], int0);
        simplexTableau1.getNumArtificialVariables();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        double[] doubleArray0 = new double[0];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2041.233835653));
        GoalType goalType0 = GoalType.MINIMIZE;
        int int0 = 0;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, false, Double.POSITIVE_INFINITY, 0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        simplexTableau0.normalizeConstraints(linkedList0);
        double double0 = (-56.3216283894694);
        OpenMapRealVector openMapRealVector0 = null;
        openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 2644.888130468538;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 2807.984;
        doubleArray0[4] = 1123.543217;
        doubleArray0[5] = 2500.45592312;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2644.888130468538);
        linearObjectiveFunction0.getValue(doubleArray0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1123.543217);
        linkedList0.parallelStream();
        linkedList0.add(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-46.1295), 0);
        simplexTableau0.getBasicRow(0);
        simplexTableau0.getOriginalNumDecisionVariables();
        linkedList0.add(linearConstraint0);
        simplexTableau0.getHeight();
        simplexTableau0.getArtificialVariableOffset();
        simplexTableau0.hashCode();
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (double) 2;
        doubleArray1[1] = (-46.1295);
        doubleArray1[2] = 2644.888130468538;
        doubleArray1[3] = 1846.96;
        doubleArray1[4] = 1123.543217;
        doubleArray1[5] = (double) 2;
        doubleArray1[6] = (double) 8;
        doubleArray1[7] = 2807.984;
        doubleArray1[8] = 2807.984;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1, (ArrayRealVector) null);
        SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 0.0;
        double double0 = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1934.74176663;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 2112.1677119392566;
        doubleArray0[5] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0, (-1500));
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
        linkedList0.add(linearConstraint0);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        int int0 = 3859;
        simplexTableau0.getBasicRow(3859);
        boolean boolean0 = true;
        double double1 = 1655.21305;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, boolean0, double1);
        simplexTableau1.isOptimal();
        simplexTableau1.getSolution();
        simplexTableau1.getNumObjectiveFunctions();
        LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
        Relationship relationship1 = Relationship.LEQ;
        LinearConstraint linearConstraint1 = null;
        linearConstraint1 = new LinearConstraint(doubleArray0, double0, relationship1, doubleArray0, doubleArray0[2]);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 4277.09325596068;
        doubleArray0[1] = (-2742.6564151);
        doubleArray0[2] = (-1118.61378102298);
        doubleArray0[3] = 471.587095;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = Double.POSITIVE_INFINITY;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3.141592653589793);
        simplexTableau0.getEntry(0, (-406));
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 0);
        simplexTableau0.getOriginalNumDecisionVariables();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector1);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1929.108575191126;
        doubleArray0[3] = (-2204.70153582);
        doubleArray0[4] = 0.0;
        doubleArray0[5] = (-2550.090378917);
        doubleArray0[6] = 1.0;
        doubleArray0[7] = (-563.5264595619399);
        doubleArray0[8] = (-1574.643);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1929.108575191126);
        linearObjectiveFunction0.getValue(doubleArray0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-2204.70153582), relationship0, openMapRealVector0, 1.0);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2550.090378917));
        simplexTableau0.getOriginalNumDecisionVariables();
        simplexTableau0.getEntry(0, 0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 37.32);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12, 728);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 728);
        simplexTableau1.getData();
        simplexTableau0.createTableau(true);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (-2510.099789212);
        doubleArray0[2] = 2200.162188231738;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = (-1.0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2200.162188231738);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2510.099789212));
        simplexTableau0.getNumArtificialVariables();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0E-12);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 3975.2609);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.0E-12, relationship0, doubleArray0, 7795.873571);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3975.2609);
        simplexTableau0.setEntry(0, 0, 1.0E-12);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 3307.45;
        doubleArray0[2] = (-1164.361371490264);
        doubleArray0[3] = 1571.04;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1164.361371490264));
        simplexTableau0.dropPhase1Objective();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (-741.0);
        doubleArray0[1] = (-2387.5755);
        doubleArray0[2] = 3.141592653589793;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 1235.2941803184;
        doubleArray0[5] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3466.844182332));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        boolean boolean0 = false;
        int int0 = 0;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1235.2941803184, 0);
        simplexTableau0.setEntry(4, 4, (-1059.0627017));
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MINIMIZE;
        double double0 = (-508.0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, boolean0, double0);
        simplexTableau0.getSolution();
        simplexTableau1.normalizeConstraints(list0);
        linkedList0.remove(int0);
        simplexTableau1.getRhsOffset();
        simplexTableau0.getArtificialVariableOffset();
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 470.00681317;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3029.47));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        linkedList0.toArray();
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1828.6338));
        simplexTableau0.getWidth();
        simplexTableau0.subtractRow(0, 0, (-3029.47));
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        double[] doubleArray0 = new double[0];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-4096.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-4096.0));
        simplexTableau0.getOriginalNumDecisionVariables();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, (-4096.0), 0);
        simplexTableau1.divideRow(0, (-4096.0));
        simplexTableau0.getNumDecisionVariables();
        simplexTableau1.equals(simplexTableau0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-2332.95682));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
        LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList1);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 0.0, 0);
        simplexTableau1.getNumDecisionVariables();
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 1027.80330772;
        doubleArray0[1] = Double.POSITIVE_INFINITY;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1060.435);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-851.656));
        simplexTableau0.initializeColumnLabels();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        LinearObjectiveFunction linearObjectiveFunction0 = null;
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Relationship relationship0 = Relationship.LEQ;
        Relationship relationship1 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0E-12, relationship1, openMapRealVector0, 0.0);
        linkedList0.add(linearConstraint0);
        LinearConstraint linearConstraint1 = new LinearConstraint(openMapRealVector0, 1.0, relationship0, openMapRealVector0, 0.0);
        linkedList0.add(linearConstraint1);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, true, 6.283185307179586);
        simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MINIMIZE;
        simplexTableau0.getOriginalNumDecisionVariables();
        boolean boolean0 = true;
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-3266.0872669041737);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1252.845186);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1252.845186);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, (-369.7366530158), (-704));
        simplexTableau1.isOptimal();
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1343.6215658);
        doubleArray0[1] = (-1671.7918075);
        doubleArray0[2] = 367.437203;
        doubleArray0[3] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1343.6215658));
        simplexTableau0.isOptimal();
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Double[] doubleArray0 = new Double[3];
        Double double0 = new Double(1.0E-9);
        doubleArray0[0] = double0;
        Double double1 = new Double(1.0E-9);
        doubleArray0[1] = double1;
        Double double2 = new Double(1.0E-9);
        doubleArray0[2] = double2;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 1.0E-9);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, (double) doubleArray0[0], 0);
        simplexTableau1.subtractRow(880, 0, 0.0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 845.071705255;
        doubleArray0[2] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.mapDivide(0.0);
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 0.0, relationship0, arrayRealVector0, (-1754.1692268197364));
        linkedList0.add(0, linearConstraint0);
        GoalType goalType0 = GoalType.MINIMIZE;
        linkedList0.remove();
        int int0 = (-1581);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1963.4881366744, (-1581));
        simplexTableau0.divideRow(1, 2927.91751);
        simplexTableau0.getOriginalNumDecisionVariables();
        boolean boolean0 = false;
        simplexTableau0.initializeColumnLabels();
        simplexTableau0.createTableau(boolean0);
        int int1 = simplexTableau0.getRhsOffset();
        simplexTableau0.getEntry(int1, int0);
        simplexTableau0.getSolution();
        simplexTableau0.getOriginalNumDecisionVariables();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (-368.145);
        doubleArray0[1] = (-998.309498998725);
        doubleArray0[2] = 454.2814687776135;
        doubleArray0[3] = (-4569.16775);
        doubleArray0[4] = 2291.513;
        doubleArray0[5] = 1.0E-12;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2291.513, 1356);
        simplexTableau0.getSolution();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        double[] doubleArray0 = new double[0];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 3368.9430441621);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1234.0345), (-2608));
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 3368.9430441621);
        simplexTableau1.getWidth();
        simplexTableau1.getNumArtificialVariables();
        simplexTableau0.initializeColumnLabels();
        simplexTableau0.isOptimal();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
        simplexTableau0.initializeColumnLabels();
        boolean boolean0 = false;
        simplexTableau0.createTableau(false);
        simplexTableau1.hashCode();
        simplexTableau1.setEntry(0, 2, (-2608));
        simplexTableau1.createTableau(boolean0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 458.211169829;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 2433.00653288115;
        doubleArray0[4] = 3193.867606566;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-33.51563846));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 10);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 660.8894199286);
        simplexTableau1.getSolution();
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 2999.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-223.38096598417013);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = 2551.463743097649;
        doubleArray0[5] = Double.POSITIVE_INFINITY;
        doubleArray0[6] = (-1128.5795383401924);
        doubleArray0[7] = 0.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1128.5795383401924));
        simplexTableau0.initializeColumnLabels();
        simplexTableau0.getNumObjectiveFunctions();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = Double.NaN;
        doubleArray0[1] = Double.NEGATIVE_INFINITY;
        doubleArray0[2] = 2288.0;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = 884.6409;
        doubleArray0[5] = (-1300.12);
        doubleArray0[6] = (-632.2886409866072);
        doubleArray0[7] = 1.0E-9;
        doubleArray0[8] = 1785.529418;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1785.529418);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, Double.NaN, 0);
        simplexTableau1.getSolution();
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-1498.27);
        doubleArray0[1] = 1600.11;
        doubleArray0[2] = (-479.09235224151);
        doubleArray0[3] = 0.5;
        doubleArray0[4] = (-1250.03474081);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-321.764301), 0);
        simplexTableau0.equals(linearObjectiveFunction0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-426.16052383);
        doubleArray0[1] = 3383.48535249604;
        doubleArray0[2] = Double.POSITIVE_INFINITY;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 1.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector0);
        SimplexTableau.getInvertedCoefficientSum(arrayRealVector3);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (-1118.0);
        doubleArray0[1] = 1.0;
        doubleArray0[2] = 104.5;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1118.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 104.5);
        simplexTableau0.getRhsOffset();
        simplexTableau0.getSlackVariableOffset();
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), 1160);
        simplexTableau0.getNumSlackVariables();
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = (double) 0;
        doubleArray0[5] = (double) 0;
        doubleArray0[6] = (-274.3882571156);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        int int0 = (-880);
        int int1 = 2;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-880), 2);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        int int2 = (-859);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, (-859));
        simplexTableau0.equals(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NEGATIVE_INFINITY;
        doubleArray0[1] = 469.352;
        doubleArray0[2] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2049.027985503));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-127.1526));
        linearObjectiveFunction0.getValue(doubleArray0);
        simplexTableau0.getHeight();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1408), Double.NEGATIVE_INFINITY);
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
        int int0 = 2;
        double double0 = 0.0;
        simplexTableau0.setEntry(int0, int0, double0);
        simplexTableau0.initializeColumnLabels();
        simplexTableau0.getSolution();
        simplexTableau0.getNumDecisionVariables();
        simplexTableau0.dropPhase1Objective();
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(2578, 2578);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1272.985041));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 0.0, relationship0, arrayRealVector0, 0.0);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1272.985041));
        simplexTableau0.getWidth();
        Relationship relationship1 = Relationship.EQ;
        LinearConstraint linearConstraint1 = new LinearConstraint(arrayRealVector0, relationship1, 2578);
        linkedList0.add(linearConstraint1);
        simplexTableau0.initializeColumnLabels();
        simplexTableau0.getWidth();
        simplexTableau0.equals("");
        simplexTableau0.hashCode();
        simplexTableau0.normalizeConstraints(linkedList0);
        simplexTableau0.divideRow(0, (-257.2531));
        simplexTableau0.getHeight();
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 245.355668;
        doubleArray0[1] = 753.76440798789;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = (-1039.5549572521322);
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
        linkedList0.offerLast(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2008.0));
        simplexTableau0.hashCode();
        simplexTableau0.createTableau(true);
        int int0 = simplexTableau0.getRhsOffset();
        simplexTableau0.getHeight();
        boolean boolean0 = true;
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = (-760.92);
        doubleArray1[1] = 933.430834406;
        doubleArray1[2] = 0.0;
        linearObjectiveFunction0.getValue(doubleArray1);
        linkedList0.add(linearConstraint0);
        simplexTableau0.createTableau(boolean0);
        simplexTableau0.getBasicRow(int0);
        simplexTableau0.createTableau(boolean0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2470), (-2470), 2.0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 6.283185307179586);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        boolean boolean0 = false;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
        simplexTableau0.normalizeConstraints(linkedList0);
        double double0 = 0.0;
        int int0 = 0;
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        int int0 = 2570;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2570, 2570);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 590.1844107361221);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        boolean boolean0 = true;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0, 420);
        simplexTableau0.getHeight();
        double double0 = 0.0;
        // Undeclared exception!
        simplexTableau0.subtractRow(int0, int0, double0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = true;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 2667.917153363315);
        arrayRealVector0.getLInfNorm();
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        int int0 = 0;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
        simplexTableau0.setEntry(0, 0, 2667.917153363315);
        arrayRealVector0.set(0.0);
        simplexTableau0.getData();
        Object object0 = new Object();
        arrayRealVector0.projection(arrayRealVector0);
        simplexTableau0.equals(object0);
        SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
        simplexTableau0.subtractRow(0, 3582, 2667.917153363315);
        simplexTableau0.createTableau(boolean0);
        int int1 = 0;
        simplexTableau0.getEntry(int0, int1);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>(linkedList0);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, false, 1.0E-12, 3);
        Collection<LinearConstraint> collection0 = null;
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1;
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1.0);
        linkedList1.offer(linearConstraint0);
        linearObjectiveFunction0.getValue(doubleArray0);
        openMapRealVector0.mapAdd((-1526.8747952501676));
        linearObjectiveFunction0.getValue(doubleArray0);
        Relationship relationship1 = Relationship.EQ;
        LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, 377.446993396333, relationship1, doubleArray0, (-3557.566494));
        linkedList0.add(linearConstraint1);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
        linkedList0.add(linearConstraint1);
        boolean boolean0 = true;
        double double0 = (-1.0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, boolean0, double0);
        simplexTableau1.getSlackVariableOffset();
        simplexTableau0.dropPhase1Objective();
        linearObjectiveFunction0.getValue(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 2819.297185298528;
        doubleArray0[1] = 977.974735;
        doubleArray0[2] = 4346.7092332;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 1601.134605;
        doubleArray0[5] = (-547.75788);
        doubleArray0[6] = 0.0;
        doubleArray0[7] = 1.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-7.352045854));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(96);
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 0.0, relationship0, arrayRealVector0, 1.0);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        linkedList0.clone();
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1601.134605);
        simplexTableau0.getSolution();
        simplexTableau0.hashCode();
        simplexTableau0.getOriginalNumDecisionVariables();
        simplexTableau0.getSlackVariableOffset();
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1525.0300557987;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = 379.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2112.0374798150333));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-1.0), relationship0, doubleArray0, 379.0);
        linkedList0.add(linearConstraint0);
        Relationship relationship1 = Relationship.GEQ;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
        simplexTableau0.getOriginalNumDecisionVariables();
        LinearConstraint linearConstraint1 = new LinearConstraint((RealVector) null, relationship1, 1525.0300557987);
        linkedList0.add(linearConstraint1);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1), 0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1429.97681318279);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-219.22847);
        doubleArray0[3] = 1123.543217;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 0.0);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        Relationship relationship1 = Relationship.GEQ;
        LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship1, 1123.543217);
        linkedList0.add(linearConstraint1);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-219.22847));
        simplexTableau0.getArtificialVariableOffset();
        simplexTableau0.getWidth();
        simplexTableau0.getBasicRow(8);
        simplexTableau0.getSolution();
        simplexTableau0.normalizeConstraints(linkedList0);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 245.355668;
        doubleArray0[1] = 753.76440798789;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
        linkedList0.offerLast(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2008.0));
        simplexTableau0.hashCode();
        simplexTableau0.createTableau(true);
        int int0 = simplexTableau0.getRhsOffset();
        simplexTableau0.getHeight();
        boolean boolean0 = true;
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = (-760.92);
        doubleArray1[1] = 933.430834406;
        doubleArray1[2] = (-1.0);
        linearObjectiveFunction0.getValue(doubleArray1);
        linkedList0.add(linearConstraint0);
        simplexTableau0.createTableau(boolean0);
        simplexTableau0.getBasicRow(int0);
        simplexTableau0.createTableau(boolean0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        double[] doubleArray0 = new double[0];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1.0);
        linkedList0.offerFirst(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 4764.511242411471);
        simplexTableau0.dropPhase1Objective();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 4764.511242411471, 1110);
        simplexTableau0.equals(simplexTableau1);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-1529.30917227013);
        doubleArray0[2] = (-1220.0);
        doubleArray0[3] = 1525.0300557987;
        doubleArray0[4] = (-3143.667);
        doubleArray0[5] = 2579.0;
        doubleArray0[6] = 4336.3156847424;
        doubleArray0[7] = 5.206150291559893E-8;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3143.667));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 73.14469528, 1082);
        linkedList0.toArray();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 3294198.0);
        simplexTableau1.getNumSlackVariables();
        simplexTableau1.getSolution();
        simplexTableau1.getNumObjectiveFunctions();
        SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (-1220.0), 1);
        simplexTableau2.getHeight();
        simplexTableau1.equals(simplexTableau2);
        simplexTableau0.isOptimal();
        simplexTableau1.getNumDecisionVariables();
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2324);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2324);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 2324;
        doubleArray0[1] = 1.0E-12;
        doubleArray0[2] = (double) 2324;
        doubleArray0[3] = 1.0E-12;
        Relationship relationship0 = Relationship.EQ;
        Relationship relationship1 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.0E-12, relationship1, doubleArray0, 1567.6957);
        openMapRealVector0.equals(linearConstraint0);
        LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship0, 0.0);
        linkedList0.add(linearConstraint1);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2324);
        int int0 = simplexTableau0.getNumArtificialVariables();
        simplexTableau0.equals(linkedList0);
        simplexTableau0.getHeight();
        int int1 = (-1);
        simplexTableau0.getBasicRow((-1));
        simplexTableau0.initializeColumnLabels();
        simplexTableau0.getBasicRow(int0);
        simplexTableau0.getData();
        simplexTableau0.isOptimal();
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        double[] doubleArray0 = new double[0];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1.0);
        linkedList0.offerFirst(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
        simplexTableau0.dropPhase1Objective();
        simplexTableau0.normalizeConstraints(linkedList0);
        simplexTableau0.getHeight();
        simplexTableau0.equals((Object) null);
        simplexTableau0.getNumSlackVariables();
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        double[] doubleArray0 = new double[0];
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-4096.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-4096.0));
        Relationship relationship0 = Relationship.GEQ;
        double[] doubleArray1 = new double[0];
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-4096.0), relationship0, doubleArray1, (-4096.0));
        linkedList0.add(linearConstraint0);
        simplexTableau0.getOriginalNumDecisionVariables();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, (-4096.0), 0);
        simplexTableau1.divideRow(0, (-4096.0));
        simplexTableau0.getNumDecisionVariables();
        simplexTableau1.equals(simplexTableau0);
        simplexTableau0.divideRow(0, 0);
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 245.355668;
        doubleArray0[1] = 753.76440798789;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = (-2593.4);
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 0.0;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
        linkedList0.offerLast(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2008.0));
        simplexTableau0.hashCode();
        simplexTableau0.createTableau(true);
        simplexTableau0.getRhsOffset();
        simplexTableau0.getHeight();
        simplexTableau0.getOriginalNumDecisionVariables();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(10);
        simplexTableau0.getSolution();
        linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-1529.30917227013);
        doubleArray0[3] = 1525.0300557987;
        doubleArray0[4] = (-3143.667);
        doubleArray0[5] = 2579.0;
        doubleArray0[6] = 4336.3156847424;
        doubleArray0[7] = 4336.3156847424;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3143.667));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 73.14469528, 1082);
        linkedList0.toArray();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 3294198.0);
        simplexTableau1.getNumSlackVariables();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1035.564240473);
        linkedList0.addLast(linearConstraint0);
        simplexTableau1.getNumObjectiveFunctions();
        SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0, 1);
        int int0 = simplexTableau2.getHeight();
        simplexTableau1.equals(simplexTableau2);
        simplexTableau1.getNumDecisionVariables();
        simplexTableau0.getBasicRow(int0);
        simplexTableau0.dropPhase1Objective();
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[2] = (-1192.337);
        doubleArray0[3] = 1.0E-9;
        doubleArray0[4] = 1997.21;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-9);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1111, 1111);
        LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, 1111);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        linearObjectiveFunction1.getValue((RealVector) openMapRealVector0);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, true, 2102.32307108, 7);
        simplexTableau0.createTableau(true);
        simplexTableau0.normalizeConstraints(linkedList0);
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-1529.30917227013);
        doubleArray0[3] = 1525.0300557987;
        doubleArray0[4] = (-3143.667);
        doubleArray0[5] = 2579.0;
        doubleArray0[6] = 4336.3156847424;
        doubleArray0[7] = 5.206150291559893E-8;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3143.667));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 73.14469528, 1082);
        linkedList0.toArray();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1910.9687134888054));
        linkedList0.add(linearConstraint0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 3294198.0);
        simplexTableau1.getNumSlackVariables();
        simplexTableau1.getSolution();
        simplexTableau1.getNumObjectiveFunctions();
        SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0, 1);
        simplexTableau2.getRhsOffset();
        simplexTableau2.getHeight();
        simplexTableau1.equals(simplexTableau2);
        simplexTableau0.isOptimal();
        simplexTableau1.getNumDecisionVariables();
        simplexTableau0.getBasicRow(3);
        simplexTableau0.dropPhase1Objective();
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-1.0);
        doubleArray0[2] = 2205.70153582;
        doubleArray0[3] = 2578.0;
        doubleArray0[4] = 580.40377433441;
        doubleArray0[5] = (-1.0);
        doubleArray0[3] = 530.7771;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 580.40377433441);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        linearObjectiveFunction0.getValue(doubleArray0);
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 3224.7199557987);
        linkedList0.offerLast(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0));
        simplexTableau0.getWidth();
        simplexTableau0.getSolution();
        simplexTableau0.getSolution();
        simplexTableau0.dropPhase1Objective();
        simplexTableau0.createTableau(false);
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        int int0 = 4778;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(4778, (-143.17502733758));
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-4069.35));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MAXIMIZE;
        int int1 = (-3038);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1639.407151507), (-3038));
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, (-4069.35));
        int int2 = simplexTableau1.getNumObjectiveFunctions();
        double double0 = 3294198.0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(int2, double0);
        Relationship relationship0 = Relationship.EQ;
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-4015.521787973);
        doubleArray0[3] = (-1293.721951736128);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.1170711061865695);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
        openMapRealVector1.getDistance(openMapRealVector0);
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector1);
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3.7999795083850525E-8));
        simplexTableau0.getHeight();
        GoalType goalType1 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, true, 1.0E-12, 1096);
        simplexTableau0.equals(simplexTableau1);
        simplexTableau0.dropPhase1Objective();
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-1529.30917227013);
        doubleArray0[3] = 1525.0300557987;
        doubleArray0[4] = (-3143.667);
        doubleArray0[5] = 2579.0;
        doubleArray0[6] = 4336.3156847424;
        doubleArray0[7] = 5.206150291559893E-8;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3143.667));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 73.14469528, 1082);
        linkedList0.toArray();
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1910.9687134888054));
        linkedList0.add(linearConstraint0);
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 3294198.0);
        simplexTableau1.getNumSlackVariables();
        simplexTableau1.getSolution();
        simplexTableau1.getNumObjectiveFunctions();
        SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0, 1);
        simplexTableau2.getRhsOffset();
        simplexTableau2.getHeight();
        simplexTableau1.equals(simplexTableau2);
        simplexTableau0.isOptimal();
        simplexTableau1.getNumDecisionVariables();
        simplexTableau0.getBasicRow(2);
        simplexTableau0.dropPhase1Objective();
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[1] = 0.0;
        doubleArray0[4] = 1525.0300557987;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = 1525.0300557987;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2112.0374798150333));
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        RealVector realVector0 = null;
        Relationship relationship0 = Relationship.GEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) null, relationship0, 0.0);
        linkedList0.add(linearConstraint0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
        LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, 0.9974949359893799);
        GoalType goalType0 = GoalType.MINIMIZE;
        boolean boolean0 = false;
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, 1525.0300557987, 1098);
        List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
        List<LinearConstraint> list1 = simplexTableau0.normalizeConstraints(list0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, list1, goalType1, boolean0, doubleArray0[4]);
        int int0 = simplexTableau1.getSlackVariableOffset();
        simplexTableau0.getNumSlackVariables();
        int int1 = 287;
        simplexTableau0.getEntry(int1, int0);
        SimplexTableau.getInvertedCoefficientSum(realVector0);
    }

    @Test(timeout = 4000)
    public void test8181() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1429.97681318279);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-219.22847);
        doubleArray0[3] = 1123.543217;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 0.0);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        Relationship relationship1 = Relationship.GEQ;
        RealVector.unmodifiableRealVector(openMapRealVector0);
        LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship1, 1123.543217);
        linkedList0.add(linearConstraint1);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-219.22847));
        simplexTableau0.getArtificialVariableOffset();
        simplexTableau0.getWidth();
        simplexTableau0.getBasicRow(8);
        simplexTableau0.getSolution();
        simplexTableau0.normalizeConstraints(linkedList0);
        LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, 2617.484130840218);
        GoalType goalType1 = GoalType.MINIMIZE;
        SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType1, true, 0.9, 294);
        simplexTableau0.equals(simplexTableau1);
    }

    @Test(timeout = 4000)
    public void test8282() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(1105);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 203.653161418582);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        GoalType goalType0 = GoalType.MINIMIZE;
        arrayRealVector1.getMaxIndex();
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1595.31292955159);
        doubleArray0[1] = (-1595.31292955159);
        doubleArray0[2] = (-1595.31292955159);
        doubleArray0[3] = 203.653161418582;
        doubleArray0[4] = (double) 2209;
        doubleArray0[5] = (double) 1105;
        doubleArray0[6] = (double) 1105;
        doubleArray0[7] = (double) 1105;
        Relationship relationship0 = Relationship.EQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-1181.95142794979), relationship0, doubleArray0, 3241.3842515652887);
        linkedList0.add(linearConstraint0);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1595.31292955159));
        simplexTableau0.getOriginalNumDecisionVariables();
        simplexTableau0.dropPhase1Objective();
        int int0 = 3686;
        simplexTableau0.getEntry(int0, int0);
        int int1 = 1086;
        simplexTableau0.getBasicRow(int1);
        int int2 = 263;
        double double0 = 0.0;
    }

    @Test(timeout = 4000)
    public void test8383() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1429.97681318279);
        doubleArray0[2] = (-219.22847);
        doubleArray0[3] = 1123.543217;
        LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
        LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
        Double[] doubleArray1 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        Relationship relationship0 = Relationship.LEQ;
        LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 0.0);
        linkedList0.add(linearConstraint0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        Relationship relationship1 = Relationship.GEQ;
        RealVector.unmodifiableRealVector(openMapRealVector0);
        LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship1, 1123.543217);
        linkedList0.add(linearConstraint1);
        SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-219.22847));
        simplexTableau0.getArtificialVariableOffset();
        simplexTableau0.getWidth();
        simplexTableau0.getBasicRow(8);
        linearObjectiveFunction0.getValue(doubleArray0);
        simplexTableau0.getSolution();
        simplexTableau0.normalizeConstraints(linkedList0);
        LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, 2617.484130840218);
        simplexTableau0.equals(simplexTableau0);
    }
}
