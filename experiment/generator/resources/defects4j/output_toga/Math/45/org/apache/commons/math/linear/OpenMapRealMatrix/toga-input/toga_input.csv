focal_method,test_prefix,docstring
"@Override
public RealMatrix multiply(final RealMatrix m) {
    try {
        return multiply((OpenMapRealMatrix) m);
    } catch (ClassCastException cce) {
        // safety check
        MatrixUtils.checkMultiplicationCompatible(this, m);
        final int outCols = m.getColumnDimension();
        final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);
        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext(); ) {
            iterator.advance();
            final double value = iterator.value();
            final int key = iterator.key();
            final int i = key / columns;
            final int k = key % columns;
            for (int j = 0; j < outCols; ++j) {
                out.addToEntry(i, j, value * m.getEntry(k, j));
            }
        }
        return out;
    }
}","public void test000() throws Throwable {
    int int0 = 80;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(80, 80);
    // Undeclared exception!
    try {
        openMapRealMatrix0.multiply((RealMatrix) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getEntry(int row, int column) {
    MatrixUtils.checkRowIndex(this, row);
    MatrixUtils.checkColumnIndex(this, column);
    return entries.get(computeKey(row, column));
}","public void test011() throws Throwable {
    int int0 = 212;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(212, 212);
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
    // Undeclared exception!
    try {
        openMapRealMatrix0.getEntry((-271), (-271));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (-271)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public void multiplyEntry(int row, int column, double factor) {
    MatrixUtils.checkRowIndex(this, row);
    MatrixUtils.checkColumnIndex(this, column);
    final int key = computeKey(row, column);
    final double value = entries.get(key) * factor;
    if (value == 0.0) {
        entries.remove(key);
    } else {
        entries.put(key, value);
    }
}","public void test022() throws Throwable {
    int int0 = 1;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
    DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
    openMapRealMatrix0.walkInColumnOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0);
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
    OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix1.multiply(openMapRealMatrix0);
    openMapRealMatrix2.multiply((RealMatrix) openMapRealMatrix0);
    openMapRealMatrix1.multiply((RealMatrix) openMapRealMatrix2);
    // Undeclared exception!
    try {
        openMapRealMatrix2.multiplyEntry(1, 1, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public void multiplyEntry(int row, int column, double factor) {
    MatrixUtils.checkRowIndex(this, row);
    MatrixUtils.checkColumnIndex(this, column);
    final int key = computeKey(row, column);
    final double value = entries.get(key) * factor;
    if (value == 0.0) {
        entries.remove(key);
    } else {
        entries.put(key, value);
    }
}","public void test033() throws Throwable {
    int int0 = 4525;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4525, 4525);
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
    int int1 = 0;
    // Undeclared exception!
    try {
        openMapRealMatrix1.multiplyEntry(4525, 0, 4525);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (4,525)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public void addToEntry(int row, int column, double increment) {
    MatrixUtils.checkRowIndex(this, row);
    MatrixUtils.checkColumnIndex(this, column);
    final int key = computeKey(row, column);
    final double value = entries.get(key) + increment;
    if (value == 0.0) {
        entries.remove(key);
    } else {
        entries.put(key, value);
    }
}","public void test044() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(76, 76);
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
    // Undeclared exception!
    try {
        openMapRealMatrix1.addToEntry(206, 76, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (206)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) {
    return new OpenMapRealMatrix(rowDimension, columnDimension);
}","public void test055() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1359, 5627);
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
    openMapRealMatrix1.createMatrix(1359, 156);
}","/**
 * {@inheritDoc}
 */"
"@Override
public void setEntry(int row, int column, double value) {
    MatrixUtils.checkRowIndex(this, row);
    MatrixUtils.checkColumnIndex(this, column);
    if (value == 0.0) {
        entries.remove(computeKey(row, column));
    } else {
        entries.put(computeKey(row, column), value);
    }
}","public void test066() throws Throwable {
    int int0 = 1479;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1479, 1479);
    openMapRealMatrix0.copy();
    // Undeclared exception!
    try {
        openMapRealMatrix0.setEntry(1479, 0, 404.22937);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,479)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public OpenMapRealMatrix subtract(OpenMapRealMatrix m) {
    // Safety check.
    MatrixUtils.checkAdditionCompatible(this, m);
    final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
    for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext(); ) {
        iterator.advance();
        final int row = iterator.key() / columns;
        final int col = iterator.key() - row * columns;
        out.setEntry(row, col, getEntry(row, col) - iterator.value());
    }
    return out;
}","public void test077() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4112, 4112);
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
    openMapRealMatrix1.subtract(openMapRealMatrix0);
}","/**
 * Subtract {@code m} from this matrix.
 *
 * @param m Matrix to be subtracted.
 * @return {@code this} - {@code m}.
 * @throws org.apache.commons.math.exception.DimensionMismatchException
 * if {@code m} is not the same size as this matrix.
 */"
"@Override
public void addToEntry(int row, int column, double increment) {
    MatrixUtils.checkRowIndex(this, row);
    MatrixUtils.checkColumnIndex(this, column);
    final int key = computeKey(row, column);
    final double value = entries.get(key) + increment;
    if (value == 0.0) {
        entries.remove(key);
    } else {
        entries.put(key, value);
    }
}","public void test088() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(51, 51);
    openMapRealMatrix0.addToEntry(0, 0, 3878.83901075);
}","/**
 * {@inheritDoc}
 */"
"public OpenMapRealMatrix(int rowDimension, int columnDimension) {
    super(rowDimension, columnDimension);
    this.rows = rowDimension;
    this.columns = columnDimension;
    this.entries = new OpenIntToDoubleHashMap(0.0);
}","public void test099() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
    openMapRealMatrix0.multiplyEntry(0, 0, 0.0);
    OpenMapRealMatrix openMapRealMatrix1 = null;
    try {
        openMapRealMatrix1 = new OpenMapRealMatrix(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}","/**
 * Build a sparse matrix with the supplied row and column dimensions.
 *
 * @param rowDimension Number of rows of the matrix.
 * @param columnDimension Number of columns of the matrix.
 */"
"public OpenMapRealMatrix(OpenMapRealMatrix matrix) {
    this.rows = matrix.rows;
    this.columns = matrix.columns;
    this.entries = new OpenIntToDoubleHashMap(matrix.entries);
}","public void test1010() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = null;
    OpenMapRealMatrix openMapRealMatrix1 = null;
    try {
        openMapRealMatrix1 = new OpenMapRealMatrix((OpenMapRealMatrix) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealMatrix"", e);
    }
}","/**
 * Build a matrix by copying another one.
 *
 * @param matrix matrix to copy.
 */"
"public OpenMapRealMatrix(int rowDimension, int columnDimension) {
    super(rowDimension, columnDimension);
    this.rows = rowDimension;
    this.columns = columnDimension;
    this.entries = new OpenIntToDoubleHashMap(0.0);
}","public void test1111() throws Throwable {
    int int0 = (-744);
    OpenMapRealMatrix openMapRealMatrix0 = null;
    try {
        openMapRealMatrix0 = new OpenMapRealMatrix((-744), (-744));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -744 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}","/**
 * Build a sparse matrix with the supplied row and column dimensions.
 *
 * @param rowDimension Number of rows of the matrix.
 * @param columnDimension Number of columns of the matrix.
 */"
"public RealMatrix scalarAdd(final double d) {
    final int rowCount = getRowDimension();
    final int columnCount = getColumnDimension();
    final RealMatrix out = createMatrix(rowCount, columnCount);
    for (int row = 0; row < rowCount; ++row) {
        for (int col = 0; col < columnCount; ++col) {
            out.setEntry(row, col, getEntry(row, col) + d);
        }
    }
    return out;
}","public void test1212() throws Throwable {
    int int0 = 218;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(218, 218);
    int int1 = 0;
    // Undeclared exception!
    openMapRealMatrix0.scalarAdd(218);
}","/**
 * {@inheritDoc}
 */"
"public OpenMapRealMatrix(int rowDimension, int columnDimension) {
    super(rowDimension, columnDimension);
    this.rows = rowDimension;
    this.columns = columnDimension;
    this.entries = new OpenIntToDoubleHashMap(0.0);
}","public void test1313() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = null;
    try {
        openMapRealMatrix0 = new OpenMapRealMatrix(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}","/**
 * Build a sparse matrix with the supplied row and column dimensions.
 *
 * @param rowDimension Number of rows of the matrix.
 * @param columnDimension Number of columns of the matrix.
 */"
"public OpenMapRealMatrix(int rowDimension, int columnDimension) {
    super(rowDimension, columnDimension);
    this.rows = rowDimension;
    this.columns = columnDimension;
    this.entries = new OpenIntToDoubleHashMap(0.0);
}","public void test1414() throws Throwable {
    int int0 = (-385);
    OpenMapRealMatrix openMapRealMatrix0 = null;
    try {
        openMapRealMatrix0 = new OpenMapRealMatrix(0, (-385));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}","/**
 * Build a sparse matrix with the supplied row and column dimensions.
 *
 * @param rowDimension Number of rows of the matrix.
 * @param columnDimension Number of columns of the matrix.
 */"
"@Override
public void addToEntry(int row, int column, double increment) {
    MatrixUtils.checkRowIndex(this, row);
    MatrixUtils.checkColumnIndex(this, column);
    final int key = computeKey(row, column);
    final double value = entries.get(key) + increment;
    if (value == 0.0) {
        entries.remove(key);
    } else {
        entries.put(key, value);
    }
}","public void test1515() throws Throwable {
    int int0 = 1968;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1968, 1968);
    openMapRealMatrix0.getColumnDimension();
    OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(1968, 1968);
    openMapRealMatrix1.multiply((RealMatrix) openMapRealMatrix0);
    OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix1.add(openMapRealMatrix0);
    openMapRealMatrix0.getTrace();
    // Undeclared exception!
    try {
        openMapRealMatrix2.addToEntry(1959, 1968, 1968);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (1,968)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public void addToEntry(int row, int column, double increment) {
    MatrixUtils.checkRowIndex(this, row);
    MatrixUtils.checkColumnIndex(this, column);
    final int key = computeKey(row, column);
    final double value = entries.get(key) + increment;
    if (value == 0.0) {
        entries.remove(key);
    } else {
        entries.put(key, value);
    }
}","public void test1616() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1037, 1037);
    openMapRealMatrix0.getTrace();
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
    openMapRealMatrix1.getRowDimension();
    openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix1);
    openMapRealMatrix0.copy();
    // Undeclared exception!
    try {
        openMapRealMatrix0.addToEntry(1037, 1, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,037)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public RealVector operate(final RealVector v) {
    try {
        return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);
    } catch (ClassCastException cce) {
        final int nRows = getRowDimension();
        final int nCols = getColumnDimension();
        if (v.getDimension() != nCols) {
            throw new DimensionMismatchException(v.getDimension(), nCols);
        }
        final double[] out = new double[nRows];
        for (int row = 0; row < nRows; ++row) {
            double sum = 0;
            for (int i = 0; i < nCols; ++i) {
                sum += getEntry(row, i) * v.getEntry(i);
            }
            out[row] = sum;
        }
        return new ArrayRealVector(out, false);
    }
}","public void test1717() throws Throwable {
    int int0 = 665;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(665, 665);
    OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(665, 665);
    // Undeclared exception!
    try {
        openMapRealMatrix1.operate((RealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public OpenMapRealMatrix(int rowDimension, int columnDimension) {
    super(rowDimension, columnDimension);
    this.rows = rowDimension;
    this.columns = columnDimension;
    this.entries = new OpenIntToDoubleHashMap(0.0);
}","public void test1818() throws Throwable {
    int int0 = (-3661);
    OpenMapRealMatrix openMapRealMatrix0 = null;
    try {
        openMapRealMatrix0 = new OpenMapRealMatrix((-3661), (-3661));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -3,661 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}","/**
 * Build a sparse matrix with the supplied row and column dimensions.
 *
 * @param rowDimension Number of rows of the matrix.
 * @param columnDimension Number of columns of the matrix.
 */"
"public RealMatrix transpose() {
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    final RealMatrix out = createMatrix(nCols, nRows);
    walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {

        /**
         * {@inheritDoc}
         */
        @Override
        public void visit(final int row, final int column, final double value) {
            out.setEntry(column, row, value);
        }
    });
    return out;
}","public void test1919() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1117, 1117);
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
    // Undeclared exception!
    openMapRealMatrix1.transpose();
}","/**
 * {@inheritDoc}
 */"
"public OpenMapRealMatrix add(OpenMapRealMatrix m) {
    // safety check
    MatrixUtils.checkAdditionCompatible(this, m);
    final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
    for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext(); ) {
        iterator.advance();
        final int row = iterator.key() / columns;
        final int col = iterator.key() - row * columns;
        out.setEntry(row, col, getEntry(row, col) + iterator.value());
    }
    return out;
}","public void test2020() throws Throwable {
    int int0 = 1270;
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1270, 1270);
    OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(1270, 1270);
    // Undeclared exception!
    openMapRealMatrix0.add(openMapRealMatrix1);
}","/**
 * Compute the sum of this matrix and {@code m}.
 *
 * @param m Matrix to be added.
 * @return {@code this} + {@code m}.
 * @throws org.apache.commons.math.exception.DimensionMismatchException
 * if {@code m} is not the same size as this matrix.
 */"
