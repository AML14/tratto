{
  "test1212" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.conjugate();\n}",
    "testName" : "test1212"
  },
  "test4646" : {
    "methodSignature" : "public Complex add(Complex rhs)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4646() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.NaN.sqrt();\n    Complex complex2 = complex1.NaN.acos();\n    Complex complex3 = complex1.I.acos();\n    Complex complex4 = complex1.ONE.multiply(complex3);\n    complex4.NaN.conjugate();\n    Complex complex5 = complex3.I.asin();\n    complex5.subtract(complex2);\n    Complex complex6 = complex0.cos();\n    complex3.add(complex6);\n    complex1.add(complex0);\n}",
    "testName" : "test4646"
  },
  "test3434" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = Complex.INF;\n    complex0.divide(complex1);\n}",
    "testName" : "test3434"
  },
  "test6868" : {
    "methodSignature" : "protected Complex createComplex(double real, double imaginary)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6868() throws Throwable {\n    Complex complex0 = new Complex(786.1387374983, (-158.0));\n    Complex complex1 = complex0.INF.tan();\n    complex1.ZERO.divide(complex0);\n    complex1.ONE.hashCode();\n    Complex complex2 = complex0.cosh();\n    complex2.ZERO.subtract(complex0);\n    complex0.abs();\n    Complex complex3 = complex0.sin();\n    complex2.hashCode();\n    complex3.negate();\n    complex1.isNaN();\n    complex0.negate();\n    complex3.ZERO.createComplex(0.0, 0.0);\n    complex3.createComplex(3992.7536647, 3992.7536647);\n}",
    "testName" : "test6868"
  },
  "test5656" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.log();\n    complex1.INF.asin();\n    Complex complex2 = complex0.conjugate();\n    Complex complex3 = complex2.ONE.cos();\n    Complex complex4 = complex3.I.sqrt();\n    complex4.I.atan();\n    Complex complex5 = complex0.log();\n    Complex complex6 = complex0.log();\n    complex6.NaN.tanh();\n    complex2.negate();\n    complex5.isInfinite();\n    complex2.abs();\n}",
    "testName" : "test5656"
  },
  "test2424" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.NaN.cosh();\n    complex0.getReal();\n    Complex complex2 = complex1.atan();\n    complex0.multiply(complex2);\n    complex1.sin();\n}",
    "testName" : "test2424"
  },
  "test7878" : {
    "methodSignature" : "public Complex subtract(Complex rhs)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7878() throws Throwable {\n    Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);\n    Complex complex1 = complex0.ZERO.atan();\n    Complex complex2 = complex0.divide(complex1);\n    Complex complex3 = complex2.ONE.acos();\n    Complex complex4 = complex1.ONE.cosh();\n    Complex complex5 = complex4.INF.negate();\n    Complex complex6 = complex4.INF.asin();\n    Complex complex7 = complex1.ONE.pow(complex3);\n    complex6.NaN.pow(complex0);\n    Complex complex8 = complex0.log();\n    complex0.add(complex6);\n    Complex complex9 = complex5.createComplex(0.0, 0.0);\n    complex8.sqrt();\n    complex5.abs();\n    Complex complex10 = complex0.multiply(complex4);\n    complex9.isInfinite();\n    complex5.atan();\n    Complex complex11 = complex3.sqrt();\n    Complex complex12 = complex10.INF.atan();\n    Complex complex13 = complex0.log();\n    Complex complex14 = complex10.cosh();\n    complex14.INF.atan();\n    Object object0 = new Object();\n    complex11.equals(object0);\n    complex7.negate();\n    complex12.pow(complex13);\n    Complex complex15 = Complex.NaN;\n    complex0.subtract(complex15);\n}",
    "testName" : "test7878"
  },
  "test1010" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.exp();\n    Complex complex2 = complex0.NaN.asin();\n    Complex complex3 = complex0.tanh();\n    Complex complex4 = complex3.ONE.sqrt1z();\n    complex0.abs();\n    Complex complex5 = complex1.ZERO.createComplex(3644.6161, Double.POSITIVE_INFINITY);\n    Complex complex6 = complex0.NaN.subtract(complex1);\n    Complex complex7 = complex6.INF.exp();\n    Complex complex8 = complex0.pow(complex2);\n    Complex complex9 = complex8.ONE.subtract(complex0);\n    complex8.NaN.conjugate();\n    complex4.add(complex6);\n    Complex complex10 = complex9.INF.multiply(complex5);\n    Complex complex11 = Complex.ZERO;\n    Complex complex12 = complex8.INF.pow(complex11);\n    Complex complex13 = complex12.NaN.cosh();\n    complex13.ONE.conjugate();\n    Complex complex14 = complex5.atan();\n    complex14.I.createComplex(3644.6161, Double.POSITIVE_INFINITY);\n    complex14.INF.tanh();\n    Complex complex15 = complex7.atan();\n    complex15.getReal();\n    complex9.log();\n    Complex complex16 = complex8.sqrt1z();\n    complex16.ZERO.multiply(complex5);\n    Complex complex17 = complex5.acos();\n    Complex complex18 = complex17.INF.tanh();\n    complex18.I.atan();\n    Complex complex19 = complex18.INF.conjugate();\n    complex19.conjugate();\n    complex2.abs();\n    complex10.tanh();\n}",
    "testName" : "test1010"
  },
  "test4444" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4444() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.ONE.acos();\n    Complex complex2 = complex0.atan();\n    complex2.ONE.createComplex((-1.0), 330.624838257935);\n    complex0.hashCode();\n    complex1.acos();\n}",
    "testName" : "test4444"
  },
  "test3232" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.INF.acos();\n    complex1.I.log();\n    Complex complex2 = complex0.multiply(complex1);\n    complex2.I.tan();\n    Complex complex3 = complex0.pow((Complex) null);\n    complex3.INF.tanh();\n}",
    "testName" : "test3232"
  },
  "test6666" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6666() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.sin();\n    Complex complex2 = complex1.ZERO.acos();\n    Complex complex3 = complex0.cosh();\n    Complex complex4 = complex3.ONE.sinh();\n    Complex complex5 = complex4.tanh();\n    Complex complex6 = complex1.sinh();\n    complex6.hashCode();\n    Complex complex7 = complex6.INF.multiply(complex5);\n    Complex complex8 = complex7.ONE.conjugate();\n    Complex complex9 = complex3.ZERO.divide(complex2);\n    Complex complex10 = complex9.ZERO.sqrt();\n    complex10.INF.tanh();\n    Complex complex11 = complex1.subtract(complex0);\n    complex11.negate();\n    complex4.INF.cos();\n    Complex complex12 = complex1.sqrt();\n    complex3.isInfinite();\n    Complex complex13 = complex4.negate();\n    complex13.pow(complex5);\n    Complex complex14 = complex0.acos();\n    complex14.getImaginary();\n    Complex complex15 = complex8.tanh();\n    complex15.equals(complex7);\n    complex12.sinh();\n    complex5.tan();\n}",
    "testName" : "test6666"
  },
  "test8888" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8888() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.createComplex(1602.95755678, 1602.95755678);\n    Complex complex2 = complex1.acos();\n    Complex complex3 = complex1.I.cosh();\n    complex3.NaN.negate();\n    Complex complex4 = complex3.I.cos();\n    complex4.ZERO.subtract(complex2);\n    Complex complex5 = complex1.pow(complex0);\n    complex5.ZERO.acos();\n    Complex complex6 = complex5.pow(complex3);\n    complex6.ONE.sqrt1z();\n    Complex complex7 = complex5.ZERO.cosh();\n    complex1.sinh();\n    complex1.atan();\n    complex4.cos();\n    complex2.isNaN();\n    complex7.tan();\n}",
    "testName" : "test8888"
  },
  "test5454" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.atan();\n    complex0.abs();\n    Complex complex2 = complex0.tan();\n    Complex complex3 = complex2.INF.subtract(complex1);\n    Complex complex4 = complex3.I.createComplex(106.2, 106.2);\n    Complex complex5 = complex2.I.negate();\n    Complex complex6 = complex1.subtract(complex0);\n    Complex complex7 = complex6.negate();\n    Complex complex8 = complex0.conjugate();\n    Complex complex9 = complex7.ONE.sqrt();\n    complex9.INF.conjugate();\n    Complex complex10 = Complex.I;\n    Complex complex11 = complex8.I.divide(complex10);\n    Complex complex12 = complex7.ZERO.atan();\n    Complex complex13 = complex12.cosh();\n    Complex complex14 = complex6.conjugate();\n    complex14.ONE.add(complex11);\n    complex14.ZERO.sinh();\n    Complex complex15 = complex6.multiply(complex5);\n    complex0.negate();\n    Complex complex16 = complex12.sinh();\n    complex6.sinh();\n    Complex complex17 = complex4.tanh();\n    complex17.ZERO.cos();\n    complex2.ZERO.exp();\n    complex1.asin();\n    complex13.exp();\n    complex8.acos();\n    complex15.tanh();\n    complex6.cos();\n    complex16.asin();\n    complex3.tan();\n}",
    "testName" : "test5454"
  },
  "test2222" : {
    "methodSignature" : "public Complex pow(Complex x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.divide(complex1);\n    complex1.getImaginary();\n    complex2.pow(complex1);\n}",
    "testName" : "test2222"
  },
  "test7676" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7676() throws Throwable {\n    Complex complex0 = new Complex(192.2034991042, 192.2034991042);\n    Complex complex1 = complex0.log();\n    Complex complex2 = complex1.ONE.acos();\n    Complex complex3 = complex1.NaN.conjugate();\n    Complex complex4 = complex1.ONE.pow(complex0);\n    complex4.ZERO.sqrt1z();\n    complex0.log();\n    complex1.INF.subtract(complex3);\n    Complex complex5 = complex1.atan();\n    complex5.I.exp();\n    Complex complex6 = complex0.cos();\n    complex6.multiply(complex5);\n    complex1.tan();\n    complex2.sin();\n}",
    "testName" : "test7676"
  },
  "test033" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN, Double.NaN);\n    Complex complex1 = complex0.sinh();\n    complex0.divide(complex1);\n    complex1.equals(complex1);\n    Complex complex2 = complex1.cosh();\n    complex1.subtract(complex2);\n    complex0.divide(complex0);\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.exp();\n    Complex complex2 = complex0.INF.pow(complex1);\n    complex0.isInfinite();\n    complex1.multiply(complex0);\n    Complex complex3 = complex0.createComplex(768.44308694, Double.POSITIVE_INFINITY);\n    complex3.exp();\n    complex3.isNaN();\n    Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 768.44308694);\n    complex3.pow(complex4);\n    complex2.exp();\n    complex3.atan();\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.acos();\n    Complex complex2 = complex1.NaN.tan();\n    complex0.getReal();\n    complex1.isNaN();\n    Complex complex3 = complex1.conjugate();\n    complex3.multiply(complex0);\n    Complex complex4 = complex0.sqrt();\n    Complex complex5 = complex4.NaN.add(complex2);\n    Complex complex6 = complex5.NaN.sqrt();\n    complex6.NaN.hashCode();\n    complex1.sin();\n}",
    "testName" : "test1616"
  },
  "test3838" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.isInfinite();\n    Complex complex1 = complex0.sqrt();\n    complex0.ONE.cos();\n    Complex complex2 = complex1.sqrt();\n    complex2.hashCode();\n    complex2.conjugate();\n    complex0.negate();\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Complex complex0 = new Complex(2421.19, 2421.19);\n    Complex complex1 = complex0.ONE.exp();\n    complex0.ONE.tan();\n    complex1.ONE.pow(complex0);\n    complex0.isInfinite();\n    Object object0 = new Object();\n    complex0.equals(object0);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Complex complex0 = new Complex((-1.0), (-1.0));\n    complex0.asin();\n}",
    "testName" : "test1414"
  },
  "test4848" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4848() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.ZERO;\n    complex0.ZERO.add(complex1);\n    Complex complex2 = Complex.INF;\n    complex2.NaN.cosh();\n    Complex complex3 = complex2.ZERO.log();\n    complex3.NaN.cosh();\n    Complex complex4 = complex0.subtract(complex2);\n    complex2.hashCode();\n    complex0.isInfinite();\n    Complex complex5 = complex2.INF.negate();\n    complex4.isNaN();\n    complex4.conjugate();\n    complex5.conjugate();\n}",
    "testName" : "test4848"
  },
  "test3636" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    Complex complex0 = new Complex(74.0, (-2709.178363033));\n    Complex complex1 = Complex.INF;\n    complex0.ONE.divide(complex1);\n    complex0.ZERO.conjugate();\n    complex0.sqrt();\n    complex1.sinh();\n    complex1.conjugate();\n}",
    "testName" : "test3636"
  },
  "test5858" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.abs();\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.createComplex(1.0, 0.0);\n    Complex complex3 = complex1.pow(complex0);\n    complex3.INF.tan();\n    Complex complex4 = complex3.pow(complex2);\n    complex1.cos();\n    complex0.cos();\n    complex4.cos();\n}",
    "testName" : "test5858"
  },
  "test2626" : {
    "methodSignature" : "public Complex add(Complex rhs)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.ONE;\n    complex0.equals(complex1);\n    complex0.createComplex(0.0, (-1264.8377));\n    complex1.add(complex0);\n}",
    "testName" : "test2626"
  },
  "test6060" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6060() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = complex0.INF.log();\n    Complex complex2 = complex1.I.tanh();\n    Complex complex3 = complex1.ZERO.negate();\n    complex3.I.hashCode();\n    complex3.NaN.conjugate();\n    Complex complex4 = complex1.exp();\n    Complex complex5 = Complex.ONE;\n    Complex complex6 = complex4.ZERO.subtract(complex5);\n    complex5.hashCode();\n    Complex complex7 = complex6.NaN.createComplex(0.0, (-896.0));\n    Complex complex8 = complex7.ZERO.cos();\n    Complex complex9 = complex1.ONE.pow(complex0);\n    complex9.ONE.exp();\n    complex9.hashCode();\n    Complex complex10 = complex0.sqrt1z();\n    Complex complex11 = complex7.ONE.atan();\n    Complex complex12 = complex10.acos();\n    complex12.NaN.exp();\n    complex4.isNaN();\n    Complex complex13 = complex12.sqrt1z();\n    Complex complex14 = complex1.log();\n    complex14.I.acos();\n    complex0.tan();\n    complex8.hashCode();\n    complex2.multiply(complex13);\n    complex9.divide(complex11);\n    complex7.sinh();\n}",
    "testName" : "test6060"
  },
  "test9494" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9494() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.NaN.subtract(complex0);\n    Complex complex2 = complex0.I.log();\n    Complex complex3 = complex2.I.sin();\n    Complex complex4 = complex0.I.tanh();\n    Complex complex5 = complex4.sinh();\n    Complex complex6 = complex5.I.divide(complex4);\n    complex2.ONE.asin();\n    complex6.ONE.createComplex((-828.93354208067), (-828.93354208067));\n    complex0.negate();\n    complex0.equals(complex5);\n    complex3.conjugate();\n    complex3.sin();\n    Complex complex7 = complex2.exp();\n    complex6.cos();\n    Complex complex8 = complex4.tan();\n    complex8.ZERO.atan();\n    complex0.equals(complex0);\n    complex4.pow(complex0);\n    Complex complex9 = complex7.sqrt();\n    Complex complex10 = complex9.NaN.cos();\n    complex8.conjugate();\n    complex0.sinh();\n    complex0.cos();\n    Complex complex11 = complex10.multiply(complex0);\n    complex11.divide(complex1);\n}",
    "testName" : "test9494"
  },
  "test8282" : {
    "methodSignature" : "public Complex add(Complex rhs)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8282() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.ZERO.tanh();\n    complex0.add((Complex) null);\n}",
    "testName" : "test8282"
  },
  "test7070" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7070() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.INF;\n    complex0.hashCode();\n    Complex complex2 = complex1.I.sqrt1z();\n    Complex complex3 = complex0.NaN.pow(complex1);\n    Complex complex4 = Complex.ONE;\n    Complex complex5 = complex0.subtract(complex4);\n    complex5.ONE.exp();\n    complex3.atan();\n    complex2.asin();\n    complex2.atan();\n    complex1.getReal();\n    complex4.tanh();\n}",
    "testName" : "test7070"
  },
  "test8080" : {
    "methodSignature" : "public Complex sqrt1z()",
    "methodName" : "sqrt1z",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8080() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex1.ZERO.sqrt1z();\n    complex2.cos();\n    Complex complex3 = complex1.ONE.tanh();\n    Complex complex4 = complex0.sin();\n    Complex complex5 = complex4.negate();\n    complex5.I.sinh();\n    complex5.NaN.exp();\n    Complex complex6 = Complex.ONE;\n    Complex complex7 = complex0.I.pow(complex6);\n    complex7.ONE.negate();\n    complex4.isInfinite();\n    Complex complex8 = complex0.negate();\n    Complex complex9 = complex8.INF.pow(complex1);\n    Complex complex10 = complex3.multiply(complex4);\n    Complex complex11 = Complex.INF;\n    complex10.add(complex11);\n    complex11.ONE.cosh();\n    complex9.log();\n    complex9.equals((Object) null);\n    complex10.isInfinite();\n    complex11.log();\n    complex11.sqrt1z();\n}",
    "testName" : "test8080"
  },
  "test4242" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.ZERO;\n    complex0.ZERO.add(complex1);\n    Complex complex2 = complex0.tan();\n    complex2.add(complex0);\n    complex1.getReal();\n    complex1.hashCode();\n    complex0.getReal();\n}",
    "testName" : "test4242"
  },
  "test9090" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9090() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = complex0.sin();\n    complex1.INF.subtract(complex0);\n    Complex complex2 = complex0.log();\n    Complex complex3 = complex2.NaN.sqrt1z();\n    Complex complex4 = complex2.tan();\n    Complex complex5 = complex2.atan();\n    complex5.INF.tanh();\n    Complex complex6 = complex4.NaN.negate();\n    complex6.I.negate();\n    complex6.ONE.cos();\n    Complex complex7 = complex6.ZERO.exp();\n    complex7.ZERO.negate();\n    Complex complex8 = complex2.acos();\n    complex8.INF.sqrt();\n    Complex complex9 = complex3.ONE.sqrt1z();\n    complex3.tan();\n    Complex complex10 = complex3.negate();\n    complex10.ZERO.tan();\n    Complex complex11 = complex10.ZERO.asin();\n    complex0.NaN.cosh();\n    Complex complex12 = complex0.cos();\n    complex12.cos();\n    complex9.getReal();\n    complex12.cosh();\n    Complex complex13 = complex12.exp();\n    complex13.cos();\n    Complex complex14 = complex11.sin();\n    complex9.equals(complex14);\n    complex4.isNaN();\n    complex1.cos();\n}",
    "testName" : "test9090"
  },
  "test3030" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.INF.exp();\n    complex1.ONE.hashCode();\n    Complex complex2 = Complex.ONE;\n    complex0.divide(complex2);\n}",
    "testName" : "test3030"
  },
  "test6464" : {
    "methodSignature" : "public Complex add(Complex rhs)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6464() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.I.cos();\n    Complex complex2 = Complex.ZERO;\n    complex1.I.multiply(complex2);\n    Complex complex3 = complex1.I.multiply(complex2);\n    complex0.hashCode();\n    Complex complex4 = Complex.INF;\n    Complex complex5 = complex4.INF.subtract(complex0);\n    Complex complex6 = complex4.INF.cos();\n    complex0.equals(complex4);\n    complex5.log();\n    complex4.abs();\n    Complex complex7 = complex4.createComplex(1.0, Double.POSITIVE_INFINITY);\n    complex5.ONE.atan();\n    complex7.I.subtract(complex6);\n    complex7.ONE.add(complex3);\n    Complex complex8 = complex5.sqrt1z();\n    Complex complex9 = complex8.I.asin();\n    complex9.ZERO.divide(complex5);\n    complex6.sin();\n    complex8.atan();\n    Complex complex10 = complex4.sin();\n    complex5.log();\n    Complex complex11 = complex3.cos();\n    complex11.atan();\n    complex0.add(complex10);\n}",
    "testName" : "test6464"
  },
  "test8686" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8686() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.ONE.sqrt();\n    Complex complex2 = complex0.INF.createComplex(2450.33, 2.0);\n    Complex complex3 = complex0.NaN.pow(complex1);\n    Complex complex4 = complex0.INF.sin();\n    Complex complex5 = complex0.ONE.atan();\n    Complex complex6 = complex0.createComplex(0.0, 2450.33);\n    Complex complex7 = complex5.multiply(complex3);\n    complex6.NaN.acos();\n    Complex complex8 = complex4.sin();\n    Complex complex9 = complex0.conjugate();\n    Complex complex10 = complex5.multiply(complex9);\n    complex10.ZERO.cos();\n    complex2.isInfinite();\n    Complex complex11 = Complex.I;\n    Complex complex12 = complex6.add(complex11);\n    complex4.asin();\n    complex2.NaN.sinh();\n    complex8.hashCode();\n    Complex complex13 = complex2.conjugate();\n    Complex complex14 = complex12.asin();\n    Complex complex15 = complex14.pow(complex12);\n    complex15.ONE.sqrt1z();\n    complex15.INF.hashCode();\n    Complex complex16 = complex4.log();\n    complex4.ONE.sqrt();\n    complex0.exp();\n    Complex complex17 = complex16.cos();\n    complex14.getImaginary();\n    complex7.atan();\n    Complex complex18 = Complex.ZERO;\n    complex7.multiply(complex18);\n    complex4.hashCode();\n    complex13.asin();\n    complex14.abs();\n    complex17.divide(complex1);\n}",
    "testName" : "test8686"
  },
  "test5252" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.sqrt1z();\n    Complex complex2 = complex1.sqrt1z();\n    complex2.ZERO.tanh();\n    Complex complex3 = complex0.sinh();\n    Complex complex4 = complex3.ONE.negate();\n    complex4.exp();\n    complex0.tan();\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.ZERO.tanh();\n    complex0.I.divide(complex1);\n    Complex complex2 = complex0.sqrt();\n    complex2.negate();\n}",
    "testName" : "test2020"
  },
  "test7474" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7474() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.tan();\n    Complex complex2 = Complex.ONE;\n    complex0.hashCode();\n    Complex complex3 = complex2.asin();\n    Complex complex4 = complex1.pow(complex2);\n    Complex complex5 = complex2.asin();\n    complex4.getReal();\n    complex2.I.exp();\n    Complex complex6 = complex0.tanh();\n    Complex complex7 = complex6.INF.createComplex(Double.NaN, Double.NaN);\n    complex7.I.cos();\n    complex3.isNaN();\n    complex6.NaN.subtract(complex3);\n    Object object0 = new Object();\n    complex6.equals(object0);\n    Complex complex8 = complex1.tan();\n    complex1.multiply(complex8);\n    complex3.sin();\n    complex5.negate();\n}",
    "testName" : "test7474"
  },
  "test4040" : {
    "methodSignature" : "public Complex subtract(Complex rhs)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.ONE.cosh();\n    complex0.ONE.cosh();\n    Complex complex1 = complex0.cos();\n    Complex complex2 = complex0.negate();\n    Complex complex3 = complex0.pow(complex2);\n    complex3.sqrt1z();\n    complex2.getReal();\n    complex1.getImaginary();\n    complex1.subtract(complex3);\n}",
    "testName" : "test4040"
  },
  "test6262" : {
    "methodSignature" : "public Complex subtract(Complex rhs)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6262() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.I;\n    complex0.add(complex1);\n    Complex complex2 = Complex.INF;\n    complex1.subtract(complex2);\n}",
    "testName" : "test6262"
  },
  "test9292" : {
    "methodSignature" : "public Complex pow(Complex x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9292() throws Throwable {\n    Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);\n    Complex complex1 = complex0.ONE.createComplex(2.0, (-1.0));\n    complex1.ZERO.multiply(complex0);\n    complex1.INF.createComplex(2.0, 0.0);\n    complex1.add(complex0);\n    complex0.pow((Complex) null);\n}",
    "testName" : "test9292"
  },
  "test8484" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8484() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.NaN.acos();\n    Complex complex2 = complex0.createComplex((-2583.96), (-2583.96));\n    Complex complex3 = complex1.add(complex2);\n    Complex complex4 = complex1.INF.log();\n    Complex complex5 = complex1.INF.sqrt();\n    complex4.ONE.hashCode();\n    complex5.sinh();\n    complex3.I.divide(complex4);\n    complex0.equals(complex2);\n    Complex complex6 = complex1.tan();\n    Complex complex7 = complex2.I.add(complex5);\n    complex0.NaN.exp();\n    complex1.I.hashCode();\n    complex6.isInfinite();\n    Complex complex8 = complex1.divide(complex2);\n    complex8.NaN.tan();\n    complex8.ONE.sqrt();\n    Complex complex9 = complex6.conjugate();\n    complex2.sin();\n    Complex complex10 = complex4.conjugate();\n    complex6.ONE.subtract(complex1);\n    complex0.log();\n    complex9.acos();\n    complex10.divide(complex7);\n    complex3.cos();\n}",
    "testName" : "test8484"
  },
  "test5050" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5050() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.isNaN();\n}",
    "testName" : "test5050"
  },
  "test7272" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7272() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.I;\n    complex0.I.add(complex1);\n    Complex complex2 = complex0.subtract(complex1);\n    Complex complex3 = complex1.I.divide(complex2);\n    Complex complex4 = complex3.divide(complex0);\n    Complex complex5 = complex4.NaN.sqrt();\n    Complex complex6 = complex5.I.tan();\n    complex6.ZERO.atan();\n    Complex complex7 = complex3.I.sin();\n    complex7.INF.sqrt1z();\n    Complex complex8 = complex2.sin();\n    complex8.createComplex((-3051.1), (-3051.1));\n    complex2.NaN.subtract(complex0);\n    Complex complex9 = complex2.NaN.atan();\n    complex0.abs();\n    complex1.ONE.acos();\n    complex1.subtract(complex2);\n    complex9.getReal();\n    complex8.acos();\n    complex5.atan();\n}",
    "testName" : "test7272"
  },
  "test022" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.sinh();\n    Complex complex2 = complex0.divide(complex0);\n    complex2.acos();\n    Complex complex3 = complex0.exp();\n    complex1.equals(complex0);\n    complex0.ONE.sinh();\n    complex0.cosh();\n    Complex complex4 = Complex.I;\n    complex4.INF.cosh();\n    complex3.divide(complex4);\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public Complex pow(Complex x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.pow((Complex) null);\n}",
    "testName" : "test066"
  },
  "test1818" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.INF;\n    complex1.multiply(complex0);\n    Complex complex2 = complex0.NaN.subtract(complex1);\n    complex2.NaN.cos();\n    Complex complex3 = complex0.atan();\n    Complex complex4 = complex3.NaN.tanh();\n    complex1.acos();\n    Complex complex5 = complex4.sin();\n    complex5.divide(complex3);\n    complex4.acos();\n}",
    "testName" : "test1818"
  },
  "test5757" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5757() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = new Complex(0.0, (-1183.3164516957));\n    Complex complex2 = complex0.add(complex1);\n    complex1.ONE.asin();\n    Complex complex3 = complex0.subtract(complex2);\n    complex3.ONE.hashCode();\n    Complex complex4 = complex1.sqrt();\n    complex4.cosh();\n    complex4.INF.sin();\n    complex2.I.cosh();\n    complex4.NaN.asin();\n    complex4.NaN.tan();\n    complex2.hashCode();\n    complex2.abs();\n}",
    "testName" : "test5757"
  },
  "test2323" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.ONE.acos();\n    complex0.isInfinite();\n}",
    "testName" : "test2323"
  },
  "test7979" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7979() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex1.atan();\n    complex0.ONE.multiply(complex2);\n    Complex complex3 = complex0.NaN.asin();\n    complex0.getReal();\n    Complex complex4 = complex3.INF.sqrt1z();\n    complex0.getImaginary();\n    Complex complex5 = complex3.tan();\n    complex5.NaN.asin();\n    Complex complex6 = complex3.acos();\n    Complex complex7 = complex6.asin();\n    complex7.exp();\n    complex6.INF.subtract(complex1);\n    complex6.atan();\n    complex7.INF.tan();\n    Complex complex8 = complex0.add(complex2);\n    complex8.ZERO.add(complex7);\n    complex8.subtract(complex7);\n    complex8.conjugate();\n    Complex complex9 = complex4.add(complex2);\n    complex9.tan();\n    complex4.log();\n}",
    "testName" : "test7979"
  },
  "test1313" : {
    "methodSignature" : "public Complex add(Complex rhs)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.I.log();\n    complex1.I.createComplex((-390.83975926481037), (-390.83975926481037));\n    complex1.NaN.sqrt1z();\n    Complex complex2 = complex0.cosh();\n    complex0.INF.sqrt1z();\n    complex2.getImaginary();\n    Complex complex3 = complex1.acos();\n    complex2.add(complex3);\n}",
    "testName" : "test1313"
  },
  "test4545" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4545() throws Throwable {\n    Complex complex0 = new Complex((-2219.6584337653), (-2219.6584337653));\n    Complex complex1 = Complex.INF;\n    complex1.ZERO.multiply(complex0);\n    Complex complex2 = complex0.NaN.pow(complex1);\n    complex2.INF.cosh();\n    complex0.ONE.tan();\n    complex1.ZERO.multiply(complex2);\n    complex1.INF.pow(complex2);\n    Complex complex3 = complex0.sqrt();\n    complex3.ONE.cos();\n    Complex complex4 = complex3.NaN.add(complex1);\n    Complex complex5 = complex0.log();\n    Complex complex6 = complex5.I.cos();\n    complex0.cosh();\n    Complex complex7 = Complex.ONE;\n    Complex complex8 = complex5.NaN.multiply(complex7);\n    complex0.exp();\n    complex6.equals(complex4);\n    complex8.cos();\n}",
    "testName" : "test4545"
  },
  "test3535" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ZERO.sin();\n    complex0.abs();\n    complex0.ONE.cos();\n    complex0.asin();\n    complex0.equals(complex1);\n    Complex complex2 = complex1.conjugate();\n    Complex complex3 = complex2.sqrt();\n    Complex complex4 = complex3.ONE.divide(complex2);\n    Complex complex5 = complex2.sin();\n    complex5.I.asin();\n    Complex complex6 = complex5.multiply(complex1);\n    complex6.asin();\n    complex3.getImaginary();\n    Complex complex7 = complex4.exp();\n    complex1.negate();\n    complex7.sqrt();\n}",
    "testName" : "test3535"
  },
  "test6767" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6767() throws Throwable {\n    Complex complex0 = new Complex((-160.37400995), (-2865.3408205399464));\n    Complex complex1 = new Complex(1215.191198536, (-242.9881993088024));\n    Complex complex2 = complex0.subtract(complex1);\n    complex0.hashCode();\n    complex1.NaN.sinh();\n    Complex complex3 = complex0.atan();\n    complex1.subtract(complex2);\n    Complex complex4 = complex3.multiply(complex0);\n    complex3.cos();\n    complex4.sinh();\n    Complex complex5 = Complex.ONE;\n    complex3.divide(complex5);\n}",
    "testName" : "test6767"
  },
  "test8989" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8989() throws Throwable {\n    Complex complex0 = new Complex(470.00681317, (-3029.47));\n    complex0.ZERO.sqrt();\n    Complex complex1 = new Complex((-3029.47), (-870.1));\n    Complex complex2 = complex0.I.multiply(complex1);\n    complex2.NaN.atan();\n    complex0.subtract((Complex) null);\n    complex0.ONE.pow(complex2);\n    Complex complex3 = complex0.I.sinh();\n    complex3.hashCode();\n    complex1.isNaN();\n}",
    "testName" : "test8989"
  },
  "test5555" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.INF;\n    Complex complex2 = complex1.ONE.divide(complex0);\n    complex2.sin();\n    Complex complex3 = complex0.multiply(complex1);\n    complex0.I.tanh();\n    Complex complex4 = complex3.asin();\n    complex3.I.cos();\n    Complex complex5 = complex4.sqrt();\n    Complex complex6 = complex5.conjugate();\n    complex6.INF.subtract(complex0);\n    complex5.INF.sinh();\n    complex5.cos();\n    complex3.log();\n}",
    "testName" : "test5555"
  },
  "test2121" : {
    "methodSignature" : "public Complex cosh()",
    "methodName" : "cosh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.cos();\n    Complex complex1 = complex0.tanh();\n    complex1.cosh();\n}",
    "testName" : "test2121"
  },
  "test7777" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7777() throws Throwable {\n    Complex complex0 = new Complex((-1681.68), 0.0);\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.I.subtract(complex1);\n    complex2.NaN.sqrt1z();\n    Complex complex3 = complex0.atan();\n    Complex complex4 = complex3.ZERO.tanh();\n    complex3.hashCode();\n    Complex complex5 = complex3.tan();\n    Complex complex6 = complex5.sqrt1z();\n    Complex complex7 = complex6.INF.subtract(complex1);\n    complex7.INF.atan();\n    Complex complex8 = complex0.divide(complex3);\n    Complex complex9 = complex8.NaN.cosh();\n    Complex complex10 = complex0.acos();\n    Complex complex11 = complex0.log();\n    Complex complex12 = complex10.NaN.log();\n    Complex complex13 = complex2.sinh();\n    Complex complex14 = complex13.I.divide(complex3);\n    Complex complex15 = complex14.ZERO.cos();\n    complex11.getImaginary();\n    complex10.isInfinite();\n    complex4.equals(complex2);\n    complex9.abs();\n    complex6.isNaN();\n    complex2.asin();\n    complex11.exp();\n    complex12.negate();\n    complex15.sqrt();\n}",
    "testName" : "test7777"
  },
  "test1111" : {
    "methodSignature" : "public Complex sqrt1z()",
    "methodName" : "sqrt1z",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.ONE.tanh();\n    Complex complex2 = complex1.ZERO.sqrt1z();\n    Complex complex3 = complex0.NaN.sinh();\n    Complex complex4 = complex0.INF.tan();\n    complex4.INF.tan();\n    complex4.NaN.createComplex(1.0, 1421.5139215);\n    Complex complex5 = complex0.negate();\n    complex1.ONE.negate();\n    Complex complex6 = complex5.NaN.divide(complex3);\n    Complex complex7 = complex5.tan();\n    Complex complex8 = complex7.NaN.divide(complex1);\n    complex6.NaN.createComplex(2165.6319138356293, 0.8813735870195429);\n    complex8.INF.hashCode();\n    complex6.NaN.conjugate();\n    Complex complex9 = complex0.conjugate();\n    complex3.add(complex6);\n    complex2.asin();\n    Complex complex10 = complex9.pow(complex2);\n    complex9.tan();\n    Complex complex11 = complex10.atan();\n    Complex complex12 = complex11.cosh();\n    Complex complex13 = complex10.negate();\n    complex9.tanh();\n    complex10.createComplex(1.0, 1.0);\n    complex0.log();\n    Complex complex14 = complex12.pow(complex13);\n    complex14.sqrt1z();\n}",
    "testName" : "test1111"
  },
  "test4343" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4343() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.I.sin();\n    complex1.sinh();\n    complex1.createComplex((-777.8817), 0.0);\n    Complex complex2 = complex1.ONE.tanh();\n    complex0.sqrt1z();\n    complex2.exp();\n}",
    "testName" : "test4343"
  },
  "test3333" : {
    "methodSignature" : "public Complex pow(Complex x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.INF.acos();\n    Complex complex2 = complex0.atan();\n    Complex complex3 = complex2.ZERO.sin();\n    complex2.sqrt();\n    complex2.cosh();\n    complex3.pow(complex1);\n}",
    "testName" : "test3333"
  },
  "test6565" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6565() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.ONE.tan();\n    Complex complex2 = complex1.ONE.atan();\n    Complex complex3 = complex0.I.sinh();\n    Complex complex4 = complex0.exp();\n    Complex complex5 = complex4.ZERO.add(complex3);\n    Complex complex6 = complex4.NaN.sin();\n    Complex complex7 = complex1.ONE.atan();\n    complex7.INF.add(complex4);\n    Complex complex8 = complex0.createComplex((-1934.24497), 2.0);\n    Complex complex9 = complex8.pow(complex2);\n    complex6.atan();\n    Complex complex10 = complex8.cos();\n    complex10.I.divide(complex2);\n    Complex complex11 = complex5.multiply(complex10);\n    complex11.abs();\n    complex11.abs();\n    complex2.getImaginary();\n    complex0.getReal();\n    complex9.hashCode();\n    complex3.hashCode();\n    complex6.negate();\n}",
    "testName" : "test6565"
  },
  "test8787" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8787() throws Throwable {\n    Complex complex0 = new Complex((-1.0), 2.0);\n    complex0.hashCode();\n    Complex complex1 = Complex.INF;\n    Complex complex2 = complex1.I.asin();\n    Complex complex3 = complex0.multiply(complex1);\n    Complex complex4 = complex0.conjugate();\n    complex1.INF.sqrt1z();\n    complex4.NaN.sqrt();\n    Complex complex5 = complex2.NaN.asin();\n    complex4.abs();\n    Complex complex6 = complex2.I.pow(complex0);\n    Complex complex7 = complex4.sqrt1z();\n    complex0.isNaN();\n    complex2.sqrt1z();\n    Complex complex8 = complex3.conjugate();\n    complex2.cos();\n    Complex complex9 = complex8.tanh();\n    Complex complex10 = complex6.sqrt();\n    complex8.tan();\n    Complex complex11 = complex9.ZERO.pow(complex7);\n    complex11.I.pow(complex10);\n    complex1.negate();\n    complex9.cos();\n    Complex complex12 = complex4.sinh();\n    complex11.multiply(complex12);\n    complex5.cosh();\n    Complex complex13 = complex5.sin();\n    complex13.divide(complex6);\n}",
    "testName" : "test8787"
  },
  "test011" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.sqrt1z();\n    Complex complex2 = complex1.ZERO.exp();\n    Complex complex3 = complex0.atan();\n    Complex complex4 = complex0.multiply(complex3);\n    complex1.equals(complex4);\n    complex1.equals(complex0);\n    Complex complex5 = complex4.subtract(complex0);\n    complex5.NaN.tanh();\n    complex5.ONE.createComplex(1.0, 1.0);\n    Complex complex6 = Complex.ZERO;\n    Complex complex7 = complex0.divide(complex6);\n    Complex complex8 = new Complex(1.0, 1.0);\n    Complex complex9 = complex3.log();\n    complex4.abs();\n    complex2.ONE.sin();\n    Complex complex10 = complex2.subtract(complex1);\n    complex0.isNaN();\n    complex0.equals(\"U%v\");\n    complex9.atan();\n    complex7.tanh();\n    complex10.sin();\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.tanh();\n    complex1.NaN.subtract(complex0);\n    Complex complex2 = complex0.I.log();\n    Complex complex3 = complex2.I.sin();\n    Complex complex4 = complex0.I.tanh();\n    Complex complex5 = complex3.I.divide(complex4);\n    complex2.ONE.asin();\n    complex0.negate();\n    complex0.equals((Object) null);\n    complex3.conjugate();\n    Complex complex6 = complex2.exp();\n    Complex complex7 = complex5.cos();\n    complex0.equals(complex1);\n    Complex complex8 = complex6.NaN.cos();\n    complex0.sinh();\n    complex1.cos();\n    complex8.isInfinite();\n    complex8.multiply(complex1);\n    complex7.tanh();\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Complex complex0 = new Complex(10.0, (-3432.05322));\n    Complex complex1 = complex0.I.createComplex(7.544137102816978, 7.544137102816978);\n    Complex complex2 = new Complex(7.544137102816978, 7.544137102816978);\n    Complex complex3 = complex2.ONE.pow(complex0);\n    Complex complex4 = complex2.INF.createComplex(10.0, 7.544137102816978);\n    Complex complex5 = complex1.sqrt1z();\n    Complex complex6 = complex2.ONE.sinh();\n    Complex complex7 = complex6.ZERO.negate();\n    complex5.NaN.negate();\n    Complex complex8 = complex7.INF.tan();\n    complex0.ONE.hashCode();\n    complex5.INF.log();\n    Complex complex9 = complex0.subtract(complex2);\n    Complex complex10 = new Complex(7.544137102816978, 7.544137102816978);\n    complex1.abs();\n    Complex complex11 = complex8.tanh();\n    Complex complex12 = Complex.ONE;\n    Complex complex13 = complex9.acos();\n    complex11.conjugate();\n    complex10.subtract(complex13);\n    complex4.sinh();\n    complex6.sin();\n    complex3.tan();\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.atan();\n    complex1.pow(complex0);\n    complex1.sinh();\n    complex0.ZERO.tanh();\n    complex1.cos();\n    complex0.sqrt();\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.asin();\n    complex0.subtract(complex1);\n    complex0.conjugate();\n}",
    "testName" : "test1717"
  },
  "test4949" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.ZERO.asin();\n    complex1.INF.cosh();\n    complex0.I.conjugate();\n    Complex complex2 = complex0.tanh();\n    Complex complex3 = complex2.pow(complex0);\n    complex2.getReal();\n    Complex complex4 = complex1.cosh();\n    complex4.ONE.acos();\n    Complex complex5 = complex3.atan();\n    complex3.cosh();\n    Object object0 = new Object();\n    complex5.equals(object0);\n}",
    "testName" : "test4949"
  },
  "test3939" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.atan();\n    Complex complex2 = complex1.cos();\n    complex2.INF.sinh();\n    Complex complex3 = new Complex(197.128545704, 0.34697285770402114);\n    complex1.ZERO.add(complex3);\n    complex1.negate();\n    complex1.pow(complex0);\n    Complex complex4 = complex2.sinh();\n    complex3.divide(complex4);\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.ONE.exp();\n    Complex complex2 = complex1.INF.atan();\n    complex1.ONE.log();\n    complex2.ONE.sinh();\n    Complex complex3 = complex0.createComplex((-3540.78), Double.POSITIVE_INFINITY);\n    complex0.multiply(complex2);\n    complex3.NaN.add((Complex) null);\n    Complex complex4 = complex0.log();\n    complex4.ONE.tan();\n    complex0.atan();\n}",
    "testName" : "test5959"
  },
  "test2525" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.NaN.sinh();\n    Complex complex2 = complex0.NaN.tan();\n    complex0.isInfinite();\n    complex0.abs();\n    complex2.equals(complex1);\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.I.hashCode();\n    Complex complex1 = complex0.sqrt();\n    complex1.getReal();\n}",
    "testName" : "test1515"
  },
  "test4747" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4747() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.ZERO.acos();\n    Complex complex2 = complex0.NaN.cos();\n    complex2.ZERO.add(complex1);\n    complex2.ONE.negate();\n    Complex complex3 = complex0.log();\n    complex1.I.exp();\n    Complex complex4 = complex0.conjugate();\n    complex3.divide(complex1);\n    Complex complex5 = complex3.multiply(complex4);\n    complex5.divide(complex1);\n}",
    "testName" : "test4747"
  },
  "test3737" : {
    "methodSignature" : "public Complex cosh()",
    "methodName" : "cosh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.ONE.multiply(complex1);\n    Complex complex3 = complex0.ONE.cosh();\n    complex2.ONE.subtract(complex1);\n    complex3.NaN.sqrt1z();\n    Complex complex4 = complex0.createComplex(2208.740607618692, (-2083.8));\n    complex4.sqrt1z();\n    complex2.cos();\n    complex2.hashCode();\n    complex0.cosh();\n}",
    "testName" : "test3737"
  },
  "test6969" : {
    "methodSignature" : "public Complex add(Complex rhs)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6969() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = new Complex((-792.473236817), (-792.473236817));\n    complex0.I.pow(complex1);\n    complex0.hashCode();\n    complex0.hashCode();\n    complex0.sinh();\n    complex0.getImaginary();\n    Complex complex2 = complex0.createComplex(1.0, 1.0);\n    complex0.add(complex2);\n}",
    "testName" : "test6969"
  },
  "test7171" : {
    "methodSignature" : "public Complex pow(Complex x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7171() throws Throwable {\n    Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);\n    Complex complex1 = complex0.ONE.createComplex(2.0, (-1.0));\n    complex1.INF.createComplex(2.0, 0.0);\n    complex1.add(complex0);\n    complex0.pow((Complex) null);\n}",
    "testName" : "test7171"
  },
  "test9595" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9595() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.exp();\n    Complex complex2 = complex1.ONE.atan();\n    Complex complex3 = complex2.INF.pow(complex1);\n    complex0.isInfinite();\n    complex2.multiply(complex0);\n    Complex complex4 = complex0.createComplex(768.44308694, Double.POSITIVE_INFINITY);\n    Complex complex5 = complex4.exp();\n    complex5.ONE.conjugate();\n    complex4.isInfinite();\n    Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 768.44308694);\n    complex3.INF.tan();\n    complex4.pow(complex6);\n    Complex complex7 = complex3.exp();\n    complex4.atan();\n    complex7.conjugate();\n}",
    "testName" : "test9595"
  },
  "test8181" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8181() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.divide((Complex) null);\n    complex1.asin();\n}",
    "testName" : "test8181"
  },
  "test5353" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5353() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ONE.sqrt();\n    complex1.NaN.asin();\n    complex1.I.hashCode();\n    Complex complex2 = complex0.tanh();\n    complex2.ZERO.createComplex(0.0, 0.0);\n    complex2.sin();\n    complex0.tan();\n}",
    "testName" : "test5353"
  },
  "test7575" : {
    "methodSignature" : "public Complex add(Complex rhs)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7575() throws Throwable {\n    Complex complex0 = new Complex(494.6711311699403, 494.6711311699403);\n    Complex complex1 = Complex.I;\n    complex0.multiply(complex1);\n    complex0.ONE.hashCode();\n    complex0.abs();\n    complex0.sin();\n    Complex complex2 = complex0.multiply(complex1);\n    complex2.isInfinite();\n    complex1.add(complex2);\n}",
    "testName" : "test7575"
  },
  "test4141" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.cosh();\n    complex0.subtract(complex1);\n    Complex complex2 = new Complex(0.0, 1.0);\n    complex2.multiply(complex0);\n    complex2.exp();\n    Complex complex3 = complex2.exp();\n    complex2.atan();\n    Complex complex4 = complex0.divide(complex2);\n    complex4.tan();\n    complex3.negate();\n}",
    "testName" : "test4141"
  },
  "test6363" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6363() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.INF.cosh();\n    Complex complex1 = complex0.ONE.createComplex((-1947.5748239076702), (-1947.5748239076702));\n    Complex complex2 = complex1.ZERO.acos();\n    complex2.NaN.tanh();\n    Complex complex3 = complex0.cosh();\n    complex1.getReal();\n    complex0.acos();\n    complex3.sqrt();\n}",
    "testName" : "test6363"
  },
  "test9191" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9191() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.NaN.sin();\n    Complex complex2 = complex1.ZERO.tan();\n    complex0.NaN.divide(complex2);\n    complex2.hashCode();\n    Complex complex3 = Complex.ZERO;\n    Complex complex4 = complex3.ONE.cosh();\n    Complex complex5 = complex4.asin();\n    Complex complex6 = complex2.tanh();\n    complex6.INF.add(complex2);\n    Complex complex7 = complex2.exp();\n    complex0.isInfinite();\n    Complex complex8 = complex0.log();\n    Complex complex9 = complex5.add(complex7);\n    complex8.divide(complex9);\n    complex6.cos();\n}",
    "testName" : "test9191"
  },
  "test3131" : {
    "methodSignature" : "public Complex multiply(Complex rhs)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    Complex complex0 = new Complex(5311.3745360906, 0.0);\n    complex0.tan();\n    complex0.sinh();\n    Complex complex1 = complex0.asin();\n    complex1.multiply(complex0);\n}",
    "testName" : "test3131"
  },
  "test8585" : {
    "methodSignature" : "public Complex pow(Complex x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8585() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.sqrt();\n    Complex complex2 = complex1.INF.multiply(complex0);\n    Complex complex3 = complex0.createComplex(1191.6533687, (-1649.7033461966562));\n    Complex complex4 = complex3.ONE.negate();\n    Complex complex5 = complex3.I.subtract(complex2);\n    complex5.NaN.tanh();\n    Complex complex6 = complex3.pow(complex1);\n    complex6.getImaginary();\n    Complex complex7 = complex0.pow(complex3);\n    complex7.ONE.conjugate();\n    Complex complex8 = complex3.sqrt();\n    Complex complex9 = complex8.multiply(complex7);\n    complex8.multiply(complex6);\n    Complex complex10 = complex9.NaN.exp();\n    Complex complex11 = complex8.ONE.cosh();\n    Complex complex12 = complex4.sin();\n    complex12.I.pow(complex11);\n    complex12.ONE.createComplex((-1649.7033461966562), (-1649.7033461966562));\n    complex9.tan();\n    Complex complex13 = complex0.sinh();\n    complex13.I.pow(complex4);\n    complex5.abs();\n    Complex complex14 = complex10.sin();\n    complex3.cos();\n    complex14.pow(complex5);\n}",
    "testName" : "test8585"
  },
  "test5151" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    Complex complex0 = new Complex(0.0, 889.38078);\n    Complex complex1 = complex0.acos();\n    complex1.hashCode();\n    Complex complex2 = complex1.log();\n    Complex complex3 = complex1.asin();\n    complex0.I.cos();\n    complex3.equals(\"org.apache.commons.math.complex.Complex\");\n    Complex complex4 = complex1.ONE.conjugate();\n    complex1.INF.atan();\n    complex0.abs();\n    complex2.isInfinite();\n    complex2.negate();\n    complex4.getImaginary();\n    complex0.I.sin();\n    complex2.negate();\n    Complex complex5 = complex3.I.exp();\n    complex5.negate();\n    Complex complex6 = Complex.ONE;\n    Complex complex7 = complex6.ZERO.acos();\n    complex3.pow(complex6);\n    complex7.abs();\n    complex3.tan();\n}",
    "testName" : "test5151"
  },
  "test7373" : {
    "methodSignature" : "public Complex cosh()",
    "methodName" : "cosh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7373() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.acos();\n    Complex complex2 = complex1.subtract(complex0);\n    Complex complex3 = complex2.NaN.asin();\n    Complex complex4 = complex0.I.cosh();\n    Complex complex5 = complex1.I.subtract(complex4);\n    complex5.ONE.exp();\n    Complex complex6 = complex3.INF.sin();\n    complex4.INF.log();\n    Complex complex7 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);\n    Complex complex8 = complex5.tanh();\n    complex7.tanh();\n    Complex complex9 = complex1.ZERO.sqrt();\n    complex9.ONE.log();\n    complex1.getReal();\n    complex3.hashCode();\n    complex5.isNaN();\n    complex0.getReal();\n    Complex complex10 = complex1.tan();\n    complex2.pow(complex0);\n    complex6.exp();\n    Complex complex11 = complex3.cosh();\n    complex11.divide(complex2);\n    complex10.multiply(complex4);\n    complex1.cos();\n    complex8.abs();\n    complex4.cosh();\n}",
    "testName" : "test7373"
  },
  "test6161" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6161() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.I;\n    Complex complex2 = complex0.divide(complex1);\n    Complex complex3 = complex1.tan();\n    complex0.abs();\n    Complex complex4 = complex3.INF.sinh();\n    Complex complex5 = complex2.cos();\n    Complex complex6 = complex5.log();\n    Complex complex7 = complex1.add(complex3);\n    complex0.ONE.subtract(complex2);\n    complex7.I.subtract(complex3);\n    complex7.ONE.acos();\n    complex2.exp();\n    complex4.log();\n    Complex complex8 = complex7.multiply(complex6);\n    complex8.I.asin();\n    complex2.ONE.log();\n    complex8.equals(\"\");\n}",
    "testName" : "test6161"
  },
  "test9393" : {
    "methodSignature" : "public Complex multiply(Complex rhs)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9393() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.isNaN();\n    Complex complex1 = complex0.conjugate();\n    complex1.ZERO.subtract(complex0);\n    Complex complex2 = complex0.multiply((Complex) null);\n    complex2.ZERO.multiply(complex1);\n}",
    "testName" : "test9393"
  },
  "test8383" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8383() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = Complex.ONE;\n    Complex complex2 = complex0.I.multiply(complex1);\n    complex0.isInfinite();\n    Complex complex3 = complex0.acos();\n    Complex complex4 = Complex.ZERO;\n    Complex complex5 = complex0.INF.add(complex4);\n    Complex complex6 = complex3.createComplex(0.0, 2.0);\n    complex6.NaN.tanh();\n    complex1.getReal();\n    Complex complex7 = complex2.add(complex3);\n    Complex complex8 = complex7.ONE.conjugate();\n    Complex complex9 = complex8.createComplex(1.0, 0.0);\n    Complex complex10 = complex3.sin();\n    complex0.I.divide(complex9);\n    complex3.hashCode();\n    complex10.tan();\n    complex0.divide(complex5);\n}",
    "testName" : "test8383"
  },
  "test000" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.INF.log();\n    Complex complex2 = complex0.subtract((Complex) null);\n    Complex complex3 = complex2.sqrt1z();\n    Complex complex4 = complex3.sin();\n    complex4.NaN.sqrt();\n    Complex complex5 = complex0.I.tan();\n    Complex complex6 = complex5.I.sin();\n    complex0.I.cosh();\n    complex5.INF.multiply(complex3);\n    Complex complex7 = complex2.sqrt();\n    complex7.ONE.divide(complex1);\n    Complex complex8 = Complex.NaN;\n    complex2.conjugate();\n    complex6.getReal();\n    complex8.exp();\n    complex7.acos();\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public Complex divide(Complex rhs)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.I.sinh();\n    Complex complex2 = complex0.cosh();\n    Complex complex3 = Complex.INF;\n    Complex complex4 = complex3.NaN.asin();\n    complex4.INF.add(complex2);\n    Complex complex5 = complex2.INF.createComplex((-1468.73531619093), (-1468.73531619093));\n    complex0.INF.sinh();\n    Complex complex6 = complex5.sqrt();\n    Complex complex7 = complex2.INF.acos();\n    complex2.ZERO.pow(complex1);\n    complex3.I.sqrt();\n    Complex complex8 = Complex.NaN;\n    Complex complex9 = complex8.NaN.negate();\n    Complex complex10 = complex0.pow(complex8);\n    complex8.I.pow(complex3);\n    complex8.isNaN();\n    complex0.divide(complex9);\n    complex8.NaN.sqrt1z();\n    Complex complex11 = complex7.ZERO.tanh();\n    Complex complex12 = Complex.INF;\n    complex10.log();\n    complex6.multiply(complex12);\n    Complex complex13 = complex9.negate();\n    complex13.NaN.add(complex11);\n    complex9.hashCode();\n    complex1.abs();\n    Complex complex14 = complex1.cosh();\n    complex14.getReal();\n    Complex complex15 = complex1.atan();\n    complex15.add(complex6);\n    complex6.divide(complex2);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.exp();\n    complex0.isInfinite();\n    Complex complex2 = complex1.NaN.divide(complex1);\n    Complex complex3 = complex0.NaN.tan();\n    Complex complex4 = Complex.ONE;\n    complex3.ZERO.pow(complex4);\n    Complex complex5 = complex1.conjugate();\n    complex5.hashCode();\n    Complex complex6 = complex1.sqrt1z();\n    Complex complex7 = complex1.cosh();\n    complex6.NaN.pow(complex0);\n    complex6.ZERO.sinh();\n    complex6.ZERO.exp();\n    Complex complex8 = complex1.negate();\n    complex3.abs();\n    complex1.ONE.hashCode();\n    Complex complex9 = complex8.cosh();\n    complex0.asin();\n    Complex complex10 = Complex.NaN;\n    complex2.tanh();\n    Complex complex11 = complex6.atan();\n    complex11.I.pow(complex9);\n    complex8.cos();\n    complex11.isInfinite();\n    Complex complex12 = complex7.createComplex((-8.333741798626477), Double.NaN);\n    complex12.negate();\n    complex10.negate();\n    complex9.sinh();\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "protected Complex createComplex(double real, double imaginary)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.INF.log();\n    Complex complex1 = complex0.conjugate();\n    Complex complex2 = complex1.sinh();\n    complex2.asin();\n    complex1.cosh();\n    complex0.asin();\n    complex1.createComplex((-812.52763692), 0.0);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.tan();\n    complex0.log();\n    complex0.cos();\n    complex1.tanh();\n}",
    "testName" : "test1919"
  }
}