project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[3] = (byte) 3;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    well19937c0.nextBoolean();
    well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    multiStartUnivariateRealOptimizer0.getOptima();
    multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    multiStartUnivariateRealOptimizer0.getEvaluations();
    Random.setNextRandom(245616);
    Random.setNextRandom(245616);
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) 100;
    doubleArray0[1] = (-126.151);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType1 = GoalType.MAXIMIZE;
    multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, (-1.0), 2853.149559891947, 4003.82806161574);
}",0,
project,0,test022,"public void test022() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test023,"public void test023() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test024,"public void test024() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    assertNotNull(univariateRealPointValuePair0);
}",0,assertNotNull(univariateRealPointValuePair0)
project,0,test025,"public void test025() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    assertNotNull(well19937c0);
}",0,assertNotNull(well19937c0)
project,0,test026,"public void test026() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    assertArrayEquals(new byte[] { (byte) (-4), (byte) 21, (byte) 69, (byte) (-66) }, byteArray0);
}",0,
project,0,test028,"public void test028() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test029,"public void test029() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test0210,"public void test0210() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test0211,"public void test0211() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test0213,"public void test0213() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0214,"public void test0214() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    assertEquals(0.21316564F, float0, 0.01F);
}",0,
project,0,test0215,"public void test0215() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test0216,"public void test0216() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test0217,"public void test0217() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test0218,"public void test0218() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test0219,"public void test0219() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(253.362, univariateRealPointValuePair1.getPoint(), 0.01);
}",0,
project,0,test0220,"public void test0220() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(53.0, univariateRealPointValuePair1.getValue(), 0.01);
}",0,
project,0,test0221,"public void test0221() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertNotNull(univariateRealPointValuePair1);
}",0,"assertEquals(univariateRealPointValuePair0, univariateRealPointValuePair1)"
project,0,test0224,"public void test0224() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test0225,"public void test0225() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test0226,"public void test0226() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test0227,"public void test0227() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test0228,"public void test0228() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertNotNull(univariateRealPointValuePairArray0);
}",1,
project,0,test0232,"public void test0232() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test0233,"public void test0233() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test0234,"public void test0234() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test0235,"public void test0235() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test0236,"public void test0236() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertNotNull(univariateRealPointValuePairArray1);
}",1,
project,0,test0240,"public void test0240() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test0241,"public void test0241() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test0242,"public void test0242() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test0243,"public void test0243() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test0244,"public void test0244() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) 5;
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
}",0,
project,0,test0346,"public void test0346() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a();
    assertNotNull(well512a0);
}",0,assertNotNull(well512a0)
project,0,test0347,"public void test0347() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test0348,"public void test0348() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test0350,"public void test0350() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test0351,"public void test0351() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test0352,"public void test0352() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(0, int0);
}",0,
project,0,test0453,"public void test0453() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    assertEquals(2906.946, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test0454,"public void test0454() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    assertEquals(0.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test0455,"public void test0455() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    assertNotNull(univariateRealPointValuePair0);
}",0,
project,0,test0456,"public void test0456() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    assertNotNull(well1024a0);
}",0,assertNotNull(well1024a0)
project,0,test0459,"public void test0459() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    assertEquals(2906.946, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test0460,"public void test0460() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    assertEquals(0.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test0461,"public void test0461() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test0462,"public void test0462() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test0466,"public void test0466() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertEquals(5, polynomialFunction0.degree());
}",0,
project,0,test0467,"public void test0467() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction0);
}",1,
project,0,test0470,"public void test0470() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(5, polynomialFunction0.degree());
}",0,
project,0,test0471,"public void test0471() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(2906.946, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test0472,"public void test0472() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(0.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test0473,"public void test0473() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(2906.946, univariateRealPointValuePair1.getPoint(), 0.01);
}",0,
project,0,test0474,"public void test0474() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(0.0, univariateRealPointValuePair1.getValue(), 0.01);
}",0,
project,0,test0475,"public void test0475() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test0476,"public void test0476() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(253, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test0477,"public void test0477() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertNotNull(univariateRealPointValuePair1);
}",0,
project,0,test0485,"public void test0485() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1, 1.0, (-2945.7451));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // none of the 1 start points lead to convergence: convergence failed
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test0586,"public void test0586() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    assertNotNull(well44497b0);
}",0,assertNotNull(well44497b0)
project,0,test0587,"public void test0587() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0588,"public void test0588() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test0589,"public void test0589() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test0591,"public void test0591() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertEquals(6, polynomialFunction0.degree());
}",0,"assertEquals(0, polynomialFunction0.degree())"
project,0,test0592,"public void test0592() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction0);
}",1,
project,0,test0595,"public void test0595() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    assertTrue(polynomialFunction1.equals((Object) polynomialFunction0));
}",0,
project,0,test0596,"public void test0596() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    assertEquals(6, polynomialFunction1.degree());
}",0,
project,0,test0597,"public void test0597() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction1);
}",1,
project,0,test05100,"public void test05100() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    assertTrue(polynomialFunction0.equals((Object) polynomialFunction1));
}",0,
project,0,test05101,"public void test05101() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    assertTrue(polynomialFunction1.equals((Object) polynomialFunction0));
}",0,
project,0,test05102,"public void test05102() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    assertFalse(polynomialFunction2.equals((Object) polynomialFunction0));
}",0,
project,0,test05103,"public void test05103() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    assertFalse(polynomialFunction2.equals((Object) polynomialFunction1));
}",0,
project,0,test05104,"public void test05104() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    assertEquals(6, polynomialFunction0.degree());
}",0,"assertEquals(0, polynomialFunction0.degree())"
project,0,test05105,"public void test05105() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    assertEquals(6, polynomialFunction1.degree());
}",0,
project,0,test05106,"public void test05106() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    assertEquals(12, polynomialFunction2.degree());
}",0,
project,0,test05107,"public void test05107() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    assertNotNull(polynomialFunction2);
}",0,"assertEquals(polynomialFunction0, polynomialFunction2)"
project,0,test05116,"public void test05116() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertFalse(polynomialFunction3.equals((Object) polynomialFunction0));
}",0,
project,0,test05117,"public void test05117() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertFalse(polynomialFunction3.equals((Object) polynomialFunction1));
}",0,
project,0,test05118,"public void test05118() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertFalse(polynomialFunction3.equals((Object) polynomialFunction2));
}",0,
project,0,test05119,"public void test05119() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertFalse(polynomialFunction0.equals((Object) polynomialFunction2));
}",0,
project,0,test05120,"public void test05120() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertTrue(polynomialFunction0.equals((Object) polynomialFunction1));
}",0,
project,0,test05121,"public void test05121() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertFalse(polynomialFunction1.equals((Object) polynomialFunction2));
}",0,
project,0,test05122,"public void test05122() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertTrue(polynomialFunction1.equals((Object) polynomialFunction0));
}",0,
project,0,test05123,"public void test05123() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertEquals(6, polynomialFunction3.degree());
}",0,
project,0,test05124,"public void test05124() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertEquals(6, polynomialFunction0.degree());
}",0,"assertEquals(0, polynomialFunction0.degree())"
project,0,test05125,"public void test05125() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertEquals(6, polynomialFunction1.degree());
}",0,
project,0,test05126,"public void test05126() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 3694;
    Well44497b well44497b0 = new Well44497b();
    boolean boolean0 = well44497b0.nextBoolean();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 3694;
    doubleArray0[1] = (double) 3694;
    doubleArray0[2] = (double) 3694;
    doubleArray0[3] = (double) 3694;
    doubleArray0[4] = (double) 3694;
    doubleArray0[5] = (double) 3694;
    doubleArray0[6] = (double) 3694;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    assertNotNull(polynomialFunction3);
}",1,
project,0,test06138,"public void test06138() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[1];
    intArray0[0] = (-1);
    Well1024a well1024a0 = new Well1024a(intArray0);
    assertNotNull(well1024a0);
}",0,
project,0,test06141,"public void test06141() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[1];
    intArray0[0] = (-1);
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test06142,"public void test06142() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[1];
    intArray0[0] = (-1);
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test06146,"public void test06146() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[1];
    intArray0[0] = (-1);
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) 213;
    doubleArray0[1] = (double) (-1);
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    assertEquals(1, polynomialFunctionLagrangeForm0.degree());
}",0,"assertEquals(0, polynomialFunctionLagrangeForm0.degree())"
project,0,test06147,"public void test06147() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[1];
    intArray0[0] = (-1);
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) 213;
    doubleArray0[1] = (double) (-1);
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    assertNotNull(polynomialFunctionLagrangeForm0);
}",1,
project,0,test06150,"public void test06150() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[1];
    intArray0[0] = (-1);
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) 213;
    doubleArray0[1] = (double) (-1);
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunctionLagrangeForm0, goalType0, (-586.2123524978173), (double) (-1));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // none of the 878 start points lead to convergence: convergence failed
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test07151,"public void test07151() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    assertEquals(95.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test07152,"public void test07152() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    assertEquals(95.0, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test07153,"public void test07153() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    assertNotNull(univariateRealPointValuePair0);
}",0,
project,0,test07154,"public void test07154() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    assertNotNull(well1024a0);
}",0,assertNotNull(well1024a0)
project,0,test07157,"public void test07157() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    assertEquals(95.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test07158,"public void test07158() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    assertEquals(95.0, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test07159,"public void test07159() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test07160,"public void test07160() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test07164,"public void test07164() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertEquals(5, polynomialFunction0.degree());
}",0,
project,0,test07165,"public void test07165() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction0);
}",1,
project,0,test07168,"public void test07168() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(5, polynomialFunction0.degree());
}",0,
project,0,test07169,"public void test07169() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(95.0, univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test07170,"public void test07170() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(95.0, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test07171,"public void test07171() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(95.0, univariateRealPointValuePair1.getValue(), 0.01);
}",0,
project,0,test07172,"public void test07172() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(95.0, univariateRealPointValuePair1.getPoint(), 0.01);
}",0,
project,0,test07173,"public void test07173() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals((-1), multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test07174,"public void test07174() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test07175,"public void test07175() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    assertNotNull(univariateRealPointValuePair1);
}",0,
project,0,test07183,"public void test07183() throws Throwable {
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int[] intArray0 = new int[4];
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    intArray0[3] = 1;
    Well1024a well1024a0 = new Well1024a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) 1;
    doubleArray0[4] = (double) 1;
    doubleArray0[5] = (double) 1;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    GoalType goalType1 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1, 1.0, (-2945.7451));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // none of the 1 start points lead to convergence: convergence failed
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test08184,"public void test08184() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test08185,"public void test08185() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test08186,"public void test08186() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    assertNotNull(univariateRealPointValuePair0);
}",0,assertNotNull(univariateRealPointValuePair0)
project,0,test08187,"public void test08187() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    assertNotNull(well19937c0);
}",0,assertNotNull(well19937c0)
project,0,test08188,"public void test08188() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    assertArrayEquals(new byte[] { (byte) (-4), (byte) 21, (byte) 69, (byte) (-66) }, byteArray0);
}",0,
project,0,test08190,"public void test08190() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test08191,"public void test08191() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test08192,"public void test08192() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test08193,"public void test08193() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test08195,"public void test08195() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    assertTrue(boolean0);
}",0,
project,0,test08196,"public void test08196() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    assertEquals(0.21316564F, float0, 0.01F);
}",0,
project,0,test08197,"public void test08197() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test08198,"public void test08198() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test08199,"public void test08199() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test08200,"public void test08200() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test08201,"public void test08201() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals((-126.151), univariateRealPointValuePair1.getValue(), 0.01);
}",0,
project,0,test08202,"public void test08202() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertEquals(253.362, univariateRealPointValuePair1.getPoint(), 0.01);
}",0,
project,0,test08203,"public void test08203() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    assertNotNull(univariateRealPointValuePair1);
}",0,
project,0,test08206,"public void test08206() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test08207,"public void test08207() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test08208,"public void test08208() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test08209,"public void test08209() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test08210,"public void test08210() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    assertNotNull(univariateRealPointValuePairArray0);
}",1,
project,0,test08214,"public void test08214() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test08215,"public void test08215() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test08216,"public void test08216() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test08217,"public void test08217() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test08218,"public void test08218() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    assertNotNull(univariateRealPointValuePairArray1);
}",1,
project,0,test08222,"public void test08222() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
}",0,
project,0,test08223,"public void test08223() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
}",0,
project,0,test08224,"public void test08224() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test08225,"public void test08225() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test08226,"public void test08226() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
}",0,
project,0,test09228,"public void test09228() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    assertNotNull(mersenneTwister0);
}",0,assertNotNull(mersenneTwister0)
project,0,test09229,"public void test09229() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test09230,"public void test09230() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test09232,"public void test09232() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test09233,"public void test09233() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test09234,"public void test09234() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    assertNotNull(convergenceChecker1);
}",0,
project,0,test09236,"public void test09236() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,
project,0,test09237,"public void test09237() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test09239,"public void test09239() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
    int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,
project,0,test09240,"public void test09240() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
    int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test09241,"public void test09241() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
    int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
    assertEquals(0, int0);
}",0,
project,0,test09242,"public void test09242() throws Throwable {
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(convergenceChecker0).toString();
    BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
    int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer1.getOptima();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no optimum computed yet
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",1,
project,0,test10243,"public void test10243() throws Throwable {
    System.setCurrentTimeMillis(0L);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 2450;
    Well19937c well19937c0 = new Well19937c(2450);
    assertNotNull(well19937c0);
}",0,assertNotNull(well19937c0)
project,0,test10244,"public void test10244() throws Throwable {
    System.setCurrentTimeMillis(0L);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 2450;
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    assertArrayEquals(new byte[] { (byte) (-4), (byte) 21, (byte) 69, (byte) (-66) }, byteArray0);
}",0,
project,0,test10246,"public void test10246() throws Throwable {
    System.setCurrentTimeMillis(0L);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 2450;
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test10247,"public void test10247() throws Throwable {
    System.setCurrentTimeMillis(0L);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 2450;
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test10249,"public void test10249() throws Throwable {
    System.setCurrentTimeMillis(0L);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 2450;
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test10250,"public void test10250() throws Throwable {
    System.setCurrentTimeMillis(0L);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 2450;
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    assertEquals(0.21316564F, float0, 0.01F);
}",0,
project,0,test10251,"public void test10251() throws Throwable {
    System.setCurrentTimeMillis(0L);
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 2450;
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 5;
    byteArray0[1] = (byte) 3;
    byteArray0[2] = (byte) (-1);
    byteArray0[3] = (byte) 0;
    well19937c0.nextBytes(byteArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    boolean boolean0 = well19937c0.nextBoolean();
    float float0 = well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // none of the 2,450 start points lead to convergence: convergence failed
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test11252,"public void test11252() throws Throwable {
    int int0 = 0;
    RandomGenerator randomGenerator0 = null;
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test11253,"public void test11253() throws Throwable {
    int int0 = 0;
    RandomGenerator randomGenerator0 = null;
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test11255,"public void test11255() throws Throwable {
    int int0 = 0;
    RandomGenerator randomGenerator0 = null;
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,
project,0,test11256,"public void test11256() throws Throwable {
    int int0 = 0;
    RandomGenerator randomGenerator0 = null;
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test11258,"public void test11258() throws Throwable {
    int int0 = 0;
    RandomGenerator randomGenerator0 = null;
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations())"
project,0,test11259,"public void test11259() throws Throwable {
    int int0 = 0;
    RandomGenerator randomGenerator0 = null;
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test11260,"public void test11260() throws Throwable {
    int int0 = 0;
    RandomGenerator randomGenerator0 = null;
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    assertNull(convergenceChecker0);
}",0,assertNotNull(convergenceChecker0)
project,0,test11261,"public void test11261() throws Throwable {
    int int0 = 0;
    RandomGenerator randomGenerator0 = null;
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test12262,"public void test12262() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    assertNotNull(well1024a0);
}",0,assertNotNull(well1024a0)
project,0,test12263,"public void test12263() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    float float0 = well1024a0.nextFloat();
    assertEquals(0.37931466F, float0, 0.01F);
}",0,
project,0,test12264,"public void test12264() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    float float0 = well1024a0.nextFloat();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test12265,"public void test12265() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    float float0 = well1024a0.nextFloat();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test12267,"public void test12267() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    float float0 = well1024a0.nextFloat();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
    assertEquals(116, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test12268,"public void test12268() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    float float0 = well1024a0.nextFloat();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test12269,"public void test12269() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    float float0 = well1024a0.nextFloat();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 116, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,
project,0,test12270,"public void test12270() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    float float0 = well1024a0.nextFloat();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 116, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test12272,"public void test12272() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    float float0 = well1024a0.nextFloat();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 116, well1024a0);
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer1.optimize((PolynomialFunction) null, goalType0, 1485.7335344, (double) 0.37931466F);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test13273,"public void test13273() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test13274,"public void test13274() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(1, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test13276,"public void test13276() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (double) 1039;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertEquals(0, polynomialFunction0.degree());
}",0,"assertEquals(0, polynomialFunction0.degree())"
project,0,test13277,"public void test13277() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (double) 1039;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction0);
}",1,
project,0,test13280,"public void test13280() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (double) 1039;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1039, 1.0, (-0.16666666666666666));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test14281,"public void test14281() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    assertNotNull(well1024a0);
}",0,assertNotNull(well1024a0)
project,0,test14282,"public void test14282() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test14283,"public void test14283() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(1, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test14285,"public void test14285() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test14286,"public void test14286() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
    assertEquals(1, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test14287,"public void test14287() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test14288,"public void test14288() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(1, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test14289,"public void test14289() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(1, int0);
}",0,
project,0,test14290,"public void test14290() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-2728), well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,
project,0,test14291,"public void test14291() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-2728), well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test14293,"public void test14293() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well1024a well1024a0 = new Well1024a();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-2728), well1024a0);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 1;
    doubleArray0[2] = (double) 1;
    doubleArray0[3] = (double) (-2728);
    PolynomialFunctionNewtonForm polynomialFunctionNewtonForm0 = null;
    try {
        polynomialFunctionNewtonForm0 = new PolynomialFunctionNewtonForm(doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // array sizes should have difference 1 (4 != 4 + 1)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test15294,"public void test15294() throws Throwable {
    int int0 = 112;
    Well19937c well19937c0 = new Well19937c((long) 112);
    assertNotNull(well19937c0);
}",0,
project,0,test15295,"public void test15295() throws Throwable {
    int int0 = 112;
    Well19937c well19937c0 = new Well19937c((long) 112);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 112, well19937c0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test15296,"public void test15296() throws Throwable {
    int int0 = 112;
    Well19937c well19937c0 = new Well19937c((long) 112);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 112, well19937c0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test15298,"public void test15298() throws Throwable {
    int int0 = 112;
    Well19937c well19937c0 = new Well19937c((long) 112);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 112, well19937c0);
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(112);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test16299,"public void test16299() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[2];
    intArray0[0] = (-1468);
    intArray0[1] = (-1468);
    Well44497a well44497a0 = new Well44497a(intArray0);
    assertNotNull(well44497a0);
}",0,
project,0,test16302,"public void test16302() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[2];
    intArray0[0] = (-1468);
    intArray0[1] = (-1468);
    Well44497a well44497a0 = new Well44497a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test16303,"public void test16303() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[2];
    intArray0[0] = (-1468);
    intArray0[1] = (-1468);
    Well44497a well44497a0 = new Well44497a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test16307,"public void test16307() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[2];
    intArray0[0] = (-1468);
    intArray0[1] = (-1468);
    Well44497a well44497a0 = new Well44497a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (double) (-1468);
    doubleArray0[1] = (double) (-1468);
    doubleArray0[2] = (double) (-1468);
    doubleArray0[3] = (double) (-1468);
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    assertEquals(3, polynomialFunctionLagrangeForm0.degree());
}",0,"assertEquals(0, polynomialFunctionLagrangeForm0.degree())"
project,0,test16308,"public void test16308() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[2];
    intArray0[0] = (-1468);
    intArray0[1] = (-1468);
    Well44497a well44497a0 = new Well44497a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (double) (-1468);
    doubleArray0[1] = (double) (-1468);
    doubleArray0[2] = (double) (-1468);
    doubleArray0[3] = (double) (-1468);
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    assertNotNull(polynomialFunctionLagrangeForm0);
}",1,
project,0,test16311,"public void test16311() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[2];
    intArray0[0] = (-1468);
    intArray0[1] = (-1468);
    Well44497a well44497a0 = new Well44497a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (double) (-1468);
    doubleArray0[1] = (double) (-1468);
    doubleArray0[2] = (double) (-1468);
    doubleArray0[3] = (double) (-1468);
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunctionLagrangeForm0, goalType0, (double) (-1468), (-1468.0));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test17312,"public void test17312() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    assertNotNull(well19937a0);
}",0,assertNotNull(well19937a0)
project,0,test17313,"public void test17313() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    assertNotNull(randomAdaptor0);
}",0,assertNotNull(randomAdaptor0)
project,0,test17314,"public void test17314() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test17315,"public void test17315() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test17317,"public void test17317() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test17318,"public void test17318() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test17319,"public void test17319() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test17320,"public void test17320() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test17321,"public void test17321() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,
project,0,test17323,"public void test17323() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 185;
    doubleArray0[1] = (double) 52;
    int int2 = randomAdaptor0.nextInt(52);
    assertFalse(int2 == int0);
}",0,
project,0,test17326,"public void test17326() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 185;
    doubleArray0[1] = (double) 52;
    int int2 = randomAdaptor0.nextInt(52);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test17327,"public void test17327() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 185;
    doubleArray0[1] = (double) 52;
    int int2 = randomAdaptor0.nextInt(52);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,
project,0,test17328,"public void test17328() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 185;
    doubleArray0[1] = (double) 52;
    int int2 = randomAdaptor0.nextInt(52);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    assertNull(convergenceChecker0);
}",0,assertNotNull(convergenceChecker0)
project,0,test17329,"public void test17329() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 185;
    doubleArray0[1] = (double) 52;
    int int2 = randomAdaptor0.nextInt(52);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    doubleArray0[2] = (double) 0L;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertEquals(1, polynomialFunction0.degree());
}",0,"assertEquals(0, polynomialFunction0.degree())"
project,0,test17330,"public void test17330() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 185;
    doubleArray0[1] = (double) 52;
    int int2 = randomAdaptor0.nextInt(52);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    doubleArray0[2] = (double) 0L;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction0);
}",1,
project,0,test17333,"public void test17333() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    long long0 = 0L;
    Well19937a well19937a0 = new Well19937a(0L);
    RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int1 = 52;
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 185;
    doubleArray0[1] = (double) 52;
    int int2 = randomAdaptor0.nextInt(52);
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    doubleArray0[2] = (double) 0L;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer1.optimize(polynomialFunction0, goalType0, (double) 0L, (double) 46);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // none of the 52 start points lead to convergence: convergence failed
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test18334,"public void test18334() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MersenneTwister mersenneTwister0 = new MersenneTwister(1);
    assertNotNull(mersenneTwister0);
}",0,assertNotNull(mersenneTwister0)
project,0,test18335,"public void test18335() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MersenneTwister mersenneTwister0 = new MersenneTwister(1);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test18336,"public void test18336() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MersenneTwister mersenneTwister0 = new MersenneTwister(1);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test18338,"public void test18338() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MersenneTwister mersenneTwister0 = new MersenneTwister(1);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations((-2676));
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test18339,"public void test18339() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MersenneTwister mersenneTwister0 = new MersenneTwister(1);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
    multiStartUnivariateRealOptimizer0.setMaxEvaluations((-2676));
    assertEquals((-2676), multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test19340,"public void test19340() throws Throwable {
    MersenneTwister mersenneTwister0 = new MersenneTwister();
    assertNotNull(mersenneTwister0);
}",0,assertNotNull(mersenneTwister0)
project,0,test19341,"public void test19341() throws Throwable {
    MersenneTwister mersenneTwister0 = new MersenneTwister();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test19342,"public void test19342() throws Throwable {
    MersenneTwister mersenneTwister0 = new MersenneTwister();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test19344,"public void test19344() throws Throwable {
    MersenneTwister mersenneTwister0 = new MersenneTwister();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, mersenneTwister0);
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test20345,"public void test20345() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a((long) 0);
    assertNotNull(well512a0);
}",0,assertNotNull(well512a0)
project,0,test20346,"public void test20346() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a((long) 0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test20347,"public void test20347() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a((long) 0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test20349,"public void test20349() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a((long) 0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test20350,"public void test20350() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a((long) 0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test20351,"public void test20351() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well512a well512a0 = new Well512a((long) 0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
    int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test21353,"public void test21353() throws Throwable {
    JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, jDKRandomGenerator0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test21354,"public void test21354() throws Throwable {
    JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, jDKRandomGenerator0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(1, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test21356,"public void test21356() throws Throwable {
    JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, jDKRandomGenerator0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (-181.00352113), 907.7648312, 907.7648312);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test22357,"public void test22357() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 3765;
    Well1024a well1024a0 = new Well1024a((long) 3765);
    assertNotNull(well1024a0);
}",0,assertNotNull(well1024a0)
project,0,test22358,"public void test22358() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 3765;
    Well1024a well1024a0 = new Well1024a((long) 3765);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test22359,"public void test22359() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 3765;
    Well1024a well1024a0 = new Well1024a((long) 3765);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test22361,"public void test22361() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 3765;
    Well1024a well1024a0 = new Well1024a((long) 3765);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[9];
    intArray0[0] = 3765;
    intArray0[1] = 3765;
    intArray0[2] = 3765;
    intArray0[3] = 3765;
    intArray0[4] = 3765;
    intArray0[5] = 4531;
    intArray0[6] = 3765;
    intArray0[7] = 3765;
    intArray0[8] = 3765;
    Well44497a well44497a0 = new Well44497a(intArray0);
    assertNotNull(well44497a0);
}",0,
project,0,test22364,"public void test22364() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 3765;
    Well1024a well1024a0 = new Well1024a((long) 3765);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[9];
    intArray0[0] = 3765;
    intArray0[1] = 3765;
    intArray0[2] = 3765;
    intArray0[3] = 3765;
    intArray0[4] = 3765;
    intArray0[5] = 4531;
    intArray0[6] = 3765;
    intArray0[7] = 3765;
    intArray0[8] = 3765;
    Well44497a well44497a0 = new Well44497a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 4531, well44497a0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
}",0,
project,0,test22365,"public void test22365() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 3765;
    Well1024a well1024a0 = new Well1024a((long) 3765);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[9];
    intArray0[0] = 3765;
    intArray0[1] = 3765;
    intArray0[2] = 3765;
    intArray0[3] = 3765;
    intArray0[4] = 3765;
    intArray0[5] = 4531;
    intArray0[6] = 3765;
    intArray0[7] = 3765;
    intArray0[8] = 3765;
    Well44497a well44497a0 = new Well44497a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 4531, well44497a0);
    assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
}",0,
project,0,test22369,"public void test22369() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 3765;
    Well1024a well1024a0 = new Well1024a((long) 3765);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[9];
    intArray0[0] = 3765;
    intArray0[1] = 3765;
    intArray0[2] = 3765;
    intArray0[3] = 3765;
    intArray0[4] = 3765;
    intArray0[5] = 4531;
    intArray0[6] = 3765;
    intArray0[7] = 3765;
    intArray0[8] = 3765;
    Well44497a well44497a0 = new Well44497a(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 4531, well44497a0);
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test23370,"public void test23370() throws Throwable {
    Well1024a well1024a0 = new Well1024a((long) (-571));
    assertNotNull(well1024a0);
}",0,
project,0,test23371,"public void test23371() throws Throwable {
    Well1024a well1024a0 = new Well1024a((long) (-571));
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test23372,"public void test23372() throws Throwable {
    Well1024a well1024a0 = new Well1024a((long) (-571));
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test23374,"public void test23374() throws Throwable {
    Well1024a well1024a0 = new Well1024a((long) (-571));
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (-1777.9833);
    doubleArray0[1] = (double) (-571);
    doubleArray0[2] = (double) (-571);
    doubleArray0[3] = (double) (-571);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertEquals(3, polynomialFunction0.degree());
}",0,"assertEquals(0, polynomialFunction0.degree())"
project,0,test23375,"public void test23375() throws Throwable {
    Well1024a well1024a0 = new Well1024a((long) (-571));
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (-1777.9833);
    doubleArray0[1] = (double) (-571);
    doubleArray0[2] = (double) (-571);
    doubleArray0[3] = (double) (-571);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction0);
}",1,
project,0,test23378,"public void test23378() throws Throwable {
    Well1024a well1024a0 = new Well1024a((long) (-571));
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (-1777.9833);
    doubleArray0[1] = (double) (-571);
    doubleArray0[2] = (double) (-571);
    doubleArray0[3] = (double) (-571);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-1777.9833), (-571.0), (-571.0));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test24379,"public void test24379() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 0;
    int[] intArray0 = new int[2];
    intArray0[0] = 0;
    intArray0[1] = 205;
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    assertNotNull(mersenneTwister0);
}",0,assertNotNull(mersenneTwister0)
project,0,test24382,"public void test24382() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 0;
    int[] intArray0 = new int[2];
    intArray0[0] = 0;
    intArray0[1] = 205;
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test24383,"public void test24383() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 0;
    int[] intArray0 = new int[2];
    intArray0[0] = 0;
    intArray0[1] = 205;
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,
project,0,test24387,"public void test24387() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 0;
    int[] intArray0 = new int[2];
    intArray0[0] = 0;
    intArray0[1] = 205;
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (double) 0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertEquals(0, polynomialFunction0.degree());
}",0,"assertEquals(0, polynomialFunction0.degree())"
project,0,test24388,"public void test24388() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 0;
    int[] intArray0 = new int[2];
    intArray0[0] = 0;
    intArray0[1] = 205;
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (double) 0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction0);
}",1,
project,0,test24391,"public void test24391() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 0;
    int[] intArray0 = new int[2];
    intArray0[0] = 0;
    intArray0[1] = 205;
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (double) 0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    float float0 = mersenneTwister0.nextFloat();
    assertArrayEquals(new int[] { 0, 205 }, intArray0);
}",0,
project,0,test24394,"public void test24394() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int int0 = 0;
    int[] intArray0 = new int[2];
    intArray0[0] = 0;
    intArray0[1] = 205;
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (double) 0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    float float0 = mersenneTwister0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-392.5242693624), 884.3);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test25395,"public void test25395() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    assertNotNull(well512a0);
}",0,assertNotNull(well512a0)
project,0,test25396,"public void test25396() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test25397,"public void test25397() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test25399,"public void test25399() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertFalse(int1 == int0);
}",0,
project,0,test25400,"public void test25400() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test25401,"public void test25401() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test25403,"public void test25403() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations())"
project,0,test25404,"public void test25404() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,"assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations())"
project,0,test25405,"public void test25405() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    assertNull(convergenceChecker0);
}",0,assertNotNull(convergenceChecker0)
project,0,test25406,"public void test25406() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    int int0 = 4420;
    Well512a well512a0 = new Well512a();
    well512a0.setSeed(4420);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
    ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    PolynomialFunction polynomialFunction0 = null;
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = 0.0;
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 0, 0.0, (double) 0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // none of the 4,420 start points lead to convergence: convergence failed
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test26407,"public void test26407() throws Throwable {
    System.setCurrentTimeMillis(0L);
    UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(47, 47, 68, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
    doReturn(555, 33, 68, 68, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
    doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
    Well19937c well19937c0 = new Well19937c(2450);
    well19937c0.setSeed(0L);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    well19937c0.nextBoolean();
    well19937c0.nextFloat();
    GoalType goalType0 = GoalType.MINIMIZE;
    multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    multiStartUnivariateRealOptimizer0.getOptima();
    multiStartUnivariateRealOptimizer0.getOptima();
    Random.setNextRandom(2450);
    multiStartUnivariateRealOptimizer0.getEvaluations();
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) 100;
    doubleArray0[1] = (-126.151);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType1 = GoalType.MAXIMIZE;
    multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, (-1.0), 2853.149559891947, 4003.82806161574);
    assertEquals(245000, multiStartUnivariateRealOptimizer0.getEvaluations());
}",0,
project,0,test28409,"public void test28409() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[7];
    intArray0[0] = 2327;
    intArray0[1] = 2327;
    intArray0[2] = 2327;
    intArray0[3] = 2327;
    intArray0[4] = 2327;
    intArray0[5] = 2327;
    intArray0[6] = 2327;
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    mersenneTwister0.nextDouble();
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2327, mersenneTwister0);
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(multiStartUnivariateRealOptimizer0, 2327, mersenneTwister0);
    BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
    MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer2 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, 2327, mersenneTwister0);
    multiStartUnivariateRealOptimizer2.getConvergenceChecker();
    multiStartUnivariateRealOptimizer1.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
    BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer2 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer3 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer2, 2327, mersenneTwister0);
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = (double) 2327;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (double) 2327;
    doubleArray0[4] = (double) 2327;
    doubleArray0[5] = (double) 2327;
    doubleArray0[6] = (double) 2327;
    doubleArray0[7] = (double) 2327;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
}",1,
project,0,test29410,"public void test29410() throws Throwable {
    BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
    Well19937a well19937a0 = new Well19937a((-1L));
    MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, well19937a0);
    // Undeclared exception!
    try {
        multiStartUnivariateRealOptimizer0.getOptima();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no optimum computed yet
        //
        verifyException(""org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer"", e);
    }
}",1,
project,0,test30411,"public void test30411() throws Throwable {
    int[] intArray0 = new int[6];
    Well1024a well1024a0 = new Well1024a(intArray0);
}",0,
