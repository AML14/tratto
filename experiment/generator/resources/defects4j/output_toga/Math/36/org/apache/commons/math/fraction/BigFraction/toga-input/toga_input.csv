focal_method,test_prefix,docstring
"public BigFraction divide(final BigInteger bg) {
    if (BigInteger.ZERO.equals(bg)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test0000() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = new BigFraction(0L);
    BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
    bigFraction0.MINUS_ONE.pow(2.4106173515319824);
    bigFraction2.ONE_QUARTER.getDenominatorAsInt();
    BigFraction bigFraction3 = bigFraction0.reciprocal();
    BigFraction bigFraction4 = bigFraction0.ONE_HALF.reciprocal();
    bigFraction0.percentageValue();
    BigFraction bigFraction5 = bigFraction4.divide(bigFraction0);
    BigFraction bigFraction6 = bigFraction5.TWO_FIFTHS.divide(1951);
    BigFraction bigFraction7 = bigFraction6.ONE_FIFTH.reciprocal();
    bigFraction7.ONE_THIRD.getDenominatorAsInt();
    BigFraction bigFraction8 = bigFraction5.ONE_FIFTH.multiply(bigFraction3);
    bigFraction6.TWO_THIRDS.getDenominatorAsLong();
    bigFraction8.TWO_QUARTERS.add(bigFraction4);
    bigFraction0.getField();
    bigFraction2.getField();
    BigFraction bigFraction9 = bigFraction1.multiply(4458);
    bigFraction9.ZERO.divide(3L);
    bigFraction7.abs();
    // Undeclared exception!
    try {
        bigFraction7.divide((BigInteger) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed <code>BigInteger</code>,
 * ie ""this * 1 / bg"", returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the <code>BigInteger</code> to divide by, must not be
 *            <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}.
 * @throws ZeroException
 *             if the fraction to divide by is zero.
 */"
"public BigFraction multiply(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(bg.multiply(numerator), denominator);
}","public void test0011() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    bigFraction0.intValue();
    BigFraction bigFraction1 = bigFraction0.ONE_HALF.reciprocal();
    bigFraction1.ONE.multiply((-74));
    BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
    int int0 = 1847;
    BigFraction bigFraction3 = bigFraction2.subtract(1847);
    bigFraction0.divide(bigFraction2);
    bigFraction3.TWO.toString();
    BigFraction bigFraction4 = bigFraction0.reduce();
    bigFraction4.TWO.subtract(1847);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-120);
    // Undeclared exception!
    try {
        bigFraction3.ONE.multiply((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Multiplies the value of this fraction by the passed
 * <code>BigInteger</code>, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to multiply by.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code bg} is {@code null}.
 */"
"public BigFraction multiply(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(bg.multiply(numerator), denominator);
}","public void test0022() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-717.224843262248));
    int int0 = 1245;
    BigFraction bigFraction1 = bigFraction0.pow(1245);
    BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.add((long) 1245);
    BigFraction bigFraction3 = bigFraction1.divide(bigFraction0);
    BigFraction bigFraction4 = bigFraction1.add(bigFraction0);
    BigFraction bigFraction5 = bigFraction3.divide(1037L);
    int int1 = 3;
    BigFraction bigFraction6 = bigFraction2.divide(3);
    bigFraction2.ONE_FIFTH.divide(328L);
    BigFraction bigFraction7 = bigFraction5.ONE_HALF.subtract(1037L);
    bigFraction7.MINUS_ONE.equals(bigFraction6);
    bigFraction5.getNumeratorAsLong();
    bigFraction5.add(bigFraction2);
    BigInteger bigInteger0 = null;
    // Undeclared exception!
    try {
        bigFraction4.multiply((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Multiplies the value of this fraction by the passed
 * <code>BigInteger</code>, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to multiply by.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code bg} is {@code null}.
 */"
"public int compareTo(final BigFraction object) {
    BigInteger nOd = numerator.multiply(object.denominator);
    BigInteger dOn = denominator.multiply(object.numerator);
    return nOd.compareTo(dOn);
}","public void test0033() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.ONE_HALF.bigDecimalValue();
    BigFraction bigFraction1 = new BigFraction((-9223372036854775808L), (-9223372036854775808L));
    bigFraction1.TWO_FIFTHS.floatValue();
    BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
    bigFraction2.ONE_THIRD.getField();
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) 79;
    byteArray0[2] = (byte) 4;
    byteArray0[3] = (byte) 0;
    byteArray0[4] = (byte) (-65);
    byteArray0[5] = (byte) 0;
    int int0 = bigFraction0.ONE.compareTo(bigFraction2);
    assertEquals(1, int0);
}","/**
 * <p>
 * Compares this object to another based on size.
 * </p>
 *
 * @param object
 *            the object to compare to, must not be <code>null</code>.
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 * @see java.lang.Comparable#compareTo(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test0034() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.ONE_HALF.bigDecimalValue();
    BigFraction bigFraction1 = new BigFraction((-9223372036854775808L), (-9223372036854775808L));
    bigFraction1.TWO_FIFTHS.floatValue();
    BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
    bigFraction2.ONE_THIRD.getField();
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) 79;
    byteArray0[2] = (byte) 4;
    byteArray0[3] = (byte) 0;
    byteArray0[4] = (byte) (-65);
    byteArray0[5] = (byte) 0;
    int int0 = bigFraction0.ONE.compareTo(bigFraction2);
    byteArray0[6] = (byte) (-5);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction3 = bigFraction2.TWO.divide(bigInteger0);
    BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.add((int) (byte) 0);
    assertFalse(bigFraction4.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public float floatValue() {
    float result = numerator.floatValue() / denominator.floatValue();
    // Numerator and/or denominator must be out of range:
    // Calculate how far to shift them to put them in range.
    return result;
}","public void test0035() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.ONE_HALF.bigDecimalValue();
    BigFraction bigFraction1 = new BigFraction((-9223372036854775808L), (-9223372036854775808L));
    bigFraction1.TWO_FIFTHS.floatValue();
    BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
    bigFraction2.ONE_THIRD.getField();
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) 79;
    byteArray0[2] = (byte) 4;
    byteArray0[3] = (byte) 0;
    byteArray0[4] = (byte) (-65);
    byteArray0[5] = (byte) 0;
    int int0 = bigFraction0.ONE.compareTo(bigFraction2);
    byteArray0[6] = (byte) (-5);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction3 = bigFraction2.TWO.divide(bigInteger0);
    BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.add((int) (byte) 0);
    float float0 = bigFraction1.floatValue();
    assertEquals(1.0F, float0, 0.01F);
}","/**
 * <p>
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>float</tt>.
 * @see java.lang.Number#floatValue()
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test0036() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.ONE_HALF.bigDecimalValue();
    BigFraction bigFraction1 = new BigFraction((-9223372036854775808L), (-9223372036854775808L));
    bigFraction1.TWO_FIFTHS.floatValue();
    BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
    bigFraction2.ONE_THIRD.getField();
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) 79;
    byteArray0[2] = (byte) 4;
    byteArray0[3] = (byte) 0;
    byteArray0[4] = (byte) (-65);
    byteArray0[5] = (byte) 0;
    int int0 = bigFraction0.ONE.compareTo(bigFraction2);
    byteArray0[6] = (byte) (-5);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction3 = bigFraction2.TWO.divide(bigInteger0);
    BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.add((int) (byte) 0);
    float float0 = bigFraction1.floatValue();
    float float1 = bigFraction3.floatValue();
    assertFalse(bigFraction0.equals((Object) bigFraction4));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public float floatValue() {
    float result = numerator.floatValue() / denominator.floatValue();
    // Numerator and/or denominator must be out of range:
    // Calculate how far to shift them to put them in range.
    return result;
}","public void test0037() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.ONE_HALF.bigDecimalValue();
    BigFraction bigFraction1 = new BigFraction((-9223372036854775808L), (-9223372036854775808L));
    bigFraction1.TWO_FIFTHS.floatValue();
    BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
    bigFraction2.ONE_THIRD.getField();
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) 79;
    byteArray0[2] = (byte) 4;
    byteArray0[3] = (byte) 0;
    byteArray0[4] = (byte) (-65);
    byteArray0[5] = (byte) 0;
    int int0 = bigFraction0.ONE.compareTo(bigFraction2);
    byteArray0[6] = (byte) (-5);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction3 = bigFraction2.TWO.divide(bigInteger0);
    BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.add((int) (byte) 0);
    float float0 = bigFraction1.floatValue();
    float float1 = bigFraction3.floatValue();
    assertEquals((-1.0277684E-14F), float1, 0.01F);
}","/**
 * <p>
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>float</tt>.
 * @see java.lang.Number#floatValue()
 */"
"@Override
public double doubleValue() {
    double result = numerator.doubleValue() / denominator.doubleValue();
    // Numerator and/or denominator must be out of range:
    // Calculate how far to shift them to put them in range.
    return result;
}","public void test00412() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    BigFraction bigFraction1 = BigFraction.getReducedFraction(1055, 37);
    BigFraction bigFraction2 = bigFraction1.ONE_HALF.add(1055);
    BigFraction bigFraction3 = bigFraction0.pow(0L);
    BigFraction bigFraction4 = bigFraction3.divide((-2651));
    double double0 = bigFraction2.doubleValue();
    assertEquals(1055.5, double0, 0.01);
}","/**
 * <p>
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>double</tt>
 * @see java.lang.Number#doubleValue()
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test00513() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction((-1482), 1045);
    bigFraction0.toString();
    bigFraction0.ONE.percentageValue();
    BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply((-496L));
    bigFraction0.THREE_QUARTERS.equals(""-78 / 55"");
    BigFraction bigFraction2 = bigFraction0.add(bigFraction0);
    BigInteger bigInteger0 = bigFraction2.getDenominator();
    BigFraction bigFraction3 = bigFraction1.multiply(bigInteger0);
    bigFraction3.TWO_THIRDS.getNumeratorAsLong();
    BigFraction bigFraction4 = bigFraction0.add(1);
    BigInteger bigInteger1 = BigInteger.ONE;
    bigInteger1.xor(bigInteger0);
    bigFraction0.divide(bigInteger1);
    BigFraction bigFraction5 = bigFraction1.multiply(bigFraction4);
    bigFraction5.FOUR_FIFTHS.getDenominatorAsLong();
    bigFraction5.TWO_QUARTERS.pow(0.0);
    bigFraction4.TWO.subtract((long) 1);
    bigFraction4.divide(bigFraction0);
    // Undeclared exception!
    try {
        bigFraction4.bigDecimalValue(2472);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"public BigFraction divide(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(fraction.numerator)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return multiply(fraction.reciprocal());
}","public void test00614() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_HALF;
    bigFraction0.ONE_FIFTH.getDenominatorAsInt();
    int int0 = (-1209);
    BigFraction bigFraction1 = null;
    // Undeclared exception!
    try {
        bigFraction0.TWO_THIRDS.divide((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to divide by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 * @throws ZeroException if the fraction to divide by is zero.
 */"
"public BigFraction(final double value, final int maxDenominator) throws FractionConversionException {
    this(value, 0, maxDenominator, 100);
}","public void test00715() throws Throwable {
    int int0 = (-1);
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0.0, (-1));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param maxDenominator
 *            The maximum allowed value for denominator.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test00816() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(206.213706466, 206.213706466, (-3));
    bigFraction0.TWO_THIRDS.doubleValue();
    bigFraction0.FOUR_FIFTHS.percentageValue();
    BigFraction bigFraction1 = BigFraction.MINUS_ONE;
    bigFraction1.ONE.multiply(bigFraction0);
    BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
    BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.multiply((-2446L));
    bigFraction0.longValue();
    BigFraction bigFraction4 = BigFraction.getReducedFraction((-3), (-182));
    BigFraction bigFraction5 = bigFraction0.multiply(206L);
    BigFraction bigFraction6 = bigFraction5.add(bigFraction2);
    bigFraction3.pow((-182));
    bigFraction6.longValue();
    bigFraction4.reduce();
    bigFraction2.getDenominatorAsInt();
    bigFraction5.hashCode();
    bigFraction1.getDenominator();
    // Undeclared exception!
    try {
        bigFraction4.bigDecimalValue((-182));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"public BigFraction add(final BigInteger bg) throws NullArgumentException {
    MathUtils.checkNotNull(bg);
    return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);
}","public void test00917() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    bigFraction0.longValue();
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-83);
    BigInteger bigInteger0 = BigInteger.ONE;
    bigFraction0.TWO_THIRDS.add(bigInteger0);
    bigFraction0.ZERO.pow(0.0);
    byteArray0[2] = (byte) (-1);
    bigFraction0.ONE_QUARTER.floatValue();
    BigInteger bigInteger1 = new BigInteger(byteArray0);
    BigFraction bigFraction1 = bigFraction0.pow(bigInteger1);
    bigFraction1.ONE.floatValue();
    BigInteger bigInteger2 = null;
    BigFraction bigFraction2 = BigFraction.ZERO;
    bigFraction1.ONE.add(bigFraction2);
    try {
        bigFraction0.add((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * <p>
 * Adds the value of this fraction to the passed {@link BigInteger},
 * returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the {@link BigInteger} to add, must'nt be <code>null</code>.
 * @return a <code>BigFraction</code> instance with the resulting values.
 * @throws NullArgumentException
 *             if the {@link BigInteger} is <code>null</code>.
 */"
"public BigFraction add(final int i) {
    return add(BigInteger.valueOf(i));
}","public void test01018() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    BigFraction bigFraction1 = bigFraction0.divide(1);
    bigFraction1.add(1);
}","/**
 * <p>
 * Adds the value of this fraction to the passed <tt>integer</tt>, returning
 * the result in reduced form.
 * </p>
 *
 * @param i
 *            the <tt>integer</tt> to add.
 * @return a <code>BigFraction</code> instance with the resulting values.
 */"
"public BigFraction(final double value, final int maxDenominator) throws FractionConversionException {
    this(value, 0, maxDenominator, 100);
}","public void test01119() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(2421.19, 629);
}","/**
 * Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param maxDenominator
 *            The maximum allowed value for denominator.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 */"
"public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException {
    this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}","public void test01220() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
    BigFraction bigFraction1 = null;
    try {
        bigFraction1 = new BigFraction(0.0, 0.0, (-4207));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param epsilon
 *            maximum error allowed. The resulting fraction is within
 *            <code>epsilon</code> of <code>value</code>, in absolute terms.
 * @param maxIterations
 *            maximum number of convergents.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 * @see #BigFraction(double)
 */"
"public BigFraction subtract(final int i) {
    return subtract(BigInteger.valueOf(i));
}","public void test01321() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.getDenominatorAsLong();
    bigFraction0.subtract(603);
}","/**
 * <p>
 * Subtracts the value of an {@code integer} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param i the {@code integer} to subtract.
 * @return a {@code BigFraction} instance with the resulting values.
 */"
"public BigFraction divide(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(fraction.numerator)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return multiply(fraction.reciprocal());
}","public void test01422() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_THIRD;
    BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
    bigFraction0.divide(bigFraction1);
}","/**
 * <p>
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to divide by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 * @throws ZeroException if the fraction to divide by is zero.
 */"
"public int getDenominatorAsInt() {
    return denominator.intValue();
}","public void test01523() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    bigFraction0.subtract(1037L);
    bigFraction0.getDenominatorAsInt();
}","/**
 * <p>
 * Access the denominator as a <tt>int</tt>.
 * </p>
 *
 * @return the denominator as a <tt>int</tt>.
 */"
"public BigFraction divide(final long l) {
    return divide(BigInteger.valueOf(l));
}","public void test01624() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(1135.778507909085, 27);
    bigFraction0.divide(4577762542105553359L);
}","/**
 * <p>
 * Divide the value of this fraction by the passed <tt>long</tt>, ie
 * ""this * 1 / l"", returning the result in reduced form.
 * </p>
 *
 * @param l
 *            the <tt>long</tt> to divide by.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws ArithmeticException
 *             if the fraction to divide by is zero.
 */"
"public BigFraction divide(final BigInteger bg) {
    if (BigInteger.ZERO.equals(bg)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test01725() throws Throwable {
    BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
    BigInteger bigInteger0 = BigInteger.valueOf(0L);
    // Undeclared exception!
    try {
        bigFraction0.divide(bigInteger0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed <code>BigInteger</code>,
 * ie ""this * 1 / bg"", returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the <code>BigInteger</code> to divide by, must not be
 *            <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}.
 * @throws ZeroException
 *             if the fraction to divide by is zero.
 */"
"public int compareTo(final BigFraction object) {
    BigInteger nOd = numerator.multiply(object.denominator);
    BigInteger dOn = denominator.multiply(object.numerator);
    return nOd.compareTo(dOn);
}","public void test01826() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(1013.127912813, 1013.127912813, 2274);
    BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
    bigFraction0.compareTo(bigFraction1);
}","/**
 * <p>
 * Compares this object to another based on size.
 * </p>
 *
 * @param object
 *            the object to compare to, must not be <code>null</code>.
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 * @see java.lang.Comparable#compareTo(java.lang.Object)
 */"
"public int getNumeratorAsInt() {
    return numerator.intValue();
}","public void test01927() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    Object object0 = new Object();
    bigFraction0.TWO_FIFTHS.equals(object0);
    bigFraction0.TWO.bigDecimalValue();
    bigFraction0.getNumeratorAsInt();
}","/**
 * <p>
 * Access the numerator as a <tt>int</tt>.
 * </p>
 *
 * @return the numerator as a <tt>int</tt>.
 */"
"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);
}","public void test02028() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.longValue();
    BigFraction bigFraction1 = BigFraction.TWO;
    bigFraction0.add(bigFraction1);
    bigFraction1.reciprocal();
    // Undeclared exception!
    try {
        bigFraction1.THREE_QUARTERS.bigDecimalValue(1501, 1501);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p>
 *
 * @param scale
 *            scale of the <code>BigDecimal</code> quotient to be returned.
 *            see {@link BigDecimal} for more information.
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @see BigDecimal
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test02129() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_HALF;
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue(1438);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"public BigFraction pow(final BigInteger exponent) {
    if (exponent.compareTo(BigInteger.ZERO) < 0) {
        final BigInteger eNeg = exponent.negate();
        return new BigFraction(ArithmeticUtils.pow(denominator, eNeg), ArithmeticUtils.pow(numerator, eNeg));
    }
    return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent));
}","public void test02230() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_THIRD;
    bigFraction0.ONE_QUARTER.pow(0.0);
    bigFraction0.ONE_FIFTH.toString();
    BigInteger bigInteger0 = BigInteger.ZERO;
    bigFraction0.pow(bigInteger0);
}","/**
 * <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
 */"
"public double percentageValue() {
    return multiply(ONE_HUNDRED).doubleValue();
}","public void test02331() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(880.1038475455);
    bigFraction0.ONE_THIRD.floatValue();
    bigFraction0.percentageValue();
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public BigFraction multiply(final long l) {
    return multiply(BigInteger.valueOf(l));
}","public void test02432() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    bigFraction0.FOUR_FIFTHS.add((-3535L));
    bigFraction0.multiply((-114L));
}","/**
 * <p>
 * Multiply the value of this fraction by the passed <tt>long</tt>,
 * returning the result in reduced form.
 * </p>
 *
 * @param l
 *            the <tt>long</tt> to multiply by.
 * @return a {@link BigFraction} instance with the resulting values.
 */"
"public BigFraction divide(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(fraction.numerator)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return multiply(fraction.reciprocal());
}","public void test02533() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
    BigFraction bigFraction1 = bigFraction0.negate();
    bigFraction0.doubleValue();
    // Undeclared exception!
    try {
        bigFraction1.divide(bigFraction0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to divide by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 * @throws ZeroException if the fraction to divide by is zero.
 */"
"public BigFraction pow(final int exponent) {
    if (exponent < 0) {
        return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));
    }
    return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));
}","public void test02634() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    bigFraction0.doubleValue();
    bigFraction0.FOUR_FIFTHS.getField();
    bigFraction0.pow(847);
}","/**
 * <p>
 * Returns a {@code BigFraction} whose value is
 * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this {@code BigFraction} is to be
 *            raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"@Override
public double doubleValue() {
    double result = numerator.doubleValue() / denominator.doubleValue();
    // Numerator and/or denominator must be out of range:
    // Calculate how far to shift them to put them in range.
    return result;
}","public void test02735() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(2615L);
    bigFraction0.TWO.pow((-338));
    bigFraction0.THREE_QUARTERS.toString();
    bigFraction0.doubleValue();
}","/**
 * <p>
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>double</tt>
 * @see java.lang.Number#doubleValue()
 */"
"public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException {
    this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}","public void test02836() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    BigFraction bigFraction1 = null;
    try {
        bigFraction1 = new BigFraction(0.0, 0.0, 2356);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param epsilon
 *            maximum error allowed. The resulting fraction is within
 *            <code>epsilon</code> of <code>value</code>, in absolute terms.
 * @param maxIterations
 *            maximum number of convergents.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 * @see #BigFraction(double)
 */"
"public BigFraction divide(final long l) {
    return divide(BigInteger.valueOf(l));
}","public void test02937() throws Throwable {
    long long0 = 5648769086999809661L;
    BigFraction bigFraction0 = new BigFraction(4208363204685324176L, 5648769086999809661L);
    // Undeclared exception!
    try {
        bigFraction0.THREE_QUARTERS.divide(0L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed <tt>long</tt>, ie
 * ""this * 1 / l"", returning the result in reduced form.
 * </p>
 *
 * @param l
 *            the <tt>long</tt> to divide by.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws ArithmeticException
 *             if the fraction to divide by is zero.
 */"
"public BigFraction divide(final BigInteger bg) {
    if (BigInteger.ZERO.equals(bg)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test03038() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    bigFraction0.getField();
    BigFraction bigFraction1 = bigFraction0.pow(0L);
    int int0 = 0;
    bigFraction1.bigDecimalValue(0);
    BigFraction bigFraction2 = bigFraction1.multiply(0);
    bigFraction2.ONE_THIRD.floatValue();
    BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.pow(bigInteger0);
    BigFraction bigFraction4 = new BigFraction(bigInteger0);
    // Undeclared exception!
    try {
        bigFraction3.divide(bigInteger0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed <code>BigInteger</code>,
 * ie ""this * 1 / bg"", returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the <code>BigInteger</code> to divide by, must not be
 *            <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}.
 * @throws ZeroException
 *             if the fraction to divide by is zero.
 */"
"public BigFraction subtract(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);
}","public void test03139() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(2277, 1);
    BigInteger bigInteger0 = BigInteger.ONE;
    bigFraction0.subtract(bigInteger0);
}","/**
 * <p>
 * Subtracts the value of an {@link BigInteger} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigInteger} is {@code null}.
 */"
"public BigFraction subtract(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);
}","public void test03240() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-2139));
    BigFraction bigFraction1 = bigFraction0.reciprocal();
    BigInteger bigInteger0 = BigInteger.TEN;
    bigFraction0.multiply(bigInteger0);
    bigFraction0.getNumeratorAsLong();
    BigFraction bigFraction2 = bigFraction1.pow((-2139L));
    bigFraction2.subtract(bigInteger0);
}","/**
 * <p>
 * Subtracts the value of an {@link BigInteger} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigInteger} is {@code null}.
 */"
"@Override
public String toString() {
    String str = null;
    if (BigInteger.ONE.equals(denominator)) {
        str = numerator.toString();
    } else if (BigInteger.ZERO.equals(numerator)) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test03341() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_THIRD;
    BigFraction bigFraction1 = BigFraction.ONE_THIRD;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    BigFraction.getReducedFraction(2152, 2152);
    bigFraction2.toString();
}","/**
 * <p>
 * Returns the <code>String</code> representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"public BigFraction divide(final int i) {
    return divide(BigInteger.valueOf(i));
}","public void test03442() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(bigFraction0);
    bigFraction1.intValue();
    BigFraction bigFraction3 = BigFraction.getReducedFraction(182, 2871);
    BigFraction bigFraction4 = bigFraction0.divide(bigFraction1);
    bigFraction3.longValue();
    BigInteger bigInteger0 = BigInteger.TEN;
    bigFraction1.ONE_FIFTH.multiply(bigInteger0);
    bigFraction2.toString();
    bigFraction4.divide((-1));
}","/**
 * <p>
 * Divide the value of this fraction by the passed <tt>int</tt>, ie
 * ""this * 1 / i"", returning the result in reduced form.
 * </p>
 *
 * @param i
 *            the <tt>int</tt> to divide by.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws ArithmeticException
 *             if the fraction to divide by is zero.
 */"
"public BigFraction add(final BigInteger bg) throws NullArgumentException {
    MathUtils.checkNotNull(bg);
    return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);
}","public void test03543() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(6722166367014452318L, 6722166367014452318L);
    BigInteger bigInteger0 = BigInteger.TEN;
    bigFraction0.add(bigInteger0);
}","/**
 * <p>
 * Adds the value of this fraction to the passed {@link BigInteger},
 * returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the {@link BigInteger} to add, must'nt be <code>null</code>.
 * @return a <code>BigFraction</code> instance with the resulting values.
 * @throws NullArgumentException
 *             if the {@link BigInteger} is <code>null</code>.
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test03644() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    Object object0 = new Object();
    bigFraction0.equals(object0);
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction reduce() {
    final BigInteger gcd = numerator.gcd(denominator);
    return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));
}","public void test03745() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
    bigFraction0.ONE.getNumeratorAsLong();
    BigFraction bigFraction1 = bigFraction0.abs();
    BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
    bigFraction1.subtract(bigFraction2);
    bigFraction2.doubleValue();
    bigFraction0.reduce();
}","/**
 * <p>
 * Reduce this <code>BigFraction</code> to its lowest terms.
 * </p>
 *
 * @return the reduced <code>BigFraction</code>. It doesn't change anything if
 *         the fraction can be reduced.
 */"
"public long getDenominatorAsLong() {
    return denominator.longValue();
}","public void test03846() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.ONE_HALF.pow((-1302));
    bigFraction0.TWO_FIFTHS.subtract((-4906));
    bigFraction0.getDenominatorAsLong();
}","/**
 * <p>
 * Access the denominator as a <tt>long</tt>.
 * </p>
 *
 * @return the denominator as a <tt>long</tt>.
 */"
"public BigFraction divide(final int i) {
    return divide(BigInteger.valueOf(i));
}","public void test03947() throws Throwable {
    BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
    BigFraction bigFraction1 = bigFraction0.divide((-2803L));
    BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
    bigFraction1.compareTo(bigFraction2);
    bigFraction1.divide(bigFraction0);
    bigFraction1.divide((-1));
}","/**
 * <p>
 * Divide the value of this fraction by the passed <tt>int</tt>, ie
 * ""this * 1 / i"", returning the result in reduced form.
 * </p>
 *
 * @param i
 *            the <tt>int</tt> to divide by.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws ArithmeticException
 *             if the fraction to divide by is zero.
 */"
"public int compareTo(final BigFraction object) {
    BigInteger nOd = numerator.multiply(object.denominator);
    BigInteger dOn = denominator.multiply(object.numerator);
    return nOd.compareTo(dOn);
}","public void test04048() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-618.0), 3136.5699010956746, 0);
    bigFraction0.TWO_QUARTERS.getNumeratorAsInt();
    BigFraction bigFraction1 = bigFraction0.divide((-1L));
    bigFraction1.TWO_THIRDS.longValue();
    bigFraction0.toString();
    bigFraction0.compareTo(bigFraction1);
}","/**
 * <p>
 * Compares this object to another based on size.
 * </p>
 *
 * @param object
 *            the object to compare to, must not be <code>null</code>.
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 * @see java.lang.Comparable#compareTo(java.lang.Object)
 */"
"public BigFraction add(final BigInteger bg) throws NullArgumentException {
    MathUtils.checkNotNull(bg);
    return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);
}","public void test04149() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(1362.6);
    BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
    bigFraction0.TWO_THIRDS.pow((-197));
    BigFraction bigFraction2 = bigFraction0.ZERO.divide(bigFraction1);
    bigFraction2.THREE_FIFTHS.toString();
    bigFraction0.compareTo(bigFraction1);
    BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.divide(2627);
    bigFraction0.negate();
    BigFraction bigFraction4 = bigFraction3.reduce();
    BigFraction bigFraction5 = bigFraction3.add((-6265L));
    bigFraction2.toString();
    bigFraction4.doubleValue();
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(2627, mockRandom0);
    bigFraction5.add(bigInteger0);
}","/**
 * <p>
 * Adds the value of this fraction to the passed {@link BigInteger},
 * returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the {@link BigInteger} to add, must'nt be <code>null</code>.
 * @return a <code>BigFraction</code> instance with the resulting values.
 * @throws NullArgumentException
 *             if the {@link BigInteger} is <code>null</code>.
 */"
"public BigInteger getDenominator() {
    return denominator;
}","public void test04250() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(2645L);
    bigFraction0.getDenominator();
}","/**
 * <p>
 * Access the denominator as a <code>BigInteger</code>.
 * </p>
 *
 * @return the denominator as a <code>BigInteger</code>.
 */"
"public BigFraction subtract(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (ZERO.equals(fraction)) {
        return this;
    }
    BigInteger num = null;
    BigInteger den = null;
    if (denominator.equals(fraction.denominator)) {
        num = numerator.subtract(fraction.numerator);
        den = denominator;
    } else {
        num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));
        den = denominator.multiply(fraction.denominator);
    }
    return new BigFraction(num, den);
}","public void test04351() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.pow((-608L));
    BigFraction bigFraction3 = bigFraction1.MINUS_ONE.pow(1191);
    bigFraction0.pow(1.552583321178453E-10);
    bigFraction1.toString();
    bigFraction1.intValue();
    BigFraction bigFraction4 = BigFraction.getReducedFraction(0, 1191);
    bigFraction0.getNumeratorAsInt();
    bigFraction2.hashCode();
    bigFraction0.bigDecimalValue(3, 4);
    BigFraction bigFraction5 = bigFraction0.multiply(bigInteger0);
    bigFraction5.TWO.hashCode();
    bigFraction3.ONE_QUARTER.floatValue();
    bigFraction5.TWO.hashCode();
    BigFraction bigFraction6 = bigFraction2.reduce();
    bigFraction0.ONE_THIRD.getField();
    BigFraction bigFraction7 = bigFraction1.add((-3183605296591799669L));
    bigFraction7.ONE.subtract(bigFraction3);
    bigFraction7.ONE_THIRD.bigDecimalValue(0, 0);
    bigFraction7.compareTo(bigFraction2);
    BigFraction bigFraction8 = bigFraction1.add((long) (-1));
    bigFraction8.TWO.multiply(bigFraction4);
    bigFraction1.doubleValue();
    bigFraction7.getDenominator();
    bigFraction3.pow(1.552583321178453E-10);
    bigFraction7.add(bigFraction6);
    bigFraction4.subtract(bigFraction7);
}","/**
 * <p>
 * Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.
 * </p>
 *
 * @param fraction {@link BigFraction} to subtract, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test04452() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = new BigFraction(bigInteger0);
    bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
    bigFraction0.ONE_THIRD.multiply(bigFraction1);
    BigFraction bigFraction2 = BigFraction.ONE;
    bigFraction2.ZERO.negate();
    BigFraction bigFraction3 = bigFraction0.divide(bigFraction2);
    bigFraction3.THREE_FIFTHS.getDenominatorAsLong();
    bigFraction2.getDenominatorAsInt();
    bigFraction0.ONE_FIFTH.intValue();
    BigFraction bigFraction4 = bigFraction0.divide(1066L);
    bigFraction4.ONE.getNumeratorAsInt();
    bigFraction4.getDenominatorAsInt();
    BigFraction bigFraction5 = bigFraction4.divide(bigFraction2);
    bigFraction5.ONE_QUARTER.multiply(Integer.MAX_VALUE);
    int int0 = (-28);
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue((-28));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);
}","public void test04553() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-2040.65), (-348));
    BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.negate();
    bigFraction0.ONE.getField();
    bigFraction0.toString();
    bigFraction0.bigDecimalValue();
    int int0 = (-1);
    // Undeclared exception!
    try {
        bigFraction1.bigDecimalValue((-1), (-348));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p>
 *
 * @param scale
 *            scale of the <code>BigDecimal</code> quotient to be returned.
 *            see {@link BigDecimal} for more information.
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @see BigDecimal
 */"
"public BigFraction(final BigInteger num) {
    this(num, BigInteger.ONE);
}","public void test04654() throws Throwable {
    BigInteger bigInteger0 = null;
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // numerator
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * <p>
 * Create a {@link BigFraction} equivalent to the passed <tt>BigInteger</tt>, ie
 * ""num / 1"".
 * </p>
 *
 * @param num
 *            the numerator.
 */"
"public long getDenominatorAsLong() {
    return denominator.longValue();
}","public void test04755() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.ONE.pow(2089L);
    bigFraction0.getDenominator();
    bigFraction0.getDenominatorAsLong();
}","/**
 * <p>
 * Access the denominator as a <tt>long</tt>.
 * </p>
 *
 * @return the denominator as a <tt>long</tt>.
 */"
"public static BigFraction getReducedFraction(final int numerator, final int denominator) {
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    return new BigFraction(numerator, denominator);
}","public void test04856() throws Throwable {
    BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
    bigFraction0.subtract(0);
    BigFraction.getReducedFraction((-4785), (-4785));
}","/**
 * <p>
 * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction
 * Y/Z.
 * </p>
 *
 * <p>
 * Any negative signs are resolved to be on the numerator.
 * </p>
 *
 * @param numerator
 *            the numerator, for example the three in 'three sevenths'.
 * @param denominator
 *            the denominator, for example the seven in 'three sevenths'.
 * @return a new fraction instance, with the numerator and denominator
 *         reduced.
 * @throws ArithmeticException
 *             if the denominator is <code>zero</code>.
 */"
"public BigFraction divide(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(fraction.numerator)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return multiply(fraction.reciprocal());
}","public void test04957() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(2037, 2037);
    BigFraction bigFraction1 = BigFraction.MINUS_ONE;
    bigFraction0.divide(bigFraction1);
}","/**
 * <p>
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to divide by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 * @throws ZeroException if the fraction to divide by is zero.
 */"
"public BigFraction(BigInteger num, BigInteger den) {
    MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);
    MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);
    if (BigInteger.ZERO.equals(den)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    if (BigInteger.ZERO.equals(num)) {
        numerator = BigInteger.ZERO;
        denominator = BigInteger.ONE;
    } else {
        // reduce numerator and denominator by greatest common denominator
        final BigInteger gcd = num.gcd(den);
        if (BigInteger.ONE.compareTo(gcd) < 0) {
            num = num.divide(gcd);
            den = den.divide(gcd);
        }
        // move sign to numerator
        if (BigInteger.ZERO.compareTo(den) > 0) {
            num = num.negate();
            den = den.negate();
        }
        // store the values in the final fields
        numerator = num;
        denominator = den;
    }
}","public void test05058() throws Throwable {
    BigInteger bigInteger0 = BigInteger.TEN;
    BigInteger bigInteger1 = BigInteger.ZERO;
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * Create a {@link BigFraction} given the numerator and denominator as
 * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.
 *
 * @param num the numerator, must not be {@code null}.
 * @param den the denominator, must not be {@code null}.
 * @throws ZeroException if the denominator is zero.
 * @throws NullArgumentException if either of the arguments is null
 */"
"public BigFraction(BigInteger num, BigInteger den) {
    MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);
    MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);
    if (BigInteger.ZERO.equals(den)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    if (BigInteger.ZERO.equals(num)) {
        numerator = BigInteger.ZERO;
        denominator = BigInteger.ONE;
    } else {
        // reduce numerator and denominator by greatest common denominator
        final BigInteger gcd = num.gcd(den);
        if (BigInteger.ONE.compareTo(gcd) < 0) {
            num = num.divide(gcd);
            den = den.divide(gcd);
        }
        // move sign to numerator
        if (BigInteger.ZERO.compareTo(den) > 0) {
            num = num.negate();
            den = den.negate();
        }
        // store the values in the final fields
        numerator = num;
        denominator = den;
    }
}","public void test05159() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * Create a {@link BigFraction} given the numerator and denominator as
 * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.
 *
 * @param num the numerator, must not be {@code null}.
 * @param den the denominator, must not be {@code null}.
 * @throws ZeroException if the denominator is zero.
 * @throws NullArgumentException if either of the arguments is null
 */"
"public BigFraction subtract(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (ZERO.equals(fraction)) {
        return this;
    }
    BigInteger num = null;
    BigInteger den = null;
    if (denominator.equals(fraction.denominator)) {
        num = numerator.subtract(fraction.numerator);
        den = denominator;
    } else {
        num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));
        den = denominator.multiply(fraction.denominator);
    }
    return new BigFraction(num, den);
}","public void test05260() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    bigFraction0.ONE_QUARTER.multiply(359);
    bigFraction0.pow((-700L));
    BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
    bigFraction0.subtract(bigFraction1);
}","/**
 * <p>
 * Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.
 * </p>
 *
 * @param fraction {@link BigFraction} to subtract, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 */"
"public BigFraction pow(final int exponent) {
    if (exponent < 0) {
        return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));
    }
    return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));
}","public void test05361() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.add(1852L);
    bigFraction1.subtract(bigFraction0);
    bigFraction0.MINUS_ONE.divide((-1));
    bigFraction1.pow((-664L));
    bigFraction1.pow(3);
}","/**
 * <p>
 * Returns a {@code BigFraction} whose value is
 * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this {@code BigFraction} is to be
 *            raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public BigFraction divide(final BigInteger bg) {
    if (BigInteger.ZERO.equals(bg)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test05462() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = new BigFraction(0L);
    BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
    bigFraction0.MINUS_ONE.pow(2.4106173515319824);
    BigFraction bigFraction3 = bigFraction0.reciprocal();
    BigFraction bigFraction4 = bigFraction0.ONE_HALF.reciprocal();
    bigFraction0.percentageValue();
    BigFraction bigFraction5 = bigFraction4.divide(bigFraction0);
    BigFraction bigFraction6 = bigFraction5.TWO_FIFTHS.divide(1951);
    BigFraction bigFraction7 = bigFraction6.ONE_FIFTH.reciprocal();
    bigFraction7.ONE_THIRD.getDenominatorAsInt();
    BigFraction bigFraction8 = bigFraction5.ONE_FIFTH.multiply(bigFraction3);
    bigFraction8.TWO_QUARTERS.add(bigFraction4);
    bigFraction0.getField();
    bigFraction2.getField();
    bigFraction1.multiply(4458);
    bigFraction7.abs();
    // Undeclared exception!
    try {
        bigFraction7.divide((BigInteger) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed <code>BigInteger</code>,
 * ie ""this * 1 / bg"", returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the <code>BigInteger</code> to divide by, must not be
 *            <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}.
 * @throws ZeroException
 *             if the fraction to divide by is zero.
 */"
"@Override
public float floatValue() {
    float result = numerator.floatValue() / denominator.floatValue();
    // Numerator and/or denominator must be out of range:
    // Calculate how far to shift them to put them in range.
    return result;
}","public void test05563() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0L);
    BigFraction bigFraction1 = bigFraction0.divide(4577762542105553359L);
    bigFraction1.TWO_FIFTHS.pow((-1.0));
    bigFraction1.floatValue();
}","/**
 * <p>
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>float</tt>.
 * @see java.lang.Number#floatValue()
 */"
"public BigFraction(final long num, final long den) {
    this(BigInteger.valueOf(num), BigInteger.valueOf(den));
}","public void test05664() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Create a {@link BigFraction} given the numerator and denominator as simple
 * <tt>long</tt>. The {@link BigFraction} is reduced to lowest terms.
 * </p>
 *
 * @param num
 *            the numerator.
 * @param den
 *            the denominator.
 */"
"public int compareTo(final BigFraction object) {
    BigInteger nOd = numerator.multiply(object.denominator);
    BigInteger dOn = denominator.multiply(object.numerator);
    return nOd.compareTo(dOn);
}","public void test05765() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-467.49498417), 1480);
    bigFraction0.doubleValue();
    bigFraction0.getNumeratorAsLong();
    // Undeclared exception!
    try {
        bigFraction0.compareTo((BigFraction) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Compares this object to another based on size.
 * </p>
 *
 * @param object
 *            the object to compare to, must not be <code>null</code>.
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 * @see java.lang.Comparable#compareTo(java.lang.Object)
 */"
"public BigFraction subtract(final long l) {
    return subtract(BigInteger.valueOf(l));
}","public void test05866() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
    BigFraction bigFraction1 = new BigFraction((long) (-1));
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    bigFraction0.percentageValue();
    BigFraction bigFraction3 = bigFraction2.divide(9218868437227405312L);
    bigFraction3.subtract(0L);
}","/**
 * <p>
 * Subtracts the value of a {@code long} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param l the {@code long} to subtract.
 * @return a {@code BigFraction} instance with the resulting values.
 */"
"@Override
public String toString() {
    String str = null;
    if (BigInteger.ONE.equals(denominator)) {
        str = numerator.toString();
    } else if (BigInteger.ZERO.equals(numerator)) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test05967() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    bigFraction0.doubleValue();
    BigInteger bigInteger0 = BigInteger.ZERO;
    bigFraction0.TWO_FIFTHS.multiply(0L);
    BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
    bigFraction1.getNumeratorAsLong();
    bigFraction1.toString();
}","/**
 * <p>
 * Returns the <code>String</code> representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test06068() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1));
    BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    bigFraction2.add(bigFraction1);
    bigFraction0.getDenominatorAsInt();
    bigFraction1.bigDecimalValue(1, 5);
    bigFraction2.getDenominatorAsInt();
    BigFraction bigFraction3 = bigFraction2.add(205);
    bigFraction0.negate();
    // Undeclared exception!
    try {
        bigFraction3.bigDecimalValue((-1488));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"public BigFraction multiply(final int i) {
    return multiply(BigInteger.valueOf(i));
}","public void test06169() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(9007199254740990L);
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(bigInteger0);
    bigFraction1.ONE_HALF.equals("" / "");
    bigFraction0.TWO_QUARTERS.getField();
    bigFraction0.toString();
    bigFraction0.getNumeratorAsInt();
    bigFraction1.TWO_FIFTHS.percentageValue();
    BigFraction bigFraction2 = bigFraction1.abs();
    Object object0 = new Object();
    bigFraction0.equals(object0);
    BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
    bigFraction1.intValue();
    BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
    BigFraction bigFraction5 = bigFraction3.reduce();
    bigFraction5.floatValue();
    bigFraction4.multiply((-2));
}","/**
 * <p>
 * Multiply the value of this fraction by the passed <tt>int</tt>, returning
 * the result in reduced form.
 * </p>
 *
 * @param i
 *            the <tt>int</tt> to multiply by.
 * @return a {@link BigFraction} instance with the resulting values.
 */"
"public BigFractionField getField() {
    return BigFractionField.getInstance();
}","public void test06270() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1.0));
    BigFraction bigFraction1 = BigFraction.ZERO;
    bigFraction1.THREE_FIFTHS.bigDecimalValue();
    BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
    bigFraction0.THREE_QUARTERS.getNumeratorAsLong();
    bigFraction1.ONE_HALF.add((-1102));
    BigInteger bigInteger0 = bigFraction2.getNumerator();
    BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
    BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.pow((-1102));
    bigFraction2.TWO_FIFTHS.subtract(bigFraction3);
    bigFraction3.ZERO.negate();
    bigFraction0.floatValue();
    bigFraction4.negate();
    bigFraction0.getDenominatorAsInt();
    bigFraction1.getField();
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test06371() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add((-853L));
    bigFraction0.negate();
    BigFraction bigFraction2 = BigFraction.MINUS_ONE;
    bigFraction1.equals(bigFraction2);
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public static BigFraction getReducedFraction(final int numerator, final int denominator) {
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    return new BigFraction(numerator, denominator);
}","public void test06472() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = BigFraction.MINUS_ONE;
    BigFraction bigFraction2 = bigFraction1.TWO.add(bigFraction0);
    bigFraction2.MINUS_ONE.doubleValue();
    bigFraction0.divide(bigFraction1);
    BigFraction bigFraction3 = bigFraction1.add(3);
    bigFraction3.pow(0.0);
    bigFraction3.bigDecimalValue();
    bigFraction0.getNumeratorAsInt();
    BigFraction bigFraction4 = bigFraction1.multiply(0);
    bigFraction4.THREE_QUARTERS.getNumeratorAsInt();
    bigFraction4.TWO_THIRDS.abs();
    bigFraction3.multiply(bigFraction1);
    BigFraction bigFraction5 = bigFraction1.reduce();
    bigFraction5.ONE.add((long) 3);
    // Undeclared exception!
    try {
        BigFraction.getReducedFraction(3630, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction
 * Y/Z.
 * </p>
 *
 * <p>
 * Any negative signs are resolved to be on the numerator.
 * </p>
 *
 * @param numerator
 *            the numerator, for example the three in 'three sevenths'.
 * @param denominator
 *            the denominator, for example the seven in 'three sevenths'.
 * @return a new fraction instance, with the numerator and denominator
 *         reduced.
 * @throws ArithmeticException
 *             if the denominator is <code>zero</code>.
 */"
"public BigFraction multiply(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(bg.multiply(numerator), denominator);
}","public void test06573() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_THIRD;
    BigInteger bigInteger0 = null;
    // Undeclared exception!
    try {
        bigFraction0.MINUS_ONE.multiply((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Multiplies the value of this fraction by the passed
 * <code>BigInteger</code>, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to multiply by.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code bg} is {@code null}.
 */"
"public BigFraction(BigInteger num, BigInteger den) {
    MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);
    MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);
    if (BigInteger.ZERO.equals(den)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    if (BigInteger.ZERO.equals(num)) {
        numerator = BigInteger.ZERO;
        denominator = BigInteger.ONE;
    } else {
        // reduce numerator and denominator by greatest common denominator
        final BigInteger gcd = num.gcd(den);
        if (BigInteger.ONE.compareTo(gcd) < 0) {
            num = num.divide(gcd);
            den = den.divide(gcd);
        }
        // move sign to numerator
        if (BigInteger.ZERO.compareTo(den) > 0) {
            num = num.negate();
            den = den.negate();
        }
        // store the values in the final fields
        numerator = num;
        denominator = den;
    }
}","public void test06674() throws Throwable {
    BigInteger bigInteger0 = null;
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // numerator
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Create a {@link BigFraction} given the numerator and denominator as
 * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.
 *
 * @param num the numerator, must not be {@code null}.
 * @param den the denominator, must not be {@code null}.
 * @throws ZeroException if the denominator is zero.
 * @throws NullArgumentException if either of the arguments is null
 */"
"public long getNumeratorAsLong() {
    return numerator.longValue();
}","public void test06775() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigInteger bigInteger0 = BigInteger.TEN;
    bigFraction0.ONE_HALF.pow(bigInteger0);
    BigInteger bigInteger1 = BigInteger.ZERO;
    bigFraction0.multiply(bigInteger1);
    bigFraction0.getNumeratorAsLong();
}","/**
 * <p>
 * Access the numerator as a <tt>long</tt>.
 * </p>
 *
 * @return the numerator as a <tt>long</tt>.
 */"
"public BigFraction divide(final BigInteger bg) {
    if (BigInteger.ZERO.equals(bg)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test06876() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract((-749L));
    Object object0 = new Object();
    bigFraction0.equals(object0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    bigFraction1.TWO.pow(bigInteger0);
    // Undeclared exception!
    try {
        bigFraction0.TWO_QUARTERS.divide(bigInteger0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed <code>BigInteger</code>,
 * ie ""this * 1 / bg"", returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the <code>BigInteger</code> to divide by, must not be
 *            <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}.
 * @throws ZeroException
 *             if the fraction to divide by is zero.
 */"
"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);
}","public void test06977() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.getField();
    bigFraction0.FOUR_FIFTHS.subtract(1);
    bigFraction0.bigDecimalValue();
    bigFraction0.longValue();
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue((-719), 1043);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p>
 *
 * @param scale
 *            scale of the <code>BigDecimal</code> quotient to be returned.
 *            see {@link BigDecimal} for more information.
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @see BigDecimal
 */"
"public BigFraction divide(final BigInteger bg) {
    if (BigInteger.ZERO.equals(bg)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test07078() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.ONE.multiply(bigFraction0);
    BigFraction bigFraction3 = bigFraction1.divide((-1446L));
    bigFraction3.FOUR_FIFTHS.pow(bigInteger0);
    bigFraction3.floatValue();
    bigFraction0.getField();
    BigFraction bigFraction4 = bigFraction3.multiply(bigFraction0);
    bigFraction4.ONE.percentageValue();
    bigFraction0.subtract(bigInteger0);
    bigFraction0.floatValue();
    bigFraction1.equals("""");
    bigFraction2.divide(bigInteger0);
}","/**
 * <p>
 * Divide the value of this fraction by the passed <code>BigInteger</code>,
 * ie ""this * 1 / bg"", returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the <code>BigInteger</code> to divide by, must not be
 *            <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}.
 * @throws ZeroException
 *             if the fraction to divide by is zero.
 */"
"public BigInteger getNumerator() {
    return numerator;
}","public void test07179() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
    bigFraction0.getNumerator();
}","/**
 * <p>
 * Access the numerator as a <code>BigInteger</code>.
 * </p>
 *
 * @return the numerator as a <code>BigInteger</code>.
 */"
"public BigFractionField getField() {
    return BigFractionField.getInstance();
}","public void test07280() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract((-449));
    bigFraction1.ONE_QUARTER.intValue();
    bigFraction1.MINUS_ONE.bigDecimalValue();
    bigFraction0.hashCode();
    bigFraction0.bigDecimalValue(1, 1);
    bigFraction0.getField();
}","/**
 * {@inheritDoc}
 */"
"public static BigFraction getReducedFraction(final int numerator, final int denominator) {
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    return new BigFraction(numerator, denominator);
}","public void test07381() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1464.0718), 3530.3516753794024, 76);
    BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((long) 76);
    bigFraction1.TWO.pow((long) 76);
    bigFraction0.ONE.divide(76);
    bigFraction0.ZERO.multiply(100L);
    bigFraction1.MINUS_ONE.pow(76);
    bigFraction1.TWO_QUARTERS.getDenominatorAsLong();
    bigFraction0.toString();
    bigFraction0.intValue();
    BigFraction bigFraction2 = bigFraction0.subtract((long) 76);
    BigInteger bigInteger0 = BigInteger.ONE;
    bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
    bigFraction2.compareTo(bigFraction1);
    bigFraction0.getDenominatorAsInt();
    bigFraction0.ZERO.subtract(0);
    // Undeclared exception!
    try {
        BigFraction.getReducedFraction((-1465), 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction
 * Y/Z.
 * </p>
 *
 * <p>
 * Any negative signs are resolved to be on the numerator.
 * </p>
 *
 * @param numerator
 *            the numerator, for example the three in 'three sevenths'.
 * @param denominator
 *            the denominator, for example the seven in 'three sevenths'.
 * @return a new fraction instance, with the numerator and denominator
 *         reduced.
 * @throws ArithmeticException
 *             if the denominator is <code>zero</code>.
 */"
"public int getDenominatorAsInt() {
    return denominator.intValue();
}","public void test07482() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
    bigFraction0.MINUS_ONE.subtract(bigFraction1);
    bigFraction0.getDenominatorAsInt();
}","/**
 * <p>
 * Access the denominator as a <tt>int</tt>.
 * </p>
 *
 * @return the denominator as a <tt>int</tt>.
 */"
"public BigFraction subtract(final int i) {
    return subtract(BigInteger.valueOf(i));
}","public void test07583() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = bigFraction0.negate();
    bigFraction0.TWO_QUARTERS.multiply(676L);
    bigFraction0.ZERO.hashCode();
    bigFraction0.ONE_FIFTH.pow((-940.0));
    bigFraction0.TWO_QUARTERS.add((-3358L));
    bigFraction1.divide((-3358L));
    bigFraction0.subtract((-1105));
}","/**
 * <p>
 * Subtracts the value of an {@code integer} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param i the {@code integer} to subtract.
 * @return a {@code BigFraction} instance with the resulting values.
 */"
"public BigFraction divide(final int i) {
    return divide(BigInteger.valueOf(i));
}","public void test07684() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    BigFraction.getReducedFraction(0, 0);
    BigInteger bigInteger0 = bigFraction0.getNumerator();
    BigFraction bigFraction1 = bigFraction0.divide(540);
    BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
    bigFraction1.TWO_FIFTHS.pow(bigInteger0);
    bigInteger0.equals(bigFraction1);
    BigFraction bigFraction3 = bigFraction2.divide(540);
    bigFraction2.ONE.doubleValue();
    bigFraction3.hashCode();
    BigFraction bigFraction4 = bigFraction1.THREE_QUARTERS.pow(540);
    bigFraction4.ONE.getNumeratorAsLong();
    BigFraction bigFraction5 = BigFraction.getReducedFraction(1699, 1699);
    bigFraction5.THREE_QUARTERS.longValue();
    BigFraction.getReducedFraction(3, 1911);
    BigFraction bigFraction6 = bigFraction2.add(540);
    bigFraction6.ZERO.floatValue();
    BigFraction bigFraction7 = bigFraction2.pow(0L);
    bigFraction5.subtract(bigInteger0);
    bigFraction0.intValue();
    bigFraction4.getNumerator();
    // Undeclared exception!
    try {
        bigFraction7.divide(0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed <tt>int</tt>, ie
 * ""this * 1 / i"", returning the result in reduced form.
 * </p>
 *
 * @param i
 *            the <tt>int</tt> to divide by.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws ArithmeticException
 *             if the fraction to divide by is zero.
 */"
"@Override
public float floatValue() {
    float result = numerator.floatValue() / denominator.floatValue();
    // Numerator and/or denominator must be out of range:
    // Calculate how far to shift them to put them in range.
    return result;
}","public void test07785() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    bigFraction0.ONE_THIRD.getNumeratorAsLong();
    bigFraction0.ONE_QUARTER.getField();
    bigFraction0.MINUS_ONE.pow(0.0);
    BigFraction bigFraction1 = new BigFraction(2098L, 1L);
    bigFraction0.ONE_QUARTER.add(bigFraction1);
    BigFraction bigFraction2 = bigFraction0.add(581);
    bigFraction0.pow(1);
    bigFraction2.getNumeratorAsInt();
    bigFraction0.getDenominator();
    bigFraction2.divide(bigFraction0);
    bigFraction0.subtract((-913L));
    bigFraction2.subtract(1L);
    bigFraction0.floatValue();
}","/**
 * <p>
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>float</tt>.
 * @see java.lang.Number#floatValue()
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test07886() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_HALF;
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = new BigInteger(794, 794, mockRandom0);
    BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
    bigFraction1.ONE_THIRD.intValue();
    bigFraction0.ONE_FIFTH.doubleValue();
    BigFraction bigFraction2 = bigFraction0.divide(1728L);
    BigFraction bigFraction3 = bigFraction2.multiply(4208363204685324176L);
    BigFraction bigFraction4 = bigFraction3.ONE_HALF.subtract(1728L);
    bigFraction3.ONE_QUARTER.getNumeratorAsLong();
    bigFraction3.ONE_QUARTER.pow(1.0);
    bigFraction4.ONE_THIRD.reciprocal();
    bigFraction1.bigDecimalValue(0, 1);
    bigFraction2.ONE_THIRD.getNumeratorAsInt();
    bigFraction1.getNumeratorAsLong();
    bigFraction2.hashCode();
    // Undeclared exception!
    try {
        bigFraction2.bigDecimalValue((-1468));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"public BigFractionField getField() {
    return BigFractionField.getInstance();
}","public void test07987() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
    BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((-2499L));
    bigFraction0.multiply(710L);
    bigFraction1.divide((-2377L));
    bigFraction0.getField();
}","/**
 * {@inheritDoc}
 */"
"public BigFraction pow(final int exponent) {
    if (exponent < 0) {
        return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));
    }
    return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));
}","public void test08088() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    bigFraction0.ONE.longValue();
    bigFraction0.getDenominatorAsInt();
    bigFraction0.TWO_FIFTHS.add(3952090531849364496L);
    bigFraction0.getDenominatorAsInt();
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) (-63);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    bigFraction0.divide(bigInteger0);
    bigFraction0.pow(0);
}","/**
 * <p>
 * Returns a {@code BigFraction} whose value is
 * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this {@code BigFraction} is to be
 *            raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public BigFraction subtract(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (ZERO.equals(fraction)) {
        return this;
    }
    BigInteger num = null;
    BigInteger den = null;
    if (denominator.equals(fraction.denominator)) {
        num = numerator.subtract(fraction.numerator);
        den = denominator;
    } else {
        num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));
        den = denominator.multiply(fraction.denominator);
    }
    return new BigFraction(num, den);
}","public void test08189() throws Throwable {
    int int0 = 1075;
    BigFraction bigFraction0 = new BigFraction(1075);
    bigFraction0.getDenominator();
    bigFraction0.TWO.subtract((-4337));
    // Undeclared exception!
    try {
        bigFraction0.subtract((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.
 * </p>
 *
 * @param fraction {@link BigFraction} to subtract, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 */"
"public BigDecimal bigDecimalValue() {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator));
}","public void test08290() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    bigFraction0.ONE_QUARTER.longValue();
    // Undeclared exception!
    try {
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Non-terminating decimal expansion; no exact representable decimal result.
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code>. This calculates the
 * fraction as the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws ArithmeticException
 *             if the exact quotient does not have a terminating decimal
 *             expansion.
 * @see BigDecimal
 */"
"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);
}","public void test08391() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.TWO_THIRDS.intValue();
    BigInteger bigInteger0 = BigInteger.TEN;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction2 = BigFraction.getReducedFraction(1, 1);
    BigFraction bigFraction3 = bigFraction1.reduce();
    bigFraction3.THREE_FIFTHS.multiply(bigFraction1);
    BigFraction.getReducedFraction(0, 0);
    BigFraction bigFraction4 = bigFraction0.multiply(bigInteger0);
    BigFraction bigFraction5 = BigFraction.getReducedFraction(0, 5);
    bigFraction5.ONE.getDenominatorAsLong();
    bigFraction2.pow(bigInteger0);
    BigFraction bigFraction6 = new BigFraction(36);
    bigFraction5.THREE_QUARTERS.compareTo(bigFraction6);
    BigFraction bigFraction7 = bigFraction2.reduce();
    BigFraction bigFraction8 = bigFraction1.abs();
    bigFraction8.ONE_FIFTH.floatValue();
    bigFraction0.getNumerator();
    bigFraction5.divide(bigFraction1);
    bigFraction7.toString();
    bigFraction6.pow(1.0);
    // Undeclared exception!
    try {
        bigFraction4.bigDecimalValue(1, (-806));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p>
 *
 * @param scale
 *            scale of the <code>BigDecimal</code> quotient to be returned.
 *            see {@link BigDecimal} for more information.
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @see BigDecimal
 */"
"public BigFraction reciprocal() {
    return new BigFraction(denominator, numerator);
}","public void test08492() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    bigFraction0.ONE_QUARTER.negate();
    Object object0 = new Object();
    bigFraction0.ONE_FIFTH.equals(object0);
    BigFraction bigFraction1 = BigFraction.getReducedFraction((-2492), 1);
    bigFraction0.compareTo(bigFraction1);
    BigFraction bigFraction2 = bigFraction0.multiply((long) 1);
    BigInteger bigInteger0 = BigInteger.TEN;
    bigFraction2.ONE_THIRD.add(bigInteger0);
    bigFraction2.THREE_QUARTERS.reciprocal();
    bigFraction2.intValue();
    BigFraction bigFraction3 = bigFraction1.divide((long) 2806);
    BigFraction bigFraction4 = bigFraction3.multiply((long) 1);
    BigFraction bigFraction5 = bigFraction4.subtract(1);
    BigFraction bigFraction6 = bigFraction5.ONE_HALF.divide(bigFraction4);
    bigFraction5.multiply(2396);
    bigFraction3.multiply((-9223372036854775808L));
    bigFraction6.reciprocal();
}","/**
 * <p>
 * Return the multiplicative inverse of this fraction.
 * </p>
 *
 * @return the reciprocal fraction.
 */"
"public BigFraction pow(final BigInteger exponent) {
    if (exponent.compareTo(BigInteger.ZERO) < 0) {
        final BigInteger eNeg = exponent.negate();
        return new BigFraction(ArithmeticUtils.pow(denominator, eNeg), ArithmeticUtils.pow(numerator, eNeg));
    }
    return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent));
}","public void test08593() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-931.46), (-588));
    BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.pow((-588));
    BigFraction bigFraction3 = bigFraction2.ONE.multiply(bigFraction1);
    BigFraction bigFraction4 = bigFraction1.MINUS_ONE.subtract((long) (-588));
    bigFraction4.MINUS_ONE.compareTo(bigFraction0);
    BigFraction bigFraction5 = bigFraction0.THREE_QUARTERS.multiply((long) (-588));
    BigFraction bigFraction6 = bigFraction0.subtract(bigFraction1);
    bigFraction6.hashCode();
    BigFraction bigFraction7 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction8 = bigFraction5.subtract(bigFraction7);
    bigFraction8.FOUR_FIFTHS.negate();
    BigFraction bigFraction9 = BigFraction.getReducedFraction((-1), (-1));
    bigFraction3.divide(bigFraction9);
    bigFraction4.abs();
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-1);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    bigFraction5.pow(bigInteger0);
}","/**
 * <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
 */"
"public BigFraction reciprocal() {
    return new BigFraction(denominator, numerator);
}","public void test08694() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    bigFraction0.FOUR_FIFTHS.bigDecimalValue();
    bigFraction0.ONE_FIFTH.bigDecimalValue(1770, 0);
    BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
    BigFraction bigFraction2 = bigFraction0.TWO.subtract(bigFraction1);
    bigFraction2.pow((double) 0);
    BigFraction bigFraction3 = bigFraction0.multiply((-1068));
    bigFraction3.ONE_QUARTER.intValue();
    BigFraction bigFraction4 = bigFraction3.multiply((long) 0);
    BigFraction bigFraction5 = bigFraction0.negate();
    bigFraction5.THREE_QUARTERS.multiply(1494L);
    bigFraction5.FOUR_FIFTHS.getDenominatorAsInt();
    int int0 = 1;
    BigFraction bigFraction6 = bigFraction4.TWO_THIRDS.subtract(1);
    bigFraction6.ONE_FIFTH.getField();
    bigFraction6.ONE.reciprocal();
    bigFraction0.ONE_FIFTH.abs();
    bigFraction4.TWO_FIFTHS.add(748);
    bigFraction4.divide((long) (-1068));
    // Undeclared exception!
    try {
        bigFraction4.reciprocal();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Return the multiplicative inverse of this fraction.
 * </p>
 *
 * @return the reciprocal fraction.
 */"
"public BigFraction multiply(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(bg.multiply(numerator), denominator);
}","public void test08795() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(2145);
    BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add((long) 2145);
    bigFraction0.ZERO.floatValue();
    bigFraction0.getNumeratorAsInt();
    bigFraction0.multiply(0L);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-42);
    byteArray0[1] = (byte) (-104);
    byteArray0[2] = (byte) 100;
    byteArray0[3] = (byte) (-114);
    byteArray0[4] = (byte) 37;
    byteArray0[5] = (byte) 16;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    bigFraction1.multiply(bigInteger0);
}","/**
 * <p>
 * Multiplies the value of this fraction by the passed
 * <code>BigInteger</code>, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to multiply by.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code bg} is {@code null}.
 */"
"public BigInteger getDenominator() {
    return denominator;
}","public void test08896() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.4580921530723572);
    BigFraction bigFraction1 = bigFraction0.pow((-2755L));
    BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.pow(3);
    BigFraction bigFraction3 = bigFraction2.ONE_HALF.reciprocal();
    BigFraction bigFraction4 = bigFraction0.ONE.multiply((-1));
    bigFraction0.getDenominator();
    bigFraction0.getField();
    BigFraction bigFraction5 = bigFraction4.negate();
    bigFraction3.getDenominator();
    bigFraction5.pow((-2755L));
    bigFraction1.getDenominator();
}","/**
 * <p>
 * Access the denominator as a <code>BigInteger</code>.
 * </p>
 *
 * @return the denominator as a <code>BigInteger</code>.
 */"
"public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException {
    this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}","public void test08997() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0.01111111111106311, (-1491.6951094175113), (-1208));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Unable to convert 0.011 to fraction after -1,208 iterations
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param epsilon
 *            maximum error allowed. The resulting fraction is within
 *            <code>epsilon</code> of <code>value</code>, in absolute terms.
 * @param maxIterations
 *            maximum number of convergents.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 * @see #BigFraction(double)
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test09199() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction((-1482), 1045);
    bigFraction0.toString();
    BigFraction bigFraction1 = new BigFraction((-1), 1045);
    bigFraction0.ONE.percentageValue();
    BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.multiply((-496L));
    bigFraction1.THREE_QUARTERS.equals(""-78 / 55"");
    BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
    BigInteger bigInteger0 = bigFraction3.getDenominator();
    BigFraction bigFraction4 = bigFraction2.multiply(bigInteger0);
    bigFraction4.TWO_THIRDS.getNumeratorAsLong();
    BigFraction bigFraction5 = bigFraction1.add(1);
    BigInteger bigInteger1 = BigInteger.ONE;
    bigInteger1.xor(bigInteger0);
    bigFraction0.divide(bigInteger1);
    BigFraction bigFraction6 = bigFraction2.multiply(bigFraction5);
    bigFraction6.TWO_QUARTERS.pow(0.0);
    bigFraction5.TWO.subtract((long) 1);
    bigFraction5.divide(bigFraction0);
    // Undeclared exception!
    try {
        bigFraction5.bigDecimalValue(2472);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"public BigFraction(final double value, final int maxDenominator) throws FractionConversionException {
    this(value, 0, maxDenominator, 100);
}","public void test092100() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(3.7048805655699485E151, 1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 37,048,805,655,699,485,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param maxDenominator
 *            The maximum allowed value for denominator.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 */"
"public BigFraction subtract(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);
}","public void test093101() throws Throwable {
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-3);
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) 0;
    byteArray0[3] = (byte) (-55);
    byteArray0[4] = (byte) 0;
    byteArray0[5] = (byte) 0;
    byteArray0[6] = (byte) 1;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    // Undeclared exception!
    try {
        bigFraction0.subtract((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Subtracts the value of an {@link BigInteger} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigInteger} is {@code null}.
 */"
"public BigFraction abs() {
    return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();
}","public void test094102() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigInteger bigInteger0 = BigInteger.TEN;
    BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide(bigInteger0);
    bigFraction1.THREE_FIFTHS.percentageValue();
    bigFraction0.THREE_FIFTHS.bigDecimalValue(173, 0);
    BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
    bigFraction2.THREE_QUARTERS.toString();
    BigFraction bigFraction3 = bigFraction0.multiply(bigFraction2);
    bigFraction3.getDenominatorAsInt();
    BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction5 = bigFraction3.MINUS_ONE.pow(bigInteger0);
    bigFraction4.MINUS_ONE.getDenominatorAsInt();
    bigFraction3.ONE_HALF.longValue();
    bigFraction4.THREE_QUARTERS.getDenominatorAsInt();
    bigFraction4.ONE.pow((double) 0);
    bigFraction4.ONE_HALF.add(bigFraction5);
    bigFraction2.equals(bigFraction4);
    bigFraction4.getNumeratorAsInt();
    bigFraction3.hashCode();
    bigFraction0.abs();
    bigFraction0.add(25);
    bigFraction3.pow(0L);
    bigFraction3.negate();
    bigFraction5.intValue();
    bigFraction5.abs();
}","/**
 * <p>
 * Returns the absolute value of this {@link BigFraction}.
 * </p>
 *
 * @return the absolute value as a {@link BigFraction}.
 */"
"public BigFraction add(final BigInteger bg) throws NullArgumentException {
    MathUtils.checkNotNull(bg);
    return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);
}","public void test095103() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    bigFraction0.longValue();
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-83);
    BigInteger bigInteger0 = BigInteger.ONE;
    bigFraction0.TWO_THIRDS.add(bigInteger0);
    bigFraction0.ZERO.pow(0.0);
    byteArray0[2] = (byte) (-1);
    bigFraction0.ONE_QUARTER.floatValue();
    BigInteger bigInteger1 = new BigInteger(byteArray0);
    BigFraction bigFraction1 = bigFraction0.pow(bigInteger1);
    BigInteger bigInteger2 = null;
    BigFraction bigFraction2 = BigFraction.ZERO;
    bigFraction1.ONE.add(bigFraction2);
    try {
        bigFraction0.add((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * <p>
 * Adds the value of this fraction to the passed {@link BigInteger},
 * returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the {@link BigInteger} to add, must'nt be <code>null</code>.
 * @return a <code>BigFraction</code> instance with the resulting values.
 * @throws NullArgumentException
 *             if the {@link BigInteger} is <code>null</code>.
 */"
"@Override
public int hashCode() {
    return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();
}","public void test096104() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-858));
    bigFraction0.ONE_FIFTH.reduce();
    BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
    BigFraction bigFraction2 = bigFraction1.ONE_HALF.pow(1);
    bigFraction2.TWO.negate();
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction4 = bigFraction3.ONE_HALF.add((-1));
    bigFraction3.compareTo(bigFraction0);
    bigFraction3.ONE_QUARTER.hashCode();
    bigFraction0.pow((double) (-858));
    bigFraction1.pow((-570.8664653));
    BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
    bigFraction5.TWO_THIRDS.negate();
    bigFraction5.MINUS_ONE.bigDecimalValue();
    BigFraction bigFraction6 = bigFraction0.divide((long) 1);
    bigFraction6.TWO_FIFTHS.longValue();
    bigFraction6.ONE_HALF.add(0);
    BigFraction bigFraction7 = bigFraction4.multiply((-3208));
    bigFraction7.ONE_HALF.multiply((-1530L));
    bigFraction7.MINUS_ONE.bigDecimalValue();
    BigInteger bigInteger1 = bigFraction1.getNumerator();
    BigFraction bigFraction8 = bigFraction4.multiply(bigInteger1);
    bigFraction3.ONE_HALF.reciprocal();
    bigFraction7.intValue();
    bigFraction4.reduce();
    bigFraction8.floatValue();
    bigFraction6.hashCode();
}","/**
 * <p>
 * Gets a hashCode for the fraction.
 * </p>
 *
 * @return a hash code value for this object.
 * @see java.lang.Object#hashCode()
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test097105() throws Throwable {
    byte[] byteArray0 = new byte[0];
    BigInteger bigInteger0 = new BigInteger(0, byteArray0);
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    bigFraction0.FOUR_FIFTHS.divide(1);
    bigFraction0.ONE_QUARTER.divide((-2933));
    bigFraction0.bigDecimalValue(0);
    bigFraction0.TWO_QUARTERS.intValue();
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue((-1189));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"public int getDenominatorAsInt() {
    return denominator.intValue();
}","public void test098106() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1192L), (-3512299194304650054L));
    BigInteger bigInteger0 = BigInteger.TEN;
    BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
    bigFraction0.ONE_FIFTH.equals(bigFraction1);
    BigFraction bigFraction2 = bigFraction0.multiply((-270L));
    bigFraction2.getDenominatorAsInt();
}","/**
 * <p>
 * Access the denominator as a <tt>int</tt>.
 * </p>
 *
 * @return the denominator as a <tt>int</tt>.
 */"
"public BigFraction add(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (ZERO.equals(fraction)) {
        return this;
    }
    BigInteger num = null;
    BigInteger den = null;
    if (denominator.equals(fraction.denominator)) {
        num = numerator.add(fraction.numerator);
        den = denominator;
    } else {
        num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));
        den = denominator.multiply(fraction.denominator);
    }
    return new BigFraction(num, den);
}","public void test099107() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    // Undeclared exception!
    try {
        bigFraction0.FOUR_FIFTHS.add((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Adds the value of this fraction to another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction
 *            the {@link BigFraction} to add, must not be <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigFraction} is {@code null}.
 */"
"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);
}","public void test100108() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
    bigFraction0.ONE_QUARTER.doubleValue();
    bigFraction0.doubleValue();
    BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
    BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
    BigFraction bigFraction3 = bigFraction2.reduce();
    bigFraction0.reduce();
    bigFraction1.MINUS_ONE.reduce();
    bigFraction2.THREE_QUARTERS.pow(1213);
    // Undeclared exception!
    try {
        bigFraction3.bigDecimalValue((-1780), (-1780));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p>
 *
 * @param scale
 *            scale of the <code>BigDecimal</code> quotient to be returned.
 *            see {@link BigDecimal} for more information.
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @see BigDecimal
 */"
"public BigFraction subtract(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);
}","public void test101109() throws Throwable {
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-116);
    byteArray0[1] = (byte) 68;
    byteArray0[2] = (byte) (-15);
    byteArray0[3] = (byte) 76;
    byteArray0[4] = (byte) (-106);
    byteArray0[5] = (byte) (-103);
    byteArray0[6] = (byte) 70;
    byteArray0[7] = (byte) (-31);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
    bigFraction0.subtract(bigInteger0);
}","/**
 * <p>
 * Subtracts the value of an {@link BigInteger} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigInteger} is {@code null}.
 */"
"public BigFraction pow(final BigInteger exponent) {
    if (exponent.compareTo(BigInteger.ZERO) < 0) {
        final BigInteger eNeg = exponent.negate();
        return new BigFraction(ArithmeticUtils.pow(denominator, eNeg), ArithmeticUtils.pow(numerator, eNeg));
    }
    return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent));
}","public void test102110() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-974L));
    BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.abs();
    BigFraction bigFraction2 = bigFraction1.ONE_THIRD.pow(1);
    bigFraction0.TWO.hashCode();
    int int0 = (-1154);
    bigFraction1.THREE_QUARTERS.intValue();
    BigFraction bigFraction3 = bigFraction0.divide((-1154));
    bigFraction2.ONE_FIFTH.add((-1154));
    bigFraction3.subtract((-974L));
    BigFraction bigFraction4 = bigFraction3.add(bigFraction0);
    // Undeclared exception!
    try {
        bigFraction4.TWO.pow((BigInteger) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
 */"
"public BigFraction pow(final int exponent) {
    if (exponent < 0) {
        return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));
    }
    return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));
}","public void test103111() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(2147483648L);
    bigFraction0.getNumeratorAsInt();
    BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(bigFraction0);
    BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.multiply(2147483648L);
    bigFraction0.TWO_THIRDS.getDenominatorAsInt();
    bigFraction0.TWO_FIFTHS.subtract(bigFraction0);
    bigFraction0.percentageValue();
    bigFraction0.intValue();
    bigFraction0.getDenominatorAsInt();
    BigFraction bigFraction3 = bigFraction0.pow((long) 3);
    BigFraction bigFraction4 = bigFraction0.ONE_THIRD.divide(2147483648L);
    BigFraction bigFraction5 = BigFraction.ONE_HALF;
    bigFraction4.ZERO.equals(bigFraction5);
    bigFraction3.TWO_THIRDS.divide(bigFraction0);
    bigFraction3.ONE_QUARTER.intValue();
    BigDecimal bigDecimal0 = new BigDecimal((long) 1);
    bigFraction3.divide((long) Integer.MIN_VALUE);
    BigFraction bigFraction6 = bigFraction2.multiply((-3142L));
    // Undeclared exception!
    try {
        bigFraction6.FOUR_FIFTHS.pow(Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Negative exponent
        //
        verifyException(""java.math.BigInteger"", e);
    }
}","/**
 * <p>
 * Returns a {@code BigFraction} whose value is
 * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this {@code BigFraction} is to be
 *            raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);
}","public void test104112() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(1331);
    bigFraction0.divide((-378));
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue(1331, 1331);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p>
 *
 * @param scale
 *            scale of the <code>BigDecimal</code> quotient to be returned.
 *            see {@link BigDecimal} for more information.
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @see BigDecimal
 */"
"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);
}","public void test105113() throws Throwable {
    BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
    bigFraction0.ZERO.percentageValue();
    bigFraction0.THREE_FIFTHS.floatValue();
    BigInteger bigInteger0 = BigInteger.TEN;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    bigFraction0.toString();
    bigFraction1.longValue();
    BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
    int int0 = (-1905);
    bigFraction2.TWO_THIRDS.subtract((-494));
    bigFraction2.ONE_QUARTER.pow((-1905));
    bigFraction1.negate();
    // Undeclared exception!
    try {
        bigFraction1.bigDecimalValue(2926, 2023);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p>
 *
 * @param scale
 *            scale of the <code>BigDecimal</code> quotient to be returned.
 *            see {@link BigDecimal} for more information.
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @see BigDecimal
 */"
