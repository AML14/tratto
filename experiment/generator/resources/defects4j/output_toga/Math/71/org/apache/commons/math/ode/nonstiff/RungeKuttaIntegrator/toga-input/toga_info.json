{
  "test00" : {
    "methodSignature" : "public int getEvaluations()",
    "methodName" : "getEvaluations",
    "className" : "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();\n    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);\n    ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2701.708662));\n    classicalRungeKuttaIntegrator0.integrate(firstOrderConverter0, (-856.79967603), doubleArray0, 211.0, doubleArray0);\n    classicalRungeKuttaIntegrator0.getEvaluations();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException",
    "methodName" : "integrate",
    "className" : "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();\n    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);\n    ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);\n    double[] doubleArray1 = new double[0];\n    // Undeclared exception!\n    classicalRungeKuttaIntegrator0.integrate(firstOrderConverter0, 0, doubleArray0, (-0.25), doubleArray1);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException",
    "methodName" : "integrate",
    "className" : "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();\n    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);\n    ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);\n    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());\n    StepNormalizer stepNormalizer0 = new StepNormalizer(15.0, fixedStepHandler0);\n    classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);\n    // Undeclared exception!\n    classicalRungeKuttaIntegrator0.integrate(firstOrderConverter0, Double.NaN, doubleArray0, Double.NaN, doubleArray0);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException",
    "methodName" : "integrate",
    "className" : "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();\n    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);\n    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0);\n    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));\n    eulerIntegrator0.addEventHandler(eventHandler0, 0, 0, 0);\n    // Undeclared exception!\n    eulerIntegrator0.integrate(firstOrderConverter0, 0, doubleArray0, (-43.53345659001114), doubleArray0);\n}",
    "testName" : "test33"
  }
}