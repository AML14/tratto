org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator,@Test(timeout = 4000)
public void test011() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, 958.3823, (-6.179694156470946));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    dormandPrince54Integrator0.integrate(firstOrderConverter0, (-6.179694156470946), doubleArray0, 0.0, doubleArray0);
    dormandPrince54Integrator0.getEvaluations();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator,@Test(timeout = 4000)
public void test1218() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, 958.3823, 958.3823);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = new double[4];
    dormandPrince54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0, 3831.9243024, doubleArray1);
    dormandPrince54Integrator0.getEvaluations();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
