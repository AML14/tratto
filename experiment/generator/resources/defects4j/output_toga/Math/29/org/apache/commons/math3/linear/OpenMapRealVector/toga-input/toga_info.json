{
  "test141141" : {
    "methodSignature" : "public double getEntry(int index)",
    "methodName" : "getEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141141() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double((-968.5766984261));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-968.5766984261));\n    doubleArray0[1] = double1;\n    Double double2 = new Double(0.0);\n    Double.min(0.0, 770.181);\n    Double.max(0.0, 0.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(0.0);\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);\n    openMapRealVector0.iterator();\n    openMapRealVector0.iterator();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(0.0);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapAdd(1.0E-12);\n    openMapRealVector1.isInfinite();\n    Double.sum(0.0, (-1456.2699882864913));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(2455).when(openIntToDoubleHashMap_Iterator0).key();\n    doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.getValue();\n    openMapRealVector1.ebeDivide(openMapRealVector2);\n    openMapRealVector2.unitVector();\n    openMapRealVector_OpenMapEntry0.setValue(0.0);\n    openMapRealVector3.getLInfDistance(openMapRealVector2);\n    openMapRealVector2.getEntry((-1423));\n}",
    "testName" : "test141141"
  },
  "test124124" : {
    "methodSignature" : "public double getDistance(RealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124124() throws Throwable {\n    Double[] doubleArray0 = new Double[6];\n    Double double0 = new Double((-3520.949999));\n    doubleArray0[0] = double0;\n    Double double1 = new Double(Double.NaN);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(3.141592653589793);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(588.5125100185);\n    doubleArray0[3] = double3;\n    Double.sum((-1922.0), 6176.2973302566);\n    Double double4 = new Double(2480.0);\n    doubleArray0[4] = double4;\n    Double double5 = new Double(3.141592653589793);\n    doubleArray0[5] = double5;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double[] doubleArray1 = new double[6];\n    doubleArray1[0] = (-2139.08106043888);\n    doubleArray1[1] = 6176.2973302566;\n    doubleArray1[2] = 4254.2973302566;\n    doubleArray1[3] = (double) doubleArray0[0];\n    doubleArray1[4] = 6176.2973302566;\n    doubleArray1[5] = (-3520.949999);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1, true);\n    openMapRealVector0.dotProduct((RealVector) arrayRealVector0);\n    openMapRealVector0.set((double) doubleArray0[2]);\n    openMapRealVector0.unitize();\n    openMapRealVector0.getDistance((RealVector) arrayRealVector0);\n}",
    "testName" : "test124124"
  },
  "test0000" : {
    "methodSignature" : "public double cosine(RealVector v)",
    "methodName" : "cosine",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.dotProduct((RealVector) openMapRealVector1);\n    openMapRealVector1.isInfinite();\n    double[] doubleArray0 = new double[4];\n    doubleArray0[0] = 0.0;\n    RealVector realVector0 = openMapRealVector1.mapMultiplyToSelf((-641.0));\n    doubleArray0[1] = 0.0;\n    doubleArray0[2] = 0.0;\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    openMapRealVector0.subtract((RealVector) openMapRealVector1);\n    doubleArray0[3] = 0.0;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    openMapRealVector1.append(0.0);\n    openMapRealVector1.cosine(realVector0);\n}",
    "testName" : "test0000"
  },
  "test0088" : {
    "methodSignature" : "public double getEntry(int index)",
    "methodName" : "getEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0088() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double((-968.5766984261));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-968.5766984261));\n    doubleArray0[1] = double1;\n    Double double2 = new Double(0.0);\n    Double.min(0.0, 770.181);\n    Double.max(0.0, 0.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(0.0);\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);\n    openMapRealVector0.iterator();\n    openMapRealVector0.iterator();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(0.0);\n    openMapRealVector1.mapAdd(1.0E-12);\n    openMapRealVector1.isInfinite();\n    Double.sum(0.0, (-1456.2699882864913));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(2455).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector1.ebeDivide(openMapRealVector2);\n    OpenMapRealVector openMapRealVector4 = openMapRealVector2.unitVector();\n    openMapRealVector4.ebeMultiply(openMapRealVector1);\n    openMapRealVector4.isNaN();\n    openMapRealVector_OpenMapEntry0.setValue(0.0);\n    openMapRealVector3.isInfinite();\n    openMapRealVector2.getEntry((-1423));\n}",
    "testName" : "test0088"
  },
  "test149149" : {
    "methodSignature" : "public OpenMapRealVector unitVector()",
    "methodName" : "unitVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test149149() throws Throwable {\n    Double[] doubleArray0 = new Double[7];\n    Double double0 = new Double((-1.0));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(1.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(310.66427041);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((-1177.585));\n    doubleArray0[4] = double4;\n    Double double5 = new Double((double) doubleArray0[1]);\n    doubleArray0[5] = double5;\n    Double.max((double) doubleArray0[3], 2568.2101);\n    Double double6 = new Double((double) doubleArray0[3]);\n    doubleArray0[6] = double6;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector1.unitize();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);\n    Double.min(2568.2101, 1.0E-12);\n    openMapRealVector1.mapSubtractToSelf((double) doubleArray0[6]);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(doubleArray0, 132.09534419319735);\n    Double.min(566.855241899, (-1.0));\n    openMapRealVector0.getLInfDistance(openMapRealVector3);\n    OpenMapRealVector openMapRealVector4 = openMapRealVector2.add(openMapRealVector3);\n    openMapRealVector4.getDistance(openMapRealVector3);\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n    openMapRealVector1.getSparsity();\n    openMapRealVector1.unitVector();\n}",
    "testName" : "test149149"
  },
  "test107107" : {
    "methodSignature" : "public double getDistance(RealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107107() throws Throwable {\n    int int0 = 0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, (-3039), 0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1), (-1062.57));\n    openMapRealVector0.getDistance((RealVector) openMapRealVector1);\n}",
    "testName" : "test107107"
  },
  "test03636" : {
    "methodSignature" : "public OpenMapRealVector(OpenMapRealVector v)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03636() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = 0.0;\n    doubleArray0[2] = 511.2578056;\n    doubleArray0[3] = 2173.7475097;\n    doubleArray0[4] = (-433.180479761631);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n}",
    "testName" : "test03636"
  },
  "test155155" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test155155() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    doubleArray0[0] = (-837.1);\n    doubleArray0[1] = 2239.0;\n    doubleArray0[2] = 1750.6568849334;\n    doubleArray0[3] = 2.5635838508605957;\n    doubleArray0[4] = 0.006432712288963109;\n    doubleArray0[5] = 1.4754809136835937E-8;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2239.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-4024));\n    openMapRealVector1.getMaxValue();\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);\n    openMapRealVector0.hashCode();\n    openMapRealVector2.mapAdd(548.241761);\n    openMapRealVector1.mapAddToSelf(972.023990461);\n    openMapRealVector0.append(972.023990461);\n    openMapRealVector2.setEntry((-2163), 0.006432712288963109);\n}",
    "testName" : "test155155"
  },
  "test02424" : {
    "methodSignature" : "public double getSparsity()",
    "methodName" : "getSparsity",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02424() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double(1413.763634870159);\n    doubleArray0[0] = double0;\n    Double double1 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(1.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(1493.5658845);\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 2007);\n    openMapRealVector1.getSparsity();\n}",
    "testName" : "test02424"
  },
  "test130130" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v)",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130130() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 1477.7111623;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1477.7111623);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.getL1Distance(openMapRealVector1);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply(openMapRealVector0);\n    openMapRealVector2.sparseIterator();\n    openMapRealVector1.add((RealVector) openMapRealVector0);\n    int int0 = 2146375643;\n    openMapRealVector0.setSubVector(2146375643, openMapRealVector2);\n}",
    "testName" : "test130130"
  },
  "test04848" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04848() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(763);\n    openMapRealVector0.isInfinite();\n    Double[] doubleArray0 = new Double[6];\n    doubleArray0[0] = (Double) 1.0E-12;\n    doubleArray0[1] = (Double) 1.0E-12;\n    doubleArray0[2] = (Double) 1.0E-12;\n    doubleArray0[3] = (Double) 1.0E-12;\n    doubleArray0[4] = (Double) 1.0E-12;\n    doubleArray0[5] = (Double) 1.0E-12;\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[5]);\n    RealVector realVector0 = openMapRealVector1.mapSubtractToSelf(0.0);\n    realVector0.append((RealVector) openMapRealVector0);\n    openMapRealVector0.getDistance(openMapRealVector1);\n    openMapRealVector0.setEntry(763, 763);\n}",
    "testName" : "test04848"
  },
  "test01212" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    Double[] doubleArray0 = new Double[7];\n    Double double0 = new Double((-1.0));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(1.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(310.66427041);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((double) doubleArray0[1]);\n    doubleArray0[4] = double4;\n    Double double5 = new Double((double) doubleArray0[1]);\n    doubleArray0[5] = double5;\n    Double.max((double) doubleArray0[3], 2568.2101);\n    Double double6 = new Double((double) doubleArray0[3]);\n    doubleArray0[6] = double6;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector1.unitize();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);\n    Double.min(2568.2101, 1.0E-12);\n    openMapRealVector1.mapSubtractToSelf((double) doubleArray0[6]);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(doubleArray0, 132.09534419319735);\n    Double.min(566.855241899, (-1.0));\n    openMapRealVector0.getLInfDistance(openMapRealVector3);\n    OpenMapRealVector openMapRealVector4 = openMapRealVector2.add(openMapRealVector3);\n    openMapRealVector4.getDistance(openMapRealVector3);\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n    openMapRealVector1.unitVector();\n    openMapRealVector0.setEntry((-2090), (double) doubleArray0[5]);\n}",
    "testName" : "test01212"
  },
  "test05656" : {
    "methodSignature" : "public OpenMapRealVector ebeDivide(RealVector v)",
    "methodName" : "ebeDivide",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05656() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    doubleArray0[0] = (-2840.252126363322);\n    doubleArray0[1] = 0.0;\n    doubleArray0[2] = (-1.0);\n    doubleArray0[3] = (-1578.600484847);\n    doubleArray0[4] = 0.0;\n    doubleArray0[5] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1439.0658706);\n    Double[] doubleArray1 = new Double[5];\n    doubleArray1[0] = (Double) (-2840.252126363322);\n    doubleArray1[1] = (Double) 0.0;\n    doubleArray1[2] = (Double) (-1578.600484847);\n    doubleArray1[3] = (Double) 0.0;\n    doubleArray1[4] = (Double) (-1.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1, 0.0);\n    openMapRealVector0.ebeDivide(openMapRealVector1);\n}",
    "testName" : "test05656"
  },
  "test138138" : {
    "methodSignature" : "public OpenMapRealVector(RealVector v)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138138() throws Throwable {\n    int int0 = (-3137);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2808, (-3137));\n    OpenMapRealVector openMapRealVector1 = null;\n    openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n}",
    "testName" : "test138138"
  },
  "test06868" : {
    "methodSignature" : "public double dotProduct(RealVector v)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06868() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-132.09534419319735);\n    doubleArray0[2] = (-170.24);\n    doubleArray0[3] = 6.283185307179586;\n    doubleArray0[4] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);\n    openMapRealVector2.dotProduct((RealVector) openMapRealVector1);\n}",
    "testName" : "test06868"
  },
  "test02828" : {
    "methodSignature" : "public RealVector combineToSelf(double a, double b, RealVector y)",
    "methodName" : "combineToSelf",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02828() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1492);\n    double[] doubleArray0 = new double[0];\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.combineToSelf(1492, 1492, openMapRealVector1);\n}",
    "testName" : "test02828"
  },
  "test113113" : {
    "methodSignature" : "protected void checkIndices(final int start, final int end)",
    "methodName" : "checkIndices",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113113() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = 4111.0;\n    doubleArray0[1] = 649.9224;\n    doubleArray0[2] = (-763.7758205708);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(1396, 4111.0);\n    ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector1);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray0, (-372.3350457044207));\n    openMapRealVector0.dotProduct(openMapRealVector2);\n    openMapRealVector2.getL1Distance((RealVector) openMapRealVector0);\n    openMapRealVector1.checkIndices(1396, (-868));\n}",
    "testName" : "test113113"
  },
  "test01616" : {
    "methodSignature" : "public double[] toArray()",
    "methodName" : "toArray",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01616() throws Throwable {\n    Double[] doubleArray0 = new Double[2];\n    Double double0 = new Double(1734.11);\n    doubleArray0[0] = double0;\n    Double double1 = new Double(1734.11);\n    Double.min((-1.0), 3495.3);\n    Double.min(3495.3, (double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.getL1Norm();\n    openMapRealVector0.toArray();\n}",
    "testName" : "test01616"
  },
  "test07272" : {
    "methodSignature" : "protected void checkVectorDimensions(int n)",
    "methodName" : "checkVectorDimensions",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07272() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(47, 47, (-1409.046116306145));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(47, 32);\n    openMapRealVector1.getL1Distance(openMapRealVector0);\n    openMapRealVector0.dotProduct(openMapRealVector1);\n    OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();\n    openMapRealVector_OpenMapSparseIterator0.hasNext();\n    openMapRealVector0.checkVectorDimensions(1);\n}",
    "testName" : "test07272"
  },
  "test144144" : {
    "methodSignature" : "public double getDistance(RealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test144144() throws Throwable {\n    Double[] doubleArray0 = new Double[7];\n    Double double0 = new Double(2.0);\n    doubleArray0[0] = double0;\n    Double double1 = new Double(9.253781621373885E29);\n    doubleArray0[1] = double1;\n    Double.max(585.50939104, (double) doubleArray0[0]);\n    Double double2 = new Double(0.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double((double) doubleArray0[1]);\n    doubleArray0[3] = double3;\n    Double double4 = new Double(0.0);\n    doubleArray0[4] = double4;\n    Double double5 = new Double(1328.5);\n    doubleArray0[5] = double5;\n    Double double6 = new Double((double) doubleArray0[0]);\n    doubleArray0[6] = double6;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);\n    openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.getDistance((RealVector) openMapRealVector2);\n}",
    "testName" : "test144144"
  },
  "test04040" : {
    "methodSignature" : "public void unitize()",
    "methodName" : "unitize",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04040() throws Throwable {\n    int int0 = 928;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(921, 928);\n    double double0 = 459.5574418;\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(459.5574418);\n    openMapRealVector1.set(921);\n    openMapRealVector0.isInfinite();\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    RealVector.unmodifiableRealVector(openMapRealVector1);\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector0.unitize();\n}",
    "testName" : "test04040"
  },
  "test121121" : {
    "methodSignature" : "public double getLInfDistance(RealVector v)",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121121() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((-7.3304404046850136E-9));\n    openMapRealVector1.mapAddToSelf(2688.306219726303);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(openMapRealVector0);\n    openMapRealVector0.getDimension();\n    openMapRealVector2.mapAddToSelf(1.0E-12);\n    openMapRealVector0.getSparsity();\n    openMapRealVector1.getLInfDistance((RealVector) null);\n}",
    "testName" : "test121121"
  },
  "test0011" : {
    "methodSignature" : "public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor)",
    "methodName" : "walkInOptimizedOrder",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    int int0 = 0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(1.0E-12).when(realVectorPreservingVisitor0).end();\n    openMapRealVector3.walkInDefaultOrder(realVectorPreservingVisitor0);\n    openMapRealVector1.equals(openMapRealVector3);\n    openMapRealVector1.getMaxIndex();\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(1.0E-12).when(openIntToDoubleHashMap_Iterator0).value();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector1.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector2.mapAdd((-1));\n    openMapRealVector1.mapDivideToSelf(1.0E-12);\n    openMapRealVector_OpenMapEntry0.getValue();\n    OpenMapRealVector openMapRealVector4 = openMapRealVector1.append(585.50939104);\n    openMapRealVector4.walkInOptimizedOrder((RealVectorChangingVisitor) null);\n}",
    "testName" : "test0011"
  },
  "test0099" : {
    "methodSignature" : "public ArrayRealVector ebeMultiply(RealVector v)",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    int int0 = (-1968);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1968), (-1968), 1731.65572417);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1968));\n    Sinc sinc0 = new Sinc(true);\n    openMapRealVector1.mapToSelf(sinc0);\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n    double[] doubleArray0 = new double[1];\n    openMapRealVector1.isDefaultValue(0.0);\n    openMapRealVector0.set(982.8);\n    doubleArray0[0] = 1.0E-12;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);\n    openMapRealVector1.equals(openMapRealVector0);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn((-968.5766984261)).when(realVectorChangingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorChangingVisitor0);\n    arrayRealVector0.ebeMultiply(openMapRealVector0);\n}",
    "testName" : "test0099"
  },
  "test09292" : {
    "methodSignature" : "public OpenMapRealVector getSubVector(int index, int n)",
    "methodName" : "getSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09292() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(32);\n    openMapRealVector0.getSubVector(862, (-1428));\n}",
    "testName" : "test09292"
  },
  "test06060" : {
    "methodSignature" : "public double getEntry(int index)",
    "methodName" : "getEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06060() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-93.2265);\n    doubleArray0[2] = 1720.67353737;\n    doubleArray0[3] = 0.0;\n    doubleArray0[4] = Double.POSITIVE_INFINITY;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector1.ebeDivide(openMapRealVector0);\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n    openMapRealVector1.getEntry(1);\n}",
    "testName" : "test06060"
  },
  "test03232" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03232() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1200, 4616.4);\n    openMapRealVector0.getMinIndex();\n    openMapRealVector0.isNaN();\n}",
    "testName" : "test03232"
  },
  "test08888" : {
    "methodSignature" : "public double getLInfDistance(RealVector v)",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08888() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-16.0);\n    doubleArray0[2] = 2454.1874907714;\n    doubleArray0[3] = 1368.4981715;\n    doubleArray0[4] = 251.0;\n    doubleArray0[5] = (-70.87221);\n    doubleArray0[6] = 0.0;\n    doubleArray0[7] = (-1817.7996510790445);\n    double[] doubleArray1 = new double[7];\n    doubleArray1[0] = 0.0;\n    doubleArray1[1] = 0.0;\n    doubleArray1[2] = (-16.0);\n    doubleArray1[3] = (-16.0);\n    doubleArray1[4] = 0.0;\n    doubleArray1[5] = (-70.87221);\n    doubleArray1[6] = (-1817.7996510790445);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);\n    RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(realVector0);\n    openMapRealVector0.getLInfDistance(arrayRealVector0);\n}",
    "testName" : "test08888"
  },
  "test102102" : {
    "methodSignature" : "public double getL1Distance(OpenMapRealVector v)",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102102() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0, 0).when(openIntToDoubleHashMap_Iterator0).key();\n    doReturn(0.0, 0.0).when(openIntToDoubleHashMap_Iterator0).value();\n    openMapRealVector1.mapDivide(785.4);\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector1.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setIndex(0);\n    openMapRealVector_OpenMapEntry0.setValue(846.6658548388768);\n    openMapRealVector_OpenMapEntry0.getValue();\n    openMapRealVector_OpenMapEntry0.getIndex();\n    openMapRealVector_OpenMapEntry0.getValue();\n    openMapRealVector1.set(1.0E-12);\n    openMapRealVector1.getL1Distance(openMapRealVector0);\n}",
    "testName" : "test102102"
  },
  "test02020" : {
    "methodSignature" : "public double getL1Distance(RealVector v)",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02020() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1100));\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = 1.0E-12;\n    doubleArray0[1] = 1.0E-12;\n    doubleArray0[2] = (double) (-1100);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);\n    openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);\n}",
    "testName" : "test02020"
  },
  "test04444" : {
    "methodSignature" : "public OpenMapRealVector unitVector()",
    "methodName" : "unitVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04444() throws Throwable {\n    Double[] doubleArray0 = new Double[0];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.unitVector();\n}",
    "testName" : "test04444"
  },
  "test129129" : {
    "methodSignature" : "public double getL1Distance(RealVector v)",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129129() throws Throwable {\n    int int0 = 2795;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, 2795);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);\n    openMapRealVector1.append((RealVector) openMapRealVector0);\n    // Undeclared exception!\n    openMapRealVector0.getL1Distance((RealVector) openMapRealVector2);\n}",
    "testName" : "test129129"
  },
  "test05252" : {
    "methodSignature" : "public double getEntry(int index)",
    "methodName" : "getEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05252() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2114));\n    int int0 = 32;\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-2114), 32, (-2727.48584195589));\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(realVectorChangingVisitor0).end();\n    openMapRealVector0.walkInDefaultOrder(realVectorChangingVisitor0);\n    openMapRealVector0.append(openMapRealVector1);\n    openMapRealVector0.getEntry(31);\n}",
    "testName" : "test05252"
  },
  "test09696" : {
    "methodSignature" : "public RealVector combineToSelf(double a, double b, RealVector y)",
    "methodName" : "combineToSelf",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09696() throws Throwable {\n    int int0 = (-442);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-442));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector1.equals(\"c\");\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply(openMapRealVector0);\n    RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector1);\n    openMapRealVector1.equals(\"\");\n    openMapRealVector0.getDistance(openMapRealVector1);\n    realVector0.combineToSelf(Double.NaN, 0.0, openMapRealVector2);\n}",
    "testName" : "test09696"
  },
  "test06464" : {
    "methodSignature" : "public void unitize()",
    "methodName" : "unitize",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06464() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(224);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    openMapRealVector0.getDistance(openMapRealVector1);\n    openMapRealVector0.unitize();\n}",
    "testName" : "test06464"
  },
  "test152152" : {
    "methodSignature" : "public double dotProduct(RealVector v)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test152152() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1962);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.dotProduct((RealVector) null);\n}",
    "testName" : "test152152"
  },
  "test110110" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v)",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110110() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1447, 0.0);\n    openMapRealVector0.combine(0.0, 1447, openMapRealVector0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();\n    openMapRealVector1.setSubVector(1150, openMapRealVector0);\n}",
    "testName" : "test110110"
  },
  "test133133" : {
    "methodSignature" : "public OpenMapRealVector(int dimension, int expectedSize)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133133() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-132.09534419319735);\n    doubleArray0[2] = (-170.24);\n    doubleArray0[1] = 6.283185307179586;\n    doubleArray0[4] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn((-623.7)).when(realVectorPreservingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);\n    openMapRealVector2.dotProduct((RealVector) openMapRealVector1);\n    openMapRealVector0.unitVector();\n    OpenMapRealVector openMapRealVector3 = null;\n    openMapRealVector3 = new OpenMapRealVector(1241, 2145598059);\n}",
    "testName" : "test133133"
  },
  "test08080" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08080() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, (-3039), 0);\n    openMapRealVector0.mapAddToSelf(1732.69);\n    openMapRealVector0.setEntry(0, 1790.428648);\n}",
    "testName" : "test08080"
  },
  "test118118" : {
    "methodSignature" : "public void set(double value)",
    "methodName" : "set",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118118() throws Throwable {\n    int int0 = 2146970693;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2146970693);\n    // Undeclared exception!\n    openMapRealVector0.set(2146970693);\n}",
    "testName" : "test118118"
  },
  "test143143" : {
    "methodSignature" : "public double getDistance(RealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143143() throws Throwable {\n    int int0 = 672366247;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(672366247, 672366247);\n    openMapRealVector0.getDistance((RealVector) null);\n}",
    "testName" : "test143143"
  },
  "test0022" : {
    "methodSignature" : "public OpenMapRealVector ebeMultiply(RealVector v)",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-132.09534419319735);\n    doubleArray0[3] = 6.283185307179586;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(3.775134371775124E-11).when(realVectorPreservingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray0, (-1137.450939));\n    openMapRealVector1.dotProduct((RealVector) openMapRealVector2);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(openMapRealVector1);\n    openMapRealVector3.set(289.80654792);\n    openMapRealVector3.dotProduct((RealVector) openMapRealVector1);\n    OpenMapRealVector openMapRealVector4 = new OpenMapRealVector(openMapRealVector3);\n    openMapRealVector0.getDistance(openMapRealVector4);\n    openMapRealVector1.ebeDivide(openMapRealVector3);\n    double[] doubleArray1 = new double[4];\n    doubleArray1[0] = 289.80654792;\n    doubleArray1[1] = 3.775134371775124E-11;\n    doubleArray1[2] = 2.5811686515808105;\n    doubleArray1[3] = (-170.24);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);\n    openMapRealVector1.ebeMultiply(arrayRealVector0);\n}",
    "testName" : "test0022"
  },
  "test105105" : {
    "methodSignature" : "public double getL1Distance(OpenMapRealVector v)",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105105() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = 6.283185307179586;\n    doubleArray0[1] = 0.0;\n    doubleArray0[2] = 194.7860361;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 6.283185307179586);\n    openMapRealVector0.mapDivideToSelf(6.283185307179586);\n    openMapRealVector0.getL1Distance((OpenMapRealVector) null);\n}",
    "testName" : "test105105"
  },
  "test01313" : {
    "methodSignature" : "public RealVector add(RealVector v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-903));\n    double[] doubleArray0 = new double[0];\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 41.94845886296);\n    openMapRealVector0.add((RealVector) openMapRealVector1);\n}",
    "testName" : "test01313"
  },
  "test06969" : {
    "methodSignature" : "public RealVector subtract(RealVector v)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06969() throws Throwable {\n    Double[] doubleArray0 = new Double[3];\n    Double double0 = new Double(0.0);\n    doubleArray0[0] = double0;\n    Double double1 = new Double(0.0);\n    doubleArray0[1] = double1;\n    Double.max((double) doubleArray0[0], 693.41);\n    Double double2 = new Double(0.0);\n    doubleArray0[2] = double2;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-937.682037205));\n    openMapRealVector0.subtract((RealVector) null);\n}",
    "testName" : "test06969"
  },
  "test157157" : {
    "methodSignature" : "public OpenMapRealVector append(RealVector v)",
    "methodName" : "append",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test157157() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3392, 3392);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(3392);\n    // Undeclared exception!\n    openMapRealVector0.append((RealVector) openMapRealVector1);\n}",
    "testName" : "test157157"
  },
  "test03737" : {
    "methodSignature" : "public double getDistance(OpenMapRealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03737() throws Throwable {\n    Double[] doubleArray0 = new Double[3];\n    Double double0 = new Double((-383.63114));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double((-1708.078266));\n    doubleArray0[2] = double2;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double[] doubleArray1 = new double[2];\n    doubleArray1[0] = (double) doubleArray0[1];\n    doubleArray1[1] = (-383.63114);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);\n    openMapRealVector0.getDistance(openMapRealVector1);\n}",
    "testName" : "test03737"
  },
  "test04545" : {
    "methodSignature" : "public RealVector add(RealVector v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04545() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    openMapRealVector0.mapMultiplyToSelf(0.0);\n    openMapRealVector0.mapDivide((-2141.879062277274));\n    openMapRealVector0.getNorm();\n    openMapRealVector0.sparseIterator();\n    openMapRealVector0.add((RealVector) null);\n}",
    "testName" : "test04545"
  },
  "test08989" : {
    "methodSignature" : "public RealVector map(UnivariateFunction function)",
    "methodName" : "map",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08989() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(610, 610);\n    RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);\n    openMapRealVector0.add(realVector0);\n    realVector0.iterator();\n    openMapRealVector0.map((UnivariateFunction) null);\n}",
    "testName" : "test08989"
  },
  "test132132" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132132() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1338));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.getL1Distance(openMapRealVector1);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);\n    openMapRealVector2.getDimension();\n    openMapRealVector1.dotProduct((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector2.mapAdd(0.0);\n    openMapRealVector1.projection(openMapRealVector0);\n    openMapRealVector1.equals(openMapRealVector3);\n    openMapRealVector3.getDistance(openMapRealVector2);\n    openMapRealVector2.hashCode();\n}",
    "testName" : "test132132"
  },
  "test05757" : {
    "methodSignature" : "public OpenMapRealVector(RealVector v)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05757() throws Throwable {\n    RealVector realVector0 = null;\n    OpenMapRealVector openMapRealVector0 = null;\n    openMapRealVector0 = new OpenMapRealVector((RealVector) null);\n}",
    "testName" : "test05757"
  },
  "test01717" : {
    "methodSignature" : "public OpenMapRealVector copy()",
    "methodName" : "copy",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01717() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 1550.42645689037);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1, 289);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector((RealVector) openMapRealVector2);\n    openMapRealVector3.copy();\n}",
    "testName" : "test01717"
  },
  "test119119" : {
    "methodSignature" : "public double getEntry(int index)",
    "methodName" : "getEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119119() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double((-968.5766984261));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-968.5766984261));\n    doubleArray0[1] = double1;\n    Double double2 = new Double(0.0);\n    Double.min(0.0, 770.181);\n    Double.max(0.0, 0.0);\n    doubleArray0[2] = doubleArray0[1];\n    Double double3 = new Double(0.0);\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);\n    openMapRealVector0.iterator();\n    openMapRealVector0.iterator();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(0.0);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapAdd(1.0E-12);\n    openMapRealVector1.isInfinite();\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(2146805545).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue(0.0);\n    openMapRealVector0.append((double) (-1410));\n    openMapRealVector3.getL1Distance((RealVector) openMapRealVector0);\n    openMapRealVector2.getEntry((-1410));\n}",
    "testName" : "test119119"
  },
  "test111111" : {
    "methodSignature" : "public OpenMapRealVector unitVector()",
    "methodName" : "unitVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111111() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-132.09534419319735);\n    doubleArray0[2] = (-170.24);\n    doubleArray0[3] = 6.283185307179586;\n    doubleArray0[4] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(realVectorPreservingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);\n    openMapRealVector2.dotProduct((RealVector) openMapRealVector1);\n    openMapRealVector0.unitVector();\n}",
    "testName" : "test111111"
  },
  "test04949" : {
    "methodSignature" : "public void unitize()",
    "methodName" : "unitize",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04949() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[0] = 637.788936890229;\n    doubleArray0[1] = 1.0E-12;\n    doubleArray0[2] = (-2076.4462805);\n    doubleArray0[3] = 1391.8477101776673;\n    doubleArray0[4] = 1911.7;\n    doubleArray0[5] = (-886.20516);\n    doubleArray0[6] = 0.0;\n    doubleArray0[7] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.unitize();\n}",
    "testName" : "test04949"
  },
  "test160160" : {
    "methodSignature" : "public OpenMapRealVector add(OpenMapRealVector v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test160160() throws Throwable {\n    int int0 = 2795;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, 2795);\n    openMapRealVector0.add((OpenMapRealVector) null);\n}",
    "testName" : "test160160"
  },
  "test02929" : {
    "methodSignature" : "public double dotProduct(OpenMapRealVector v)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02929() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.mapAdd(0.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector1.combineToSelf(0.0, (-1262.0), openMapRealVector0);\n    openMapRealVector1.dotProduct(openMapRealVector0);\n}",
    "testName" : "test02929"
  },
  "test07373" : {
    "methodSignature" : "public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor, final int start, final int end)",
    "methodName" : "walkInOptimizedOrder",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07373() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-727.1219));\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);\n    realVector0.mapMultiply(2916.936571886845);\n    openMapRealVector0.ebeDivide(realVector0);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    openMapRealVector0.ebeDivide(arrayRealVector0);\n    openMapRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0, 3701, (-2240));\n}",
    "testName" : "test07373"
  },
  "test09393" : {
    "methodSignature" : "public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor, final int start, final int end)",
    "methodName" : "walkInDefaultOrder",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09393() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    openMapRealVector0.getDistance(openMapRealVector1);\n    openMapRealVector0.equals(openMapRealVector1);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    openMapRealVector2.walkInDefaultOrder(realVectorPreservingVisitor0, (-1), (-1));\n}",
    "testName" : "test09393"
  },
  "test0033" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v)",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-132.09534419319735);\n    doubleArray0[2] = (-170.24);\n    doubleArray0[3] = 6.283185307179586;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(185);\n    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);\n    openMapRealVector1.append((RealVector) arrayRealVector1);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(1.0E-12).when(realVectorPreservingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);\n    openMapRealVector2.dotProduct((RealVector) openMapRealVector1);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector0.unitVector();\n    openMapRealVector3.hashCode();\n    openMapRealVector2.getL1Distance((RealVector) openMapRealVector3);\n    openMapRealVector2.append(openMapRealVector0);\n    openMapRealVector1.sparseIterator();\n    openMapRealVector1.setSubVector(1265, arrayRealVector0);\n}",
    "testName" : "test0033"
  },
  "test08181" : {
    "methodSignature" : "public void addToEntry(int index, double increment)",
    "methodName" : "addToEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08181() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    openMapRealVector0.mapDivide((-1385.918928706));\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);\n    openMapRealVector1.isDefaultValue((-1069.0));\n    OpenMapRealVector openMapRealVector3 = openMapRealVector1.append(openMapRealVector2);\n    openMapRealVector3.isDefaultValue(1.0E-12);\n    openMapRealVector3.mapSubtract(0);\n    openMapRealVector0.addToEntry(0, 1.0E-12);\n}",
    "testName" : "test08181"
  },
  "test146146" : {
    "methodSignature" : "public double getEntry(int index)",
    "methodName" : "getEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test146146() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double((-968.5766984261));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-968.5766984261));\n    doubleArray0[1] = double1;\n    Double double2 = new Double(0.0);\n    Double.min(0.0, 770.181);\n    Double.max(0.0, 0.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(0.0);\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);\n    openMapRealVector0.iterator();\n    openMapRealVector0.iterator();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.hashCode();\n    openMapRealVector1.combine(0.0, 938140.8207340033, openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(0.0);\n    openMapRealVector1.mapAdd(1.0E-12);\n    openMapRealVector1.isInfinite();\n    Double.sum(0.0, (-1456.2699882864913));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(2455).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector1.ebeDivide(openMapRealVector2);\n    OpenMapRealVector openMapRealVector4 = openMapRealVector2.unitVector();\n    openMapRealVector_OpenMapEntry0.setValue(0.0);\n    openMapRealVector0.dotProduct(openMapRealVector2);\n    openMapRealVector4.getL1Distance((RealVector) openMapRealVector3);\n    openMapRealVector2.getEntry((-1423));\n}",
    "testName" : "test146146"
  },
  "test07777" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v)",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07777() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    double double0 = (-2102.6039973958987);\n    doubleArray0[0] = (-2102.6039973958987);\n    doubleArray0[1] = Double.NaN;\n    double double1 = 0.0;\n    doubleArray0[2] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    Acosh acosh0 = new Acosh();\n    UnivariateFunction univariateFunction0 = acosh0.derivative();\n    openMapRealVector0.map(univariateFunction0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector1.getL1Distance(openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAdd(0.0);\n    openMapRealVector2.mapAdd(0.0);\n    openMapRealVector0.setSubVector((-126), openMapRealVector1);\n}",
    "testName" : "test07777"
  },
  "test06565" : {
    "methodSignature" : "public OpenMapRealVector subtract(OpenMapRealVector v)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06565() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double(1.0);\n    doubleArray0[0] = double0;\n    Double double1 = Double.valueOf((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(1.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(1.0);\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.subtract(openMapRealVector1);\n}",
    "testName" : "test06565"
  },
  "test03333" : {
    "methodSignature" : "public OpenMapRealVector append(double d)",
    "methodName" : "append",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03333() throws Throwable {\n    int int0 = (-3079);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3079), (-3079));\n    openMapRealVector0.getMinIndex();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector1.getL1Distance((RealVector) openMapRealVector0);\n    double double0 = (-1577.3530691);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAdd((-1577.3530691));\n    openMapRealVector2.mapAddToSelf(1.0E-12);\n    openMapRealVector1.getSparsity();\n    openMapRealVector1.getDistance((RealVector) openMapRealVector0);\n    openMapRealVector1.append(0.0);\n}",
    "testName" : "test03333"
  },
  "test127127" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127127() throws Throwable {\n    Double[] doubleArray0 = new Double[7];\n    Double double0 = new Double((-1282.0));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double((-1282.0));\n    doubleArray0[2] = double2;\n    Double double3 = new Double(1457.60997);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((double) doubleArray0[2]);\n    doubleArray0[4] = double4;\n    Double double5 = new Double(1003.955);\n    doubleArray0[5] = double5;\n    Double.sum((double) doubleArray0[0], (double) doubleArray0[1]);\n    Double double6 = new Double(944.0);\n    doubleArray0[6] = double6;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 15.3);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(1457.60997);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeDivide(openMapRealVector0);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector1.ebeMultiply(openMapRealVector2);\n    openMapRealVector2.append(15.3);\n    openMapRealVector3.copy();\n    openMapRealVector0.setEntry(0, (-2564.0));\n    openMapRealVector2.setEntry((-1775), (double) doubleArray0[0]);\n}",
    "testName" : "test127127"
  },
  "test100100" : {
    "methodSignature" : "public void set(double value)",
    "methodName" : "set",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100100() throws Throwable {\n    Double[] doubleArray0 = new Double[6];\n    Double double0 = new Double(3502.98567);\n    doubleArray0[0] = double0;\n    Double double1 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(3502.98567);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(3502.98567);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((-1.0));\n    doubleArray0[4] = double4;\n    Double double5 = new Double(Double.NaN);\n    doubleArray0[5] = double5;\n    Double.sum((double) doubleArray0[2], 0.0);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    Double.isFinite(Double.NaN);\n    openMapRealVector0.sparseIterator();\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();\n    Double.min(0.0, 386.034701613817);\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.getValue();\n    OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();\n    openMapRealVector_OpenMapSparseIterator0.next();\n    openMapRealVector_OpenMapSparseIterator0.next();\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(208);\n    openMapRealVector0.append((RealVector) arrayRealVector0);\n    openMapRealVector0.set((double) doubleArray0[0]);\n}",
    "testName" : "test100100"
  },
  "test04141" : {
    "methodSignature" : "public double getDistance(OpenMapRealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04141() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[0] = (-1.0);\n    doubleArray0[1] = (-555.23151285);\n    doubleArray0[2] = 1.0E-12;\n    doubleArray0[3] = (-369.60533);\n    doubleArray0[4] = 0.0;\n    doubleArray0[5] = 0.0;\n    doubleArray0[6] = (-193.2025);\n    doubleArray0[7] = 0.0;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);\n    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);\n    openMapRealVector0.set(621.47835800219);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NEGATIVE_INFINITY);\n    openMapRealVector0.getDistance(openMapRealVector1);\n}",
    "testName" : "test04141"
  },
  "test09797" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v)",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09797() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(270, 270, 270);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(0.0);\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector0.setSubVector(0, openMapRealVector1);\n}",
    "testName" : "test09797"
  },
  "test08585" : {
    "methodSignature" : "public RealVector projection(RealVector v)",
    "methodName" : "projection",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08585() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, (-1));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    double[] doubleArray0 = new double[8];\n    doubleArray0[0] = (double) (-1);\n    doubleArray0[1] = (double) (-1);\n    doubleArray0[2] = (double) 0;\n    doubleArray0[3] = 1.0E-12;\n    doubleArray0[4] = (double) (-1);\n    doubleArray0[5] = 1.0E-12;\n    doubleArray0[6] = 1.0E-9;\n    doubleArray0[7] = (double) (-1);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    openMapRealVector0.projection(arrayRealVector0);\n}",
    "testName" : "test08585"
  },
  "test02121" : {
    "methodSignature" : "public OpenMapRealVector(double[] values)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02121() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = null;\n    openMapRealVector0 = new OpenMapRealVector((double[]) null);\n}",
    "testName" : "test02121"
  },
  "test05353" : {
    "methodSignature" : "public OpenMapRealVector(OpenMapRealVector v)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05353() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = null;\n    OpenMapRealVector openMapRealVector1 = null;\n    openMapRealVector1 = new OpenMapRealVector((OpenMapRealVector) null);\n}",
    "testName" : "test05353"
  },
  "test108108" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108108() throws Throwable {\n    Double[] doubleArray0 = new Double[3];\n    Double double0 = new Double((-1673.0146288));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-1.0));\n    doubleArray0[1] = double1;\n    Double double2 = Double.valueOf((-1673.0146288));\n    Double.min(0.5, 0.0);\n    doubleArray0[2] = double2;\n    Double.sum((double) doubleArray0[1], (-2122.2405150722));\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.toArray();\n    Double.max(2063.216324559, (-372.7136391293));\n    openMapRealVector0.isNaN();\n    OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    openMapRealVector_OpenMapSparseIterator0.forEachRemaining(consumer0);\n    openMapRealVector_OpenMapSparseIterator0.hasNext();\n    openMapRealVector_OpenMapSparseIterator0.hasNext();\n    openMapRealVector0.setEntry((-418), 2063.216324559);\n}",
    "testName" : "test108108"
  },
  "test154154" : {
    "methodSignature" : "public OpenMapRealVector ebeMultiply(RealVector v)",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test154154() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-132.09534419319735);\n    doubleArray0[3] = 6.283185307179586;\n    doubleArray0[4] = 2.5811686515808105;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(3.775134371775124E-11).when(realVectorPreservingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);\n    openMapRealVector2.set(289.80654792);\n    openMapRealVector2.dotProduct((RealVector) openMapRealVector1);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(openMapRealVector2);\n    openMapRealVector0.getDistance(openMapRealVector3);\n    openMapRealVector1.ebeDivide(openMapRealVector2);\n    double[] doubleArray1 = new double[4];\n    doubleArray1[0] = 289.80654792;\n    doubleArray1[1] = 3.775134371775124E-11;\n    doubleArray1[2] = 2.5811686515808105;\n    doubleArray1[3] = (-170.24);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);\n    openMapRealVector1.subtract(openMapRealVector3);\n    arrayRealVector0.append((-1.5536658521931418E118));\n    openMapRealVector1.ebeMultiply(arrayRealVector0);\n}",
    "testName" : "test154154"
  },
  "test135135" : {
    "methodSignature" : "public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor)",
    "methodName" : "walkInOptimizedOrder",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135135() throws Throwable {\n    int int0 = 0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((RealVector) openMapRealVector0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn((-185.87)).when(realVectorPreservingVisitor0).end();\n    openMapRealVector1.walkInDefaultOrder(realVectorPreservingVisitor0);\n    openMapRealVector1.equals(openMapRealVector1);\n    openMapRealVector1.getMaxIndex();\n    openMapRealVector2.mapAdd((-1));\n    openMapRealVector1.mapDivideToSelf(1.0E-12);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector1.append(585.50939104);\n    openMapRealVector3.walkInOptimizedOrder((RealVectorChangingVisitor) null);\n}",
    "testName" : "test135135"
  },
  "test116116" : {
    "methodSignature" : "public double dotProduct(RealVector v)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116116() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-21));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-21));\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector((-21));\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(1.0E-12).when(realVectorPreservingVisitor0).end();\n    openMapRealVector3.walkInDefaultOrder(realVectorPreservingVisitor0);\n    openMapRealVector1.equals(openMapRealVector3);\n    openMapRealVector1.getMaxIndex();\n    double double0 = 44.4735551249935;\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector1.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector2.mapAdd((-1));\n    RealVector realVector0 = openMapRealVector1.mapDivideToSelf(1.0E-12);\n    realVector0.dotProduct((RealVector) openMapRealVector2);\n}",
    "testName" : "test116116"
  },
  "test0044" : {
    "methodSignature" : "public void addToEntry(int index, double increment)",
    "methodName" : "addToEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    Double[] doubleArray0 = new Double[0];\n    double double0 = 26.30591167467474;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 26.30591167467474);\n    int int0 = 31;\n    Double[] doubleArray1 = new Double[0];\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1, 31);\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n    openMapRealVector0.addToEntry(31, 26.30591167467474);\n}",
    "testName" : "test0044"
  },
  "test145145" : {
    "methodSignature" : "public double[] toArray()",
    "methodName" : "toArray",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145145() throws Throwable {\n    Double[] doubleArray0 = new Double[7];\n    Double double0 = new Double(2.0);\n    doubleArray0[0] = double0;\n    Double double1 = new Double(9.253781621373885E29);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(0.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double((double) doubleArray0[1]);\n    doubleArray0[3] = double3;\n    Double double4 = new Double(0.0);\n    doubleArray0[4] = double4;\n    Double double5 = new Double(1328.5);\n    doubleArray0[5] = double5;\n    Double double6 = new Double((double) doubleArray0[0]);\n    doubleArray0[6] = double6;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);\n    openMapRealVector1.getL1Distance(openMapRealVector2);\n    openMapRealVector0.toArray();\n}",
    "testName" : "test145145"
  },
  "test120120" : {
    "methodSignature" : "public OpenMapRealVector mapAddToSelf(double d)",
    "methodName" : "mapAddToSelf",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120120() throws Throwable {\n    int int0 = 2795;\n    int int1 = (-3137);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, (-3137));\n    openMapRealVector0.mapAddToSelf(2795);\n}",
    "testName" : "test120120"
  },
  "test103103" : {
    "methodSignature" : "public double getEntry(int index)",
    "methodName" : "getEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103103() throws Throwable {\n    int int0 = 0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-695), 0, (-695));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.append((RealVector) openMapRealVector1);\n    openMapRealVector0.mapSubtract(0);\n    openMapRealVector0.getEntry(0);\n}",
    "testName" : "test103103"
  },
  "test128128" : {
    "methodSignature" : "public ArrayRealVector ebeMultiply(RealVector v)",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128128() throws Throwable {\n    int int0 = (-1968);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1968), (-1968), 1731.65572417);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1968), (-1968), (-1968));\n    Sinc sinc0 = new Sinc(true);\n    openMapRealVector1.mapToSelf(sinc0);\n    double[] doubleArray0 = new double[1];\n    openMapRealVector1.isDefaultValue(1.0E-12);\n    openMapRealVector0.set(982.8);\n    doubleArray0[0] = 1.0E-12;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);\n    sinc0.value((-1968));\n    openMapRealVector1.equals(openMapRealVector0);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    arrayRealVector0.ebeMultiply(openMapRealVector0);\n}",
    "testName" : "test128128"
  },
  "test05858" : {
    "methodSignature" : "public RealVector add(RealVector v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05858() throws Throwable {\n    int int0 = 293;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(293, Double.NEGATIVE_INFINITY);\n    openMapRealVector0.toArray();\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector();\n    arrayRealVector0.mapDivide(1.0E-12);\n    arrayRealVector0.iterator();\n    openMapRealVector0.add((RealVector) arrayRealVector0);\n}",
    "testName" : "test05858"
  },
  "test151151" : {
    "methodSignature" : "public double[] toArray()",
    "methodName" : "toArray",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151151() throws Throwable {\n    int int0 = 2795;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, 2795);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn((double) 929).when(realVectorChangingVisitor0).end();\n    doReturn(1.0E-12, (-1.0), (double) 2795, (-1.0), (-1.0)).when(realVectorChangingVisitor0).visit(anyInt(), anyDouble());\n    openMapRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);\n    openMapRealVector2.set(2795);\n    int int1 = 23;\n    openMapRealVector1.getDistance(openMapRealVector2);\n    // Undeclared exception!\n    openMapRealVector2.toArray();\n}",
    "testName" : "test151151"
  },
  "test03434" : {
    "methodSignature" : "public double cosine(RealVector v)",
    "methodName" : "cosine",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03434() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.dotProduct((RealVector) openMapRealVector1);\n    openMapRealVector1.isInfinite();\n    double[] doubleArray0 = new double[4];\n    doubleArray0[0] = 0.0;\n    RealVector realVector0 = openMapRealVector1.mapMultiplyToSelf((-641.0));\n    doubleArray0[1] = 0.0;\n    doubleArray0[2] = 0.0;\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(realVectorChangingVisitor0).end();\n    realVector0.walkInOptimizedOrder(realVectorChangingVisitor0);\n    openMapRealVector0.subtract((RealVector) openMapRealVector1);\n    doubleArray0[3] = 0.0;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    openMapRealVector1.append(0.0);\n    openMapRealVector1.cosine(realVector0);\n}",
    "testName" : "test03434"
  },
  "test04646" : {
    "methodSignature" : "public OpenMapRealVector add(OpenMapRealVector v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04646() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    doubleArray0[0] = 0.73493;\n    doubleArray0[1] = (-1139.0);\n    doubleArray0[2] = 4.0;\n    doubleArray0[3] = 1.0E-12;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    Double[] doubleArray1 = new Double[0];\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);\n    openMapRealVector0.set(200.88708505484);\n    openMapRealVector0.add(openMapRealVector1);\n}",
    "testName" : "test04646"
  },
  "test07878" : {
    "methodSignature" : "public OpenMapRealVector(Double[] values)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07878() throws Throwable {\n    Double[] doubleArray0 = null;\n    OpenMapRealVector openMapRealVector0 = null;\n    openMapRealVector0 = new OpenMapRealVector((Double[]) null);\n}",
    "testName" : "test07878"
  },
  "test159159" : {
    "methodSignature" : "public RealVector projection(RealVector v)",
    "methodName" : "projection",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test159159() throws Throwable {\n    int int0 = 0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1709, 0);\n    openMapRealVector0.isDefaultValue(0);\n    openMapRealVector0.getNorm();\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(1709);\n    int int1 = 750;\n    arrayRealVector0.setEntry(750, 1709);\n    openMapRealVector0.projection((RealVector) null);\n}",
    "testName" : "test159159"
  },
  "test01414" : {
    "methodSignature" : "public OpenMapRealVector(int dimension, int expectedSize)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3184, 3184);\n}",
    "testName" : "test01414"
  },
  "test134134" : {
    "methodSignature" : "public OpenMapRealVector add(OpenMapRealVector v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134134() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 32);\n    Double[] doubleArray0 = new Double[6];\n    doubleArray0[0] = (Double) 1.0E-12;\n    doubleArray0[1] = (Double) 1.0E-12;\n    doubleArray0[2] = (Double) 1.0E-12;\n    doubleArray0[3] = (Double) 1.0E-12;\n    doubleArray0[4] = (Double) 1.0E-12;\n    doubleArray0[5] = (Double) 1.0E-12;\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.add(openMapRealVector0);\n}",
    "testName" : "test134134"
  },
  "test117117" : {
    "methodSignature" : "public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor)",
    "methodName" : "walkInOptimizedOrder",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117117() throws Throwable {\n    int int0 = 0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn((-4.8402541351522003E-36)).when(realVectorPreservingVisitor0).end();\n    openMapRealVector3.walkInDefaultOrder(realVectorPreservingVisitor0);\n    openMapRealVector1.equals(openMapRealVector3);\n    openMapRealVector1.getMaxIndex();\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn((-4.8402541351522003E-36)).when(openIntToDoubleHashMap_Iterator0).value();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector1.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((-1));\n    openMapRealVector1.mapDivideToSelf(1.0E-12);\n    openMapRealVector_OpenMapEntry0.getValue();\n    OpenMapRealVector openMapRealVector5 = openMapRealVector1.append(585.50939104);\n    openMapRealVector4.ebeMultiply(openMapRealVector0);\n    openMapRealVector5.walkInOptimizedOrder((RealVectorChangingVisitor) null);\n}",
    "testName" : "test117117"
  },
  "test03838" : {
    "methodSignature" : "public double dotProduct(RealVector v)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03838() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(48, (-1.0));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue(1.0);\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 1.0E-12;\n    doubleArray0[1] = (double) 48;\n    doubleArray0[2] = 1.0E-12;\n    doubleArray0[3] = 1.0;\n    doubleArray0[4] = (-1.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.dotProduct((RealVector) openMapRealVector1);\n}",
    "testName" : "test03838"
  },
  "test01818" : {
    "methodSignature" : "public double getSparsity()",
    "methodName" : "getSparsity",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01818() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(32, 1.0);\n    openMapRealVector0.getSparsity();\n}",
    "testName" : "test01818"
  },
  "test05050" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05050() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    doubleArray0[0] = 1.0E-12;\n    doubleArray0[1] = 2327.0;\n    doubleArray0[2] = 1489.50017;\n    doubleArray0[3] = 4296.248715417795;\n    doubleArray0[4] = (-1.0);\n    doubleArray0[5] = 879.4894717304545;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-18.935));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 879.4894717304545);\n    openMapRealVector0.getL1Norm();\n    openMapRealVector0.getDistance((RealVector) openMapRealVector1);\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0, 0.0).when(openIntToDoubleHashMap_Iterator0).value();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.getValue();\n    openMapRealVector0.getDistance(openMapRealVector1);\n    openMapRealVector_OpenMapEntry0.setIndex((-2599));\n    openMapRealVector_OpenMapEntry0.setIndex(696);\n    openMapRealVector_OpenMapEntry0.getValue();\n    openMapRealVector1.unitize();\n    openMapRealVector1.setEntry(16, 497.6698146777);\n}",
    "testName" : "test05050"
  },
  "test09494" : {
    "methodSignature" : "public double dotProduct(RealVector v)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09494() throws Throwable {\n    Double[] doubleArray0 = new Double[5];\n    Double double0 = new Double(2268.74527);\n    doubleArray0[0] = double0;\n    Double double1 = new Double(2268.74527);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(2268.74527);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(2268.74527);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((double) doubleArray0[3]);\n    doubleArray0[4] = double4;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double[] doubleArray1 = new double[9];\n    doubleArray1[0] = 0.0;\n    doubleArray1[1] = (double) doubleArray0[0];\n    doubleArray1[2] = 2268.74527;\n    doubleArray1[3] = (double) doubleArray0[1];\n    doubleArray1[4] = 2268.74527;\n    doubleArray1[5] = (double) doubleArray0[2];\n    doubleArray1[6] = (double) doubleArray0[4];\n    doubleArray1[7] = 1.0E-9;\n    doubleArray1[8] = (double) doubleArray0[3];\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);\n    openMapRealVector0.dotProduct((RealVector) arrayRealVector0);\n}",
    "testName" : "test09494"
  },
  "test06262" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06262() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    openMapRealVector0.mapDivide((-459.7));\n    openMapRealVector0.isInfinite();\n    openMapRealVector0.hashCode();\n}",
    "testName" : "test06262"
  },
  "test140140" : {
    "methodSignature" : "public OpenMapRealVector(OpenMapRealVector v)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140140() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = (-132.09534419319735);\n    doubleArray0[2] = (-170.24);\n    doubleArray0[3] = 6.283185307179586;\n    doubleArray0[4] = 2.5811686515808105;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(3.775134371775124E-11).when(realVectorPreservingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);\n    openMapRealVector2.set(289.80654792);\n    openMapRealVector2.dotProduct((RealVector) openMapRealVector1);\n    OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(openMapRealVector2);\n}",
    "testName" : "test140140"
  },
  "test08282" : {
    "methodSignature" : "public double getDistance(OpenMapRealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08282() throws Throwable {\n    Double[] doubleArray0 = new Double[5];\n    Double double0 = new Double(0.0);\n    doubleArray0[0] = double0;\n    Double double1 = new Double(982.8);\n    doubleArray0[1] = double1;\n    Double double2 = new Double((double) doubleArray0[0]);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(0.0);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((-652.53616));\n    doubleArray0[4] = double4;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2954.84);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 982.8);\n    openMapRealVector0.getDistance(openMapRealVector1);\n}",
    "testName" : "test08282"
  },
  "test07070" : {
    "methodSignature" : "public RealVector subtract(RealVector v)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07070() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 2685.3643084031;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    int int0 = (-503);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(1621);\n    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);\n    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);\n    ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector1, arrayRealVector2);\n    ArrayRealVector arrayRealVector4 = new ArrayRealVector(arrayRealVector3, arrayRealVector1);\n    ArrayRealVector arrayRealVector5 = new ArrayRealVector(openMapRealVector0, arrayRealVector4);\n    openMapRealVector0.subtract((RealVector) arrayRealVector5);\n}",
    "testName" : "test07070"
  },
  "test125125" : {
    "methodSignature" : "public ArrayRealVector ebeMultiply(RealVector v)",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125125() throws Throwable {\n    int int0 = (-1968);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1968), (-1968), 1731.65572417);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1968));\n    Sinc sinc0 = new Sinc(true);\n    openMapRealVector1.mapToSelf(sinc0);\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n    double[] doubleArray0 = new double[1];\n    openMapRealVector1.isDefaultValue(0.0);\n    openMapRealVector0.set(982.8);\n    doubleArray0[0] = 1.0E-12;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);\n    openMapRealVector1.equals(openMapRealVector0);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(realVectorChangingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorChangingVisitor0);\n    arrayRealVector0.ebeMultiply(openMapRealVector0);\n}",
    "testName" : "test125125"
  },
  "test0055" : {
    "methodSignature" : "protected void checkVectorDimensions(RealVector v)",
    "methodName" : "checkVectorDimensions",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(2.0);\n    openMapRealVector1.getNorm();\n    int int0 = 1054;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(1054, 0.0);\n    openMapRealVector1.getNorm();\n    arrayRealVector0.checkVectorDimensions(openMapRealVector0);\n}",
    "testName" : "test0055"
  },
  "test148148" : {
    "methodSignature" : "public OpenMapRealVector append(double d)",
    "methodName" : "append",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test148148() throws Throwable {\n    int int0 = 2795;\n    int int1 = (-3137);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, (-3137));\n    openMapRealVector0.append((double) 2795);\n}",
    "testName" : "test148148"
  },
  "test05454" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05454() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double(0.0);\n    doubleArray0[0] = double0;\n    Double double1 = new Double(0.0);\n    doubleArray0[1] = double1;\n    Double double2 = new Double((double) doubleArray0[0]);\n    doubleArray0[2] = double2;\n    Double.sum((double) doubleArray0[0], 2691.9645);\n    Double double3 = new Double((-3816.0));\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-3816.0));\n    openMapRealVector0.getDimension();\n    openMapRealVector0.setEntry((-1580), 0.0);\n}",
    "testName" : "test05454"
  },
  "test09898" : {
    "methodSignature" : "public OpenMapRealVector subtract(OpenMapRealVector v)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09898() throws Throwable {\n    Double[] doubleArray0 = new Double[8];\n    Double double0 = new Double(0.0);\n    doubleArray0[0] = double0;\n    Double double1 = new Double(146.55936311632829);\n    doubleArray0[1] = double1;\n    Double double2 = new Double(0.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(1.0);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((double) doubleArray0[2]);\n    doubleArray0[4] = double4;\n    Double double5 = new Double((-1782.0612488));\n    doubleArray0[5] = double5;\n    Double double6 = new Double(0.0);\n    doubleArray0[6] = double6;\n    Double double7 = new Double((-4788.020642772908));\n    doubleArray0[7] = double7;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);\n    double[] doubleArray1 = new double[9];\n    doubleArray1[0] = (double) doubleArray0[2];\n    doubleArray1[1] = (double) doubleArray0[7];\n    doubleArray1[2] = 1.0E-9;\n    doubleArray1[3] = (double) doubleArray0[4];\n    doubleArray1[4] = 0.0;\n    doubleArray1[5] = 1.0E-12;\n    doubleArray1[6] = (-1782.0612488);\n    doubleArray1[7] = (double) doubleArray0[6];\n    doubleArray1[8] = (double) doubleArray0[5];\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray1);\n    openMapRealVector1.subtract(openMapRealVector2);\n}",
    "testName" : "test09898"
  },
  "test06666" : {
    "methodSignature" : "public RealMatrix outerProduct(RealVector v)",
    "methodName" : "outerProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06666() throws Throwable {\n    int int0 = (-1464);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1464), (-780.2));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector1.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setIndex(0);\n    openMapRealVector_OpenMapEntry0.getValue();\n    RealVector realVector0 = openMapRealVector1.subtract((RealVector) openMapRealVector0);\n    openMapRealVector1.getDistance(realVector0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector1.ebeDivide(realVector0);\n    OpenMapRealVector openMapRealVector4 = openMapRealVector3.copy();\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(realVectorPreservingVisitor0).end();\n    openMapRealVector4.walkInOptimizedOrder(realVectorPreservingVisitor0);\n    realVector0.isNaN();\n    openMapRealVector3.getLInfDistance(openMapRealVector2);\n    openMapRealVector4.outerProduct(openMapRealVector2);\n}",
    "testName" : "test06666"
  },
  "test03030" : {
    "methodSignature" : "public RealVector projection(RealVector v)",
    "methodName" : "projection",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03030() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0, 0);\n    openMapRealVector1.getMinValue();\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((RealVector) openMapRealVector0);\n    openMapRealVector1.getSparsity();\n    openMapRealVector1.sparseIterator();\n    openMapRealVector0.iterator();\n    openMapRealVector1.getMinIndex();\n    openMapRealVector0.isDefaultValue(0.0);\n    openMapRealVector1.isDefaultValue(0.0);\n    openMapRealVector0.projection(openMapRealVector2);\n}",
    "testName" : "test03030"
  },
  "test08686" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08686() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2295), (-2295), (-2295));\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(realVectorChangingVisitor0).end();\n    openMapRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    openMapRealVector1.getMinValue();\n    openMapRealVector1.getL1Distance(openMapRealVector0);\n    openMapRealVector1.getDistance(openMapRealVector0);\n    openMapRealVector1.getL1Distance((RealVector) openMapRealVector0);\n    openMapRealVector1.getDistance((RealVector) openMapRealVector0);\n    openMapRealVector1.setEntry(1, 0.0);\n}",
    "testName" : "test08686"
  },
  "test02222" : {
    "methodSignature" : "public OpenMapRealVector(double[] values, double epsilon)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02222() throws Throwable {\n    double[] doubleArray0 = null;\n    OpenMapRealVector openMapRealVector0 = null;\n    openMapRealVector0 = new OpenMapRealVector((double[]) null, (-1289.274505946));\n}",
    "testName" : "test02222"
  },
  "test07474" : {
    "methodSignature" : "public double getL1Distance(RealVector v)",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07474() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    doubleArray0[0] = 1905.041;\n    doubleArray0[1] = (-1.0);\n    doubleArray0[2] = (-1.0);\n    doubleArray0[3] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1.0));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0, 1905.041);\n    openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);\n}",
    "testName" : "test07474"
  },
  "test04242" : {
    "methodSignature" : "public OpenMapRealVector getSubVector(int index, int n)",
    "methodName" : "getSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04242() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double((-1.0));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-1.0));\n    Double.isFinite((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double((double) doubleArray0[1]);\n    doubleArray0[2] = double2;\n    Double.isFinite((double) doubleArray0[2]);\n    Double double3 = new Double((double) doubleArray0[0]);\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[3]);\n    openMapRealVector0.hashCode();\n    openMapRealVector0.getSubVector(2, 2);\n}",
    "testName" : "test04242"
  },
  "test106106" : {
    "methodSignature" : "public OpenMapRealVector(int dimension, int expectedSize, double epsilon)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106106() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = null;\n    openMapRealVector0 = new OpenMapRealVector(2146590879, 2146590879, 1145.8947);\n}",
    "testName" : "test106106"
  },
  "test01010" : {
    "methodSignature" : "public OpenMapRealVector subtract(OpenMapRealVector v)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    Double[] doubleArray0 = new Double[3];\n    Double double0 = new Double((-837.1));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-2327.7999));\n    doubleArray0[1] = double1;\n    Double double2 = new Double((double) doubleArray0[0]);\n    Double.min((double) doubleArray0[0], 6.283185307179586);\n    Double.sum(6.283185307179586, 588.5125100185);\n    doubleArray0[2] = double2;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[2]);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();\n    openMapRealVector1.getL1Distance(openMapRealVector0);\n    openMapRealVector0.mapSubtract(1.0);\n    openMapRealVector1.isInfinite();\n    openMapRealVector1.getMaxValue();\n    Double.isFinite((-2318.18141019));\n    openMapRealVector0.getDistance((RealVector) openMapRealVector1);\n    openMapRealVector0.getSparsity();\n    openMapRealVector0.getDistance((RealVector) openMapRealVector1);\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);\n    RealVector realVector0 = openMapRealVector1.add((RealVector) openMapRealVector0);\n    Double.isFinite((-837.1));\n    OpenMapRealVector openMapRealVector3 = openMapRealVector2.append(openMapRealVector1);\n    openMapRealVector2.add(realVector0);\n    openMapRealVector3.toArray();\n    OpenMapRealVector openMapRealVector4 = openMapRealVector2.copy();\n    openMapRealVector3.subtract(openMapRealVector4);\n}",
    "testName" : "test01010"
  },
  "test156156" : {
    "methodSignature" : "public double dotProduct(OpenMapRealVector v)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test156156() throws Throwable {\n    int int0 = 2765;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2765);\n    OpenMapRealVector openMapRealVector1 = null;\n    openMapRealVector0.dotProduct((OpenMapRealVector) null);\n}",
    "testName" : "test156156"
  },
  "test137137" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v)",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137137() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = 0.0;\n    doubleArray0[1] = 587.63959690005;\n    doubleArray0[2] = (-1.0);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 375);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);\n    openMapRealVector2.setSubVector(375, openMapRealVector0);\n}",
    "testName" : "test137137"
  },
  "test09090" : {
    "methodSignature" : "public RealVector add(RealVector v)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09090() throws Throwable {\n    int int0 = 1313;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1313, 1313);\n    RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);\n    openMapRealVector0.getEntry(0);\n    realVector0.getL1Norm();\n    // Undeclared exception!\n    openMapRealVector0.add(realVector0);\n}",
    "testName" : "test09090"
  },
  "test114114" : {
    "methodSignature" : "public double cosine(RealVector v)",
    "methodName" : "cosine",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114114() throws Throwable {\n    int int0 = 995;\n    int int1 = (-728);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(995, 995);\n    openMapRealVector0.toArray();\n    openMapRealVector0.mapMultiply(1132.05355);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(openMapRealVector0);\n    openMapRealVector1.cosine(openMapRealVector0);\n}",
    "testName" : "test114114"
  },
  "test0066" : {
    "methodSignature" : "public OpenMapRealVector getSubVector(int index, int n)",
    "methodName" : "getSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, 2795);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(0.0).when(realVectorChangingVisitor0).end();\n    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVectorChangingVisitor0).visit(anyInt(), anyDouble());\n    openMapRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);\n    openMapRealVector2.set(2795);\n    openMapRealVector1.getDistance(openMapRealVector2);\n    openMapRealVector1.getSubVector(2795, 23);\n}",
    "testName" : "test0066"
  },
  "test147147" : {
    "methodSignature" : "private double getLInfDistance(OpenMapRealVector v)",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test147147() throws Throwable {\n    int int0 = 2795;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, 2795, 2795.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(2795);\n    Sinc sinc0 = new Sinc(true);\n    openMapRealVector1.mapToSelf(sinc0);\n    // Undeclared exception!\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n}",
    "testName" : "test147147"
  },
  "test126126" : {
    "methodSignature" : "public OpenMapRealVector getSubVector(int index, int n)",
    "methodName" : "getSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126126() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1570, 1570);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();\n    openMapRealVector1.outerProduct(openMapRealVector0);\n    Consumer<RealVector.Entry> consumer0 = (Consumer<RealVector.Entry>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    openMapRealVector0.isNaN();\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0, 0, 0).when(openIntToDoubleHashMap_Iterator0).key();\n    doReturn(0.0, 0.0).when(openIntToDoubleHashMap_Iterator0).value();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector1.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.getValue();\n    openMapRealVector_OpenMapEntry0.setIndex(81);\n    openMapRealVector_OpenMapEntry0.setValue(1570);\n    openMapRealVector_OpenMapEntry0.getIndex();\n    openMapRealVector1.sparseIterator();\n    openMapRealVector_OpenMapEntry0.getValue();\n    openMapRealVector_OpenMapEntry0.getIndex();\n    RealVector realVector0 = openMapRealVector1.projection(openMapRealVector0);\n    openMapRealVector0.sparseIterator();\n    openMapRealVector1.getDistance((RealVector) openMapRealVector0);\n    RealVector realVector1 = openMapRealVector1.projection(realVector0);\n    openMapRealVector0.isNaN();\n    openMapRealVector1.add(realVector1);\n    openMapRealVector1.getSubVector((-1543), 2352);\n}",
    "testName" : "test126126"
  },
  "test101101" : {
    "methodSignature" : "public OpenMapRealVector subtract(OpenMapRealVector v)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101101() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    openMapRealVector0.isInfinite();\n    OpenMapRealVector openMapRealVector1 = null;\n    openMapRealVector0.subtract((OpenMapRealVector) null);\n}",
    "testName" : "test101101"
  },
  "test150150" : {
    "methodSignature" : "public double getDistance(OpenMapRealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test150150() throws Throwable {\n    int int0 = 2795;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, 2795);\n    int int1 = 929;\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(1.0E-12).when(realVectorChangingVisitor0).end();\n    doReturn((double) 929, (double) 929, (double) 2795, 1.0, 1.0).when(realVectorChangingVisitor0).visit(anyInt(), anyDouble());\n    openMapRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);\n    openMapRealVector2.set(2795);\n    openMapRealVector2.mapDivideToSelf((-1193.745234));\n    int int2 = 23;\n    // Undeclared exception!\n    openMapRealVector1.getDistance(openMapRealVector2);\n}",
    "testName" : "test150150"
  },
  "test109109" : {
    "methodSignature" : "public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor, final int start, final int end)",
    "methodName" : "walkInOptimizedOrder",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109109() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-727.1219));\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);\n    RealVector realVector1 = realVector0.mapMultiply(2916.936571886845);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(realVector0);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    openMapRealVector0.ebeDivide(arrayRealVector0);\n    arrayRealVector0.equals(realVector1);\n    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, doubleArray0);\n    openMapRealVector1.getL1Distance((RealVector) arrayRealVector1);\n    openMapRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0, 3701, (-2240));\n}",
    "testName" : "test109109"
  },
  "test04747" : {
    "methodSignature" : "public OpenMapRealVector unitVector()",
    "methodName" : "unitVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04747() throws Throwable {\n    int int0 = (-1);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1, 0);\n    RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());\n    openMapRealVector1.unitVector();\n}",
    "testName" : "test04747"
  },
  "test02323" : {
    "methodSignature" : "public OpenMapRealVector(Double[] values, double epsilon)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02323() throws Throwable {\n    Double[] doubleArray0 = null;\n    double double0 = 0.0;\n    OpenMapRealVector openMapRealVector0 = null;\n    openMapRealVector0 = new OpenMapRealVector((Double[]) null, 0.0);\n}",
    "testName" : "test02323"
  },
  "test05959" : {
    "methodSignature" : "public OpenMapRealVector getSubVector(int index, int n)",
    "methodName" : "getSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05959() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);\n    RealVector.unmodifiableRealVector(openMapRealVector0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);\n    openMapRealVector2.equals((Object) null);\n    openMapRealVector0.mapDivideToSelf(0.0);\n    openMapRealVector0.unitize();\n    openMapRealVector2.set(0.0);\n    openMapRealVector0.isNaN();\n    int int0 = 0;\n    openMapRealVector1.getSubVector(0, 0);\n}",
    "testName" : "test05959"
  },
  "test153153" : {
    "methodSignature" : "public OpenMapRealVector ebeDivide(RealVector v)",
    "methodName" : "ebeDivide",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test153153() throws Throwable {\n    int int0 = 2795;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2795, 2795);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn(1.0E-12).when(realVectorChangingVisitor0).end();\n    doReturn((double) 929, (-2454.879), 2.5811686515808105, (double) 929, 1.0E-12).when(realVectorChangingVisitor0).visit(anyInt(), anyDouble());\n    openMapRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);\n    openMapRealVector2.set(2795);\n    int int1 = 23;\n    openMapRealVector1.append(1.0E-12);\n    // Undeclared exception!\n    openMapRealVector0.ebeDivide(openMapRealVector2);\n}",
    "testName" : "test153153"
  },
  "test07979" : {
    "methodSignature" : "public double dotProduct(OpenMapRealVector v)",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07979() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1312);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((RealVector) openMapRealVector0);\n    openMapRealVector2.dotProduct(openMapRealVector0);\n}",
    "testName" : "test07979"
  },
  "test136136" : {
    "methodSignature" : "public double[] toArray()",
    "methodName" : "toArray",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136136() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1033), (-1033));\n    RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);\n    openMapRealVector0.subtract(realVector0);\n    openMapRealVector0.toArray();\n}",
    "testName" : "test136136"
  },
  "test03535" : {
    "methodSignature" : "public void unitize()",
    "methodName" : "unitize",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03535() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-132), (-309));\n    openMapRealVector0.unitize();\n}",
    "testName" : "test03535"
  },
  "test02727" : {
    "methodSignature" : "public void set(double value)",
    "methodName" : "set",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02727() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(32, 190, 32);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    Asinh asinh0 = new Asinh();\n    UnivariateFunction univariateFunction0 = asinh0.derivative();\n    openMapRealVector1.map(univariateFunction0);\n    openMapRealVector0.outerProduct(openMapRealVector1);\n    openMapRealVector1.set(1746.922221);\n}",
    "testName" : "test02727"
  },
  "test115115" : {
    "methodSignature" : "public OpenMapRealVector getSubVector(int index, int n)",
    "methodName" : "getSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115115() throws Throwable {\n    int int0 = 181;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(181, 181);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(2716, 181, 1.0E-12);\n    openMapRealVector1.getSubVector(181, 2716);\n}",
    "testName" : "test115115"
  },
  "test01919" : {
    "methodSignature" : "public OpenMapRealVector mapAdd(double d)",
    "methodName" : "mapAdd",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01919() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 0.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, Double.POSITIVE_INFINITY);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);\n    openMapRealVector2.mapAdd(1375.243);\n}",
    "testName" : "test01919"
  },
  "test03939" : {
    "methodSignature" : "public double[] toArray()",
    "methodName" : "toArray",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03939() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-50), 273, (-2070.890162066553));\n    openMapRealVector0.isNaN();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector1.iterator();\n    openMapRealVector1.getLInfDistance(openMapRealVector0);\n    openMapRealVector0.toArray();\n}",
    "testName" : "test03939"
  },
  "test09595" : {
    "methodSignature" : "public OpenMapRealVector ebeMultiply(RealVector v)",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09595() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    double double0 = 0.0;\n    Double double1 = new Double(0.0);\n    doubleArray0[0] = double1;\n    Double double2 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double2;\n    Double double3 = new Double((double) doubleArray0[0]);\n    doubleArray0[2] = double3;\n    Double double4 = new Double((double) doubleArray0[1]);\n    Double.max(1541.1778, 0.0);\n    doubleArray0[3] = double4;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-895.4416156));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 155);\n    openMapRealVector1.hashCode();\n    Double.isFinite(1.0E-12);\n    openMapRealVector1.ebeMultiply(openMapRealVector0);\n}",
    "testName" : "test09595"
  },
  "test142142" : {
    "methodSignature" : "public double getDistance(OpenMapRealVector v)",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142142() throws Throwable {\n    int int0 = (-3527);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3527), (-3527));\n    double[] doubleArray0 = new double[8];\n    doubleArray0[0] = (double) (-3527);\n    doubleArray0[1] = (double) (-3527);\n    doubleArray0[2] = 1.0E-12;\n    doubleArray0[3] = (double) (-3527);\n    doubleArray0[4] = 1.0;\n    doubleArray0[5] = (double) (-3527);\n    doubleArray0[6] = (-1093.0);\n    openMapRealVector0.copy();\n    doubleArray0[7] = (double) (-3527);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1.0);\n    openMapRealVector1.mapMultiply((-1239.113300407071));\n    openMapRealVector0.getDistance(openMapRealVector1);\n}",
    "testName" : "test142142"
  },
  "test08383" : {
    "methodSignature" : "public OpenMapRealVector append(OpenMapRealVector v)",
    "methodName" : "append",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08383() throws Throwable {\n    Double[] doubleArray0 = new Double[7];\n    Double double0 = new Double(2.0);\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-2404.419386274));\n    doubleArray0[1] = double1;\n    Double double2 = new Double(0.0);\n    doubleArray0[2] = double2;\n    Double double3 = new Double((double) doubleArray0[1]);\n    doubleArray0[3] = double3;\n    Double double4 = new Double(0.0);\n    doubleArray0[4] = double4;\n    Double double5 = new Double(1328.5);\n    doubleArray0[5] = double5;\n    Double double6 = new Double((double) doubleArray0[0]);\n    doubleArray0[6] = double6;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.append(openMapRealVector1);\n}",
    "testName" : "test08383"
  },
  "test05151" : {
    "methodSignature" : "private double getLInfDistance(OpenMapRealVector v)",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05151() throws Throwable {\n    Double[] doubleArray0 = new Double[7];\n    Double double0 = new Double((-938.4529));\n    doubleArray0[0] = double0;\n    Double double1 = new Double(1920.5762099);\n    doubleArray0[1] = double1;\n    Double double2 = new Double((-294.80249371));\n    doubleArray0[2] = double2;\n    Double double3 = new Double((-938.4529));\n    doubleArray0[3] = double3;\n    Double double4 = new Double((double) doubleArray0[0]);\n    doubleArray0[4] = double4;\n    Double double5 = new Double((double) doubleArray0[3]);\n    doubleArray0[5] = double5;\n    Double double6 = new Double(1920.5762099);\n    doubleArray0[6] = double6;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 32);\n    openMapRealVector1.getLInfDistance(openMapRealVector0);\n}",
    "testName" : "test05151"
  },
  "test123123" : {
    "methodSignature" : "public double getEntry(int index)",
    "methodName" : "getEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123123() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(405, 5037.293389903);\n    RealVector.unmodifiableRealVector(openMapRealVector0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    Sinc sinc0 = new Sinc();\n    openMapRealVector1.mapToSelf(sinc0);\n    openMapRealVector1.getL1Distance(openMapRealVector0);\n    openMapRealVector1.add((RealVector) openMapRealVector0);\n    openMapRealVector1.getEntry((-3720));\n}",
    "testName" : "test123123"
  },
  "test0077" : {
    "methodSignature" : "public void setEntry(int index, double value)",
    "methodName" : "setEntry",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    openMapRealVector0.isInfinite();\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);\n    openMapRealVector0.mapSubtract((-2072.12));\n    openMapRealVector0.add((RealVector) openMapRealVector0);\n    openMapRealVector1.setEntry(0, 0.0);\n}",
    "testName" : "test0077"
  },
  "test07171" : {
    "methodSignature" : "public RealVector projection(RealVector v)",
    "methodName" : "projection",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07171() throws Throwable {\n    Double[] doubleArray0 = new Double[8];\n    Double double0 = new Double((-2853.55932));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double((double) doubleArray0[0]);\n    doubleArray0[2] = double2;\n    Double double3 = new Double(1076.0);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((double) doubleArray0[0]);\n    doubleArray0[4] = double4;\n    Double double5 = new Double((double) doubleArray0[1]);\n    doubleArray0[5] = double5;\n    Double.min(0.0, (double) doubleArray0[0]);\n    Double double6 = new Double((-1522.609231593));\n    doubleArray0[6] = double6;\n    Double double7 = new Double(0.0);\n    Double.sum((-1522.609231593), (-1135.1106966266227));\n    Double.min((double) doubleArray0[4], (double) doubleArray0[5]);\n    Double.max(933.1, 2140.88436858175);\n    Double.isFinite(237.0810242);\n    doubleArray0[7] = double7;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    openMapRealVector1.projection(openMapRealVector0);\n}",
    "testName" : "test07171"
  },
  "test09999" : {
    "methodSignature" : "public ArrayRealVector(RealVector v1, ArrayRealVector v2)",
    "methodName" : "ArrayRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09999() throws Throwable {\n    int int0 = (-1399);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1399), Double.POSITIVE_INFINITY);\n    double[] doubleArray0 = new double[4];\n    doubleArray0[0] = (double) (-1399);\n    doubleArray0[1] = Double.POSITIVE_INFINITY;\n    doubleArray0[2] = Double.POSITIVE_INFINITY;\n    doubleArray0[3] = 1.0E-12;\n    Double[] doubleArray1 = new Double[7];\n    doubleArray1[0] = (Double) Double.POSITIVE_INFINITY;\n    doubleArray1[1] = (Double) (-1399.0);\n    doubleArray1[2] = (Double) Double.POSITIVE_INFINITY;\n    Double double0 = new Double(Double.POSITIVE_INFINITY);\n    doubleArray1[3] = double0;\n    doubleArray1[4] = (Double) 1.0E-12;\n    doubleArray1[5] = (Double) Double.POSITIVE_INFINITY;\n    doubleArray1[6] = (Double) 1.0E-12;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);\n    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);\n    ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);\n    ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1399), 1.0E-12);\n    openMapRealVector0.subtract(openMapRealVector1);\n    ArrayRealVector arrayRealVector4 = null;\n    arrayRealVector4 = new ArrayRealVector(openMapRealVector0, arrayRealVector3);\n}",
    "testName" : "test09999"
  },
  "test104104" : {
    "methodSignature" : "protected OpenMapRealVector(OpenMapRealVector v, int resize)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104104() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = null;\n    int int0 = 0;\n    OpenMapRealVector openMapRealVector1 = null;\n    openMapRealVector1 = new OpenMapRealVector((OpenMapRealVector) null, 0);\n}",
    "testName" : "test104104"
  },
  "test08787" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v)",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08787() throws Throwable {\n    int int0 = (-1);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((-1));\n    RealVector realVector0 = openMapRealVector1.combineToSelf((-1), (-1), openMapRealVector0);\n    int int1 = 0;\n    openMapRealVector0.setSubVector(0, realVector0);\n}",
    "testName" : "test08787"
  },
  "test05555" : {
    "methodSignature" : "public OpenMapRealVector ebeDivide(RealVector v)",
    "methodName" : "ebeDivide",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05555() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);\n    openMapRealVector0.ebeDivide((RealVector) null);\n}",
    "testName" : "test05555"
  },
  "test01111" : {
    "methodSignature" : "public RealVector combineToSelf(double a, double b, RealVector y)",
    "methodName" : "combineToSelf",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-442));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector1.equals(\"c\");\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply(openMapRealVector0);\n    RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector1);\n    openMapRealVector1.equals(\"\");\n    openMapRealVector0.getDistance(openMapRealVector1);\n    realVector0.combineToSelf(1.0E-12, 0.0, openMapRealVector2);\n}",
    "testName" : "test01111"
  },
  "test06363" : {
    "methodSignature" : "public void unitize()",
    "methodName" : "unitize",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06363() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAdd((-1713.99593376706));\n    openMapRealVector2.unitize();\n}",
    "testName" : "test06363"
  },
  "test03131" : {
    "methodSignature" : "public OpenMapRealVector mapAdd(double d)",
    "methodName" : "mapAdd",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03131() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = (-4305.03);\n    doubleArray0[1] = Double.NEGATIVE_INFINITY;\n    doubleArray0[2] = (-2182.71593815);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-4305.03));\n    OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();\n    openMapRealVector0.isDefaultValue(0.0);\n    openMapRealVector_OpenMapSparseIterator0.next();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector1.mapDivide((-4305.03));\n    openMapRealVector0.append((RealVector) openMapRealVector1);\n    openMapRealVector0.isInfinite();\n    openMapRealVector0.mapAdd((-709.0431304857449));\n}",
    "testName" : "test03131"
  },
  "test07575" : {
    "methodSignature" : "public OpenMapRealVector mapAddToSelf(double d)",
    "methodName" : "mapAddToSelf",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07575() throws Throwable {\n    Double[] doubleArray0 = new Double[3];\n    Double double0 = new Double((-2753.17));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-1.0));\n    doubleArray0[1] = double1;\n    Double double2 = new Double((-2753.17));\n    doubleArray0[2] = double2;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);\n    openMapRealVector0.mapAddToSelf(0.0);\n}",
    "testName" : "test07575"
  },
  "test158158" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v)",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test158158() throws Throwable {\n    int int0 = 2137567749;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2137567749, 3959, 3959);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    openMapRealVector0.setSubVector(3959, (RealVector) null);\n}",
    "testName" : "test158158"
  },
  "test139139" : {
    "methodSignature" : "public ArrayRealVector ebeMultiply(RealVector v)",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139139() throws Throwable {\n    int int0 = (-1968);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1968), (-1968), (-1968));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1968));\n    Sinc sinc0 = new Sinc(true);\n    openMapRealVector1.mapToSelf(sinc0);\n    openMapRealVector0.getLInfDistance(openMapRealVector1);\n    double[] doubleArray0 = new double[1];\n    openMapRealVector1.isDefaultValue(0.0);\n    openMapRealVector0.set(982.8);\n    doubleArray0[0] = 1.0E-12;\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);\n    openMapRealVector1.equals(openMapRealVector0);\n    RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());\n    doReturn((-968.5766984261)).when(realVectorChangingVisitor0).end();\n    openMapRealVector1.walkInOptimizedOrder(realVectorChangingVisitor0);\n    arrayRealVector0.ebeMultiply(openMapRealVector0);\n}",
    "testName" : "test139139"
  },
  "test131131" : {
    "methodSignature" : "public OpenMapRealVector mapAdd(double d)",
    "methodName" : "mapAdd",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131131() throws Throwable {\n    int int0 = 33;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(33, (-901));\n    openMapRealVector0.isDefaultValue(2.5440783580508475);\n    double double0 = 1766.2;\n    openMapRealVector0.mapAdd((-901));\n}",
    "testName" : "test131131"
  },
  "test09191" : {
    "methodSignature" : "public OpenMapRealVector getSubVector(int index, int n)",
    "methodName" : "getSubVector",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09191() throws Throwable {\n    Double[] doubleArray0 = new Double[5];\n    Double double0 = new Double(248.427);\n    doubleArray0[0] = double0;\n    Double double1 = new Double((double) doubleArray0[0]);\n    doubleArray0[1] = double1;\n    Double double2 = new Double((double) doubleArray0[1]);\n    Double.isFinite(0.0);\n    Double.min(248.427, 1176.8221);\n    doubleArray0[2] = double2;\n    Double double3 = new Double((double) doubleArray0[2]);\n    doubleArray0[3] = double3;\n    Double double4 = new Double((double) doubleArray0[3]);\n    doubleArray0[4] = double4;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    Double.min(248.427, 0.0);\n    openMapRealVector0.getSubVector(1151, 1151);\n}",
    "testName" : "test09191"
  },
  "test161161" : {
    "methodSignature" : "public OpenMapRealVector append(RealVector v)",
    "methodName" : "append",
    "className" : "org.apache.commons.math3.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test161161() throws Throwable {\n    Double[] doubleArray0 = new Double[4];\n    Double double0 = new Double((-968.5766984261));\n    doubleArray0[0] = double0;\n    Double double1 = new Double((-968.5766984261));\n    doubleArray0[1] = double1;\n    Double double2 = new Double(0.0);\n    Double.min(0.0, 770.181);\n    Double.max(0.0, 0.0);\n    doubleArray0[2] = double2;\n    Double.isFinite(0.008906522886064439);\n    Double double3 = new Double(0.0);\n    doubleArray0[3] = double3;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);\n    openMapRealVector0.iterator();\n    openMapRealVector0.iterator();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);\n    openMapRealVector0.hashCode();\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(0.0);\n    openMapRealVector1.mapAdd(1.0E-12);\n    openMapRealVector1.isInfinite();\n    Double.sum(0.0, (-1456.2699882864913));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(2455).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector1.ebeDivide(openMapRealVector2);\n    OpenMapRealVector openMapRealVector3 = openMapRealVector2.unitVector();\n    openMapRealVector3.isNaN();\n    openMapRealVector_OpenMapEntry0.setValue(0.0);\n    openMapRealVector1.append((RealVector) openMapRealVector2);\n}",
    "testName" : "test161161"
  }
}