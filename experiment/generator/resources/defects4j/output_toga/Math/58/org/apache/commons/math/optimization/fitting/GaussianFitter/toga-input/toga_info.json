{
  "test1212" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math.optimization.fitting.GaussianFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair(doubleArray0, doubleArray0);\n    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn((VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    doReturn(0, 0, 0).when(differentiableMultivariateVectorialOptimizer0).getEvaluations();\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(3);\n    MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 3, unitSphereRandomVectorGenerator0);\n    GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);\n    gaussianFitter0.fit(doubleArray0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public double[] fit()",
    "methodName" : "fit",
    "className" : "org.apache.commons.math.optimization.fitting.GaussianFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    GaussianFitter gaussianFitter0 = new GaussianFitter((DifferentiableMultivariateVectorialOptimizer) null);\n    gaussianFitter0.addObservedPoint(0.0, 0.0, 2540.861439);\n    gaussianFitter0.addObservedPoint(849.066329945, 849.066329945, 849.066329945);\n    gaussianFitter0.addObservedPoint(792.3072330933961, 792.3072330933961, 175.9);\n    gaussianFitter0.fit();\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math.optimization.fitting.GaussianFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn((VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    doReturn(0, 0, 0, 0).when(differentiableMultivariateVectorialOptimizer0).getEvaluations();\n    Well19937a well19937a0 = new Well19937a(0);\n    GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(well19937a0);\n    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(3289, gaussianRandomGenerator0);\n    MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 3289, uncorrelatedRandomVectorGenerator0);\n    GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);\n    double[] doubleArray0 = new double[5];\n    // Undeclared exception!\n    gaussianFitter0.fit(doubleArray0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math.optimization.fitting.GaussianFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn((VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    doReturn(0).when(differentiableMultivariateVectorialOptimizer0).getEvaluations();\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator((-925));\n    MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 57, unitSphereRandomVectorGenerator0);\n    GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);\n    gaussianFitter0.fit((double[]) null);\n}",
    "testName" : "test1111"
  },
  "test1919" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math.optimization.fitting.GaussianFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn((VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);\n    double[] doubleArray0 = new double[0];\n    gaussianFitter0.fit(doubleArray0);\n}",
    "testName" : "test1919"
  },
  "test066" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math.optimization.fitting.GaussianFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair((double[]) null, (double[]) null);\n    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn(vectorialPointValuePair0).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);\n    double[] doubleArray0 = new double[0];\n    double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);\n}",
    "testName" : "test066"
  },
  "test099" : {
    "methodSignature" : "public double[] fit()",
    "methodName" : "fit",
    "className" : "org.apache.commons.math.optimization.fitting.GaussianFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair((double[]) null, (double[]) null);\n    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn(vectorialPointValuePair0).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);\n    gaussianFitter0.addObservedPoint((-478.108979269264), (-478.108979269264), (-478.108979269264));\n    gaussianFitter0.addObservedPoint((-98.745), (-98.745));\n    gaussianFitter0.addObservedPoint((-3070.816268443537), 4672.918271080159);\n    double[] doubleArray0 = gaussianFitter0.fit();\n}",
    "testName" : "test099"
  },
  "test2020" : {
    "methodSignature" : "public double[] fit()",
    "methodName" : "fit",
    "className" : "org.apache.commons.math.optimization.fitting.GaussianFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());\n    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(12, (NormalizedRandomGenerator) null);\n    MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 12, uncorrelatedRandomVectorGenerator0);\n    GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);\n    gaussianFitter0.fit();\n}",
    "testName" : "test2020"
  }
}