project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test066,"public void test066() throws Throwable {
    VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair((double[]) null, (double[]) null);
    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(vectorialPointValuePair0).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));
    GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);
    assertNull(doubleArray1);
}",0,
project,0,test099,"public void test099() throws Throwable {
    VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair((double[]) null, (double[]) null);
    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn(vectorialPointValuePair0).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));
    GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
    gaussianFitter0.addObservedPoint((-478.108979269264), (-478.108979269264), (-478.108979269264));
    gaussianFitter0.addObservedPoint((-98.745), (-98.745));
    gaussianFitter0.addObservedPoint((-3070.816268443537), 4672.918271080159);
    double[] doubleArray0 = gaussianFitter0.fit();
    assertNull(doubleArray0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));
    doReturn(0, 0, 0, 0).when(differentiableMultivariateVectorialOptimizer0).getEvaluations();
    Well19937a well19937a0 = new Well19937a(0);
    GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(well19937a0);
    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(3289, gaussianRandomGenerator0);
    MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 3289, uncorrelatedRandomVectorGenerator0);
    GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
    double[] doubleArray0 = new double[5];
    // Undeclared exception!
    gaussianFitter0.fit(doubleArray0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));
    doReturn(0).when(differentiableMultivariateVectorialOptimizer0).getEvaluations();
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator((-925));
    MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 57, unitSphereRandomVectorGenerator0);
    GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
    // Undeclared exception!
    try {
        gaussianFitter0.fit((double[]) null);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.random.UnitSphereRandomVectorGenerator"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    double[] doubleArray0 = new double[5];
    VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair(doubleArray0, doubleArray0);
    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));
    doReturn(0, 0, 0).when(differentiableMultivariateVectorialOptimizer0).getEvaluations();
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(3);
    MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 3, unitSphereRandomVectorGenerator0);
    GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
    // Undeclared exception!
    try {
        gaussianFitter0.fit(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.BaseMultiStartMultivariateVectorialOptimizer"", e);
    }
}",1,
project,0,test1313,"public void test1313() throws Throwable {
    GaussianFitter gaussianFitter0 = new GaussianFitter((DifferentiableMultivariateVectorialOptimizer) null);
    gaussianFitter0.addObservedPoint(0.0, 0.0, 2540.861439);
    gaussianFitter0.addObservedPoint(849.066329945, 849.066329945, 849.066329945);
    gaussianFitter0.addObservedPoint(792.3072330933961, 792.3072330933961, 175.9);
    // Undeclared exception!
    try {
        gaussianFitter0.fit();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.fitting.CurveFitter"", e);
    }
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt(), any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class), any(double[].class), any(double[].class), any(double[].class));
    GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
    double[] doubleArray0 = new double[0];
    // Undeclared exception!
    try {
        gaussianFitter0.fit(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.fitting.CurveFitter"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(12, (NormalizedRandomGenerator) null);
    MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 12, uncorrelatedRandomVectorGenerator0);
    GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
    // Undeclared exception!
    try {
        gaussianFitter0.fit();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // 0 is smaller than the minimum (3)
        //
        verifyException(""org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser"", e);
    }
}",0,
