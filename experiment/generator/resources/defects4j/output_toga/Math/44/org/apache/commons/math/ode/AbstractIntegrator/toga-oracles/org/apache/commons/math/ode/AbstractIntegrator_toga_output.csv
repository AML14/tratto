project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertNotNull(dormandPrince853Integrator0);
}",1,
project,0,test001,"public void test001() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test002,"public void test002() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test003,"public void test003() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test004,"public void test004() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test005,"public void test005() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(1772.9071, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test006,"public void test006() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test007,"public void test007() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(1393.2544714988815, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test008,"public void test008() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(1094.9011498412, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test009,"public void test009() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0010,"public void test0010() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test0011,"public void test0011() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test0013,"public void test0013() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[5];
    try {
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 808.516339212, doubleArray0, 0.0, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 6 != 0
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}",0,
project,0,test0114,"public void test0114() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertNotNull(dormandPrince54Integrator0);
}",1,
project,0,test0115,"public void test0115() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(0.0012326388888888888, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0116,"public void test0116() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(0.0012326388888888888, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0117,"public void test0117() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0118,"public void test0118() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test0119,"public void test0119() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test0120,"public void test0120() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0121,"public void test0121() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0122,"public void test0122() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(0.0012326388888888888, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0123,"public void test0123() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0124,"public void test0124() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    double[] doubleArray0 = new double[1];
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(104).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test0125,"public void test0125() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    double[] doubleArray0 = new double[1];
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(104).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(208, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test0126,"public void test0126() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    double[] doubleArray0 = new double[1];
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(104).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    try {
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0012326388888888888, doubleArray0, 684.7876108027, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 1 != 208
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}",0,
project,0,test0227,"public void test0227() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    assertNotNull(graggBulirschStoerIntegrator0);
}",0,
project,0,test0228,"public void test0228() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    assertEquals(1582.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test0229,"public void test0229() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0230,"public void test0230() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test0231,"public void test0231() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    assertEquals(""Gragg-Bulirsch-Stoer"", graggBulirschStoerIntegrator0.getName());
}",0,assertNotNull(graggBulirschStoerIntegrator0.getName())
project,0,test0232,"public void test0232() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    assertEquals(39.77939164944582, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0233,"public void test0233() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    assertEquals(1582.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test0234,"public void test0234() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0235,"public void test0235() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test0236,"public void test0236() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    assertEquals(""Gragg-Bulirsch-Stoer"", graggBulirschStoerIntegrator0.getName());
}",0,assertNotNull(graggBulirschStoerIntegrator0.getName())
project,0,test0237,"public void test0237() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    assertEquals(39.77939164944582, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0238,"public void test0238() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test0239,"public void test0239() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
    assertEquals(1582.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test0240,"public void test0240() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0241,"public void test0241() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
    assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test0242,"public void test0242() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
    assertEquals(""Gragg-Bulirsch-Stoer"", graggBulirschStoerIntegrator0.getName());
}",0,assertNotNull(graggBulirschStoerIntegrator0.getName())
project,0,test0243,"public void test0243() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    graggBulirschStoerIntegrator0.setMaxEvaluations(0);
    int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
    assertEquals(39.77939164944582, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0344,"public void test0344() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertNotNull(dormandPrince853Integrator0);
}",1,
project,0,test0345,"public void test0345() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0346,"public void test0346() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0347,"public void test0347() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0348,"public void test0348() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0349,"public void test0349() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0350,"public void test0350() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test0351,"public void test0351() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test0352,"public void test0352() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0353,"public void test0353() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test0354,"public void test0354() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test0355,"public void test0355() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0356,"public void test0356() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0357,"public void test0357() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0358,"public void test0358() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0359,"public void test0359() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0360,"public void test0360() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test0361,"public void test0361() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test0362,"public void test0362() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0363,"public void test0363() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test0464,"public void test0464() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertNotNull(highamHall54Integrator0);
}",1,
project,0,test0465,"public void test0465() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0466,"public void test0466() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(1093.2452929, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0467,"public void test0467() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test0468,"public void test0468() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0469,"public void test0469() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(1093.2452929, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0470,"public void test0470() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0471,"public void test0471() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0472,"public void test0472() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(1093.2452929, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0473,"public void test0473() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test0474,"public void test0474() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(1093.2452929, double0, 0.01);
}",0,
project,0,test0475,"public void test0475() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0476,"public void test0476() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(1093.2452929, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0477,"public void test0477() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test0478,"public void test0478() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0479,"public void test0479() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(1093.2452929, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0480,"public void test0480() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0481,"public void test0481() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0482,"public void test0482() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(1093.2452929, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0483,"public void test0483() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test0584,"public void test0584() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    assertNotNull(graggBulirschStoerIntegrator0);
}",0,assertNotNull(graggBulirschStoerIntegrator0)
project,0,test0585,"public void test0585() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    assertEquals(565.845047803, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test0586,"public void test0586() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    assertEquals(565.845047803, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0587,"public void test0587() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    assertEquals(""Gragg-Bulirsch-Stoer"", graggBulirschStoerIntegrator0.getName());
}",0,assertNotNull(graggBulirschStoerIntegrator0.getName())
project,0,test0588,"public void test0588() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    assertEquals(565.845047803, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test0589,"public void test0589() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0590,"public void test0590() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test0591,"public void test0591() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test0692,"public void test0692() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
    assertNotNull(threeEighthesIntegrator0);
}",0,
project,0,test0693,"public void test0693() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0694,"public void test0694() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test0695,"public void test0695() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0696,"public void test0696() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test0697,"public void test0697() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test0698,"public void test0698() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    // Undeclared exception!
    try {
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, (double[]) null, 1000.0, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}",0,
project,0,test0799,"public void test0799() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(3, doubleArray0.length);
}",0,
project,0,test07102,"public void test07102() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test07103,"public void test07103() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(2918.610019620804, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test07104,"public void test07104() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test07105,"public void test07105() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test07106,"public void test07106() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test07107,"public void test07107() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(2918.610019620804, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test07108,"public void test07108() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test07109,"public void test07109() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(2918.610019620804, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test07110,"public void test07110() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test07111,"public void test07111() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test07112,"public void test07112() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test07113,"public void test07113() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertNotNull(expandableStatefulODE0);
}",0,assertNotNull(expandableStatefulODE0)
project,0,test07114,"public void test07114() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test07115,"public void test07115() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
}",0,
project,0,test07116,"public void test07116() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    try {
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-1.0));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 != 3
        //
        verifyException(""org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator"", e);
    }
}",0,
project,0,test08117,"public void test08117() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    assertNotNull(threeEighthesIntegrator0);
}",0,
project,0,test08118,"public void test08118() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,
project,0,test08119,"public void test08119() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test08120,"public void test08120() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test08121,"public void test08121() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    threeEighthesIntegrator0.setMaxEvaluations(0);
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test08122,"public void test08122() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    threeEighthesIntegrator0.setMaxEvaluations(0);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test08123,"public void test08123() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    threeEighthesIntegrator0.setMaxEvaluations(0);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test08124,"public void test08124() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    threeEighthesIntegrator0.setMaxEvaluations(0);
    double[] doubleArray0 = new double[1];
    try {
        threeEighthesIntegrator0.computeDerivatives(804.250840028896, doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (0) exceeded
        //
        verifyException(""org.apache.commons.math.util.Incrementor$1"", e);
    }
}",0,
project,0,test09125,"public void test09125() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertNotNull(dormandPrince853Integrator0);
}",1,
project,0,test09126,"public void test09126() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test09127,"public void test09127() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test09128,"public void test09128() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(3.141592653589793, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test09129,"public void test09129() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test09130,"public void test09130() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test09131,"public void test09131() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test09132,"public void test09132() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test09133,"public void test09133() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test09134,"public void test09134() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test09135,"public void test09135() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test09136,"public void test09136() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test09137,"public void test09137() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(3.141592653589793, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test09138,"public void test09138() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test09139,"public void test09139() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test09140,"public void test09140() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test09141,"public void test09141() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test09142,"public void test09142() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test09143,"public void test09143() throws Throwable {
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    dormandPrince853Integrator0.setMaxEvaluations((-822));
    assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test10144,"public void test10144() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    assertNotNull(threeEighthesIntegrator0);
}",0,
project,0,test10145,"public void test10145() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test10146,"public void test10146() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test10147,"public void test10147() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test10148,"public void test10148() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, 1344.57060599318, (-622.4274438751), 9, (UnivariateRealSolver) null);
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test10149,"public void test10149() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, 1344.57060599318, (-622.4274438751), 9, (UnivariateRealSolver) null);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test10150,"public void test10150() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, 1344.57060599318, (-622.4274438751), 9, (UnivariateRealSolver) null);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test11151,"public void test11151() throws Throwable {
    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    assertNotNull(eulerIntegrator0);
}",0,
project,0,test11152,"public void test11152() throws Throwable {
    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    assertEquals(""Euler"", eulerIntegrator0.getName());
}",0,assertNotNull(eulerIntegrator0.getName())
project,0,test11153,"public void test11153() throws Throwable {
    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test11154,"public void test11154() throws Throwable {
    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test11155,"public void test11155() throws Throwable {
    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
    StepNormalizer stepNormalizer0 = new StepNormalizer(1942.7446384883, fixedStepHandler0, stepNormalizerMode0);
    assertNotNull(stepNormalizer0);
}",0,assertNotNull(stepNormalizer0)
project,0,test11156,"public void test11156() throws Throwable {
    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
    StepNormalizer stepNormalizer0 = new StepNormalizer(1942.7446384883, fixedStepHandler0, stepNormalizerMode0);
    eulerIntegrator0.addStepHandler(stepNormalizer0);
    assertEquals(""Euler"", eulerIntegrator0.getName());
}",0,assertNotNull(eulerIntegrator0.getName())
project,0,test11157,"public void test11157() throws Throwable {
    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
    StepNormalizer stepNormalizer0 = new StepNormalizer(1942.7446384883, fixedStepHandler0, stepNormalizerMode0);
    eulerIntegrator0.addStepHandler(stepNormalizer0);
    assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test11158,"public void test11158() throws Throwable {
    EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
    StepNormalizer stepNormalizer0 = new StepNormalizer(1942.7446384883, fixedStepHandler0, stepNormalizerMode0);
    eulerIntegrator0.addStepHandler(stepNormalizer0);
    assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test12163,"public void test12163() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    double[] doubleArray0 = new double[1];
    // Undeclared exception!
    try {
        threeEighthesIntegrator0.computeDerivatives(804.250840028896, doubleArray0, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test13164,"public void test13164() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(0, doubleArray0.length);
}",0,
project,0,test13167,"public void test13167() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test13168,"public void test13168() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(419.342263060406, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test13169,"public void test13169() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test13170,"public void test13170() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test13171,"public void test13171() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test13172,"public void test13172() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(903.4061955756142, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test13173,"public void test13173() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test13174,"public void test13174() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(1946.24493188, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test13175,"public void test13175() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test13176,"public void test13176() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test13177,"public void test13177() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test13178,"public void test13178() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    try {
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 5, doubleArray0, (double) 5, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // too small integration interval: length = 0
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}",0,
project,0,test14179,"public void test14179() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(0, doubleArray0.length);
}",0,
project,0,test14182,"public void test14182() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
}",0,
project,0,test14183,"public void test14183() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
}",0,
project,0,test14184,"public void test14184() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test14185,"public void test14185() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(893.080324795, adamsBashforthIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test14186,"public void test14186() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(893.080324795, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test14187,"public void test14187() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(1.0905077326652577, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test14188,"public void test14188() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(""Adams-Bashforth"", adamsBashforthIntegrator0.getName());
}",0,assertNotNull(adamsBashforthIntegrator0.getName())
project,0,test14189,"public void test14189() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    assertEquals(893.080324795, adamsBashforthIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test14190,"public void test14190() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test14191,"public void test14191() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,
project,0,test14192,"public void test14192() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertNotNull(expandableStatefulODE0);
}",0,assertNotNull(expandableStatefulODE0)
project,0,test14193,"public void test14193() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,
project,0,test14194,"public void test14194() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
}",0,
project,0,test14195,"public void test14195() throws Throwable {
    double[] doubleArray0 = new double[0];
    AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    try {
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-2428.4));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // matrix must have at least one column
        //
        verifyException(""org.apache.commons.math.linear.Array2DRowRealMatrix"", e);
    }
}",0,
project,0,test15196,"public void test15196() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    assertNotNull(graggBulirschStoerIntegrator0);
}",0,assertNotNull(graggBulirschStoerIntegrator0)
project,0,test15197,"public void test15197() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test15198,"public void test15198() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    assertEquals(3396.3176252791, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test15199,"public void test15199() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test15200,"public void test15200() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    assertEquals(""Gragg-Bulirsch-Stoer"", graggBulirschStoerIntegrator0.getName());
}",0,assertNotNull(graggBulirschStoerIntegrator0.getName())
project,0,test15201,"public void test15201() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test15202,"public void test15202() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test15203,"public void test15203() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test15204,"public void test15204() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
    graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test15205,"public void test15205() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
    graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
    assertEquals(3396.3176252791, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test15206,"public void test15206() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
    graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test15207,"public void test15207() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
    graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
    assertEquals(""Gragg-Bulirsch-Stoer"", graggBulirschStoerIntegrator0.getName());
}",0,assertNotNull(graggBulirschStoerIntegrator0.getName())
project,0,test15208,"public void test15208() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
    graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test15209,"public void test15209() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
    graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertNotNull(expandableStatefulODE0);
}",0,assertNotNull(expandableStatefulODE0)
project,0,test15210,"public void test15210() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
    graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test15211,"public void test15211() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
    graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
}",0,
project,0,test16212,"public void test16212() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    assertNotNull(midpointIntegrator0);
}",1,
project,0,test16213,"public void test16213() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test16214,"public void test16214() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test16215,"public void test16215() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    assertEquals(""midpoint"", midpointIntegrator0.getName());
}",0,assertNotNull(midpointIntegrator0.getName())
project,0,test16216,"public void test16216() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test16217,"public void test16217() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test16218,"public void test16218() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[0];
    double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
    assertEquals(0, doubleArray0.length);
}",0,
project,0,test16221,"public void test16221() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[0];
    double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
    assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test16222,"public void test16222() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[0];
    double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
    assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test16223,"public void test16223() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[0];
    double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
    assertEquals(""midpoint"", midpointIntegrator0.getName());
}",0,assertNotNull(midpointIntegrator0.getName())
project,0,test16224,"public void test16224() throws Throwable {
    MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[0];
    double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test17225,"public void test17225() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    assertNotNull(graggBulirschStoerIntegrator0);
}",0,assertNotNull(graggBulirschStoerIntegrator0)
project,0,test17226,"public void test17226() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    assertEquals(588.160007279939, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test17227,"public void test17227() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    assertEquals(330.933267253787, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test17228,"public void test17228() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    assertEquals(441.1821765180019, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test17229,"public void test17229() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test17230,"public void test17230() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    assertEquals(""Gragg-Bulirsch-Stoer"", graggBulirschStoerIntegrator0.getName());
}",0,assertNotNull(graggBulirschStoerIntegrator0.getName())
project,0,test17231,"public void test17231() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    graggBulirschStoerIntegrator0.setMaxEvaluations(544);
    assertEquals(588.160007279939, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
}",0,
project,0,test17232,"public void test17232() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    graggBulirschStoerIntegrator0.setMaxEvaluations(544);
    assertEquals(330.933267253787, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
}",0,
project,0,test17233,"public void test17233() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    graggBulirschStoerIntegrator0.setMaxEvaluations(544);
    assertEquals(441.1821765180019, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test17234,"public void test17234() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    graggBulirschStoerIntegrator0.setMaxEvaluations(544);
    assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test17235,"public void test17235() throws Throwable {
    GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    graggBulirschStoerIntegrator0.setMaxEvaluations(544);
    assertEquals(""Gragg-Bulirsch-Stoer"", graggBulirschStoerIntegrator0.getName());
}",0,assertNotNull(graggBulirschStoerIntegrator0.getName())
project,0,test18236,"public void test18236() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(0, doubleArray0.length);
}",0,
project,0,test18239,"public void test18239() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test18240,"public void test18240() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(844.63099033, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test18241,"public void test18241() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test18242,"public void test18242() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test18243,"public void test18243() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test18244,"public void test18244() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(844.63099033, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test18245,"public void test18245() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test18246,"public void test18246() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(844.63099033, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test18247,"public void test18247() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test18248,"public void test18248() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(0, doubleArray0.length);
}",0,
project,0,test18250,"public void test18250() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test18251,"public void test18251() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(844.63099033, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test18252,"public void test18252() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test18253,"public void test18253() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test18254,"public void test18254() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test18255,"public void test18255() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(844.63099033, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test18256,"public void test18256() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test18257,"public void test18257() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(844.63099033, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test18258,"public void test18258() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test18260,"public void test18260() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(0, doubleArray0.length);
}",0,
project,0,test18263,"public void test18263() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test18264,"public void test18264() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(844.63099033, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test18265,"public void test18265() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test18266,"public void test18266() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test18267,"public void test18267() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test18268,"public void test18268() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(844.63099033, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test18269,"public void test18269() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test18270,"public void test18270() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(844.63099033, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test18271,"public void test18271() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(eventHandler0).toString();
    dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test19276,"public void test19276() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    threeEighthesIntegrator0.clearEventHandlers();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test19277,"public void test19277() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    threeEighthesIntegrator0.clearEventHandlers();
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test19278,"public void test19278() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    threeEighthesIntegrator0.clearEventHandlers();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test20283,"public void test20283() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.clearStepHandlers();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test20284,"public void test20284() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.clearStepHandlers();
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test20285,"public void test20285() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.clearStepHandlers();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test21290,"public void test21290() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    int int0 = threeEighthesIntegrator0.getMaxEvaluations();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,"assertEquals(1, int0)"
project,0,test21291,"public void test21291() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    int int0 = threeEighthesIntegrator0.getMaxEvaluations();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test21292,"public void test21292() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    int int0 = threeEighthesIntegrator0.getMaxEvaluations();
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test21293,"public void test21293() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    int int0 = threeEighthesIntegrator0.getMaxEvaluations();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test22306,"public void test22306() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(3, doubleArray0.length);
}",0,
project,0,test22309,"public void test22309() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test22310,"public void test22310() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(""Dormand-Prince 8 (5, 3)"", dormandPrince853Integrator0.getName());
}",0,
project,0,test22311,"public void test22311() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(2918.610019620804, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test22312,"public void test22312() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test22313,"public void test22313() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(2918.610019620804, dormandPrince853Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test22314,"public void test22314() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
}",0,
project,0,test22315,"public void test22315() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(2918.610019620804, dormandPrince853Integrator0.getMinStep(), 0.01);
}",0,
project,0,test22316,"public void test22316() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test22317,"public void test22317() throws Throwable {
    double[] doubleArray0 = new double[3];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    assertEquals(8, dormandPrince853Integrator0.getOrder());
}",0,
project,0,test23318,"public void test23318() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    assertNotNull(threeEighthesIntegrator0);
}",0,
project,0,test23319,"public void test23319() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test23320,"public void test23320() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,
project,0,test23321,"public void test23321() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test23322,"public void test23322() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    double double0 = threeEighthesIntegrator0.getCurrentStepStart();
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test23323,"public void test23323() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    double double0 = threeEighthesIntegrator0.getCurrentStepStart();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test23324,"public void test23324() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    double double0 = threeEighthesIntegrator0.getCurrentStepStart();
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test23325,"public void test23325() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    double double0 = threeEighthesIntegrator0.getCurrentStepStart();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test24326,"public void test24326() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(8, doubleArray0.length);
}",0,
project,0,test24329,"public void test24329() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test24330,"public void test24330() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,"assertEquals(0, highamHall54Integrator0.getOrder())"
project,0,test24331,"public void test24331() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(590.3, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test24332,"public void test24332() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(590.3, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test24333,"public void test24333() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test24334,"public void test24334() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test24335,"public void test24335() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(590.3, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test24336,"public void test24336() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test24337,"public void test24337() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test24338,"public void test24338() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(8, doubleArray0.length);
}",0,
project,0,test24342,"public void test24342() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test24343,"public void test24343() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,"assertEquals(0, highamHall54Integrator0.getOrder())"
project,0,test24344,"public void test24344() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(590.3, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test24345,"public void test24345() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(590.3, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test24346,"public void test24346() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test24347,"public void test24347() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test24348,"public void test24348() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(590.3, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test24349,"public void test24349() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test24350,"public void test24350() throws Throwable {
    double[] doubleArray0 = new double[8];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    String string0 = highamHall54Integrator0.getName();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test25355,"public void test25355() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    int int0 = threeEighthesIntegrator0.getEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test25356,"public void test25356() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    int int0 = threeEighthesIntegrator0.getEvaluations();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test25357,"public void test25357() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    int int0 = threeEighthesIntegrator0.getEvaluations();
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test25358,"public void test25358() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    int int0 = threeEighthesIntegrator0.getEvaluations();
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test26363,"public void test26363() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test26364,"public void test26364() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test26365,"public void test26365() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertNotNull(expandableStatefulODE0);
}",0,
project,0,test26366,"public void test26366() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test26367,"public void test26367() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
}",0,
project,0,test27372,"public void test27372() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    assertEquals(""3/8"", threeEighthesIntegrator0.getName());
}",0,assertNotNull(threeEighthesIntegrator0.getName())
project,0,test27373,"public void test27373() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test27374,"public void test27374() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test27375,"public void test27375() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test27376,"public void test27376() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test27377,"public void test27377() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertNotNull(expandableStatefulODE0);
}",0,
project,0,test27378,"public void test27378() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(0, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test27379,"public void test27379() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
}",0,
project,0,test27380,"public void test27380() throws Throwable {
    ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    // Undeclared exception!
    try {
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-2736.06));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.ode.events.EventState"", e);
    }
}",0,
