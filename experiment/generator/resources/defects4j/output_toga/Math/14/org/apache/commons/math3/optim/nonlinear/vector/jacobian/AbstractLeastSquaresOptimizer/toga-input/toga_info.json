{
  "test1212" : {
    "methodSignature" : "public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    OptimizationData[] optimizationDataArray0 = new OptimizationData[2];\n    levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public double[][] computeCovariances(double[] params, double threshold)",
    "methodName" : "computeCovariances",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[7];\n    levenbergMarquardtOptimizer0.computeCovariances(doubleArray0, 0.0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    OptimizationData[] optimizationDataArray0 = new OptimizationData[8];\n    double[] doubleArray0 = new double[6];\n    DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);\n    Weight weight0 = new Weight(diagonalMatrix0);\n    optimizationDataArray0[1] = (OptimizationData) weight0;\n    levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public double getRMS()",
    "methodName" : "getRMS",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(9.394561, 9.394561, 9.394561, 9.394561, 9.394561);\n    levenbergMarquardtOptimizer0.getRMS();\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "protected double computeCost(double[] residuals)",
    "methodName" : "computeCost",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 1390.983231656, 0.0, 0.0);\n    double[] doubleArray0 = new double[4];\n    levenbergMarquardtOptimizer0.computeCost(doubleArray0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    OptimizationData[] optimizationDataArray0 = new OptimizationData[6];\n    DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(719);\n    Weight weight0 = new Weight(diagonalMatrix0);\n    optimizationDataArray0[1] = (OptimizationData) weight0;\n    // Undeclared exception!\n    levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "protected RealMatrix computeWeightedJacobian(double[] params)",
    "methodName" : "computeWeightedJacobian",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    SimplePointChecker<PointVectorValuePair> simplePointChecker0 = new SimplePointChecker<PointVectorValuePair>((-1.0), (-1.0));\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true, simplePointChecker0);\n    double[] doubleArray0 = new double[5];\n    gaussNewtonOptimizer0.computeWeightedJacobian(doubleArray0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "protected double[] computeResiduals(double[] objectiveValue)",
    "methodName" : "computeResiduals",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[8];\n    levenbergMarquardtOptimizer0.computeResiduals(doubleArray0);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public RealMatrix getWeightSquareRoot()",
    "methodName" : "getWeightSquareRoot",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.getWeightSquareRoot();\n}",
    "testName" : "test099"
  },
  "test000" : {
    "methodSignature" : "public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 0.0);\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(simpleVectorValueChecker0);\n    OptimizationData[] optimizationDataArray0 = new OptimizationData[7];\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = (double) 1;\n    doubleArray0[1] = (double) 11;\n    doubleArray0[2] = (double) 32;\n    DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);\n    Weight weight0 = new Weight(diagonalMatrix0);\n    optimizationDataArray0[6] = (OptimizationData) weight0;\n    levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public double getChiSquare()",
    "methodName" : "getChiSquare",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-453.9606066), (-453.9606066), (-453.9606066), (-453.9606066), (-453.9606066));\n    levenbergMarquardtOptimizer0.setCost(74.817);\n    double double0 = levenbergMarquardtOptimizer0.getChiSquare();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    OptimizationData[] optimizationDataArray0 = new OptimizationData[8];\n    DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);\n    Weight weight0 = new Weight(diagonalMatrix0);\n    optimizationDataArray0[4] = (OptimizationData) weight0;\n    levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public double[] computeSigma(double[] params, double covarianceSingularityThreshold)",
    "methodName" : "computeSigma",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[0];\n    levenbergMarquardtOptimizer0.computeSigma(doubleArray0, 0.0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public double getChiSquare()",
    "methodName" : "getChiSquare",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-453.9606066), (-453.9606066), (-453.9606066), (-453.9606066), (-453.9606066));\n    double double0 = levenbergMarquardtOptimizer0.getChiSquare();\n}",
    "testName" : "test088"
  }
}