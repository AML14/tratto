focal_method,test_prefix,docstring
"@Override
public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException {
    // Retrieve settings.
    parseOptimizationData(optData);
    // Set up base class and perform computation.
    return super.optimize(optData);
}","public void test000() throws Throwable {
    SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 0.0);
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(simpleVectorValueChecker0);
    OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (double) 1;
    doubleArray0[1] = (double) 11;
    doubleArray0[2] = (double) 32;
    DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
    Weight weight0 = new Weight(diagonalMatrix0);
    optimizationDataArray0[6] = (OptimizationData) weight0;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"", e);
    }
}","/**
 * {@inheritDoc}
 *
 * @param optData Optimization data. The following data will be looked for:
 * <ul>
 *  <li>{@link org.apache.commons.math3.optim.MaxEval}</li>
 *  <li>{@link org.apache.commons.math3.optim.InitialGuess}</li>
 *  <li>{@link org.apache.commons.math3.optim.SimpleBounds}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Target}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunction}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian}</li>
 * </ul>
 * @return {@inheritDoc}
 * @throws TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.
 * @throws DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.
 */"
"protected double computeCost(double[] residuals) {
    final ArrayRealVector r = new ArrayRealVector(residuals);
    return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));
}","public void test011() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 1390.983231656, 0.0, 0.0);
    double[] doubleArray0 = new double[4];
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.computeCost(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"", e);
    }
}","/**
 * Computes the cost.
 *
 * @param residuals Residuals.
 * @return the cost.
 * @see #computeResiduals(double[])
 */"
"public double getChiSquare() {
    return cost * cost;
}","public void test022() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-453.9606066), (-453.9606066), (-453.9606066), (-453.9606066), (-453.9606066));
    levenbergMarquardtOptimizer0.setCost(74.817);
    double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    assertEquals(5597.583488999999, double0, 0.01);
}","/**
 * Get a Chi-Square-like value assuming the N residuals follow N
 * distinct normal distributions centered on 0 and whose variances are
 * the reciprocal of the weights.
 * @return chi-square value
 */"
"@Override
public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException {
    // Retrieve settings.
    parseOptimizationData(optData);
    // Set up base class and perform computation.
    return super.optimize(optData);
}","public void test033() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
    DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(719);
    Weight weight0 = new Weight(diagonalMatrix0);
    optimizationDataArray0[1] = (OptimizationData) weight0;
    // Undeclared exception!
    levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);
}","/**
 * {@inheritDoc}
 *
 * @param optData Optimization data. The following data will be looked for:
 * <ul>
 *  <li>{@link org.apache.commons.math3.optim.MaxEval}</li>
 *  <li>{@link org.apache.commons.math3.optim.InitialGuess}</li>
 *  <li>{@link org.apache.commons.math3.optim.SimpleBounds}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Target}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunction}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian}</li>
 * </ul>
 * @return {@inheritDoc}
 * @throws TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.
 * @throws DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.
 */"
"@Override
public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException {
    // Retrieve settings.
    parseOptimizationData(optData);
    // Set up base class and perform computation.
    return super.optimize(optData);
}","public void test044() throws Throwable {
    double[] doubleArray0 = new double[0];
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
    DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
    Weight weight0 = new Weight(diagonalMatrix0);
    optimizationDataArray0[4] = (OptimizationData) weight0;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.linear.TriDiagonalTransformer"", e);
    }
}","/**
 * {@inheritDoc}
 *
 * @param optData Optimization data. The following data will be looked for:
 * <ul>
 *  <li>{@link org.apache.commons.math3.optim.MaxEval}</li>
 *  <li>{@link org.apache.commons.math3.optim.InitialGuess}</li>
 *  <li>{@link org.apache.commons.math3.optim.SimpleBounds}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Target}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunction}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian}</li>
 * </ul>
 * @return {@inheritDoc}
 * @throws TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.
 * @throws DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.
 */"
"protected RealMatrix computeWeightedJacobian(double[] params) {
    return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));
}","public void test055() throws Throwable {
    SimplePointChecker<PointVectorValuePair> simplePointChecker0 = new SimplePointChecker<PointVectorValuePair>((-1.0), (-1.0));
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true, simplePointChecker0);
    double[] doubleArray0 = new double[5];
    // Undeclared exception!
    try {
        gaussNewtonOptimizer0.computeWeightedJacobian(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer"", e);
    }
}","/**
 * Computes the weighted Jacobian matrix.
 *
 * @param params Model parameters at which to compute the Jacobian.
 * @return the weighted Jacobian: W<sup>1/2</sup> J.
 * @throws DimensionMismatchException if the Jacobian dimension does not
 * match problem dimension.
 */"
"public double[] computeSigma(double[] params, double covarianceSingularityThreshold) {
    final int nC = params.length;
    final double[] sig = new double[nC];
    final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);
    for (int i = 0; i < nC; ++i) {
        sig[i] = FastMath.sqrt(cov[i][i]);
    }
    return sig;
}","public void test066() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[0];
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.computeSigma(doubleArray0, 0.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer"", e);
    }
}","/**
 * Computes an estimate of the standard deviation of the parameters. The
 * returned values are the square root of the diagonal coefficients of the
 * covariance matrix, {@code sd(a[i]) ~= sqrt(C[i][i])}, where {@code a[i]}
 * is the optimized value of the {@code i}-th parameter, and {@code C} is
 * the covariance matrix.
 *
 * @param params Model parameters.
 * @param covarianceSingularityThreshold Singularity threshold (see
 * {@link #computeCovariances(double[],double) computeCovariances}).
 * @return an estimate of the standard deviation of the optimized parameters
 * @throws org.apache.commons.math3.linear.SingularMatrixException
 * if the covariance matrix cannot be computed.
 */"
"protected double[] computeResiduals(double[] objectiveValue) {
    final double[] target = getTarget();
    if (objectiveValue.length != target.length) {
        throw new DimensionMismatchException(target.length, objectiveValue.length);
    }
    final double[] residuals = new double[target.length];
    for (int i = 0; i < target.length; i++) {
        residuals[i] = target[i] - objectiveValue[i];
    }
    return residuals;
}","public void test077() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[8];
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.computeResiduals(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"", e);
    }
}","/**
 * Computes the residuals.
 * The residual is the difference between the observed (target)
 * values and the model (objective function) value.
 * There is one residual for each element of the vector-valued
 * function.
 *
 * @param objectiveValue Value of the the objective function. This is
 * the value returned from a call to
 * {@link #computeObjectiveValue(double[]) computeObjectiveValue}
 * (whose array argument contains the model parameters).
 * @return the residuals.
 * @throws DimensionMismatchException if {@code params} has a wrong
 * length.
 */"
"public double getChiSquare() {
    return cost * cost;
}","public void test088() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-453.9606066), (-453.9606066), (-453.9606066), (-453.9606066), (-453.9606066));
    double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get a Chi-Square-like value assuming the N residuals follow N
 * distinct normal distributions centered on 0 and whose variances are
 * the reciprocal of the weights.
 * @return chi-square value
 */"
"public RealMatrix getWeightSquareRoot() {
    return weightMatrixSqrt.copy();
}","public void test099() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.getWeightSquareRoot();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer"", e);
    }
}","/**
 * Gets the square-root of the weight matrix.
 *
 * @return the square-root of the weight matrix.
 */"
"@Override
public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException {
    // Retrieve settings.
    parseOptimizationData(optData);
    // Set up base class and perform computation.
    return super.optimize(optData);
}","public void test1010() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
    double[] doubleArray0 = new double[6];
    DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
    Weight weight0 = new Weight(diagonalMatrix0);
    optimizationDataArray0[1] = (OptimizationData) weight0;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);
        fail(""Expecting exception: MathUnsupportedOperationException"");
    } catch (MathUnsupportedOperationException e) {
        //
        // unsupported operation
        //
        verifyException(""org.apache.commons.math3.linear.EigenDecomposition"", e);
    }
}","/**
 * {@inheritDoc}
 *
 * @param optData Optimization data. The following data will be looked for:
 * <ul>
 *  <li>{@link org.apache.commons.math3.optim.MaxEval}</li>
 *  <li>{@link org.apache.commons.math3.optim.InitialGuess}</li>
 *  <li>{@link org.apache.commons.math3.optim.SimpleBounds}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Target}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunction}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian}</li>
 * </ul>
 * @return {@inheritDoc}
 * @throws TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.
 * @throws DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.
 */"
"public double getRMS() {
    return FastMath.sqrt(getChiSquare() / getTargetSize());
}","public void test1111() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(9.394561, 9.394561, 9.394561, 9.394561, 9.394561);
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.getRMS();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"", e);
    }
}","/**
 * Gets the root-mean-square (RMS) value.
 *
 * The RMS the root of the arithmetic mean of the square of all weighted
 * residuals.
 * This is related to the criterion that is minimized by the optimizer
 * as follows: If <em>c</em> if the criterion, and <em>n</em> is the
 * number of measurements, then the RMS is <em>sqrt (c/n)</em>.
 *
 * @return the RMS value.
 */"
"@Override
public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException {
    // Retrieve settings.
    parseOptimizationData(optData);
    // Set up base class and perform computation.
    return super.optimize(optData);
}","public void test1212() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.optimize(optimizationDataArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"", e);
    }
}","/**
 * {@inheritDoc}
 *
 * @param optData Optimization data. The following data will be looked for:
 * <ul>
 *  <li>{@link org.apache.commons.math3.optim.MaxEval}</li>
 *  <li>{@link org.apache.commons.math3.optim.InitialGuess}</li>
 *  <li>{@link org.apache.commons.math3.optim.SimpleBounds}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Target}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunction}</li>
 *  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian}</li>
 * </ul>
 * @return {@inheritDoc}
 * @throws TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.
 * @throws DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.
 */"
"public double[][] computeCovariances(double[] params, double threshold) {
    // Set up the Jacobian.
    final RealMatrix j = computeWeightedJacobian(params);
    // Compute transpose(J)J.
    final RealMatrix jTj = j.transpose().multiply(j);
    // Compute the covariances matrix.
    final DecompositionSolver solver = new QRDecomposition(jTj, threshold).getSolver();
    return solver.getInverse().getData();
}","public void test1313() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[7];
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.computeCovariances(doubleArray0, 0.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer"", e);
    }
}","/**
 * Get the covariance matrix of the optimized parameters.
 * <br/>
 * Note that this operation involves the inversion of the
 * <code>J<sup>T</sup>J</code> matrix, where {@code J} is the
 * Jacobian matrix.
 * The {@code threshold} parameter is a way for the caller to specify
 * that the result of this computation should be considered meaningless,
 * and thus trigger an exception.
 *
 * @param params Model parameters.
 * @param threshold Singularity threshold.
 * @return the covariance matrix.
 * @throws org.apache.commons.math3.linear.SingularMatrixException
 * if the covariance matrix cannot be computed (singular problem).
 */"
