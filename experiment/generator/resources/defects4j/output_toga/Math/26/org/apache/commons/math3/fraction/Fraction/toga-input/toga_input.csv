focal_method,test_prefix,docstring
"@Override
public String toString() {
    String str = null;
    if (denominator == 1) {
        str = Integer.toString(numerator);
    } else if (numerator == 0) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test000() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.THREE_QUARTERS.divide(fraction1);
    String string0 = fraction2.toString();
    assertEquals(""-3 / 4"", string0);
}","/**
 * <p>
 * Returns the {@code String} representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test011() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.divide((-413));
    boolean boolean0 = fraction2.equals(fraction1);
    assertFalse(fraction1.equals((Object) fraction2));
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test012() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.divide((-413));
    boolean boolean0 = fraction2.equals(fraction1);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test013() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.divide((-413));
    boolean boolean0 = fraction2.equals(fraction1);
    assertEquals((-0.0012106537530266344), fraction2.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public int getNumerator() {
    return numerator;
}","public void test014() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.MINUS_ONE;
    Fraction fraction2 = fraction0.divide((-413));
    boolean boolean0 = fraction2.equals(fraction1);
    assertEquals((-1), fraction2.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test025() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public int getDenominator() {
    return denominator;
}","public void test026() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(2, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test027() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.reciprocal();
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(1.5F, fraction1.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test038() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = new Fraction(2543.70070575406, (-970));
    Fraction fraction2 = fraction0.subtract(fraction1);
    assertEquals((-2542.6666666666665), fraction2.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public int getNumerator() {
    return numerator;
}","public void test039() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = new Fraction(2543.70070575406, (-970));
    Fraction fraction2 = fraction0.subtract(fraction1);
    assertEquals((-7628), fraction2.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public int getNumerator() {
    return numerator;
}","public void test0410() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(fraction0);
    assertEquals((-2), fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public int getDenominator() {
    return denominator;
}","public void test0411() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(fraction0);
    assertEquals(5, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test0512() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO_THIRDS.negate();
    Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(fraction1);
    assertEquals(1.1666666F, fraction2.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int getDenominator() {
    return denominator;
}","public void test0513() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.TWO_THIRDS.negate();
    Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(fraction1);
    assertEquals(3, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int getDenominator() {
    return denominator;
}","public void test0614() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.subtract(0);
    assertEquals(1, fraction2.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test0615() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.subtract(0);
    assertEquals(0.0, fraction2.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test0716() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.subtract(0);
    assertTrue(fraction1.equals((Object) fraction0));
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test0817() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
    assertEquals((-1L), fraction1.longValue());
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public int getDenominator() {
    return denominator;
}","public void test0818() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test0919() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    double double0 = fraction1.percentageValue();
    assertEquals(0.0, double0, 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test0920() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    double double0 = fraction1.percentageValue();
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1021() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    double double0 = fraction0.percentageValue();
    assertEquals(80.0, double0, 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test1122() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.negate();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test1123() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.negate();
    assertEquals(0.0F, fraction2.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1124() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    Fraction fraction2 = fraction1.negate();
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getNumerator() {
    return numerator;
}","public void test1225() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.negate();
    assertEquals(1, fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test1226() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.negate();
    assertEquals(1L, fraction1.longValue());
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1327() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.TWO.negate();
    assertEquals((-200.0), fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test1328() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.TWO.negate();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1429() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.TWO_QUARTERS.add(fraction1);
    Fraction fraction3 = fraction0.negate();
    Fraction fraction4 = fraction3.multiply(fraction2);
    assertEquals((-100.0), fraction4.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test1430() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.TWO_QUARTERS.add(fraction1);
    Fraction fraction3 = fraction0.negate();
    Fraction fraction4 = fraction3.multiply(fraction2);
    assertEquals(3, fraction3.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int getNumerator() {
    return numerator;
}","public void test1531() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction1 = fraction0.TWO_FIFTHS.multiply(fraction0);
    assertEquals((-1), fraction0.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1532() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction1 = fraction0.TWO_FIFTHS.multiply(fraction0);
    assertEquals((-0.1520912547528517), fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test1633() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.ONE_HALF.add(998);
    Fraction fraction2 = fraction0.ONE_FIFTH.multiply(fraction1);
    assertEquals(2, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1634() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.ONE_HALF.add(998);
    Fraction fraction2 = fraction0.ONE_FIFTH.multiply(fraction1);
    assertEquals(19970.0, fraction2.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test1735() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.TWO;
    Fraction fraction2 = fraction0.TWO_THIRDS.multiply(fraction1);
    long long0 = fraction2.longValue();
    assertEquals(1.3333334F, fraction2.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test1736() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.TWO;
    Fraction fraction2 = fraction0.TWO_THIRDS.multiply(fraction1);
    long long0 = fraction2.longValue();
    assertEquals(1L, long0);
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test1837() throws Throwable {
    Fraction fraction0 = new Fraction((-1752.3966), (-1));
    long long0 = fraction0.longValue();
    assertEquals((-1753L), long0);
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1938() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    int int0 = fraction0.intValue();
    assertEquals(80.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"@Override
public int intValue() {
    return (int) doubleValue();
}","public void test1939() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    int int0 = fraction0.intValue();
    assertEquals(0, int0);
}","/**
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"@Override
public int intValue() {
    return (int) doubleValue();
}","public void test2040() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    int int0 = fraction0.intValue();
    assertEquals((-1), int0);
}","/**
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public int getDenominator() {
    return denominator;
}","public void test2141() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(3, (-1));
    assertEquals(1, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test2243() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(4646, 31);
    assertEquals(14987.09677419355, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test2244() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(4646, 31);
    assertEquals(31, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int getNumerator() {
    return numerator;
}","public void test2345() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = fraction0.getNumerator();
    assertEquals(0, int0);
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public int getNumerator() {
    return numerator;
}","public void test2446() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    int int0 = fraction0.getNumerator();
    assertEquals(4, int0);
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test2547() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.ZERO.abs();
    float float0 = fraction1.floatValue();
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test2548() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.ZERO.abs();
    float float0 = fraction1.floatValue();
    assertEquals(2.0F, fraction0.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test2649() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.divide((-1894));
    float float0 = fraction1.floatValue();
    assertEquals((-5.279831E-4F), float0, 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int getDenominator() {
    return denominator;
}","public void test2650() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.divide((-1894));
    float float0 = fraction1.floatValue();
    assertEquals(1894, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test2751() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    double double0 = fraction1.doubleValue();
    assertEquals(0.8F, fraction0.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int getDenominator() {
    return denominator;
}","public void test2752() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    double double0 = fraction1.doubleValue();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test2753() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.multiply(0);
    double double0 = fraction1.doubleValue();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test2854() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    double double0 = fraction0.doubleValue();
    assertEquals(0.8, double0, 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public int getDenominator() {
    return denominator;
}","public void test2955() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction2 = fraction0.divide(fraction1);
    assertEquals(1, fraction2.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int getNumerator() {
    return numerator;
}","public void test2956() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction2 = fraction0.divide(fraction1);
    assertEquals((-263), fraction2.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test2957() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = Fraction.getReducedFraction((-1), 263);
    Fraction fraction2 = fraction0.divide(fraction1);
    assertEquals((-0.38022813688212925), fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test3058() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.ONE_HALF.divide(fraction0);
    assertEquals(2.0, fraction1.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public int getDenominator() {
    return denominator;
}","public void test3159() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.subtract((-3737));
    Fraction fraction2 = fraction1.divide(fraction0);
    assertEquals(1, fraction2.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test3160() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.subtract((-3737));
    Fraction fraction2 = fraction1.divide(fraction0);
    assertEquals(373800.0, fraction2.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test3261() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.ZERO.divide(508);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public int intValue() {
    return (int) doubleValue();
}","public void test3262() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.ZERO.divide(508);
    assertEquals(0, fraction1.intValue());
}","/**
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test3363() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.divide(2);
    assertEquals(100.0, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test3364() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Fraction fraction1 = fraction0.divide(2);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int getNumerator() {
    return numerator;
}","public void test3465() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(998);
    Fraction fraction2 = fraction1.divide(118);
    assertEquals((-1496), fraction2.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test3466() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(998);
    Fraction fraction2 = fraction1.divide(118);
    assertEquals((-8.451977401129943), fraction2.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test3467() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(998);
    Fraction fraction2 = fraction1.divide(118);
    assertEquals((-997.3333333333334), fraction1.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test3568() throws Throwable {
    Fraction fraction0 = new Fraction(0);
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertSame(fraction1, fraction0);
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test3569() throws Throwable {
    Fraction fraction0 = new Fraction(0);
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test3570() throws Throwable {
    Fraction fraction0 = new Fraction(0);
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertEquals(1, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int getDenominator() {
    return denominator;
}","public void test3772() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = fraction0.ZERO.add(0);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test3773() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = fraction0.ZERO.add(0);
    assertEquals(0.0F, fraction1.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int getNumerator() {
    return numerator;
}","public void test3875() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.MINUS_ONE.add(0);
    assertEquals((-1), fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test3976() throws Throwable {
    Fraction fraction0 = new Fraction(Integer.MAX_VALUE, 1025);
    Fraction fraction1 = fraction0.abs();
    assertEquals(2.0951059970731708E8, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test3977() throws Throwable {
    Fraction fraction0 = new Fraction(Integer.MAX_VALUE, 1025);
    Fraction fraction1 = fraction0.abs();
    assertEquals(2095106.0F, fraction0.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public int intValue() {
    return (int) doubleValue();
}","public void test4078() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.abs();
    assertEquals(1, fraction1.intValue());
}","/**
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public int getDenominator() {
    return denominator;
}","public void test4079() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.abs();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public Fraction subtract(Fraction fraction) {
    return addSub(fraction, false);
}","public void test4180() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    // Undeclared exception!
    try {
        fraction0.ONE_FIFTH.subtract((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p>
 *
 * @param fraction  the fraction to subtract, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator
 *   cannot be represented in an {@code int}.
 */"
"public Fraction reciprocal() {
    return new Fraction(denominator, numerator);
}","public void test4281() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    // Undeclared exception!
    try {
        fraction0.ZERO.reciprocal();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Return the multiplicative inverse of this fraction.
 * @return the reciprocal fraction
 */"
"public Fraction multiply(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);
    int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);
    return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test4382() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = fraction0.add(1870);
    Fraction fraction2 = fraction1.multiply(1870);
    // Undeclared exception!
    try {
        fraction1.multiply(fraction2);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // arithmetic exception
        //
        verifyException(""org.apache.commons.math3.util.ArithmeticUtils"", e);
    }
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test4483() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(4, (-2546));
    // Undeclared exception!
    try {
        fraction0.compareTo((Fraction) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"public Fraction(double value) throws FractionConversionException {
    this(value, 1.0e-5, 100);
}","public void test4584() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((-8.0E298));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert -80,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/-1)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the double value.
 * @param value the double value to convert to a fraction.
 * @throws FractionConversionException if the continued fraction failed to
 *         converge.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test4685() throws Throwable {
    Fraction fraction0 = new Fraction(1025, 1025);
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getNumerator() {
    return numerator;
}","public void test4686() throws Throwable {
    Fraction fraction0 = new Fraction(1025, 1025);
    assertEquals(1, fraction0.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public Fraction(int num, int den) {
    if (den == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den);
    }
    if (den < 0) {
        if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den);
        }
        num = -num;
        den = -den;
    }
    // reduce numerator and denominator by greatest common denominator.
    final int d = ArithmeticUtils.gcd(num, den);
    if (d > 1) {
        num /= d;
        den /= d;
    }
    // move sign to numerator.
    if (den < 0) {
        num = -num;
        den = -den;
    }
    this.numerator = num;
    this.denominator = den;
}","public void test4787() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(156, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 156/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.
 * @param num the numerator.
 * @param den the denominator.
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test4888() throws Throwable {
    Fraction fraction0 = new Fraction(1519, (-533));
    assertEquals((-2.8499062F), fraction0.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int getDenominator() {
    return denominator;
}","public void test4889() throws Throwable {
    Fraction fraction0 = new Fraction(1519, (-533));
    assertEquals(533, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public Fraction(int num, int den) {
    if (den == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den);
    }
    if (den < 0) {
        if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den);
        }
        num = -num;
        den = -den;
    }
    // reduce numerator and denominator by greatest common denominator.
    final int d = ArithmeticUtils.gcd(num, den);
    if (d > 1) {
        num /= d;
        den /= d;
    }
    // move sign to numerator.
    if (den < 0) {
        num = -num;
        den = -den;
    }
    this.numerator = num;
    this.denominator = den;
}","public void test4990() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(1, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.
 * @param num the numerator.
 * @param den the denominator.
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public int getNumerator() {
    return numerator;
}","public void test5091() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    double double0 = fraction0.doubleValue();
    assertEquals((-112586), fraction0.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test5092() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    double double0 = fraction0.doubleValue();
    assertEquals((-248.53421633554083), double0, 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"@Override
public String toString() {
    String str = null;
    if (denominator == 1) {
        str = Integer.toString(numerator);
    } else if (numerator == 0) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test5193() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    String string0 = fraction0.THREE_QUARTERS.toString();
    assertEquals(""3 / 4"", string0);
}","/**
 * <p>
 * Returns the {@code String} representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test5194() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    String string0 = fraction0.THREE_QUARTERS.toString();
    assertEquals((-4313L), fraction0.longValue());
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test5295() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1204));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-1,204, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test5396() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(371, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 371/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test5497() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(0, 1);
    assertEquals(0.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test5598() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction((-1), 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction -1/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public Fraction divide(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (fraction.numerator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);
    }
    return multiply(fraction.reciprocal());
}","public void test5699() throws Throwable {
    Fraction fraction0 = new Fraction(14.101419448852539, 25);
    Fraction fraction1 = Fraction.ZERO;
    // Undeclared exception!
    try {
        fraction0.divide(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // the fraction to divide by must not be zero: 0/1
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws IllegalArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction divide(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (fraction.numerator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);
    }
    return multiply(fraction.reciprocal());
}","public void test57100() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(2711, 2711);
    // Undeclared exception!
    try {
        fraction0.ZERO.divide((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws IllegalArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test58101() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.multiply(105);
    Fraction fraction2 = fraction1.FOUR_FIFTHS.multiply(fraction1);
    assertTrue(fraction2.equals((Object) fraction1));
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test58102() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.multiply(105);
    Fraction fraction2 = fraction1.FOUR_FIFTHS.multiply(fraction1);
    assertEquals(0L, fraction1.longValue());
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public Fraction multiply(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);
    int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);
    return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test59103() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    // Undeclared exception!
    try {
        fraction0.multiply((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test60104() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.getReducedFraction(156, Integer.MIN_VALUE);
    Fraction fraction2 = fraction0.TWO_FIFTHS.add(fraction0);
    // Undeclared exception!
    try {
        fraction2.add(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow, numerator too large after multiply: 2,415,918,909
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public int getDenominator() {
    return denominator;
}","public void test61105() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.add(fraction0);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test61106() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.add(fraction0);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test62107() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
    assertEquals(249.03421F, fraction1.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test63108() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
    Fraction fraction2 = fraction0.ONE_HALF.subtract(fraction1);
    assertEquals(0.5, fraction2.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test64109() throws Throwable {
    Fraction fraction0 = new Fraction(1);
    // Undeclared exception!
    try {
        fraction0.add((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction subtract(Fraction fraction) {
    return addSub(fraction, false);
}","public void test65110() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.multiply(105);
    Fraction fraction2 = fraction1.add(Integer.MIN_VALUE);
    // Undeclared exception!
    try {
        fraction1.subtract(fraction2);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/1, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p>
 *
 * @param fraction  the fraction to subtract, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator
 *   cannot be represented in an {@code int}.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test66111() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.TWO_QUARTERS;
    boolean boolean0 = fraction0.equals(fraction1);
    assertTrue(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test67112() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertFalse(fraction1.equals((Object) fraction0));
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test67113() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertFalse(fraction0.equals((Object) fraction1));
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test67114() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertEquals(33.33333333333333, fraction2.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test67115() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public int getNumerator() {
    return numerator;
}","public void test67116() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = Fraction.ONE;
    Fraction fraction2 = fraction0.ONE_THIRD.divide(fraction1);
    boolean boolean0 = fraction1.equals(fraction2);
    assertEquals(1, fraction2.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test68117() throws Throwable {
    Fraction fraction0 = Fraction.TWO;
    Object object0 = new Object();
    boolean boolean0 = fraction0.equals(object0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test69118() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    boolean boolean0 = fraction0.equals(fraction0);
    assertTrue(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public int getNumerator() {
    return numerator;
}","public void test69119() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    boolean boolean0 = fraction0.equals(fraction0);
    assertEquals((-112586), fraction0.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public int getDenominator() {
    return denominator;
}","public void test70120() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    fraction0.equals(fraction1);
    assertEquals(453, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int getDenominator() {
    return denominator;
}","public void test70121() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    fraction0.equals(fraction1);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test70122() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    fraction0.equals(fraction1);
    assertEquals(1.0, fraction1.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test71123() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    int int0 = fraction1.compareTo(fraction0);
    assertEquals(1, int0);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test71124() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    Fraction fraction1 = Fraction.getReducedFraction(64, 64);
    int int0 = fraction1.compareTo(fraction0);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test72125() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = new Fraction(216);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals((-1), int0);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test72126() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = new Fraction(216);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(21600.0, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test73127() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(0, int0);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"public int getDenominator() {
    return denominator;
}","public void test73128() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(453, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test74129() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.abs();
    assertEquals(431377.0392749245, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test75130() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-2283));
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public int getNumerator() {
    return numerator;
}","public void test75131() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-2283));
    assertEquals((-1427858), fraction0.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test75132() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-2283));
    assertEquals((-761.0), fraction1.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public Fraction divide(final int i) {
    return new Fraction(numerator, denominator * i);
}","public void test76133() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    // Undeclared exception!
    try {
        fraction0.ONE_THIRD.divide(Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 1/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Divide the fraction by an integer.
 * @param i the <tt>integer</tt> to divide by.
 * @return this * i
 */"
"public Fraction(int num, int den) {
    if (den == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den);
    }
    if (den < 0) {
        if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den);
        }
        num = -num;
        den = -den;
    }
    // reduce numerator and denominator by greatest common denominator.
    final int d = ArithmeticUtils.gcd(num, den);
    if (d > 1) {
        num /= d;
        den /= d;
    }
    // move sign to numerator.
    if (den < 0) {
        num = -num;
        den = -den;
    }
    this.numerator = num;
    this.denominator = den;
}","public void test77134() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.
 * @param num the numerator.
 * @param den the denominator.
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public Fraction(double value, double epsilon, int maxIterations) throws FractionConversionException {
    this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}","public void test78135() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((-3708.46337892569), 0.0032307692306403624, (-1));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Unable to convert -3,708.463 to fraction after -1 iterations
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 * @param value the double value to convert to a fraction.
 * @param epsilon maximum error allowed.  The resulting fraction is within
 *        {@code epsilon} of {@code value}, in absolute terms.
 * @param maxIterations maximum number of convergents
 * @throws FractionConversionException if the continued fraction failed to
 *         converge.
 */"
"public Fraction(double value, int maxDenominator) throws FractionConversionException {
    this(value, 0, maxDenominator, 100);
}","public void test79136() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(100.0, 4);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 * @param value the double value to convert to a fraction.
 * @param maxDenominator The maximum allowed value for denominator
 * @throws FractionConversionException if the continued fraction failed to
 *         converge
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test80137() throws Throwable {
    Fraction fraction0 = new Fraction(4173, 4173, 206);
    assertEquals(417300.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test81138() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    double double0 = fraction0.percentageValue();
    assertEquals((-24853.421633554084), double0, 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getNumerator() {
    return numerator;
}","public void test81139() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    double double0 = fraction0.percentageValue();
    assertEquals((-112586), fraction0.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test82140() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    float float0 = fraction0.floatValue();
    assertEquals(0.6666667F, float0, 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int getNumerator() {
    return numerator;
}","public void test83141() throws Throwable {
    Fraction fraction0 = new Fraction((-248.53421868528));
    int int0 = fraction0.getNumerator();
    assertEquals((-112586), int0);
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public int hashCode() {
    return 37 * (37 * 17 + numerator) + denominator;
}","public void test84142() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    fraction0.hashCode();
}","/**
 * Gets a hashCode for the fraction.
 * @return a hash code value for this object
 */"
"@Override
public int intValue() {
    return (int) doubleValue();
}","public void test85143() throws Throwable {
    Fraction fraction0 = new Fraction(1);
    int int0 = fraction0.intValue();
    assertEquals(1, int0);
}","/**
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public int getDenominator() {
    return denominator;
}","public void test85144() throws Throwable {
    Fraction fraction0 = new Fraction(1);
    int int0 = fraction0.intValue();
    assertEquals(1, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test86145() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    long long0 = fraction0.longValue();
    assertEquals(0.5F, fraction0.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test86146() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    long long0 = fraction0.longValue();
    assertEquals(0L, long0);
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test87147() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.reciprocal();
    assertEquals((-2.3181576E-4F), fraction1.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int getNumerator() {
    return numerator;
}","public void test87148() throws Throwable {
    Fraction fraction0 = new Fraction((-4313.770396564076));
    Fraction fraction1 = fraction0.reciprocal();
    assertEquals((-331), fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public FractionField getField() {
    return FractionField.getInstance();
}","public void test88149() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    FractionField fractionField0 = fraction0.TWO_THIRDS.getField();
    assertNotNull(fractionField0);
}","/**
 * {@inheritDoc}
 */"
"public int getDenominator() {
    return denominator;
}","public void test89150() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test89151() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test90152() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    int int0 = fraction0.getDenominator();
    assertEquals(1, int0);
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
