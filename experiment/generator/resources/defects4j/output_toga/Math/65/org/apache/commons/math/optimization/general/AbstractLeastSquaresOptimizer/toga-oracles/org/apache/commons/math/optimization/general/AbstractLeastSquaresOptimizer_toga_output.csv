project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((double[]) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    double[] doubleArray0 = new double[9];
    double[] doubleArray1 = new double[9];
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray1, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[7];
    double[] doubleArray1 = new double[1];
    try {
        levenbergMarquardtOptimizer0.optimize((DifferentiableMultivariateVectorialFunction) null, doubleArray0, doubleArray1, doubleArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // dimensions mismatch 7 != 1
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    double[] doubleArray0 = new double[5];
    double[] doubleArray1 = new double[8];
    try {
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray1, doubleArray1);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // dimensions mismatch 5 != 8
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.cols = 0;
    levenbergMarquardtOptimizer0.cols = 36;
    try {
        levenbergMarquardtOptimizer0.guessParametersErrors();
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // no degrees of freedom (0 measurements, 36 parameters)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.cost = (-527.9837694436);
    double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test045,"public void test045() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.cost = (-527.9837694436);
    double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations());
}",0,"assertEquals(1, levenbergMarquardtOptimizer0.getMaxIterations())"
project,0,test046,"public void test046() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.cost = (-527.9837694436);
    double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test057,"public void test057() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = (double) 100;
    levenbergMarquardtOptimizer0.residuals = doubleArray0;
    levenbergMarquardtOptimizer0.rows = 100;
    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.guessParametersErrors();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 9
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test068,"public void test068() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (double) 100;
    levenbergMarquardtOptimizer0.residuals = doubleArray0;
    levenbergMarquardtOptimizer0.rows = 2;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.guessParametersErrors();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test079,"public void test079() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = (-208);
    double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test0710,"public void test0710() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = (-208);
    double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxIterations())"
project,0,test0711,"public void test0711() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = (-208);
    double double0 = levenbergMarquardtOptimizer0.getChiSquare();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test0812,"public void test0812() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.cost = (double) 124;
    double double0 = gaussNewtonOptimizer0.getRMS();
    assertEquals(100, gaussNewtonOptimizer0.getMaxIterations());
}",0,"assertEquals(1, gaussNewtonOptimizer0.getMaxIterations())"
project,0,test0813,"public void test0813() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.cost = (double) 124;
    double double0 = gaussNewtonOptimizer0.getRMS();
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test0814,"public void test0814() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.cost = (double) 124;
    double double0 = gaussNewtonOptimizer0.getRMS();
    assertEquals(Integer.MAX_VALUE, gaussNewtonOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, gaussNewtonOptimizer0.getMaxEvaluations())"
project,0,test0915,"public void test0915() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[5];
    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;
    doubleArray0[0] = (double) 100;
    levenbergMarquardtOptimizer0.residuals = doubleArray0;
    levenbergMarquardtOptimizer0.rows = 100;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.getRMS();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1016,"public void test1016() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[5];
    double[] doubleArray1 = new double[1];
    doubleArray1[0] = (double) 100;
    levenbergMarquardtOptimizer0.residualsWeights = doubleArray1;
    levenbergMarquardtOptimizer0.residuals = doubleArray0;
    levenbergMarquardtOptimizer0.rows = 100;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.getRMS();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1117,"public void test1117() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[5];
    levenbergMarquardtOptimizer0.cost = 1.0;
    levenbergMarquardtOptimizer0.residuals = doubleArray0;
    levenbergMarquardtOptimizer0.rows = 1684;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.getRMS();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1218,"public void test1218() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((double[][]) null).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray0 = new double[1];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn(doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[1];
    doubleArray1[0] = (double) 100;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test1319,"public void test1319() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    double[][] doubleArray0 = new double[4][1];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    double[] doubleArray1 = new double[4];
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((double[]) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    double[] doubleArray2 = new double[4];
    // Undeclared exception!
    try {
        gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray2, doubleArray2, doubleArray2);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",1,
project,0,test1420,"public void test1420() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    double[] doubleArray0 = new double[4];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn(doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[7];
    try {
        gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // dimensions mismatch 4 != 7
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",1,
project,0,test1521,"public void test1521() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    double[] doubleArray0 = new double[9];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn(doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[5];
    try {
        gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // dimensions mismatch 9 != 5
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",1,
project,0,test1622,"public void test1622() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setMaxEvaluations(1);
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.doOptimize();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test1723,"public void test1723() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    double[][] doubleArray0 = new double[4][1];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[4];
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    // Undeclared exception!
    try {
        gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test1824,"public void test1824() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[1];
    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;
    double[][] doubleArray1 = new double[3][6];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((double[][]) null).when(multivariateMatrixFunction0).value(any(double[].class));
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn(levenbergMarquardtOptimizer0.residualsWeights).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test1925,"public void test1925() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[][] doubleArray0 = new double[2][1];
    double[] doubleArray1 = new double[4];
    doubleArray0[0] = doubleArray1;
    double[] doubleArray2 = new double[1];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    try {
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0[0], doubleArray0[0], doubleArray2);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // dimensions mismatch 2 != 4
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test2026,"public void test2026() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();
    gaussNewtonOptimizer0.setMaxIterations((-2261));
    double[] doubleArray0 = new double[0];
    try {
        gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // maximal number of iterations (-2,261) exceeded
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test2127,"public void test2127() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setMaxIterations(1);
    levenbergMarquardtOptimizer0.incrementIterationsCounter();
    assertEquals(1, levenbergMarquardtOptimizer0.getMaxIterations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxIterations())"
project,0,test2228,"public void test2228() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.cols = 105;
    int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test2229,"public void test2229() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.cols = 105;
    int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(1, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test2230,"public void test2230() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.cols = 105;
    int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();
    assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations());
}",0,"assertEquals(1, levenbergMarquardtOptimizer0.getMaxIterations())"
project,0,test2331,"public void test2331() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.rows = (-1989);
    int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2332,"public void test2332() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.rows = (-1989);
    int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();
    assertEquals(100, gaussNewtonOptimizer0.getMaxIterations());
}",0,"assertEquals(1, gaussNewtonOptimizer0.getMaxIterations())"
project,0,test2333,"public void test2333() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.rows = (-1989);
    int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();
    assertEquals(Integer.MAX_VALUE, gaussNewtonOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, gaussNewtonOptimizer0.getMaxEvaluations())"
project,0,test2434,"public void test2434() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.cols = 124;
    int int0 = gaussNewtonOptimizer0.getEvaluations();
    assertEquals(Integer.MAX_VALUE, gaussNewtonOptimizer0.getMaxEvaluations());
}",0,"assertEquals(1, gaussNewtonOptimizer0.getMaxEvaluations())"
project,0,test2435,"public void test2435() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.cols = 124;
    int int0 = gaussNewtonOptimizer0.getEvaluations();
    assertEquals(100, gaussNewtonOptimizer0.getMaxIterations());
}",0,"assertEquals(1, gaussNewtonOptimizer0.getMaxIterations())"
project,0,test2436,"public void test2436() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.cols = 124;
    int int0 = gaussNewtonOptimizer0.getEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test2537,"public void test2537() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = 35;
    int int0 = levenbergMarquardtOptimizer0.getEvaluations();
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test2538,"public void test2538() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = 35;
    int int0 = levenbergMarquardtOptimizer0.getEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2539,"public void test2539() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = 35;
    int int0 = levenbergMarquardtOptimizer0.getEvaluations();
    assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxIterations())"
project,0,test2640,"public void test2640() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
    assertEquals(Double.NaN, gaussNewtonOptimizer0.getRMS(), 0.01);
}",0,
project,0,test2641,"public void test2641() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
    gaussNewtonOptimizer0.rows = (-586);
    double double0 = gaussNewtonOptimizer0.getRMS();
    assertEquals(-0.0, double0, 0.01);
}",0,
project,0,test2742,"public void test2742() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    assertEquals(100, gaussNewtonOptimizer0.getMaxIterations());
}",0,"assertEquals(0, gaussNewtonOptimizer0.getMaxIterations())"
project,0,test2743,"public void test2743() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.setMaxIterations(0);
    int int0 = gaussNewtonOptimizer0.getMaxIterations();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test2844,"public void test2844() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setMaxIterations((-587));
    int int0 = levenbergMarquardtOptimizer0.getMaxIterations();
    assertEquals((-587), int0);
}",0,"assertEquals(1, int0)"
project,0,test2945,"public void test2945() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test2946,"public void test2946() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setMaxEvaluations(0);
    int int0 = levenbergMarquardtOptimizer0.getMaxEvaluations();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test3047,"public void test3047() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setMaxEvaluations((-414));
    int int0 = levenbergMarquardtOptimizer0.getMaxEvaluations();
    assertEquals((-414), int0);
}",0,"assertEquals(1, int0)"
project,0,test3148,"public void test3148() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.incrementIterationsCounter();
    int int0 = levenbergMarquardtOptimizer0.getIterations();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test3249,"public void test3249() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    VectorialConvergenceChecker vectorialConvergenceChecker0 = gaussNewtonOptimizer0.getConvergenceChecker();
    assertNotNull(vectorialConvergenceChecker0);
}",0,assertNotNull(vectorialConvergenceChecker0)
project,0,test3250,"public void test3250() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    VectorialConvergenceChecker vectorialConvergenceChecker0 = gaussNewtonOptimizer0.getConvergenceChecker();
    assertEquals(Integer.MAX_VALUE, gaussNewtonOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, gaussNewtonOptimizer0.getMaxEvaluations())"
project,0,test3251,"public void test3251() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    VectorialConvergenceChecker vectorialConvergenceChecker0 = gaussNewtonOptimizer0.getConvergenceChecker();
    assertEquals(100, gaussNewtonOptimizer0.getMaxIterations());
}",0,"assertEquals(1, gaussNewtonOptimizer0.getMaxIterations())"
project,0,test3352,"public void test3352() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.updateResidualsAndCost();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",1,
project,0,test3453,"public void test3453() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    // Undeclared exception!
    try {
        gaussNewtonOptimizer0.updateJacobian();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",1,
project,0,test3554,"public void test3554() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
    gaussNewtonOptimizer0.setMaxIterations(0);
    try {
        gaussNewtonOptimizer0.incrementIterationsCounter();
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // maximal number of iterations (0) exceeded
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",1,
project,0,test3655,"public void test3655() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
    // Undeclared exception!
    try {
        gaussNewtonOptimizer0.getCovariances();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test3756,"public void test3756() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[9];
    levenbergMarquardtOptimizer0.residuals = doubleArray0;
    levenbergMarquardtOptimizer0.rows = 100;
    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.getChiSquare();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 9
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test3857,"public void test3857() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker();
    levenbergMarquardtOptimizer0.setConvergenceChecker(simpleVectorialValueChecker0);
    assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations());
}",0,"assertEquals(1, levenbergMarquardtOptimizer0.getMaxIterations())"
project,0,test3858,"public void test3858() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker();
    levenbergMarquardtOptimizer0.setConvergenceChecker(simpleVectorialValueChecker0);
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(1, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test3959,"public void test3959() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    try {
        levenbergMarquardtOptimizer0.guessParametersErrors();
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // no degrees of freedom (0 measurements, 0 parameters)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test4060,"public void test4060() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);
    gaussNewtonOptimizer0.cols = (-878);
    // Undeclared exception!
    try {
        gaussNewtonOptimizer0.guessParametersErrors();
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test4161,"public void test4161() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = 164;
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.getChiSquare();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test4262,"public void test4262() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setMaxEvaluations((-2026));
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();
    double[] doubleArray0 = new double[8];
    try {
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // maximal number of evaluations (-2,026) exceeded
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test4363,"public void test4363() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.getConvergenceChecker();
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test4364,"public void test4364() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.getConvergenceChecker();
    assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxIterations())"
project,0,test4465,"public void test4465() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    int int0 = levenbergMarquardtOptimizer0.getMaxIterations();
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test4466,"public void test4466() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    int int0 = levenbergMarquardtOptimizer0.getMaxIterations();
    assertEquals(1000, int0);
}",0,"assertEquals(1, int0)"
project,0,test4567,"public void test4567() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    int int0 = levenbergMarquardtOptimizer0.getIterations();
    assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxIterations())"
project,0,test4568,"public void test4568() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    int int0 = levenbergMarquardtOptimizer0.getIterations();
    assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations());
}",0,"assertEquals(0, levenbergMarquardtOptimizer0.getMaxEvaluations())"
project,0,test4569,"public void test4569() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    int int0 = levenbergMarquardtOptimizer0.getIterations();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test4670,"public void test4670() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
    int int0 = gaussNewtonOptimizer0.getMaxEvaluations();
    assertEquals(100, gaussNewtonOptimizer0.getMaxIterations());
}",0,"assertEquals(0, gaussNewtonOptimizer0.getMaxIterations())"
project,0,test4671,"public void test4671() throws Throwable {
    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
    int int0 = gaussNewtonOptimizer0.getMaxEvaluations();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,"assertEquals(1, int0)"
