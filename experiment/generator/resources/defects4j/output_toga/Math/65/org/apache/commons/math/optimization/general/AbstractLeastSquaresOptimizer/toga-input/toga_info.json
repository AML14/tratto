{
  "test2742" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2742() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.getMaxIterations();\n}",
    "testName" : "test2742"
  },
  "test4569" : {
    "methodSignature" : "public int getIterations()",
    "methodName" : "getIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4569() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    int int0 = levenbergMarquardtOptimizer0.getIterations();\n}",
    "testName" : "test4569"
  },
  "test2026" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2026() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();\n    gaussNewtonOptimizer0.setMaxIterations((-2261));\n    double[] doubleArray0 = new double[0];\n    gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);\n}",
    "testName" : "test2026"
  },
  "test1016" : {
    "methodSignature" : "public double getRMS()",
    "methodName" : "getRMS",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1016() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[5];\n    double[] doubleArray1 = new double[1];\n    doubleArray1[0] = (double) 100;\n    levenbergMarquardtOptimizer0.residualsWeights = doubleArray1;\n    levenbergMarquardtOptimizer0.residuals = doubleArray0;\n    levenbergMarquardtOptimizer0.rows = 100;\n    levenbergMarquardtOptimizer0.getRMS();\n}",
    "testName" : "test1016"
  },
  "test3756" : {
    "methodSignature" : "public double getChiSquare()",
    "methodName" : "getChiSquare",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3756() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[9];\n    levenbergMarquardtOptimizer0.residuals = doubleArray0;\n    levenbergMarquardtOptimizer0.rows = 100;\n    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;\n    levenbergMarquardtOptimizer0.getChiSquare();\n}",
    "testName" : "test3756"
  },
  "test4567" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4567() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    int int0 = levenbergMarquardtOptimizer0.getIterations();\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test4567"
  },
  "test2743" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2743() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.setMaxIterations(0);\n    int int0 = gaussNewtonOptimizer0.getMaxIterations();\n}",
    "testName" : "test2743"
  },
  "test4568" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4568() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    int int0 = levenbergMarquardtOptimizer0.getIterations();\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test4568"
  },
  "test3554" : {
    "methodSignature" : "protected void incrementIterationsCounter() throws OptimizationException",
    "methodName" : "incrementIterationsCounter",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3554() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);\n    gaussNewtonOptimizer0.setMaxIterations(0);\n    gaussNewtonOptimizer0.incrementIterationsCounter();\n}",
    "testName" : "test3554"
  },
  "test033" : {
    "methodSignature" : "public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException",
    "methodName" : "guessParametersErrors",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.cols = 0;\n    levenbergMarquardtOptimizer0.cols = 36;\n    levenbergMarquardtOptimizer0.guessParametersErrors();\n}",
    "testName" : "test033"
  },
  "test3959" : {
    "methodSignature" : "public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException",
    "methodName" : "guessParametersErrors",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3959() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.guessParametersErrors();\n}",
    "testName" : "test3959"
  },
  "test2229" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2229() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.cols = 105;\n    int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test2229"
  },
  "test2228" : {
    "methodSignature" : "public int getJacobianEvaluations()",
    "methodName" : "getJacobianEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2228() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.cols = 105;\n    int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();\n}",
    "testName" : "test2228"
  },
  "test1218" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1218() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((double[][]) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray0 = new double[1];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn(doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[1];\n    doubleArray1[0] = (double) 100;\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test1218"
  },
  "test2946" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2946() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setMaxEvaluations(0);\n    int int0 = levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test2946"
  },
  "test2945" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2945() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test2945"
  },
  "test068" : {
    "methodSignature" : "public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException",
    "methodName" : "guessParametersErrors",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = (double) 100;\n    levenbergMarquardtOptimizer0.residuals = doubleArray0;\n    levenbergMarquardtOptimizer0.rows = 2;\n    levenbergMarquardtOptimizer0.guessParametersErrors();\n}",
    "testName" : "test068"
  },
  "test4363" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4363() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.getConvergenceChecker();\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test4363"
  },
  "test4364" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4364() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.getConvergenceChecker();\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test4364"
  },
  "test3352" : {
    "methodSignature" : "protected void updateResidualsAndCost() throws FunctionEvaluationException",
    "methodName" : "updateResidualsAndCost",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3352() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.updateResidualsAndCost();\n}",
    "testName" : "test3352"
  },
  "test4161" : {
    "methodSignature" : "public double getChiSquare()",
    "methodName" : "getChiSquare",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4161() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = 164;\n    levenbergMarquardtOptimizer0.getChiSquare();\n}",
    "testName" : "test4161"
  },
  "test2434" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2434() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.cols = 124;\n    int int0 = gaussNewtonOptimizer0.getEvaluations();\n    gaussNewtonOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test2434"
  },
  "test2436" : {
    "methodSignature" : "public int getEvaluations()",
    "methodName" : "getEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2436() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.cols = 124;\n    int int0 = gaussNewtonOptimizer0.getEvaluations();\n}",
    "testName" : "test2436"
  },
  "test1622" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1622() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setMaxEvaluations(1);\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test1622"
  },
  "test2435" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2435() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.cols = 124;\n    int int0 = gaussNewtonOptimizer0.getEvaluations();\n    gaussNewtonOptimizer0.getMaxIterations();\n}",
    "testName" : "test2435"
  },
  "test3249" : {
    "methodSignature" : "public VectorialConvergenceChecker getConvergenceChecker()",
    "methodName" : "getConvergenceChecker",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3249() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    VectorialConvergenceChecker vectorialConvergenceChecker0 = gaussNewtonOptimizer0.getConvergenceChecker();\n}",
    "testName" : "test3249"
  },
  "test1420" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1420() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    double[] doubleArray0 = new double[4];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn(doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[7];\n    gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray0);\n}",
    "testName" : "test1420"
  },
  "test3047" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3047() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setMaxEvaluations((-414));\n    int int0 = levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test3047"
  },
  "test022" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    double[] doubleArray0 = new double[5];\n    double[] doubleArray1 = new double[8];\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray1, doubleArray1);\n}",
    "testName" : "test022"
  },
  "test0813" : {
    "methodSignature" : "public double getRMS()",
    "methodName" : "getRMS",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0813() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.cost = (double) 124;\n    double double0 = gaussNewtonOptimizer0.getRMS();\n}",
    "testName" : "test0813"
  },
  "test0814" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0814() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.cost = (double) 124;\n    double double0 = gaussNewtonOptimizer0.getRMS();\n    gaussNewtonOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test0814"
  },
  "test0812" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0812() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.cost = (double) 124;\n    double double0 = gaussNewtonOptimizer0.getRMS();\n    gaussNewtonOptimizer0.getMaxIterations();\n}",
    "testName" : "test0812"
  },
  "test1824" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1824() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[1];\n    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;\n    double[][] doubleArray1 = new double[3][6];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((double[][]) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn(levenbergMarquardtOptimizer0.residualsWeights).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);\n}",
    "testName" : "test1824"
  },
  "test057" : {
    "methodSignature" : "public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException",
    "methodName" : "guessParametersErrors",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[9];\n    doubleArray0[0] = (double) 100;\n    levenbergMarquardtOptimizer0.residuals = doubleArray0;\n    levenbergMarquardtOptimizer0.rows = 100;\n    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;\n    levenbergMarquardtOptimizer0.guessParametersErrors();\n}",
    "testName" : "test057"
  },
  "test2230" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2230() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.cols = 105;\n    int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test2230"
  },
  "test3655" : {
    "methodSignature" : "public double[][] getCovariances() throws FunctionEvaluationException, OptimizationException",
    "methodName" : "getCovariances",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3655() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);\n    gaussNewtonOptimizer0.getCovariances();\n}",
    "testName" : "test3655"
  },
  "test2127" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2127() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setMaxIterations(1);\n    levenbergMarquardtOptimizer0.incrementIterationsCounter();\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test2127"
  },
  "test3453" : {
    "methodSignature" : "protected void updateJacobian() throws FunctionEvaluationException",
    "methodName" : "updateJacobian",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3453() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.updateJacobian();\n}",
    "testName" : "test3453"
  },
  "test4466" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4466() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    int int0 = levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test4466"
  },
  "test2641" : {
    "methodSignature" : "public double getRMS()",
    "methodName" : "getRMS",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);\n    gaussNewtonOptimizer0.rows = (-586);\n    double double0 = gaussNewtonOptimizer0.getRMS();\n}",
    "testName" : "test2641"
  },
  "test2640" : {
    "methodSignature" : "public double getRMS()",
    "methodName" : "getRMS",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2640() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);\n    gaussNewtonOptimizer0.getRMS();\n}",
    "testName" : "test2640"
  },
  "test4465" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4465() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    int int0 = levenbergMarquardtOptimizer0.getMaxIterations();\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test4465"
  },
  "test011" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[7];\n    double[] doubleArray1 = new double[1];\n    levenbergMarquardtOptimizer0.optimize((DifferentiableMultivariateVectorialFunction) null, doubleArray0, doubleArray1, doubleArray0);\n}",
    "testName" : "test011"
  },
  "test1319" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1319() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    double[][] doubleArray0 = new double[4][1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    double[] doubleArray1 = new double[4];\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((double[]) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    double[] doubleArray2 = new double[4];\n    gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray2, doubleArray2, doubleArray2);\n}",
    "testName" : "test1319"
  },
  "test1117" : {
    "methodSignature" : "public double getRMS()",
    "methodName" : "getRMS",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1117() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[5];\n    levenbergMarquardtOptimizer0.cost = 1.0;\n    levenbergMarquardtOptimizer0.residuals = doubleArray0;\n    levenbergMarquardtOptimizer0.rows = 1684;\n    levenbergMarquardtOptimizer0.getRMS();\n}",
    "testName" : "test1117"
  },
  "test3857" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3857() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker();\n    levenbergMarquardtOptimizer0.setConvergenceChecker(simpleVectorialValueChecker0);\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test3857"
  },
  "test2844" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2844() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setMaxIterations((-587));\n    int int0 = levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test2844"
  },
  "test3858" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3858() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker();\n    levenbergMarquardtOptimizer0.setConvergenceChecker(simpleVectorialValueChecker0);\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test3858"
  },
  "test046" : {
    "methodSignature" : "public double getChiSquare()",
    "methodName" : "getChiSquare",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.cost = (-527.9837694436);\n    double double0 = levenbergMarquardtOptimizer0.getChiSquare();\n}",
    "testName" : "test046"
  },
  "test3251" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3251() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    VectorialConvergenceChecker vectorialConvergenceChecker0 = gaussNewtonOptimizer0.getConvergenceChecker();\n    gaussNewtonOptimizer0.getMaxIterations();\n}",
    "testName" : "test3251"
  },
  "test3250" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3250() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    VectorialConvergenceChecker vectorialConvergenceChecker0 = gaussNewtonOptimizer0.getConvergenceChecker();\n    gaussNewtonOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test3250"
  },
  "test4262" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4262() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setMaxEvaluations((-2026));\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();\n    double[] doubleArray0 = new double[8];\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);\n}",
    "testName" : "test4262"
  },
  "test4060" : {
    "methodSignature" : "public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException",
    "methodName" : "guessParametersErrors",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4060() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.cols = (-878);\n    gaussNewtonOptimizer0.guessParametersErrors();\n}",
    "testName" : "test4060"
  },
  "test1521" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    double[] doubleArray0 = new double[9];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn(doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[5];\n    gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test1521"
  },
  "test3148" : {
    "methodSignature" : "public int getIterations()",
    "methodName" : "getIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3148() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.incrementIterationsCounter();\n    int int0 = levenbergMarquardtOptimizer0.getIterations();\n}",
    "testName" : "test3148"
  },
  "test2331" : {
    "methodSignature" : "public int getJacobianEvaluations()",
    "methodName" : "getJacobianEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2331() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.rows = (-1989);\n    int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();\n}",
    "testName" : "test2331"
  },
  "test2333" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2333() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.rows = (-1989);\n    int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();\n    gaussNewtonOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test2333"
  },
  "test2332" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2332() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    gaussNewtonOptimizer0.rows = (-1989);\n    int int0 = gaussNewtonOptimizer0.getJacobianEvaluations();\n    gaussNewtonOptimizer0.getMaxIterations();\n}",
    "testName" : "test2332"
  },
  "test000" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((MultivariateMatrixFunction) null).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((double[]) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    double[] doubleArray0 = new double[9];\n    double[] doubleArray1 = new double[9];\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray1, doubleArray0);\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.cost = (-527.9837694436);\n    double double0 = levenbergMarquardtOptimizer0.getChiSquare();\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test044"
  },
  "test045" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.cost = (-527.9837694436);\n    double double0 = levenbergMarquardtOptimizer0.getChiSquare();\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test045"
  },
  "test1925" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1925() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[2][1];\n    double[] doubleArray1 = new double[4];\n    doubleArray0[0] = doubleArray1;\n    double[] doubleArray2 = new double[1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0[0], doubleArray0[0], doubleArray2);\n}",
    "testName" : "test1925"
  },
  "test0915" : {
    "methodSignature" : "public double getRMS()",
    "methodName" : "getRMS",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0915() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[5];\n    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;\n    doubleArray0[0] = (double) 100;\n    levenbergMarquardtOptimizer0.residuals = doubleArray0;\n    levenbergMarquardtOptimizer0.rows = 100;\n    levenbergMarquardtOptimizer0.getRMS();\n}",
    "testName" : "test0915"
  },
  "test0710" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0710() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = (-208);\n    double double0 = levenbergMarquardtOptimizer0.getChiSquare();\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test0710"
  },
  "test2537" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2537() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = 35;\n    int int0 = levenbergMarquardtOptimizer0.getEvaluations();\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test2537"
  },
  "test0711" : {
    "methodSignature" : "public double getChiSquare()",
    "methodName" : "getChiSquare",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0711() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = (-208);\n    double double0 = levenbergMarquardtOptimizer0.getChiSquare();\n}",
    "testName" : "test0711"
  },
  "test1723" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1723() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(true);\n    double[][] doubleArray0 = new double[4][1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[4];\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test1723"
  },
  "test2539" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2539() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = 35;\n    int int0 = levenbergMarquardtOptimizer0.getEvaluations();\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test2539"
  },
  "test2538" : {
    "methodSignature" : "public int getEvaluations()",
    "methodName" : "getEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2538() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = 35;\n    int int0 = levenbergMarquardtOptimizer0.getEvaluations();\n}",
    "testName" : "test2538"
  },
  "test079" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = (-208);\n    double double0 = levenbergMarquardtOptimizer0.getChiSquare();\n    levenbergMarquardtOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test079"
  },
  "test4671" : {
    "methodSignature" : "public int getMaxEvaluations()",
    "methodName" : "getMaxEvaluations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4671() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);\n    int int0 = gaussNewtonOptimizer0.getMaxEvaluations();\n}",
    "testName" : "test4671"
  },
  "test4670" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4670() throws Throwable {\n    GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);\n    int int0 = gaussNewtonOptimizer0.getMaxEvaluations();\n    gaussNewtonOptimizer0.getMaxIterations();\n}",
    "testName" : "test4670"
  }
}