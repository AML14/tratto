{
  "test04050" : {
    "methodSignature" : "public Complex sqrt1z()",
    "methodName" : "sqrt1z",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04050() throws Throwable {\n    Complex complex0 = new Complex((-18.5323301726));\n    Complex complex1 = complex0.ZERO.asin();\n    Complex complex2 = complex0.add((-18.5323301726));\n    Complex complex3 = complex2.ONE.negate();\n    Complex complex4 = complex3.ONE.subtract(complex0);\n    complex0.isInfinite();\n    complex4.NaN.acos();\n    Complex complex5 = complex0.sinh();\n    Complex complex6 = complex1.acos();\n    complex0.ONE.subtract(complex1);\n    complex6.I.conjugate();\n    Complex complex7 = complex2.multiply(complex4);\n    complex5.tan();\n    complex0.tan();\n    complex7.sqrt1z();\n}",
    "testName" : "test04050"
  },
  "test05262" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05262() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.INF.divide(Double.NaN);\n    Complex complex1 = complex0.ZERO.sin();\n    complex1.ONE.pow(Double.NaN);\n    complex0.isInfinite();\n}",
    "testName" : "test05262"
  },
  "test08494" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08494() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.INF.hashCode();\n    complex0.getImaginary();\n}",
    "testName" : "test08494"
  },
  "test06070" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06070() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.NaN.nthRoot(1);\n    complex0.acos();\n}",
    "testName" : "test06070"
  },
  "test0000" : {
    "methodSignature" : "public Complex reciprocal()",
    "methodName" : "reciprocal",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Complex complex0 = new Complex((-220.8858633578), (-2206.522845379));\n    Complex complex1 = Complex.I;\n    Complex complex2 = complex0.NaN.multiply(933.56062);\n    Complex complex3 = complex0.I.subtract(complex1);\n    complex0.nthRoot(384);\n    Complex complex4 = complex0.cosh();\n    Complex complex5 = complex4.NaN.pow((double) 384);\n    Object object0 = new Object();\n    complex2.equals(object0);\n    Complex.valueOf(933.56062, (-220.8858633578));\n    Complex.valueOf(2405.78, 0.0);\n    complex2.createComplex(0.0, 933.56062);\n    complex4.ONE.hashCode();\n    complex4.NaN.add(0.0);\n    Complex complex6 = complex4.cos();\n    complex4.ONE.hashCode();\n    Complex complex7 = complex6.multiply(384);\n    complex7.sqrt1z();\n    Complex complex8 = Complex.valueOf((-220.8858633578));\n    complex7.hashCode();\n    Complex complex9 = complex5.cos();\n    complex9.add(933.56062);\n    complex3.exp();\n    complex6.sin();\n    complex0.equals(complex8);\n    complex1.reciprocal();\n}",
    "testName" : "test0000"
  },
  "test0088" : {
    "methodSignature" : "public Complex divide(Complex divisor) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0088() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.sqrt();\n    Complex complex2 = complex0.ZERO.pow(complex1);\n    Complex complex3 = complex1.ONE.sin();\n    Complex complex4 = complex0.sqrt1z();\n    Complex complex5 = complex4.NaN.cos();\n    complex4.I.toString();\n    complex1.toString();\n    Complex complex6 = complex2.NaN.cos();\n    complex2.abs();\n    complex1.subtract(Double.NaN);\n    complex3.INF.divide((-1778.526830813));\n    complex5.abs();\n    complex3.sqrt1z();\n    complex6.cosh();\n    complex6.divide(complex1);\n}",
    "testName" : "test0088"
  },
  "test07282" : {
    "methodSignature" : "public Complex pow(double x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07282() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = Complex.INF;\n    complex0.subtract(complex1);\n    Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);\n    complex2.toString();\n    Complex complex3 = complex2.divide(complex1);\n    Complex complex4 = complex1.reciprocal();\n    complex4.ZERO.hashCode();\n    Complex complex5 = complex3.acos();\n    Complex complex6 = new Complex(0.0);\n    complex6.I.cos();\n    complex0.multiply(complex6);\n    complex5.getReal();\n    complex5.pow(Double.POSITIVE_INFINITY);\n}",
    "testName" : "test07282"
  },
  "test04454" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04454() throws Throwable {\n    Complex complex0 = Complex.valueOf((-2152.884662036));\n    Complex complex1 = complex0.cos();\n    Complex complex2 = complex0.INF.add(81.0383094);\n    complex2.INF.exp();\n    complex0.getImaginary();\n    Complex complex3 = complex1.ONE.pow(0.0);\n    Complex complex4 = complex0.multiply(complex2);\n    Complex complex5 = complex4.negate();\n    complex5.ZERO.sqrt1z();\n    complex5.divide(37.32);\n    complex1.log();\n    complex1.sin();\n    complex3.multiply(complex5);\n}",
    "testName" : "test04454"
  },
  "test05666" : {
    "methodSignature" : "public Complex multiply(final int factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05666() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.multiply((-2006));\n}",
    "testName" : "test05666"
  },
  "test104114" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104114() throws Throwable {\n    Complex complex0 = Complex.valueOf(32.0, (-89.189320776));\n    Complex complex1 = complex0.tanh();\n    complex1.ONE.add(32.0);\n    Complex complex2 = complex0.NaN.divide((-89.189320776));\n    Complex complex3 = complex2.I.createComplex(32.0, 4629.973026927966);\n    Complex complex4 = complex0.multiply(7);\n    Complex complex5 = complex4.divide((double) 7);\n    complex5.NaN.multiply((-800.83));\n    complex4.reciprocal();\n    complex3.atan();\n    complex2.pow(complex3);\n}",
    "testName" : "test104114"
  },
  "test08898" : {
    "methodSignature" : "public Complex divide(Complex divisor) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08898() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.NaN.conjugate();\n    double double0 = 1.8356062677502141E202;\n    complex0.ZERO.add(1.8356062677502141E202);\n    complex1.toString();\n    Complex complex2 = complex0.NaN.reciprocal();\n    complex2.NaN.divide((Complex) null);\n}",
    "testName" : "test08898"
  },
  "test06474" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06474() throws Throwable {\n    Complex complex0 = new Complex(459.557442, Double.POSITIVE_INFINITY);\n    complex0.NaN.getField();\n    complex0.INF.getArgument();\n    complex0.toString();\n    complex0.asin();\n}",
    "testName" : "test06474"
  },
  "test07686" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07686() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex.valueOf(2.0);\n    complex0.ONE.tan();\n    Complex complex1 = complex0.cosh();\n    complex1.getArgument();\n    complex0.log();\n}",
    "testName" : "test07686"
  },
  "test02424" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02424() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    Complex complex1 = complex0.INF.negate();\n    Complex complex2 = Complex.I;\n    complex0.pow(complex2);\n    Complex complex3 = complex2.add(complex0);\n    complex3.ONE.abs();\n    complex1.abs();\n    Complex complex4 = Complex.valueOf(1011.13);\n    Complex complex5 = complex4.INF.divide(complex3);\n    complex1.multiply(94.55);\n    complex5.sin();\n    complex1.subtract(complex4);\n}",
    "testName" : "test02424"
  },
  "test01212" : {
    "methodSignature" : "public Complex multiply(final int factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.cosh();\n    complex0.I.abs();\n    complex1.abs();\n    complex0.I.multiply(833);\n    complex1.ZERO.subtract(complex0);\n    Complex complex2 = complex1.ZERO.add(Double.NaN);\n    Complex complex3 = complex2.I.pow(2.0);\n    complex3.ZERO.divide(complex2);\n    Complex complex4 = complex1.subtract(1.5704330804213333);\n    Complex complex5 = complex0.divide(1.5704330804213333);\n    complex5.ONE.toString();\n    Complex complex6 = complex2.subtract(complex0);\n    complex5.sqrt1z();\n    complex6.ZERO.pow(2.0);\n    complex4.getField();\n    complex6.cos();\n    complex2.multiply(833);\n}",
    "testName" : "test01212"
  },
  "test110120" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110120() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.ZERO.divide(844.11757802136);\n    Complex complex1 = complex0.NaN.log();\n    complex0.NaN.getArgument();\n    Complex complex2 = complex0.atan();\n    Complex complex3 = complex2.ONE.cos();\n    Complex complex4 = complex0.divide(complex1);\n    complex4.I.acos();\n    Complex.valueOf(0.0, Double.NaN);\n    Complex.valueOf(Double.NaN, 0.0);\n    Complex complex5 = complex3.createComplex((-1181.0736), 0.0);\n    complex5.add(complex0);\n}",
    "testName" : "test110120"
  },
  "test02828" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02828() throws Throwable {\n    Complex complex0 = new Complex(1.2599210498948732, 0.0032568115392321417);\n    Complex complex1 = Complex.valueOf(1143.5397259066847, (-20.0));\n    Complex complex2 = complex0.INF.subtract(complex1);\n    complex2.ONE.cosh();\n    Complex complex3 = complex0.cos();\n    complex3.ONE.createComplex(1143.5397259066847, (-20.0));\n    Complex complex4 = complex3.ONE.tanh();\n    complex4.INF.add((-2577.29));\n    complex1.I.abs();\n    complex1.divide(7.462678536479685E-9);\n}",
    "testName" : "test02828"
  },
  "test097107" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097107() throws Throwable {\n    Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);\n    Object object0 = new Object();\n    complex0.equals(object0);\n}",
    "testName" : "test097107"
  },
  "test01616" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01616() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.pow(11104.0);\n    Complex complex2 = complex1.asin();\n    complex2.ONE.sqrt();\n    complex2.ONE.add(11104.0);\n    Complex complex3 = complex1.sqrt1z();\n    complex2.tanh();\n    Complex complex4 = complex3.negate();\n    complex4.equals(complex1);\n}",
    "testName" : "test01616"
  },
  "test08090" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08090() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    complex0.I.readResolve();\n    Complex complex1 = complex0.add(Double.NaN);\n    complex0.add(complex1);\n}",
    "testName" : "test08090"
  },
  "test0011" : {
    "methodSignature" : "protected final Object readResolve()",
    "methodName" : "readResolve",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = Complex.ONE;\n    Complex complex2 = complex0.exp();\n    complex2.multiply(complex1);\n    Complex complex3 = Complex.I;\n    Complex complex4 = complex3.negate();\n    Complex complex5 = complex3.multiply(981305269);\n    Complex complex6 = complex3.atan();\n    Complex complex7 = complex4.add((double) 981305269);\n    Complex complex8 = complex7.acos();\n    complex4.multiply(981305269);\n    complex7.getArgument();\n    complex7.toString();\n    complex2.equals(complex5);\n    Complex complex9 = complex6.exp();\n    complex9.getField();\n    Complex complex10 = complex3.tanh();\n    complex10.NaN.divide((-1.0190508821164803E-9));\n    complex10.log();\n    Complex complex11 = complex8.add(complex1);\n    complex11.readResolve();\n}",
    "testName" : "test0011"
  },
  "test0099" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0);\n    Complex complex1 = Complex.valueOf(0.0, 1.4035923083915864E217);\n    Complex complex2 = complex0.I.add(complex1);\n    Complex complex3 = complex0.asin();\n    Complex complex4 = complex0.add(complex3);\n    Complex complex5 = complex4.add(complex0);\n    complex3.NaN.readResolve();\n    complex0.sqrt1z();\n    complex5.hashCode();\n    Complex complex6 = Complex.NaN;\n    complex5.I.subtract(complex6);\n    complex4.NaN.cosh();\n    complex3.INF.tan();\n    Complex complex7 = complex0.sinh();\n    complex7.readResolve();\n    Complex complex8 = complex2.subtract(complex0);\n    complex7.log();\n    complex8.INF.sqrt1z();\n    complex7.isInfinite();\n    Complex complex9 = complex5.pow(complex8);\n    complex9.NaN.multiply((-3035));\n    Complex complex10 = complex2.add(1398.073);\n    complex3.add(complex10);\n    complex4.isInfinite();\n    complex8.sqrt1z();\n    Complex complex11 = complex2.add(complex0);\n    complex1.atan();\n    complex11.toString();\n    complex9.isInfinite();\n}",
    "testName" : "test0099"
  },
  "test03232" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03232() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.subtract((-2003.4322116849));\n    Complex complex2 = complex0.log();\n    complex1.exp();\n    Complex.valueOf((-2003.4322116849), (-2003.4322116849));\n    Complex complex3 = complex0.sin();\n    complex3.INF.pow(Double.POSITIVE_INFINITY);\n    complex1.multiply(complex0);\n    complex3.reciprocal();\n    complex2.getField();\n    complex0.getArgument();\n    complex1.add(0.5051454305648804);\n}",
    "testName" : "test03232"
  },
  "test02020" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02020() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.I;\n    complex0.I.subtract(complex1);\n    complex0.getField();\n    Complex complex2 = complex0.conjugate();\n    Complex complex3 = complex2.ZERO.subtract(2253.86183);\n    complex2.INF.abs();\n    Object object0 = complex2.readResolve();\n    complex2.equals(object0);\n    complex3.exp();\n    complex3.tan();\n}",
    "testName" : "test02020"
  },
  "test107117" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107117() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.I;\n    complex0.I.subtract(complex1);\n    complex0.getField();\n    Complex complex2 = complex0.conjugate();\n    Complex complex3 = complex2.INF.reciprocal();\n    complex3.ONE.toString();\n    Complex complex4 = complex2.ZERO.subtract(2253.86183);\n    complex2.INF.abs();\n    Object object0 = complex2.readResolve();\n    ((Complex) object0).ONE.divide(Double.POSITIVE_INFINITY);\n    complex2.equals(object0);\n    complex2.I.pow(complex0);\n    Complex complex5 = complex4.exp();\n    complex4.tan();\n    Complex complex6 = complex5.negate();\n    complex6.negate();\n    complex6.acos();\n}",
    "testName" : "test107117"
  },
  "test03747" : {
    "methodSignature" : "public Complex subtract(double subtrahend)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03747() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    complex0.subtract(0.0);\n}",
    "testName" : "test03747"
  },
  "test04959" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04959() throws Throwable {\n    Complex complex0 = new Complex((-2236.84), (-2236.84));\n    Complex complex1 = Complex.valueOf((-2236.84));\n    complex0.INF.abs();\n    Complex complex2 = Complex.valueOf((-2180.971));\n    complex0.abs();\n    Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);\n    complex3.ONE.sinh();\n    complex1.acos();\n    complex2.add(1851.6813594113);\n}",
    "testName" : "test04959"
  },
  "test05767" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05767() throws Throwable {\n    Complex complex0 = new Complex((-4457.8323));\n    Complex complex1 = complex0.I.add((-4457.8323));\n    complex1.I.divide((-1045.278543));\n    Complex complex2 = complex0.atan();\n    complex2.getReal();\n    complex2.sqrt1z();\n    complex0.exp();\n    complex1.getImaginary();\n}",
    "testName" : "test05767"
  },
  "test06979" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06979() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0);\n    complex0.isNaN();\n    Complex complex1 = complex0.subtract(920.47253);\n    complex1.INF.add(0.0);\n    complex1.INF.tan();\n    complex1.hashCode();\n}",
    "testName" : "test06979"
  },
  "test115125" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115125() throws Throwable {\n    Complex complex0 = new Complex(578.16691, 578.16691);\n    Complex complex1 = complex0.INF.divide(578.16691);\n    Complex complex2 = complex1.ONE.multiply(2553);\n    complex2.NaN.tan();\n    complex0.toString();\n    complex0.isNaN();\n    Complex complex3 = complex1.atan();\n    complex3.nthRoot(2553);\n    Complex complex4 = Complex.valueOf((-6.292835950782));\n    Complex complex5 = complex1.multiply(complex4);\n    Complex complex6 = complex5.INF.subtract((-6.292835950782));\n    Complex complex7 = complex4.add(complex5);\n    complex7.NaN.reciprocal();\n    complex0.multiply(complex2);\n    complex0.asin();\n    complex6.tan();\n}",
    "testName" : "test115125"
  },
  "test094104" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094104() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.INF;\n    complex0.ZERO.subtract(complex1);\n    complex0.cos();\n    complex0.ZERO.getArgument();\n    complex0.atan();\n    complex0.asin();\n}",
    "testName" : "test094104"
  },
  "test07383" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07383() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    Complex complex1 = complex0.INF.tan();\n    complex1.NaN.multiply(complex0);\n    Complex complex2 = Complex.NaN;\n    Complex complex3 = complex2.ZERO.multiply(0.0);\n    complex2.ONE.add(complex0);\n    complex0.NaN.add(complex2);\n    Complex complex4 = complex0.I.add(0.0);\n    Complex complex5 = complex0.cosh();\n    complex2.ZERO.tanh();\n    Complex complex6 = complex5.ZERO.multiply((-747));\n    complex6.ZERO.sinh();\n    Complex complex7 = complex5.acos();\n    Complex complex8 = complex7.I.multiply(37);\n    complex8.INF.toString();\n    complex4.divide(complex7);\n    complex3.add(complex0);\n    complex7.exp();\n}",
    "testName" : "test07383"
  },
  "test08595" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08595() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.ONE.sqrt1z();\n    Complex complex2 = complex1.ZERO.tanh();\n    complex1.sqrt();\n    Complex complex3 = Complex.valueOf(0.0, (-881.4961392311019));\n    complex0.I.readResolve();\n    Complex.valueOf(2.0, 1685.078963);\n    complex1.I.createComplex((-1841.092649813), 0.0);\n    Complex complex4 = complex0.divide(complex3);\n    Complex complex5 = complex2.divide(0.0);\n    complex5.NaN.sinh();\n    complex4.subtract(complex0);\n    complex1.toString();\n}",
    "testName" : "test08595"
  },
  "test04151" : {
    "methodSignature" : "public Complex cosh()",
    "methodName" : "cosh",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04151() throws Throwable {\n    Complex complex0 = new Complex(2.0, 1.4380402565002441);\n    Complex complex1 = new Complex(1.4380402565002441, 1.4380402565002441);\n    Complex complex2 = complex0.pow(complex1);\n    Complex complex3 = Complex.ONE;\n    complex2.subtract(complex3);\n    complex0.divide(complex1);\n    complex0.NaN.conjugate();\n    complex0.negate();\n    complex2.cosh();\n}",
    "testName" : "test04151"
  },
  "test0022" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    Complex complex0 = new Complex(2.0, 2.0);\n    Complex complex1 = new Complex(2.0);\n    Complex complex2 = Complex.ZERO;\n    complex1.ZERO.getField();\n    Complex complex3 = complex1.add(0.0);\n    complex3.I.toString();\n    Complex complex4 = complex1.INF.log();\n    complex2.INF.readResolve();\n    complex1.isInfinite();\n    Complex complex5 = complex0.exp();\n    Complex complex6 = complex5.NaN.createComplex(1852.1590224026, 1852.1590224026);\n    Complex complex7 = Complex.valueOf(2.0, 2776.0);\n    complex5.acos();\n    complex7.ONE.sin();\n    Complex complex8 = complex7.sqrt1z();\n    Complex complex9 = complex8.atan();\n    complex8.cosh();\n    complex8.isInfinite();\n    complex1.isNaN();\n    complex6.reciprocal();\n    Complex complex10 = Complex.valueOf(0.0);\n    complex9.equals(complex10);\n    complex4.sqrt();\n    complex6.exp();\n}",
    "testName" : "test0022"
  },
  "test06171" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06171() throws Throwable {\n    Complex complex0 = new Complex((-189.44), 0.3870677351951599);\n    complex0.NaN.cos();\n    Complex.valueOf((-189.44));\n    Complex complex1 = complex0.sinh();\n    complex0.isInfinite();\n    complex0.conjugate();\n    complex0.getImaginary();\n    complex1.add(3615.8);\n}",
    "testName" : "test06171"
  },
  "test08999" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08999() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.valueOf(0.0);\n    Complex complex2 = complex0.add(complex1);\n    complex0.sqrt();\n    complex2.cos();\n}",
    "testName" : "test08999"
  },
  "test04555" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws NotPositiveException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04555() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.cos();\n    Complex complex1 = complex0.ONE.acos();\n    complex1.INF.nthRoot(0);\n}",
    "testName" : "test04555"
  },
  "test07787" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07787() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.nthRoot(1);\n    complex0.NaN.getField();\n    Complex complex1 = complex0.pow(0.0);\n    complex1.NaN.sqrt();\n    complex1.INF.abs();\n    complex0.acos();\n}",
    "testName" : "test07787"
  },
  "test102112" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws NotPositiveException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102112() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.negate();\n    complex0.NaN.hashCode();\n    complex0.ONE.cosh();\n    complex0.ZERO.tan();\n    Complex complex1 = complex0.NaN.cos();\n    complex1.INF.hashCode();\n    complex0.nthRoot((-867));\n}",
    "testName" : "test102112"
  },
  "test05363" : {
    "methodSignature" : "protected final Object readResolve()",
    "methodName" : "readResolve",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05363() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.log();\n    Complex complex2 = complex0.exp();\n    complex2.multiply(complex1);\n    Complex complex3 = complex0.exp();\n    Complex complex4 = complex3.negate();\n    Complex complex5 = complex3.multiply(981305269);\n    Complex complex6 = complex3.atan();\n    Complex complex7 = complex4.add((double) 981305269);\n    Complex complex8 = complex7.acos();\n    Complex complex9 = complex4.multiply(981305269);\n    complex9.NaN.getArgument();\n    complex7.toString();\n    complex2.equals(complex5);\n    Complex complex10 = complex6.exp();\n    complex10.getField();\n    Complex complex11 = complex3.tanh();\n    complex11.I.cosh();\n    complex11.NaN.divide(Double.NaN);\n    complex11.log();\n    Complex complex12 = complex8.add(complex1);\n    complex12.readResolve();\n}",
    "testName" : "test05363"
  },
  "test06575" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06575() throws Throwable {\n    Complex complex0 = new Complex(0.0);\n    Complex complex1 = complex0.negate();\n    complex1.ONE.hashCode();\n    Complex complex2 = complex0.pow(0.0);\n    Complex complex3 = complex0.createComplex(2454.90173, 2454.90173);\n    Complex complex4 = complex3.NaN.sqrt();\n    complex0.getImaginary();\n    complex0.add(2454.90173);\n    complex2.multiply(0.0);\n    complex4.isNaN();\n}",
    "testName" : "test06575"
  },
  "test01313" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    Complex complex0 = new Complex((-431.812708092), (-431.812708092));\n    Complex complex1 = complex0.ZERO.acos();\n    complex1.pow(complex0);\n    Complex complex2 = complex0.createComplex((-431.812708092), (-2359.1068));\n    Complex complex3 = complex0.tan();\n    Complex complex4 = complex0.NaN.divide((-2359.1068));\n    complex3.isInfinite();\n    Complex complex5 = complex0.reciprocal();\n    complex0.NaN.readResolve();\n    Complex complex6 = Complex.valueOf((-431.812708092), (-2359.1068));\n    Complex complex7 = complex6.ONE.sinh();\n    complex7.toString();\n    complex5.NaN.conjugate();\n    complex2.getArgument();\n    complex5.I.multiply((-4223));\n    Complex complex8 = complex2.subtract(complex5);\n    Complex complex9 = complex0.multiply((-2487));\n    Complex complex10 = complex5.ONE.acos();\n    Complex complex11 = complex9.I.multiply(0.0);\n    complex11.ZERO.abs();\n    complex9.hashCode();\n    complex8.isNaN();\n    complex3.isNaN();\n    Complex complex12 = complex10.sinh();\n    Complex complex13 = complex5.subtract((-2359.1068));\n    Complex complex14 = complex13.INF.createComplex((-1849.561), 973.4118501601226);\n    complex1.cosh();\n    complex12.sqrt();\n    complex9.divide(0.0);\n    complex3.divide(complex4);\n    complex14.tan();\n}",
    "testName" : "test01313"
  },
  "test02525" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02525() throws Throwable {\n    Complex complex0 = new Complex((-1161.507980828377), 2.0);\n    complex0.I.add(0.0);\n    complex0.pow((Complex) null);\n}",
    "testName" : "test02525"
  },
  "test01717" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01717() throws Throwable {\n    Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);\n    Complex complex1 = complex0.sin();\n    Complex complex2 = complex0.NaN.divide(complex1);\n    complex2.INF.multiply(Double.POSITIVE_INFINITY);\n    Complex complex3 = complex2.createComplex(192.1345, Double.POSITIVE_INFINITY);\n    complex3.I.acos();\n    Complex complex4 = Complex.valueOf(0.0);\n    Complex complex5 = complex4.ONE.divide((-264.283023385));\n    complex0.toString();\n    Complex complex6 = complex4.cos();\n    complex5.nthRoot(1);\n    complex6.multiply(2334);\n    Complex complex7 = complex4.log();\n    complex7.conjugate();\n}",
    "testName" : "test01717"
  },
  "test08191" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08191() throws Throwable {\n    Complex complex0 = new Complex((-2289.0505632029985), (-36.04));\n    Complex complex1 = complex0.subtract((-763.75318048848));\n    Complex complex2 = complex0.tanh();\n    Complex complex3 = complex2.multiply(complex1);\n    Complex complex4 = complex2.asin();\n    complex4.ZERO.readResolve();\n    complex1.tanh();\n    complex3.createComplex((-2289.0505632029985), (-36.04));\n    complex4.multiply(complex2);\n}",
    "testName" : "test08191"
  },
  "test099109" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099109() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.sinh();\n    complex0.tanh();\n}",
    "testName" : "test099109"
  },
  "test116126" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116126() throws Throwable {\n    Complex complex0 = new Complex((-464.584278398));\n    Complex complex1 = complex0.ZERO.multiply((-464.584278398));\n    Complex complex2 = complex1.I.divide(complex0);\n    Complex complex3 = complex2.sinh();\n    Complex complex4 = complex2.NaN.cos();\n    complex4.I.hashCode();\n    complex2.ONE.toString();\n    Complex complex5 = complex0.cos();\n    Complex.valueOf(0.0, (-464.584278398));\n    Complex complex6 = complex5.ZERO.tanh();\n    complex6.I.nthRoot(828);\n    complex0.nthRoot(817);\n    Complex complex7 = complex0.exp();\n    complex5.NaN.sin();\n    Complex complex8 = complex7.reciprocal();\n    complex8.I.createComplex(828, (-464.584278398));\n    complex3.ZERO.pow(0.0);\n    complex5.ONE.sqrt1z();\n    Complex complex9 = complex5.divide(Double.NaN);\n    complex3.INF.pow(Double.NaN);\n    complex9.subtract(complex6);\n    complex7.getReal();\n    complex3.atan();\n    complex1.equals(complex2);\n}",
    "testName" : "test116126"
  },
  "test02929" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02929() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = Complex.INF;\n    complex0.NaN.add(0.0);\n    Complex complex2 = complex0.ONE.pow(complex1);\n    Complex complex3 = complex2.tanh();\n    complex3.acos();\n    Complex complex4 = complex3.sinh();\n    complex4.NaN.readResolve();\n    Complex complex5 = complex0.sqrt();\n    Complex complex6 = complex5.subtract(0.0);\n    Complex complex7 = complex0.acos();\n    complex1.isInfinite();\n    Complex complex8 = complex1.conjugate();\n    Complex complex9 = complex8.I.reciprocal();\n    complex6.I.divide(1488.2062);\n    complex0.getArgument();\n    complex7.ZERO.atan();\n    complex1.nthRoot(3371);\n    complex7.multiply(complex0);\n    Complex complex10 = complex1.asin();\n    complex10.INF.pow(complex6);\n    Complex complex11 = complex6.exp();\n    complex11.I.sin();\n    complex0.NaN.multiply(0.0);\n    complex11.NaN.add((-20.0));\n    complex6.abs();\n    complex5.pow(complex0);\n    Complex complex12 = complex5.tan();\n    complex12.NaN.conjugate();\n    complex9.atan();\n    complex1.equals(complex7);\n}",
    "testName" : "test02929"
  },
  "test091101" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws NotPositiveException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091101() throws Throwable {\n    Complex complex0 = new Complex(0.0);\n    complex0.nthRoot((-1798));\n}",
    "testName" : "test091101"
  },
  "test0033" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    Complex complex0 = new Complex(2.0, 2.0);\n    Complex complex1 = new Complex(2.0);\n    Complex complex2 = complex0.multiply(complex1);\n    complex1.ZERO.getField();\n    Complex complex3 = complex1.add(0.0);\n    complex3.I.toString();\n    complex1.INF.log();\n    complex2.INF.readResolve();\n    complex1.isInfinite();\n    Complex complex4 = complex0.exp();\n    Complex complex5 = complex4.NaN.createComplex(1852.1590224026, 1852.1590224026);\n    Complex complex6 = Complex.valueOf(2.0, 2776.0);\n    complex4.acos();\n    Complex complex7 = Complex.ZERO;\n    Complex complex8 = complex6.sqrt1z();\n    Complex complex9 = Complex.I;\n    complex8.cosh();\n    complex8.isInfinite();\n    complex1.isNaN();\n    complex5.reciprocal();\n    Complex complex10 = Complex.valueOf(0.0);\n    complex9.equals(complex10);\n}",
    "testName" : "test0033"
  },
  "test03333" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03333() throws Throwable {\n    Complex complex0 = Complex.valueOf((-1009.7903));\n    Complex complex1 = complex0.conjugate();\n    Complex complex2 = complex1.atan();\n    complex0.conjugate();\n    Complex complex3 = complex1.I.reciprocal();\n    complex3.hashCode();\n    complex1.I.hashCode();\n    complex3.hashCode();\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex2.I.multiply((-2794));\n    complex3.ZERO.nthRoot(1);\n    Complex complex6 = complex0.cos();\n    complex6.I.add(complex3);\n    Complex complex7 = complex2.subtract(complex0);\n    complex7.ONE.subtract(complex4);\n    Complex complex8 = complex1.multiply(1);\n    complex3.nthRoot(1);\n    complex0.subtract(complex5);\n    complex2.add(complex3);\n    complex1.sqrt();\n    complex8.hashCode();\n    complex4.multiply(complex8);\n}",
    "testName" : "test03333"
  },
  "test105115" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105115() throws Throwable {\n    Complex complex0 = new Complex((-1396.9305028891006));\n    complex0.nthRoot(1);\n    Complex complex1 = complex0.asin();\n    Complex complex2 = complex1.INF.multiply(complex0);\n    Complex complex3 = complex0.atan();\n    complex3.ZERO.sinh();\n    Complex complex4 = complex3.pow(1.0);\n    complex4.I.sqrt1z();\n    complex2.NaN.sin();\n    Complex.valueOf((-1396.9305028891006));\n    Complex complex5 = complex4.I.sqrt1z();\n    Complex complex6 = complex0.tanh();\n    complex6.ZERO.abs();\n    Complex complex7 = complex3.INF.conjugate();\n    complex1.ZERO.add(3337.5729587);\n    Complex complex8 = complex7.ZERO.tan();\n    complex8.I.log();\n    Complex complex9 = complex4.sqrt();\n    complex9.INF.pow(complex5);\n    complex0.tan();\n    complex2.getArgument();\n    Complex complex10 = complex9.multiply((-1396.9305028891006));\n    Complex complex11 = complex6.asin();\n    Complex complex12 = complex11.reciprocal();\n    complex12.I.nthRoot(1);\n    complex10.multiply((-527.0));\n}",
    "testName" : "test105115"
  },
  "test02121" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02121() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.ZERO.readResolve();\n    complex0.getField();\n    Complex complex1 = complex0.createComplex((-640.598), 2772.2);\n    Complex complex2 = complex1.atan();\n    complex1.ONE.tan();\n    complex1.createComplex(1608.5279, (-620.0947));\n    Complex complex3 = complex1.tanh();\n    Complex complex4 = complex3.NaN.negate();\n    complex4.ONE.abs();\n    Complex complex5 = complex2.add(1608.5279);\n    Complex complex6 = complex5.I.log();\n    complex5.log();\n    complex6.acos();\n    Complex.valueOf((-620.0947), (-620.0947));\n    complex1.getField();\n}",
    "testName" : "test02121"
  },
  "test03848" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03848() throws Throwable {\n    Complex complex0 = Complex.valueOf(2.0, 2.0);\n    complex0.abs();\n    Complex complex1 = Complex.valueOf(0.0, (-2532.4582014));\n    complex1.ZERO.nthRoot(1);\n    Complex complex2 = complex0.subtract(890.0);\n    Complex complex3 = complex2.tan();\n    Complex complex4 = complex3.pow(complex2);\n    Complex complex5 = complex2.reciprocal();\n    complex2.I.atan();\n    complex3.cosh();\n    Complex complex6 = complex0.I.tanh();\n    Complex complex7 = complex5.divide((-2324.9947));\n    complex7.INF.exp();\n    complex3.ONE.subtract((-2838.56312075));\n    complex3.isInfinite();\n    Complex complex8 = complex0.exp();\n    complex4.pow((-853.2));\n    Complex complex9 = complex0.multiply(complex6);\n    complex9.ZERO.conjugate();\n    Complex complex10 = complex8.pow(complex2);\n    Complex complex11 = Complex.valueOf(2.8284271247461903, 154.29284748061);\n    complex10.multiply(complex11);\n}",
    "testName" : "test03848"
  },
  "test04656" : {
    "methodSignature" : "protected Complex createComplex(double realPart, double imaginaryPart)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04656() throws Throwable {\n    Complex complex0 = new Complex(0.0, 5.203033137154554E-8);\n    Complex complex1 = complex0.ONE.exp();\n    Complex complex2 = complex1.I.negate();\n    complex2.NaN.multiply(5.203033137154554E-8);\n    complex0.nthRoot(775);\n    complex1.getImaginary();\n    Complex complex3 = complex1.pow(complex2);\n    Object object0 = complex3.readResolve();\n    complex2.equals(object0);\n    complex0.pow(complex1);\n    complex3.createComplex(0.0, 1.0);\n}",
    "testName" : "test04656"
  },
  "test05868" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05868() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.INF;\n    complex1.ONE.log();\n    Complex.valueOf(0.0);\n    Complex complex2 = complex0.add(complex1);\n    complex2.getImaginary();\n}",
    "testName" : "test05868"
  },
  "test113123" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113123() throws Throwable {\n    Complex complex0 = new Complex(79.1515712, (-20.0));\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex0.ONE.sinh();\n    complex1.I.sqrt1z();\n    Complex complex3 = complex2.INF.divide(0.0);\n    complex1.getImaginary();\n    complex0.getField();\n    complex2.getArgument();\n    Complex complex4 = complex1.sqrt1z();\n    Complex complex5 = complex4.NaN.asin();\n    Complex complex6 = complex5.INF.acos();\n    Complex complex7 = complex1.sqrt1z();\n    complex7.hashCode();\n    complex0.hashCode();\n    complex7.tanh();\n    complex0.add(complex2);\n    Complex complex8 = complex6.add((-1.0));\n    complex8.subtract(complex3);\n    complex2.isInfinite();\n    complex7.exp();\n}",
    "testName" : "test113123"
  },
  "test096106" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096106() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.ONE.hashCode();\n    Complex complex1 = Complex.NaN;\n    complex0.ONE.readResolve();\n    Complex complex2 = complex0.pow(complex1);\n    complex1.ONE.divide(complex2);\n    Complex complex3 = complex1.log();\n    Complex complex4 = complex3.NaN.cos();\n    complex3.I.log();\n    complex3.hashCode();\n    complex3.readResolve();\n    complex4.negate();\n    complex4.isInfinite();\n}",
    "testName" : "test096106"
  },
  "test06272" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06272() throws Throwable {\n    Complex complex0 = Complex.valueOf(809.662269086, (-2164.175568227));\n    complex0.tan();\n}",
    "testName" : "test06272"
  },
  "test07484" : {
    "methodSignature" : "protected Complex createComplex(double realPart, double imaginaryPart)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07484() throws Throwable {\n    Complex complex0 = new Complex(0.0, Double.NaN);\n    Complex complex1 = complex0.divide(Double.NaN);\n    Complex complex2 = complex1.I.reciprocal();\n    Complex complex3 = complex1.pow(complex0);\n    Complex complex4 = complex3.sinh();\n    complex4.I.createComplex(0.0, 0.0);\n    complex1.NaN.pow(0.0);\n    complex4.readResolve();\n    complex2.getArgument();\n    complex4.cosh();\n    complex3.createComplex(0.0, 0.0);\n}",
    "testName" : "test07484"
  },
  "test0044" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws NotPositiveException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    Complex complex0 = new Complex((-440.88));\n    Complex.valueOf((-3972.416), (-20.0));\n    Complex complex1 = complex0.add((-3972.416));\n    complex1.NaN.atan();\n    Complex complex2 = complex1.ZERO.sqrt();\n    int int0 = 1073741824;\n    Complex complex3 = complex2.multiply(complex1);\n    complex2.NaN.cos();\n    Complex complex4 = complex3.ONE.add(complex2);\n    double double0 = (-3350.13657);\n    complex4.pow((-3350.13657));\n    // Undeclared exception!\n    complex0.nthRoot(1073741824);\n}",
    "testName" : "test0044"
  },
  "test05060" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05060() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = new Complex(0.0);\n    complex0.subtract(complex1);\n    complex0.readResolve();\n    complex0.sin();\n}",
    "testName" : "test05060"
  },
  "test08292" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08292() throws Throwable {\n    Complex complex0 = new Complex(0.11343331634998322);\n    Complex complex1 = Complex.valueOf((-669.88619), (-669.88619));\n    complex0.ZERO.multiply(complex1);\n    complex0.ONE.add((-119.71));\n    complex0.divide((-284.5248018489));\n    complex0.sinh();\n}",
    "testName" : "test08292"
  },
  "test03441" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03441() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n    complex0.add(complex5);\n    Complex complex12 = complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(Double.NaN, 5627.840250944935);\n    Complex complex13 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    Complex complex14 = complex13.subtract(complex8);\n    Complex complex15 = complex13.multiply((-61.25461971));\n    complex2.createComplex(0.0, (-1506.638287109));\n    complex8.multiply(3140);\n    Complex complex16 = complex9.reciprocal();\n    List<Complex> list0 = complex15.nthRoot(3140);\n    Complex complex17 = Complex.valueOf(Double.NaN);\n    complex12.pow(complex8);\n}",
    "testName" : "test03441"
  },
  "test06676" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06676() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.ONE.add(complex1);\n    complex2.subtract(complex0);\n    Complex complex3 = complex0.ZERO.reciprocal();\n    complex0.nthRoot(1);\n    Complex complex4 = complex3.ONE.conjugate();\n    complex4.tanh();\n    complex0.sqrt1z();\n    complex3.divide(complex0);\n    complex1.sqrt();\n}",
    "testName" : "test06676"
  },
  "test100110" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100110() throws Throwable {\n    Complex complex0 = new Complex((-3491.067328733715));\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex1.NaN.sinh();\n    complex2.ZERO.sqrt();\n    complex0.INF.tanh();\n    complex0.getImaginary();\n    complex1.hashCode();\n}",
    "testName" : "test100110"
  },
  "test03442" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03442() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n    complex0.add(complex5);\n    Complex complex12 = complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(Double.NaN, 5627.840250944935);\n    Complex complex13 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    Complex complex14 = complex13.subtract(complex8);\n    Complex complex15 = complex13.multiply((-61.25461971));\n    complex2.createComplex(0.0, (-1506.638287109));\n    complex8.multiply(3140);\n    Complex complex16 = complex9.reciprocal();\n    List<Complex> list0 = complex15.nthRoot(3140);\n    Complex complex17 = Complex.valueOf(Double.NaN);\n    complex12.pow(complex8);\n    complex8.getReal();\n}",
    "testName" : "test03442"
  },
  "test07888" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07888() throws Throwable {\n    Complex complex0 = Complex.valueOf(4346.7092332);\n    complex0.conjugate();\n    Complex.valueOf(4346.7092332, 1601.13460539);\n    Complex complex1 = complex0.acos();\n    complex1.multiply(complex0);\n}",
    "testName" : "test07888"
  },
  "test03443" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03443() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n    complex0.add(complex5);\n    Complex complex12 = complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(Double.NaN, 5627.840250944935);\n    Complex complex13 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    Complex complex14 = complex13.subtract(complex8);\n    Complex complex15 = complex13.multiply((-61.25461971));\n    complex2.createComplex(0.0, (-1506.638287109));\n    complex8.multiply(3140);\n    Complex complex16 = complex9.reciprocal();\n    List<Complex> list0 = complex15.nthRoot(3140);\n    Complex complex17 = Complex.valueOf(Double.NaN);\n    complex12.pow(complex8);\n    complex12.getReal();\n}",
    "testName" : "test03443"
  },
  "test03444" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03444() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n    complex0.add(complex5);\n    Complex complex12 = complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(Double.NaN, 5627.840250944935);\n    Complex complex13 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    Complex complex14 = complex13.subtract(complex8);\n    Complex complex15 = complex13.multiply((-61.25461971));\n    complex2.createComplex(0.0, (-1506.638287109));\n    complex8.multiply(3140);\n    Complex complex16 = complex9.reciprocal();\n    List<Complex> list0 = complex15.nthRoot(3140);\n    Complex complex17 = Complex.valueOf(Double.NaN);\n    complex12.pow(complex8);\n    complex12.equals((Object) complex16);\n}",
    "testName" : "test03444"
  },
  "test108118" : {
    "methodSignature" : "public Complex reciprocal()",
    "methodName" : "reciprocal",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108118() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.add(complex1);\n    Complex complex3 = complex2.ONE.acos();\n    Complex complex4 = complex3.NaN.sqrt1z();\n    complex3.ZERO.getField();\n    Complex complex5 = complex1.cosh();\n    complex2.nthRoot(37);\n    Complex complex6 = complex5.divide(1795.1766391074);\n    Complex complex7 = complex2.reciprocal();\n    Complex complex8 = complex4.sqrt();\n    Complex complex9 = complex1.atan();\n    Complex complex10 = complex9.ZERO.cosh();\n    Complex complex11 = complex2.subtract(complex6);\n    Complex complex12 = complex11.tan();\n    complex12.tanh();\n    complex6.sin();\n    Complex.valueOf((double) 37, (double) 37);\n    complex10.ONE.nthRoot(37);\n    Complex complex13 = complex7.subtract(2.1628672925745152E-105);\n    Complex.valueOf(1.5704360964732835);\n    complex9.multiply(37);\n    complex8.abs();\n    complex7.conjugate();\n    complex10.subtract(complex1);\n    complex12.pow(complex2);\n    Complex.valueOf((double) 37, 204.852554117);\n    complex13.asin();\n    complex10.reciprocal();\n}",
    "testName" : "test108118"
  },
  "test04252" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04252() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.valueOf(410.74671926924213);\n    complex0.ZERO.multiply(617.3);\n    Complex complex2 = complex1.ONE.createComplex(410.74671926924213, (-3737.74531));\n    complex2.I.divide(1330.447275424);\n    Complex complex3 = complex1.divide(410.74671926924213);\n    complex3.acos();\n    complex0.multiply(complex1);\n    complex2.cos();\n}",
    "testName" : "test04252"
  },
  "test05464" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05464() throws Throwable {\n    Complex complex0 = Complex.valueOf((-2350.488384));\n    complex0.negate();\n    Complex complex1 = complex0.ONE.cosh();\n    complex1.ZERO.divide((-1.0));\n    Complex complex2 = complex0.NaN.sinh();\n    Complex complex3 = complex1.NaN.divide(complex2);\n    Complex complex4 = complex3.ZERO.asin();\n    complex3.nthRoot(1);\n    Complex complex5 = complex0.atan();\n    Complex complex6 = complex5.ZERO.sqrt1z();\n    complex6.tanh();\n    complex5.NaN.readResolve();\n    complex0.cosh();\n    Complex complex7 = complex5.tan();\n    complex1.ONE.pow(complex2);\n    Complex complex8 = complex1.divide(complex7);\n    complex8.toString();\n    complex2.isInfinite();\n    complex4.getField();\n}",
    "testName" : "test05464"
  },
  "test03440" : {
    "methodSignature" : "public static Complex valueOf(double realPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03440() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n    complex0.add(complex5);\n    Complex complex12 = complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(Double.NaN, 5627.840250944935);\n    Complex complex13 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    Complex complex14 = complex13.subtract(complex8);\n    Complex complex15 = complex13.multiply((-61.25461971));\n    complex2.createComplex(0.0, (-1506.638287109));\n    complex8.multiply(3140);\n    Complex complex16 = complex9.reciprocal();\n    List<Complex> list0 = complex15.nthRoot(3140);\n    Complex complex17 = Complex.valueOf(Double.NaN);\n}",
    "testName" : "test03440"
  },
  "test08696" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08696() throws Throwable {\n    Complex complex0 = new Complex(8.598369704466743E-136);\n    complex0.ONE.multiply((-1));\n    Complex complex1 = complex0.exp();\n    complex1.ZERO.subtract((-84.230041));\n    complex1.getField();\n}",
    "testName" : "test08696"
  },
  "test03438" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03438() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n    complex0.add(complex5);\n    Complex complex12 = complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(Double.NaN, 5627.840250944935);\n    Complex complex13 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    Complex complex14 = complex13.subtract(complex8);\n    Complex complex15 = complex13.multiply((-61.25461971));\n    complex2.createComplex(0.0, (-1506.638287109));\n    complex8.multiply(3140);\n    Complex complex16 = complex9.reciprocal();\n    List<Complex> list0 = complex15.nthRoot(3140);\n    complex15.getImaginary();\n}",
    "testName" : "test03438"
  },
  "test03434" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03434() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n}",
    "testName" : "test03434"
  },
  "test02626" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02626() throws Throwable {\n    Complex complex0 = new Complex(0.0, 6.283185307179586);\n    Complex complex1 = complex0.sqrt1z();\n    Complex complex2 = complex0.pow(6.283185307179586);\n    complex2.hashCode();\n    complex0.isNaN();\n    complex2.getField();\n    complex0.getImaginary();\n    Complex complex3 = complex0.ONE.acos();\n    complex2.getReal();\n    complex1.isNaN();\n    Complex complex4 = complex2.atan();\n    Complex complex5 = complex4.createComplex(6.283185307179586, 1616.5833721);\n    complex5.hashCode();\n    complex5.cos();\n    complex3.sqrt1z();\n    complex5.isNaN();\n}",
    "testName" : "test02626"
  },
  "test03435" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03435() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n}",
    "testName" : "test03435"
  },
  "test03436" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03436() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n    complex0.add(complex5);\n    Complex complex12 = complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(Double.NaN, 5627.840250944935);\n    Complex complex13 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    Complex complex14 = complex13.subtract(complex8);\n}",
    "testName" : "test03436"
  },
  "test01414" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    Complex complex0 = new Complex((-54.752), (-1305.981));\n    Complex complex1 = Complex.valueOf((-54.752), Double.POSITIVE_INFINITY);\n    complex1.cosh();\n    Complex complex2 = complex0.NaN.tan();\n    complex2.INF.hashCode();\n    Complex complex3 = complex0.reciprocal();\n    Complex complex4 = complex0.pow(complex2);\n    complex4.NaN.hashCode();\n    Complex complex5 = complex2.I.sqrt();\n    Complex complex6 = complex3.pow((-54.752));\n    complex3.I.sinh();\n    Complex complex7 = complex6.ZERO.conjugate();\n    complex7.ZERO.subtract(complex3);\n    complex0.divide(complex2);\n    Complex complex8 = complex3.sqrt1z();\n    complex8.ONE.conjugate();\n    complex8.ZERO.pow(complex4);\n    Complex complex9 = complex6.acos();\n    Complex.valueOf((-1305.981), (-54.752));\n    Complex complex10 = complex0.pow(70.532908);\n    Complex complex11 = complex0.sinh();\n    Complex complex12 = complex9.divide(complex10);\n    complex12.INF.getArgument();\n    complex5.getField();\n    complex9.cos();\n    complex12.asin();\n    Complex complex13 = complex5.multiply(complex11);\n    complex11.getReal();\n    complex13.sinh();\n}",
    "testName" : "test01414"
  },
  "test03437" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03437() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    double double0 = complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    Complex complex10 = complex9.INF.pow(complex6);\n    Complex complex11 = complex9.NaN.acos();\n    complex4.INF.toString();\n    double double1 = complex0.abs();\n    complex0.add(complex5);\n    Complex complex12 = complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(Double.NaN, 5627.840250944935);\n    Complex complex13 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    Complex complex14 = complex13.subtract(complex8);\n    Complex complex15 = complex13.multiply((-61.25461971));\n    complex2.createComplex(0.0, (-1506.638287109));\n    complex8.multiply(3140);\n    Complex complex16 = complex9.reciprocal();\n    complex16.getReal();\n}",
    "testName" : "test03437"
  },
  "test093103" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093103() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = new Complex((-197.1425765927), (-1358.467856));\n    complex0.NaN.subtract(complex1);\n    complex0.I.multiply(1.2085883617401123);\n    complex0.asin();\n}",
    "testName" : "test093103"
  },
  "test114124" : {
    "methodSignature" : "protected Complex createComplex(double realPart, double imaginaryPart)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114124() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.multiply(1313);\n    complex0.nthRoot(3514);\n    complex0.nthRoot(3514);\n    Complex complex2 = complex1.sin();\n    Complex complex3 = complex2.ONE.atan();\n    complex3.ZERO.divide(complex1);\n    complex2.ZERO.log();\n    Complex complex4 = complex0.asin();\n    Complex complex5 = complex4.multiply(0.0);\n    complex5.ONE.exp();\n    complex5.NaN.pow(0.0);\n    complex4.toString();\n    Complex complex6 = complex2.asin();\n    Complex.valueOf((double) 1313);\n    complex6.createComplex(1313, (-2394.18));\n}",
    "testName" : "test114124"
  },
  "test07080" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07080() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.valueOf((-20.0), (-20.0));\n    complex0.multiply(complex1);\n}",
    "testName" : "test07080"
  },
  "test01818" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01818() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.pow((-1748.38));\n    complex0.exp();\n    complex1.readResolve();\n    Complex complex2 = complex0.sin();\n    complex2.pow(complex1);\n    complex2.sqrt1z();\n    Complex complex3 = complex0.multiply(complex1);\n    complex3.INF.divide((-4323.12239188411));\n    complex3.pow(complex1);\n}",
    "testName" : "test01818"
  },
  "test0055" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws NotPositiveException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.divide(1602.95755678);\n    Complex complex2 = complex1.tanh();\n    Complex complex3 = complex2.ONE.tanh();\n    Complex complex4 = complex2.multiply(37);\n    Complex.valueOf(328.766847813523);\n    complex1.equals((Object) null);\n    complex4.INF.hashCode();\n    complex1.INF.negate();\n    complex4.multiply(0.0);\n    Complex complex5 = complex4.sqrt1z();\n    Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 37);\n    complex3.atan();\n    Complex.valueOf(0.0, 0.0);\n    complex5.conjugate();\n    Complex complex7 = Complex.valueOf(328.766847813523);\n    complex7.ZERO.nthRoot((-2651));\n}",
    "testName" : "test0055"
  },
  "test103113" : {
    "methodSignature" : "public static Complex valueOf(double realPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103113() throws Throwable {\n    Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);\n    Complex complex1 = complex0.ZERO.tan();\n    Complex complex2 = complex0.ZERO.reciprocal();\n    Complex complex3 = complex0.NaN.cosh();\n    complex3.INF.toString();\n    Complex complex4 = complex3.INF.add(complex0);\n    Complex complex5 = complex0.asin();\n    Complex complex6 = complex3.I.add(complex1);\n    complex5.I.hashCode();\n    Complex complex7 = Complex.I;\n    Complex.valueOf(0.0);\n    complex1.pow(complex7);\n    Complex complex8 = complex4.sqrt1z();\n    complex7.multiply(Double.POSITIVE_INFINITY);\n    complex6.divide(complex4);\n    complex3.subtract(complex8);\n    complex2.sin();\n    Complex.valueOf((-2086.19502705));\n}",
    "testName" : "test103113"
  },
  "test03030" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03030() throws Throwable {\n    Complex complex0 = Complex.valueOf((-879.322541214), 0.0);\n    complex0.ONE.pow(2969.33717141241);\n    complex0.add((Complex) null);\n}",
    "testName" : "test03030"
  },
  "test02222" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02222() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.valueOf(0.2622140049934387);\n    Complex complex2 = complex0.subtract(complex1);\n    Complex complex3 = complex0.divide(0.0);\n    Complex complex4 = complex0.pow(complex3);\n    Complex complex5 = Complex.valueOf(3122.88, 3122.88);\n    complex5.INF.getArgument();\n    Complex complex6 = complex0.cos();\n    Complex complex7 = complex6.NaN.log();\n    complex4.pow(complex3);\n    complex6.nthRoot(1150);\n    complex3.isNaN();\n    complex7.equals(complex0);\n    complex7.getArgument();\n    complex2.tanh();\n}",
    "testName" : "test02222"
  },
  "test01010" : {
    "methodSignature" : "public Complex pow(double x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    Complex complex0 = Complex.valueOf(Double.NaN);\n    Complex complex1 = complex0.subtract(Double.NaN);\n    Complex complex2 = complex1.ZERO.divide(complex0);\n    Complex complex3 = complex0.sin();\n    Complex complex4 = complex0.tanh();\n    complex4.NaN.tan();\n    complex0.INF.getField();\n    complex4.pow(305.07576780617114);\n    Complex complex5 = complex0.cos();\n    complex5.INF.tan();\n    complex3.tan();\n    complex0.cos();\n    complex2.pow(0.6075552701950073);\n}",
    "testName" : "test01010"
  },
  "test05969" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05969() throws Throwable {\n    Complex complex0 = new Complex(79.1515712, (-20.0));\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex0.ONE.sinh();\n    Complex complex3 = complex2.INF.divide(0.0);\n    complex1.getImaginary();\n    complex0.getField();\n    complex2.getArgument();\n    Complex complex4 = complex1.sqrt1z();\n    Complex complex5 = complex4.NaN.asin();\n    Complex complex6 = complex5.INF.acos();\n    Complex complex7 = complex1.sqrt1z();\n    complex7.hashCode();\n    complex0.hashCode();\n    complex7.tanh();\n    complex0.add(complex2);\n    Complex complex8 = complex6.add((-1.0));\n    complex8.subtract(complex3);\n    complex2.isInfinite();\n}",
    "testName" : "test05969"
  },
  "test03545" : {
    "methodSignature" : "public Complex reciprocal()",
    "methodName" : "reciprocal",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03545() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.ONE.reciprocal();\n    complex0.I.getField();\n    complex0.I.subtract(1853.3643);\n    Complex complex1 = Complex.NaN;\n    complex0.equals(complex1);\n    Complex complex2 = Complex.valueOf(0.0, 0.0);\n    Complex complex3 = complex2.INF.subtract((-20.0));\n    Complex complex4 = complex2.sin();\n    Complex complex5 = complex4.ZERO.divide((-20.0));\n    complex5.ONE.add(complex3);\n    complex3.tanh();\n    complex4.reciprocal();\n}",
    "testName" : "test03545"
  },
  "test04757" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04757() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = Complex.ONE;\n    Complex complex2 = complex1.ZERO.pow(complex0);\n    complex2.tan();\n    Complex complex3 = complex0.subtract(complex1);\n    complex3.multiply((Complex) null);\n}",
    "testName" : "test04757"
  },
  "test07989" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07989() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.abs();\n    complex0.toString();\n}",
    "testName" : "test07989"
  },
  "test111121" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111121() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.INF.sqrt();\n    Complex complex2 = complex0.log();\n    Complex complex3 = complex1.NaN.log();\n    Complex complex4 = complex1.add(complex2);\n    Complex complex5 = complex1.divide(5.662033727488754E-22);\n    Complex complex6 = complex5.acos();\n    Complex complex7 = complex0.divide(complex4);\n    Complex complex8 = complex7.INF.log();\n    Complex complex9 = complex1.subtract((-6.1837904549178745E-9));\n    complex9.I.atan();\n    Complex complex10 = complex9.divide(complex6);\n    complex1.add(complex2);\n    Complex complex11 = complex3.sinh();\n    complex11.NaN.multiply((-6.1837904549178745E-9));\n    complex3.exp();\n    complex10.sqrt1z();\n    complex9.pow((-1501.8));\n    complex8.add(3.81131861433539E-8);\n}",
    "testName" : "test111121"
  },
  "test098108" : {
    "methodSignature" : "public static Complex valueOf(double realPart, double imaginaryPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098108() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.ONE.getArgument();\n    complex0.readResolve();\n    complex0.conjugate();\n    complex0.sinh();\n    complex0.add(0.0);\n    complex0.atan();\n    Complex.valueOf(0.0, (-2487.3843));\n}",
    "testName" : "test098108"
  },
  "test03949" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03949() throws Throwable {\n    Complex complex0 = Complex.valueOf((-3422.8));\n    Complex complex1 = complex0.negate();\n    complex1.pow(complex0);\n}",
    "testName" : "test03949"
  },
  "test090100" : {
    "methodSignature" : "public static Complex valueOf(double realPart, double imaginaryPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090100() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.INF.cos();\n    complex0.ZERO.multiply(complex1);\n    complex0.getField();\n    complex1.ONE.getArgument();\n    complex0.getReal();\n    complex0.isInfinite();\n    complex1.readResolve();\n    Complex complex2 = complex1.cosh();\n    complex2.NaN.readResolve();\n    Complex.valueOf(0.0, 0.0);\n}",
    "testName" : "test090100"
  },
  "test05161" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05161() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.ONE.getField();\n    Complex complex1 = complex0.exp();\n    Complex complex2 = complex1.ONE.asin();\n    Complex complex3 = complex1.NaN.acos();\n    complex1.INF.abs();\n    complex0.ZERO.divide(Double.POSITIVE_INFINITY);\n    complex1.tan();\n    Complex complex4 = complex1.ZERO.pow(complex0);\n    Complex complex5 = complex4.INF.pow(complex3);\n    complex5.INF.tanh();\n    Complex complex6 = complex1.INF.atan();\n    complex2.NaN.abs();\n    Complex.valueOf(0.0);\n    Complex complex7 = complex2.multiply(728);\n    Complex complex8 = complex1.pow(complex0);\n    complex7.pow((-2978.708));\n    complex1.isInfinite();\n    complex8.getReal();\n    complex6.subtract((Complex) null);\n}",
    "testName" : "test05161"
  },
  "test06373" : {
    "methodSignature" : "public Complex multiply(final int factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06373() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.tan();\n    complex2.INF.cosh();\n    complex1.I.conjugate();\n    complex2.cos();\n    complex1.divide(0.0);\n    complex1.hashCode();\n    complex1.multiply(730);\n}",
    "testName" : "test06373"
  },
  "test07181" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07181() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.conjugate();\n    complex0.ZERO.multiply(1);\n    complex0.sinh();\n    complex0.isInfinite();\n}",
    "testName" : "test07181"
  },
  "test08393" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08393() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.INF.negate();\n    complex0.ZERO.abs();\n    Complex complex2 = complex1.I.divide((-366.422758));\n    complex0.sin();\n    Complex complex3 = complex2.negate();\n    complex3.reciprocal();\n    complex3.equals(complex1);\n    complex3.add(complex0);\n}",
    "testName" : "test08393"
  },
  "test0066" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.ZERO.log();\n    Complex complex2 = Complex.valueOf(0.0, 1.0812448255518705E-301);\n    Complex complex3 = complex2.NaN.tanh();\n    complex3.ZERO.getField();\n    Complex complex4 = complex0.createComplex((-1019.8015), (-1019.8015));\n    complex4.NaN.getArgument();\n    complex4.I.asin();\n    complex4.INF.conjugate();\n    Complex complex5 = complex2.add(complex0);\n    Complex complex6 = complex2.subtract(0.0);\n    Complex complex7 = new Complex(Double.NaN, 0.0);\n    Complex complex8 = complex7.ZERO.divide(complex5);\n    complex8.I.getField();\n    Complex complex9 = complex1.add(0.0);\n    complex9.INF.toString();\n    Complex complex10 = complex9.add(0.0);\n    complex10.ZERO.multiply((-2323.058664706638));\n    complex9.multiply(complex6);\n    complex4.subtract(Double.NaN);\n    Complex.valueOf(1.0812448255518705E-301, Double.NaN);\n    complex4.asin();\n}",
    "testName" : "test0066"
  },
  "test05565" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05565() throws Throwable {\n    Complex complex0 = new Complex(0.42926812171936035);\n    complex0.isInfinite();\n    Complex complex1 = Complex.INF;\n    complex0.pow(complex1);\n    complex0.isInfinite();\n}",
    "testName" : "test05565"
  },
  "test06777" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06777() throws Throwable {\n    Complex complex0 = Complex.valueOf((-469.23), (-962.625682634));\n    Complex complex1 = complex0.asin();\n    Complex complex2 = complex0.multiply((-2294));\n    Complex complex3 = complex2.pow((-54.03));\n    complex3.INF.tanh();\n    complex3.INF.divide((-54.03));\n    complex3.I.readResolve();\n    complex3.INF.add((-54.03));\n    complex2.abs();\n    Complex complex4 = complex0.add((-469.23));\n    complex4.ONE.toString();\n    complex2.multiply(0.0);\n    complex1.multiply(complex2);\n    complex1.multiply((-469.23));\n}",
    "testName" : "test06777"
  },
  "test07585" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07585() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    complex0.multiply((-1510.16));\n    Complex complex1 = complex0.atan();\n    complex0.subtract(complex1);\n}",
    "testName" : "test07585"
  },
  "test08797" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws NotPositiveException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08797() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.sqrt1z();\n    Complex complex2 = complex1.NaN.cos();\n    Complex complex3 = complex1.atan();\n    complex3.ONE.conjugate();\n    complex1.NaN.toString();\n    Complex complex4 = complex0.createComplex(0.0, 0.0);\n    complex4.NaN.abs();\n    complex0.NaN.abs();\n    complex0.INF.createComplex(0.0, 0.0);\n    complex4.readResolve();\n    complex1.ONE.sqrt();\n    Complex complex5 = complex0.tan();\n    complex5.I.atan();\n    complex5.multiply(complex2);\n    complex1.NaN.toString();\n    complex0.nthRoot((-3728));\n}",
    "testName" : "test08797"
  },
  "test106116" : {
    "methodSignature" : "public static Complex valueOf(double realPart, double imaginaryPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106116() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.valueOf((-0.9999992214047598));\n    complex0.nthRoot(363);\n    Complex complex2 = complex1.subtract(830.62417);\n    Complex complex3 = complex0.pow(830.62417);\n    complex2.INF.subtract((-0.9999992214047598));\n    Complex complex4 = complex3.INF.divide((-2889.9293));\n    Complex complex5 = complex2.ZERO.divide(830.62417);\n    Complex complex6 = complex0.sinh();\n    complex5.INF.createComplex((-0.9999992214047598), 830.62417);\n    complex0.ZERO.negate();\n    Complex complex7 = complex6.I.multiply(363);\n    Complex complex8 = complex7.NaN.negate();\n    complex7.ONE.acos();\n    Complex complex9 = complex2.divide(complex3);\n    Complex complex10 = complex9.reciprocal();\n    complex5.atan();\n    complex4.INF.negate();\n    complex10.NaN.readResolve();\n    complex2.sqrt();\n    Complex complex11 = complex10.reciprocal();\n    complex7.INF.sqrt1z();\n    complex4.pow(505.253642908);\n    Complex complex12 = complex3.log();\n    complex11.add(complex9);\n    complex6.sqrt();\n    complex12.equals(complex8);\n    complex11.asin();\n    Complex.valueOf((-2889.9293), 788.258);\n}",
    "testName" : "test106116"
  },
  "test04353" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04353() throws Throwable {\n    Complex complex0 = new Complex((-3142.95));\n    Complex complex1 = complex0.acos();\n    Complex complex2 = complex1.INF.conjugate();\n    complex0.ZERO.nthRoot(477);\n    Complex complex3 = complex2.INF.exp();\n    Complex complex4 = complex0.sin();\n    Complex complex5 = complex4.multiply(complex0);\n    Complex complex6 = complex1.cos();\n    complex2.toString();\n    Complex complex7 = complex2.negate();\n    complex7.acos();\n    complex7.isInfinite();\n    complex6.getField();\n    Complex complex8 = complex5.pow((-3142.95));\n    complex8.I.nthRoot(477);\n    complex8.getReal();\n    complex1.add((double) 477);\n    complex2.abs();\n    complex1.readResolve();\n    complex4.log();\n    complex7.subtract(Double.POSITIVE_INFINITY);\n    complex8.pow(complex3);\n}",
    "testName" : "test04353"
  },
  "test02323" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02323() throws Throwable {\n    Complex complex0 = Complex.valueOf(5.926057457356852E-43);\n    complex0.INF.sqrt1z();\n    Complex complex1 = Complex.valueOf(0.0, 501.6);\n    complex0.ONE.abs();\n    Complex complex2 = complex0.sqrt1z();\n    complex2.atan();\n    Complex complex3 = complex1.multiply(501.6);\n    complex1.exp();\n    Object object0 = complex3.readResolve();\n    complex0.equals(object0);\n}",
    "testName" : "test02323"
  },
  "test01515" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01515() throws Throwable {\n    Complex complex0 = new Complex(2.0, (-1456.87));\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex0.I.pow(complex1);\n    Complex complex3 = complex0.log();\n    Complex complex4 = complex3.reciprocal();\n    Complex complex5 = complex0.sqrt();\n    Complex complex6 = complex4.sin();\n    Complex complex7 = complex6.ONE.acos();\n    complex3.I.readResolve();\n    complex3.getField();\n    complex5.getReal();\n    complex0.ZERO.conjugate();\n    complex7.isInfinite();\n    complex7.subtract(complex6);\n    Complex complex8 = complex0.multiply(Double.POSITIVE_INFINITY);\n    Complex complex9 = complex8.ONE.multiply(complex6);\n    complex9.multiply(complex8);\n    Complex complex10 = complex6.atan();\n    complex10.NaN.cosh();\n    complex8.I.divide((-3982.60736));\n    complex6.isNaN();\n    complex7.readResolve();\n    complex3.getField();\n    Complex complex11 = complex8.multiply(complex3);\n    complex11.NaN.reciprocal();\n    complex2.acos();\n    complex0.abs();\n}",
    "testName" : "test01515"
  },
  "test095105" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095105() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = complex0.tan();\n    complex1.NaN.createComplex(0.0, 0.0);\n    Complex complex2 = complex1.NaN.divide(complex0);\n    complex2.NaN.abs();\n    complex1.getArgument();\n    complex0.multiply(0.0);\n}",
    "testName" : "test095105"
  },
  "test112122" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112122() throws Throwable {\n    Complex complex0 = new Complex(2.0, 2.0);\n    Complex complex1 = new Complex(2.0);\n    Complex complex2 = complex0.multiply(complex1);\n    complex1.ZERO.getField();\n    Complex complex3 = complex1.add(0.0);\n    complex3.I.toString();\n    complex1.INF.log();\n    complex2.INF.readResolve();\n    complex1.isInfinite();\n    Complex complex4 = complex0.exp();\n    Complex complex5 = complex4.NaN.createComplex(1852.1590224026, 1852.1590224026);\n    Complex complex6 = Complex.valueOf(2.0, 2776.0);\n    complex4.acos();\n    complex6.ONE.sin();\n    Complex complex7 = complex6.sqrt1z();\n    Complex complex8 = complex7.atan();\n    complex7.cosh();\n    complex7.isInfinite();\n    complex1.isNaN();\n    complex5.reciprocal();\n    Complex complex9 = Complex.valueOf(0.0);\n    complex8.equals(complex9);\n}",
    "testName" : "test112122"
  },
  "test02727" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02727() throws Throwable {\n    Complex complex0 = Complex.valueOf(20.0, 463.610560731626);\n    Complex complex1 = complex0.INF.conjugate();\n    complex0.getArgument();\n    Complex complex2 = complex0.cos();\n    complex0.sqrt();\n    complex1.NaN.pow(complex0);\n    Complex complex3 = complex2.NaN.sin();\n    complex2.getField();\n    Complex complex4 = complex2.asin();\n    complex4.ZERO.conjugate();\n    complex4.INF.tan();\n    complex1.getField();\n    complex0.add(complex4);\n    Complex complex5 = Complex.I;\n    complex0.add(complex5);\n    complex3.multiply(complex4);\n    Complex complex6 = Complex.valueOf(1746.86);\n    complex2.pow(complex6);\n    complex3.atan();\n}",
    "testName" : "test02727"
  },
  "test01919" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01919() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = new Complex(959.12);\n    Complex complex2 = complex0.INF.add(complex1);\n    Complex complex3 = Complex.valueOf((-683.4726135995209));\n    Complex complex4 = complex3.INF.cosh();\n    complex0.getField();\n    complex3.ZERO.conjugate();\n    complex2.ZERO.reciprocal();\n    Complex complex5 = Complex.valueOf((-683.4726135995209), 1202.73);\n    Object object0 = complex2.readResolve();\n    complex0.equals(object0);\n    complex5.sin();\n    complex4.sin();\n    Complex complex6 = complex5.negate();\n    Complex complex7 = complex6.sinh();\n    complex7.tan();\n    complex5.sinh();\n}",
    "testName" : "test01919"
  },
  "test0077" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.ZERO.log();\n    Complex complex2 = Complex.valueOf(0.0, 1.0812448255518705E-301);\n    Complex complex3 = complex2.NaN.tanh();\n    complex3.ZERO.getField();\n    Complex complex4 = complex0.createComplex((-1019.8015), (-1019.8015));\n    complex4.NaN.getArgument();\n    complex4.I.asin();\n    complex4.INF.conjugate();\n    Complex complex5 = complex2.add(complex0);\n    Complex complex6 = complex2.subtract(0.0);\n    Complex complex7 = complex6.ZERO.sqrt();\n    Complex complex8 = complex7.ZERO.divide(complex5);\n    complex8.I.getField();\n    Complex complex9 = complex1.add(0.0);\n    complex9.INF.toString();\n    Complex complex10 = complex9.add(0.0);\n    complex10.ZERO.multiply((-2323.058664706638));\n    complex9.multiply(complex6);\n    complex4.subtract(Double.NaN);\n    Complex.valueOf(1.0812448255518705E-301, Double.NaN);\n    complex4.asin();\n}",
    "testName" : "test0077"
  },
  "test101111" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101111() throws Throwable {\n    Complex complex0 = new Complex(0.40806591510772705);\n    Complex complex1 = Complex.I;\n    Complex complex2 = complex0.ONE.pow(complex1);\n    Complex complex3 = complex2.NaN.atan();\n    Complex complex4 = complex0.ZERO.sqrt1z();\n    complex0.getArgument();\n    complex3.sin();\n    complex4.divide(0.0);\n}",
    "testName" : "test101111"
  },
  "test109119" : {
    "methodSignature" : "public Complex reciprocal()",
    "methodName" : "reciprocal",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109119() throws Throwable {\n    Complex complex0 = new Complex(1914.95776, 2914.845181);\n    complex0.NaN.getArgument();\n    Complex complex1 = complex0.ONE.acos();\n    complex0.readResolve();\n    Complex complex2 = Complex.valueOf(93.0, 1.7040729233031016E-5);\n    Complex complex3 = complex2.NaN.atan();\n    Complex complex4 = complex0.acos();\n    Complex complex5 = complex4.ZERO.tanh();\n    Complex complex6 = complex2.pow(complex1);\n    Complex complex7 = complex0.add(complex2);\n    complex7.I.createComplex(1.8386917534879182E-8, 1914.95776);\n    Complex complex8 = complex5.multiply(Double.NaN);\n    Complex.valueOf(1914.95776);\n    complex3.multiply(7);\n    Complex complex9 = complex1.pow(complex8);\n    complex9.I.pow((double) 7);\n    complex1.equals(complex5);\n    complex9.toString();\n    complex2.getField();\n    Complex complex10 = complex0.log();\n    complex3.ONE.acos();\n    complex10.NaN.reciprocal();\n    complex0.add(complex6);\n    Complex complex11 = complex4.multiply(complex9);\n    Complex complex12 = complex3.divide((double) 7);\n    complex12.divide(Double.NaN);\n    complex4.pow(complex11);\n    complex12.reciprocal();\n}",
    "testName" : "test109119"
  },
  "test01111" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.I.exp();\n    complex1.INF.pow(0.0);\n    Complex complex2 = complex0.multiply((-242));\n    Complex complex3 = complex2.ONE.conjugate();\n    Complex complex4 = complex1.I.exp();\n    complex4.ZERO.getArgument();\n    complex4.NaN.toString();\n    complex2.isNaN();\n    complex1.isInfinite();\n    complex0.getField();\n    Complex complex5 = Complex.valueOf((-1391.132968));\n    complex5.divide((double) (-242));\n    Complex complex6 = complex5.add(Double.NaN);\n    complex3.isInfinite();\n    Complex complex7 = complex1.createComplex(Double.NaN, 1415.77374343);\n    complex7.isInfinite();\n    complex6.getArgument();\n    complex4.divide((-1787.0131831217));\n}",
    "testName" : "test01111"
  },
  "test03131" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03131() throws Throwable {\n    Complex complex0 = Complex.valueOf(783.043, (-2008.895426));\n    Complex complex1 = complex0.INF.asin();\n    Complex complex2 = complex1.NaN.createComplex((-43.47631730348), 6.283185307179586);\n    Complex complex3 = complex1.ZERO.pow(complex0);\n    complex3.ONE.toString();\n    complex3.INF.cosh();\n    Complex complex4 = complex0.tanh();\n    Complex complex5 = complex0.exp();\n    Complex complex6 = complex5.sinh();\n    complex5.getReal();\n    Complex complex7 = complex6.divide((-2686.97019));\n    complex5.INF.getArgument();\n    Complex complex8 = complex7.NaN.sinh();\n    Complex complex9 = complex5.add(complex0);\n    Complex complex10 = new Complex(6.283185307179586, 6.283185307179586);\n    complex6.NaN.add(complex10);\n    Complex complex11 = complex9.multiply(646);\n    complex11.divide(complex8);\n    complex4.isInfinite();\n    complex1.cos();\n    Complex complex12 = complex7.cos();\n    complex2.pow(0.0);\n    Complex complex13 = complex10.tanh();\n    complex7.sqrt();\n    complex13.pow(complex12);\n    complex9.hashCode();\n}",
    "testName" : "test03131"
  },
  "test04858" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04858() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.hashCode();\n    complex0.NaN.tanh();\n    complex0.INF.getField();\n    Complex complex1 = complex0.I.add(2.037139607241041E305);\n    Complex complex2 = complex1.multiply(complex0);\n    Complex complex3 = complex0.acos();\n    complex0.toString();\n    Complex complex4 = complex3.cosh();\n    Complex complex5 = Complex.valueOf(2.037139607241041E305);\n    complex5.NaN.sqrt();\n    complex4.NaN.getArgument();\n    Complex complex6 = complex1.tanh();\n    Complex complex7 = complex6.ZERO.createComplex(2.037139607241041E305, (-629.2));\n    complex7.I.divide(Double.NaN);\n    complex1.add(complex0);\n    complex0.tan();\n    complex2.negate();\n    complex2.isNaN();\n}",
    "testName" : "test04858"
  },
  "test06878" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06878() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.createComplex(4.151794514828518E-8, (-2507.0));\n    complex0.ONE.asin();\n    complex1.add(4.151794514828518E-8);\n    complex1.I.createComplex(4.151794514828518E-8, (-20.0));\n    complex0.cos();\n    complex1.sin();\n}",
    "testName" : "test06878"
  },
  "test03646" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03646() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.createComplex(1.356201171875, Double.NaN);\n    complex0.ZERO.cosh();\n    complex1.I.asin();\n    Complex complex2 = complex0.INF.sqrt();\n    Complex complex3 = complex2.NaN.atan();\n    complex0.I.reciprocal();\n    Complex complex4 = complex0.createComplex(Double.NaN, Double.NaN);\n    complex4.ONE.sinh();\n    Complex complex5 = complex0.subtract(1.356201171875);\n    complex5.ONE.multiply(Double.NaN);\n    Complex complex6 = complex5.sin();\n    complex3.atan();\n    complex3.pow(complex6);\n    complex6.abs();\n}",
    "testName" : "test03646"
  },
  "test092102" : {
    "methodSignature" : "public static Complex valueOf(double realPart, double imaginaryPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math3.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092102() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.ONE.sqrt();\n    complex0.sqrt();\n    Complex.valueOf(2.0, 240.8);\n}",
    "testName" : "test092102"
  }
}