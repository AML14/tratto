focal_method,test_prefix,docstring
"public ArrayRealVector(RealVector v1, ArrayRealVector v2) {
    final int l1 = v1.getDimension();
    final int l2 = v2.data.length;
    data = new double[l1 + l2];
    for (int i = 0; i < l1; ++i) {
        data[i] = v1.getEntry(i);
    }
    System.arraycopy(v2.data, 0, data, l1, l2);
}","public void test0000() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1655, 1655);
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = 1.0E-12;
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = (double) 1655;
    doubleArray0[3] = (double) 1655;
    doubleArray0[4] = (double) 1655;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(1655, 1655);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 first vector (will be put in front of the new vector)
 * @param v2 second vector (will be put at back of the new vector)
 */"
"public RealVector append(double[] in) {
    return new ArrayRealVector(this, in);
}","public void test0022() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1701.9072154086002;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = (-1.0);
    doubleArray0[5] = 1.0;
    doubleArray0[6] = 1988.654;
    doubleArray0[7] = (-1.0);
    doubleArray0[8] = (-3621.4380568188);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector1);
    RealVector realVector0 = arrayRealVector1.mapSubtractToSelf(2884.11164461);
    arrayRealVector1.mapFloorToSelf();
    arrayRealVector0.getL1Distance(realVector0);
    double[] doubleArray1 = arrayRealVector1.getData();
    arrayRealVector1.append(0.0);
    arrayRealVector0.getLInfDistance(doubleArray1);
    arrayRealVector2.mapCoshToSelf();
    arrayRealVector0.append(doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector append(RealVector v) {
    try {
        return new ArrayRealVector(this, (ArrayRealVector) v);
    } catch (ClassCastException cce) {
        return new ArrayRealVector(this, v);
    }
}","public void test0033() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(40);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector0);
    RealVector realVector0 = arrayRealVector2.mapUlpToSelf();
    double[] doubleArray0 = arrayRealVector1.getData();
    arrayRealVector1.projection(doubleArray0);
    arrayRealVector1.getEntry(0);
    arrayRealVector0.getLInfNorm();
    Object object0 = new Object();
    arrayRealVector2.equals(object0);
    arrayRealVector1.mapAbsToSelf();
    arrayRealVector0.append(realVector0);
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector ebeDivide(ArrayRealVector v) throws IllegalArgumentException {
    return (ArrayRealVector) ebeDivide(v.data);
}","public void test0055() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.POSITIVE_INFINITY;
    doubleArray0[1] = (-91.3);
    doubleArray0[2] = (-997.8068463188872);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    RealVector realVector0 = arrayRealVector0.mapAdd((-1211.0));
    arrayRealVector0.subtract(realVector0);
    arrayRealVector0.add(doubleArray0);
    arrayRealVector0.getDistance(doubleArray0);
    arrayRealVector0.mapAtan();
    RealVector realVector1 = arrayRealVector0.mapPowToSelf(0.0);
    RealVector realVector2 = arrayRealVector0.ebeDivide(realVector1);
    arrayRealVector0.mapDivideToSelf(1.0);
    arrayRealVector0.mapAtanToSelf();
    arrayRealVector0.getData();
    RealVector realVector3 = arrayRealVector0.mapLog1pToSelf();
    arrayRealVector0.add(realVector3);
    arrayRealVector0.mapDivideToSelf((-1406.543652677));
    arrayRealVector0.toString();
    arrayRealVector0.mapLogToSelf();
    arrayRealVector0.isInfinite();
    arrayRealVector0.subtract(realVector1);
    arrayRealVector0.copy();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
    arrayRealVector0.projection(arrayRealVector1);
    arrayRealVector1.append(realVector2);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector();
    ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, realVector2);
    arrayRealVector1.ebeDivide(arrayRealVector3);
}","/**
 * Element-by-element division.
 * @param v vector by which instance elements must be divided
 * @return a vector containing this[i] / v[i] for all i
 * @throws IllegalArgumentException if v is not the same size as this
 */"
"public double getDistance(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return getDistance((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double sum = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v.getEntry(i);
            sum += delta * delta;
        }
        return Math.sqrt(sum);
    }
}","public void test0066() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = 1802.872635545;
    doubleArray0[1] = 1.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = Double.POSITIVE_INFINITY;
    doubleArray0[4] = (-246.577783706);
    doubleArray0[5] = Double.NaN;
    double double0 = 0.0;
    doubleArray0[6] = 0.0;
    doubleArray0[7] = (-1311.1543);
    doubleArray0[8] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 309, 309);
    int int0 = 1268;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(int0, double0);
    arrayRealVector0.getDistance((RealVector) arrayRealVector1);
}","/**
 * {@inheritDoc}
 */"
"public RealVector subtract(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return subtract((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double[] out = data.clone();
        Iterator<Entry> it = v.sparseIterator();
        Entry e;
        while (it.hasNext() && (e = it.next()) != null) {
            out[e.getIndex()] -= e.getValue();
        }
        return new ArrayRealVector(out, false);
    }
}","public void test0077() throws Throwable {
    double[] doubleArray0 = new double[0];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.hashCode();
    Double[] doubleArray1 = new Double[8];
    Double double0 = new Double(0.0);
    doubleArray1[0] = double0;
    Double double1 = new Double((-1264.0));
    doubleArray1[1] = double1;
    Double double2 = new Double((-1.0));
    doubleArray1[2] = double2;
    Double double3 = new Double(0.0);
    doubleArray1[3] = double3;
    Double double4 = new Double(0.0);
    doubleArray1[4] = double4;
    Double double5 = new Double(1.0);
    doubleArray1[5] = double5;
    Double double6 = new Double(0.0);
    doubleArray1[6] = double6;
    Double double7 = new Double((double) doubleArray1[4]);
    doubleArray1[7] = double7;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    arrayRealVector0.subtract((RealVector) openMapRealVector0);
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector ebeMultiply(ArrayRealVector v) throws IllegalArgumentException {
    return (ArrayRealVector) ebeMultiply(v.data);
}","public void test0088() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 1.0E-12;
    doubleArray0[1] = 1.0E-12;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    try {
        arrayRealVector0.ebeMultiply(arrayRealVector1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 0 but expected 2
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Element-by-element multiplication.
 * @param v vector by which instance elements must be multiplied
 * @return a vector containing this[i] * v[i] for all i
 * @exception IllegalArgumentException if v is not the same size as this
 */"
"@Override
public int hashCode() {
    if (isNaN()) {
        return 9;
    }
    return MathUtils.hash(data);
}","public void test0099() throws Throwable {
    Double[] doubleArray0 = new Double[6];
    Double double0 = new Double(871.05222336102);
    doubleArray0[0] = double0;
    Double double1 = new Double(871.05222336102);
    doubleArray0[1] = double1;
    Double double2 = new Double(871.05222336102);
    doubleArray0[2] = double2;
    Double double3 = new Double((-798.0321));
    doubleArray0[3] = double3;
    Double double4 = new Double((-798.0321));
    doubleArray0[4] = double4;
    Double double5 = new Double((double) doubleArray0[4]);
    doubleArray0[5] = double5;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.mapAsinToSelf();
    arrayRealVector0.mapExpToSelf();
    double[] doubleArray1 = new double[9];
    doubleArray1[0] = (double) doubleArray0[2];
    doubleArray1[1] = (double) doubleArray0[3];
    doubleArray1[2] = 4095.445880065;
    doubleArray1[3] = (-798.0321);
    doubleArray1[4] = (double) doubleArray0[3];
    doubleArray1[5] = (-3814.778881173444);
    doubleArray1[6] = (double) doubleArray0[2];
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
    arrayRealVector0.getDistance(arrayRealVector1);
    doubleArray1[7] = (double) doubleArray0[4];
    doubleArray1[8] = (double) doubleArray0[3];
    arrayRealVector0.getL1Distance(doubleArray1);
    arrayRealVector0.mapCbrtToSelf();
    arrayRealVector0.unitVector();
    arrayRealVector0.mapSubtractToSelf((double) doubleArray0[4]);
    arrayRealVector0.hashCode();
}","/**
 * Get a hashCode for the real vector.
 * <p>All NaN values have the same hash code.</p>
 * @return a hash code value for this object
 */"
"public ArrayRealVector(RealVector v) {
    data = new double[v.getDimension()];
    for (int i = 0; i < data.length; ++i) {
        data[i] = v.getEntry(i);
    }
}","public void test01010() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector((-1), (-1));
    ArrayRealVector arrayRealVector1 = null;
    try {
        arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector from another vector, using a deep copy.
 * @param v vector to copy
 */"
"public RealVector mapCeilToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.ceil(data[i]);
    }
    return this;
}","public void test01111() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(4, 4);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector((-1902), (-1902));
    arrayRealVector0.append(arrayRealVector1);
    // Undeclared exception!
    try {
        arrayRealVector0.mapCeilToSelf();
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealMatrix outerProduct(ArrayRealVector v) throws IllegalArgumentException {
    return outerProduct(v.data);
}","public void test01212() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    RealVector realVector0 = arrayRealVector0.mapAbs();
    arrayRealVector0.projection(realVector0);
    double[] doubleArray0 = arrayRealVector0.toArray();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector();
    arrayRealVector1.getDistance(doubleArray0);
    try {
        arrayRealVector0.outerProduct(arrayRealVector1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid row dimension 0 (must be positive)
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Compute the outer product.
 * @param v vector with which outer product should be computed
 * @return the square matrix outer product between instance and v
 * @exception IllegalArgumentException if v is not the same size as this
 */"
"@Override
public int hashCode() {
    if (isNaN()) {
        return 9;
    }
    return MathUtils.hash(data);
}","public void test01313() throws Throwable {
    Double[] doubleArray0 = new Double[1];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1), 0);
    arrayRealVector0.hashCode();
}","/**
 * Get a hashCode for the real vector.
 * <p>All NaN values have the same hash code.</p>
 * @return a hash code value for this object
 */"
"public double getEntry(int index) throws MatrixIndexException {
    return data[index];
}","public void test01414() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(4242, 4242);
    arrayRealVector0.unitize();
    arrayRealVector0.mapLog();
    arrayRealVector0.set(1.0E-12);
    arrayRealVector0.mapSinToSelf();
    double[] doubleArray0 = arrayRealVector0.getDataRef();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    arrayRealVector0.append((RealVector) arrayRealVector1);
    arrayRealVector1.getEntry(4242);
}","/**
 * {@inheritDoc}
 */"
"public RealVector projection(RealVector v) {
    return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
}","public void test01616() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 4851.7485);
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 4851.7485;
    doubleArray0[1] = (-1237.49925);
    doubleArray0[2] = 4851.7485;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
    arrayRealVector0.subtract((RealVector) openMapRealVector0);
    RealVector realVector0 = null;
    arrayRealVector0.ebeMultiply((RealVector) null);
    arrayRealVector0.mapExpm1ToSelf();
    arrayRealVector0.projection(realVector0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector projection(RealVector v) {
    return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
}","public void test01818() throws Throwable {
    int int0 = 1592;
    double double0 = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(1592, 0.0);
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (double) 1592;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    double[] doubleArray1 = new double[0];
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, doubleArray1);
    // Undeclared exception!
    try {
        arrayRealVector0.projection((RealVector) arrayRealVector1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 1,592 but expected 3
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector(ArrayRealVector v1, double[] v2) {
    final int l1 = v1.getDimension();
    final int l2 = v2.length;
    data = new double[l1 + l2];
    System.arraycopy(v1.data, 0, data, 0, l1);
    System.arraycopy(v2, 0, data, l1, l2);
}","public void test01919() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1.0;
    Double[] doubleArray1 = new Double[1];
    doubleArray1[0] = (Double) 0.0;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, (-2803), (-2803));
    arrayRealVector0.append((RealVector) arrayRealVector1);
    double double0 = 0.0;
    doubleArray0[3] = double0;
    ArrayRealVector arrayRealVector2 = null;
    try {
        arrayRealVector2 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 first vector (will be put in front of the new vector)
 * @param v2 second vector (will be put at back of the new vector)
 */"
"public ArrayRealVector(double[] d) {
    data = d.clone();
}","public void test02020() throws Throwable {
    double[] doubleArray0 = null;
    ArrayRealVector arrayRealVector0 = null;
    try {
        arrayRealVector0 = new ArrayRealVector((double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector from an array, copying the input array.
 * @param d array of doubles.
 */"
"public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
    data = new double[v1.data.length + v2.data.length];
    System.arraycopy(v1.data, 0, data, 0, v1.data.length);
    System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
}","public void test02121() throws Throwable {
    ArrayRealVector arrayRealVector0 = null;
    ArrayRealVector arrayRealVector1 = null;
    try {
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, (ArrayRealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 first vector (will be put in front of the new vector)
 * @param v2 second vector (will be put at back of the new vector)
 */"
"public ArrayRealVector(int size) {
    data = new double[size];
}","public void test02222() throws Throwable {
    int int0 = (-269);
    ArrayRealVector arrayRealVector0 = null;
    try {
        arrayRealVector0 = new ArrayRealVector((-269));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a (size)-length vector of zeros.
 * @param size size of the vector
 */"
"public double getLInfDistance(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return getLInfDistance((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double max = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v.getEntry(i);
            max = Math.max(max, Math.abs(delta));
        }
        return max;
    }
}","public void test02323() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 1335.7062878;
    doubleArray0[2] = 1.0;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-2351.2157559);
    doubleArray0[5] = 0.0;
    doubleArray0[6] = (-1377.057);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    RealVector realVector0 = arrayRealVector0.mapTanToSelf();
    arrayRealVector0.getLInfDistance(realVector0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapInvToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = 1.0 / data[i];
    }
    return this;
}","public void test02424() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (-1.0);
    doubleArray0[1] = (-247.0188964087);
    doubleArray0[2] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
    arrayRealVector0.mapInvToSelf();
}","/**
 * {@inheritDoc}
 */"
"public void setSubVector(int index, double[] v) {
    try {
        System.arraycopy(v, 0, data, index, v.length);
    } catch (IndexOutOfBoundsException e) {
        checkIndex(index);
        checkIndex(index + v.length - 1);
    }
}","public void test02525() throws Throwable {
    int int0 = 3;
    double double0 = 2501.1943011847;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 2501.1943011847);
    arrayRealVector0.mapInv();
    RealVector realVector0 = arrayRealVector0.mapTanToSelf();
    arrayRealVector0.equals(realVector0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector();
    int int1 = 17;
    double[] doubleArray0 = new double[1];
    double double1 = 0.5;
    doubleArray0[0] = 0.5;
    // Undeclared exception!
    try {
        arrayRealVector1.setSubVector(17, doubleArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // index 17 out of allowed range [0, -1]
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector(RealVector v1, ArrayRealVector v2) {
    final int l1 = v1.getDimension();
    final int l2 = v2.data.length;
    data = new double[l1 + l2];
    for (int i = 0; i < l1; ++i) {
        data[i] = v1.getEntry(i);
    }
    System.arraycopy(v2.data, 0, data, l1, l2);
}","public void test02727() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1655, 1655);
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = 1.0E-12;
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = (double) 1655;
    doubleArray0[3] = (double) 1655;
    doubleArray0[4] = (double) 1655;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 first vector (will be put in front of the new vector)
 * @param v2 second vector (will be put at back of the new vector)
 */"
"protected void checkIndex(final int index) throws MatrixIndexException {
    if (index < 0 || index >= getDimension()) {
        throw new MatrixIndexException(""index {0} out of allowed range [{1}, {2}]"", index, 0, getDimension() - 1);
    }
}","public void test02828() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector((double[]) null, false);
    int int0 = (-347);
    // Undeclared exception!
    try {
        arrayRealVector0.checkIndex(int0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Check if an index is valid.
 * @param index index to check
 * @exception MatrixIndexException if index is not valid
 */"
"public boolean isNaN() {
    for (double v : data) {
        if (Double.isNaN(v)) {
            return true;
        }
    }
    return false;
}","public void test02929() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 1650.3;
    doubleArray0[1] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
    arrayRealVector2.isNaN();
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"RealVector mapTanToSelf();","public void test03030() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-613.0005126029037);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
    RealVector realVector0 = arrayRealVector0.mapAtan();
    realVector0.getDistance(doubleArray0);
    arrayRealVector0.checkIndex(3515);
    arrayRealVector0.getL1Norm();
    RealVector realVector1 = arrayRealVector0.append(doubleArray0);
    // Undeclared exception!
    try {
        realVector1.mapTanToSelf();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // index 3,515 out of allowed range [0, 0]
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealVector"", e);
    }
}","/**
 * Map the {@link Math#tan(double)} function to each entry.
 * <p>The instance <strong>is</strong> changed by this method.</p>
 * @return for convenience, return this
 */"
"public ArrayRealVector(double[] v1, double[] v2) {
    final int l1 = v1.length;
    final int l2 = v2.length;
    data = new double[l1 + l2];
    System.arraycopy(v1, 0, data, 0, l1);
    System.arraycopy(v2, 0, data, l1, l2);
}","public void test03131() throws Throwable {
    double[] doubleArray0 = null;
    ArrayRealVector arrayRealVector0 = null;
    try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 first vector (will be put in front of the new vector)
 * @param v2 second vector (will be put at back of the new vector)
 */"
"public ArrayRealVector projection(ArrayRealVector v) {
    return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));
}","public void test03232() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (-1338.21562457);
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (-1.0);
    doubleArray0[4] = 1.0;
    doubleArray0[5] = (-893.5954);
    doubleArray0[6] = (-998.65773629);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
    arrayRealVector0.getDistance(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1, arrayRealVector1);
    arrayRealVector0.projection(arrayRealVector2);
}","/**
 * Find the orthogonal projection of this vector onto another vector.
 * @param v vector onto which instance must be projected
 * @return projection of the instance onto v
 * @throws IllegalArgumentException if v is not the same size as this
 */"
"public RealVector mapLogToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.log(data[i]);
    }
    return this;
}","public void test03333() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (-1093.251566407);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (-1015.1378);
    doubleArray0[4] = 0.0;
    doubleArray0[5] = 844.147739695;
    doubleArray0[6] = 2260.3779548;
    doubleArray0[7] = 103.395669940721;
    boolean boolean0 = true;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(2);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
    arrayRealVector0.getDistance(arrayRealVector2);
    ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, boolean0);
    arrayRealVector2.getL1Distance(arrayRealVector3);
    int int0 = 0;
    arrayRealVector3.setSubVector(int0, (RealVector) arrayRealVector2);
    arrayRealVector1.mapCoshToSelf();
    arrayRealVector2.mapSinh();
    ArrayRealVector arrayRealVector4 = new ArrayRealVector(doubleArray0, arrayRealVector2);
    arrayRealVector2.projection(arrayRealVector4);
    // Undeclared exception!
    try {
        arrayRealVector1.mapLogToSelf();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 8 but expected 10
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public void unitize() throws ArithmeticException {
    final double norm = getNorm();
    if (norm == 0) {
        throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");
    }
    mapDivideToSelf(norm);
}","public void test03434() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 21.5593372365;
    doubleArray0[2] = (-1057.07264737);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
    arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
    arrayRealVector0.getSubVector(0, 94);
    arrayRealVector0.unitize();
}","/**
 * {@inheritDoc}
 */"
"@Override
public String toString() {
    return DEFAULT_FORMAT.format(this);
}","public void test03535() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) null);
    // Undeclared exception!
    try {
        arrayRealVector0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double getLInfDistance(ArrayRealVector v) throws IllegalArgumentException {
    return getLInfDistance(v.data);
}","public void test03636() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector((double[]) null, arrayRealVector0);
    arrayRealVector1.mapAtan();
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, openMapRealVector0);
    // Undeclared exception!
    try {
        arrayRealVector2.getLInfDistance(arrayRealVector1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Distance between two vectors.
 * <p>This method computes the distance consistent with
 * L<sub>&infin;</sub> norm, i.e. the max of the absolute values of
 * elements differences.</p>
 * @param v vector to which distance is requested
 * @return distance between two vectors.
 * @exception IllegalArgumentException if v is not the same size as this
 * @see #getDistance(RealVector)
 * @see #getL1Distance(ArrayRealVector)
 * @see #getLInfDistance(ArrayRealVector)
 * @see #getNorm()
 */"
"public ArrayRealVector(int size, double preset) {
    data = new double[size];
    Arrays.fill(data, preset);
}","public void test03737() throws Throwable {
    int int0 = (-707);
    ArrayRealVector arrayRealVector0 = null;
    try {
        arrayRealVector0 = new ArrayRealVector((-707), (-707));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct an (size)-length vector with preset values.
 * @param size size of the vector
 * @param preset fill the vector with this scalar value
 */"
"public double getLInfDistance(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return getLInfDistance((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double max = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v.getEntry(i);
            max = Math.max(max, Math.abs(delta));
        }
        return max;
    }
}","public void test03838() throws Throwable {
    double[] doubleArray0 = new double[2];
    double double0 = 2381.90953;
    doubleArray0[0] = 2381.90953;
    doubleArray0[1] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, (-4523));
    boolean boolean0 = false;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, boolean0);
    // Undeclared exception!
    try {
        arrayRealVector1.getLInfDistance((RealVector) arrayRealVector0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector subtract(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return subtract((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double[] out = data.clone();
        Iterator<Entry> it = v.sparseIterator();
        Entry e;
        while (it.hasNext() && (e = it.next()) != null) {
            out[e.getIndex()] -= e.getValue();
        }
        return new ArrayRealVector(out, false);
    }
}","public void test03939() throws Throwable {
    double[] doubleArray0 = new double[0];
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
    openMapRealVector0.mapExpm1();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    try {
        arrayRealVector1.subtract((RealVector) openMapRealVector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector must have at least one element
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector ebeMultiply(ArrayRealVector v) throws IllegalArgumentException {
    return (ArrayRealVector) ebeMultiply(v.data);
}","public void test04040() throws Throwable {
    int int0 = 0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
    arrayRealVector0.checkVectorDimensions(arrayRealVector1);
    try {
        arrayRealVector0.ebeMultiply(arrayRealVector1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector must have at least one element
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Element-by-element multiplication.
 * @param v vector by which instance elements must be multiplied
 * @return a vector containing this[i] * v[i] for all i
 * @exception IllegalArgumentException if v is not the same size as this
 */"
"public RealVector mapTanToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.tan(data[i]);
    }
    return this;
}","public void test04141() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = 684.74958;
    doubleArray0[1] = 1.0;
    doubleArray0[2] = 995.28392685;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 2528.6612012;
    doubleArray0[5] = 0.0;
    doubleArray0[6] = 1.0;
    doubleArray0[7] = (-266.407409411209);
    doubleArray0[8] = (-1147.2);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 9, 9);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
    RealVector realVector0 = arrayRealVector0.mapUlp();
    boolean boolean0 = true;
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, boolean0);
    arrayRealVector2.ebeMultiply(realVector0);
    arrayRealVector1.mapTanToSelf();
}","/**
 * {@inheritDoc}
 */"
"public void unitize() throws ArithmeticException {
    final double norm = getNorm();
    if (norm == 0) {
        throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");
    }
    mapDivideToSelf(norm);
}","public void test04343() throws Throwable {
    ArrayRealVector arrayRealVector0 = null;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, false);
    // Undeclared exception!
    try {
        arrayRealVector1.unitize();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getLInfNorm() {
    double max = 0;
    for (double a : data) {
        max += Math.max(max, Math.abs(a));
    }
    return max;
}","public void test04444() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (-4657.305337492);
    doubleArray0[1] = 0.5;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 1993.9928128;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    arrayRealVector1.getLInfNorm();
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapExpm1ToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.expm1(data[i]);
    }
    return this;
}","public void test04545() throws Throwable {
    Double[] doubleArray0 = new Double[2];
    Double double0 = new Double(1158.7376421);
    doubleArray0[0] = double0;
    Double double1 = new Double(1158.7376421);
    doubleArray0[1] = double1;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.mapExpm1ToSelf();
}","/**
 * {@inheritDoc}
 */"
"protected void checkVectorDimensions(int n) throws IllegalArgumentException {
    if (data.length != n) {
        throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"", data.length, n);
    }
}","public void test04747() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (-1981.2541);
    doubleArray0[1] = 2.2250738585072014E-308;
    doubleArray0[2] = (-127.546557021);
    doubleArray0[3] = (-1.0);
    doubleArray0[4] = Double.NaN;
    doubleArray0[5] = 0.0;
    doubleArray0[6] = 2.2250738585072014E-308;
    doubleArray0[7] = (-662.31276);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    arrayRealVector0.checkVectorDimensions(1783);
}","/**
 * Check if instance dimension is equal to some expected value.
 *
 * @param n expected dimension.
 * @exception IllegalArgumentException if the dimension is
 * inconsistent with vector size
 */"
"public AbstractRealVector copy() {
    return new ArrayRealVector(this, true);
}","public void test04848() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
    arrayRealVector0.mapAbsToSelf();
    arrayRealVector0.mapCosToSelf();
    arrayRealVector0.mapAsin();
    arrayRealVector0.append((double[]) null);
    arrayRealVector0.mapLog10ToSelf();
    // Undeclared exception!
    try {
        arrayRealVector0.copy();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector(Double[] d, int pos, int size) {
    if (d.length < pos + size) {
        throw MathRuntimeException.createIllegalArgumentException(NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
    }
    data = new double[size];
    for (int i = pos; i < pos + size; i++) {
        data[i - pos] = d[i].doubleValue();
    }
}","public void test04949() throws Throwable {
    Double[] doubleArray0 = new Double[1];
    Double double0 = new Double(1.0);
    doubleArray0[0] = double0;
    Double.min((-2637.0685912153), (double) doubleArray0[0]);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 187, 282);
}","/**
 * Construct a vector from part of a Double array
 * @param d array of Doubles.
 * @param pos position of first entry
 * @param size number of entries to copy
 */"
"public RealVector append(double in) {
    final double[] out = new double[data.length + 1];
    System.arraycopy(data, 0, out, 0, data.length);
    out[data.length] = in;
    return new ArrayRealVector(out, false);
}","public void test05050() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, 17);
    RealVector realVector0 = arrayRealVector0.mapUlpToSelf();
    arrayRealVector0.mapPow(0.0);
    arrayRealVector0.dotProduct(realVector0);
    arrayRealVector0.mapAcosToSelf();
    arrayRealVector0.mapSinToSelf();
    arrayRealVector0.mapSubtractToSelf(2.145701662201152E-28);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    arrayRealVector0.projection(arrayRealVector1);
    arrayRealVector0.mapSinhToSelf();
    arrayRealVector0.append(0.0);
}","/**
 * {@inheritDoc}
 */"
"public void setSubVector(int index, RealVector v) {
    try {
        try {
            set(index, (ArrayRealVector) v);
        } catch (ClassCastException cce) {
            for (int i = index; i < index + v.getDimension(); ++i) {
                data[i] = v.getEntry(i - index);
            }
        }
    } catch (IndexOutOfBoundsException e) {
        checkIndex(index);
        checkIndex(index + v.getDimension() - 1);
    }
}","public void test05151() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    int int0 = 1703;
    arrayRealVector1.append((RealVector) arrayRealVector0);
    arrayRealVector0.mapAbs();
    // Undeclared exception!
    try {
        arrayRealVector1.setSubVector(1703, (RealVector) arrayRealVector0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // index 1,703 out of allowed range [0, -1]
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double getL1Distance(ArrayRealVector v) throws IllegalArgumentException {
    return getL1Distance(v.data);
}","public void test05353() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 920.472526;
    doubleArray0[1] = (-987.631681);
    doubleArray0[2] = 1915.97416017;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = 1.0;
    doubleArray0[5] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    RealVector realVector0 = arrayRealVector0.ebeMultiply(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector1);
    arrayRealVector2.getL1Distance(realVector0);
    int int0 = 16;
    arrayRealVector0.getEntry(int0);
    try {
        arrayRealVector2.getL1Distance(arrayRealVector1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 12 but expected 6
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Distance between two vectors.
 * <p>This method computes the distance consistent with
 * L<sub>1</sub> norm, i.e. the sum of the absolute values of
 * elements differences.</p>
 * @param v vector to which distance is requested
 * @return distance between two vectors.
 * @exception IllegalArgumentException if v is not the same size as this
 * @see #getDistance(RealVector)
 * @see #getL1Distance(ArrayRealVector)
 * @see #getLInfDistance(ArrayRealVector)
 * @see #getNorm()
 */"
"public RealVector add(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double[] out = data.clone();
    for (int i = 0; i < data.length; i++) {
        out[i] += v[i];
    }
    return new ArrayRealVector(out, false);
}","public void test05555() throws Throwable {
    ArrayRealVector arrayRealVector0 = null;
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 677.082109753;
    doubleArray0[1] = 1.0;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, doubleArray0);
    arrayRealVector1.sparseIterator();
    // Undeclared exception!
    try {
        arrayRealVector1.add(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double getDistance(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double sum = 0;
    for (int i = 0; i < data.length; ++i) {
        final double delta = data[i] - v[i];
        sum += delta * delta;
    }
    return Math.sqrt(sum);
}","public void test05656() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(707, 0.0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1.0);
    doubleArray0[1] = 0.0;
    doubleArray0[2] = (double) 707;
    doubleArray0[3] = (double) 707;
    doubleArray0[4] = 0.0;
    doubleArray0[5] = (double) 707;
    arrayRealVector0.getDistance(doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapRintToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.rint(data[i]);
    }
    return this;
}","public void test05757() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = Double.NaN;
    doubleArray0[2] = 1200.138175179;
    doubleArray0[3] = (-1.0);
    doubleArray0[4] = 1.0;
    doubleArray0[5] = 676.9380834;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
    arrayRealVector2.mapLog1p();
    arrayRealVector2.mapMultiply((-1.0));
    arrayRealVector2.getL1Distance(doubleArray0);
    arrayRealVector2.mapExp();
    arrayRealVector2.mapAtanToSelf();
    arrayRealVector1.ebeMultiply(arrayRealVector2);
    arrayRealVector2.mapRintToSelf();
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapTanhToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.tanh(data[i]);
    }
    return this;
}","public void test05858() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 4378.4614;
    doubleArray0[3] = (-1.0);
    doubleArray0[4] = 1.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    arrayRealVector1.mapTanhToSelf();
}","/**
 * {@inheritDoc}
 */"
"public RealVector projection(RealVector v) {
    return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
}","public void test05959() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(46);
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (double) 46;
    doubleArray0[1] = (double) 46;
    doubleArray0[2] = (double) 46;
    doubleArray0[3] = (double) 46;
    doubleArray0[4] = (double) 46;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    arrayRealVector0.projection((RealVector) openMapRealVector0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector projection(double[] v) {
    return projection(new ArrayRealVector(v, false));
}","public void test06161() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    double double0 = 3172.3716515232472;
    arrayRealVector0.mapAdd(3172.3716515232472);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 3172.3716515232472;
    doubleArray0[1] = 3172.3716515232472;
    doubleArray0[2] = 3172.3716515232472;
    doubleArray0[3] = 3172.3716515232472;
    doubleArray0[4] = 3172.3716515232472;
    doubleArray0[5] = 3172.3716515232472;
    // Undeclared exception!
    try {
        arrayRealVector0.projection(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 0 but expected 6
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapRintToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.rint(data[i]);
    }
    return this;
}","public void test06262() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.5;
    doubleArray0[2] = 2189.9862296412;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 0.0;
    doubleArray0[5] = 869.15381;
    doubleArray0[6] = 1.0;
    doubleArray0[7] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector((Double[]) null, (-1280), 17);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
    arrayRealVector2.mapRintToSelf();
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapCeilToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.ceil(data[i]);
    }
    return this;
}","public void test06363() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 0;
    doubleArray0[1] = (double) 0;
    doubleArray0[2] = (double) 0;
    doubleArray0[3] = (double) 0;
    doubleArray0[4] = (double) 0;
    arrayRealVector0.set(0.0);
    doubleArray0[5] = (-1676.8236);
    arrayRealVector0.add(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    // Undeclared exception!
    try {
        arrayRealVector1.mapCeilToSelf();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 0 but expected 6
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapCbrt() {
    return copy().mapCbrtToSelf();
}","public void test06464() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = (-1.0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(2, (-937.682037205));
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    arrayRealVector0.getL1Distance(arrayRealVector1);
    arrayRealVector0.getL1Distance(arrayRealVector1);
    arrayRealVector0.mapExpm1();
    arrayRealVector1.unitVector();
    // Undeclared exception!
    try {
        arrayRealVector1.mapCbrt();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 2 but expected 4
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapCosToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.cos(data[i]);
    }
    return this;
}","public void test06565() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1108, 1108);
    openMapRealVector0.copy();
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
    arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
    arrayRealVector0.mapExpm1();
    arrayRealVector0.mapAdd(1108);
    openMapRealVector0.mapSinhToSelf();
    arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
    double[] doubleArray0 = null;
    arrayRealVector0.projection((double[]) null);
    // Undeclared exception!
    try {
        arrayRealVector0.mapCosToSelf();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"protected void checkVectorDimensions(RealVector v) {
    checkVectorDimensions(v.getDimension());
}","public void test06666() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(11);
    ArrayRealVector arrayRealVector0 = null;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, (ArrayRealVector) null);
    // Undeclared exception!
    try {
        openMapRealVector0.checkVectorDimensions(arrayRealVector0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Check if instance and specified vectors have the same dimension.
 * @param v vector to compare instance with
 * @exception IllegalArgumentException if the vectors do not
 * have the same dimension
 */"
"public RealVector mapSqrtToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.sqrt(data[i]);
    }
    return this;
}","public void test06767() throws Throwable {
    Double[] doubleArray0 = new Double[1];
    double double0 = 484.404376854;
    Double double1 = new Double(484.404376854);
    doubleArray0[0] = double1;
    int int0 = 0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
    arrayRealVector0.append((RealVector) null);
    // Undeclared exception!
    try {
        arrayRealVector0.mapSqrtToSelf();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public Iterator<Entry> iterator() {
    final int dim = getDimension();
    return new Iterator<Entry>() {

        /**
         * Current index.
         */
        private int i = 0;

        /**
         * Current entry.
         */
        private EntryImpl e = new EntryImpl();

        /**
         * {@inheritDoc}
         */
        public boolean hasNext() {
            return i < dim;
        }

        /**
         * {@inheritDoc}
         */
        public Entry next() {
            e.setIndex(i++);
            return e;
        }

        /**
         * {@inheritDoc}
         */
        public void remove() {
            throw new UnsupportedOperationException(""Not supported"");
        }
    };
}","public void test06868() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = Double.POSITIVE_INFINITY;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 1.0;
    arrayRealVector0.outerProduct(doubleArray0);
    arrayRealVector0.mapAsinToSelf();
    arrayRealVector0.toArray();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
    // Undeclared exception!
    try {
        arrayRealVector1.iterator();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 0 but expected 4
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return ebeMultiply((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double[] out = data.clone();
        for (int i = 0; i < data.length; i++) {
            out[i] *= v.getEntry(i);
        }
        return new ArrayRealVector(out, false);
    }
}","public void test06969() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
    try {
        arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector must have at least one element
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double getLInfDistance(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double max = 0;
    for (int i = 0; i < data.length; ++i) {
        final double delta = data[i] - v[i];
        max = Math.max(max, Math.abs(delta));
    }
    return max;
}","public void test07171() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    arrayRealVector0.isInfinite();
    double double0 = (-1058.5058225119);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (-1058.5058225119);
    doubleArray0[1] = (-1058.5058225119);
    doubleArray0[2] = (-1058.5058225119);
    doubleArray0[3] = (-1058.5058225119);
    try {
        arrayRealVector0.getLInfDistance(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 0 but expected 4
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapPow(double d) {
    return copy().mapPowToSelf(d);
}","public void test07272() throws Throwable {
    double[] doubleArray0 = null;
    int int0 = 749;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector((double[]) null, 749, 0);
    // Undeclared exception!
    try {
        arrayRealVector0.mapPow(int0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public Iterator<Entry> sparseIterator() {
    return new SparseEntryIterator();
}","public void test07373() throws Throwable {
    double[] doubleArray0 = new double[6];
    double double0 = (-1786.816);
    doubleArray0[0] = (-1786.816);
    doubleArray0[1] = 1.0;
    doubleArray0[2] = (-1052.361);
    doubleArray0[3] = 0.0;
    double double1 = (-1315.875487);
    doubleArray0[4] = (-1315.875487);
    doubleArray0[5] = 2878.799066;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.mapUlp();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
    arrayRealVector0.getLInfDistance(arrayRealVector1);
    arrayRealVector0.sparseIterator();
    int int0 = 353;
    arrayRealVector0.checkIndex(353);
    arrayRealVector0.dotProduct(doubleArray0);
    arrayRealVector0.ebeMultiply(doubleArray0);
    int int1 = (-2277);
    ArrayRealVector arrayRealVector2 = null;
    // Undeclared exception!
    try {
        arrayRealVector0.sparseIterator();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // index 353 out of allowed range [0, 5]
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double getDistance(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return getDistance((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double sum = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v.getEntry(i);
            sum += delta * delta;
        }
        return Math.sqrt(sum);
    }
}","public void test07474() throws Throwable {
    Double[] doubleArray0 = new Double[1];
    Double double0 = new Double(1.0E-12);
    doubleArray0[0] = double0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    double[] doubleArray1 = new double[3];
    doubleArray1[0] = 1.0E-12;
    doubleArray1[1] = (-222.2036088569351);
    doubleArray1[2] = 1.0E-12;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
    arrayRealVector2.projection(doubleArray1);
    arrayRealVector2.getDistance((RealVector) arrayRealVector1);
}","/**
 * {@inheritDoc}
 */"
"public double dotProduct(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return dotProduct((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double dot = 0;
        Iterator<Entry> it = v.sparseIterator();
        Entry e;
        while (it.hasNext() && (e = it.next()) != null) {
            dot += data[e.getIndex()] * e.getValue();
        }
        return dot;
    }
}","public void test07575() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-825.567);
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1.0;
    doubleArray0[3] = (-2955.331419504);
    doubleArray0[4] = (-1.0);
    doubleArray0[5] = 0.0;
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
    ArrayRealVector arrayRealVector3 = new ArrayRealVector((RealVector) arrayRealVector2);
    arrayRealVector3.dotProduct((RealVector) arrayRealVector1);
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector(double[] v1, ArrayRealVector v2) {
    final int l1 = v1.length;
    final int l2 = v2.getDimension();
    data = new double[l1 + l2];
    System.arraycopy(v1, 0, data, 0, l1);
    System.arraycopy(v2.data, 0, data, l1, l2);
}","public void test07676() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    arrayRealVector0.subtract(doubleArray0);
    ArrayRealVector arrayRealVector1 = null;
    try {
        arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 2 but expected 1
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 first vector (will be put in front of the new vector)
 * @param v2 second vector (will be put at back of the new vector)
 */"
"public ArrayRealVector(ArrayRealVector v) {
    this(v, true);
}","public void test07777() throws Throwable {
    ArrayRealVector arrayRealVector0 = null;
    ArrayRealVector arrayRealVector1 = null;
    try {
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector from another vector, using a deep copy.
 * @param v vector to copy
 */"
"public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
    data = new double[v1.data.length + v2.data.length];
    System.arraycopy(v1.data, 0, data, 0, v1.data.length);
    System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
}","public void test07878() throws Throwable {
    int int0 = 94;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(94);
    double[] doubleArray0 = new double[1];
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
    arrayRealVector1.mapSin();
    ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
    arrayRealVector2.mapExp();
    doubleArray0[0] = (double) 94;
    arrayRealVector0.add(doubleArray0);
    ArrayRealVector arrayRealVector3 = null;
    try {
        arrayRealVector3 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 94 but expected 1
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 first vector (will be put in front of the new vector)
 * @param v2 second vector (will be put at back of the new vector)
 */"
"public AbstractRealVector copy() {
    return new ArrayRealVector(this, true);
}","public void test07979() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (-3414.006391140871);
    doubleArray0[1] = 0.0;
    doubleArray0[2] = (-502.4122467658);
    doubleArray0[3] = 1661.99393660041;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.isInfinite();
    int int0 = 7654;
    arrayRealVector0.mapMultiply(2334.00551443673);
    RealVector realVector0 = arrayRealVector0.append(0.0);
    arrayRealVector0.checkVectorDimensions(realVector0);
    arrayRealVector0.checkVectorDimensions(int0);
    RealVector realVector1 = null;
    arrayRealVector0.subtract(realVector1);
    arrayRealVector0.unitVector();
    // Undeclared exception!
    try {
        arrayRealVector0.copy();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 4 but expected 5
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double getDistance(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double sum = 0;
    for (int i = 0; i < data.length; ++i) {
        final double delta = data[i] - v[i];
        sum += delta * delta;
    }
    return Math.sqrt(sum);
}","public void test08080() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(3525, 1.0);
    arrayRealVector0.mapExpm1();
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3525, 3525);
    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1659);
    arrayRealVector0.append((RealVector) openMapRealVector1);
    arrayRealVector0.mapCosToSelf();
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 1.0E-12;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = (double) 3525;
    doubleArray0[3] = 1.0E-12;
    doubleArray0[4] = 1.0E-12;
    doubleArray0[5] = (double) 3525;
    arrayRealVector0.getDistance(doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapLog10ToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.log10(data[i]);
    }
    return this;
}","public void test08181() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = (-1722.469731329125);
    doubleArray0[2] = (-2393.4920197687);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    arrayRealVector0.mapExp();
    arrayRealVector0.copy();
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1722.469731329125));
    openMapRealVector0.getLInfNorm();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
    arrayRealVector2.iterator();
    openMapRealVector0.getLInfDistance(doubleArray0);
    arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
    // Undeclared exception!
    try {
        arrayRealVector0.mapLog10ToSelf();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 3 but expected 6
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector ebeDivide(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double[] out = data.clone();
    for (int i = 0; i < data.length; i++) {
        out[i] /= v[i];
    }
    return new ArrayRealVector(out, false);
}","public void test08282() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    arrayRealVector0.mapAtanToSelf();
    arrayRealVector0.isNaN();
    Double[] doubleArray0 = new Double[9];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double(332.12);
    doubleArray0[1] = double1;
    Double double2 = new Double(1501.618564);
    doubleArray0[2] = double2;
    Double double3 = new Double(1501.618564);
    doubleArray0[3] = double3;
    Double double4 = new Double(0.0);
    doubleArray0[4] = double4;
    Double double5 = new Double((double) doubleArray0[0]);
    doubleArray0[5] = double5;
    Double double6 = new Double(1.0);
    Double.max((-1.0), 1949.502744);
    doubleArray0[6] = double6;
    Double double7 = new Double(1191.623989844874);
    doubleArray0[7] = double7;
    Double double8 = new Double((double) doubleArray0[4]);
    doubleArray0[8] = double8;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1191.623989844874);
    arrayRealVector0.append((RealVector) openMapRealVector0);
    double[] doubleArray1 = new double[8];
    doubleArray1[0] = (double) doubleArray0[3];
    doubleArray1[1] = (double) doubleArray0[6];
    doubleArray1[2] = (-1.0);
    doubleArray1[3] = (double) doubleArray0[8];
    doubleArray1[4] = 1949.502744;
    doubleArray1[5] = 1191.623989844874;
    doubleArray1[6] = (double) doubleArray0[8];
    doubleArray1[7] = (double) doubleArray0[1];
    arrayRealVector0.ebeDivide(doubleArray1);
}","/**
 * {@inheritDoc}
 */"
"public int getDimension() {
    return data.length;
}","public void test08383() throws Throwable {
    double[] doubleArray0 = new double[0];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    double[] doubleArray1 = new double[8];
    doubleArray1[0] = 0.0;
    doubleArray1[1] = 0.0;
    doubleArray1[2] = (-2590.088638766679);
    doubleArray1[3] = (-150.2897781425);
    doubleArray1[4] = 137.039594;
    doubleArray1[5] = (-2094.989);
    doubleArray1[6] = 1606.821;
    doubleArray1[7] = Double.NaN;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1);
    arrayRealVector0.getLInfDistance(arrayRealVector1);
    double double0 = 0.0;
    arrayRealVector0.set(double0);
    arrayRealVector0.getDimension();
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapSubtractToSelf(double d) {
    for (int i = 0; i < data.length; i++) {
        data[i] = data[i] - d;
    }
    return this;
}","public void test08484() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = (-276.3253894365);
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (-35.994627665);
    doubleArray0[4] = (-1082.256);
    doubleArray0[5] = (-1.0);
    doubleArray0[6] = (-3075.4406);
    doubleArray0[7] = (-589.0);
    doubleArray0[8] = 2241.995179940587;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
    arrayRealVector0.mapSubtractToSelf(0.0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapCeilToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.ceil(data[i]);
    }
    return this;
}","public void test08585() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = 2710.792;
    doubleArray0[1] = (-1.0);
    doubleArray0[2] = 723.4351799826737;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-1.0);
    doubleArray0[5] = (-2120.118954);
    doubleArray0[6] = (-752.19792);
    doubleArray0[7] = 1.0;
    doubleArray0[8] = 826.710169485;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    arrayRealVector0.mapCeilToSelf();
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector(ArrayRealVector v) {
    this(v, true);
}","public void test08686() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
    RealVector realVector0 = null;
    arrayRealVector0.getL1Distance((RealVector) null);
    ArrayRealVector arrayRealVector1 = null;
    try {
        arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector from another vector, using a deep copy.
 * @param v vector to copy
 */"
"public double dotProduct(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double dot = 0;
    for (int i = 0; i < data.length; i++) {
        dot += data[i] * v[i];
    }
    return dot;
}","public void test08787() throws Throwable {
    int int0 = 1926;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(1926, 1926);
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 1926;
    doubleArray0[1] = (double) 1926;
    doubleArray0[2] = (double) 1926;
    doubleArray0[3] = (double) 1926;
    doubleArray0[4] = (double) 1926;
    doubleArray0[5] = (double) 1926;
    doubleArray0[6] = (double) 1926;
    doubleArray0[7] = (double) 1926;
    try {
        arrayRealVector0.dotProduct(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 1,926 but expected 8
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector subtract(ArrayRealVector v) throws IllegalArgumentException {
    return (ArrayRealVector) subtract(v.data);
}","public void test08888() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(37);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
    double[] doubleArray0 = null;
    arrayRealVector0.mapTan();
    arrayRealVector1.setSubVector(37, (double[]) null);
    arrayRealVector1.getLInfDistance(arrayRealVector0);
    // Undeclared exception!
    try {
        arrayRealVector0.subtract(arrayRealVector1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Compute this minus v.
 * @param v vector to be subtracted
 * @return this + v
 * @throws IllegalArgumentException if v is not the same size as this
 */"
"protected void checkIndex(final int index) throws MatrixIndexException {
    if (index < 0 || index >= getDimension()) {
        throw new MatrixIndexException(""index {0} out of allowed range [{1}, {2}]"", index, 0, getDimension() - 1);
    }
}","public void test08989() throws Throwable {
    int int0 = 0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
    arrayRealVector0.mapAcosToSelf();
    arrayRealVector0.mapCeil();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(0, 0);
    arrayRealVector1.mapAbs();
    arrayRealVector1.getL1Distance((RealVector) null);
    // Undeclared exception!
    try {
        arrayRealVector1.checkIndex(int0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Check if an index is valid.
 * @param index index to check
 * @exception MatrixIndexException if index is not valid
 */"
"public RealVector mapLog10ToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.log10(data[i]);
    }
    return this;
}","public void test09090() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (-1545.520046);
    doubleArray0[1] = 2124.849092079451;
    doubleArray0[2] = (-3777.693964323415);
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 0.0;
    doubleArray0[5] = (-1.0);
    doubleArray0[6] = 1.0;
    doubleArray0[7] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.mapLog10ToSelf();
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapCoshToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.cosh(data[i]);
    }
    return this;
}","public void test09191() throws Throwable {
    Double[] doubleArray0 = new Double[5];
    Double double0 = new Double(573.204);
    doubleArray0[0] = double0;
    Double double1 = new Double(0.0);
    doubleArray0[1] = double1;
    Double double2 = new Double(573.204);
    doubleArray0[2] = double2;
    Double.min(0.0, 3375.0);
    Double.max(2.2250738585072014E-308, (double) doubleArray0[2]);
    Double double3 = new Double((-452.541116274));
    doubleArray0[3] = double3;
    Double.isFinite((-683.5635282516045));
    Double.sum((double) doubleArray0[1], 1641.0);
    Double double4 = new Double((double) doubleArray0[1]);
    Double.isFinite((double) doubleArray0[0]);
    doubleArray0[4] = double4;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    Double.min(573.204, (-159.17772287));
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    arrayRealVector1.mapLog1pToSelf();
    arrayRealVector0.mapExp();
    RealVector realVector0 = arrayRealVector1.mapAcosToSelf();
    arrayRealVector0.getDistance(arrayRealVector1);
    arrayRealVector1.outerProduct(arrayRealVector0);
    arrayRealVector1.subtract(realVector0);
    arrayRealVector1.mapSignumToSelf();
    arrayRealVector1.mapCoshToSelf();
}","/**
 * {@inheritDoc}
 */"
"public int getDimension() {
    return data.length;
}","public void test09393() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 1.0E-12;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
    arrayRealVector2.getDimension();
}","/**
 * {@inheritDoc}
 */"
"public RealVector ebeDivide(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double[] out = data.clone();
    for (int i = 0; i < data.length; i++) {
        out[i] /= v[i];
    }
    return new ArrayRealVector(out, false);
}","public void test09494() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(20);
    arrayRealVector0.mapCbrtToSelf();
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = (double) 20;
    doubleArray0[1] = (double) 20;
    doubleArray0[2] = (double) 20;
    doubleArray0[3] = (double) 20;
    doubleArray0[4] = (double) 20;
    doubleArray0[5] = (double) 20;
    doubleArray0[6] = (double) 20;
    doubleArray0[7] = (double) 20;
    doubleArray0[8] = (double) 20;
    arrayRealVector0.ebeDivide(doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapAddToSelf(double d) {
    for (int i = 0; i < data.length; i++) {
        data[i] = data[i] + d;
    }
    return this;
}","public void test09595() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-719.4665661317331);
    doubleArray0[1] = 1043.70648;
    double double0 = 0.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 1536.918579182796;
    doubleArray0[4] = 2412.7751052;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    arrayRealVector0.append((ArrayRealVector) null);
    arrayRealVector0.outerProduct(doubleArray0);
    arrayRealVector0.append(doubleArray0);
    arrayRealVector0.getLInfNorm();
    arrayRealVector0.mapTanToSelf();
    // Undeclared exception!
    try {
        arrayRealVector0.mapAddToSelf(double0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapTanhToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.tanh(data[i]);
    }
    return this;
}","public void test09696() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    openMapRealVector0.mapTanhToSelf();
    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
    openMapRealVector1.getData();
    arrayRealVector0.add((RealVector) openMapRealVector1);
    // Undeclared exception!
    try {
        arrayRealVector0.mapTanhToSelf();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector must have at least one element
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapAbsToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.abs(data[i]);
    }
    return this;
}","public void test09797() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-242.9882);
    doubleArray0[1] = (-1578.8);
    doubleArray0[2] = (-4663.639503);
    doubleArray0[3] = (-1270.0);
    doubleArray0[4] = 2.2250738585072014E-308;
    doubleArray0[5] = (-1291.416448259596);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
    arrayRealVector0.getSubVector(0, 0);
    arrayRealVector0.mapAbsToSelf();
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null || !(other instanceof RealVector)) {
        return false;
    }
    RealVector rhs = (RealVector) other;
    if (data.length != rhs.getDimension()) {
        return false;
    }
    if (rhs.isNaN()) {
        return this.isNaN();
    }
    for (int i = 0; i < data.length; ++i) {
        if (data[i] != rhs.getEntry(i)) {
            return false;
        }
    }
    return true;
}","public void test09898() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = 2.2250738585072014E-308;
    doubleArray0[1] = 1120.0167681;
    doubleArray0[2] = 1898.5617328819;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-1387.250405);
    doubleArray0[5] = (-731.847222913);
    doubleArray0[6] = 0.0;
    doubleArray0[7] = 1.0E-12;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    arrayRealVector0.mapCoshToSelf();
    arrayRealVector0.getSubVector(2, 2);
    Object object0 = new Object();
    arrayRealVector0.equals(object0);
}","/**
 * Test for the equality of two real vectors.
 * <p>
 * If all coordinates of two real vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two real vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * real vector are equal to <code>Double.NaN</code>, the real vector is equal to
 * a vector with all <code>Double.NaN</code> coordinates.
 * </p>
 *
 * @param other Object to test for equality to this
 * @return true if two vector objects are equal, false if
 *         object is null, not an instance of RealVector, or
 *         not equal to this RealVector instance
 */"
"public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return ebeMultiply((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double[] out = data.clone();
        for (int i = 0; i < data.length; i++) {
            out[i] *= v.getEntry(i);
        }
        return new ArrayRealVector(out, false);
    }
}","public void test09999() throws Throwable {
    double[] doubleArray0 = new double[1];
    double double0 = (-1.0);
    doubleArray0[0] = (-1.0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    boolean boolean0 = true;
    Double[] doubleArray1 = new Double[0];
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1);
    arrayRealVector1.mapSin();
    try {
        arrayRealVector0.ebeMultiply((RealVector) arrayRealVector1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 1 but expected 0
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector add(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double[] out = data.clone();
    for (int i = 0; i < data.length; i++) {
        out[i] += v[i];
    }
    return new ArrayRealVector(out, false);
}","public void test100100() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = 198.200051;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1683.279;
    doubleArray0[3] = (-1.0);
    doubleArray0[4] = 0.5;
    doubleArray0[5] = 3868.739285;
    doubleArray0[6] = 2348.140665;
    doubleArray0[7] = Double.NEGATIVE_INFINITY;
    doubleArray0[8] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
    double double0 = (-1788.455);
    arrayRealVector0.ebeDivide(doubleArray0);
    RealVector realVector0 = null;
    arrayRealVector0.dotProduct((RealVector) null);
    arrayRealVector0.mapDivideToSelf(double0);
    arrayRealVector0.outerProduct(realVector0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    arrayRealVector1.dotProduct(doubleArray0);
    int int0 = 0;
    arrayRealVector1.checkIndex(int0);
    arrayRealVector0.outerProduct((RealVector) arrayRealVector1);
    arrayRealVector0.mapLogToSelf();
    arrayRealVector0.dotProduct(doubleArray0);
    // Undeclared exception!
    try {
        arrayRealVector1.add(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"protected void checkVectorDimensions(int n) throws IllegalArgumentException {
    if (data.length != n) {
        throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"", data.length, n);
    }
}","public void test101101() throws Throwable {
    int int0 = 0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
    arrayRealVector0.getNorm();
    arrayRealVector0.mapAsinToSelf();
    RealVector realVector0 = arrayRealVector0.mapAddToSelf((-2978.30696652));
    arrayRealVector0.projection(realVector0);
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 0;
    doubleArray0[1] = 2565.3156;
    doubleArray0[2] = (-2978.30696652);
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (double) 0;
    doubleArray0[5] = 0.0;
    doubleArray0[6] = (double) 0;
    doubleArray0[7] = (double) 0;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
    arrayRealVector0.getLInfDistance(arrayRealVector1);
    arrayRealVector0.mapAsinToSelf();
    try {
        arrayRealVector0.checkVectorDimensions(int0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 0 but expected 8
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Check if instance dimension is equal to some expected value.
 *
 * @param n expected dimension.
 * @exception IllegalArgumentException if the dimension is
 * inconsistent with vector size
 */"
"public ArrayRealVector ebeDivide(ArrayRealVector v) throws IllegalArgumentException {
    return (ArrayRealVector) ebeDivide(v.data);
}","public void test102102() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 3814.297228531;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
    ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, arrayRealVector2);
    ArrayRealVector arrayRealVector4 = new ArrayRealVector(arrayRealVector3, false);
    arrayRealVector4.setEntry(16, 3814.297228531);
    arrayRealVector4.ebeDivide(arrayRealVector0);
}","/**
 * Element-by-element division.
 * @param v vector by which instance elements must be divided
 * @return a vector containing this[i] / v[i] for all i
 * @throws IllegalArgumentException if v is not the same size as this
 */"
"public RealVector mapDivide(double d) {
    return copy().mapDivideToSelf(d);
}","public void test103103() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (-1.0);
    doubleArray0[1] = 2587.4380300184325;
    doubleArray0[2] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.append(2587.4380300184325);
    RealVector realVector0 = arrayRealVector0.mapExp();
    arrayRealVector0.hashCode();
    arrayRealVector0.getLInfDistance(realVector0);
    arrayRealVector0.isNaN();
    arrayRealVector0.data = doubleArray0;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    arrayRealVector1.add(arrayRealVector0);
    arrayRealVector1.append((RealVector) arrayRealVector0);
    double double0 = (-1395.828743020574);
    // Undeclared exception!
    try {
        arrayRealVector1.mapDivide(double0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 6 but expected 3
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public Iterator<Entry> sparseIterator() {
    return new SparseEntryIterator();
}","public void test106106() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    arrayRealVector0.hashCode();
    double[] doubleArray0 = new double[2];
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    arrayRealVector0.dotProduct(arrayRealVector1);
    arrayRealVector0.mapInv();
    double double0 = (-1.0);
    // Undeclared exception!
    try {
        arrayRealVector0.sparseIterator();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public void set(int index, ArrayRealVector v) throws MatrixIndexException {
    setSubVector(index, v.data);
}","public void test107107() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-139.2));
    arrayRealVector0.getL1Norm();
    arrayRealVector0.mapInvToSelf();
    Double[] doubleArray0 = new Double[5];
    Double double0 = new Double((-1241.30981433));
    doubleArray0[0] = double0;
    Double double1 = new Double((-2113.2203204905));
    doubleArray0[1] = double1;
    Double double2 = new Double(0.0);
    doubleArray0[2] = double2;
    Double double3 = new Double(0.0);
    doubleArray0[3] = double3;
    Double double4 = new Double((-1.0));
    doubleArray0[4] = double4;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.set(0, arrayRealVector1);
}","/**
 * Set a set of consecutive elements.
 *
 * @param index index of first element to be set.
 * @param v vector containing the values to set.
 * @exception MatrixIndexException if the index is
 * inconsistent with vector size
 */"
"public UnivariateRealFunction derivative() {
    return polynomialDerivative();
}","public void test108108() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (-2773.93665084178);
    double double0 = (-1.0);
    doubleArray0[1] = (-1.0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
    ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
    ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    arrayRealVector3.mapAsinToSelf();
    int int0 = 2;
    arrayRealVector3.checkVectorDimensions(2);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    arrayRealVector0.ebeDivide(arrayRealVector2);
    // Undeclared exception!
    try {
        polynomialFunction0.derivative();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 4 but expected 2
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Returns the derivative as a UnivariateRealFunction
 *
 * @return  the derivative function
 */"
"public RealVector mapFloorToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.floor(data[i]);
    }
    return this;
}","public void test109109() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    arrayRealVector1.mapFloorToSelf();
}","/**
 * {@inheritDoc}
 */"
"public RealVector append(double[] in) {
    return new ArrayRealVector(this, in);
}","public void test110110() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    arrayRealVector0.mapAtan();
    arrayRealVector0.getL1Norm();
    arrayRealVector0.append(doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector(RealVector v) {
    data = new double[v.getDimension()];
    for (int i = 0; i < data.length; ++i) {
        data[i] = v.getEntry(i);
    }
}","public void test111111() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-1.0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    arrayRealVector0.toString();
    arrayRealVector1.getL1Distance(doubleArray0);
    ArrayRealVector arrayRealVector2 = null;
    try {
        arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 2 but expected 1
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Construct a vector from another vector, using a deep copy.
 * @param v vector to copy
 */"
"public RealVector mapSqrt() {
    return copy().mapSqrtToSelf();
}","public void test114114() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    double[] doubleArray0 = new double[0];
    arrayRealVector0.getLInfDistance(doubleArray0);
    arrayRealVector0.checkVectorDimensions(5);
    // Undeclared exception!
    try {
        arrayRealVector0.mapSqrt();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 0 but expected 5
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealMatrix outerProduct(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return outerProduct((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        final int m = data.length;
        final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data.length; j++) {
                out.setEntry(i, j, data[i] * v.getEntry(j));
            }
        }
        return out;
    }
}","public void test115115() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 355.265118368;
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = 1057.417269;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = (-1.0);
    doubleArray0[5] = (-538.959745139);
    doubleArray0[6] = (-1611.65407);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1475), 0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    int int0 = 4920;
    arrayRealVector1.subtract(doubleArray0);
    arrayRealVector1.setSubVector(int0, doubleArray0);
    RealVector realVector0 = arrayRealVector0.mapLog1pToSelf();
    RealVector realVector1 = arrayRealVector1.ebeDivide(realVector0);
    arrayRealVector0.mapAcosToSelf();
    arrayRealVector0.outerProduct(realVector1);
}","/**
 * {@inheritDoc}
 */"
"public Iterator<Entry> sparseIterator() {
    return new SparseEntryIterator();
}","public void test116116() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-522));
    openMapRealVector0.mapFloorToSelf();
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
    // Undeclared exception!
    try {
        arrayRealVector0.sparseIterator();
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapCosToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.cos(data[i]);
    }
    return this;
}","public void test117117() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1108, 1108);
    openMapRealVector0.copy();
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
    arrayRealVector0.mapExpm1();
    arrayRealVector0.mapAdd(1108);
    openMapRealVector0.mapSinhToSelf();
    arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
    double[] doubleArray0 = null;
    arrayRealVector0.projection((double[]) null);
    // Undeclared exception!
    try {
        arrayRealVector0.mapCosToSelf();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double dotProduct(ArrayRealVector v) throws IllegalArgumentException {
    return dotProduct(v.data);
}","public void test118118() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (-1035.5657);
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = (-999.952416860404);
    doubleArray0[3] = 1.0;
    doubleArray0[4] = (-1495.2848072);
    doubleArray0[5] = (-277.1882450848735);
    doubleArray0[6] = 244.6;
    doubleArray0[7] = 1808.349;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(0);
    arrayRealVector0.dotProduct(arrayRealVector1);
}","/**
 * Compute the dot product.
 * @param v vector with which dot product should be computed
 * @return the scalar dot product between instance and v
 * @exception IllegalArgumentException if v is not the same size as this
 */"
"public RealVector mapLog() {
    return copy().mapLogToSelf();
}","public void test119119() throws Throwable {
    Double[] doubleArray0 = new Double[5];
    Double double0 = Double.valueOf(1141.288969656497);
    doubleArray0[0] = double0;
    double double1 = 1577.63635433;
    Double double2 = new Double(1577.63635433);
    doubleArray0[1] = double2;
    Double double3 = new Double((double) doubleArray0[1]);
    Double.isFinite((double) doubleArray0[0]);
    doubleArray0[2] = double3;
    Double double4 = new Double(1577.63635433);
    doubleArray0[3] = double4;
    Double double5 = new Double(1697.834);
    Double.min((-1385.522647566323), 0.0);
    doubleArray0[4] = double5;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    arrayRealVector1.getL1Distance((RealVector) arrayRealVector0);
    Double.isFinite(double1);
    double double6 = 0.0;
    Double.sum((double) doubleArray0[1], double6);
    // Undeclared exception!
    try {
        arrayRealVector1.mapLog();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 10 but expected 5
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector ebeMultiply(ArrayRealVector v) throws IllegalArgumentException {
    return (ArrayRealVector) ebeMultiply(v.data);
}","public void test120120() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    arrayRealVector0.mapSin();
    arrayRealVector0.getL1Distance(arrayRealVector0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector();
    arrayRealVector1.mapAddToSelf(0.0);
    arrayRealVector1.checkVectorDimensions(arrayRealVector0);
    arrayRealVector1.mapTan();
    try {
        arrayRealVector1.ebeMultiply(arrayRealVector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector must have at least one element
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Element-by-element multiplication.
 * @param v vector by which instance elements must be multiplied
 * @return a vector containing this[i] * v[i] for all i
 * @exception IllegalArgumentException if v is not the same size as this
 */"
"public void setSubVector(int index, double[] v) {
    try {
        System.arraycopy(v, 0, data, index, v.length);
    } catch (IndexOutOfBoundsException e) {
        checkIndex(index);
        checkIndex(index + v.length - 1);
    }
}","public void test121121() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
    arrayRealVector2.setSubVector(0, doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public double[] toArray() {
    return data.clone();
}","public void test122122() throws Throwable {
    Double[] doubleArray0 = new Double[7];
    Double double0 = Double.valueOf(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double(Double.NEGATIVE_INFINITY);
    doubleArray0[1] = double1;
    Double double2 = new Double((double) doubleArray0[0]);
    doubleArray0[2] = double2;
    Double double3 = new Double(Double.NEGATIVE_INFINITY);
    doubleArray0[3] = double3;
    Double double4 = new Double((double) doubleArray0[1]);
    doubleArray0[4] = double4;
    Double double5 = new Double((-200.705975770072));
    doubleArray0[5] = double5;
    Double double6 = new Double((-982.3042678946));
    doubleArray0[6] = double6;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.toArray();
}","/**
 * {@inheritDoc}
 */"
"public RealVector unitVector() throws ArithmeticException {
    final double norm = getNorm();
    if (norm == 0) {
        throw MathRuntimeException.createArithmeticException(""zero norm"");
    }
    return mapDivide(norm);
}","public void test123123() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    int int0 = (-1645);
    double[] doubleArray0 = new double[1];
    try {
        arrayRealVector0.unitVector();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero norm
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public void set(int index, ArrayRealVector v) throws MatrixIndexException {
    setSubVector(index, v.data);
}","public void test124124() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = (-1802.28197594);
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (-2678.78053);
    doubleArray0[4] = 0.0;
    doubleArray0[5] = 0.0;
    doubleArray0[6] = 952.90338946996;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    arrayRealVector1.set(9, arrayRealVector0);
}","/**
 * Set a set of consecutive elements.
 *
 * @param index index of first element to be set.
 * @param v vector containing the values to set.
 * @exception MatrixIndexException if the index is
 * inconsistent with vector size
 */"
"public RealVector getSubVector(int index, int n) {
    ArrayRealVector out = new ArrayRealVector(n);
    try {
        System.arraycopy(data, index, out.data, 0, n);
    } catch (IndexOutOfBoundsException e) {
        checkIndex(index);
        checkIndex(index + n - 1);
    }
    return out;
}","public void test125125() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    arrayRealVector1.mapRint();
    arrayRealVector0.projection(arrayRealVector1);
    arrayRealVector1.getSubVector(1627, 1627);
}","/**
 * {@inheritDoc}
 */"
"public void setSubVector(int index, RealVector v) {
    try {
        try {
            set(index, (ArrayRealVector) v);
        } catch (ClassCastException cce) {
            for (int i = index; i < index + v.getDimension(); ++i) {
                data[i] = v.getEntry(i - index);
            }
        }
    } catch (IndexOutOfBoundsException e) {
        checkIndex(index);
        checkIndex(index + v.getDimension() - 1);
    }
}","public void test127127() throws Throwable {
    Double[] doubleArray0 = new Double[7];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double((double) doubleArray0[0]);
    doubleArray0[1] = double1;
    Double double2 = new Double((double) doubleArray0[1]);
    doubleArray0[2] = double2;
    Double double3 = new Double((-682.62391));
    doubleArray0[3] = double3;
    Double double4 = new Double(Double.POSITIVE_INFINITY);
    doubleArray0[4] = double4;
    Double double5 = new Double(0.0);
    doubleArray0[5] = double5;
    Double double6 = new Double(0.0);
    doubleArray0[6] = double6;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, Double.POSITIVE_INFINITY);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
    double[] doubleArray1 = new double[5];
    doubleArray1[0] = Double.POSITIVE_INFINITY;
    doubleArray1[1] = (double) doubleArray0[2];
    doubleArray1[2] = 1.0E-12;
    doubleArray1[3] = 1.0E-12;
    doubleArray1[4] = (double) doubleArray0[2];
    ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, doubleArray1);
    arrayRealVector3.setSubVector(12, (RealVector) arrayRealVector0);
}","/**
 * {@inheritDoc}
 */"
"public RealVector getSubVector(int index, int n) {
    ArrayRealVector out = new ArrayRealVector(n);
    try {
        System.arraycopy(data, index, out.data, 0, n);
    } catch (IndexOutOfBoundsException e) {
        checkIndex(index);
        checkIndex(index + n - 1);
    }
    return out;
}","public void test128128() throws Throwable {
    double[] doubleArray0 = new double[0];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    int int0 = 120;
    arrayRealVector0.mapSin();
    arrayRealVector0.dotProduct(doubleArray0);
    // Undeclared exception!
    try {
        arrayRealVector0.getSubVector(120, 120);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // index 120 out of allowed range [0, -1]
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector projection(ArrayRealVector v) {
    return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));
}","public void test129129() throws Throwable {
    double[] doubleArray0 = new double[0];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
    arrayRealVector0.data = doubleArray0;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
    arrayRealVector1.hashCode();
    arrayRealVector1.mapUlpToSelf();
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0.data, doubleArray0);
    arrayRealVector1.projection(arrayRealVector2);
}","/**
 * Find the orthogonal projection of this vector onto another vector.
 * @param v vector onto which instance must be projected
 * @return projection of the instance onto v
 * @throws IllegalArgumentException if v is not the same size as this
 */"
"public double getDistance(ArrayRealVector v) throws IllegalArgumentException {
    return getDistance(v.data);
}","public void test130130() throws Throwable {
    int int0 = 3352;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(3352, 3352);
    double[] doubleArray0 = new double[0];
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
    arrayRealVector1.setSubVector(3352, doubleArray0);
    arrayRealVector1.projection((RealVector) arrayRealVector0);
    arrayRealVector0.subtract(arrayRealVector1);
    double[] doubleArray1 = new double[2];
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray1, arrayRealVector0);
    ArrayRealVector arrayRealVector3 = new ArrayRealVector((RealVector) arrayRealVector2, arrayRealVector0);
    try {
        arrayRealVector1.getDistance(arrayRealVector3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 3,352 but expected 6,706
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Distance between two vectors.
 * <p>This method computes the distance consistent with the
 * L<sub>2</sub> norm, i.e. the square root of the sum of
 * elements differences, or euclidian distance.</p>
 * @param v vector to which distance is requested
 * @return distance between two vectors.
 * @exception IllegalArgumentException if v is not the same size as this
 * @see #getDistance(RealVector)
 * @see #getL1Distance(ArrayRealVector)
 * @see #getLInfDistance(ArrayRealVector)
 * @see #getNorm()
 */"
"public RealVector mapTanhToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.tanh(data[i]);
    }
    return this;
}","public void test131131() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector();
    arrayRealVector0.mapMultiplyToSelf(22);
    arrayRealVector0.mapPowToSelf(3507);
    arrayRealVector0.set((double) 22);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3507, 22);
    arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
    arrayRealVector0.unitize();
    // Undeclared exception!
    try {
        arrayRealVector0.mapTanhToSelf();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 0 but expected 3,507
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector subtract(ArrayRealVector v) throws IllegalArgumentException {
    return (ArrayRealVector) subtract(v.data);
}","public void test132132() throws Throwable {
    Double[] doubleArray0 = new Double[7];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double((double) doubleArray0[0]);
    doubleArray0[1] = double1;
    Double double2 = new Double((double) doubleArray0[1]);
    doubleArray0[2] = double2;
    Double.min((-1.0), (double) doubleArray0[0]);
    Double double3 = new Double((-682.62391));
    doubleArray0[3] = double3;
    Double double4 = new Double(Double.POSITIVE_INFINITY);
    doubleArray0[4] = double4;
    Double double5 = new Double(0.0);
    doubleArray0[5] = double5;
    Double double6 = new Double(0.0);
    doubleArray0[6] = double6;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, Double.POSITIVE_INFINITY);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
    double[] doubleArray1 = new double[5];
    doubleArray1[0] = Double.POSITIVE_INFINITY;
    doubleArray1[1] = (double) doubleArray0[2];
    doubleArray1[2] = 1.0E-12;
    doubleArray1[3] = 1.0E-12;
    doubleArray1[4] = (double) doubleArray0[2];
    ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, doubleArray1);
    arrayRealVector3.setSubVector(12, (RealVector) arrayRealVector0);
    arrayRealVector2.subtract(arrayRealVector1);
}","/**
 * Compute this minus v.
 * @param v vector to be subtracted
 * @return this + v
 * @throws IllegalArgumentException if v is not the same size as this
 */"
"public RealVector mapCeilToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.ceil(data[i]);
    }
    return this;
}","public void test133133() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 0;
    doubleArray0[1] = (double) 0;
    doubleArray0[2] = (double) 0;
    doubleArray0[3] = (double) 0;
    doubleArray0[4] = (double) 0;
    arrayRealVector0.set(0.0);
    doubleArray0[5] = (-1676.8236);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0.0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    arrayRealVector1.mapCeilToSelf();
}","/**
 * {@inheritDoc}
 */"
"public double dotProduct(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double dot = 0;
    for (int i = 0; i < data.length; i++) {
        dot += data[i] * v[i];
    }
    return dot;
}","public void test134134() throws Throwable {
    Double[] doubleArray0 = new Double[8];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double(0.0);
    doubleArray0[1] = double1;
    Double double2 = new Double(Double.POSITIVE_INFINITY);
    doubleArray0[2] = double2;
    Double double3 = new Double(0.0);
    doubleArray0[3] = double3;
    Double double4 = new Double((-1.0));
    doubleArray0[4] = double4;
    Double double5 = new Double(371.2328123821);
    doubleArray0[5] = double5;
    Double double6 = new Double(1384.90217);
    doubleArray0[6] = double6;
    Double double7 = new Double(539.3);
    doubleArray0[7] = double7;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 3, 3);
    double[] doubleArray1 = new double[3];
    doubleArray1[0] = (double) doubleArray0[0];
    doubleArray1[1] = (double) doubleArray0[5];
    doubleArray1[2] = 1384.90217;
    arrayRealVector0.dotProduct(doubleArray1);
}","/**
 * {@inheritDoc}
 */"
"protected void checkVectorDimensions(int n) throws IllegalArgumentException {
    if (data.length != n) {
        throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"", data.length, n);
    }
}","public void test135135() throws Throwable {
    Double[] doubleArray0 = new Double[1];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
    arrayRealVector2.mapAcos();
    arrayRealVector2.mapTanToSelf();
    arrayRealVector0.checkVectorDimensions(0);
}","/**
 * Check if instance dimension is equal to some expected value.
 *
 * @param n expected dimension.
 * @exception IllegalArgumentException if the dimension is
 * inconsistent with vector size
 */"
"public RealVector mapSinh() {
    return copy().mapSinhToSelf();
}","public void test137137() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1655, 1655);
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = 1.0E-12;
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = (double) 1655;
    doubleArray0[3] = (double) 1655;
    doubleArray0[4] = (double) 1655;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    arrayRealVector0.getLInfDistance((RealVector) openMapRealVector0);
    // Undeclared exception!
    try {
        arrayRealVector0.mapSinh();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector length mismatch: got 10 but expected 1,655
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public void set(int index, ArrayRealVector v) throws MatrixIndexException {
    setSubVector(index, v.data);
}","public void test138138() throws Throwable {
    Double[] doubleArray0 = new Double[7];
    Double double0 = Double.valueOf(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double((double) doubleArray0[0]);
    doubleArray0[1] = doubleArray0[0];
    Double double2 = new Double((double) doubleArray0[0]);
    doubleArray0[2] = double2;
    Double double3 = new Double(Double.NEGATIVE_INFINITY);
    doubleArray0[3] = double3;
    Double double4 = new Double((double) doubleArray0[1]);
    doubleArray0[4] = double4;
    Double double5 = new Double((-200.705975770072));
    doubleArray0[5] = double5;
    Double double6 = new Double((-982.3042678946));
    doubleArray0[6] = double6;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.toArray();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
    arrayRealVector0.set(0, arrayRealVector1);
}","/**
 * Set a set of consecutive elements.
 *
 * @param index index of first element to be set.
 * @param v vector containing the values to set.
 * @exception MatrixIndexException if the index is
 * inconsistent with vector size
 */"
"public RealVector append(double[] in) {
    return new ArrayRealVector(this, in);
}","public void test139139() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1701.9072154086002;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = (-1.0);
    doubleArray0[5] = 1.0;
    doubleArray0[6] = 1988.654;
    doubleArray0[7] = (-1.0);
    doubleArray0[8] = (-3621.4380568188);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector();
    RealVector realVector0 = arrayRealVector1.mapSubtractToSelf(2884.11);
    arrayRealVector1.mapFloorToSelf();
    arrayRealVector0.getL1Distance(realVector0);
    double[] doubleArray1 = arrayRealVector1.getData();
    arrayRealVector1.append(0.0);
    arrayRealVector0.getLInfDistance(doubleArray1);
    arrayRealVector2.mapCoshToSelf();
    arrayRealVector0.append(doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public double getLInfDistance(double[] v) throws IllegalArgumentException {
    checkVectorDimensions(v.length);
    double max = 0;
    for (int i = 0; i < data.length; ++i) {
        final double delta = data[i] - v[i];
        max = Math.max(max, Math.abs(delta));
    }
    return max;
}","public void test140140() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (-2227.104140624);
    doubleArray0[1] = 1.0;
    doubleArray0[2] = 3483.0567179234795;
    doubleArray0[3] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
    arrayRealVector0.mapAbs();
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    polynomialFunction0.toString();
    polynomialFunction0.polynomialDerivative();
    UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
    arrayRealVector1.map(univariateRealFunction0);
    arrayRealVector1.append((RealVector) null);
    arrayRealVector1.ebeMultiply(doubleArray0);
    ArrayRealVector arrayRealVector2 = arrayRealVector1.subtract(arrayRealVector0);
    double double0 = 0.0;
    arrayRealVector2.mapSubtract(double0);
    // Undeclared exception!
    try {
        arrayRealVector1.getLInfDistance(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector mapTanToSelf() {
    for (int i = 0; i < data.length; i++) {
        data[i] = Math.tan(data[i]);
    }
    return this;
}","public void test141141() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 1.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 2.2250738585072014E-308;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 0.0;
    doubleArray0[5] = 0.0;
    doubleArray0[6] = 0.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    arrayRealVector0.outerProduct(doubleArray0);
    arrayRealVector0.mapTanToSelf();
}","/**
 * {@inheritDoc}
 */"
"public ArrayRealVector(double[] v1, double[] v2) {
    final int l1 = v1.length;
    final int l2 = v2.length;
    data = new double[l1 + l2];
    System.arraycopy(v1, 0, data, 0, l1);
    System.arraycopy(v2, 0, data, l1, l2);
}","public void test142142() throws Throwable {
    double[] doubleArray0 = new double[0];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
    arrayRealVector0.data = doubleArray0;
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
    arrayRealVector1.hashCode();
    arrayRealVector1.mapUlpToSelf();
    arrayRealVector1.add((ArrayRealVector) null);
    arrayRealVector1.mapTan();
    ArrayRealVector arrayRealVector2 = null;
    try {
        arrayRealVector2 = new ArrayRealVector(arrayRealVector0.data, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 first vector (will be put in front of the new vector)
 * @param v2 second vector (will be put at back of the new vector)
 */"
"public RealVector projection(RealVector v) {
    return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
}","public void test143143() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 1.0;
    doubleArray0[4] = 0.0;
    doubleArray0[5] = 0.0;
    doubleArray0[6] = 0.0;
    doubleArray0[7] = 3714.83433992244;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, true);
    arrayRealVector0.mapAcos();
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    ArrayRealVector arrayRealVector3 = new ArrayRealVector((RealVector) arrayRealVector0);
    ArrayRealVector arrayRealVector4 = arrayRealVector1.add(arrayRealVector3);
    arrayRealVector3.ebeDivide(doubleArray0);
    arrayRealVector4.mapAtanToSelf();
    arrayRealVector3.mapSubtract(2968.0);
    arrayRealVector1.copy();
    arrayRealVector4.projection((RealVector) arrayRealVector3);
}","/**
 * {@inheritDoc}
 */"
"public double getDistance(ArrayRealVector v) throws IllegalArgumentException {
    return getDistance(v.data);
}","public void test144144() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (-804.90969875198);
    doubleArray0[1] = 2788.6;
    doubleArray0[2] = (-2862.2365778617554);
    doubleArray0[3] = (-0.24);
    doubleArray0[4] = (-2449.689);
    doubleArray0[5] = (-1.0);
    doubleArray0[6] = 2672.05725224525;
    doubleArray0[7] = 1.0;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
    arrayRealVector0.getDistance((RealVector) arrayRealVector1);
    arrayRealVector1.equals(arrayRealVector0);
    ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
    arrayRealVector2.mapRintToSelf();
    arrayRealVector2.append(1.0);
    arrayRealVector0.getDistance(arrayRealVector2);
}","/**
 * Distance between two vectors.
 * <p>This method computes the distance consistent with the
 * L<sub>2</sub> norm, i.e. the square root of the sum of
 * elements differences, or euclidian distance.</p>
 * @param v vector to which distance is requested
 * @return distance between two vectors.
 * @exception IllegalArgumentException if v is not the same size as this
 * @see #getDistance(RealVector)
 * @see #getL1Distance(ArrayRealVector)
 * @see #getLInfDistance(ArrayRealVector)
 * @see #getNorm()
 */"
"public double getDistance(ArrayRealVector v) throws IllegalArgumentException {
    return getDistance(v.data);
}","public void test145145() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    ArrayRealVector arrayRealVector2 = (ArrayRealVector) arrayRealVector1.mapRint();
    ArrayRealVector arrayRealVector3 = arrayRealVector0.projection(arrayRealVector1);
    arrayRealVector1.getDistance(arrayRealVector2);
    arrayRealVector1.getSubVector(1627, 1627);
    // Undeclared exception!
    try {
        arrayRealVector2.getDistance(arrayRealVector3);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // index 1,627 out of allowed range [0, -1]
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealVector"", e);
    }
}","/**
 * Distance between two vectors.
 * <p>This method computes the distance consistent with the
 * L<sub>2</sub> norm, i.e. the square root of the sum of
 * elements differences, or euclidian distance.</p>
 * @param v vector to which distance is requested
 * @return distance between two vectors.
 * @exception IllegalArgumentException if v is not the same size as this
 * @see #getDistance(RealVector)
 * @see #getL1Distance(ArrayRealVector)
 * @see #getLInfDistance(ArrayRealVector)
 * @see #getNorm()
 */"
"public RealVector add(RealVector v) throws IllegalArgumentException {
    if (v instanceof ArrayRealVector) {
        return add((ArrayRealVector) v);
    } else {
        checkVectorDimensions(v);
        double[] out = data.clone();
        Iterator<Entry> it = v.sparseIterator();
        Entry e;
        while (it.hasNext() && (e = it.next()) != null) {
            out[e.getIndex()] += e.getValue();
        }
        return new ArrayRealVector(out, false);
    }
}","public void test146146() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    arrayRealVector0.mapCosh();
    RealVector realVector0 = arrayRealVector0.mapCbrtToSelf();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 2361.271607;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 2149.658474149;
    doubleArray0[3] = 1.0;
    arrayRealVector0.append(doubleArray0);
    arrayRealVector0.getDistance(arrayRealVector1);
    arrayRealVector1.mapExpToSelf();
    arrayRealVector0.getNorm();
    arrayRealVector1.add(realVector0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getNorm() {
    double sum = 0;
    for (double a : data) {
        sum += a * a;
    }
    return Math.sqrt(sum);
}","public void test147147() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = Double.POSITIVE_INFINITY;
    doubleArray0[1] = (-91.3);
    doubleArray0[2] = (-997.8068463188872);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    RealVector realVector0 = arrayRealVector0.mapAdd((-1211.0));
    arrayRealVector0.subtract(realVector0);
    arrayRealVector0.add(doubleArray0);
    arrayRealVector0.getDistance(doubleArray0);
    arrayRealVector0.mapAtan();
    RealVector realVector1 = arrayRealVector0.mapPowToSelf(0.0);
    RealVector realVector2 = arrayRealVector0.ebeDivide(realVector1);
    arrayRealVector0.mapDivideToSelf(1.0);
    arrayRealVector0.mapAtanToSelf();
    arrayRealVector0.getData();
    RealVector realVector3 = arrayRealVector0.mapLog1pToSelf();
    arrayRealVector0.add(realVector3);
    RealVector realVector4 = arrayRealVector0.mapDivideToSelf((-1406.543652677));
    realVector4.mapLog1p();
    arrayRealVector0.toString();
    arrayRealVector0.mapLogToSelf();
    arrayRealVector0.isInfinite();
    arrayRealVector0.subtract(realVector1);
    arrayRealVector0.copy();
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
    ArrayRealVector arrayRealVector2 = arrayRealVector0.projection(arrayRealVector1);
    arrayRealVector1.append(realVector2);
    ArrayRealVector arrayRealVector3 = new ArrayRealVector();
    ArrayRealVector arrayRealVector4 = new ArrayRealVector(arrayRealVector3, realVector2);
    arrayRealVector1.ebeDivide(arrayRealVector4);
    arrayRealVector2.getNorm();
}","/**
 * {@inheritDoc}
 */"
"public void setSubVector(int index, double[] v) {
    try {
        System.arraycopy(v, 0, data, index, v.length);
    } catch (IndexOutOfBoundsException e) {
        checkIndex(index);
        checkIndex(index + v.length - 1);
    }
}","public void test148148() throws Throwable {
    int int0 = 3;
    double double0 = 2501.1943011847;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 2501.1943011847);
    RealVector realVector0 = arrayRealVector0.mapInv();
    RealVector realVector1 = realVector0.mapTanToSelf();
    arrayRealVector0.equals(realVector1);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector();
    int int1 = 17;
    double[] doubleArray0 = new double[19];
    double double1 = 0.5;
    doubleArray0[0] = 0.5;
    // Undeclared exception!
    try {
        arrayRealVector1.setSubVector(17, doubleArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // index 17 out of allowed range [0, -1]
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RealVector append(double[] in) {
    return new ArrayRealVector(this, in);
}","public void test149149() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1701.9072154086002;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-1.0);
    doubleArray0[5] = 1.0;
    doubleArray0[6] = 1988.654;
    doubleArray0[7] = (-1.0);
    doubleArray0[8] = (-3621.4380568188);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector1);
    RealVector realVector0 = arrayRealVector1.mapSubtractToSelf(2884.11164461);
    arrayRealVector1.mapFloorToSelf();
    arrayRealVector0.getL1Distance(realVector0);
    double[] doubleArray1 = arrayRealVector1.getData();
    arrayRealVector1.append(0.0);
    arrayRealVector0.getLInfDistance(doubleArray1);
    arrayRealVector2.mapCoshToSelf();
    arrayRealVector0.append(doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public boolean isNaN() {
    for (double v : data) {
        if (Double.isNaN(v)) {
            return true;
        }
    }
    return false;
}","public void test150150() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (-4018.67328);
    doubleArray0[1] = (-1.0);
    doubleArray0[2] = (-4554.32);
    doubleArray0[3] = (-1132.803);
    doubleArray0[4] = 712.841913;
    doubleArray0[5] = (-1506.0525139);
    doubleArray0[6] = (-2449.689);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    arrayRealVector0.add(doubleArray0);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
    arrayRealVector0.getDistance((RealVector) openMapRealVector0);
    openMapRealVector0.subtract((RealVector) arrayRealVector0);
    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(arrayRealVector0);
    openMapRealVector1.mapLog1pToSelf();
    openMapRealVector1.mapSinh();
    openMapRealVector1.getNorm();
    openMapRealVector0.add((RealVector) openMapRealVector1);
    openMapRealVector0.mapSin();
    arrayRealVector0.mapAcos();
    arrayRealVector0.subtract(doubleArray0);
    arrayRealVector0.getDistance((RealVector) openMapRealVector0);
    arrayRealVector0.mapLog1p();
    arrayRealVector0.mapExpm1ToSelf();
    arrayRealVector0.mapSubtractToSelf(712.841913);
    arrayRealVector0.unitize();
    arrayRealVector0.getNorm();
    arrayRealVector0.mapInvToSelf();
    arrayRealVector0.isNaN();
}","/**
 * Returns true if any coordinate of this vector is NaN; false otherwise
 * @return  true if any coordinate of this vector is NaN; false otherwise
 */"
"public double dotProduct(ArrayRealVector v) throws IllegalArgumentException {
    return dotProduct(v.data);
}","public void test151151() throws Throwable {
    Double[] doubleArray0 = new Double[5];
    Double double0 = new Double(2672.05725224525);
    doubleArray0[0] = double0;
    Double double1 = new Double(2672.05725224525);
    doubleArray0[1] = double1;
    Double double2 = new Double((double) doubleArray0[1]);
    doubleArray0[2] = double2;
    Double double3 = new Double(1459.6506190951);
    doubleArray0[3] = double3;
    Double double4 = new Double(1.0);
    doubleArray0[4] = double4;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    double[] doubleArray1 = new double[0];
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, doubleArray1);
    arrayRealVector1.mapAsin();
    Double.max(1459.6506190951, (double) doubleArray0[2]);
    ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0, arrayRealVector1);
    arrayRealVector0.dotProduct((RealVector) arrayRealVector2);
    arrayRealVector0.getDataRef();
    arrayRealVector0.dotProduct(arrayRealVector2);
}","/**
 * Compute the dot product.
 * @param v vector with which dot product should be computed
 * @return the scalar dot product between instance and v
 * @exception IllegalArgumentException if v is not the same size as this
 */"
