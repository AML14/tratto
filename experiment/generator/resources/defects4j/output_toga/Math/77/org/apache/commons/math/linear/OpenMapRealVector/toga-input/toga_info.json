{
  "test2147" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2147() throws Throwable {\n    double[] doubleArray0 = new double[12];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);\n    openMapRealVector1.getDimension();\n}",
    "testName" : "test2147"
  },
  "test3475" : {
    "methodSignature" : "public double getL1Distance(OpenMapRealVector v)",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3475() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 3060.547789164;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(1, 1252);\n    openMapRealVector1.getL1Distance(openMapRealVector0);\n}",
    "testName" : "test3475"
  },
  "test2660" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2660() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test2660"
  },
  "test2146" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2146() throws Throwable {\n    double[] doubleArray0 = new double[12];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test2146"
  },
  "test4289" : {
    "methodSignature" : "public double getLInfDistance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4289() throws Throwable {\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(31, 2642.9524372);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);\n    openMapRealVector0.unitize();\n    double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);\n}",
    "testName" : "test4289"
  },
  "test1737" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1737() throws Throwable {\n    double[] doubleArray0 = new double[16];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);\n    openMapRealVector2.equals((Object) openMapRealVector0);\n}",
    "testName" : "test1737"
  },
  "test1738" : {
    "methodSignature" : "public OpenMapRealVector add(OpenMapRealVector v) throws IllegalArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1738() throws Throwable {\n    double[] doubleArray0 = new double[16];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);\n}",
    "testName" : "test1738"
  },
  "test0920" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0920() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test0920"
  },
  "test1736" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1736() throws Throwable {\n    double[] doubleArray0 = new double[16];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);\n    openMapRealVector2.getSparcity();\n}",
    "testName" : "test1736"
  },
  "test47100" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test47100() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.isNaN();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test47100"
  },
  "test50107" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test50107() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.setSubVector(0, doubleArray0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test50107"
  },
  "test47101" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test47101() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.isNaN();\n}",
    "testName" : "test47101"
  },
  "test55117" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55117() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.hashCode();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test55117"
  },
  "test2555" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2555() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test2555"
  },
  "test2554" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2554() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test2554"
  },
  "test4699" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4699() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-597.076839365));\n    boolean boolean0 = openMapRealVector0.isNaN();\n}",
    "testName" : "test4699"
  },
  "test1226" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1226() throws Throwable {\n    double[] doubleArray0 = new double[16];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test1226"
  },
  "test2556" : {
    "methodSignature" : "public OpenMapRealVector ebeDivide(double[] v) throws IllegalArgumentException",
    "methodName" : "ebeDivide",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2556() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);\n}",
    "testName" : "test2556"
  },
  "test61133" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test61133() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test61133"
  },
  "test3882" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3882() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test3882"
  },
  "test61132" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test61132() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test61132"
  },
  "test3881" : {
    "methodSignature" : "public double getLInfDistance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3881() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector0);\n}",
    "testName" : "test3881"
  },
  "test4698" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4698() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-597.076839365));\n    boolean boolean0 = openMapRealVector0.isNaN();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test4698"
  },
  "test61131" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test61131() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n}",
    "testName" : "test61131"
  },
  "test61130" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test61130() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test61130"
  },
  "test1227" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1227() throws Throwable {\n    double[] doubleArray0 = new double[16];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);\n    Double[] doubleArray1 = new Double[1];\n    doubleArray1[0] = (Double) openMapRealVector0.DEFAULT_ZERO_TOLERANCE;\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test1227"
  },
  "test49106" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test49106() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test49106"
  },
  "test4290" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4290() throws Throwable {\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(31, 2642.9524372);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);\n    openMapRealVector0.unitize();\n    double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test4290"
  },
  "test1633" : {
    "methodSignature" : "public RealVector add(RealVector v) throws IllegalArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1633() throws Throwable {\n    double[] doubleArray0 = new double[12];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add((RealVector) openMapRealVector0);\n}",
    "testName" : "test1633"
  },
  "test2045" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2045() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector();\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test2045"
  },
  "test2044" : {
    "methodSignature" : "public OpenMapRealVector append(RealVector v)",
    "methodName" : "append",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2044() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector();\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);\n}",
    "testName" : "test2044"
  },
  "test1634" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1634() throws Throwable {\n    double[] doubleArray0 = new double[12];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add((RealVector) openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test1634"
  },
  "test1635" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1635() throws Throwable {\n    double[] doubleArray0 = new double[12];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add((RealVector) openMapRealVector0);\n    realVector0.equals((Object) openMapRealVector0);\n}",
    "testName" : "test1635"
  },
  "test3779" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3779() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getLInfNorm();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test3779"
  },
  "test2967" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2967() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(Integer.MAX_VALUE, (-286.019692818355));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(Integer.MAX_VALUE).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue(1.0E-12);\n    openMapRealVector0.getSubVector(32, 32);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test2967"
  },
  "test0817" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0817() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.getDimension();\n}",
    "testName" : "test0817"
  },
  "test0818" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0818() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test0818"
  },
  "test002" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test002() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.0);\n    openMapRealVector0.getDimension();\n}",
    "testName" : "test002"
  },
  "test0819" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0819() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test0819"
  },
  "test4187" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4187() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(2146857538).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue(1.0E-12);\n    double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test4187"
  },
  "test53112" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test53112() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test53112"
  },
  "test4188" : {
    "methodSignature" : "public double getLInfDistance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4188() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(2146857538).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue(1.0E-12);\n    double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);\n}",
    "testName" : "test4188"
  },
  "test53113" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test53113() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);\n    openMapRealVector2.getSparcity();\n}",
    "testName" : "test53113"
  },
  "test2043" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2043() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector();\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);\n    openMapRealVector1.getDimension();\n}",
    "testName" : "test2043"
  },
  "test3374" : {
    "methodSignature" : "public double getL1Distance(OpenMapRealVector v)",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3374() throws Throwable {\n    double[] doubleArray0 = new double[12];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getL1Distance(openMapRealVector0);\n}",
    "testName" : "test3374"
  },
  "test53110" : {
    "methodSignature" : "public OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test53110() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);\n}",
    "testName" : "test53110"
  },
  "test3373" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3373() throws Throwable {\n    double[] doubleArray0 = new double[12];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getL1Distance(openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test3373"
  },
  "test53111" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test53111() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);\n    openMapRealVector2.equals((Object) openMapRealVector1);\n}",
    "testName" : "test53111"
  },
  "test58122" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test58122() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.equals((Object) null);\n}",
    "testName" : "test58122"
  },
  "test58123" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test58123() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.equals((Object) null);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test58123"
  },
  "test2451" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2451() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);\n    boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);\n}",
    "testName" : "test2451"
  },
  "test4596" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4596() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2593.85329175));\n    OpenMapRealVector openMapRealVector1 = (OpenMapRealVector) openMapRealVector0.mapPow((-2593.85329175));\n    boolean boolean0 = openMapRealVector1.isInfinite();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test4596"
  },
  "test2453" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2453() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);\n    boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test2453"
  },
  "test4597" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4597() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2593.85329175));\n    OpenMapRealVector openMapRealVector1 = (OpenMapRealVector) openMapRealVector0.mapPow((-2593.85329175));\n    boolean boolean0 = openMapRealVector1.isInfinite();\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test4597"
  },
  "test000" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test000"
  },
  "test001" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.0);\n    openMapRealVector1.getDimension();\n}",
    "testName" : "test001"
  },
  "test0716" : {
    "methodSignature" : "public void setSubVector(int index, RealVector v) throws MatrixIndexException",
    "methodName" : "setSubVector",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0716() throws Throwable {\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(31, 2642.9524372);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);\n    openMapRealVector0.setSubVector(31, (RealVector) arrayRealVector0);\n}",
    "testName" : "test0716"
  },
  "test4595" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4595() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2593.85329175));\n    OpenMapRealVector openMapRealVector1 = (OpenMapRealVector) openMapRealVector0.mapPow((-2593.85329175));\n    boolean boolean0 = openMapRealVector1.isInfinite();\n}",
    "testName" : "test4595"
  },
  "test3780" : {
    "methodSignature" : "public double getLInfNorm()",
    "methodName" : "getLInfNorm",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3780() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getLInfNorm();\n}",
    "testName" : "test3780"
  },
  "test3677" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3677() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test3677"
  },
  "test59124" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test59124() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.equals(\":/`q:0[Oe7aJ\");\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test59124"
  },
  "test1532" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1532() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    openMapRealVector0.add((RealVector) arrayRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test1532"
  },
  "test2865" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2865() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-37.594487));\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(1, 1);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test2865"
  },
  "test2864" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2864() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-37.594487));\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(1, 1);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test2864"
  },
  "test3678" : {
    "methodSignature" : "public double getL1Distance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3678() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);\n}",
    "testName" : "test3678"
  },
  "test59125" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test59125() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.equals(\":/`q:0[Oe7aJ\");\n}",
    "testName" : "test59125"
  },
  "test62134" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test62134() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);\n    boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);\n}",
    "testName" : "test62134"
  },
  "test2866" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2866() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-37.594487));\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(1, 1);\n    openMapRealVector1.getDimension();\n}",
    "testName" : "test2866"
  },
  "test62135" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test62135() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);\n    boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test62135"
  },
  "test025" : {
    "methodSignature" : "public OpenMapRealVector unitVector()",
    "methodName" : "unitVector",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.unitVector();\n}",
    "testName" : "test025"
  },
  "test3272" : {
    "methodSignature" : "public double getDistance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3272() throws Throwable {\n    ArrayRealVector arrayRealVector0 = new ArrayRealVector(31, 2642.9524372);\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);\n    double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);\n}",
    "testName" : "test3272"
  },
  "test4086" : {
    "methodSignature" : "public double getLInfDistance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4086() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue((-30));\n    double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);\n}",
    "testName" : "test4086"
  },
  "test4085" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4085() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue((-30));\n    double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test4085"
  },
  "test1941" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1941() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = (double) 5;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 5);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);\n    openMapRealVector1.getDimension();\n}",
    "testName" : "test1941"
  },
  "test1021" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test1021"
  },
  "test1022" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1022() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test1022"
  },
  "test1023" : {
    "methodSignature" : "public OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1023() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);\n}",
    "testName" : "test1023"
  },
  "test1024" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1024() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test1024"
  },
  "test0615" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0615() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2904.7477);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n}",
    "testName" : "test0615"
  },
  "test1429" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1429() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test1429"
  },
  "test60129" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test60129() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test60129"
  },
  "test1942" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1942() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = (double) 5;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 5);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test1942"
  },
  "test60128" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test60128() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test60128"
  },
  "test0612" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0612() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2904.7477);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test0612"
  },
  "test60127" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test60127() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.getDimension();\n}",
    "testName" : "test60127"
  },
  "test0613" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0613() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2904.7477);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test0613"
  },
  "test60126" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test60126() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n}",
    "testName" : "test60126"
  },
  "test0614" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0614() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2904.7477);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test0614"
  },
  "test48103" : {
    "methodSignature" : "int getColumnDimension()",
    "methodName" : "getColumnDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test48103() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);\n    realMatrix0.getColumnDimension();\n}",
    "testName" : "test48103"
  },
  "test48104" : {
    "methodSignature" : "int getRowDimension()",
    "methodName" : "getRowDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test48104() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);\n    realMatrix0.getRowDimension();\n}",
    "testName" : "test48104"
  },
  "test51108" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test51108() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));\n    openMapRealVector0.set((-30));\n    openMapRealVector0.getDimension();\n}",
    "testName" : "test51108"
  },
  "test48102" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test48102() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test48102"
  },
  "test013" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue((-30));\n    double double0 = openMapRealVector1.dotProduct(openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test013"
  },
  "test014" : {
    "methodSignature" : "public double dotProduct(OpenMapRealVector v) throws IllegalArgumentException",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014() throws Throwable {\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));\n    OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();\n    OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);\n    openMapRealVector_OpenMapEntry0.setValue((-30));\n    double double0 = openMapRealVector1.dotProduct(openMapRealVector0);\n}",
    "testName" : "test014"
  },
  "test4493" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4493() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    boolean boolean0 = openMapRealVector0.isInfinite();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test4493"
  },
  "test2350" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2350() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    openMapRealVector0.dotProduct(doubleArray0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test2350"
  },
  "test4494" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4494() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    boolean boolean0 = openMapRealVector0.isInfinite();\n}",
    "testName" : "test4494"
  },
  "test56119" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test56119() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test56119"
  },
  "test56118" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test56118() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);\n}",
    "testName" : "test56118"
  },
  "test57121" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test57121() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);\n}",
    "testName" : "test57121"
  },
  "test2763" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2763() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test2763"
  },
  "test2249" : {
    "methodSignature" : "public double dotProduct(OpenMapRealVector v) throws IllegalArgumentException",
    "methodName" : "dotProduct",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2249() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.dotProduct(openMapRealVector0);\n}",
    "testName" : "test2249"
  },
  "test2248" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2248() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.dotProduct(openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test2248"
  },
  "test1430" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1430() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test1430"
  },
  "test2762" : {
    "methodSignature" : "public OpenMapRealVector ebeMultiply(double[] v) throws IllegalArgumentException",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2762() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);\n}",
    "testName" : "test2762"
  },
  "test3576" : {
    "methodSignature" : "public double getL1Distance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getL1Distance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3576() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);\n}",
    "testName" : "test3576"
  },
  "test1431" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);\n    openMapRealVector1.equals((Object) openMapRealVector0);\n}",
    "testName" : "test1431"
  },
  "test2761" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2761() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test2761"
  },
  "test57120" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test57120() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test57120"
  },
  "test1839" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1839() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double[] doubleArray1 = new double[2];\n    doubleArray1[0] = (-1474.733152693);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);\n    openMapRealVector2.getSparcity();\n}",
    "testName" : "test1839"
  },
  "test49105" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test49105() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test49105"
  },
  "test52109" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test52109() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2593.85329175));\n    openMapRealVector0.set(1455.0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test52109"
  },
  "test048" : {
    "methodSignature" : "public int getDimension()",
    "methodName" : "getDimension",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getSparcity();\n    openMapRealVector0.getDimension();\n}",
    "testName" : "test048"
  },
  "test049" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double double0 = openMapRealVector0.getSparcity();\n}",
    "testName" : "test049"
  },
  "test3170" : {
    "methodSignature" : "public double getDistance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3170() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);\n    double double0 = openMapRealVector1.getDistance((RealVector) openMapRealVector0);\n}",
    "testName" : "test3170"
  },
  "test3171" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3171() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);\n    double double0 = openMapRealVector1.getDistance((RealVector) openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test3171"
  },
  "test1840" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1840() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double[] doubleArray1 = new double[2];\n    doubleArray1[0] = (-1474.733152693);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);\n    OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test1840"
  },
  "test3984" : {
    "methodSignature" : "public double getLInfDistance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getLInfDistance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3984() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    openMapRealVector0.mapSinToSelf();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1.0);\n    double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);\n}",
    "testName" : "test3984"
  },
  "test0510" : {
    "methodSignature" : "public double getDistance(RealVector v) throws IllegalArgumentException",
    "methodName" : "getDistance",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0510() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);\n}",
    "testName" : "test0510"
  },
  "test0511" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test0511"
  },
  "test3068" : {
    "methodSignature" : "public double[] getData()",
    "methodName" : "getData",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3068() throws Throwable {\n    double[] doubleArray0 = new double[16];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);\n    double[] doubleArray1 = openMapRealVector0.getData();\n}",
    "testName" : "test3068"
  },
  "test3983" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3983() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 1.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);\n    openMapRealVector0.mapSinToSelf();\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1.0);\n    double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test3983"
  },
  "test3069" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3069() throws Throwable {\n    double[] doubleArray0 = new double[16];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);\n    double[] doubleArray1 = openMapRealVector0.getData();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test3069"
  },
  "test2658" : {
    "methodSignature" : "public OpenMapRealVector ebeMultiply(RealVector v) throws IllegalArgumentException",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2658() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);\n}",
    "testName" : "test2658"
  },
  "test2657" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2657() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test2657"
  },
  "test1328" : {
    "methodSignature" : "public OpenMapRealVector(Double[] values, double epsilon)",
    "methodName" : "OpenMapRealVector",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1328() throws Throwable {\n    Double[] doubleArray0 = new Double[8];\n    doubleArray0[0] = (Double) 1.0E-12;\n    OpenMapRealVector openMapRealVector0 = null;\n    openMapRealVector0 = new OpenMapRealVector(doubleArray0, 393.1155872284155);\n}",
    "testName" : "test1328"
  },
  "test2659" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2659() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test2659"
  },
  "test037" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double[] doubleArray1 = openMapRealVector0.toArray();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test037"
  },
  "test036" : {
    "methodSignature" : "public double[] toArray()",
    "methodName" : "toArray",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    double[] doubleArray1 = openMapRealVector0.toArray();\n}",
    "testName" : "test036"
  },
  "test54114" : {
    "methodSignature" : "public OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test54114() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);\n}",
    "testName" : "test54114"
  },
  "test4392" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4392() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.isInfinite();\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test4392"
  },
  "test54116" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test54116() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);\n    openMapRealVector0.getSparcity();\n}",
    "testName" : "test54116"
  },
  "test4391" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4391() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[1] = Double.NaN;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    boolean boolean0 = openMapRealVector0.isInfinite();\n}",
    "testName" : "test4391"
  },
  "test54115" : {
    "methodSignature" : "public double getSparcity()",
    "methodName" : "getSparcity",
    "className" : "org.apache.commons.math.linear.OpenMapRealVector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test54115() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);\n    RealVector realVector0 = openMapRealVector0.add(doubleArray0);\n    OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);\n    openMapRealVector1.getSparcity();\n}",
    "testName" : "test54115"
  }
}