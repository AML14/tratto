/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 19:04:18 GMT 2023
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ArrayRealVector_ESTest extends ArrayRealVector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1655, 1655);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 1.0E-12;
        doubleArray0[1] = 1.0E-12;
        doubleArray0[2] = (double) 1655;
        doubleArray0[3] = (double) 1655;
        doubleArray0[4] = (double) 1655;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(1655, 1655);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (double) 20;
        doubleArray0[1] = (double) 20;
        doubleArray0[2] = (double) 20;
        doubleArray0[3] = (double) 20;
        doubleArray0[5] = (double) 20;
        doubleArray0[6] = (double) 20;
        doubleArray0[7] = (double) 20;
        doubleArray0[8] = (double) 20;
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1701.9072154086002;
        doubleArray0[3] = Double.NaN;
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 1.0;
        doubleArray0[6] = 1988.654;
        doubleArray0[7] = (-1.0);
        doubleArray0[8] = (-3621.4380568188);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector1);
        RealVector realVector0 = arrayRealVector1.mapSubtractToSelf(2884.11164461);
        arrayRealVector1.mapFloorToSelf();
        arrayRealVector0.getL1Distance(realVector0);
        double[] doubleArray1 = arrayRealVector1.getData();
        arrayRealVector1.append(0.0);
        arrayRealVector0.getLInfDistance(doubleArray1);
        arrayRealVector2.mapCoshToSelf();
        arrayRealVector0.append(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(40);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector0);
        RealVector realVector0 = arrayRealVector2.mapUlpToSelf();
        double[] doubleArray0 = arrayRealVector1.getData();
        arrayRealVector1.projection(doubleArray0);
        arrayRealVector1.getEntry(0);
        arrayRealVector0.getLInfNorm();
        Object object0 = new Object();
        arrayRealVector2.equals(object0);
        arrayRealVector1.mapAbsToSelf();
        arrayRealVector0.append(realVector0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        Double.isFinite(0.0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        doubleArray0[1] = (-91.3);
        doubleArray0[2] = (-997.8068463188872);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        RealVector realVector0 = arrayRealVector0.mapAdd((-1211.0));
        arrayRealVector0.subtract(realVector0);
        arrayRealVector0.add(doubleArray0);
        arrayRealVector0.getDistance(doubleArray0);
        arrayRealVector0.mapAtan();
        RealVector realVector1 = arrayRealVector0.mapPowToSelf(0.0);
        RealVector realVector2 = arrayRealVector0.ebeDivide(realVector1);
        arrayRealVector0.mapDivideToSelf(1.0);
        arrayRealVector0.mapAtanToSelf();
        arrayRealVector0.getData();
        RealVector realVector3 = arrayRealVector0.mapLog1pToSelf();
        arrayRealVector0.add(realVector3);
        arrayRealVector0.mapDivideToSelf((-1406.543652677));
        arrayRealVector0.toString();
        arrayRealVector0.mapLogToSelf();
        arrayRealVector0.isInfinite();
        arrayRealVector0.subtract(realVector1);
        arrayRealVector0.copy();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector0.projection(arrayRealVector1);
        arrayRealVector1.append(realVector2);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector();
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, realVector2);
        arrayRealVector1.ebeDivide(arrayRealVector3);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 1802.872635545;
        doubleArray0[1] = 1.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = Double.POSITIVE_INFINITY;
        doubleArray0[4] = (-246.577783706);
        doubleArray0[5] = Double.NaN;
        double double0 = 0.0;
        doubleArray0[6] = 0.0;
        doubleArray0[7] = (-1311.1543);
        doubleArray0[8] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 309, 309);
        int int0 = 1268;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(int0, double0);
        arrayRealVector0.getDistance((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.hashCode();
        Double[] doubleArray1 = new Double[8];
        Double double0 = new Double(0.0);
        doubleArray1[0] = double0;
        Double double1 = new Double((-1264.0));
        doubleArray1[1] = double1;
        Double double2 = new Double((-1.0));
        doubleArray1[2] = double2;
        Double double3 = new Double(0.0);
        doubleArray1[3] = double3;
        Double double4 = new Double(0.0);
        doubleArray1[4] = double4;
        Double double5 = new Double(1.0);
        doubleArray1[5] = double5;
        Double double6 = new Double(0.0);
        doubleArray1[6] = double6;
        Double double7 = new Double((double) doubleArray1[4]);
        doubleArray1[7] = double7;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
        arrayRealVector0.subtract((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0E-12;
        doubleArray0[1] = 1.0E-12;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector0.ebeMultiply(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double(871.05222336102);
        doubleArray0[0] = double0;
        Double double1 = new Double(871.05222336102);
        doubleArray0[1] = double1;
        Double double2 = new Double(871.05222336102);
        doubleArray0[2] = double2;
        Double double3 = new Double((-798.0321));
        doubleArray0[3] = double3;
        Double double4 = new Double((-798.0321));
        doubleArray0[4] = double4;
        Double double5 = new Double((double) doubleArray0[4]);
        doubleArray0[5] = double5;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.mapAsinToSelf();
        arrayRealVector0.mapExpToSelf();
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (double) doubleArray0[2];
        doubleArray1[1] = (double) doubleArray0[3];
        doubleArray1[2] = 4095.445880065;
        doubleArray1[3] = (-798.0321);
        doubleArray1[4] = (double) doubleArray0[3];
        doubleArray1[5] = (-3814.778881173444);
        doubleArray1[6] = (double) doubleArray0[2];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
        arrayRealVector0.getDistance(arrayRealVector1);
        doubleArray1[7] = (double) doubleArray0[4];
        doubleArray1[8] = (double) doubleArray0[3];
        arrayRealVector0.getL1Distance(doubleArray1);
        arrayRealVector0.mapCbrtToSelf();
        arrayRealVector0.unitVector();
        arrayRealVector0.mapSubtractToSelf((double) doubleArray0[4]);
        arrayRealVector0.hashCode();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((-1), (-1));
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(4, 4);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((-1902), (-1902));
        arrayRealVector0.append(arrayRealVector1);
        arrayRealVector0.mapCeilToSelf();
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        RealVector realVector0 = arrayRealVector0.mapAbs();
        arrayRealVector0.projection(realVector0);
        double[] doubleArray0 = arrayRealVector0.toArray();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        arrayRealVector1.getDistance(doubleArray0);
        arrayRealVector0.outerProduct(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1), 0);
        arrayRealVector0.hashCode();
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(4242, 4242);
        arrayRealVector0.unitize();
        arrayRealVector0.mapLog();
        arrayRealVector0.set(1.0E-12);
        arrayRealVector0.mapSinToSelf();
        double[] doubleArray0 = arrayRealVector0.getDataRef();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector0.append((RealVector) arrayRealVector1);
        arrayRealVector1.getEntry(4242);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector0);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2);
        int int0 = (-1504);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = (double) (-1504);
        arrayRealVector3.unitize();
        doubleArray0[2] = (double) int0;
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 4851.7485);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 4851.7485;
        doubleArray0[1] = (-1237.49925);
        doubleArray0[2] = 4851.7485;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        arrayRealVector0.subtract((RealVector) openMapRealVector0);
        RealVector realVector0 = null;
        arrayRealVector0.ebeMultiply((RealVector) null);
        arrayRealVector0.mapExpm1ToSelf();
        arrayRealVector0.projection(realVector0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((Double[]) null);
        boolean boolean0 = false;
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        int int0 = 1592;
        double double0 = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(1592, 0.0);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 1592;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        double[] doubleArray1 = new double[0];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, doubleArray1);
        arrayRealVector0.projection((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1.0;
        Double[] doubleArray1 = new Double[1];
        doubleArray1[0] = (Double) 0.0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, (-2803), (-2803));
        arrayRealVector0.append((RealVector) arrayRealVector1);
        double double0 = 0.0;
        doubleArray0[3] = double0;
        ArrayRealVector arrayRealVector2 = null;
        arrayRealVector2 = new ArrayRealVector(arrayRealVector0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        double[] doubleArray0 = null;
        ArrayRealVector arrayRealVector0 = null;
        arrayRealVector0 = new ArrayRealVector((double[]) null);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, (ArrayRealVector) null);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        int int0 = (-269);
        ArrayRealVector arrayRealVector0 = null;
        arrayRealVector0 = new ArrayRealVector((-269));
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 1335.7062878;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = (-2351.2157559);
        doubleArray0[5] = 0.0;
        doubleArray0[6] = (-1377.057);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        RealVector realVector0 = arrayRealVector0.mapTanToSelf();
        arrayRealVector0.getLInfDistance(realVector0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = (-247.0188964087);
        doubleArray0[2] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.mapInvToSelf();
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        int int0 = 3;
        double double0 = 2501.1943011847;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 2501.1943011847);
        arrayRealVector0.mapInv();
        RealVector realVector0 = arrayRealVector0.mapTanToSelf();
        arrayRealVector0.equals(realVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        int int1 = 17;
        double[] doubleArray0 = new double[1];
        double double1 = 0.5;
        doubleArray0[0] = 0.5;
        arrayRealVector1.setSubVector(17, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-2070), 0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeDivide(arrayRealVector1);
        arrayRealVector2.mapAcos();
        arrayRealVector2.mapTanToSelf();
        int int0 = 0;
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1655, 1655);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 1.0E-12;
        doubleArray0[1] = 1.0E-12;
        doubleArray0[2] = (double) 1655;
        doubleArray0[3] = (double) 1655;
        doubleArray0[4] = (double) 1655;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((double[]) null, false);
        int int0 = (-347);
        arrayRealVector0.checkIndex(int0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1650.3;
        doubleArray0[1] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
        arrayRealVector2.isNaN();
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-613.0005126029037);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        RealVector realVector0 = arrayRealVector0.mapAtan();
        realVector0.getDistance(doubleArray0);
        arrayRealVector0.checkIndex(3515);
        arrayRealVector0.getL1Norm();
        RealVector realVector1 = arrayRealVector0.append(doubleArray0);
        realVector1.mapTanToSelf();
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        double[] doubleArray0 = null;
        ArrayRealVector arrayRealVector0 = null;
        arrayRealVector0 = new ArrayRealVector((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (-1338.21562457);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = 1.0;
        doubleArray0[5] = (-893.5954);
        doubleArray0[6] = (-998.65773629);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        arrayRealVector0.getDistance(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1, arrayRealVector1);
        arrayRealVector0.projection(arrayRealVector2);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1093.251566407);
        doubleArray0[1] = Double.POSITIVE_INFINITY;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (-1015.1378);
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 844.147739695;
        doubleArray0[6] = 2260.3779548;
        doubleArray0[7] = 103.395669940721;
        boolean boolean0 = true;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(2);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
        arrayRealVector0.getDistance(arrayRealVector2);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, boolean0);
        arrayRealVector2.getL1Distance(arrayRealVector3);
        int int0 = 0;
        arrayRealVector3.setSubVector(int0, (RealVector) arrayRealVector2);
        arrayRealVector1.mapCoshToSelf();
        arrayRealVector2.mapSinh();
        ArrayRealVector arrayRealVector4 = new ArrayRealVector(doubleArray0, arrayRealVector2);
        arrayRealVector2.projection(arrayRealVector4);
        arrayRealVector1.mapLogToSelf();
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 21.5593372365;
        doubleArray0[2] = (-1057.07264737);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
        arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
        arrayRealVector0.getSubVector(0, 94);
        arrayRealVector0.unitize();
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) null);
        arrayRealVector0.toString();
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((double[]) null, arrayRealVector0);
        arrayRealVector1.mapAtan();
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, openMapRealVector0);
        arrayRealVector2.getLInfDistance(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        int int0 = (-707);
        ArrayRealVector arrayRealVector0 = null;
        arrayRealVector0 = new ArrayRealVector((-707), (-707));
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        double[] doubleArray0 = new double[2];
        double double0 = 2381.90953;
        doubleArray0[0] = 2381.90953;
        doubleArray0[1] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, (-4523));
        boolean boolean0 = false;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, boolean0);
        arrayRealVector1.getLInfDistance((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        openMapRealVector0.mapExpm1();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector1.subtract((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
        arrayRealVector0.checkVectorDimensions(arrayRealVector1);
        arrayRealVector0.ebeMultiply(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 684.74958;
        doubleArray0[1] = 1.0;
        doubleArray0[2] = 995.28392685;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 2528.6612012;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 1.0;
        doubleArray0[7] = (-266.407409411209);
        doubleArray0[8] = (-1147.2);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 9, 9);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        RealVector realVector0 = arrayRealVector0.mapUlp();
        boolean boolean0 = true;
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, boolean0);
        arrayRealVector2.ebeMultiply(realVector0);
        arrayRealVector1.mapTanToSelf();
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) null);
        double double0 = (-1057.4623704541);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, false);
        arrayRealVector1.unitize();
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-4657.305337492);
        doubleArray0[1] = 0.5;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1993.9928128;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        arrayRealVector1.getLInfNorm();
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1158.7376421);
        doubleArray0[0] = double0;
        Double double1 = new Double(1158.7376421);
        doubleArray0[1] = double1;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.mapExpm1ToSelf();
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        RealVector realVector0 = arrayRealVector0.mapUlp();
        arrayRealVector0.mapTanh();
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-1.0);
        arrayRealVector0.append(doubleArray0);
        arrayRealVector0.isInfinite();
        arrayRealVector0.mapSinh();
        arrayRealVector0.copy();
        arrayRealVector0.dotProduct(realVector0);
        RealVector realVector1 = arrayRealVector0.mapCosToSelf();
        arrayRealVector0.ebeDivide(realVector1);
        int int0 = 0;
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1981.2541);
        doubleArray0[1] = 2.2250738585072014E-308;
        doubleArray0[2] = (-127.546557021);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = Double.NaN;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 2.2250738585072014E-308;
        doubleArray0[7] = (-662.31276);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        arrayRealVector0.checkVectorDimensions(1783);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
        arrayRealVector0.mapAbsToSelf();
        arrayRealVector0.mapCosToSelf();
        arrayRealVector0.mapAsin();
        arrayRealVector0.append((double[]) null);
        arrayRealVector0.mapLog10ToSelf();
        arrayRealVector0.copy();
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        Double double0 = new Double(1.0);
        doubleArray0[0] = double0;
        Double.min((-2637.0685912153), (double) doubleArray0[0]);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 187, 282);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, 17);
        RealVector realVector0 = arrayRealVector0.mapUlpToSelf();
        arrayRealVector0.mapPow(0.0);
        arrayRealVector0.dotProduct(realVector0);
        arrayRealVector0.mapAcosToSelf();
        arrayRealVector0.mapSinToSelf();
        arrayRealVector0.mapSubtractToSelf(2.145701662201152E-28);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        arrayRealVector0.projection(arrayRealVector1);
        arrayRealVector0.mapSinhToSelf();
        arrayRealVector0.append(0.0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        int int0 = 1703;
        arrayRealVector1.append((RealVector) arrayRealVector0);
        arrayRealVector0.mapAbs();
        arrayRealVector1.setSubVector(1703, (RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        Double[] doubleArray0 = new Double[7];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        Double double1 = new Double(0.0);
        doubleArray0[1] = double1;
        Double double2 = new Double(0.0);
        doubleArray0[2] = double2;
        double double3 = (-13.14197821102886);
        Double double4 = new Double((-13.14197821102886));
        doubleArray0[3] = double4;
        Double double5 = new Double((double) doubleArray0[2]);
        doubleArray0[4] = double5;
        Double double6 = new Double(0.0);
        doubleArray0[5] = double6;
        Double double7 = new Double((double) doubleArray0[2]);
        doubleArray0[6] = double7;
        int int0 = (-2);
        int int1 = 3140;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-2), 3140);
        double[] doubleArray1 = new double[8];
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 920.472526;
        doubleArray0[1] = (-987.631681);
        doubleArray0[2] = 1915.97416017;
        doubleArray0[3] = Double.NaN;
        doubleArray0[4] = 1.0;
        doubleArray0[5] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealVector realVector0 = arrayRealVector0.ebeMultiply(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector1);
        arrayRealVector2.getL1Distance(realVector0);
        int int0 = 16;
        arrayRealVector0.getEntry(int0);
        arrayRealVector2.getL1Distance(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(Double.POSITIVE_INFINITY);
        doubleArray0[0] = double0;
        Double double1 = new Double(0.0);
        Double.sum(Double.POSITIVE_INFINITY, (double) doubleArray0[0]);
        doubleArray0[1] = double1;
        Double.max(888.8365772, Double.POSITIVE_INFINITY);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        Double.isFinite(0.0);
        int int0 = 2155;
        double[] doubleArray1 = new double[4];
        doubleArray1[0] = 0.0;
        doubleArray1[1] = 0.0;
        Double.min(0.0, (-861.3622));
        doubleArray1[2] = (double) doubleArray0[1];
        arrayRealVector0.mapSinh();
        Double.isFinite((-2682.7864675329283));
        double double2 = 0.0;
        arrayRealVector0.sparseIterator();
        doubleArray1[3] = 0.0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
        arrayRealVector0.setSubVector(2155, (RealVector) arrayRealVector1);
        arrayRealVector1.mapAtan();
        double double3 = (-1634.82346944388);
        Double.isFinite(double3);
        arrayRealVector0.getDistance(arrayRealVector1);
        double double4 = 0.0;
        Double.isFinite(double4);
        Double.max(double2, doubleArray1[2]);
        double double5 = (-3285.07681766);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        ArrayRealVector arrayRealVector0 = null;
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 677.082109753;
        doubleArray0[1] = 1.0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, doubleArray0);
        arrayRealVector1.sparseIterator();
        arrayRealVector1.add(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(707, 0.0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (double) 707;
        doubleArray0[3] = (double) 707;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = (double) 707;
        arrayRealVector0.getDistance(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = Double.NaN;
        doubleArray0[2] = 1200.138175179;
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = 1.0;
        doubleArray0[5] = 676.9380834;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
        arrayRealVector2.mapLog1p();
        arrayRealVector2.mapMultiply((-1.0));
        arrayRealVector2.getL1Distance(doubleArray0);
        arrayRealVector2.mapExp();
        arrayRealVector2.mapAtanToSelf();
        arrayRealVector1.ebeMultiply(arrayRealVector2);
        arrayRealVector2.mapRintToSelf();
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 4378.4614;
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = 1.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.mapTanhToSelf();
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(46);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 46;
        doubleArray0[1] = (double) 46;
        doubleArray0[2] = (double) 46;
        doubleArray0[3] = (double) 46;
        doubleArray0[4] = (double) 46;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        arrayRealVector0.projection((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (-2360.519185976723);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, (ArrayRealVector) null);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1, arrayRealVector1);
        arrayRealVector1.getDistance(doubleArray0);
        int int0 = 0;
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        double double0 = 3172.3716515232472;
        arrayRealVector0.mapAdd(3172.3716515232472);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 3172.3716515232472;
        doubleArray0[1] = 3172.3716515232472;
        doubleArray0[2] = 3172.3716515232472;
        doubleArray0[3] = 3172.3716515232472;
        doubleArray0[4] = 3172.3716515232472;
        doubleArray0[5] = 3172.3716515232472;
        arrayRealVector0.projection(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.5;
        doubleArray0[2] = 2189.9862296412;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 869.15381;
        doubleArray0[6] = 1.0;
        doubleArray0[7] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((Double[]) null, (-1280), 17);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
        arrayRealVector2.mapRintToSelf();
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = (double) 0;
        doubleArray0[2] = (double) 0;
        doubleArray0[3] = (double) 0;
        doubleArray0[4] = (double) 0;
        arrayRealVector0.set(0.0);
        doubleArray0[5] = (-1676.8236);
        arrayRealVector0.add(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.mapCeilToSelf();
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (-1.0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(2, (-937.682037205));
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector0.getL1Distance(arrayRealVector1);
        arrayRealVector0.getL1Distance(arrayRealVector1);
        arrayRealVector0.mapExpm1();
        arrayRealVector1.unitVector();
        arrayRealVector1.mapCbrt();
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1108, 1108);
        openMapRealVector0.copy();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
        arrayRealVector0.mapExpm1();
        arrayRealVector0.mapAdd(1108);
        openMapRealVector0.mapSinhToSelf();
        arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
        double[] doubleArray0 = null;
        arrayRealVector0.projection((double[]) null);
        arrayRealVector0.mapCosToSelf();
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(11);
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, (ArrayRealVector) null);
        openMapRealVector0.checkVectorDimensions(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        double double0 = 484.404376854;
        Double double1 = new Double(484.404376854);
        doubleArray0[0] = double1;
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.append((RealVector) null);
        arrayRealVector0.mapSqrtToSelf();
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1.0;
        arrayRealVector0.outerProduct(doubleArray0);
        arrayRealVector0.mapAsinToSelf();
        arrayRealVector0.toArray();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector1.iterator();
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        double double0 = 0.0;
        Double double1 = new Double(0.0);
        doubleArray0[0] = double1;
        Double.isFinite((-529.2609320932));
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.mapAcos();
        arrayRealVector0.getL1Norm();
        double[] doubleArray1 = new double[5];
        doubleArray1[0] = (double) 0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
        arrayRealVector0.getLInfDistance(arrayRealVector1);
        doubleArray1[1] = double0;
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.isInfinite();
        double double0 = (-1058.5058225119);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1058.5058225119);
        doubleArray0[1] = (-1058.5058225119);
        doubleArray0[2] = (-1058.5058225119);
        doubleArray0[3] = (-1058.5058225119);
        arrayRealVector0.getLInfDistance(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        double[] doubleArray0 = null;
        int int0 = 749;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((double[]) null, 749, 0);
        arrayRealVector0.mapPow(int0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        double[] doubleArray0 = new double[6];
        double double0 = (-1786.816);
        doubleArray0[0] = (-1786.816);
        doubleArray0[1] = 1.0;
        doubleArray0[2] = (-1052.361);
        doubleArray0[3] = 0.0;
        double double1 = (-1315.875487);
        doubleArray0[4] = (-1315.875487);
        doubleArray0[5] = 2878.799066;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.mapUlp();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
        arrayRealVector0.getLInfDistance(arrayRealVector1);
        arrayRealVector0.sparseIterator();
        int int0 = 353;
        arrayRealVector0.checkIndex(353);
        arrayRealVector0.dotProduct(doubleArray0);
        arrayRealVector0.ebeMultiply(doubleArray0);
        int int1 = (-2277);
        ArrayRealVector arrayRealVector2 = null;
        arrayRealVector0.sparseIterator();
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        Double double0 = new Double(1.0E-12);
        doubleArray0[0] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = 1.0E-12;
        doubleArray1[1] = (-222.2036088569351);
        doubleArray1[2] = 1.0E-12;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
        arrayRealVector2.projection(doubleArray1);
        arrayRealVector2.getDistance((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (-825.567);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = (-2955.331419504);
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 0.0;
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector((RealVector) arrayRealVector2);
        arrayRealVector3.dotProduct((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        arrayRealVector0.subtract(doubleArray0);
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        ArrayRealVector arrayRealVector0 = null;
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        int int0 = 94;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(94);
        double[] doubleArray0 = new double[1];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector1.mapSin();
        ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
        arrayRealVector2.mapExp();
        doubleArray0[0] = (double) 94;
        arrayRealVector0.add(doubleArray0);
        ArrayRealVector arrayRealVector3 = null;
        arrayRealVector3 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-3414.006391140871);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-502.4122467658);
        doubleArray0[3] = 1661.99393660041;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.isInfinite();
        int int0 = 7654;
        arrayRealVector0.mapMultiply(2334.00551443673);
        RealVector realVector0 = arrayRealVector0.append(0.0);
        arrayRealVector0.checkVectorDimensions(realVector0);
        arrayRealVector0.checkVectorDimensions(int0);
        RealVector realVector1 = null;
        arrayRealVector0.subtract(realVector1);
        arrayRealVector0.unitVector();
        arrayRealVector0.copy();
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(3525, 1.0);
        arrayRealVector0.mapExpm1();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3525, 3525);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1659);
        arrayRealVector0.append((RealVector) openMapRealVector1);
        arrayRealVector0.mapCosToSelf();
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0E-12;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (double) 3525;
        doubleArray0[3] = 1.0E-12;
        doubleArray0[4] = 1.0E-12;
        doubleArray0[5] = (double) 3525;
        arrayRealVector0.getDistance(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (-1722.469731329125);
        doubleArray0[2] = (-2393.4920197687);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector0.mapExp();
        arrayRealVector0.copy();
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1722.469731329125));
        openMapRealVector0.getLInfNorm();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
        arrayRealVector2.iterator();
        openMapRealVector0.getLInfDistance(doubleArray0);
        arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
        arrayRealVector0.mapLog10ToSelf();
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.mapAtanToSelf();
        arrayRealVector0.isNaN();
        Double[] doubleArray0 = new Double[9];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        Double double1 = new Double(332.12);
        doubleArray0[1] = double1;
        Double double2 = new Double(1501.618564);
        doubleArray0[2] = double2;
        Double double3 = new Double(1501.618564);
        doubleArray0[3] = double3;
        Double double4 = new Double(0.0);
        doubleArray0[4] = double4;
        Double double5 = new Double((double) doubleArray0[0]);
        doubleArray0[5] = double5;
        Double double6 = new Double(1.0);
        Double.max((-1.0), 1949.502744);
        doubleArray0[6] = double6;
        Double double7 = new Double(1191.623989844874);
        doubleArray0[7] = double7;
        Double double8 = new Double((double) doubleArray0[4]);
        doubleArray0[8] = double8;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1191.623989844874);
        arrayRealVector0.append((RealVector) openMapRealVector0);
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = (double) doubleArray0[3];
        doubleArray1[1] = (double) doubleArray0[6];
        doubleArray1[2] = (-1.0);
        doubleArray1[3] = (double) doubleArray0[8];
        doubleArray1[4] = 1949.502744;
        doubleArray1[5] = 1191.623989844874;
        doubleArray1[6] = (double) doubleArray0[8];
        doubleArray1[7] = (double) doubleArray0[1];
        arrayRealVector0.ebeDivide(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = 0.0;
        doubleArray1[1] = 0.0;
        doubleArray1[2] = (-2590.088638766679);
        doubleArray1[3] = (-150.2897781425);
        doubleArray1[4] = 137.039594;
        doubleArray1[5] = (-2094.989);
        doubleArray1[6] = 1606.821;
        doubleArray1[7] = Double.NaN;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1);
        arrayRealVector0.getLInfDistance(arrayRealVector1);
        double double0 = 0.0;
        arrayRealVector0.set(double0);
        arrayRealVector0.getDimension();
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (-276.3253894365);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (-35.994627665);
        doubleArray0[4] = (-1082.256);
        doubleArray0[5] = (-1.0);
        doubleArray0[6] = (-3075.4406);
        doubleArray0[7] = (-589.0);
        doubleArray0[8] = 2241.995179940587;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.mapSubtractToSelf(0.0);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 2710.792;
        doubleArray0[1] = (-1.0);
        doubleArray0[2] = 723.4351799826737;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = (-2120.118954);
        doubleArray0[6] = (-752.19792);
        doubleArray0[7] = 1.0;
        doubleArray0[8] = 826.710169485;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector0.mapCeilToSelf();
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        RealVector realVector0 = null;
        arrayRealVector0.getL1Distance((RealVector) null);
        ArrayRealVector arrayRealVector1 = null;
        arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        int int0 = 1926;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(1926, 1926);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1926;
        doubleArray0[1] = (double) 1926;
        doubleArray0[2] = (double) 1926;
        doubleArray0[3] = (double) 1926;
        doubleArray0[4] = (double) 1926;
        doubleArray0[5] = (double) 1926;
        doubleArray0[6] = (double) 1926;
        doubleArray0[7] = (double) 1926;
        arrayRealVector0.dotProduct(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(37);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
        double[] doubleArray0 = null;
        arrayRealVector0.mapTan();
        arrayRealVector1.setSubVector(37, (double[]) null);
        arrayRealVector1.getLInfDistance(arrayRealVector0);
        arrayRealVector0.subtract(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        arrayRealVector0.mapAcosToSelf();
        arrayRealVector0.mapCeil();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(0, 0);
        arrayRealVector1.mapAbs();
        arrayRealVector1.getL1Distance((RealVector) null);
        arrayRealVector1.checkIndex(int0);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1545.520046);
        doubleArray0[1] = 2124.849092079451;
        doubleArray0[2] = (-3777.693964323415);
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = (-1.0);
        doubleArray0[6] = 1.0;
        doubleArray0[7] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.mapLog10ToSelf();
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        Double[] doubleArray0 = new Double[5];
        Double double0 = new Double(573.204);
        doubleArray0[0] = double0;
        Double double1 = new Double(0.0);
        doubleArray0[1] = double1;
        Double double2 = new Double(573.204);
        doubleArray0[2] = double2;
        Double.min(0.0, 3375.0);
        Double.max(2.2250738585072014E-308, (double) doubleArray0[2]);
        Double double3 = new Double((-452.541116274));
        doubleArray0[3] = double3;
        Double.isFinite((-683.5635282516045));
        Double.sum((double) doubleArray0[1], 1641.0);
        Double double4 = new Double((double) doubleArray0[1]);
        Double.isFinite((double) doubleArray0[0]);
        doubleArray0[4] = double4;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        Double.min(573.204, (-159.17772287));
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        arrayRealVector1.mapLog1pToSelf();
        arrayRealVector0.mapExp();
        RealVector realVector0 = arrayRealVector1.mapAcosToSelf();
        arrayRealVector0.getDistance(arrayRealVector1);
        arrayRealVector1.outerProduct(arrayRealVector0);
        arrayRealVector1.subtract(realVector0);
        arrayRealVector1.mapSignumToSelf();
        arrayRealVector1.mapCoshToSelf();
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null, true);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        int int0 = (-3113);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 1.0E-12;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
        arrayRealVector2.getDimension();
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(20);
        arrayRealVector0.mapCbrtToSelf();
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (double) 20;
        doubleArray0[1] = (double) 20;
        doubleArray0[2] = (double) 20;
        doubleArray0[3] = (double) 20;
        doubleArray0[4] = (double) 20;
        doubleArray0[5] = (double) 20;
        doubleArray0[6] = (double) 20;
        doubleArray0[7] = (double) 20;
        doubleArray0[8] = (double) 20;
        arrayRealVector0.ebeDivide(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-719.4665661317331);
        doubleArray0[1] = 1043.70648;
        double double0 = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1536.918579182796;
        doubleArray0[4] = 2412.7751052;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        arrayRealVector0.append((ArrayRealVector) null);
        arrayRealVector0.outerProduct(doubleArray0);
        arrayRealVector0.append(doubleArray0);
        arrayRealVector0.getLInfNorm();
        arrayRealVector0.mapTanToSelf();
        arrayRealVector0.mapAddToSelf(double0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        openMapRealVector0.mapTanhToSelf();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
        openMapRealVector1.getData();
        arrayRealVector0.add((RealVector) openMapRealVector1);
        arrayRealVector0.mapTanhToSelf();
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (-242.9882);
        doubleArray0[1] = (-1578.8);
        doubleArray0[2] = (-4663.639503);
        doubleArray0[3] = (-1270.0);
        doubleArray0[4] = 2.2250738585072014E-308;
        doubleArray0[5] = (-1291.416448259596);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.getSubVector(0, 0);
        arrayRealVector0.mapAbsToSelf();
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 2.2250738585072014E-308;
        doubleArray0[1] = 1120.0167681;
        doubleArray0[2] = 1898.5617328819;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = (-1387.250405);
        doubleArray0[5] = (-731.847222913);
        doubleArray0[6] = 0.0;
        doubleArray0[7] = 1.0E-12;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector0.mapCoshToSelf();
        arrayRealVector0.getSubVector(2, 2);
        Object object0 = new Object();
        arrayRealVector0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        double[] doubleArray0 = new double[1];
        double double0 = (-1.0);
        doubleArray0[0] = (-1.0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        boolean boolean0 = true;
        Double[] doubleArray1 = new Double[0];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1);
        arrayRealVector1.mapSin();
        arrayRealVector0.ebeMultiply((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 198.200051;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1683.279;
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = 0.5;
        doubleArray0[5] = 3868.739285;
        doubleArray0[6] = 2348.140665;
        doubleArray0[7] = Double.NEGATIVE_INFINITY;
        doubleArray0[8] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        double double0 = (-1788.455);
        arrayRealVector0.ebeDivide(doubleArray0);
        RealVector realVector0 = null;
        arrayRealVector0.dotProduct((RealVector) null);
        arrayRealVector0.mapDivideToSelf(double0);
        arrayRealVector0.outerProduct(realVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.dotProduct(doubleArray0);
        int int0 = 0;
        arrayRealVector1.checkIndex(int0);
        arrayRealVector0.outerProduct((RealVector) arrayRealVector1);
        arrayRealVector0.mapLogToSelf();
        arrayRealVector0.dotProduct(doubleArray0);
        arrayRealVector1.add(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
        arrayRealVector0.getNorm();
        arrayRealVector0.mapAsinToSelf();
        RealVector realVector0 = arrayRealVector0.mapAddToSelf((-2978.30696652));
        arrayRealVector0.projection(realVector0);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = 2565.3156;
        doubleArray0[2] = (-2978.30696652);
        doubleArray0[3] = 0.0;
        doubleArray0[4] = (double) 0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = (double) 0;
        doubleArray0[7] = (double) 0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector0.getLInfDistance(arrayRealVector1);
        arrayRealVector0.mapAsinToSelf();
        arrayRealVector0.checkVectorDimensions(int0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 3814.297228531;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, arrayRealVector2);
        ArrayRealVector arrayRealVector4 = new ArrayRealVector(arrayRealVector3, false);
        arrayRealVector4.setEntry(16, 3814.297228531);
        arrayRealVector4.ebeDivide(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (-1.0);
        doubleArray0[1] = 2587.4380300184325;
        doubleArray0[2] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.append(2587.4380300184325);
        RealVector realVector0 = arrayRealVector0.mapExp();
        arrayRealVector0.hashCode();
        arrayRealVector0.getLInfDistance(realVector0);
        arrayRealVector0.isNaN();
        arrayRealVector0.data = doubleArray0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector1.add(arrayRealVector0);
        arrayRealVector1.append((RealVector) arrayRealVector0);
        double double0 = (-1395.828743020574);
        arrayRealVector1.mapDivide(double0);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        int int0 = (-2836);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        RealVector realVector0 = arrayRealVector0.mapAcosToSelf();
        double double0 = arrayRealVector0.getL1Distance(realVector0);
        arrayRealVector0.getDataRef();
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        arrayRealVector0.mapAsin();
        doubleArray0[1] = 0.0;
        arrayRealVector0.sparseIterator();
        doubleArray0[2] = double0;
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.hashCode();
        double[] doubleArray0 = new double[2];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector0.dotProduct(arrayRealVector1);
        arrayRealVector0.mapInv();
        double double0 = (-1.0);
        arrayRealVector0.sparseIterator();
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-139.2));
        arrayRealVector0.getL1Norm();
        arrayRealVector0.mapInvToSelf();
        Double[] doubleArray0 = new Double[5];
        Double double0 = new Double((-1241.30981433));
        doubleArray0[0] = double0;
        Double double1 = new Double((-2113.2203204905));
        doubleArray0[1] = double1;
        Double double2 = new Double(0.0);
        doubleArray0[2] = double2;
        Double double3 = new Double(0.0);
        doubleArray0[3] = double3;
        Double double4 = new Double((-1.0));
        doubleArray0[4] = double4;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.set(0, arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-2773.93665084178);
        double double0 = (-1.0);
        doubleArray0[1] = (-1.0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector3.mapAsinToSelf();
        int int0 = 2;
        arrayRealVector3.checkVectorDimensions(2);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        arrayRealVector0.ebeDivide(arrayRealVector2);
        polynomialFunction0.derivative();
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.mapFloorToSelf();
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector0.mapAtan();
        arrayRealVector0.getL1Norm();
        arrayRealVector0.append(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-1.0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector0.toString();
        arrayRealVector1.getL1Distance(doubleArray0);
        ArrayRealVector arrayRealVector2 = null;
        arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        double[] doubleArray0 = new double[3];
        double double0 = 0.0;
        doubleArray0[0] = 0.0;
        double double1 = (-1.0);
        doubleArray0[1] = (-1.0);
        doubleArray0[2] = 4.376826;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        arrayRealVector0.sparseIterator();
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = (-1.0);
        arrayRealVector0.subtract((ArrayRealVector) null);
        doubleArray1[1] = double1;
        doubleArray1[2] = double1;
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null, (RealVector) null);
        double double0 = 2884.5836712024534;
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        double[] doubleArray0 = new double[0];
        arrayRealVector0.getLInfDistance(doubleArray0);
        arrayRealVector0.checkVectorDimensions(5);
        arrayRealVector0.mapSqrt();
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 355.265118368;
        doubleArray0[1] = Double.POSITIVE_INFINITY;
        doubleArray0[2] = 1057.417269;
        doubleArray0[3] = Double.NaN;
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = (-538.959745139);
        doubleArray0[6] = (-1611.65407);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1475), 0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        int int0 = 4920;
        arrayRealVector1.subtract(doubleArray0);
        arrayRealVector1.setSubVector(int0, doubleArray0);
        RealVector realVector0 = arrayRealVector0.mapLog1pToSelf();
        RealVector realVector1 = arrayRealVector1.ebeDivide(realVector0);
        arrayRealVector0.mapAcosToSelf();
        arrayRealVector0.outerProduct(realVector1);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-522));
        openMapRealVector0.mapFloorToSelf();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        arrayRealVector0.sparseIterator();
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1108, 1108);
        openMapRealVector0.copy();
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        arrayRealVector0.mapExpm1();
        arrayRealVector0.mapAdd(1108);
        openMapRealVector0.mapSinhToSelf();
        arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
        double[] doubleArray0 = null;
        arrayRealVector0.projection((double[]) null);
        arrayRealVector0.mapCosToSelf();
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-1035.5657);
        doubleArray0[1] = 1.0E-12;
        doubleArray0[2] = (-999.952416860404);
        doubleArray0[3] = 1.0;
        doubleArray0[4] = (-1495.2848072);
        doubleArray0[5] = (-277.1882450848735);
        doubleArray0[6] = 244.6;
        doubleArray0[7] = 1808.349;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(0);
        arrayRealVector0.dotProduct(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        Double[] doubleArray0 = new Double[5];
        Double double0 = Double.valueOf(1141.288969656497);
        doubleArray0[0] = double0;
        double double1 = 1577.63635433;
        Double double2 = new Double(1577.63635433);
        doubleArray0[1] = double2;
        Double double3 = new Double((double) doubleArray0[1]);
        Double.isFinite((double) doubleArray0[0]);
        doubleArray0[2] = double3;
        Double double4 = new Double(1577.63635433);
        doubleArray0[3] = double4;
        Double double5 = new Double(1697.834);
        Double.min((-1385.522647566323), 0.0);
        doubleArray0[4] = double5;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.getL1Distance((RealVector) arrayRealVector0);
        Double.isFinite(double1);
        double double6 = 0.0;
        Double.sum((double) doubleArray0[1], double6);
        arrayRealVector1.mapLog();
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.mapSin();
        arrayRealVector0.getL1Distance(arrayRealVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        arrayRealVector1.mapAddToSelf(0.0);
        arrayRealVector1.checkVectorDimensions(arrayRealVector0);
        arrayRealVector1.mapTan();
        arrayRealVector1.ebeMultiply(arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
        arrayRealVector2.setSubVector(0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        Double[] doubleArray0 = new Double[7];
        Double double0 = Double.valueOf(0.0);
        doubleArray0[0] = double0;
        Double double1 = new Double(Double.NEGATIVE_INFINITY);
        doubleArray0[1] = double1;
        Double double2 = new Double((double) doubleArray0[0]);
        doubleArray0[2] = double2;
        Double double3 = new Double(Double.NEGATIVE_INFINITY);
        doubleArray0[3] = double3;
        Double double4 = new Double((double) doubleArray0[1]);
        doubleArray0[4] = double4;
        Double double5 = new Double((-200.705975770072));
        doubleArray0[5] = double5;
        Double double6 = new Double((-982.3042678946));
        doubleArray0[6] = double6;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.toArray();
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        int int0 = (-1645);
        double[] doubleArray0 = new double[1];
        arrayRealVector0.unitVector();
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (-1802.28197594);
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (-2678.78053);
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 952.90338946996;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        arrayRealVector1.set(9, arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        arrayRealVector1.mapRint();
        arrayRealVector0.projection(arrayRealVector1);
        arrayRealVector1.getSubVector(1627, 1627);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double((-32.17237810406));
        doubleArray0[0] = double0;
        Double double1 = new Double((double) doubleArray0[0]);
        doubleArray0[1] = double1;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        double[] doubleArray1 = null;
        Double.min((-32.17237810406), (-315.2268951354583));
        Double.sum((-32.17237810406), (double) doubleArray0[1]);
        arrayRealVector0.ebeMultiply((double[]) null);
        double double2 = (-679.0);
        double double3 = (-989.7);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        Double[] doubleArray0 = new Double[7];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        Double double1 = new Double((double) doubleArray0[0]);
        doubleArray0[1] = double1;
        Double double2 = new Double((double) doubleArray0[1]);
        doubleArray0[2] = double2;
        Double double3 = new Double((-682.62391));
        doubleArray0[3] = double3;
        Double double4 = new Double(Double.POSITIVE_INFINITY);
        doubleArray0[4] = double4;
        Double double5 = new Double(0.0);
        doubleArray0[5] = double5;
        Double double6 = new Double(0.0);
        doubleArray0[6] = double6;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, Double.POSITIVE_INFINITY);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
        double[] doubleArray1 = new double[5];
        doubleArray1[0] = Double.POSITIVE_INFINITY;
        doubleArray1[1] = (double) doubleArray0[2];
        doubleArray1[2] = 1.0E-12;
        doubleArray1[3] = 1.0E-12;
        doubleArray1[4] = (double) doubleArray0[2];
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, doubleArray1);
        arrayRealVector3.setSubVector(12, (RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        int int0 = 120;
        arrayRealVector0.mapSin();
        arrayRealVector0.dotProduct(doubleArray0);
        arrayRealVector0.getSubVector(120, 120);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.data = doubleArray0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector1.hashCode();
        arrayRealVector1.mapUlpToSelf();
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0.data, doubleArray0);
        arrayRealVector1.projection(arrayRealVector2);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        int int0 = 3352;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(3352, 3352);
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector1.setSubVector(3352, doubleArray0);
        arrayRealVector1.projection((RealVector) arrayRealVector0);
        arrayRealVector0.subtract(arrayRealVector1);
        double[] doubleArray1 = new double[2];
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray1, arrayRealVector0);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector((RealVector) arrayRealVector2, arrayRealVector0);
        arrayRealVector1.getDistance(arrayRealVector3);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        arrayRealVector0.mapMultiplyToSelf(22);
        arrayRealVector0.mapPowToSelf(3507);
        arrayRealVector0.set((double) 22);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3507, 22);
        arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
        arrayRealVector0.unitize();
        arrayRealVector0.mapTanhToSelf();
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        Double[] doubleArray0 = new Double[7];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        Double double1 = new Double((double) doubleArray0[0]);
        doubleArray0[1] = double1;
        Double double2 = new Double((double) doubleArray0[1]);
        doubleArray0[2] = double2;
        Double.min((-1.0), (double) doubleArray0[0]);
        Double double3 = new Double((-682.62391));
        doubleArray0[3] = double3;
        Double double4 = new Double(Double.POSITIVE_INFINITY);
        doubleArray0[4] = double4;
        Double double5 = new Double(0.0);
        doubleArray0[5] = double5;
        Double double6 = new Double(0.0);
        doubleArray0[6] = double6;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, Double.POSITIVE_INFINITY);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
        double[] doubleArray1 = new double[5];
        doubleArray1[0] = Double.POSITIVE_INFINITY;
        doubleArray1[1] = (double) doubleArray0[2];
        doubleArray1[2] = 1.0E-12;
        doubleArray1[3] = 1.0E-12;
        doubleArray1[4] = (double) doubleArray0[2];
        ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, doubleArray1);
        arrayRealVector3.setSubVector(12, (RealVector) arrayRealVector0);
        arrayRealVector2.subtract(arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 0;
        doubleArray0[1] = (double) 0;
        doubleArray0[2] = (double) 0;
        doubleArray0[3] = (double) 0;
        doubleArray0[4] = (double) 0;
        arrayRealVector0.set(0.0);
        doubleArray0[5] = (-1676.8236);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0.0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        arrayRealVector1.mapCeilToSelf();
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        Double[] doubleArray0 = new Double[8];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        Double double1 = new Double(0.0);
        doubleArray0[1] = double1;
        Double double2 = new Double(Double.POSITIVE_INFINITY);
        doubleArray0[2] = double2;
        Double double3 = new Double(0.0);
        doubleArray0[3] = double3;
        Double double4 = new Double((-1.0));
        doubleArray0[4] = double4;
        Double double5 = new Double(371.2328123821);
        doubleArray0[5] = double5;
        Double double6 = new Double(1384.90217);
        doubleArray0[6] = double6;
        Double double7 = new Double(539.3);
        doubleArray0[7] = double7;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 3, 3);
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = (double) doubleArray0[0];
        doubleArray1[1] = (double) doubleArray0[5];
        doubleArray1[2] = 1384.90217;
        arrayRealVector0.dotProduct(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
        arrayRealVector2.mapAcos();
        arrayRealVector2.mapTanToSelf();
        arrayRealVector0.checkVectorDimensions(0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        Double[] doubleArray0 = new Double[4];
        Double double0 = new Double(1.0E-12);
        doubleArray0[0] = double0;
        Double double1 = new Double(1.0E-12);
        doubleArray0[1] = double1;
        Double double2 = new Double((-1998.6));
        doubleArray0[2] = double2;
        Double.min(1.0E-12, (double) doubleArray0[2]);
        Double double3 = new Double(1548.39);
        doubleArray0[3] = double3;
        int int0 = 0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.mapCosToSelf();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        arrayRealVector0.getLInfDistance((RealVector) arrayRealVector1);
        double double4 = Double.sum(1548.39, 0);
        AbstractRealVector abstractRealVector0 = arrayRealVector0.copy();
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(abstractRealVector0, arrayRealVector0);
        arrayRealVector2.mapSignumToSelf();
        arrayRealVector0.getNorm();
        arrayRealVector2.toString();
        arrayRealVector2.mapLogToSelf();
        arrayRealVector2.ebeMultiply((RealVector) arrayRealVector0);
        arrayRealVector2.dotProduct(arrayRealVector0);
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = double4;
        doubleArray1[1] = (double) int0;
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1655, 1655);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 1.0E-12;
        doubleArray0[1] = 1.0E-12;
        doubleArray0[2] = (double) 1655;
        doubleArray0[3] = (double) 1655;
        doubleArray0[4] = (double) 1655;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        arrayRealVector0.getLInfDistance((RealVector) openMapRealVector0);
        arrayRealVector0.mapSinh();
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        Double[] doubleArray0 = new Double[7];
        Double double0 = Double.valueOf(0.0);
        doubleArray0[0] = double0;
        Double double1 = new Double((double) doubleArray0[0]);
        doubleArray0[1] = doubleArray0[0];
        Double double2 = new Double((double) doubleArray0[0]);
        doubleArray0[2] = double2;
        Double double3 = new Double(Double.NEGATIVE_INFINITY);
        doubleArray0[3] = double3;
        Double double4 = new Double((double) doubleArray0[1]);
        doubleArray0[4] = double4;
        Double double5 = new Double((-200.705975770072));
        doubleArray0[5] = double5;
        Double double6 = new Double((-982.3042678946));
        doubleArray0[6] = double6;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.toArray();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
        arrayRealVector0.set(0, arrayRealVector1);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1701.9072154086002;
        doubleArray0[3] = Double.NaN;
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 1.0;
        doubleArray0[6] = 1988.654;
        doubleArray0[7] = (-1.0);
        doubleArray0[8] = (-3621.4380568188);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector();
        RealVector realVector0 = arrayRealVector1.mapSubtractToSelf(2884.11);
        arrayRealVector1.mapFloorToSelf();
        arrayRealVector0.getL1Distance(realVector0);
        double[] doubleArray1 = arrayRealVector1.getData();
        arrayRealVector1.append(0.0);
        arrayRealVector0.getLInfDistance(doubleArray1);
        arrayRealVector2.mapCoshToSelf();
        arrayRealVector0.append(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-2227.104140624);
        doubleArray0[1] = 1.0;
        doubleArray0[2] = 3483.0567179234795;
        doubleArray0[3] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
        arrayRealVector0.mapAbs();
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.toString();
        polynomialFunction0.polynomialDerivative();
        UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
        arrayRealVector1.map(univariateRealFunction0);
        arrayRealVector1.append((RealVector) null);
        arrayRealVector1.ebeMultiply(doubleArray0);
        ArrayRealVector arrayRealVector2 = arrayRealVector1.subtract(arrayRealVector0);
        double double0 = 0.0;
        arrayRealVector2.mapSubtract(double0);
        arrayRealVector1.getLInfDistance(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 2.2250738585072014E-308;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 0.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        arrayRealVector0.outerProduct(doubleArray0);
        arrayRealVector0.mapTanToSelf();
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        double[] doubleArray0 = new double[0];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
        arrayRealVector0.data = doubleArray0;
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
        arrayRealVector1.hashCode();
        arrayRealVector1.mapUlpToSelf();
        arrayRealVector1.add((ArrayRealVector) null);
        arrayRealVector1.mapTan();
        ArrayRealVector arrayRealVector2 = null;
        arrayRealVector2 = new ArrayRealVector(arrayRealVector0.data, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 0.0;
        doubleArray0[7] = 3714.83433992244;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, true);
        arrayRealVector0.mapAcos();
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector0);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector((RealVector) arrayRealVector0);
        ArrayRealVector arrayRealVector4 = arrayRealVector1.add(arrayRealVector3);
        arrayRealVector3.ebeDivide(doubleArray0);
        arrayRealVector4.mapAtanToSelf();
        arrayRealVector3.mapSubtract(2968.0);
        arrayRealVector1.copy();
        arrayRealVector4.projection((RealVector) arrayRealVector3);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-804.90969875198);
        doubleArray0[1] = 2788.6;
        doubleArray0[2] = (-2862.2365778617554);
        doubleArray0[3] = (-0.24);
        doubleArray0[4] = (-2449.689);
        doubleArray0[5] = (-1.0);
        doubleArray0[6] = 2672.05725224525;
        doubleArray0[7] = 1.0;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
        arrayRealVector0.getDistance((RealVector) arrayRealVector1);
        arrayRealVector1.equals(arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
        arrayRealVector2.mapRintToSelf();
        arrayRealVector2.append(1.0);
        arrayRealVector0.getDistance(arrayRealVector2);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        ArrayRealVector arrayRealVector2 = (ArrayRealVector) arrayRealVector1.mapRint();
        ArrayRealVector arrayRealVector3 = arrayRealVector0.projection(arrayRealVector1);
        arrayRealVector1.getDistance(arrayRealVector2);
        arrayRealVector1.getSubVector(1627, 1627);
        arrayRealVector2.getDistance(arrayRealVector3);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        arrayRealVector0.mapCosh();
        RealVector realVector0 = arrayRealVector0.mapCbrtToSelf();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 2361.271607;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 2149.658474149;
        doubleArray0[3] = 1.0;
        arrayRealVector0.append(doubleArray0);
        arrayRealVector0.getDistance(arrayRealVector1);
        arrayRealVector1.mapExpToSelf();
        arrayRealVector0.getNorm();
        arrayRealVector1.add(realVector0);
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        doubleArray0[1] = (-91.3);
        doubleArray0[2] = (-997.8068463188872);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
        RealVector realVector0 = arrayRealVector0.mapAdd((-1211.0));
        arrayRealVector0.subtract(realVector0);
        arrayRealVector0.add(doubleArray0);
        arrayRealVector0.getDistance(doubleArray0);
        arrayRealVector0.mapAtan();
        RealVector realVector1 = arrayRealVector0.mapPowToSelf(0.0);
        RealVector realVector2 = arrayRealVector0.ebeDivide(realVector1);
        arrayRealVector0.mapDivideToSelf(1.0);
        arrayRealVector0.mapAtanToSelf();
        arrayRealVector0.getData();
        RealVector realVector3 = arrayRealVector0.mapLog1pToSelf();
        arrayRealVector0.add(realVector3);
        RealVector realVector4 = arrayRealVector0.mapDivideToSelf((-1406.543652677));
        realVector4.mapLog1p();
        arrayRealVector0.toString();
        arrayRealVector0.mapLogToSelf();
        arrayRealVector0.isInfinite();
        arrayRealVector0.subtract(realVector1);
        arrayRealVector0.copy();
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.projection(arrayRealVector1);
        arrayRealVector1.append(realVector2);
        ArrayRealVector arrayRealVector3 = new ArrayRealVector();
        ArrayRealVector arrayRealVector4 = new ArrayRealVector(arrayRealVector3, realVector2);
        arrayRealVector1.ebeDivide(arrayRealVector4);
        arrayRealVector2.getNorm();
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        int int0 = 3;
        double double0 = 2501.1943011847;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 2501.1943011847);
        RealVector realVector0 = arrayRealVector0.mapInv();
        RealVector realVector1 = realVector0.mapTanToSelf();
        arrayRealVector0.equals(realVector1);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector();
        int int1 = 17;
        double[] doubleArray0 = new double[19];
        double double1 = 0.5;
        doubleArray0[0] = 0.5;
        arrayRealVector1.setSubVector(17, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1701.9072154086002;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = (-1.0);
        doubleArray0[5] = 1.0;
        doubleArray0[6] = 1988.654;
        doubleArray0[7] = (-1.0);
        doubleArray0[8] = (-3621.4380568188);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
        ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector1);
        RealVector realVector0 = arrayRealVector1.mapSubtractToSelf(2884.11164461);
        arrayRealVector1.mapFloorToSelf();
        arrayRealVector0.getL1Distance(realVector0);
        double[] doubleArray1 = arrayRealVector1.getData();
        arrayRealVector1.append(0.0);
        arrayRealVector0.getLInfDistance(doubleArray1);
        arrayRealVector2.mapCoshToSelf();
        arrayRealVector0.append(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (-4018.67328);
        doubleArray0[1] = (-1.0);
        doubleArray0[2] = (-4554.32);
        doubleArray0[3] = (-1132.803);
        doubleArray0[4] = 712.841913;
        doubleArray0[5] = (-1506.0525139);
        doubleArray0[6] = (-2449.689);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        arrayRealVector0.add(doubleArray0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
        arrayRealVector0.getDistance((RealVector) openMapRealVector0);
        openMapRealVector0.subtract((RealVector) arrayRealVector0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(arrayRealVector0);
        openMapRealVector1.mapLog1pToSelf();
        openMapRealVector1.mapSinh();
        openMapRealVector1.getNorm();
        openMapRealVector0.add((RealVector) openMapRealVector1);
        openMapRealVector0.mapSin();
        arrayRealVector0.mapAcos();
        arrayRealVector0.subtract(doubleArray0);
        arrayRealVector0.getDistance((RealVector) openMapRealVector0);
        arrayRealVector0.mapLog1p();
        arrayRealVector0.mapExpm1ToSelf();
        arrayRealVector0.mapSubtractToSelf(712.841913);
        arrayRealVector0.unitize();
        arrayRealVector0.getNorm();
        arrayRealVector0.mapInvToSelf();
        arrayRealVector0.isNaN();
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        Double[] doubleArray0 = new Double[5];
        Double double0 = new Double(2672.05725224525);
        doubleArray0[0] = double0;
        Double double1 = new Double(2672.05725224525);
        doubleArray0[1] = double1;
        Double double2 = new Double((double) doubleArray0[1]);
        doubleArray0[2] = double2;
        Double double3 = new Double(1459.6506190951);
        doubleArray0[3] = double3;
        Double double4 = new Double(1.0);
        doubleArray0[4] = double4;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        double[] doubleArray1 = new double[0];
        ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, doubleArray1);
        arrayRealVector1.mapAsin();
        Double.max(1459.6506190951, (double) doubleArray0[2]);
        ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0, arrayRealVector1);
        arrayRealVector0.dotProduct((RealVector) arrayRealVector2);
        arrayRealVector0.getDataRef();
        arrayRealVector0.dotProduct(arrayRealVector2);
    }
}
