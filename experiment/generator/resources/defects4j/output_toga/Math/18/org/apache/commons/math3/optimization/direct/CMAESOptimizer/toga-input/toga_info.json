{
  "test1212" : {
    "methodSignature" : "public boolean equals(Object o)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();\n    double[][] doubleArray0 = new double[1][3];\n    double[] doubleArray1 = new double[1];\n    doubleArray0[0] = doubleArray1;\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);\n    GoalType goalType0 = GoalType.MINIMIZE;\n    PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);\n    PointValuePair pointValuePair1 = cMAESOptimizer0.doOptimize();\n    pointValuePair1.equals((Object) pointValuePair0);\n}",
    "testName" : "test1212"
  },
  "test1010" : {
    "methodSignature" : "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, double[] startPoint, double[] lower, double[] upper)",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = (double) 1187;\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1187, doubleArray0);\n    double[][] doubleArray1 = new double[3][8];\n    doubleArray1[0] = doubleArray0;\n    doubleArray1[1] = doubleArray0;\n    doubleArray1[2] = doubleArray0;\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, (UnitSphereRandomVectorGenerator) null);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    cMAESOptimizer0.optimize(0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, double[] startPoint, double[] lower, double[] upper)",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1187, doubleArray0);\n    double[][] doubleArray1 = new double[3][8];\n    doubleArray1[0] = doubleArray0;\n    doubleArray1[1] = doubleArray0;\n    doubleArray1[2] = doubleArray0;\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, (UnitSphereRandomVectorGenerator) null);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    cMAESOptimizer0.optimize(0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, double[] startPoint, double[] lower, double[] upper)",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-3));\n    double[][] doubleArray0 = new double[1][3];\n    double[] doubleArray1 = new double[1];\n    doubleArray1[0] = (double) 30000;\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "protected PointValuePair doOptimize()",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();\n    double[][] doubleArray0 = new double[1][3];\n    double[] doubleArray1 = new double[1];\n    doubleArray0[0] = doubleArray1;\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 2628, unitSphereRandomVectorGenerator0);\n    GoalType goalType0 = GoalType.MINIMIZE;\n    cMAESOptimizer0.optimize(1, microsphereInterpolatingFunction0, goalType0, doubleArray1);\n    cMAESOptimizer0.doOptimize();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public CMAESOptimizer(int lambda, double[] inputSigma, int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, RandomGenerator random, boolean generateStatistics, ConvergenceChecker<PointValuePair> checker)",
    "methodName" : "CMAESOptimizer",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Well44497a well44497a0 = new Well44497a();\n    SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, (-2157.173657120076));\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(709, (double[]) null, 0, 709, true, (-961), 709, well44497a0, true, simplePointChecker0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public CMAESOptimizer(int lambda, double[] inputSigma, int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, RandomGenerator random, boolean generateStatistics)",
    "methodName" : "CMAESOptimizer",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Well19937a well19937a0 = new Well19937a();\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1796), (double[]) null, (-1796), (-1796), false, 0, 294, well19937a0, true);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, double[] startPoint)",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = (double) 1187;\n    doubleArray0[1] = (double) 1187;\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();\n    cMAESOptimizer0.getEvaluations();\n    cMAESOptimizer0.getStatisticsDHistory();\n    double[][] doubleArray1 = new double[3][8];\n    doubleArray1[0] = doubleArray0;\n    doubleArray1[1] = doubleArray0;\n    doubleArray1[2] = doubleArray0;\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, (UnitSphereRandomVectorGenerator) null);\n    microsphereInterpolatingFunction0.value(doubleArray0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    // Undeclared exception!\n    cMAESOptimizer0.optimize(1187, microsphereInterpolatingFunction0, goalType0, doubleArray0);\n}",
    "testName" : "test099"
  },
  "test000" : {
    "methodSignature" : "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, double[] startPoint)",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = (double) 1187;\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1187, doubleArray0);\n    double[][] doubleArray1 = new double[3][8];\n    doubleArray1[0] = doubleArray0;\n    doubleArray1[1] = doubleArray0;\n    doubleArray1[2] = doubleArray0;\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, (UnitSphereRandomVectorGenerator) null);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    // Undeclared exception!\n    cMAESOptimizer0.optimize(1187, microsphereInterpolatingFunction0, goalType0, doubleArray0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, double[] startPoint, double[] lower, double[] upper)",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-3));\n    double[][] doubleArray0 = new double[1][3];\n    double[] doubleArray1 = new double[1];\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "protected PointValuePair doOptimize()",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();\n    cMAESOptimizer0.doOptimize();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public CMAESOptimizer(int lambda, double[] inputSigma, int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, RandomGenerator random, boolean generateStatistics, ConvergenceChecker<PointValuePair> checker)",
    "methodName" : "CMAESOptimizer",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, doubleArray0, 2, 2, true, 0, 2, (RandomGenerator) null, true, (ConvergenceChecker<PointValuePair>) null);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, double[] startPoint, double[] lower, double[] upper)",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(10);\n    double[][] doubleArray0 = new double[1][3];\n    double[] doubleArray1 = new double[1];\n    doubleArray0[0] = doubleArray1;\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);\n    MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test088"
  }
}