focal_method,test_prefix,docstring
"public BigFraction pow(final BigInteger exponent) {
    if (exponent.compareTo(BigInteger.ZERO) < 0) {
        final BigInteger eNeg = exponent.negate();
        return new BigFraction(ArithmeticUtils.pow(denominator, eNeg), ArithmeticUtils.pow(numerator, eNeg));
    }
    return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent));
}","public void test0000() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    BigInteger bigInteger0 = BigInteger.ZERO;
    bigFraction0.TWO.pow(bigInteger0);
}","/**
 * <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
 */"
"public BigFraction pow(final long exponent) {
    if (exponent < 0) {
        return new BigFraction(ArithmeticUtils.pow(denominator, -exponent), ArithmeticUtils.pow(numerator, -exponent));
    }
    return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent));
}","public void test0011() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.ONE.pow(2089L);
}","/**
 * <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
 */"
"public BigFraction pow(final int exponent) {
    if (exponent < 0) {
        return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));
    }
    return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));
}","public void test0022() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    bigFraction0.pow(0);
}","/**
 * <p>
 * Returns a {@code BigFraction} whose value is
 * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this {@code BigFraction} is to be
 *            raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public BigFraction abs() {
    return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();
}","public void test0033() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0025000000000545697, 4);
    bigFraction0.ZERO.abs();
}","/**
 * <p>
 * Returns the absolute value of this {@link BigFraction}.
 * </p>
 *
 * @return the absolute value as a {@link BigFraction}.
 */"
"public BigFraction subtract(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);
}","public void test0044() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(2277, 1);
    BigInteger bigInteger0 = BigInteger.ONE;
    bigFraction0.subtract(bigInteger0);
}","/**
 * <p>
 * Subtracts the value of an {@link BigInteger} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigInteger} is {@code null}.
 */"
"public BigFraction subtract(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);
}","public void test0055() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 17;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    bigFraction0.THREE_QUARTERS.subtract(bigInteger0);
}","/**
 * <p>
 * Subtracts the value of an {@link BigInteger} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigInteger} is {@code null}.
 */"
"public BigFraction subtract(final long l) {
    return subtract(BigInteger.valueOf(l));
}","public void test0066() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    bigFraction0.subtract(1037L);
}","/**
 * <p>
 * Subtracts the value of a {@code long} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param l the {@code long} to subtract.
 * @return a {@code BigFraction} instance with the resulting values.
 */"
"public BigFraction subtract(final long l) {
    return subtract(BigInteger.valueOf(l));
}","public void test0077() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.subtract(9223372036854775807L);
}","/**
 * <p>
 * Subtracts the value of a {@code long} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param l the {@code long} to subtract.
 * @return a {@code BigFraction} instance with the resulting values.
 */"
"public BigFraction subtract(final int i) {
    return subtract(BigInteger.valueOf(i));
}","public void test0088() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    bigFraction0.subtract((-1105));
}","/**
 * <p>
 * Subtracts the value of an {@code integer} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param i the {@code integer} to subtract.
 * @return a {@code BigFraction} instance with the resulting values.
 */"
"public BigFraction subtract(final int i) {
    return subtract(BigInteger.valueOf(i));
}","public void test0099() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.subtract(603);
}","/**
 * <p>
 * Subtracts the value of an {@code integer} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param i the {@code integer} to subtract.
 * @return a {@code BigFraction} instance with the resulting values.
 */"
"public BigFraction reduce() {
    final BigInteger gcd = numerator.gcd(denominator);
    return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));
}","public void test01010() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    bigFraction0.reduce();
}","/**
 * <p>
 * Reduce this <code>BigFraction</code> to its lowest terms.
 * </p>
 *
 * @return the reduced <code>BigFraction</code>. It doesn't change anything if
 *         the fraction can be reduced.
 */"
"public BigFraction reciprocal() {
    return new BigFraction(denominator, numerator);
}","public void test01111() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.TWO.divide(bigFraction0);
    bigFraction1.reciprocal();
}","/**
 * <p>
 * Return the multiplicative inverse of this fraction.
 * </p>
 *
 * @return the reciprocal fraction.
 */"
"public BigFraction reciprocal() {
    return new BigFraction(denominator, numerator);
}","public void test01212() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.reciprocal();
}","/**
 * <p>
 * Return the multiplicative inverse of this fraction.
 * </p>
 *
 * @return the reciprocal fraction.
 */"
"public BigFraction reciprocal() {
    return new BigFraction(denominator, numerator);
}","public void test01313() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    bigFraction0.MINUS_ONE.reciprocal();
}","/**
 * <p>
 * Return the multiplicative inverse of this fraction.
 * </p>
 *
 * @return the reciprocal fraction.
 */"
"public BigFraction pow(final long exponent) {
    if (exponent < 0) {
        return new BigFraction(ArithmeticUtils.pow(denominator, -exponent), ArithmeticUtils.pow(numerator, -exponent));
    }
    return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent));
}","public void test01414() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.add(1852L);
    bigFraction1.pow((-664L));
}","/**
 * <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
 */"
"public BigFraction pow(final int exponent) {
    if (exponent < 0) {
        return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));
    }
    return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));
}","public void test01515() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.ONE_HALF.pow((-1302));
}","/**
 * <p>
 * Returns a {@code BigFraction} whose value is
 * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this {@code BigFraction} is to be
 *            raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public double pow(final double exponent) {
    return FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent);
}","public void test01616() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_THIRD;
    bigFraction0.ONE_QUARTER.pow(1.7976931348623157E308);
}","/**
 * <p>
 * Returns a <code>double</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public double pow(final double exponent) {
    return FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent);
}","public void test01717() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    bigFraction0.pow((double) 1239);
}","/**
 * <p>
 * Returns a <code>double</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public double percentageValue() {
    return multiply(ONE_HUNDRED).doubleValue();
}","public void test01818() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0025000000000545697, 4);
    bigFraction0.percentageValue();
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public double percentageValue() {
    return multiply(ONE_HUNDRED).doubleValue();
}","public void test01919() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    bigFraction0.percentageValue();
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public BigFraction negate() {
    return new BigFraction(numerator.negate(), denominator);
}","public void test02020() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1));
    bigFraction0.negate();
}","/**
 * <p>
 * Return the additive inverse of this fraction, returning the result in
 * reduced form.
 * </p>
 *
 * @return the negation of this fraction.
 */"
"public BigFraction negate() {
    return new BigFraction(numerator.negate(), denominator);
}","public void test02121() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.negate();
}","/**
 * <p>
 * Return the additive inverse of this fraction, returning the result in
 * reduced form.
 * </p>
 *
 * @return the negation of this fraction.
 */"
"public BigFraction multiply(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO)) {
        return ZERO;
    }
    return new BigFraction(numerator.multiply(fraction.numerator), denominator.multiply(fraction.denominator));
}","public void test02222() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    BigFraction bigFraction1 = bigFraction0.add(3);
    bigFraction1.multiply(bigFraction0);
}","/**
 * <p>
 * Multiplies the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to multiply by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code fraction} is {@code null}.
 */"
"public BigFraction multiply(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(bg.multiply(numerator), denominator);
}","public void test02323() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    bigFraction0.multiply(bigInteger0);
}","/**
 * <p>
 * Multiplies the value of this fraction by the passed
 * <code>BigInteger</code>, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to multiply by.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code bg} is {@code null}.
 */"
"public BigFraction multiply(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(bg.multiply(numerator), denominator);
}","public void test02424() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction((-1482), 1045);
    BigInteger bigInteger0 = bigFraction0.getDenominator();
    bigFraction0.multiply(bigInteger0);
}","/**
 * <p>
 * Multiplies the value of this fraction by the passed
 * <code>BigInteger</code>, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to multiply by.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code bg} is {@code null}.
 */"
"public BigFraction multiply(final long l) {
    return multiply(BigInteger.valueOf(l));
}","public void test02525() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    bigFraction0.TWO_QUARTERS.multiply(676L);
}","/**
 * <p>
 * Multiply the value of this fraction by the passed <tt>long</tt>,
 * returning the result in reduced form.
 * </p>
 *
 * @param l
 *            the <tt>long</tt> to multiply by.
 * @return a {@link BigFraction} instance with the resulting values.
 */"
"public BigFraction multiply(final long l) {
    return multiply(BigInteger.valueOf(l));
}","public void test02626() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    bigFraction0.multiply((-114L));
}","/**
 * <p>
 * Multiply the value of this fraction by the passed <tt>long</tt>,
 * returning the result in reduced form.
 * </p>
 *
 * @param l
 *            the <tt>long</tt> to multiply by.
 * @return a {@link BigFraction} instance with the resulting values.
 */"
"public BigFraction multiply(final int i) {
    return multiply(BigInteger.valueOf(i));
}","public void test02727() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-3763.34035));
    bigFraction0.multiply(121);
}","/**
 * <p>
 * Multiply the value of this fraction by the passed <tt>int</tt>, returning
 * the result in reduced form.
 * </p>
 *
 * @param i
 *            the <tt>int</tt> to multiply by.
 * @return a {@link BigFraction} instance with the resulting values.
 */"
"@Override
public long longValue() {
    return numerator.divide(denominator).longValue();
}","public void test02828() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.longValue();
}","/**
 * <p>
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * </p>
 *
 * @return the whole number fraction part.
 * @see java.lang.Number#longValue()
 */"
"@Override
public int intValue() {
    return numerator.divide(denominator).intValue();
}","public void test02929() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigInteger bigInteger0 = BigInteger.TEN;
    BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
    bigFraction1.intValue();
}","/**
 * <p>
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * </p>
 *
 * @return the whole number fraction part.
 * @see java.lang.Number#intValue()
 */"
"@Override
public int intValue() {
    return numerator.divide(denominator).intValue();
}","public void test03030() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1464.0718), 3530.3516753794024, 76);
    bigFraction0.intValue();
}","/**
 * <p>
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * </p>
 *
 * @return the whole number fraction part.
 * @see java.lang.Number#intValue()
 */"
"public long getNumeratorAsLong() {
    return numerator.longValue();
}","public void test03131() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.getNumeratorAsLong();
}","/**
 * <p>
 * Access the numerator as a <tt>long</tt>.
 * </p>
 *
 * @return the numerator as a <tt>long</tt>.
 */"
"public long getNumeratorAsLong() {
    return numerator.longValue();
}","public void test03232() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-2139));
    bigFraction0.getNumeratorAsLong();
}","/**
 * <p>
 * Access the numerator as a <tt>long</tt>.
 * </p>
 *
 * @return the numerator as a <tt>long</tt>.
 */"
"public int getNumeratorAsInt() {
    return numerator.intValue();
}","public void test03333() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.getNumeratorAsInt();
}","/**
 * <p>
 * Access the numerator as a <tt>int</tt>.
 * </p>
 *
 * @return the numerator as a <tt>int</tt>.
 */"
"public int getNumeratorAsInt() {
    return numerator.intValue();
}","public void test03434() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.MINUS_ONE.getNumeratorAsInt();
}","/**
 * <p>
 * Access the numerator as a <tt>int</tt>.
 * </p>
 *
 * @return the numerator as a <tt>int</tt>.
 */"
"public BigInteger getNumerator() {
    return numerator;
}","public void test03535() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.negate();
    bigFraction1.getNumerator();
}","/**
 * <p>
 * Access the numerator as a <code>BigInteger</code>.
 * </p>
 *
 * @return the numerator as a <code>BigInteger</code>.
 */"
"public BigInteger getDenominator() {
    return denominator;
}","public void test03636() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.649738073348999);
    bigFraction0.getDenominator();
}","/**
 * <p>
 * Access the denominator as a <code>BigInteger</code>.
 * </p>
 *
 * @return the denominator as a <code>BigInteger</code>.
 */"
"public BigInteger getDenominator() {
    return denominator;
}","public void test03737() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.649738073348999);
    BigFraction bigFraction1 = bigFraction0.pow((-2755L));
    bigFraction1.getDenominator();
}","/**
 * <p>
 * Access the denominator as a <code>BigInteger</code>.
 * </p>
 *
 * @return the denominator as a <code>BigInteger</code>.
 */"
"@Override
public float floatValue() {
    float result = numerator.floatValue() / denominator.floatValue();
    if (Double.isNaN(result)) {
        // Numerator and/or denominator must be out of range:
        // Calculate how far to shift them to put them in range.
        int shift = Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Float.MAX_VALUE);
        result = numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue();
    }
    return result;
}","public void test03838() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.divide((-1446L));
    bigFraction2.floatValue();
}","/**
 * <p>
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>float</tt>.
 * @see java.lang.Number#floatValue()
 */"
"@Override
public float floatValue() {
    float result = numerator.floatValue() / denominator.floatValue();
    if (Double.isNaN(result)) {
        // Numerator and/or denominator must be out of range:
        // Calculate how far to shift them to put them in range.
        int shift = Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Float.MAX_VALUE);
        result = numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue();
    }
    return result;
}","public void test03939() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-692));
    bigFraction1.floatValue();
}","/**
 * <p>
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>float</tt>.
 * @see java.lang.Number#floatValue()
 */"
"@Override
public double doubleValue() {
    double result = numerator.doubleValue() / denominator.doubleValue();
    if (Double.isNaN(result)) {
        // Numerator and/or denominator must be out of range:
        // Calculate how far to shift them to put them in range.
        int shift = Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Double.MAX_VALUE);
        result = numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue();
    }
    return result;
}","public void test04040() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
    bigFraction0.doubleValue();
}","/**
 * <p>
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>double</tt>
 * @see java.lang.Number#doubleValue()
 */"
"@Override
public double doubleValue() {
    double result = numerator.doubleValue() / denominator.doubleValue();
    if (Double.isNaN(result)) {
        // Numerator and/or denominator must be out of range:
        // Calculate how far to shift them to put them in range.
        int shift = Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Double.MAX_VALUE);
        result = numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue();
    }
    return result;
}","public void test04141() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigInteger bigInteger0 = bigFraction0.getNumerator();
    BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(bigInteger0);
    bigFraction1.doubleValue();
}","/**
 * <p>
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>double</tt>
 * @see java.lang.Number#doubleValue()
 */"
"public BigFraction divide(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(fraction.numerator)) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return multiply(fraction.reciprocal());
}","public void test04242() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(2037, 2037);
    BigFraction bigFraction1 = BigFraction.MINUS_ONE;
    bigFraction0.divide(bigFraction1);
}","/**
 * <p>
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to divide by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public BigFraction divide(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(bg)) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test04343() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-692));
    BigInteger bigInteger0 = BigInteger.ONE;
    bigFraction1.divide(bigInteger0);
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code BigInteger},
 * ie {@code this * 1 / bg}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to divide by, must not be {@code null}
 * @return a {@link BigFraction} instance with the resulting values
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public BigFraction divide(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(bg)) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test04444() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(406);
    BigInteger bigInteger0 = bigFraction0.getNumerator();
    bigFraction1.divide(bigInteger0);
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code BigInteger},
 * ie {@code this * 1 / bg}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to divide by, must not be {@code null}
 * @return a {@link BigFraction} instance with the resulting values
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public BigFraction divide(final long l) {
    return divide(BigInteger.valueOf(l));
}","public void test04545() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-618.0), 3136.5699010956746, 0);
    bigFraction0.divide((-1L));
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code long}, ie
 * {@code this * 1 / l}, returning the result in reduced form.
 * </p>
 *
 * @param l the {@code long} to divide by
 * @return a {@link BigFraction} instance with the resulting values
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public BigFraction divide(final long l) {
    return divide(BigInteger.valueOf(l));
}","public void test04646() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-858));
    bigFraction0.divide((long) 1);
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code long}, ie
 * {@code this * 1 / l}, returning the result in reduced form.
 * </p>
 *
 * @param l the {@code long} to divide by
 * @return a {@link BigFraction} instance with the resulting values
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public BigFraction divide(final int i) {
    return divide(BigInteger.valueOf(i));
}","public void test04747() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.MINUS_ONE.divide((-1));
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code int}, ie
 * {@code this * 1 / i}, returning the result in reduced form.
 * </p>
 *
 * @param i the {@code int} to divide by
 * @return a {@link BigFraction} instance with the resulting values
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public int compareTo(final BigFraction object) {
    BigInteger nOd = numerator.multiply(object.denominator);
    BigInteger dOn = denominator.multiply(object.numerator);
    return nOd.compareTo(dOn);
}","public void test04949() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-858));
    int int0 = bigFraction0.compareTo(bigFraction0);
    assertEquals(0, int0);
}","/**
 * <p>
 * Compares this object to another based on size.
 * </p>
 *
 * @param object
 *            the object to compare to, must not be <code>null</code>.
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 * @see java.lang.Comparable#compareTo(java.lang.Object)
 */"
"public int compareTo(final BigFraction object) {
    BigInteger nOd = numerator.multiply(object.denominator);
    BigInteger dOn = denominator.multiply(object.numerator);
    return nOd.compareTo(dOn);
}","public void test05051() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-608L));
    int int0 = bigFraction0.compareTo(bigFraction1);
    assertEquals((-1), int0);
}","/**
 * <p>
 * Compares this object to another based on size.
 * </p>
 *
 * @param object
 *            the object to compare to, must not be <code>null</code>.
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 * @see java.lang.Comparable#compareTo(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test05760() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = bigFraction0.multiply((-1));
    BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
    BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
    assertTrue(bigFraction3.equals((Object) bigFraction1));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test05962() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    byte[] byteArray0 = new byte[3];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
    assertTrue(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test06166() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(0);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction pow(final BigInteger exponent) {
    if (exponent.compareTo(BigInteger.ZERO) < 0) {
        final BigInteger eNeg = exponent.negate();
        return new BigFraction(ArithmeticUtils.pow(denominator, eNeg), ArithmeticUtils.pow(numerator, eNeg));
    }
    return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent));
}","public void test06469() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-974L));
    // Undeclared exception!
    try {
        bigFraction0.TWO.pow((BigInteger) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
 */"
"public BigFraction pow(final int exponent) {
    if (exponent < 0) {
        return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));
    }
    return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));
}","public void test06570() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    // Undeclared exception!
    try {
        bigFraction0.pow(Integer.MAX_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // BigInteger would overflow supported range
        //
        verifyException(""java.math.BigInteger"", e);
    }
}","/**
 * <p>
 * Returns a {@code BigFraction} whose value is
 * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this {@code BigFraction} is to be
 *            raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public static BigFraction getReducedFraction(final int numerator, final int denominator) {
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    return new BigFraction(numerator, denominator);
}","public void test06671() throws Throwable {
    // Undeclared exception!
    try {
        BigFraction.getReducedFraction(3630, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction
 * Y/Z.
 * </p>
 *
 * <p>
 * Any negative signs are resolved to be on the numerator.
 * </p>
 *
 * @param numerator
 *            the numerator, for example the three in 'three sevenths'.
 * @param denominator
 *            the denominator, for example the seven in 'three sevenths'.
 * @return a new fraction instance, with the numerator and denominator
 *         reduced.
 * @throws ArithmeticException
 *             if the denominator is <code>zero</code>.
 */"
"public BigFraction divide(final long l) {
    return divide(BigInteger.valueOf(l));
}","public void test06772() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    // Undeclared exception!
    try {
        bigFraction0.ONE_QUARTER.divide(0L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code long}, ie
 * {@code this * 1 / l}, returning the result in reduced form.
 * </p>
 *
 * @param l the {@code long} to divide by
 * @return a {@link BigFraction} instance with the resulting values
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public int compareTo(final BigFraction object) {
    BigInteger nOd = numerator.multiply(object.denominator);
    BigInteger dOn = denominator.multiply(object.numerator);
    return nOd.compareTo(dOn);
}","public void test06873() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-467.49498417), 59);
    // Undeclared exception!
    try {
        bigFraction0.compareTo((BigFraction) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Compares this object to another based on size.
 * </p>
 *
 * @param object
 *            the object to compare to, must not be <code>null</code>.
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 * @see java.lang.Comparable#compareTo(java.lang.Object)
 */"
"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);
}","public void test06974() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue((-719), 1043);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p>
 *
 * @param scale
 *            scale of the <code>BigDecimal</code> quotient to be returned.
 *            see {@link BigDecimal} for more information.
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @see BigDecimal
 */"
"public BigDecimal bigDecimalValue() {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator));
}","public void test07075() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    // Undeclared exception!
    try {
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Non-terminating decimal expansion; no exact representable decimal result.
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code>. This calculates the
 * fraction as the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws ArithmeticException
 *             if the exact quotient does not have a terminating decimal
 *             expansion.
 * @see BigDecimal
 */"
"public BigFraction add(final BigInteger bg) throws NullArgumentException {
    MathUtils.checkNotNull(bg);
    return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);
}","public void test07176() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    try {
        bigFraction0.add((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math3.util.MathUtils"", e);
    }
}","/**
 * <p>
 * Adds the value of this fraction to the passed {@link BigInteger},
 * returning the result in reduced form.
 * </p>
 *
 * @param bg
 *            the {@link BigInteger} to add, must'nt be <code>null</code>.
 * @return a <code>BigFraction</code> instance with the resulting values.
 * @throws NullArgumentException
 *             if the {@link BigInteger} is <code>null</code>.
 */"
"public BigFraction(BigInteger num, BigInteger den) {
    MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);
    MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);
    if (BigInteger.ZERO.equals(den)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    if (BigInteger.ZERO.equals(num)) {
        numerator = BigInteger.ZERO;
        denominator = BigInteger.ONE;
    } else {
        // reduce numerator and denominator by greatest common denominator
        final BigInteger gcd = num.gcd(den);
        if (BigInteger.ONE.compareTo(gcd) < 0) {
            num = num.divide(gcd);
            den = den.divide(gcd);
        }
        // move sign to numerator
        if (BigInteger.ZERO.compareTo(den) > 0) {
            num = num.negate();
            den = den.negate();
        }
        // store the values in the final fields
        numerator = num;
        denominator = den;
    }
}","public void test07277() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // numerator
        //
        verifyException(""org.apache.commons.math3.util.MathUtils"", e);
    }
}","/**
 * Create a {@link BigFraction} given the numerator and denominator as
 * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.
 *
 * @param num the numerator, must not be {@code null}.
 * @param den the denominator, must not be {@code null}.
 * @throws ZeroException if the denominator is zero.
 * @throws NullArgumentException if either of the arguments is null
 */"
"public BigFraction(final BigInteger num) {
    this(num, BigInteger.ONE);
}","public void test07378() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // numerator
        //
        verifyException(""org.apache.commons.math3.util.MathUtils"", e);
    }
}","/**
 * <p>
 * Create a {@link BigFraction} equivalent to the passed <tt>BigInteger</tt>, ie
 * ""num / 1"".
 * </p>
 *
 * @param num
 *            the numerator.
 */"
"public BigFraction(final long num, final long den) {
    this(BigInteger.valueOf(num), BigInteger.valueOf(den));
}","public void test07479() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Create a {@link BigFraction} given the numerator and denominator as simple
 * <tt>long</tt>. The {@link BigFraction} is reduced to lowest terms.
 * </p>
 *
 * @param num
 *            the numerator.
 * @param den
 *            the denominator.
 */"
"public BigFraction(final double value, final int maxDenominator) throws FractionConversionException {
    this(value, 0, maxDenominator, 100);
}","public void test07580() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0.0, (-1));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param maxDenominator
 *            The maximum allowed value for denominator.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test07681() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
    assertFalse(bigFraction2.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test07682() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
    assertTrue(bigFraction2.equals((Object) bigFraction1));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test07884() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
    boolean boolean0 = bigFraction0.equals(bigFraction0);
    assertTrue(boolean0);
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public double doubleValue() {
    double result = numerator.doubleValue() / denominator.doubleValue();
    if (Double.isNaN(result)) {
        // Numerator and/or denominator must be out of range:
        // Calculate how far to shift them to put them in range.
        int shift = Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Double.MAX_VALUE);
        result = numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue();
    }
    return result;
}","public void test07985() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    double double0 = bigFraction0.doubleValue();
    assertEquals(0.2, double0, 0.01);
}","/**
 * <p>
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>double</tt>
 * @see java.lang.Number#doubleValue()
 */"
"public BigFraction divide(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(bg)) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test08086() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    BigInteger bigInteger0 = BigInteger.ZERO;
    // Undeclared exception!
    try {
        bigFraction0.TWO_QUARTERS.divide(bigInteger0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code BigInteger},
 * ie {@code this * 1 / bg}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to divide by, must not be {@code null}
 * @return a {@link BigFraction} instance with the resulting values
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test08188() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
    assertTrue(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction(BigInteger num, BigInteger den) {
    MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);
    MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);
    if (BigInteger.ZERO.equals(den)) {
        throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    if (BigInteger.ZERO.equals(num)) {
        numerator = BigInteger.ZERO;
        denominator = BigInteger.ONE;
    } else {
        // reduce numerator and denominator by greatest common denominator
        final BigInteger gcd = num.gcd(den);
        if (BigInteger.ONE.compareTo(gcd) < 0) {
            num = num.divide(gcd);
            den = den.divide(gcd);
        }
        // move sign to numerator
        if (BigInteger.ZERO.compareTo(den) > 0) {
            num = num.negate();
            den = den.negate();
        }
        // store the values in the final fields
        numerator = num;
        denominator = den;
    }
}","public void test08491() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * Create a {@link BigFraction} given the numerator and denominator as
 * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.
 *
 * @param num the numerator, must not be {@code null}.
 * @param den the denominator, must not be {@code null}.
 * @throws ZeroException if the denominator is zero.
 * @throws NullArgumentException if either of the arguments is null
 */"
"@Override
public String toString() {
    String str = null;
    if (BigInteger.ONE.equals(denominator)) {
        str = numerator.toString();
    } else if (BigInteger.ZERO.equals(numerator)) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test08694() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
    String string0 = bigFraction1.toString();
    assertEquals(""4 / 5"", string0);
}","/**
 * <p>
 * Returns the <code>String</code> representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test08795() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
    assertFalse(bigFraction2.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test08796() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
    assertFalse(bigFraction2.equals((Object) bigFraction1));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction subtract(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (ZERO.equals(fraction)) {
        return this;
    }
    BigInteger num = null;
    BigInteger den = null;
    if (denominator.equals(fraction.denominator)) {
        num = numerator.subtract(fraction.numerator);
        den = denominator;
    } else {
        num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));
        den = denominator.multiply(fraction.denominator);
    }
    return new BigFraction(num, den);
}","public void test08898() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(1075);
    // Undeclared exception!
    try {
        bigFraction0.subtract((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.
 * </p>
 *
 * @param fraction {@link BigFraction} to subtract, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test08999() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.ONE.subtract(bigFraction0);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction subtract(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);
}","public void test090100() throws Throwable {
    byte[] byteArray0 = new byte[7];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    // Undeclared exception!
    try {
        bigFraction0.subtract((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Subtracts the value of an {@link BigInteger} from the value of this
 * {@code BigFraction}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigInteger} is {@code null}.
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test091102() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) (-1);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test092103() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-608L));
    BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
    assertFalse(bigFraction2.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction multiply(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO)) {
        return ZERO;
    }
    return new BigFraction(numerator.multiply(fraction.numerator), denominator.multiply(fraction.denominator));
}","public void test094106() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.TWO.multiply(bigFraction0);
    assertSame(bigFraction1, bigFraction0);
}","/**
 * <p>
 * Multiplies the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to multiply by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code fraction} is {@code null}.
 */"
"@Override
public float floatValue() {
    float result = numerator.floatValue() / denominator.floatValue();
    if (Double.isNaN(result)) {
        // Numerator and/or denominator must be out of range:
        // Calculate how far to shift them to put them in range.
        int shift = Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Float.MAX_VALUE);
        result = numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue();
    }
    return result;
}","public void test095107() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    float float0 = bigFraction0.floatValue();
    assertEquals(0.8F, float0, 0.01F);
}","/**
 * <p>
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p>
 *
 * @return the fraction as a <tt>float</tt>.
 * @see java.lang.Number#floatValue()
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test096108() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
    assertFalse(bigFraction2.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test096109() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
    assertFalse(bigFraction0.equals((Object) bigFraction2));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test096110() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
    assertFalse(boolean0);
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test096111() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
    assertFalse(bigFraction2.equals((Object) bigFraction1));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test097113() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    Object object0 = new Object();
    boolean boolean0 = bigFraction0.equals(object0);
    assertFalse(boolean0);
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction divide(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(fraction.numerator)) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return multiply(fraction.reciprocal());
}","public void test098114() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_HALF;
    // Undeclared exception!
    try {
        bigFraction0.TWO_THIRDS.divide((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to divide by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public BigFraction divide(final int i) {
    return divide(BigInteger.valueOf(i));
}","public void test099115() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    // Undeclared exception!
    try {
        bigFraction0.divide(0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code int}, ie
 * {@code this * 1 / i}, returning the result in reduced form.
 * </p>
 *
 * @param i the {@code int} to divide by
 * @return a {@link BigFraction} instance with the resulting values
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public BigFraction divide(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(bg)) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return new BigFraction(numerator, denominator.multiply(bg));
}","public void test100116() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    // Undeclared exception!
    try {
        bigFraction0.divide((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by the passed {@code BigInteger},
 * ie {@code this * 1 / bg}, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to divide by, must not be {@code null}
 * @return a {@link BigFraction} instance with the resulting values
 * @throws NullArgumentException if the {@code BigInteger} is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test102118() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = new BigFraction(0.8F, 2322.37, 1);
    BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
    assertFalse(bigFraction2.equals((Object) bigFraction1));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction add(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (ZERO.equals(fraction)) {
        return this;
    }
    BigInteger num = null;
    BigInteger den = null;
    if (denominator.equals(fraction.denominator)) {
        num = numerator.add(fraction.numerator);
        den = denominator;
    } else {
        num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));
        den = denominator.multiply(fraction.denominator);
    }
    return new BigFraction(num, den);
}","public void test102119() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = new BigFraction(0.8F, 2322.37, 1);
    BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
    assertSame(bigFraction2, bigFraction0);
}","/**
 * <p>
 * Adds the value of this fraction to another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction
 *            the {@link BigFraction} to add, must not be <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigFraction} is {@code null}.
 */"
"public BigFraction add(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (ZERO.equals(fraction)) {
        return this;
    }
    BigInteger num = null;
    BigInteger den = null;
    if (denominator.equals(fraction.denominator)) {
        num = numerator.add(fraction.numerator);
        den = denominator;
    } else {
        num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));
        den = denominator.multiply(fraction.denominator);
    }
    return new BigFraction(num, den);
}","public void test103120() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    // Undeclared exception!
    try {
        bigFraction0.FOUR_FIFTHS.add((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Adds the value of this fraction to another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction
 *            the {@link BigFraction} to add, must not be <code>null</code>.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@link BigFraction} is {@code null}.
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test104121() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public BigFraction abs() {
    return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();
}","public void test105123() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.abs();
    assertNotSame(bigFraction1, bigFraction0);
}","/**
 * <p>
 * Returns the absolute value of this {@link BigFraction}.
 * </p>
 *
 * @return the absolute value as a {@link BigFraction}.
 */"
"public BigFraction divide(final BigFraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (BigInteger.ZERO.equals(fraction.numerator)) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
    }
    return multiply(fraction.reciprocal());
}","public void test106124() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
    // Undeclared exception!
    try {
        bigFraction0.divide(bigFraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * </p>
 *
 * @param fraction Fraction to divide by, must not be {@code null}.
 * @return a {@link BigFraction} instance with the resulting values.
 * @throws NullArgumentException if the {@code fraction} is {@code null}.
 * @throws MathArithmeticException if the fraction to divide by is zero
 */"
"public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException {
    this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}","public void test108126() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0.028507909084964922, 0.028507909084964922, (-1846));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Unable to convert 0.029 to fraction after -1,846 iterations
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param epsilon
 *            maximum error allowed. The resulting fraction is within
 *            <code>epsilon</code> of <code>value</code>, in absolute terms.
 * @param maxIterations
 *            maximum number of convergents.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 * @see #BigFraction(double)
 */"
"public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException {
    this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}","public void test109127() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, 1.7976931348623157E308, 382);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 *
 * @param value
 *            the double value to convert to a fraction.
 * @param epsilon
 *            maximum error allowed. The resulting fraction is within
 *            <code>epsilon</code> of <code>value</code>, in absolute terms.
 * @param maxIterations
 *            maximum number of convergents.
 * @throws FractionConversionException
 *             if the continued fraction failed to converge.
 * @see #BigFraction(double)
 */"
"@Override
public String toString() {
    String str = null;
    if (BigInteger.ONE.equals(denominator)) {
        str = numerator.toString();
    } else if (BigInteger.ZERO.equals(numerator)) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test110128() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((double) (-692));
    String string0 = bigFraction0.toString();
    assertEquals(""-692"", string0);
}","/**
 * <p>
 * Returns the <code>String</code> representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"public BigFraction multiply(final BigInteger bg) {
    if (bg == null) {
        throw new NullArgumentException();
    }
    return new BigFraction(bg.multiply(numerator), denominator);
}","public void test111130() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-717.224843262248));
    // Undeclared exception!
    try {
        bigFraction0.multiply((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Multiplies the value of this fraction by the passed
 * <code>BigInteger</code>, returning the result in reduced form.
 * </p>
 *
 * @param bg the {@code BigInteger} to multiply by.
 * @return a {@code BigFraction} instance with the resulting values.
 * @throws NullArgumentException if {@code bg} is {@code null}.
 */"
"public int getDenominatorAsInt() {
    return denominator.intValue();
}","public void test112131() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    int int0 = bigFraction0.getDenominatorAsInt();
    assertEquals(0, int0);
}","/**
 * <p>
 * Access the denominator as a <tt>int</tt>.
 * </p>
 *
 * @return the denominator as a <tt>int</tt>.
 */"
"public BigFraction reciprocal() {
    return new BigFraction(denominator, numerator);
}","public void test114134() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
    // Undeclared exception!
    try {
        bigFraction1.reciprocal();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}","/**
 * <p>
 * Return the multiplicative inverse of this fraction.
 * </p>
 *
 * @return the reciprocal fraction.
 */"
"public double pow(final double exponent) {
    return FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent);
}","public void test115135() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    double double0 = bigFraction0.ONE_QUARTER.pow((-1.0));
    assertEquals(4.0, double0, 0.01);
}","/**
 * <p>
 * Returns a <code>double</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p>
 *
 * @param exponent
 *            exponent to which this <code>BigFraction</code> is to be raised.
 * @return <tt>this<sup>exponent</sup></tt>.
 */"
"public long getNumeratorAsLong() {
    return numerator.longValue();
}","public void test116136() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    long long0 = bigFraction0.getNumeratorAsLong();
    assertEquals(1L, long0);
}","/**
 * <p>
 * Access the numerator as a <tt>long</tt>.
 * </p>
 *
 * @return the numerator as a <tt>long</tt>.
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test117137() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    boolean boolean0 = bigFraction0.TWO_QUARTERS.equals(bigFraction0);
    assertFalse(boolean0);
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public int getDenominatorAsInt() {
    return denominator.intValue();
}","public void test118138() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1192L), (-3512299194304650054L));
    BigFraction bigFraction1 = bigFraction0.multiply((-270L));
    int int0 = bigFraction1.getDenominatorAsInt();
    assertEquals((-1404234933), int0);
}","/**
 * <p>
 * Access the denominator as a <tt>int</tt>.
 * </p>
 *
 * @return the denominator as a <tt>int</tt>.
 */"
"public int getDenominatorAsInt() {
    return denominator.intValue();
}","public void test119139() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    int int0 = bigFraction0.getDenominatorAsInt();
    assertEquals(1, int0);
}","/**
 * <p>
 * Access the denominator as a <tt>int</tt>.
 * </p>
 *
 * @return the denominator as a <tt>int</tt>.
 */"
"public BigDecimal bigDecimalValue(final int roundingMode) {
    return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);
}","public void test120140() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue(69);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p>
 *
 * @param roundingMode
 *            rounding mode to apply. see {@link BigDecimal} constants.
 * @return the fraction as a <code>BigDecimal</code>.
 * @throws IllegalArgumentException
 *             if <tt>roundingMode</tt> does not represent a valid rounding
 *             mode.
 * @see BigDecimal
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test122142() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(2);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public long longValue() {
    return numerator.divide(denominator).longValue();
}","public void test123144() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    long long0 = bigFraction0.longValue();
    assertEquals(0L, long0);
}","/**
 * <p>
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * </p>
 *
 * @return the whole number fraction part.
 * @see java.lang.Number#longValue()
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test125147() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = bigFraction0.subtract(2);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public int hashCode() {
    return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();
}","public void test126148() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    bigFraction0.TWO_THIRDS.hashCode();
}","/**
 * <p>
 * Gets a hashCode for the fraction.
 * </p>
 *
 * @return a hash code value for this object.
 * @see java.lang.Object#hashCode()
 */"
"public long getDenominatorAsLong() {
    return denominator.longValue();
}","public void test127149() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    long long0 = bigFraction0.ONE.getDenominatorAsLong();
    assertEquals(1L, long0);
}","/**
 * <p>
 * Access the denominator as a <tt>long</tt>.
 * </p>
 *
 * @return the denominator as a <tt>long</tt>.
 */"
"public double percentageValue() {
    return multiply(ONE_HUNDRED).doubleValue();
}","public void test128150() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    double double0 = bigFraction0.percentageValue();
    assertEquals(20.0, double0, 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test129151() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
    BigFraction bigFraction1 = bigFraction0.reduce();
    assertTrue(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test131155() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.add(4503599627370496L);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public int compareTo(final BigFraction object) {
    BigInteger nOd = numerator.multiply(object.denominator);
    BigInteger dOn = denominator.multiply(object.numerator);
    return nOd.compareTo(dOn);
}","public void test132156() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    int int0 = bigFraction0.THREE_QUARTERS.compareTo(bigFraction0);
    assertEquals(1, int0);
}","/**
 * <p>
 * Compares this object to another based on size.
 * </p>
 *
 * @param object
 *            the object to compare to, must not be <code>null</code>.
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 * @see java.lang.Comparable#compareTo(java.lang.Object)
 */"
"@Override
public boolean equals(final Object other) {
    boolean ret = false;
    if (this == other) {
        ret = true;
    } else if (other instanceof BigFraction) {
        BigFraction rhs = ((BigFraction) other).reduce();
        BigFraction thisOne = this.reduce();
        ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
    }
    return ret;
}","public void test134159() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(1951);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}","/**
 * <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p>
 *
 * @param other
 *            fraction to test for equality to this fraction, can be
 *            <code>null</code>.
 * @return true if two fractions are equal, false if object is
 *         <code>null</code>, not an instance of {@link BigFraction}, or not
 *         equal to this fraction instance.
 * @see java.lang.Object#equals(java.lang.Object)
 */"
"public int getNumeratorAsInt() {
    return numerator.intValue();
}","public void test135161() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    int int0 = bigFraction0.ONE.getNumeratorAsInt();
    assertEquals(1, int0);
}","/**
 * <p>
 * Access the numerator as a <tt>int</tt>.
 * </p>
 *
 * @return the numerator as a <tt>int</tt>.
 */"
"public BigFractionField getField() {
    return BigFractionField.getInstance();
}","public void test136162() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    BigFractionField bigFractionField0 = bigFraction0.ONE_FIFTH.getField();
    assertNotNull(bigFractionField0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int intValue() {
    return numerator.divide(denominator).intValue();
}","public void test138164() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    int int0 = bigFraction0.ONE_FIFTH.intValue();
    assertEquals(0, int0);
}","/**
 * <p>
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * </p>
 *
 * @return the whole number fraction part.
 * @see java.lang.Number#intValue()
 */"
