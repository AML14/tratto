project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    BigInteger bigInteger0 = BigInteger.ZERO;
    bigFraction0.TWO.pow(bigInteger0);
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.ONE.pow(2089L);
}",1,
project,0,test0022,"public void test0022() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    bigFraction0.pow(0);
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0025000000000545697, 4);
    bigFraction0.ZERO.abs();
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(2277, 1);
    BigInteger bigInteger0 = BigInteger.ONE;
    bigFraction0.subtract(bigInteger0);
}",1,
project,0,test0055,"public void test0055() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    byte[] byteArray0 = new byte[5];
    byteArray0[3] = (byte) 17;
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    bigFraction0.THREE_QUARTERS.subtract(bigInteger0);
}",1,
project,0,test0066,"public void test0066() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    bigFraction0.subtract(1037L);
}",1,
project,0,test0077,"public void test0077() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.subtract(9223372036854775807L);
}",1,
project,0,test0088,"public void test0088() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    bigFraction0.subtract((-1105));
}",1,
project,0,test0099,"public void test0099() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.subtract(603);
}",1,
project,0,test01010,"public void test01010() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    bigFraction0.reduce();
}",0,
project,0,test01111,"public void test01111() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.TWO.divide(bigFraction0);
    bigFraction1.reciprocal();
}",1,
project,0,test01212,"public void test01212() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.reciprocal();
}",1,
project,0,test01313,"public void test01313() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    bigFraction0.MINUS_ONE.reciprocal();
}",1,
project,0,test01414,"public void test01414() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.add(1852L);
    bigFraction1.pow((-664L));
}",0,
project,0,test01515,"public void test01515() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.ONE_HALF.pow((-1302));
}",0,
project,0,test01616,"public void test01616() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_THIRD;
    bigFraction0.ONE_QUARTER.pow(1.7976931348623157E308);
}",0,
project,0,test01717,"public void test01717() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    bigFraction0.pow((double) 1239);
}",0,
project,0,test01818,"public void test01818() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0025000000000545697, 4);
    bigFraction0.percentageValue();
}",0,
project,0,test01919,"public void test01919() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    bigFraction0.percentageValue();
}",0,
project,0,test02020,"public void test02020() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1));
    bigFraction0.negate();
}",0,
project,0,test02121,"public void test02121() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.negate();
}",0,
project,0,test02222,"public void test02222() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    BigFraction bigFraction1 = bigFraction0.add(3);
    bigFraction1.multiply(bigFraction0);
}",1,
project,0,test02323,"public void test02323() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    bigFraction0.multiply(bigInteger0);
}",1,
project,0,test02424,"public void test02424() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction((-1482), 1045);
    BigInteger bigInteger0 = bigFraction0.getDenominator();
    bigFraction0.multiply(bigInteger0);
}",1,
project,0,test02525,"public void test02525() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    bigFraction0.TWO_QUARTERS.multiply(676L);
}",0,
project,0,test02626,"public void test02626() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    bigFraction0.multiply((-114L));
}",1,
project,0,test02727,"public void test02727() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-3763.34035));
    bigFraction0.multiply(121);
}",1,
project,0,test02828,"public void test02828() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    bigFraction0.longValue();
}",0,
project,0,test02929,"public void test02929() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigInteger bigInteger0 = BigInteger.TEN;
    BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
    bigFraction1.intValue();
}",0,
project,0,test03030,"public void test03030() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1464.0718), 3530.3516753794024, 76);
    bigFraction0.intValue();
}",0,
project,0,test03131,"public void test03131() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.getNumeratorAsLong();
}",0,
project,0,test03232,"public void test03232() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-2139));
    bigFraction0.getNumeratorAsLong();
}",0,
project,0,test03333,"public void test03333() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.getNumeratorAsInt();
}",0,
project,0,test03434,"public void test03434() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    bigFraction0.MINUS_ONE.getNumeratorAsInt();
}",0,
project,0,test03535,"public void test03535() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.negate();
    bigFraction1.getNumerator();
}",0,
project,0,test03636,"public void test03636() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.649738073348999);
    bigFraction0.getDenominator();
}",0,
project,0,test03737,"public void test03737() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.649738073348999);
    BigFraction bigFraction1 = bigFraction0.pow((-2755L));
    bigFraction1.getDenominator();
}",0,
project,0,test03838,"public void test03838() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.divide((-1446L));
    bigFraction2.floatValue();
}",0,
project,0,test03939,"public void test03939() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-692));
    bigFraction1.floatValue();
}",0,
project,0,test04040,"public void test04040() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
    bigFraction0.doubleValue();
}",0,
project,0,test04141,"public void test04141() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigInteger bigInteger0 = bigFraction0.getNumerator();
    BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(bigInteger0);
    bigFraction1.doubleValue();
}",0,
project,0,test04242,"public void test04242() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(2037, 2037);
    BigFraction bigFraction1 = BigFraction.MINUS_ONE;
    bigFraction0.divide(bigFraction1);
}",1,
project,0,test04343,"public void test04343() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-692));
    BigInteger bigInteger0 = BigInteger.ONE;
    bigFraction1.divide(bigInteger0);
}",1,
project,0,test04444,"public void test04444() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(406);
    BigInteger bigInteger0 = bigFraction0.getNumerator();
    bigFraction1.divide(bigInteger0);
}",1,
project,0,test04545,"public void test04545() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-618.0), 3136.5699010956746, 0);
    bigFraction0.divide((-1L));
}",1,
project,0,test04646,"public void test04646() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-858));
    bigFraction0.divide((long) 1);
}",1,
project,0,test04747,"public void test04747() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    bigFraction0.MINUS_ONE.divide((-1));
}",1,
project,0,test04949,"public void test04949() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-858));
    int int0 = bigFraction0.compareTo(bigFraction0);
    assertEquals(0, int0);
}",0,
project,0,test05051,"public void test05051() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-608L));
    int int0 = bigFraction0.compareTo(bigFraction1);
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test05760,"public void test05760() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = bigFraction0.multiply((-1));
    BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
    BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
    assertTrue(bigFraction3.equals((Object) bigFraction1));
}",0,
project,0,test05962,"public void test05962() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    byte[] byteArray0 = new byte[3];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
    assertTrue(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test06166,"public void test06166() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(0);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test06469,"public void test06469() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-974L));
    // Undeclared exception!
    try {
        bigFraction0.TWO.pow((BigInteger) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",0,
project,0,test06570,"public void test06570() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    // Undeclared exception!
    try {
        bigFraction0.pow(Integer.MAX_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // BigInteger would overflow supported range
        //
        verifyException(""java.math.BigInteger"", e);
    }
}",0,
project,0,test06671,"public void test06671() throws Throwable {
    // Undeclared exception!
    try {
        BigFraction.getReducedFraction(3630, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test06772,"public void test06772() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    // Undeclared exception!
    try {
        bigFraction0.ONE_QUARTER.divide(0L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test06873,"public void test06873() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-467.49498417), 59);
    // Undeclared exception!
    try {
        bigFraction0.compareTo((BigFraction) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",0,
project,0,test06974,"public void test06974() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue((-719), 1043);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",0,
project,0,test07075,"public void test07075() throws Throwable {
    BigFraction bigFraction0 = BigFraction.MINUS_ONE;
    // Undeclared exception!
    try {
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Non-terminating decimal expansion; no exact representable decimal result.
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",1,
project,0,test07176,"public void test07176() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    try {
        bigFraction0.add((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math3.util.MathUtils"", e);
    }
}",1,
project,0,test07277,"public void test07277() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // numerator
        //
        verifyException(""org.apache.commons.math3.util.MathUtils"", e);
    }
}",1,
project,0,test07378,"public void test07378() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // numerator
        //
        verifyException(""org.apache.commons.math3.util.MathUtils"", e);
    }
}",1,
project,0,test07479,"public void test07479() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",0,
project,0,test07580,"public void test07580() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0.0, (-1));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",0,
project,0,test07681,"public void test07681() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
    assertFalse(bigFraction2.equals((Object) bigFraction0));
}",0,
project,0,test07682,"public void test07682() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
    assertTrue(bigFraction2.equals((Object) bigFraction1));
}",0,
project,0,test07884,"public void test07884() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
    boolean boolean0 = bigFraction0.equals(bigFraction0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07985,"public void test07985() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    double double0 = bigFraction0.doubleValue();
    assertEquals(0.2, double0, 0.01);
}",0,
project,0,test08086,"public void test08086() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    BigInteger bigInteger0 = BigInteger.ZERO;
    // Undeclared exception!
    try {
        bigFraction0.TWO_QUARTERS.divide(bigInteger0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test08188,"public void test08188() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigInteger bigInteger0 = BigInteger.ONE;
    BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
    assertTrue(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test08491,"public void test08491() throws Throwable {
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test08694,"public void test08694() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
    String string0 = bigFraction1.toString();
    assertEquals(""4 / 5"", string0);
}",0,
project,0,test08795,"public void test08795() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
    assertFalse(bigFraction2.equals((Object) bigFraction0));
}",0,
project,0,test08796,"public void test08796() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigInteger bigInteger0 = BigInteger.ZERO;
    BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
    BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
    assertFalse(bigFraction2.equals((Object) bigFraction1));
}",0,
project,0,test08898,"public void test08898() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(1075);
    // Undeclared exception!
    try {
        bigFraction0.subtract((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test08999,"public void test08999() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.ONE.subtract(bigFraction0);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test090100,"public void test090100() throws Throwable {
    byte[] byteArray0 = new byte[7];
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction0 = new BigFraction(bigInteger0);
    // Undeclared exception!
    try {
        bigFraction0.subtract((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test091102,"public void test091102() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) (-1);
    BigInteger bigInteger0 = new BigInteger(byteArray0);
    BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test092103,"public void test092103() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-608L));
    BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
    assertFalse(bigFraction2.equals((Object) bigFraction0));
}",0,
project,0,test094106,"public void test094106() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.TWO.multiply(bigFraction0);
    assertSame(bigFraction1, bigFraction0);
}",1,
project,0,test095107,"public void test095107() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    float float0 = bigFraction0.floatValue();
    assertEquals(0.8F, float0, 0.01F);
}",0,
project,0,test096108,"public void test096108() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
    assertFalse(bigFraction2.equals((Object) bigFraction0));
}",0,
project,0,test096109,"public void test096109() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
    assertFalse(bigFraction0.equals((Object) bigFraction2));
}",0,
project,0,test096110,"public void test096110() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test096111,"public void test096111() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = BigFraction.ONE_HALF;
    BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
    boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
    assertFalse(bigFraction2.equals((Object) bigFraction1));
}",0,
project,0,test097113,"public void test097113() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    Object object0 = new Object();
    boolean boolean0 = bigFraction0.equals(object0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test098114,"public void test098114() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_HALF;
    // Undeclared exception!
    try {
        bigFraction0.TWO_THIRDS.divide((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test099115,"public void test099115() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    // Undeclared exception!
    try {
        bigFraction0.divide(0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test100116,"public void test100116() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    // Undeclared exception!
    try {
        bigFraction0.divide((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test102118,"public void test102118() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = new BigFraction(0.8F, 2322.37, 1);
    BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
    assertFalse(bigFraction2.equals((Object) bigFraction1));
}",0,
project,0,test102119,"public void test102119() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = new BigFraction(0.8F, 2322.37, 1);
    BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
    assertSame(bigFraction2, bigFraction0);
}",1,
project,0,test103120,"public void test103120() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
    // Undeclared exception!
    try {
        bigFraction0.FOUR_FIFTHS.add((BigFraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test104121,"public void test104121() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test105123,"public void test105123() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.abs();
    assertNotSame(bigFraction1, bigFraction0);
}",0,
project,0,test106124,"public void test106124() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
    // Undeclared exception!
    try {
        bigFraction0.divide(bigFraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test108126,"public void test108126() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(0.028507909084964922, 0.028507909084964922, (-1846));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Unable to convert 0.029 to fraction after -1,846 iterations
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",0,
project,0,test109127,"public void test109127() throws Throwable {
    BigFraction bigFraction0 = null;
    try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, 1.7976931348623157E308, 382);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",0,
project,0,test110128,"public void test110128() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((double) (-692));
    String string0 = bigFraction0.toString();
    assertEquals(""-692"", string0);
}",0,
project,0,test111130,"public void test111130() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-717.224843262248));
    // Undeclared exception!
    try {
        bigFraction0.multiply((BigInteger) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test112131,"public void test112131() throws Throwable {
    BigFraction bigFraction0 = new BigFraction(0.0);
    int int0 = bigFraction0.getDenominatorAsInt();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test114134,"public void test114134() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
    // Undeclared exception!
    try {
        bigFraction1.reciprocal();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // denominator must be different from 0
        //
        verifyException(""org.apache.commons.math3.fraction.BigFraction"", e);
    }
}",1,
project,0,test115135,"public void test115135() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    double double0 = bigFraction0.ONE_QUARTER.pow((-1.0));
    assertEquals(4.0, double0, 0.01);
}",0,
project,0,test116136,"public void test116136() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    long long0 = bigFraction0.getNumeratorAsLong();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test117137,"public void test117137() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    boolean boolean0 = bigFraction0.TWO_QUARTERS.equals(bigFraction0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test118138,"public void test118138() throws Throwable {
    BigFraction bigFraction0 = new BigFraction((-1192L), (-3512299194304650054L));
    BigFraction bigFraction1 = bigFraction0.multiply((-270L));
    int int0 = bigFraction1.getDenominatorAsInt();
    assertEquals((-1404234933), int0);
}",0,"assertEquals(0, int0)"
project,0,test119139,"public void test119139() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    int int0 = bigFraction0.getDenominatorAsInt();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test120140,"public void test120140() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    // Undeclared exception!
    try {
        bigFraction0.bigDecimalValue(69);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",0,
project,0,test122142,"public void test122142() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(2);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test123144,"public void test123144() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    long long0 = bigFraction0.longValue();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test125147,"public void test125147() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    BigFraction bigFraction1 = bigFraction0.subtract(2);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test126148,"public void test126148() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO;
    bigFraction0.TWO_THIRDS.hashCode();
}",0,
project,0,test127149,"public void test127149() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    long long0 = bigFraction0.ONE.getDenominatorAsLong();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test128150,"public void test128150() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    double double0 = bigFraction0.percentageValue();
    assertEquals(20.0, double0, 0.01);
}",0,
project,0,test129151,"public void test129151() throws Throwable {
    BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
    BigFraction bigFraction1 = bigFraction0.reduce();
    assertTrue(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test131155,"public void test131155() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.add(4503599627370496L);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test132156,"public void test132156() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ZERO;
    int int0 = bigFraction0.THREE_QUARTERS.compareTo(bigFraction0);
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test134159,"public void test134159() throws Throwable {
    BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
    BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(1951);
    assertFalse(bigFraction1.equals((Object) bigFraction0));
}",0,
project,0,test135161,"public void test135161() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    int int0 = bigFraction0.ONE.getNumeratorAsInt();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test136162,"public void test136162() throws Throwable {
    BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
    BigFractionField bigFractionField0 = bigFraction0.ONE_FIFTH.getField();
    assertNotNull(bigFractionField0);
}",0,
project,0,test138164,"public void test138164() throws Throwable {
    BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
    int int0 = bigFraction0.ONE_FIFTH.intValue();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
