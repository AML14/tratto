focal_method,test_prefix,docstring
"public int getNumerator() {
    return numerator;
}","public void test000() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-1517));
    assertEquals((-1517), fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test001() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.ONE_THIRD.multiply((-1517));
    assertEquals((-50566.66666666667), fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test012() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    int int0 = fraction0.getDenominator();
    assertEquals(4, int0);
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public Fraction negate() {
    if (numerator == Integer.MIN_VALUE) {
        throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
    }
    return new Fraction(-numerator, denominator);
}","public void test023() throws Throwable {
    Fraction fraction0 = new Fraction(423, 423);
    Fraction fraction1 = fraction0.add(Integer.MAX_VALUE);
    // Undeclared exception!
    try {
        fraction1.negate();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/1, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Return the additive inverse of this fraction.
 * @return the negation of this fraction.
 */"
"public int getDenominator() {
    return denominator;
}","public void test034() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.TWO_FIFTHS.divide(1399);
    assertEquals(6995, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test035() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.TWO_FIFTHS.divide(1399);
    assertEquals(2.859185E-4F, fraction1.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test046() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    Fraction fraction1 = fraction0.subtract(fraction0);
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public FractionField getField() {
    return FractionField.getInstance();
}","public void test057() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    FractionField fractionField0 = fraction0.getField();
    assertNotNull(fractionField0);
}","/**
 * {@inheritDoc}
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test079() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    long long0 = fraction0.longValue();
    assertEquals(50.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"@Override
public long longValue() {
    return (long) doubleValue();
}","public void test0710() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    long long0 = fraction0.longValue();
    assertEquals(0L, long0);
}","/**
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test0811() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.TWO_THIRDS.subtract(4268);
    assertEquals((-4267.333333333333), fraction1.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public int getDenominator() {
    return denominator;
}","public void test0812() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.TWO_THIRDS.subtract(4268);
    assertEquals(3, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public int intValue() {
    return (int) doubleValue();
}","public void test0913() throws Throwable {
    Fraction fraction0 = new Fraction(4);
    int int0 = fraction0.intValue();
    assertEquals(4, int0);
}","/**
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * @return the whole number fraction part
 */"
"public int getDenominator() {
    return denominator;
}","public void test0914() throws Throwable {
    Fraction fraction0 = new Fraction(4);
    int int0 = fraction0.intValue();
    assertEquals(1, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public int hashCode() {
    return 37 * (37 * 17 + numerator) + denominator;
}","public void test1015() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    fraction0.hashCode();
}","/**
 * Gets a hashCode for the fraction.
 * @return a hash code value for this object
 */"
"public int getNumerator() {
    return numerator;
}","public void test1116() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    int int0 = fraction0.getNumerator();
    assertEquals(3, int0);
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test1217() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    float float0 = fraction0.floatValue();
    assertEquals(0.5F, float0, 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1318() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    double double0 = fraction0.percentageValue();
    assertEquals(75.0, double0, 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public Fraction(double value, int maxDenominator) throws FractionConversionException {
    this(value, 0, maxDenominator, 100);
}","public void test1419() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((double) 4, 4);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 4 to fraction (-3/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 * @param value the double value to convert to a fraction.
 * @param maxDenominator The maximum allowed value for denominator
 * @throws FractionConversionException if the continued fraction failed to
 *         converge
 */"
"public Fraction(double value) throws FractionConversionException {
    this(value, DEFAULT_EPSILON, 100);
}","public void test1520() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the double value.
 * @param value the double value to convert to a fraction.
 * @throws FractionConversionException if the continued fraction failed to
 *         converge.
 */"
"public Fraction(double value, int maxDenominator) throws FractionConversionException {
    this(value, 0, maxDenominator, 100);
}","public void test1621() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction((double) 9, 9);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Overflow trying to convert 9 to fraction (9,223,372,036,854,775,800/9,223,372,036,854,775,807)
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 * @param value the double value to convert to a fraction.
 * @param maxDenominator The maximum allowed value for denominator
 * @throws FractionConversionException if the continued fraction failed to
 *         converge
 */"
"public Fraction(double value, double epsilon, int maxIterations) throws FractionConversionException {
    this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}","public void test1722() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(4.671341494509873E-4, 4.671341494509873E-4, (-87));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Unable to convert 0 to fraction after -87 iterations
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p>
 * @param value the double value to convert to a fraction.
 * @param epsilon maximum error allowed.  The resulting fraction is within
 *        {@code epsilon} of {@code value}, in absolute terms.
 * @param maxIterations maximum number of convergents
 * @throws FractionConversionException if the continued fraction failed to
 *         converge.
 */"
"public int getDenominator() {
    return denominator;
}","public void test1823() throws Throwable {
    Fraction fraction0 = new Fraction((-1044.2346729));
    assertEquals(473, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test1924() throws Throwable {
    Fraction fraction0 = new Fraction(425.11148473894536, 2288);
    assertEquals(42511.14848630466, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public Fraction(int num, int den) {
    if (den == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den);
    }
    if (den < 0) {
        if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den);
        }
        num = -num;
        den = -den;
    }
    // reduce numerator and denominator by greatest common denominator.
    final int d = ArithmeticUtils.gcd(num, den);
    if (d > 1) {
        num /= d;
        den /= d;
    }
    // move sign to numerator.
    if (den < 0) {
        num = -num;
        den = -den;
    }
    this.numerator = num;
    this.denominator = den;
}","public void test2025() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(0, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 0/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.
 * @param num the numerator.
 * @param den the denominator.
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public int getNumerator() {
    return numerator;
}","public void test2126() throws Throwable {
    Fraction fraction0 = new Fraction((-2059), (-2059));
    assertEquals(1, fraction0.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test2127() throws Throwable {
    Fraction fraction0 = new Fraction((-2059), (-2059));
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public Fraction(int num, int den) {
    if (den == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den);
    }
    if (den < 0) {
        if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den);
        }
        num = -num;
        den = -den;
    }
    // reduce numerator and denominator by greatest common denominator.
    final int d = ArithmeticUtils.gcd(num, den);
    if (d > 1) {
        num /= d;
        den /= d;
    }
    // move sign to numerator.
    if (den < 0) {
        num = -num;
        den = -den;
    }
    this.numerator = num;
    this.denominator = den;
}","public void test2228() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.
 * @param num the numerator.
 * @param den the denominator.
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public Fraction(int num, int den) {
    if (den == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den);
    }
    if (den < 0) {
        if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den);
        }
        num = -num;
        den = -den;
    }
    // reduce numerator and denominator by greatest common denominator.
    final int d = ArithmeticUtils.gcd(num, den);
    if (d > 1) {
        num /= d;
        den /= d;
    }
    // move sign to numerator.
    if (den < 0) {
        num = -num;
        den = -den;
    }
    this.numerator = num;
    this.denominator = den;
}","public void test2329() throws Throwable {
    Fraction fraction0 = null;
    try {
        fraction0 = new Fraction(2, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 2/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.
 * @param num the numerator.
 * @param den the denominator.
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public int getDenominator() {
    return denominator;
}","public void test2430() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.MINUS_ONE.abs();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test2532() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    Fraction fraction1 = fraction0.abs();
    assertEquals(0.2, fraction1.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test2633() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(0, int0);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test2734() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.MINUS_ONE.add(2);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals((-1), int0);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"@Override
public float floatValue() {
    return (float) doubleValue();
}","public void test2735() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.MINUS_ONE.add(2);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}","/**
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>float</tt>
 */"
"public int compareTo(Fraction object) {
    long nOd = ((long) numerator) * object.denominator;
    long dOn = ((long) denominator) * object.numerator;
    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}","public void test2836() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.MINUS_ONE.add((-2682));
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1, int0);
}","/**
 * Compares this object to another based on size.
 * @param object the object to compare to
 * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
 *         than <tt>object</tt>, 0 if they are equal.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test2938() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.ONE_HALF;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(fraction0.equals((Object) fraction1));
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test2939() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.ONE_HALF;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test3040() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    boolean boolean0 = fraction0.equals(fraction0);
    assertTrue(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test3141() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Object object0 = new Object();
    boolean boolean0 = fraction0.equals(object0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test3242() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.TWO_THIRDS;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test3243() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.TWO_THIRDS;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(fraction0.equals((Object) fraction1));
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Fraction) {
        // since fractions are always in lowest terms, numerators and
        // denominators can be compared directly for equality.
        Fraction rhs = (Fraction) other;
        return (numerator == rhs.numerator) && (denominator == rhs.denominator);
    }
    return false;
}","public void test3344() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.ONE_HALF;
    boolean boolean0 = fraction1.equals(fraction0);
    assertTrue(boolean0);
}","/**
 * Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.
 * @param other fraction to test for equality to this fraction
 * @return true if two fractions are equal, false if object is
 *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 *         to this fraction instance.
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test3445() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    // Undeclared exception!
    try {
        fraction0.add((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test3546() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
    assertEquals((-25.0), fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getNumerator() {
    return numerator;
}","public void test3547() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
    assertEquals((-1), fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test3648() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.ZERO.add(fraction0);
    assertSame(fraction1, fraction0);
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test3749() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = Fraction.ZERO;
    Fraction fraction2 = fraction0.TWO_FIFTHS.add(fraction1);
    assertEquals(40.0, fraction2.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getNumerator() {
    return numerator;
}","public void test3850() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.TWO_FIFTHS.add(fraction0);
    assertEquals(11, fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test3851() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    Fraction fraction1 = fraction0.TWO_FIFTHS.add(fraction0);
    assertEquals(73.33333333333333, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test3952() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(fraction0);
    assertEquals(0.0, fraction1.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public int getDenominator() {
    return denominator;
}","public void test3953() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.subtract(fraction0);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test4054() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    Fraction fraction1 = Fraction.getReducedFraction(Integer.MAX_VALUE, 2880);
    // Undeclared exception!
    try {
        fraction1.add(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow, numerator too large after multiply: 2,147,484,223
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public int getNumerator() {
    return numerator;
}","public void test4155() throws Throwable {
    Fraction fraction0 = new Fraction(11, 11);
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    assertEquals(0, fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public int getDenominator() {
    return denominator;
}","public void test4156() throws Throwable {
    Fraction fraction0 = new Fraction(11, 11);
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    assertEquals(1, fraction0.getDenominator());
}","/**
 * Access the denominator.
 * @return the denominator.
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test4157() throws Throwable {
    Fraction fraction0 = new Fraction(11, 11);
    Fraction fraction1 = fraction0.ZERO.divide(fraction0);
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public Fraction multiply(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);
    int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);
    return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test4258() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    // Undeclared exception!
    try {
        fraction0.multiply((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws NullArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test4359() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.FOUR_FIFTHS.multiply(fraction0);
    assertEquals(0.4, fraction1.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public int getNumerator() {
    return numerator;
}","public void test4460() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = fraction0.FOUR_FIFTHS.multiply(fraction0);
    assertEquals(0, fraction1.getNumerator());
}","/**
 * Access the numerator.
 * @return the numerator.
 */"
"public Fraction divide(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (fraction.numerator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);
    }
    return multiply(fraction.reciprocal());
}","public void test4561() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    // Undeclared exception!
    try {
        fraction0.THREE_FIFTHS.divide((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // fraction
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws IllegalArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public Fraction divide(Fraction fraction) {
    if (fraction == null) {
        throw new NullArgumentException(LocalizedFormats.FRACTION);
    }
    if (fraction.numerator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);
    }
    return multiply(fraction.reciprocal());
}","public void test4662() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    // Undeclared exception!
    try {
        fraction0.ZERO.divide(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // the fraction to divide by must not be zero: 0/1
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be {@code null}
 * @return a {@code Fraction} instance with the resulting values
 * @throws IllegalArgumentException if the fraction is {@code null}
 * @throws MathArithmeticException if the fraction to divide by is zero
 * @throws MathArithmeticException if the resulting numerator or denominator exceeds
 *  {@code Integer.MAX_VALUE}
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test4763() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(0, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero denominator in fraction 0/0
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"@Override
public double doubleValue() {
    return (double) numerator / (double) denominator;
}","public void test4864() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(0, (-14612));
    assertEquals(0.0, fraction0.doubleValue(), 0.01);
}","/**
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * @return the fraction as a <tt>double</tt>
 */"
"public double percentageValue() {
    return 100 * doubleValue();
}","public void test4965() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
    assertEquals(100.0, fraction0.percentageValue(), 0.01);
}","/**
 * <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p>
 *
 * @return the fraction percentage as a <tt>double</tt>.
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test5066() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(4507, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction 4,507/-2,147,483,648, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator);
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = ArithmeticUtils.gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test5167() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2212));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow in fraction -2,147,483,648/-2,212, cannot negate
        //
        verifyException(""org.apache.commons.math3.fraction.Fraction"", e);
    }
}","/**
 * <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws MathArithmeticException if the denominator is {@code zero}
 */"
"@Override
public String toString() {
    String str = null;
    if (denominator == 1) {
        str = Integer.toString(numerator);
    } else if (numerator == 0) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test5268() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    String string0 = fraction0.toString();
    assertEquals(""1 / 5"", string0);
}","/**
 * <p>
 * Returns the {@code String} representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
"@Override
public String toString() {
    String str = null;
    if (denominator == 1) {
        str = Integer.toString(numerator);
    } else if (numerator == 0) {
        str = ""0"";
    } else {
        str = numerator + "" / "" + denominator;
    }
    return str;
}","public void test5369() throws Throwable {
    Fraction fraction0 = Fraction.MINUS_ONE;
    String string0 = fraction0.toString();
    assertEquals(""-1"", string0);
}","/**
 * <p>
 * Returns the {@code String} representing this fraction, ie
 * ""num / dem"" or just ""num"" if the denominator is one.
 * </p>
 *
 * @return a string representation of the fraction.
 * @see java.lang.Object#toString()
 */"
