project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(801, 801);
    RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, (-2277.04674082));
}",0,
project,0,test11,"public void test11() throws Throwable {
    RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
    try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) null, 2028.36210992623);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test22,"public void test22() throws Throwable {
    double[] doubleArray0 = new double[4];
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
    try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, (-2040.65));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test33,"public void test33() throws Throwable {
    double[][] doubleArray0 = new double[2][1];
    double[] doubleArray1 = new double[18];
    doubleArray1[1] = 1183.0008;
    doubleArray0[0] = doubleArray1;
    doubleArray0[1] = doubleArray1;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
    try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, 2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -1,183.001 is smaller than, or equal to, the minimum (2): not positive definite matrix: value -1,183.001 at index 1
        //
        verifyException(""org.apache.commons.math3.linear.RectangularCholeskyDecomposition"", e);
    }
}",0,
project,0,test44,"public void test44() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(31, 31);
    RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
    try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(openMapRealMatrix0, 31);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 is smaller than, or equal to, the minimum (31): not positive definite matrix: value 0 at index 0
        //
        verifyException(""org.apache.commons.math3.linear.RectangularCholeskyDecomposition"", e);
    }
}",0,
project,0,test55,"public void test55() throws Throwable {
    double[] doubleArray0 = new double[3];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
    RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 0.0);
    RealMatrix realMatrix1 = rectangularCholeskyDecomposition0.getRootMatrix();
    assertEquals(3, realMatrix1.getRowDimension());
}",0,
project,0,test66,"public void test66() throws Throwable {
    double[][] doubleArray0 = new double[2][1];
    double[] doubleArray1 = new double[18];
    doubleArray1[1] = 1183.0008;
    doubleArray0[0] = doubleArray1;
    doubleArray0[1] = doubleArray1;
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, 1183.0008);
    int int0 = rectangularCholeskyDecomposition0.getRank();
    assertEquals(2, int0);
}",0,"assertEquals(0, int0)"
