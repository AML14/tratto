project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[6];
    brentOptimizer0.setMaximalIterationCount((-1));
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-2054.989641842), (-394.483634953125), 5.0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // maximal number of iterations (-1) exceeded
        //
        verifyException(""org.apache.commons.math.optimization.univariate.BrentOptimizer"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[5];
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, Double.NaN, Double.NaN);
    assertEquals(Integer.MAX_VALUE, brentOptimizer0.getMaxEvaluations());
}",0,
project,0,test012,"public void test012() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[5];
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, Double.NaN, Double.NaN);
    assertEquals(100, brentOptimizer0.getMaximalIterationCount());
}",0,"assertEquals(0, brentOptimizer0.getMaximalIterationCount())"
project,0,test023,"public void test023() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    brentOptimizer0.resetAbsoluteAccuracy();
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, (-588.82), 0.0, 836.5988126426097);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.BrentOptimizer"", e);
    }
}",0,
project,0,test034,"public void test034() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    brentOptimizer0.setAbsoluteAccuracy((-1149.81200018));
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, (-1149.81200018), (-1815.95595));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -1,149.812 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.BrentOptimizer"", e);
    }
}",1,
project,0,test045,"public void test045() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    brentOptimizer0.resetRelativeAccuracy();
    double[] doubleArray0 = new double[6];
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 0.0, 3432.71327, (-1945.6));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.BrentOptimizer"", e);
    }
}",0,
project,0,test056,"public void test056() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    GoalType goalType0 = GoalType.MAXIMIZE;
    brentOptimizer0.setRelativeAccuracy((-450.7649177151603));
    // Undeclared exception!
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, (-450.7649177151603), (-450.7649177151603), (-450.7649177151603));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -450.765 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.BrentOptimizer"", e);
    }
}",0,
project,0,test067,"public void test067() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 2748.63118459071;
    doubleArray0[1] = 219.88;
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, (-70.0), 0.0);
    assertEquals(55, brentOptimizer0.getIterationCount());
}",0,
project,0,test068,"public void test068() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 2748.63118459071;
    doubleArray0[1] = 219.88;
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, (-70.0), 0.0);
    assertEquals((-1.24273430586089E-10), double0, 0.01);
}",1,
project,0,test079,"public void test079() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    brentOptimizer0.setMaximalIterationCount(2547);
    doubleArray0[1] = (-3656.405725);
    doubleArray0[2] = 1.0E-14;
    doubleArray0[3] = (-1274.250662265888);
    doubleArray0[4] = (-1734.05);
    doubleArray0[5] = 731.6591591721103;
    doubleArray0[6] = Double.POSITIVE_INFINITY;
    doubleArray0[7] = (-3133.241054);
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, (-1274.250662265888), Double.POSITIVE_INFINITY, 16.88489091);
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    brentOptimizer0.setMaxEvaluations(0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, 1.0, 1.0, 0.0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // maximal number of evaluations (0) exceeded
        //
        verifyException(""org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test0911,"public void test0911() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (-1172.8104503318166);
    doubleArray0[2] = 0.5;
    PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
    PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialSplineFunction0, goalType0, (-2734.6702501591494), 1.0, 37.049381199);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Argument 37.049 outside domain [{1} ; {2}]
        //
        verifyException(""org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction"", e);
    }
}",0,
project,0,test1012,"public void test1012() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, 0.0, 3.0, 0.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1113,"public void test1113() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    GoalType goalType0 = GoalType.MINIMIZE;
    brentOptimizer0.setMaxEvaluations(0);
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, 0.0, 0.0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // maximal number of evaluations (0) exceeded
        //
        verifyException(""org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer"", e);
    }
}",0,
project,0,test1214,"public void test1214() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[2];
    brentOptimizer0.resetMaximalIterationCount();
    doubleArray0[0] = Double.NaN;
    PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, (-1219.81998077402), (-3308.29));
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // maximal number of iterations (0) exceeded
        //
        verifyException(""org.apache.commons.math.optimization.univariate.BrentOptimizer"", e);
    }
}",1,
project,0,test1315,"public void test1315() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    doubleArray0[4] = 3650.0;
    doubleArray0[6] = (-1628.9462);
    doubleArray0[7] = 1.0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 0.0, 0.0, (-2953.8713042624));
    assertEquals(63, brentOptimizer0.getEvaluations());
}",0,"assertEquals(1, brentOptimizer0.getEvaluations())"
project,0,test1316,"public void test1316() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    doubleArray0[4] = 3650.0;
    doubleArray0[6] = (-1628.9462);
    doubleArray0[7] = 1.0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 0.0, 0.0, (-2953.8713042624));
    assertEquals((-1.221680147174864), double0, 0.01);
}",0,
project,0,test1417,"public void test1417() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    doubleArray0[4] = 3650.0;
    doubleArray0[6] = (-1628.9462);
    doubleArray0[7] = 1.0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize(univariateRealFunction0, goalType0, 3650.0, 1.0, 0.0);
    assertEquals(30, brentOptimizer0.getIterationCount());
}",0,"assertEquals(1, brentOptimizer0.getIterationCount())"
project,0,test1418,"public void test1418() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    doubleArray0[4] = 3650.0;
    doubleArray0[6] = (-1628.9462);
    doubleArray0[7] = 1.0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize(univariateRealFunction0, goalType0, 3650.0, 1.0, 0.0);
    assertEquals(0.9471088290251325, double0, 0.01);
}",0,
project,0,test1519,"public void test1519() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    doubleArray0[4] = 3650.0;
    doubleArray0[7] = 1.0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
    GoalType goalType0 = GoalType.MINIMIZE;
    double double0 = brentOptimizer0.optimize(univariateRealFunction0, goalType0, 0.0, 0.0, (-2953.8713042624));
    assertEquals(47, brentOptimizer0.getIterationCount());
}",0,"assertEquals(1, brentOptimizer0.getIterationCount())"
project,0,test1520,"public void test1520() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    doubleArray0[4] = 3650.0;
    doubleArray0[7] = 1.0;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
    GoalType goalType0 = GoalType.MINIMIZE;
    double double0 = brentOptimizer0.optimize(univariateRealFunction0, goalType0, 0.0, 0.0, (-2953.8713042624));
    assertEquals((-10.140863571628909), double0, 0.01);
}",0,
project,0,test1621,"public void test1621() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    doubleArray0[6] = (-1628.9462);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 3650.0, 1.0, 0.0);
    assertEquals(34, brentOptimizer0.getIterationCount());
}",0,
project,0,test1622,"public void test1622() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    doubleArray0[6] = (-1628.9462);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 3650.0, 1.0, 0.0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1723,"public void test1723() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 0.0, 0.0);
    assertEquals(1, brentOptimizer0.getEvaluations());
}",0,"assertEquals(0, brentOptimizer0.getEvaluations())"
project,0,test1724,"public void test1724() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[8];
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 0.0, 0.0);
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test1825,"public void test1825() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, (-4078.947425775824), 2.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test1926,"public void test1926() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[3];
    brentOptimizer0.setRelativeAccuracy(0.0);
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    // Undeclared exception!
    try {
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-2277.7483914782), 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 0 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.BrentOptimizer"", e);
    }
}",1,
project,0,test2027,"public void test2027() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[7];
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 3047.0, 0.0);
    assertEquals(64, brentOptimizer0.getEvaluations());
}",0,"assertEquals(0, brentOptimizer0.getEvaluations())"
project,0,test2028,"public void test2028() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    double[] doubleArray0 = new double[7];
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    GoalType goalType0 = GoalType.MINIMIZE;
    double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 3047.0, 0.0);
    assertEquals(1.0780266764839868E-10, double0, 0.01);
}",1,
project,0,test2129,"public void test2129() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer();
    // Undeclared exception!
    try {
        brentOptimizer0.doOptimize();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.univariate.BrentOptimizer"", e);
    }
}",1,
