{
  "test00" : {
    "methodSignature" : "public LevenbergMarquardtOptimizer(ConvergenceChecker<PointVectorValuePair> checker)",
    "methodName" : "LevenbergMarquardtOptimizer",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    SimplePointChecker<PointVectorValuePair> simplePointChecker0 = new SimplePointChecker<PointVectorValuePair>((-1603.965), (-1603.965));\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(simplePointChecker0);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "protected PointVectorValuePair doOptimize()",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public LevenbergMarquardtOptimizer(double costRelativeTolerance, double parRelativeTolerance, double orthoTolerance)",
    "methodName" : "LevenbergMarquardtOptimizer",
    "className" : "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(1.0E-4, 1.0E-4, 1.0E-4);\n}",
    "testName" : "test22"
  }
}