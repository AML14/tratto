{
  "test3237" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3237() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 756.9, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = Vector3D.NaN;\n    line0.reset(vector3D2, vector3D0);\n    Vector3D vector3D3 = line0.closestPoint(line0);\n    vector3D3.getZ();\n}",
    "testName" : "test3237"
  },
  "test4449" : {
    "methodSignature" : "public Vector3D closestPoint(final Line line)",
    "methodName" : "closestPoint",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4449() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = new Vector3D(2.0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    line0.closestPoint((Line) null);\n}",
    "testName" : "test4449"
  },
  "test1214" : {
    "methodSignature" : "public double getDelta()",
    "methodName" : "getDelta",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1214() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector3D vector3D3 = line0.pointAt((-3052.86369532419));\n    vector3D3.getDelta();\n}",
    "testName" : "test1214"
  },
  "test2227" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2227() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.MINUS_J;\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.getOrigin();\n    vector3D2.getY();\n}",
    "testName" : "test2227"
  },
  "test3035" : {
    "methodSignature" : "public double distance(final Vector3D p)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3035() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, (-646.4229371), vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    double double0 = line0.distance(vector3D0);\n}",
    "testName" : "test3035"
  },
  "test5258" : {
    "methodSignature" : "public double getNorm1()",
    "methodName" : "getNorm1",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5258() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.intersection(line0);\n    vector3D2.getNorm1();\n}",
    "testName" : "test5258"
  },
  "test4247" : {
    "methodSignature" : "public double distance(final Line line)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4247() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = new Vector3D((-8.0E298), vector3D0, (-8.0E298), vector3D0, (-3639.568656), vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    line0.distance((Line) null);\n}",
    "testName" : "test4247"
  },
  "test1012" : {
    "methodSignature" : "public double getAlpha()",
    "methodName" : "getAlpha",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1012() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.8747858), (-1930.8747858), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.8747858), vector3D0, (-1930.8747858), vector3D0, (-1930.8747858), vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector3D vector3D3 = line0.pointAt(Double.NEGATIVE_INFINITY);\n    vector3D3.getAlpha();\n}",
    "testName" : "test1012"
  },
  "test2025" : {
    "methodSignature" : "public double getNorm()",
    "methodName" : "getNorm",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2025() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = line0.getOrigin();\n    vector3D2.getNorm();\n}",
    "testName" : "test2025"
  },
  "test5257" : {
    "methodSignature" : "public Vector3D intersection(final Line line)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5257() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.intersection(line0);\n}",
    "testName" : "test5257"
  },
  "test034" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    Vector3D vector3D0 = new Vector3D((-2872.495), (-2872.495));\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector1D vector1D0 = line0.toSubSpace(vector3D1);\n    vector1D0.getX();\n}",
    "testName" : "test034"
  },
  "test1619" : {
    "methodSignature" : "public Vector3D intersection(final Line line)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1619() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.PLUS_I;\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = line0.intersection(line0);\n}",
    "testName" : "test1619"
  },
  "test3439" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3439() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = line0.closestPoint(line0);\n    vector3D2.getX();\n}",
    "testName" : "test3439"
  },
  "test1416" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_J;\n    Vector3D vector3D1 = new Vector3D(1.1102230246251565E-16, vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = line0.pointAt(2814.825390032998);\n    vector3D2.getY();\n}",
    "testName" : "test1416"
  },
  "test2429" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2429() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = new Vector3D((-6039.008730520395), vector3D0, (-6039.008730520395), vector3D0, (-6039.008730520395), vector3D0, 2.220446049250313E-16, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.getDirection();\n    vector3D2.getZ();\n}",
    "testName" : "test2429"
  },
  "test068" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector1D vector1D0 = Vector1D.ZERO;\n    Vector3D vector3D2 = line0.toSpace(vector1D0);\n    vector3D2.getNormSq();\n}",
    "testName" : "test068"
  },
  "test4045" : {
    "methodSignature" : "public Vector3D intersection(final Line line)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4045() throws Throwable {\n    Vector3D vector3D0 = Vector3D.ZERO;\n    Vector3D vector3D1 = Vector3D.PLUS_I;\n    Line line0 = new Line(vector3D0, vector3D1);\n    line0.intersection((Line) null);\n}",
    "testName" : "test4045"
  },
  "test6066" : {
    "methodSignature" : "public SubLine wholeLine()",
    "methodName" : "wholeLine",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6066() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    SubLine subLine0 = line0.wholeLine();\n}",
    "testName" : "test6066"
  },
  "test5055" : {
    "methodSignature" : "public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException",
    "methodName" : "reset",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5055() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = Vector3D.MINUS_K;\n    Line line0 = new Line(vector3D0, vector3D1);\n    line0.reset(vector3D1, vector3D1);\n}",
    "testName" : "test5055"
  },
  "test1620" : {
    "methodSignature" : "public double getDelta()",
    "methodName" : "getDelta",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1620() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.PLUS_I;\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = line0.intersection(line0);\n    vector3D2.getDelta();\n}",
    "testName" : "test1620"
  },
  "test2631" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.negate();\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.getDirection();\n    vector3D2.getY();\n}",
    "testName" : "test2631"
  },
  "test4853" : {
    "methodSignature" : "public boolean contains(final Vector3D p)",
    "methodName" : "contains",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4853() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = Vector3D.PLUS_J;\n    line0.reset(vector3D2, vector3D0);\n    boolean boolean0 = line0.contains(vector3D1);\n}",
    "testName" : "test4853"
  },
  "test3843" : {
    "methodSignature" : "public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException",
    "methodName" : "reset",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3843() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    line0.reset((Vector3D) null, (Vector3D) null);\n}",
    "testName" : "test3843"
  },
  "test5864" : {
    "methodSignature" : "public double getNormInf()",
    "methodName" : "getNormInf",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5864() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    Vector1D vector1D0 = line0.toSubSpace(vector3D0);\n    vector1D0.getNormInf();\n}",
    "testName" : "test5864"
  },
  "test4651" : {
    "methodSignature" : "public Line(final Line line)",
    "methodName" : "Line",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4651() throws Throwable {\n    Line line0 = null;\n    line0 = new Line((Line) null);\n}",
    "testName" : "test4651"
  },
  "test3641" : {
    "methodSignature" : "public Vector1D toSubSpace(final Vector<Euclidean3D> point)",
    "methodName" : "toSubSpace",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3641() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    line0.toSubSpace((Vector<Euclidean3D>) null);\n}",
    "testName" : "test3641"
  },
  "test023" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.8747858), vector3D0, (-1930.8747858), vector3D0, (-1930.8747858), vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector1D vector1D0 = line0.toSubSpace(vector3D1);\n    vector1D0.getX();\n}",
    "testName" : "test023"
  },
  "test0810" : {
    "methodSignature" : "public double getNormInf()",
    "methodName" : "getNormInf",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0810() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.8747858), vector3D0, (-1930.8747858), vector3D0, (-1930.8747858), vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector1D vector1D0 = new Vector1D((-1930.8747858));\n    Vector3D vector3D2 = line0.toSpace(vector1D0);\n    vector3D2.getNormInf();\n}",
    "testName" : "test0810"
  },
  "test2833" : {
    "methodSignature" : "public double getAbscissa(final Vector3D point)",
    "methodName" : "getAbscissa",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2833() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = new Vector3D(779.2612664617, vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    double double0 = line0.getAbscissa(vector3D0);\n}",
    "testName" : "test2833"
  },
  "test1823" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1823() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.8747858), (-1930.8747858), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.8747858), vector3D0, (-1930.8747858), vector3D0, (-1930.8747858), vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector3D vector3D3 = line0.getOrigin();\n    vector3D3.getY();\n}",
    "testName" : "test1823"
  },
  "test6270" : {
    "methodSignature" : "public Vector3D intersection(final Line line)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6270() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    Vector3D vector3D1 = line0.intersection(line0);\n}",
    "testName" : "test6270"
  },
  "test057" : {
    "methodSignature" : "public double getAlpha()",
    "methodName" : "getAlpha",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector1D vector1D0 = line0.toSubSpace(vector3D0);\n    Vector3D vector3D2 = line0.toSpace(vector1D0);\n    vector3D2.getAlpha();\n}",
    "testName" : "test057"
  },
  "test5662" : {
    "methodSignature" : "public boolean isSimilarTo(final Line line)",
    "methodName" : "isSimilarTo",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5662() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    boolean boolean0 = line0.isSimilarTo(line0);\n}",
    "testName" : "test5662"
  },
  "test6472" : {
    "methodSignature" : "public Line revert()",
    "methodName" : "revert",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6472() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    Line line1 = line0.revert();\n}",
    "testName" : "test6472"
  },
  "test5460" : {
    "methodSignature" : "public boolean isSimilarTo(final Line line)",
    "methodName" : "isSimilarTo",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5460() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    boolean boolean0 = line0.isSimilarTo(line0);\n}",
    "testName" : "test5460"
  },
  "test1113" : {
    "methodSignature" : "public double getAlpha()",
    "methodName" : "getAlpha",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1113() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector3D vector3D3 = line0.pointAt(2631.61399663977);\n    vector3D3.getAlpha();\n}",
    "testName" : "test1113"
  },
  "test2126" : {
    "methodSignature" : "public double getNorm1()",
    "methodName" : "getNorm1",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2126() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 756.9, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.getOrigin();\n    vector3D2.getNorm1();\n}",
    "testName" : "test2126"
  },
  "test3338" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3338() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = Vector3D.MINUS_K;\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = Vector3D.PLUS_J;\n    Line line1 = new Line(vector3D2, vector3D0);\n    Vector3D vector3D3 = line1.closestPoint(line0);\n    vector3D3.getY();\n}",
    "testName" : "test3338"
  },
  "test5359" : {
    "methodSignature" : "public double distance(final Line line)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5359() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Line line1 = new Line(line0);\n    line0.reset(vector3D1, vector3D0);\n    double double0 = line1.distance(line0);\n}",
    "testName" : "test5359"
  },
  "test4348" : {
    "methodSignature" : "public boolean contains(final Vector3D p)",
    "methodName" : "contains",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4348() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    line0.contains((Vector3D) null);\n}",
    "testName" : "test4348"
  },
  "test3136" : {
    "methodSignature" : "public double distance(final Vector3D p)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3136() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.MINUS_I;\n    Line line0 = new Line(vector3D0, vector3D1);\n    double double0 = line0.distance(vector3D0);\n}",
    "testName" : "test3136"
  },
  "test6169" : {
    "methodSignature" : "public double getDelta()",
    "methodName" : "getDelta",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6169() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Line line1 = new Line(line0);\n    Vector3D vector3D2 = line1.intersection(line0);\n    vector3D2.getDelta();\n}",
    "testName" : "test6169"
  },
  "test4146" : {
    "methodSignature" : "public double distance(final Vector3D p)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4146() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NaN;\n    Line line0 = new Line(vector3D0, vector3D0);\n    line0.distance((Vector3D) null);\n}",
    "testName" : "test4146"
  },
  "test011" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.8747858), (-1930.8747858), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.8747858), vector3D0, (-1930.8747858), vector3D0, (-1930.8747858), vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;\n    Vector3D vector3D3 = line0.toSpace(vector1D0);\n    line0.toSubSpace(vector3D3);\n    vector3D3.getY();\n}",
    "testName" : "test011"
  },
  "test1517" : {
    "methodSignature" : "public Vector3D intersection(final Line line)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.intersection(line0);\n}",
    "testName" : "test1517"
  },
  "test012" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.8747858), (-1930.8747858), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.8747858), vector3D0, (-1930.8747858), vector3D0, (-1930.8747858), vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;\n    Vector3D vector3D3 = line0.toSpace(vector1D0);\n    line0.toSubSpace(vector3D3);\n    vector3D3.getZ();\n}",
    "testName" : "test012"
  },
  "test056" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector1D vector1D0 = line0.toSubSpace(vector3D0);\n    Vector3D vector3D2 = line0.toSpace(vector1D0);\n    vector1D0.getX();\n}",
    "testName" : "test056"
  },
  "test1518" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1518() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.intersection(line0);\n    vector3D2.getNormSq();\n}",
    "testName" : "test1518"
  },
  "test1315" : {
    "methodSignature" : "public double getNorm()",
    "methodName" : "getNorm",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1315() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = Vector3D.PLUS_J;\n    Line line0 = new Line(vector3D1, vector3D0);\n    Vector3D vector3D2 = line0.pointAt(0.0);\n    vector3D2.getNorm();\n}",
    "testName" : "test1315"
  },
  "test2328" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2328() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = Vector3D.MINUS_I;\n    Vector3D vector3D2 = new Vector3D((-6039.008730520395), vector3D0, (-6039.008730520395), vector3D1, (-6039.008730520395), vector3D0, 2.220446049250313E-16, vector3D0);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector3D vector3D3 = line0.getDirection();\n    vector3D3.getX();\n}",
    "testName" : "test2328"
  },
  "test6167" : {
    "methodSignature" : "public Vector3D intersection(final Line line)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6167() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Line line1 = new Line(line0);\n    Vector3D vector3D2 = line1.intersection(line0);\n}",
    "testName" : "test6167"
  },
  "test5156" : {
    "methodSignature" : "public double getAbscissa(final Vector3D point)",
    "methodName" : "getAbscissa",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5156() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    line0.getAbscissa((Vector3D) null);\n}",
    "testName" : "test5156"
  },
  "test6168" : {
    "methodSignature" : "public double getAlpha()",
    "methodName" : "getAlpha",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6168() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Line line1 = new Line(line0);\n    Vector3D vector3D2 = line1.intersection(line0);\n    vector3D2.getAlpha();\n}",
    "testName" : "test6168"
  },
  "test4954" : {
    "methodSignature" : "public boolean contains(final Vector3D p)",
    "methodName" : "contains",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4954() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = vector3D0.negate();\n    Line line0 = new Line(vector3D1, vector3D0);\n    boolean boolean0 = line0.contains(vector3D0);\n}",
    "testName" : "test4954"
  },
  "test3742" : {
    "methodSignature" : "public Vector3D toSpace(final Vector<Euclidean1D> point)",
    "methodName" : "toSpace",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3742() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    line0.toSpace((Vector<Euclidean1D>) null);\n}",
    "testName" : "test3742"
  },
  "test1721" : {
    "methodSignature" : "public double getNorm()",
    "methodName" : "getNorm",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector3D vector3D3 = line0.intersection(line0);\n    vector3D3.getNorm();\n}",
    "testName" : "test1721"
  },
  "test2732" : {
    "methodSignature" : "public double getAbscissa(final Vector3D point)",
    "methodName" : "getAbscissa",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2732() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    double double0 = line0.getAbscissa(vector3D1);\n}",
    "testName" : "test2732"
  },
  "test5965" : {
    "methodSignature" : "public double getNormSq()",
    "methodName" : "getNormSq",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5965() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    Vector3D vector3D1 = line0.getDirection();\n    vector3D1.getNormSq();\n}",
    "testName" : "test5965"
  },
  "test4752" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4752() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = Vector3D.MINUS_K;\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = line0.closestPoint(line0);\n    vector3D2.getY();\n}",
    "testName" : "test4752"
  },
  "test3540" : {
    "methodSignature" : "public double getY()",
    "methodName" : "getY",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3540() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector3D vector3D3 = line0.closestPoint(line0);\n    vector3D3.getY();\n}",
    "testName" : "test3540"
  },
  "test2530" : {
    "methodSignature" : "public double getX()",
    "methodName" : "getX",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2530() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_I;\n    Vector3D vector3D1 = new Vector3D((-8.0E298), vector3D0, (-8.0E298), vector3D0, (-3639.568656), vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = line0.getDirection();\n    vector3D2.getX();\n}",
    "testName" : "test2530"
  },
  "test5763" : {
    "methodSignature" : "public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException",
    "methodName" : "Line",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5763() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Line line0 = null;\n    line0 = new Line(vector3D0, vector3D0);\n}",
    "testName" : "test5763"
  },
  "test000" : {
    "methodSignature" : "public double distance(final Line line)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = Vector3D.PLUS_J;\n    Line line0 = new Line(vector3D0, vector3D1);\n    Line line1 = new Line(line0);\n    double double0 = line1.distance(line0);\n}",
    "testName" : "test000"
  },
  "test1924" : {
    "methodSignature" : "public double getDelta()",
    "methodName" : "getDelta",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1924() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_I;\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector3D vector3D2 = line0.getOrigin();\n    vector3D2.getDelta();\n}",
    "testName" : "test1924"
  },
  "test045" : {
    "methodSignature" : "public double getNormInf()",
    "methodName" : "getNormInf",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;\n    Vector1D vector1D1 = new Vector1D((-3052.86369532419), vector1D0, 3820.9, vector1D0);\n    Vector3D vector3D2 = line0.toSpace(vector1D1);\n    vector3D2.getNormInf();\n}",
    "testName" : "test045"
  },
  "test1722" : {
    "methodSignature" : "public Vector3D intersection(final Line line)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1722() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Vector3D vector3D3 = line0.intersection(line0);\n}",
    "testName" : "test1722"
  },
  "test3944" : {
    "methodSignature" : "public boolean isSimilarTo(final Line line)",
    "methodName" : "isSimilarTo",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3944() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0);\n    Line line0 = new Line(vector3D1, vector3D0);\n    line0.isSimilarTo((Line) null);\n}",
    "testName" : "test3944"
  },
  "test0911" : {
    "methodSignature" : "public double getAlpha()",
    "methodName" : "getAlpha",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911() throws Throwable {\n    Vector3D vector3D0 = Vector3D.NaN;\n    Line line0 = new Line(vector3D0, vector3D0);\n    Vector3D vector3D1 = line0.pointAt(Double.NaN);\n    vector3D1.getAlpha();\n}",
    "testName" : "test0911"
  },
  "test2934" : {
    "methodSignature" : "public double getAbscissa(final Vector3D point)",
    "methodName" : "getAbscissa",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2934() throws Throwable {\n    Vector3D vector3D0 = Vector3D.PLUS_K;\n    Vector3D vector3D1 = vector3D0.scalarMultiply(0.625);\n    Vector3D vector3D2 = new Vector3D((-198.2), vector3D0);\n    Line line0 = new Line(vector3D2, vector3D0);\n    line0.reset(vector3D0, vector3D1);\n    double double0 = line0.getAbscissa(vector3D0);\n}",
    "testName" : "test2934"
  },
  "test079" : {
    "methodSignature" : "public double getZ()",
    "methodName" : "getZ",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_K;\n    Vector3D vector3D1 = new Vector3D(2.0, vector3D0);\n    Line line0 = new Line(vector3D0, vector3D1);\n    Vector1D vector1D0 = Vector1D.ONE;\n    Vector3D vector3D2 = line0.toSpace(vector1D0);\n    vector3D2.getZ();\n}",
    "testName" : "test079"
  },
  "test4550" : {
    "methodSignature" : "public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException",
    "methodName" : "Line",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4550() throws Throwable {\n    Line line0 = null;\n    line0 = new Line((Vector3D) null, (Vector3D) null);\n}",
    "testName" : "test4550"
  },
  "test5561" : {
    "methodSignature" : "public boolean isSimilarTo(final Line line)",
    "methodName" : "isSimilarTo",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5561() throws Throwable {\n    Vector3D vector3D0 = Vector3D.MINUS_J;\n    Vector3D vector3D1 = new Vector3D((-1930.874785751), (-1900.6668464), 1.633123935319537E16);\n    Vector3D vector3D2 = new Vector3D((-1930.874785751), vector3D0, (-1930.874785751), vector3D0, 0.7071067811865475, vector3D1);\n    Line line0 = new Line(vector3D2, vector3D1);\n    Line line1 = new Line(line0);\n    line0.reset(vector3D1, vector3D0);\n    boolean boolean0 = line0.isSimilarTo(line1);\n}",
    "testName" : "test5561"
  },
  "test6371" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math3.geometry.euclidean.threed.Line",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6371() throws Throwable {\n    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;\n    Line line0 = new Line(vector3D0, vector3D0);\n    Vector3D vector3D1 = line0.getOrigin();\n    vector3D1.isNaN();\n}",
    "testName" : "test6371"
  }
}