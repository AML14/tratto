{
  "test08892" : {
    "methodSignature" : "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08892() throws Throwable {\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);\n}",
    "testName" : "test08892"
  },
  "test163170" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test163170() throws Throwable {\n    Integer[] integerArray0 = new Integer[6];\n    Integer integer0 = new Integer(1319);\n    integerArray0[0] = integer0;\n    Integer integer1 = new Integer(206);\n    integerArray0[1] = integer1;\n    integerArray0[2] = integerArray0[0];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);\n}",
    "testName" : "test163170"
  },
  "test07680" : {
    "methodSignature" : "public static double distance(int[] p1, int[] p2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07680() throws Throwable {\n    MathArrays.distance((int[]) null, (int[]) null);\n}",
    "testName" : "test07680"
  },
  "test0000" : {
    "methodSignature" : "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException",
    "methodName" : "convolve",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[0] = (-2480.05522);\n    double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);\n}",
    "testName" : "test0000"
  },
  "test0088" : {
    "methodSignature" : "public static double safeNorm(double[] v)",
    "methodName" : "safeNorm",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0088() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    doubleArray0[3] = 3.26E18;\n    double double0 = MathArrays.safeNorm(doubleArray0);\n}",
    "testName" : "test0088"
  },
  "test118124" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118124() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);\n}",
    "testName" : "test118124"
  },
  "test135142" : {
    "methodSignature" : "public static boolean equals(float[] x, float[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135142() throws Throwable {\n    boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);\n}",
    "testName" : "test135142"
  },
  "test04850" : {
    "methodSignature" : "public static int[] copyOf(int[] source, int len)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04850() throws Throwable {\n    int[] intArray0 = new int[6];\n    int[] intArray1 = MathArrays.copyOf(intArray0, 119);\n}",
    "testName" : "test04850"
  },
  "test141148" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141148() throws Throwable {\n    double double0 = MathArrays.linearCombination(0.0, (double) 0, 333.279, (double) 0);\n}",
    "testName" : "test141148"
  },
  "test05660" : {
    "methodSignature" : "public static double[] scale(double val, final double[] arr)",
    "methodName" : "scale",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05660() throws Throwable {\n    MathArrays.scale(0.0, (double[]) null);\n}",
    "testName" : "test05660"
  },
  "test06872" : {
    "methodSignature" : "public static int distanceInf(int[] p1, int[] p2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06872() throws Throwable {\n    MathArrays.distanceInf((int[]) null, (int[]) null);\n}",
    "testName" : "test06872"
  },
  "test03636" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03636() throws Throwable {\n    double double0 = MathArrays.linearCombination(0.0, 0.0, 1.0E-5, 1.304E19);\n}",
    "testName" : "test03636"
  },
  "test097101" : {
    "methodSignature" : "public static <T> T[] buildArray(final Field<T> field, final int length)",
    "methodName" : "buildArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097101() throws Throwable {\n    Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());\n    doReturn((Class) null).when(field0).getRuntimeClass();\n    MathArrays.buildArray(field0, 2608);\n}",
    "testName" : "test097101"
  },
  "test02424" : {
    "methodSignature" : "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02424() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    double[] doubleArray1 = new double[6];\n    MathArrays.ebeMultiply(doubleArray0, doubleArray1);\n}",
    "testName" : "test02424"
  },
  "test174182" : {
    "methodSignature" : "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test174182() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    double[] doubleArray1 = new double[2];\n    MathArrays.ebeMultiply(doubleArray0, doubleArray1);\n}",
    "testName" : "test174182"
  },
  "test01212" : {
    "methodSignature" : "public static void checkPositive(final double[] in) throws NotStrictlyPositiveException",
    "methodName" : "checkPositive",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[0] = Double.NaN;\n    doubleArray0[1] = (-3239.4);\n    MathArrays.checkPositive(doubleArray0);\n}",
    "testName" : "test01212"
  },
  "test129136" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129136() throws Throwable {\n    float[] floatArray0 = new float[0];\n    boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);\n}",
    "testName" : "test129136"
  },
  "test02828" : {
    "methodSignature" : "public static void scaleInPlace(double val, final double[] arr)",
    "methodName" : "scaleInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02828() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[0] = (-550.682);\n    MathArrays.scaleInPlace((-2110.891841), doubleArray0);\n}",
    "testName" : "test02828"
  },
  "test130137" : {
    "methodSignature" : "public static boolean equals(float[] x, float[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130137() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (float) 147;\n    float[] floatArray1 = new float[7];\n    boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);\n}",
    "testName" : "test130137"
  },
  "test146153" : {
    "methodSignature" : "public static void sortInPlace(double[] x, double[]... yList) throws DimensionMismatchException, NullArgumentException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test146153() throws Throwable {\n    MathArrays.sortInPlace((double[]) null, (double[][]) null);\n}",
    "testName" : "test146153"
  },
  "test01616" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01616() throws Throwable {\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"\";\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test01616"
  },
  "test113117" : {
    "methodSignature" : "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException",
    "methodName" : "normalizeArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113117() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    MathArrays.normalizeArray(doubleArray0, Double.NaN);\n}",
    "testName" : "test113117"
  },
  "test04040" : {
    "methodSignature" : "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04040() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);\n}",
    "testName" : "test04040"
  },
  "test09296" : {
    "methodSignature" : "public static void checkOrder(double[] val) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09296() throws Throwable {\n    MathArrays.checkOrder((double[]) null);\n}",
    "testName" : "test09296"
  },
  "test06064" : {
    "methodSignature" : "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06064() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    MathArrays.linearCombination(doubleArray0, doubleArray0);\n}",
    "testName" : "test06064"
  },
  "test08084" : {
    "methodSignature" : "public static int[] copyOf(int[] source, int len)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08084() throws Throwable {\n    MathArrays.copyOf((int[]) null, 0);\n}",
    "testName" : "test08084"
  },
  "test115120" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115120() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1325);\n    boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);\n}",
    "testName" : "test115120"
  },
  "test0011" : {
    "methodSignature" : "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException",
    "methodName" : "normalizeArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = (-821.0);\n    double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-821.0));\n}",
    "testName" : "test0011"
  },
  "test0099" : {
    "methodSignature" : "public static double safeNorm(double[] v)",
    "methodName" : "safeNorm",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[3] = 3.834E-20;\n    double double0 = MathArrays.safeNorm(doubleArray0);\n}",
    "testName" : "test0099"
  },
  "test03232" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03232() throws Throwable {\n    double double0 = MathArrays.linearCombination((-1819.8342), 0.0, (-1819.8342), (-1819.8342), (-1819.8342), (-1819.8342), 0.0, 3.32);\n}",
    "testName" : "test03232"
  },
  "test02020" : {
    "methodSignature" : "public static int distance1(int[] p1, int[] p2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02020() throws Throwable {\n    int[] intArray0 = new int[6];\n    intArray0[2] = 142;\n    int int0 = MathArrays.distance1(intArray0, intArray0);\n}",
    "testName" : "test02020"
  },
  "test138145" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138145() throws Throwable {\n    double double0 = MathArrays.linearCombination(Double.NaN, 0.0, 389.70562938315, 3.834E-20, 389.70562938315, Double.NaN);\n}",
    "testName" : "test138145"
  },
  "test04445" : {
    "methodSignature" : "public static int distance1(int[] p1, int[] p2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04445() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 783;\n    int[] intArray1 = new int[9];\n    int int0 = MathArrays.distance1(intArray0, intArray1);\n}",
    "testName" : "test04445"
  },
  "test06468" : {
    "methodSignature" : "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeSubtract",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06468() throws Throwable {\n    MathArrays.ebeSubtract((double[]) null, (double[]) null);\n}",
    "testName" : "test06468"
  },
  "test08488" : {
    "methodSignature" : "public static double[] copyOf(double[] source)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08488() throws Throwable {\n    MathArrays.copyOf((double[]) null);\n}",
    "testName" : "test08488"
  },
  "test102106" : {
    "methodSignature" : "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102106() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    doubleArray0[1] = 599.7;\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);\n}",
    "testName" : "test102106"
  },
  "test07276" : {
    "methodSignature" : "public static int distance1(int[] p1, int[] p2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07276() throws Throwable {\n    MathArrays.distance1((int[]) null, (int[]) null);\n}",
    "testName" : "test07276"
  },
  "test157164" : {
    "methodSignature" : "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test157164() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    doubleArray0[1] = (double) (-628);\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);\n}",
    "testName" : "test157164"
  },
  "test05255" : {
    "methodSignature" : "public static double[] copyOf(double[] source)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05255() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    double[] doubleArray1 = MathArrays.copyOf(doubleArray0);\n}",
    "testName" : "test05255"
  },
  "test121128" : {
    "methodSignature" : "public static boolean equals(double[] x, double[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121128() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);\n}",
    "testName" : "test121128"
  },
  "test110114" : {
    "methodSignature" : "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)",
    "methodName" : "buildArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110114() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    Class<FieldElement> class0 = FieldElement.class;\n    Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(field0).getRuntimeClass();\n    doReturn(doubleArray0[0]).when(field0).getZero();\n    MathArrays.buildArray(field0, 241, 241);\n}",
    "testName" : "test110114"
  },
  "test126133" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126133() throws Throwable {\n    float[] floatArray0 = new float[4];\n    float[] floatArray1 = new float[8];\n    boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);\n}",
    "testName" : "test126133"
  },
  "test107111" : {
    "methodSignature" : "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException",
    "methodName" : "convolve",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107111() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    double[] doubleArray1 = new double[0];\n    MathArrays.convolve(doubleArray0, doubleArray1);\n}",
    "testName" : "test107111"
  },
  "test152159" : {
    "methodSignature" : "public static void checkNonNegative(final long[] in) throws NotPositiveException",
    "methodName" : "checkNonNegative",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test152159() throws Throwable {\n    long[] longArray0 = new long[4];\n    longArray0[2] = (-1442L);\n    MathArrays.checkNonNegative(longArray0);\n}",
    "testName" : "test152159"
  },
  "test183193" : {
    "methodSignature" : "public static void checkOrder(double[] val) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test183193() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    MathArrays.checkOrder(doubleArray0);\n}",
    "testName" : "test183193"
  },
  "test149156" : {
    "methodSignature" : "public static double safeNorm(double[] v)",
    "methodName" : "safeNorm",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test149156() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = Double.NaN;\n    double double0 = MathArrays.safeNorm(doubleArray0);\n}",
    "testName" : "test149156"
  },
  "test168175" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test168175() throws Throwable {\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"2~G8wy:3bctW0\";\n    stringArray0[2] = \",,0\\\"\";\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test168175"
  },
  "test07781" : {
    "methodSignature" : "public static double distance(int[] p1, int[] p2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07781() throws Throwable {\n    int[] intArray0 = new int[6];\n    int[] intArray1 = new int[1];\n    MathArrays.distance(intArray0, intArray1);\n}",
    "testName" : "test07781"
  },
  "test171178" : {
    "methodSignature" : "public static double distance(int[] p1, int[] p2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test171178() throws Throwable {\n    int[] intArray0 = new int[2];\n    double double0 = MathArrays.distance(intArray0, intArray0);\n}",
    "testName" : "test171178"
  },
  "test0022" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    double[] doubleArray1 = new double[0];\n    boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);\n}",
    "testName" : "test0022"
  },
  "test116122" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116122() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);\n}",
    "testName" : "test116122"
  },
  "test06973" : {
    "methodSignature" : "public static int distanceInf(int[] p1, int[] p2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06973() throws Throwable {\n    int[] intArray0 = new int[8];\n    int[] intArray1 = new int[0];\n    MathArrays.distanceInf(intArray0, intArray1);\n}",
    "testName" : "test06973"
  },
  "test137144" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137144() throws Throwable {\n    double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.32);\n}",
    "testName" : "test137144"
  },
  "test04951" : {
    "methodSignature" : "public static int[] copyOf(int[] source, int len)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04951() throws Throwable {\n    int[] intArray0 = new int[7];\n    int[] intArray1 = MathArrays.copyOf(intArray0, 0);\n}",
    "testName" : "test04951"
  },
  "test105109" : {
    "methodSignature" : "public static <T> T[] buildArray(final Field<T> field, final int length)",
    "methodName" : "buildArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105109() throws Throwable {\n    Class<FieldElement> class0 = FieldElement.class;\n    Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(field0).getRuntimeClass();\n    doReturn((Object) null).when(field0).getZero();\n    Object[] objectArray0 = MathArrays.buildArray(field0, 2608);\n}",
    "testName" : "test105109"
  },
  "test05761" : {
    "methodSignature" : "public static double safeNorm(double[] v)",
    "methodName" : "safeNorm",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05761() throws Throwable {\n    MathArrays.safeNorm((double[]) null);\n}",
    "testName" : "test05761"
  },
  "test08993" : {
    "methodSignature" : "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08993() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);\n}",
    "testName" : "test08993"
  },
  "test122129" : {
    "methodSignature" : "public static boolean equals(double[] x, double[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122129() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);\n}",
    "testName" : "test122129"
  },
  "test154161" : {
    "methodSignature" : "public static void checkPositive(final double[] in) throws NotStrictlyPositiveException",
    "methodName" : "checkPositive",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test154161() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    MathArrays.checkPositive(doubleArray0);\n}",
    "testName" : "test154161"
  },
  "test01313" : {
    "methodSignature" : "public static void checkRectangular(final long[][] in) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "checkRectangular",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    long[][] longArray0 = new long[3][5];\n    long[] longArray1 = new long[2];\n    longArray0[0] = longArray1;\n    MathArrays.checkRectangular(longArray0);\n}",
    "testName" : "test01313"
  },
  "test099103" : {
    "methodSignature" : "public static <T> T[] buildArray(final Field<T> field, final int length)",
    "methodName" : "buildArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099103() throws Throwable {\n    Class<FieldElement> class0 = FieldElement.class;\n    Double double0 = new Double(3.834E-20);\n    FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());\n    Pair<Double, FieldElement<Integer>> pair0 = new Pair<Double, FieldElement<Integer>>(double0, fieldElement0);\n    Field<Pair<Double, FieldElement<Integer>>> field0 = (Field<Pair<Double, FieldElement<Integer>>>) mock(Field.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(field0).getRuntimeClass();\n    doReturn(pair0).when(field0).getZero();\n    MathArrays.buildArray(field0, 3786);\n}",
    "testName" : "test099103"
  },
  "test176184" : {
    "methodSignature" : "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeAdd",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test176184() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    double[] doubleArray1 = new double[6];\n    MathArrays.ebeAdd(doubleArray0, doubleArray1);\n}",
    "testName" : "test176184"
  },
  "test03737" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03737() throws Throwable {\n    double double0 = MathArrays.linearCombination(546.13186165, (-740.699253979), 1242.7670124, 0.0);\n}",
    "testName" : "test03737"
  },
  "test04546" : {
    "methodSignature" : "public static double distance1(double[] p1, double[] p2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04546() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = (-1.0);\n    double[] doubleArray1 = new double[5];\n    double double0 = MathArrays.distance1(doubleArray0, doubleArray1);\n}",
    "testName" : "test04546"
  },
  "test06569" : {
    "methodSignature" : "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeMultiply",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06569() throws Throwable {\n    MathArrays.ebeMultiply((double[]) null, (double[]) null);\n}",
    "testName" : "test06569"
  },
  "test127134" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127134() throws Throwable {\n    boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);\n}",
    "testName" : "test127134"
  },
  "test02525" : {
    "methodSignature" : "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeSubtract",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02525() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    double[] doubleArray1 = new double[8];\n    MathArrays.ebeSubtract(doubleArray0, doubleArray1);\n}",
    "testName" : "test02525"
  },
  "test160167" : {
    "methodSignature" : "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test160167() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    doubleArray0[0] = 1.304E19;\n    doubleArray0[2] = 1.304E19;\n    doubleArray0[3] = 1.304E19;\n    doubleArray0[4] = 1.304E19;\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    double[][] doubleArray1 = new double[4][8];\n    doubleArray1[0] = doubleArray0;\n    doubleArray1[1] = doubleArray0;\n    doubleArray1[2] = doubleArray0;\n    doubleArray1[3] = doubleArray0;\n    MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);\n    MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);\n}",
    "testName" : "test160167"
  },
  "test01717" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01717() throws Throwable {\n    Double[] doubleArray0 = new Double[2];\n    Double double0 = new Double((-58.37));\n    doubleArray0[0] = double0;\n    doubleArray0[1] = doubleArray0[0];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test01717"
  },
  "test148155" : {
    "methodSignature" : "public static double safeNorm(double[] v)",
    "methodName" : "safeNorm",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test148155() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    doubleArray0[0] = 1.304E19;\n    doubleArray0[2] = 1.304E19;\n    double double0 = MathArrays.safeNorm(doubleArray0);\n}",
    "testName" : "test148155"
  },
  "test132139" : {
    "methodSignature" : "public static boolean equals(float[] x, float[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132139() throws Throwable {\n    float[] floatArray0 = new float[0];\n    boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);\n}",
    "testName" : "test132139"
  },
  "test111115" : {
    "methodSignature" : "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException",
    "methodName" : "normalizeArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111115() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = Double.NaN;\n    doubleArray0[1] = 468546.3197148148;\n    double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);\n}",
    "testName" : "test111115"
  },
  "test165172" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test165172() throws Throwable {\n    String[] stringArray0 = new String[9];\n    stringArray0[0] = \"number of elements should be positive ({0})\";\n    stringArray0[1] = \"7p#q|m7c]#<BcH+^y\";\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test165172"
  },
  "test02929" : {
    "methodSignature" : "public static double[] scale(double val, final double[] arr)",
    "methodName" : "scale",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02929() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);\n}",
    "testName" : "test02929"
  },
  "test09397" : {
    "methodSignature" : "public static void checkOrder(double[] val) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09397() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    MathArrays.checkOrder(doubleArray0);\n}",
    "testName" : "test09397"
  },
  "test08185" : {
    "methodSignature" : "public static int[] copyOf(int[] source)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08185() throws Throwable {\n    MathArrays.copyOf((int[]) null);\n}",
    "testName" : "test08185"
  },
  "test0033" : {
    "methodSignature" : "public static boolean equals(double[] x, double[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    double[] doubleArray1 = new double[7];\n    boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);\n}",
    "testName" : "test0033"
  },
  "test03333" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03333() throws Throwable {\n    double double0 = MathArrays.linearCombination(1234.5736213204275, 100.0, (-1.0), (-2006.80231954626), 0.0, 2670.4115015352363, (-1052.0847), 1234.5736213204275);\n}",
    "testName" : "test03333"
  },
  "test08589" : {
    "methodSignature" : "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException",
    "methodName" : "convolve",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08589() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1325);\n    // Undeclared exception!\n    MathArrays.convolve(doubleArray1, doubleArray1);\n}",
    "testName" : "test08589"
  },
  "test159166" : {
    "methodSignature" : "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test159166() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    doubleArray0[0] = (double) 179;\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);\n}",
    "testName" : "test159166"
  },
  "test05357" : {
    "methodSignature" : "public static void sortInPlace(double[] x, double[]... yList) throws DimensionMismatchException, NullArgumentException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05357() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    double[] doubleArray1 = MathArrays.scale((-107.611519), doubleArray0);\n    MathArrays.sortInPlace(doubleArray1, (double[][]) null);\n}",
    "testName" : "test05357"
  },
  "test04141" : {
    "methodSignature" : "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeAdd",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04141() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);\n}",
    "testName" : "test04141"
  },
  "test06165" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06165() throws Throwable {\n    Double[] doubleArray0 = new Double[0];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test06165"
  },
  "test02121" : {
    "methodSignature" : "public static double distance1(double[] p1, double[] p2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02121() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[1] = (-2.6919816358913188E22);\n    double double0 = MathArrays.distance1(doubleArray0, doubleArray0);\n}",
    "testName" : "test02121"
  },
  "test07377" : {
    "methodSignature" : "public static int distance1(int[] p1, int[] p2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07377() throws Throwable {\n    int[] intArray0 = new int[7];\n    int[] intArray1 = new int[5];\n    MathArrays.distance1(intArray0, intArray1);\n}",
    "testName" : "test07377"
  },
  "test100104" : {
    "methodSignature" : "public static void sortInPlace(double[] x, final OrderDirection dir, double[]... yList) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100104() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    double[][] doubleArray1 = new double[4][4];\n    MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);\n}",
    "testName" : "test100104"
  },
  "test096100" : {
    "methodSignature" : "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)",
    "methodName" : "buildArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096100() throws Throwable {\n    Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());\n    doReturn((Class) null).when(field0).getRuntimeClass();\n    MathArrays.buildArray(field0, 0, 0);\n}",
    "testName" : "test096100"
  },
  "test173180" : {
    "methodSignature" : "public static boolean equals(double[] x, double[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test173180() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);\n    double[] doubleArray2 = new double[9];\n    boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);\n}",
    "testName" : "test173180"
  },
  "test124131" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124131() throws Throwable {\n    float[] floatArray0 = new float[8];\n    floatArray0[1] = 1762.97F;\n    float[] floatArray1 = new float[8];\n    boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);\n}",
    "testName" : "test124131"
  },
  "test181190" : {
    "methodSignature" : "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)",
    "methodName" : "buildArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test181190() throws Throwable {\n    Class<FieldElement> class0 = FieldElement.class;\n    Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(field0).getRuntimeClass();\n    doReturn((Object) null).when(field0).getZero();\n    MathArrays.buildArray(field0, (-1570), (-13));\n}",
    "testName" : "test181190"
  },
  "test143150" : {
    "methodSignature" : "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143150() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);\n}",
    "testName" : "test143150"
  },
  "test06670" : {
    "methodSignature" : "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeDivide",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06670() throws Throwable {\n    MathArrays.ebeDivide((double[]) null, (double[]) null);\n}",
    "testName" : "test06670"
  },
  "test08690" : {
    "methodSignature" : "public static void checkRectangular(final long[][] in) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "checkRectangular",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08690() throws Throwable {\n    MathArrays.checkRectangular((long[][]) null);\n}",
    "testName" : "test08690"
  },
  "test0044" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    float[] floatArray0 = new float[2];\n    float[] floatArray1 = new float[1];\n    boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);\n}",
    "testName" : "test0044"
  },
  "test05862" : {
    "methodSignature" : "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException",
    "methodName" : "normalizeArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05862() throws Throwable {\n    MathArrays.normalizeArray((double[]) null, 392.948);\n}",
    "testName" : "test05862"
  },
  "test139146" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139146() throws Throwable {\n    double double0 = MathArrays.linearCombination(0.0, 1.304E19, 0.0, (-2064.40309500868), (-2064.40309500868), 1.304E19);\n}",
    "testName" : "test139146"
  },
  "test103107" : {
    "methodSignature" : "public static void checkOrder(double[] val, OrderDirection dir, boolean strict) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103107() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test103107"
  },
  "test156163" : {
    "methodSignature" : "public static void checkRectangular(final long[][] in) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "checkRectangular",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test156163() throws Throwable {\n    long[][] longArray0 = new long[2][4];\n    MathArrays.checkRectangular(longArray0);\n}",
    "testName" : "test156163"
  },
  "test120126" : {
    "methodSignature" : "public static boolean equals(double[] x, double[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120126() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    doubleArray0[0] = (double) 150;\n    double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);\n    boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);\n}",
    "testName" : "test120126"
  },
  "test07882" : {
    "methodSignature" : "public static double distance(double[] p1, double[] p2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07882() throws Throwable {\n    MathArrays.distance((double[]) null, (double[]) null);\n}",
    "testName" : "test07882"
  },
  "test178186" : {
    "methodSignature" : "public static void sortInPlace(double[] x, double[]... yList) throws DimensionMismatchException, NullArgumentException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test178186() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    double[][] doubleArray1 = new double[3][2];\n    doubleArray1[0] = doubleArray0;\n    doubleArray1[1] = doubleArray0;\n    doubleArray1[2] = doubleArray0;\n    MathArrays.sortInPlace(doubleArray0, doubleArray1);\n}",
    "testName" : "test178186"
  },
  "test03434" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03434() throws Throwable {\n    double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 1234.5736213204275);\n}",
    "testName" : "test03434"
  },
  "test02626" : {
    "methodSignature" : "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeAdd",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02626() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    doubleArray0[0] = (-1.0);\n    double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);\n}",
    "testName" : "test02626"
  },
  "test05458" : {
    "methodSignature" : "public static void sortInPlace(double[] x, final OrderDirection dir, double[]... yList) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05458() throws Throwable {\n    double[] doubleArray0 = new double[3];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);\n}",
    "testName" : "test05458"
  },
  "test108112" : {
    "methodSignature" : "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException",
    "methodName" : "convolve",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108112() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    MathArrays.convolve(doubleArray0, doubleArray0);\n}",
    "testName" : "test108112"
  },
  "test01414" : {
    "methodSignature" : "public static void checkRectangular(final long[][] in) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "checkRectangular",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    long[][] longArray0 = new long[0][7];\n    MathArrays.checkRectangular(longArray0);\n}",
    "testName" : "test01414"
  },
  "test04647" : {
    "methodSignature" : "public static double distance(int[] p1, int[] p2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04647() throws Throwable {\n    int[] intArray0 = new int[1];\n    int[] intArray1 = new int[3];\n    intArray1[0] = 9;\n    double double0 = MathArrays.distance(intArray0, intArray1);\n}",
    "testName" : "test04647"
  },
  "test162169" : {
    "methodSignature" : "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test162169() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);\n}",
    "testName" : "test162169"
  },
  "test125132" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125132() throws Throwable {\n    float[] floatArray0 = new float[8];\n    boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);\n}",
    "testName" : "test125132"
  },
  "test151158" : {
    "methodSignature" : "public static void checkNonNegative(final long[][] in) throws NotPositiveException",
    "methodName" : "checkNonNegative",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151158() throws Throwable {\n    long[][] longArray0 = new long[2][0];\n    long[] longArray1 = new long[8];\n    longArray1[2] = (-2715L);\n    longArray0[0] = longArray1;\n    MathArrays.checkNonNegative(longArray0);\n}",
    "testName" : "test151158"
  },
  "test03838" : {
    "methodSignature" : "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03838() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);\n}",
    "testName" : "test03838"
  },
  "test01818" : {
    "methodSignature" : "public static int distanceInf(int[] p1, int[] p2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01818() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 1066;\n    int int0 = MathArrays.distanceInf(intArray0, intArray0);\n}",
    "testName" : "test01818"
  },
  "test167174" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test167174() throws Throwable {\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \"\";\n    stringArray0[3] = \"dk\";\n    stringArray0[4] = \";Fk\";\n    boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);\n}",
    "testName" : "test167174"
  },
  "test08286" : {
    "methodSignature" : "public static double[] copyOf(double[] source, int len)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08286() throws Throwable {\n    MathArrays.copyOf((double[]) null, 0);\n}",
    "testName" : "test08286"
  },
  "test07074" : {
    "methodSignature" : "public static double distanceInf(double[] p1, double[] p2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07074() throws Throwable {\n    MathArrays.distanceInf((double[]) null, (double[]) null);\n}",
    "testName" : "test07074"
  },
  "test164171" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test164171() throws Throwable {\n    String[] stringArray0 = new String[9];\n    stringArray0[0] = \"number of elements should be positive ({0})\";\n    stringArray0[1] = \"7p#q|m7c]#<BcH+^y\";\n    stringArray0[2] = \"0wvZ;11}\";\n    stringArray0[3] = \"}Q??yHm xO\";\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test164171"
  },
  "test05052" : {
    "methodSignature" : "public static int[] copyOf(int[] source)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05052() throws Throwable {\n    int[] intArray0 = new int[0];\n    int[] intArray1 = MathArrays.copyOf(intArray0);\n}",
    "testName" : "test05052"
  },
  "test170177" : {
    "methodSignature" : "public static double distanceInf(double[] p1, double[] p2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test170177() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);\n}",
    "testName" : "test170177"
  },
  "test0055" : {
    "methodSignature" : "public static boolean equals(float[] x, float[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    float[] floatArray0 = new float[23];\n    float[] floatArray1 = new float[0];\n    boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);\n}",
    "testName" : "test0055"
  },
  "test09094" : {
    "methodSignature" : "public static void checkOrder(double[] val, OrderDirection dir, boolean strict) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09094() throws Throwable {\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test09094"
  },
  "test119125" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119125() throws Throwable {\n    boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);\n}",
    "testName" : "test119125"
  },
  "test140147" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140147() throws Throwable {\n    double double0 = MathArrays.linearCombination(1.0, (double) 150, 1.34217729E8, Double.NaN);\n}",
    "testName" : "test140147"
  },
  "test07478" : {
    "methodSignature" : "public static double distance1(double[] p1, double[] p2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07478() throws Throwable {\n    MathArrays.distance1((double[]) null, (double[]) null);\n}",
    "testName" : "test07478"
  },
  "test134141" : {
    "methodSignature" : "public static boolean equals(float[] x, float[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134141() throws Throwable {\n    float[] floatArray0 = new float[2];\n    boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);\n}",
    "testName" : "test134141"
  },
  "test03030" : {
    "methodSignature" : "public static void checkOrder(double[] val, OrderDirection dir, boolean strict) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03030() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);\n}",
    "testName" : "test03030"
  },
  "test02222" : {
    "methodSignature" : "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeDivide",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02222() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = (-1.0);\n    double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);\n}",
    "testName" : "test02222"
  },
  "test04242" : {
    "methodSignature" : "public static int distanceInf(int[] p1, int[] p2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04242() throws Throwable {\n    int[] intArray0 = new int[4];\n    intArray0[0] = 1364;\n    int[] intArray1 = new int[8];\n    int int0 = MathArrays.distanceInf(intArray0, intArray1);\n}",
    "testName" : "test04242"
  },
  "test09498" : {
    "methodSignature" : "public static void checkNonNegative(final long[][] in) throws NotPositiveException",
    "methodName" : "checkNonNegative",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09498() throws Throwable {\n    MathArrays.checkNonNegative((long[][]) null);\n}",
    "testName" : "test09498"
  },
  "test01010" : {
    "methodSignature" : "public static void checkNonNegative(final long[][] in) throws NotPositiveException",
    "methodName" : "checkNonNegative",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    long[][] longArray0 = new long[2][0];\n    long[] longArray1 = new long[8];\n    longArray1[0] = 2937L;\n    longArray0[0] = longArray1;\n    MathArrays.checkNonNegative(longArray0);\n}",
    "testName" : "test01010"
  },
  "test06266" : {
    "methodSignature" : "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06266() throws Throwable {\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test06266"
  },
  "test153160" : {
    "methodSignature" : "public static void checkPositive(final double[] in) throws NotStrictlyPositiveException",
    "methodName" : "checkPositive",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test153160() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = 1.1902911999999998E39;\n    MathArrays.checkPositive(doubleArray0);\n}",
    "testName" : "test153160"
  },
  "test098102" : {
    "methodSignature" : "public static <T> T[] buildArray(final Field<T> field, final int length)",
    "methodName" : "buildArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098102() throws Throwable {\n    Class<FieldElement> class0 = FieldElement.class;\n    Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(field0).getRuntimeClass();\n    MathArrays.buildArray(field0, (-969));\n}",
    "testName" : "test098102"
  },
  "test175183" : {
    "methodSignature" : "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeSubtract",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test175183() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    double[] doubleArray1 = new double[0];\n    MathArrays.ebeSubtract(doubleArray0, doubleArray1);\n}",
    "testName" : "test175183"
  },
  "test145152" : {
    "methodSignature" : "public static void sortInPlace(double[] x, final OrderDirection dir, double[]... yList) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145152() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    double[][] doubleArray1 = new double[6][0];\n    doubleArray1[0] = null;\n    MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);\n}",
    "testName" : "test145152"
  },
  "test114118" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114118() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    doubleArray0[1] = 716.96956;\n    double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);\n    boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);\n}",
    "testName" : "test114118"
  },
  "test08791" : {
    "methodSignature" : "public static void checkPositive(final double[] in) throws NotStrictlyPositiveException",
    "methodName" : "checkPositive",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08791() throws Throwable {\n    MathArrays.checkPositive((double[]) null);\n}",
    "testName" : "test08791"
  },
  "test0066" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    double double0 = MathArrays.linearCombination((double) 2231, 1762.01, 0.0, 0.0);\n}",
    "testName" : "test0066"
  },
  "test150157" : {
    "methodSignature" : "public static double safeNorm(double[] v)",
    "methodName" : "safeNorm",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test150157() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    double double0 = MathArrays.safeNorm(doubleArray0);\n}",
    "testName" : "test150157"
  },
  "test05963" : {
    "methodSignature" : "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05963() throws Throwable {\n    MathArrays.linearCombination((double[]) null, (double[]) null);\n}",
    "testName" : "test05963"
  },
  "test133140" : {
    "methodSignature" : "public static boolean equals(float[] x, float[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133140() throws Throwable {\n    float[] floatArray0 = new float[0];\n    boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);\n}",
    "testName" : "test133140"
  },
  "test06771" : {
    "methodSignature" : "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeAdd",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06771() throws Throwable {\n    MathArrays.ebeAdd((double[]) null, (double[]) null);\n}",
    "testName" : "test06771"
  },
  "test07983" : {
    "methodSignature" : "public static double distance(double[] p1, double[] p2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07983() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    double[] doubleArray1 = new double[7];\n    MathArrays.distance(doubleArray0, doubleArray1);\n}",
    "testName" : "test07983"
  },
  "test158165" : {
    "methodSignature" : "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test158165() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    doubleArray0[0] = (double) 179;\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);\n}",
    "testName" : "test158165"
  },
  "test101105" : {
    "methodSignature" : "public static void sortInPlace(double[] x, final OrderDirection dir, double[]... yList) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101105() throws Throwable {\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    double[][] doubleArray0 = new double[1][5];\n    MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);\n}",
    "testName" : "test101105"
  },
  "test179187" : {
    "methodSignature" : "public static void sortInPlace(double[] x, double[]... yList) throws DimensionMismatchException, NullArgumentException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test179187() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    double[][] doubleArray1 = new double[4][6];\n    MathArrays.sortInPlace(doubleArray0, doubleArray1);\n}",
    "testName" : "test179187"
  },
  "test04748" : {
    "methodSignature" : "public static double distance(double[] p1, double[] p2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04748() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = (-2446.0);\n    double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);\n    double double0 = MathArrays.distance(doubleArray0, doubleArray1);\n}",
    "testName" : "test04748"
  },
  "test02323" : {
    "methodSignature" : "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeDivide",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02323() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    double[] doubleArray1 = new double[5];\n    MathArrays.ebeDivide(doubleArray0, doubleArray1);\n}",
    "testName" : "test02323"
  },
  "test01515" : {
    "methodSignature" : "public static void checkOrder(double[] val, OrderDirection dir, boolean strict) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01515() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    doubleArray0[1] = 3995.29744;\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test01515"
  },
  "test03535" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03535() throws Throwable {\n    double double0 = MathArrays.linearCombination((-20.0), (-20.0), 3488.314585954745, (-20.0), 3488.314585954745, 3995.29744);\n}",
    "testName" : "test03535"
  },
  "test05559" : {
    "methodSignature" : "public static void scaleInPlace(double val, final double[] arr)",
    "methodName" : "scaleInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05559() throws Throwable {\n    MathArrays.scaleInPlace(0.25, (double[]) null);\n}",
    "testName" : "test05559"
  },
  "test106110" : {
    "methodSignature" : "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106110() throws Throwable {\n    double[] doubleArray0 = new double[4];\n    double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);\n    MathArrays.linearCombination(doubleArray0, doubleArray1);\n}",
    "testName" : "test106110"
  },
  "test123130" : {
    "methodSignature" : "public static boolean equals(double[] x, double[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123130() throws Throwable {\n    boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);\n}",
    "testName" : "test123130"
  },
  "test02727" : {
    "methodSignature" : "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeAdd",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02727() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    double[] doubleArray1 = new double[2];\n    MathArrays.ebeAdd(doubleArray1, doubleArray0);\n}",
    "testName" : "test02727"
  },
  "test182191" : {
    "methodSignature" : "public static double[] copyOf(double[] source)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test182191() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    double[] doubleArray1 = MathArrays.copyOf(doubleArray0);\n}",
    "testName" : "test182191"
  },
  "test169176" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test169176() throws Throwable {\n    Double[] doubleArray0 = new Double[5];\n    doubleArray0[0] = (Double) 1.1902911999999998E39;\n    doubleArray0[1] = (Double) 1.1902911999999998E39;\n    doubleArray0[2] = (Double) 1.1902911999999998E39;\n    doubleArray0[3] = (Double) 1.1902911999999998E39;\n    doubleArray0[4] = (Double) 1.1902911999999998E39;\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);\n}",
    "testName" : "test169176"
  },
  "test01919" : {
    "methodSignature" : "public static double distance(double[] p1, double[] p2)",
    "methodName" : "distance",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01919() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 6623593.361970729;\n    double double0 = MathArrays.distance(doubleArray0, doubleArray0);\n}",
    "testName" : "test01919"
  },
  "test144151" : {
    "methodSignature" : "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test144151() throws Throwable {\n    double[] doubleArray0 = new double[8];\n    double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);\n    MathArrays.linearCombination(doubleArray0, doubleArray1);\n}",
    "testName" : "test144151"
  },
  "test03939" : {
    "methodSignature" : "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeSubtract",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03939() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);\n}",
    "testName" : "test03939"
  },
  "test07175" : {
    "methodSignature" : "public static double distanceInf(double[] p1, double[] p2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07175() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    double[] doubleArray1 = new double[4];\n    MathArrays.distanceInf(doubleArray1, doubleArray0);\n}",
    "testName" : "test07175"
  },
  "test09195" : {
    "methodSignature" : "public static void checkOrder(double[] val) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09195() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    MathArrays.checkOrder(doubleArray0);\n}",
    "testName" : "test09195"
  },
  "test172179" : {
    "methodSignature" : "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException",
    "methodName" : "ebeDivide",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test172179() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    double[] doubleArray1 = new double[5];\n    MathArrays.ebeDivide(doubleArray1, doubleArray0);\n}",
    "testName" : "test172179"
  },
  "test0077" : {
    "methodSignature" : "public static double safeNorm(double[] v)",
    "methodName" : "safeNorm",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    doubleArray0[0] = 1.304E19;\n    doubleArray0[2] = Double.POSITIVE_INFINITY;\n    double double0 = MathArrays.safeNorm(doubleArray0);\n}",
    "testName" : "test0077"
  },
  "test117123" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117123() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);\n}",
    "testName" : "test117123"
  },
  "test04343" : {
    "methodSignature" : "public static double distanceInf(double[] p1, double[] p2)",
    "methodName" : "distanceInf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04343() throws Throwable {\n    double[] doubleArray0 = new double[5];\n    doubleArray0[2] = 64.448060412;\n    double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-464.6));\n    double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);\n}",
    "testName" : "test04343"
  },
  "test136143" : {
    "methodSignature" : "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136143() throws Throwable {\n    double double0 = MathArrays.linearCombination((-940.0194), (-940.0194), Double.NaN, 2466.439, (-4031.26377258), (-940.0194), (-940.0194), (-940.0194));\n}",
    "testName" : "test136143"
  },
  "test06367" : {
    "methodSignature" : "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06367() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);\n}",
    "testName" : "test06367"
  },
  "test07579" : {
    "methodSignature" : "public static double distance1(double[] p1, double[] p2)",
    "methodName" : "distance1",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07579() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    double[] doubleArray1 = new double[1];\n    MathArrays.distance1(doubleArray0, doubleArray1);\n}",
    "testName" : "test07579"
  },
  "test142149" : {
    "methodSignature" : "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142149() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    doubleArray0[0] = Double.POSITIVE_INFINITY;\n    double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);\n}",
    "testName" : "test142149"
  },
  "test05154" : {
    "methodSignature" : "public static double[] copyOf(double[] source, int len)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05154() throws Throwable {\n    double[] doubleArray0 = new double[7];\n    double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);\n}",
    "testName" : "test05154"
  },
  "test09599" : {
    "methodSignature" : "public static void checkNonNegative(final long[] in) throws NotPositiveException",
    "methodName" : "checkNonNegative",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09599() throws Throwable {\n    MathArrays.checkNonNegative((long[]) null);\n}",
    "testName" : "test09599"
  },
  "test155162" : {
    "methodSignature" : "public static void checkRectangular(final long[][] in) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "checkRectangular",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test155162() throws Throwable {\n    long[][] longArray0 = new long[8][4];\n    long[] longArray1 = new long[9];\n    longArray0[0] = longArray1;\n    MathArrays.checkRectangular(longArray0);\n}",
    "testName" : "test155162"
  },
  "test01111" : {
    "methodSignature" : "public static void checkNonNegative(final long[] in) throws NotPositiveException",
    "methodName" : "checkNonNegative",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    long[] longArray0 = new long[2];\n    longArray0[0] = 100L;\n    MathArrays.checkNonNegative(longArray0);\n}",
    "testName" : "test01111"
  },
  "test104108" : {
    "methodSignature" : "public static int[] copyOf(int[] source, int len)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104108() throws Throwable {\n    int[] intArray0 = new int[6];\n    MathArrays.copyOf(intArray0, (-3361));\n}",
    "testName" : "test104108"
  },
  "test03131" : {
    "methodSignature" : "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException",
    "methodName" : "linearCombination",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03131() throws Throwable {\n    double[] doubleArray0 = new double[6];\n    doubleArray0[4] = (-2551.8);\n    double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);\n    double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);\n}",
    "testName" : "test03131"
  },
  "test08387" : {
    "methodSignature" : "public static double[] copyOf(double[] source, int len)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08387() throws Throwable {\n    double[] doubleArray0 = new double[9];\n    MathArrays.copyOf(doubleArray0, (-977));\n}",
    "testName" : "test08387"
  },
  "test177185" : {
    "methodSignature" : "public static void sortInPlace(double[] x, final OrderDirection dir, double[]... yList) throws NullArgumentException, DimensionMismatchException",
    "methodName" : "sortInPlace",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test177185() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    double[][] doubleArray1 = new double[0][1];\n    MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);\n}",
    "testName" : "test177185"
  },
  "test180188" : {
    "methodSignature" : "public static int[] copyOf(int[] source)",
    "methodName" : "copyOf",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test180188() throws Throwable {\n    int[] intArray0 = new int[1];\n    int[] intArray1 = MathArrays.copyOf(intArray0);\n}",
    "testName" : "test180188"
  },
  "test109113" : {
    "methodSignature" : "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)",
    "methodName" : "buildArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109113() throws Throwable {\n    Class<FieldElement> class0 = FieldElement.class;\n    Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(field0).getRuntimeClass();\n    doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();\n    Object[][] objectArray0 = MathArrays.buildArray(field0, 109, 1914);\n}",
    "testName" : "test109113"
  },
  "test128135" : {
    "methodSignature" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
    "methodName" : "equalsIncludingNaN",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128135() throws Throwable {\n    float[] floatArray0 = new float[0];\n    boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);\n}",
    "testName" : "test128135"
  },
  "test161168" : {
    "methodSignature" : "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException",
    "methodName" : "checkOrder",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test161168() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;\n    boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);\n}",
    "testName" : "test161168"
  },
  "test147154" : {
    "methodSignature" : "public static double safeNorm(double[] v)",
    "methodName" : "safeNorm",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test147154() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = 3.834E-20;\n    double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);\n    double double0 = MathArrays.safeNorm(doubleArray1);\n}",
    "testName" : "test147154"
  },
  "test131138" : {
    "methodSignature" : "public static boolean equals(float[] x, float[] y)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131138() throws Throwable {\n    float[] floatArray0 = new float[0];\n    float[] floatArray1 = new float[5];\n    boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);\n}",
    "testName" : "test131138"
  },
  "test112116" : {
    "methodSignature" : "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException",
    "methodName" : "normalizeArray",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112116() throws Throwable {\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = Double.NaN;\n    MathArrays.normalizeArray(doubleArray0, 3.834E-20);\n}",
    "testName" : "test112116"
  },
  "test166173" : {
    "methodSignature" : "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)",
    "methodName" : "isMonotonic",
    "className" : "org.apache.commons.math3.util.MathArrays",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test166173() throws Throwable {\n    Double[] doubleArray0 = new Double[3];\n    doubleArray0[0] = (Double) 1.34217729E8;\n    doubleArray0[1] = (Double) 1.34217729E8;\n    MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;\n    MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);\n}",
    "testName" : "test166173"
  }
}