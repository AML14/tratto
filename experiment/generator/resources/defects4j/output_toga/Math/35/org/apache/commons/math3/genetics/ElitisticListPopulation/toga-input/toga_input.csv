focal_method,test_prefix,docstring
"public void setElitismRate(final double elitismRate) {
    if (elitismRate < 0 || elitismRate > 1) {
        throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);
    }
    this.elitismRate = elitismRate;
}","public void test011() throws Throwable {
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1080, 1080);
    elitisticListPopulation0.setElitismRate(1080);
}","/**
 * Sets the elitism rate, i.e. how many best chromosomes will be directly
 * transferred to the next generation [in %].
 *
 * @param elitismRate how many best chromosomes will be directly transferred to the
 *                    next generation [in %]
 * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test022() throws Throwable {
    LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
    linkedList0.spliterator();
    linkedList0.add((Chromosome) null);
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 61, 1.0);
    elitisticListPopulation0.nextGeneration();
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test033() throws Throwable {
    LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 174, 174);
    elitisticListPopulation0.nextGeneration();
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
"public void setElitismRate(final double elitismRate) {
    if (elitismRate < 0 || elitismRate > 1) {
        throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);
    }
    this.elitismRate = elitismRate;
}","public void test044() throws Throwable {
    LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
    int int0 = 0;
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 0, (-763.75318048848));
    // Undeclared exception!
    try {
        elitisticListPopulation0.setElitismRate(int0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // population limit has to be positive
        //
        verifyException(""org.apache.commons.math3.genetics.ListPopulation"", e);
    }
}","/**
 * Sets the elitism rate, i.e. how many best chromosomes will be directly
 * transferred to the next generation [in %].
 *
 * @param elitismRate how many best chromosomes will be directly transferred to the
 *                    next generation [in %]
 * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
 */"
"public ElitisticListPopulation(final int populationLimit, final double elitismRate) {
    super(populationLimit);
    this.elitismRate = elitismRate;
}","public void test055() throws Throwable {
    int int0 = (-881);
    double double0 = 700.3623;
    ElitisticListPopulation elitisticListPopulation0 = null;
    try {
        elitisticListPopulation0 = new ElitisticListPopulation((-881), 700.3623);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // population limit has to be positive
        //
        verifyException(""org.apache.commons.math3.genetics.ListPopulation"", e);
    }
}","/**
 * Creates a new ListPopulation instance and initializes its inner
 * chromosome list.
 *
 * @param populationLimit maximal size of the population
 * @param elitismRate how many best chromosomes will be directly transferred to the
 *                    next generation [in %]
 * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
 */"
"public void setElitismRate(final double elitismRate) {
    if (elitismRate < 0 || elitismRate > 1) {
        throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);
    }
    this.elitismRate = elitismRate;
}","public void test066() throws Throwable {
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1466, 1466);
    elitisticListPopulation0.setElitismRate((-1449.43));
}","/**
 * Sets the elitism rate, i.e. how many best chromosomes will be directly
 * transferred to the next generation [in %].
 *
 * @param elitismRate how many best chromosomes will be directly transferred to the
 *                    next generation [in %]
 * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
 */"
"public void setChromosomes(final List<Chromosome> chromosomes) {
    this.chromosomes = chromosomes;
}","public void test077() throws Throwable {
    List<Chromosome> list0 = null;
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) null, 0, 0);
    // Undeclared exception!
    try {
        elitisticListPopulation0.setChromosomes(list0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.genetics.ListPopulation"", e);
    }
}","/**
 * Sets the list of chromosomes.
 * @param chromosomes the list of chromosomes
 */"
"public Iterator<Chromosome> iterator() {
    return chromosomes.iterator();
}","public void test088() throws Throwable {
    int int0 = 1054;
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1054, 0.0);
    List<Chromosome> list0 = elitisticListPopulation0.getChromosomes();
    ElitisticListPopulation elitisticListPopulation1 = new ElitisticListPopulation(list0, 1054, 1054);
    elitisticListPopulation1.nextGeneration();
    elitisticListPopulation1.setElitismRate(1054);
    // Undeclared exception!
    try {
        elitisticListPopulation1.iterator();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // elitism rate (1,054)
        //
        verifyException(""org.apache.commons.math3.genetics.ElitisticListPopulation"", e);
    }
}","/**
 * Chromosome list iterator
 *
 * @return chromosome iterator
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test099() throws Throwable {
    LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 2727, 0.0);
    elitisticListPopulation0.setPopulationLimit(0);
    elitisticListPopulation0.getElitismRate();
    elitisticListPopulation0.nextGeneration();
    elitisticListPopulation0.nextGeneration();
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test1010() throws Throwable {
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
    elitisticListPopulation0.setElitismRate(1);
    elitisticListPopulation0.nextGeneration();
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
"public void setElitismRate(final double elitismRate) {
    if (elitismRate < 0 || elitismRate > 1) {
        throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);
    }
    this.elitismRate = elitismRate;
}","public void test1111() throws Throwable {
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(2545, 0.0);
    elitisticListPopulation0.getElitismRate();
    elitisticListPopulation0.setElitismRate(1.0);
    elitisticListPopulation0.getElitismRate();
    elitisticListPopulation0.setElitismRate(0.0);
}","/**
 * Sets the elitism rate, i.e. how many best chromosomes will be directly
 * transferred to the next generation [in %].
 *
 * @param elitismRate how many best chromosomes will be directly transferred to the
 *                    next generation [in %]
 * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test1313() throws Throwable {
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 501.0);
    elitisticListPopulation0.setChromosomes((List<Chromosome>) null);
    elitisticListPopulation0.nextGeneration();
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test1515() throws Throwable {
    LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 2144003123, (-461.0231362));
    elitisticListPopulation0.setChromosomes(linkedList0);
    elitisticListPopulation0.nextGeneration();
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
"public ElitisticListPopulation(final int populationLimit, final double elitismRate) {
    super(populationLimit);
    this.elitismRate = elitismRate;
}","public void test1616() throws Throwable {
    LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
    int int0 = 2140129251;
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(2140129251, 2140129251);
}","/**
 * Creates a new ListPopulation instance and initializes its inner
 * chromosome list.
 *
 * @param populationLimit maximal size of the population
 * @param elitismRate how many best chromosomes will be directly transferred to the
 *                    next generation [in %]
 * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test1717() throws Throwable {
    LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
    linkedList0.add((Chromosome) null);
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 61, 1204);
    elitisticListPopulation0.nextGeneration();
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test1818() throws Throwable {
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(254, 254);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    elitisticListPopulation0.forEach(consumer0);
    elitisticListPopulation0.setPopulationLimit((-1073741824));
    elitisticListPopulation0.addChromosome((Chromosome) null);
    List<Chromosome> list0 = elitisticListPopulation0.getChromosomes();
    ElitisticListPopulation elitisticListPopulation1 = new ElitisticListPopulation(list0, 254, 254);
    elitisticListPopulation1.iterator();
    elitisticListPopulation1.nextGeneration();
    elitisticListPopulation0.nextGeneration();
    elitisticListPopulation0.nextGeneration();
    // Undeclared exception!
    try {
        elitisticListPopulation0.nextGeneration();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -253
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
"public Population nextGeneration() {
    // initialize a new generation with the same parameters
    ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());
    List<Chromosome> oldChromosomes = this.getChromosomes();
    Collections.sort(oldChromosomes);
    // index of the last ""not good enough"" chromosome
    int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
    for (int i = boundIndex; i < oldChromosomes.size(); i++) {
        nextGeneration.addChromosome(oldChromosomes.get(i));
    }
    return nextGeneration;
}","public void test1919() throws Throwable {
    LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
    linkedList0.add((Chromosome) null);
    ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 61, (-3312));
    elitisticListPopulation0.nextGeneration();
    linkedList0.add((Chromosome) null);
    elitisticListPopulation0.nextGeneration();
    elitisticListPopulation0.nextGeneration();
    elitisticListPopulation0.nextGeneration();
}","/**
 * Start the population for the next generation. The <code>{@link #elitismRate}</code>
 * percents of the best chromosomes are directly copied to the next generation.
 *
 * @return the beginnings of the next generation.
 */"
