{
  "test1212" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.INF.negate();\n    Complex complex2 = complex1.I.exp();\n    Complex complex3 = complex2.ZERO.sin();\n    Complex complex4 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);\n    Complex complex5 = complex2.cos();\n    complex4.sin();\n    complex4.conjugate();\n    complex4.NaN.negate();\n    complex4.createComplex(1.0E-6, Double.NaN);\n    complex3.sinh();\n    complex5.toString();\n}",
    "testName" : "test1212"
  },
  "test6868" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6868() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.cos();\n    complex1.hashCode();\n    Complex complex2 = complex1.sinh();\n    complex2.NaN.add(complex0);\n    Complex complex3 = complex2.NaN.tanh();\n    complex3.ONE.asin();\n    complex2.NaN.pow(complex1);\n    complex0.sinh();\n    complex1.getField();\n}",
    "testName" : "test6868"
  },
  "test5656" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.isInfinite();\n}",
    "testName" : "test5656"
  },
  "test2424" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = new Complex((-2546.359171), (-2546.359171));\n    Complex complex2 = complex1.ZERO.subtract(complex0);\n    Complex complex3 = complex0.add(complex1);\n    Complex complex4 = complex3.NaN.add(complex0);\n    Complex complex5 = complex3.NaN.sinh();\n    Complex complex6 = complex5.ONE.tan();\n    complex6.INF.sinh();\n    complex0.abs();\n    complex1.getImaginary();\n    Complex complex7 = complex0.add(complex1);\n    Complex complex8 = complex7.asin();\n    complex8.I.nthRoot(47);\n    complex7.abs();\n    Complex complex9 = Complex.I;\n    Complex complex10 = complex9.ZERO.sinh();\n    complex10.ONE.sinh();\n    complex9.ZERO.tanh();\n    complex7.I.abs();\n    complex1.ZERO.toString();\n    Complex complex11 = complex1.pow(complex9);\n    complex9.NaN.log();\n    Complex complex12 = complex8.sin();\n    complex11.sinh();\n    complex11.getImaginary();\n    complex2.I.getArgument();\n    complex11.getReal();\n    complex9.multiply(672.17229925647);\n    complex2.acos();\n    complex4.tanh();\n    complex12.isNaN();\n}",
    "testName" : "test2424"
  },
  "test4444" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4444() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.I.divide(complex1);\n    complex0.ZERO.getArgument();\n    complex0.getReal();\n    complex1.ZERO.acos();\n    Complex complex3 = complex0.createComplex(1.0, 58.9892943134);\n    complex2.add(complex1);\n    complex3.tan();\n}",
    "testName" : "test4444"
  },
  "test3232" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    Complex complex0 = new Complex(1.2958646899018938E-9, (-1038.0));\n    Complex complex1 = complex0.I.sin();\n    Complex complex2 = complex1.NaN.exp();\n    complex2.I.sinh();\n    Complex complex3 = complex0.INF.acos();\n    complex0.getArgument();\n    complex3.getReal();\n    complex1.sinh();\n    complex1.asin();\n}",
    "testName" : "test3232"
  },
  "test7676" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7676() throws Throwable {\n    Complex complex0 = new Complex((-7.44321345601866E-11), (-7.44321345601866E-11));\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex0.atan();\n    complex2.INF.tanh();\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex1.ZERO.subtract(complex2);\n    Object object0 = complex1.readResolve();\n    complex0.equals(object0);\n    Complex complex5 = complex1.multiply(complex4);\n    Complex complex6 = complex5.I.tan();\n    Complex complex7 = complex6.multiply(1952.464);\n    Complex complex8 = complex5.ONE.subtract(complex1);\n    complex2.abs();\n    Complex complex9 = complex0.INF.createComplex((-5265.440415820579), (-7.44321345601866E-11));\n    complex9.multiply(complex5);\n    complex6.atan();\n    complex5.log();\n    complex6.isNaN();\n    complex0.sqrt1z();\n    complex1.sqrt();\n    complex7.getImaginary();\n    complex8.hashCode();\n}",
    "testName" : "test7676"
  },
  "test077" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.I.cosh();\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.cos();\n    Complex complex4 = complex3.negate();\n    complex3.ZERO.tanh();\n    complex0.getField();\n    complex3.NaN.getArgument();\n    complex4.nthRoot(1);\n    complex0.getField();\n    complex2.ZERO.hashCode();\n    Complex complex5 = complex0.subtract(complex3);\n    Complex complex6 = complex5.I.sqrt();\n    Complex complex7 = complex4.pow(complex0);\n    complex7.getReal();\n    complex0.hashCode();\n    complex2.sqrt1z();\n    complex6.log();\n    complex0.createComplex(2122.161, 2122.161);\n    Complex complex8 = complex4.tanh();\n    complex8.ZERO.nthRoot(0);\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Complex complex0 = new Complex((-7.44321345601866E-11), (-7.44321345601866E-11));\n    Complex complex1 = new Complex((-5265.440415820579), (-7.44321345601866E-11));\n    Complex complex2 = complex0.atan();\n    complex2.INF.tanh();\n    complex1.I.readResolve();\n    Complex complex3 = complex1.ZERO.subtract(complex2);\n    Object object0 = complex1.readResolve();\n    complex0.equals(object0);\n    Complex complex4 = complex1.multiply(complex3);\n    Complex complex5 = complex4.I.tan();\n    Complex complex6 = complex5.multiply(1952.464);\n    Complex complex7 = complex4.ONE.subtract(complex1);\n    complex2.abs();\n    Complex complex8 = complex0.INF.createComplex((-5265.440415820579), (-7.44321345601866E-11));\n    complex8.multiply(complex4);\n    complex5.atan();\n    complex4.log();\n    complex5.isNaN();\n    complex0.sqrt1z();\n    complex1.sqrt();\n    complex6.getImaginary();\n    complex7.hashCode();\n}",
    "testName" : "test1616"
  },
  "test2828" : {
    "methodSignature" : "public Complex multiply(Complex rhs) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = complex0.INF.tanh();\n    Complex complex2 = complex1.ZERO.cosh();\n    complex2.ONE.tan();\n    Complex complex3 = complex0.INF.multiply(Double.NaN);\n    complex3.ONE.toString();\n    complex0.isInfinite();\n    complex0.nthRoot(1109);\n    complex3.conjugate();\n    Complex complex4 = complex0.sqrt1z();\n    complex4.tan();\n    complex3.isInfinite();\n    Complex complex5 = new Complex(Double.NaN, 0.0);\n    complex0.multiply(complex5);\n}",
    "testName" : "test2828"
  },
  "test4848" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4848() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.nthRoot(1493);\n    Complex complex1 = complex0.atan();\n    Complex complex2 = complex1.I.asin();\n    Complex complex3 = complex2.NaN.atan();\n    Complex complex4 = complex3.ZERO.createComplex(2008.0, 0.0);\n    complex4.NaN.add(complex3);\n    complex1.sin();\n    complex0.ONE.readResolve();\n    Complex complex5 = complex1.INF.multiply(2008.0);\n    Complex complex6 = complex5.sin();\n    complex6.ZERO.hashCode();\n    complex0.abs();\n    complex0.I.getField();\n    complex5.isNaN();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex7.NaN.sin();\n    Complex complex9 = complex0.sqrt1z();\n    complex8.INF.cos();\n    complex7.NaN.asin();\n    Complex complex10 = complex9.ZERO.multiply(0.0);\n    complex8.isNaN();\n    complex10.isInfinite();\n    complex9.getImaginary();\n    complex8.getField();\n    complex3.getImaginary();\n}",
    "testName" : "test4848"
  },
  "test3636" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.NaN.acos();\n    complex0.cos();\n    Complex complex2 = complex0.negate();\n    Complex complex3 = complex1.multiply(248.0);\n    complex3.acos();\n    complex0.equals(complex2);\n    complex1.tan();\n}",
    "testName" : "test3636"
  },
  "test6060" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6060() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.ZERO.tanh();\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.add(complex1);\n    complex2.NaN.readResolve();\n    Complex complex3 = complex0.sinh();\n    complex3.INF.nthRoot(0);\n}",
    "testName" : "test6060"
  },
  "test6464" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6464() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.ZERO.nthRoot((-888));\n}",
    "testName" : "test6464"
  },
  "test5252" : {
    "methodSignature" : "public Complex multiply(double rhs)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.getField();\n    Complex complex1 = complex0.ONE.sin();\n    Complex complex2 = complex0.cos();\n    Complex complex3 = complex2.I.negate();\n    complex3.INF.add(complex1);\n    complex1.add(complex2);\n    complex2.I.readResolve();\n    complex0.hashCode();\n    complex0.multiply(2.0);\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "public Complex multiply(Complex rhs) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex1.log();\n    Complex complex3 = complex0.ONE.sinh();\n    Complex complex4 = complex2.INF.tan();\n    complex4.INF.abs();\n    Complex complex5 = complex4.ONE.multiply(13.07);\n    complex5.asin();\n    complex0.multiply(complex1);\n    Complex complex6 = complex2.sinh();\n    complex3.conjugate();\n    complex3.multiply((-7.800414592973399E-9));\n    complex3.multiply(complex6);\n}",
    "testName" : "test2020"
  },
  "test4040" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.NaN.cosh();\n    complex0.conjugate();\n}",
    "testName" : "test4040"
  },
  "test7272" : {
    "methodSignature" : "public Complex subtract(Complex rhs) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7272() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ZERO.log();\n    complex0.toString();\n    Complex complex2 = complex0.exp();\n    Complex complex3 = complex2.INF.log();\n    complex2.ONE.acos();\n    complex1.I.abs();\n    Complex complex4 = complex1.NaN.sqrt1z();\n    complex4.I.cos();\n    Complex complex5 = complex4.negate();\n    complex5.ZERO.divide(complex1);\n    complex1.INF.sin();\n    complex0.getField();\n    Complex complex6 = complex2.I.sin();\n    Complex complex7 = Complex.I;\n    complex1.equals(complex7);\n    Complex complex8 = complex0.pow(complex7);\n    Complex complex9 = complex8.NaN.sqrt();\n    Complex complex10 = complex7.sin();\n    Complex complex11 = complex10.I.negate();\n    Complex complex12 = complex10.sin();\n    complex12.ZERO.atan();\n    complex11.tan();\n    complex12.INF.abs();\n    complex11.sin();\n    Complex complex13 = complex2.multiply(1256.1699696);\n    Complex complex14 = complex6.createComplex(1256.1699696, 1256.1699696);\n    complex14.ONE.divide(complex6);\n    complex6.sqrt();\n    complex3.negate();\n    Complex complex15 = complex0.subtract(complex6);\n    complex15.I.sqrt();\n    complex13.exp();\n    Complex complex16 = complex6.multiply(complex13);\n    complex16.subtract(complex9);\n}",
    "testName" : "test7272"
  },
  "test79102" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79102() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex1.toString();\n    String string0 = complex0.INF.toString();\n    List<Complex> list0 = complex1.INF.nthRoot(17);\n    Complex complex3 = complex0.INF.acos();\n    Complex complex4 = complex3.NaN.sqrt();\n    Complex complex5 = complex1.INF.multiply((-869.3549889687644));\n    complex5.INF.exp();\n    Complex complex6 = complex0.ONE.multiply(0.7853981633974483);\n    Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);\n    Complex complex8 = complex0.negate();\n    Complex complex9 = complex8.ZERO.sinh();\n    complex8.getField();\n    complex9.hashCode();\n    complex9.isInfinite();\n}",
    "testName" : "test79102"
  },
  "test79101" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79101() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex1.toString();\n    String string0 = complex0.INF.toString();\n    List<Complex> list0 = complex1.INF.nthRoot(17);\n    Complex complex3 = complex0.INF.acos();\n    Complex complex4 = complex3.NaN.sqrt();\n    Complex complex5 = complex1.INF.multiply((-869.3549889687644));\n    complex5.INF.exp();\n    Complex complex6 = complex0.ONE.multiply(0.7853981633974483);\n    Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);\n    complex7.equals((Object) complex6);\n}",
    "testName" : "test79101"
  },
  "test066" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.I.asin();\n    Complex complex1 = complex0.I.tan();\n    Complex complex2 = complex0.multiply(0.0);\n    complex2.NaN.cos();\n    Complex complex3 = complex0.multiply(3642.897);\n    complex0.tan();\n    Complex complex4 = complex1.pow(complex3);\n    complex4.INF.sin();\n    complex0.conjugate();\n}",
    "testName" : "test066"
  },
  "test2323" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Complex complex0 = new Complex(1132.75991764, 1132.75991764);\n    Complex complex1 = complex0.ONE.sinh();\n    Complex complex2 = Complex.ZERO;\n    Complex complex3 = complex0.divide(complex2);\n    complex3.negate();\n    Complex complex4 = complex0.subtract(complex1);\n    complex0.ZERO.divide(complex2);\n    complex2.ONE.getArgument();\n    complex4.ONE.conjugate();\n    Complex complex5 = complex4.tan();\n    Complex complex6 = complex4.tanh();\n    complex5.ONE.getField();\n    complex5.multiply(complex2);\n    complex4.tan();\n    complex1.toString();\n    complex4.getImaginary();\n    complex5.cosh();\n    complex0.abs();\n    complex4.sinh();\n    complex0.multiply(complex6);\n    complex1.hashCode();\n}",
    "testName" : "test2323"
  },
  "test3535" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    Complex complex0 = new Complex((-5851.0), 0.041666663879186654);\n    Complex complex1 = complex0.tan();\n    complex1.ZERO.log();\n    complex1.ONE.cosh();\n    complex1.hashCode();\n}",
    "testName" : "test3535"
  },
  "test6767" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6767() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.ZERO.toString();\n    complex0.ONE.sqrt();\n    complex0.sin();\n}",
    "testName" : "test6767"
  },
  "test5555" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.asin();\n    complex1.ONE.createComplex((-0.12502530217170715), 128.208383999138);\n    Complex complex2 = complex0.negate();\n    complex0.hashCode();\n    complex2.tanh();\n}",
    "testName" : "test5555"
  },
  "test1111" : {
    "methodSignature" : "public Complex divide(Complex rhs) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Complex complex0 = new Complex(2.0, 2.0);\n    complex0.ONE.divide((Complex) null);\n}",
    "testName" : "test1111"
  },
  "test4343" : {
    "methodSignature" : "public Complex subtract(Complex rhs) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4343() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.INF.abs();\n    complex0.I.sin();\n    complex0.ONE.createComplex(6.283185307179586, 0.0);\n    complex0.tan();\n    complex0.subtract((Complex) null);\n}",
    "testName" : "test4343"
  },
  "test011" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    complex1.INF.readResolve();\n    complex1.INF.subtract(complex3);\n    Complex complex4 = complex2.cos();\n    complex3.ONE.atan();\n    Complex complex5 = complex0.cos();\n    Complex complex6 = complex4.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex7 = complex6.NaN.pow(complex2);\n    Complex complex8 = complex5.I.subtract(complex2);\n    Complex complex9 = complex8.INF.negate();\n    Complex complex10 = complex4.conjugate();\n    complex10.NaN.exp();\n    complex1.INF.tanh();\n    complex1.abs();\n    complex0.getReal();\n    complex5.abs();\n    complex0.asin();\n    complex5.equals((Object) null);\n    complex3.log();\n    complex1.getArgument();\n    complex9.divide(complex7);\n    complex8.asin();\n    Complex complex11 = Complex.I;\n    complex0.equals(complex11);\n    complex11.exp();\n}",
    "testName" : "test011"
  },
  "test099" : {
    "methodSignature" : "public Complex divide(Complex rhs) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.INF.add(complex1);\n    complex0.isInfinite();\n    Complex complex3 = Complex.INF;\n    complex2.divide(complex3);\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "protected Complex createComplex(double realPart, double imaginaryPart)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    Complex complex0 = new Complex(2834.436239484218, Double.POSITIVE_INFINITY);\n    Complex complex1 = complex0.ONE.conjugate();\n    Complex complex2 = complex0.conjugate();\n    complex2.abs();\n    Complex complex3 = complex1.ZERO.divide(complex0);\n    Complex complex4 = complex3.sinh();\n    complex0.hashCode();\n    complex2.isNaN();\n    Complex complex5 = complex1.subtract(complex0);\n    complex2.getField();\n    Complex complex6 = complex2.divide(complex1);\n    complex1.isNaN();\n    complex5.subtract(complex6);\n    complex0.readResolve();\n    Complex complex7 = complex0.subtract(complex3);\n    complex7.ONE.log();\n    complex6.getArgument();\n    complex0.divide(complex3);\n    complex6.sqrt();\n    complex4.pow(complex6);\n    complex3.createComplex(6.283185307179586, 1618.7686746504);\n}",
    "testName" : "test2727"
  },
  "test3939" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.ONE;\n    Complex complex2 = complex0.ZERO.add(complex1);\n    complex0.getField();\n    complex2.I.sqrt1z();\n    complex0.asin();\n    Complex complex3 = complex1.tan();\n    complex2.acos();\n    complex3.toString();\n    complex0.atan();\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.atan();\n}",
    "testName" : "test5959"
  },
  "test1515" : {
    "methodSignature" : "public Complex divide(Complex rhs) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.I.exp();\n    Complex complex2 = complex0.INF.subtract(complex1);\n    Complex complex3 = complex1.divide(complex0);\n    complex3.multiply((-1285.93531427));\n    Complex complex4 = complex3.NaN.cosh();\n    Complex complex5 = complex4.NaN.multiply((-3510.85620034098));\n    Complex complex6 = complex5.I.multiply(complex0);\n    complex1.I.toString();\n    Complex complex7 = complex1.ONE.cos();\n    complex7.ONE.atan();\n    Complex complex8 = complex1.INF.cos();\n    Complex complex9 = new Complex(2.0, 4.9E-324);\n    Complex complex10 = complex1.add(complex9);\n    Complex complex11 = complex2.INF.tan();\n    complex11.ZERO.sin();\n    complex0.abs();\n    complex8.getField();\n    Complex complex12 = complex2.createComplex(1292.76428, 1292.76428);\n    Complex complex13 = complex12.exp();\n    Complex complex14 = complex9.cos();\n    complex8.hashCode();\n    complex12.toString();\n    complex13.subtract(complex6);\n    complex10.divide(complex14);\n}",
    "testName" : "test1515"
  },
  "test4747" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4747() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.I;\n    complex0.ONE.subtract(complex1);\n    Complex complex2 = complex0.sinh();\n    complex2.getImaginary();\n    complex2.getImaginary();\n}",
    "testName" : "test4747"
  },
  "test7171" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7171() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.conjugate();\n    complex0.NaN.hashCode();\n    Complex complex2 = complex0.ONE.cosh();\n    Complex complex3 = complex2.NaN.cosh();\n    Complex complex4 = complex0.multiply(2.0000000000000004);\n    complex3.INF.tan();\n    Complex complex5 = complex1.I.createComplex(2.0000000000000004, (-1564.9570709));\n    complex5.INF.negate();\n    complex5.ZERO.log();\n    complex0.equals(complex1);\n    Complex complex6 = complex0.I.sqrt();\n    complex1.getField();\n    Complex complex7 = complex4.pow(complex2);\n    Complex complex8 = complex1.cosh();\n    complex7.I.add(complex3);\n    Complex complex9 = complex4.exp();\n    complex8.multiply(1250.0435382044338);\n    complex7.multiply(complex8);\n    Complex complex10 = complex9.sin();\n    Complex complex11 = complex10.ZERO.tanh();\n    Complex complex12 = complex10.pow(complex6);\n    complex12.tan();\n    Complex complex13 = complex1.cosh();\n    complex0.toString();\n    Complex complex14 = new Complex((-1564.9570709), 2.0000000000000004);\n    complex13.equals(complex14);\n    complex5.sqrt();\n    complex10.pow(complex11);\n}",
    "testName" : "test7171"
  },
  "test7575" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7575() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = new Complex((-3044.0), 0.0);\n    Complex complex2 = complex0.add(complex1);\n    Complex complex3 = complex0.log();\n    Complex complex4 = complex0.INF.cosh();\n    Complex complex5 = complex4.conjugate();\n    complex5.createComplex((-3044.0), 0.0);\n    Complex complex6 = complex2.log();\n    Complex complex7 = complex2.multiply(10.0);\n    complex7.hashCode();\n    complex2.equals(complex0);\n    complex3.abs();\n    complex2.isNaN();\n    Complex complex8 = complex6.exp();\n    Complex complex9 = complex8.I.tan();\n    complex8.asin();\n    complex9.ONE.nthRoot((-2229));\n}",
    "testName" : "test7575"
  },
  "test6363" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6363() throws Throwable {\n    Complex complex0 = new Complex((-1726.9857756533), (-1726.9857756533));\n    complex0.sqrt();\n    complex0.conjugate();\n}",
    "testName" : "test6363"
  },
  "test3131" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex1.I.createComplex(0.0, 0.0);\n    complex1.INF.sqrt1z();\n    complex0.I.add(complex1);\n    Complex complex3 = complex0.sqrt();\n    complex3.equals(complex0);\n    complex1.abs();\n    Complex complex4 = complex0.conjugate();\n    Object object0 = complex1.readResolve();\n    complex1.equals(object0);\n    complex2.getReal();\n    complex0.readResolve();\n    complex4.atan();\n}",
    "testName" : "test3131"
  },
  "test5151" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.asin();\n    complex1.ZERO.hashCode();\n    Complex complex2 = complex1.I.cos();\n    Complex complex3 = Complex.I;\n    complex3.cos();\n    complex3.I.multiply(complex1);\n    complex2.ONE.add(complex3);\n    Complex complex4 = complex0.sqrt();\n    complex1.sqrt();\n    complex4.getField();\n}",
    "testName" : "test5151"
  },
  "test000" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = new Complex(1.0000000000744322, Double.POSITIVE_INFINITY);\n    Complex complex2 = complex0.multiply(complex1);\n    Complex complex3 = complex2.NaN.sinh();\n    Complex complex4 = complex0.ONE.subtract(complex1);\n    Complex complex5 = complex0.log();\n    complex5.INF.readResolve();\n    complex5.ZERO.getArgument();\n    Complex complex6 = complex0.multiply(1.0000000000744322);\n    complex6.NaN.toString();\n    complex2.ONE.multiply(complex5);\n    complex0.createComplex((-171.4417953), (-6.663542893624021E-14));\n    Complex complex7 = complex1.sqrt1z();\n    complex7.INF.sin();\n    Complex complex8 = complex7.NaN.divide(complex0);\n    complex4.conjugate();\n    complex2.nthRoot(17);\n    complex3.exp();\n    complex8.sin();\n}",
    "testName" : "test000"
  },
  "test088" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1388.4446);\n    Complex complex1 = Complex.INF;\n    Complex complex2 = complex0.ZERO.acos();\n    Complex complex3 = complex0.ZERO.add(complex1);\n    complex0.abs();\n    Complex complex4 = complex0.multiply((-1005.5086));\n    complex4.readResolve();\n    complex1.pow(complex3);\n    complex4.sqrt1z();\n    complex4.divide(complex3);\n    complex2.pow(complex3);\n}",
    "testName" : "test088"
  },
  "test1919" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.nthRoot(1);\n    Complex complex1 = complex0.sqrt1z();\n    complex0.I.readResolve();\n    Complex complex2 = complex0.acos();\n    complex2.ONE.pow(complex1);\n    Complex complex3 = Complex.ZERO;\n    complex2.multiply(0.0);\n    complex3.INF.hashCode();\n    Complex complex4 = complex1.subtract(complex3);\n    Complex complex5 = complex2.exp();\n    complex5.cosh();\n    Complex complex6 = complex3.sqrt1z();\n    complex3.nthRoot(1);\n    Object object0 = complex4.readResolve();\n    complex0.equals(object0);\n    complex4.ONE.tan();\n    Complex complex7 = complex3.log();\n    complex7.I.sinh();\n    complex4.getImaginary();\n    complex7.sqrt();\n    complex6.atan();\n    complex6.isNaN();\n    complex6.negate();\n    complex6.tanh();\n}",
    "testName" : "test1919"
  },
  "test4646" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4646() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.cos();\n    complex1.INF.add(complex0);\n    Complex complex2 = Complex.INF;\n    complex2.ZERO.subtract(complex0);\n    Complex complex3 = complex0.subtract(complex2);\n    complex3.NaN.tanh();\n    complex2.ZERO.tanh();\n    complex3.INF.exp();\n    Complex complex4 = complex2.createComplex(0.0, 0.0);\n    complex4.atan();\n}",
    "testName" : "test4646"
  },
  "test3434" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ONE.log();\n    complex1.cos();\n    Complex complex2 = complex0.sqrt();\n    Complex complex3 = complex1.asin();\n    complex3.INF.toString();\n    complex2.subtract(complex0);\n    complex3.nthRoot((-106));\n}",
    "testName" : "test3434"
  },
  "test7999" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7999() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex1.toString();\n    String string0 = complex0.INF.toString();\n}",
    "testName" : "test7999"
  },
  "test1010" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = complex0.ONE.sin();\n    Complex complex2 = complex0.I.log();\n    complex2.I.readResolve();\n    complex1.INF.readResolve();\n    Complex complex3 = complex0.negate();\n    Complex complex4 = complex3.ZERO.exp();\n    complex4.ONE.getArgument();\n    Complex complex5 = complex1.ONE.exp();\n    Complex complex6 = complex0.asin();\n    complex0.getReal();\n    complex5.I.acos();\n    complex6.equals(complex1);\n    complex3.readResolve();\n    Complex complex7 = complex3.createComplex((-2473.8064128516303), (-3370.98404));\n    Complex complex8 = complex3.INF.cosh();\n    complex8.NaN.negate();\n    complex7.exp();\n    Complex complex9 = complex7.I.multiply(complex5);\n    complex9.ZERO.sqrt1z();\n    Complex complex10 = complex9.INF.sin();\n    Complex complex11 = Complex.ZERO;\n    complex5.equals(complex11);\n    complex9.ZERO.toString();\n    complex4.getField();\n    complex7.cosh();\n    complex3.atan();\n    Complex complex12 = complex5.createComplex((-3370.98404), 1.494140625);\n    complex4.tan();\n    complex12.cos();\n    complex10.negate();\n    Complex complex13 = complex6.atan();\n    complex13.negate();\n}",
    "testName" : "test1010"
  },
  "test7998" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7998() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex2.getImaginary();\n}",
    "testName" : "test7998"
  },
  "test6666" : {
    "methodSignature" : "public Complex divide(Complex rhs) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6666() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.NaN;\n    complex1.asin();\n    complex0.divide(complex1);\n}",
    "testName" : "test6666"
  },
  "test5454" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.NaN;\n    complex0.atan();\n    Complex complex2 = complex0.ZERO.sqrt1z();\n    Complex complex3 = complex2.createComplex(1774.436800834765, 1774.436800834765);\n    Complex complex4 = complex0.NaN.subtract(complex1);\n    Complex complex5 = complex4.ONE.pow(complex2);\n    complex5.ZERO.sinh();\n    complex0.toString();\n    Complex complex6 = complex0.sinh();\n    Complex complex7 = complex1.multiply(complex6);\n    complex7.tan();\n    complex2.isNaN();\n    complex3.isNaN();\n}",
    "testName" : "test5454"
  },
  "test2222" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.I.negate();\n    Complex complex2 = complex0.acos();\n    complex0.isNaN();\n    Complex complex3 = complex2.asin();\n    complex3.readResolve();\n    Complex complex4 = complex2.pow(complex0);\n    Complex complex5 = complex2.ONE.multiply((double) 1);\n    complex4.nthRoot(1);\n    complex4.toString();\n    complex4.ZERO.add(complex1);\n    Complex complex6 = complex4.exp();\n    complex6.ONE.nthRoot(1);\n    complex1.acos();\n    complex0.getImaginary();\n    complex6.readResolve();\n    complex5.cos();\n}",
    "testName" : "test2222"
  },
  "test033" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = new Complex((-2085.116), (-2085.116));\n    complex0.I.pow(complex1);\n    complex0.toString();\n    complex0.hashCode();\n}",
    "testName" : "test033"
  },
  "test3838" : {
    "methodSignature" : "public Complex multiply(Complex rhs) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    Complex complex0 = new Complex(0.0, 3184.411);\n    Complex complex1 = Complex.NaN;\n    complex0.multiply(complex1);\n}",
    "testName" : "test3838"
  },
  "test1414" : {
    "methodSignature" : "public Complex multiply(Complex rhs) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.ONE.tan();\n    Complex complex2 = complex1.INF.createComplex(0.0, 0.0);\n    Complex complex3 = complex0.sinh();\n    Complex complex4 = complex3.ONE.acos();\n    complex1.NaN.nthRoot(168);\n    Complex complex5 = complex1.ZERO.createComplex(0.0, 0.0);\n    complex5.ZERO.readResolve();\n    complex1.acos();\n    Complex complex6 = complex1.NaN.sinh();\n    Complex complex7 = complex2.ZERO.tan();\n    Complex complex8 = complex7.ONE.subtract(complex0);\n    complex0.I.acos();\n    complex2.ZERO.readResolve();\n    Complex complex9 = complex2.createComplex(0.0, (-1629.2217549875743));\n    complex9.sin();\n    Complex complex10 = new Complex(0.0, (-1028.0465254));\n    complex1.NaN.asin();\n    Complex complex11 = complex1.pow(complex10);\n    complex11.INF.abs();\n    Complex complex12 = complex4.pow(complex3);\n    complex8.readResolve();\n    complex0.cos();\n    complex6.exp();\n    complex9.log();\n    complex7.conjugate();\n    Complex complex13 = Complex.NaN;\n    complex12.multiply(complex13);\n}",
    "testName" : "test1414"
  },
  "test5858" : {
    "methodSignature" : "public Complex divide(Complex rhs) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.getReal();\n    Complex complex1 = new Complex(2082.17, (-3627.15047442206));\n    complex0.divide(complex1);\n}",
    "testName" : "test5858"
  },
  "test2626" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ONE.sinh();\n    complex0.NaN.getArgument();\n    Complex complex2 = complex0.ONE.cos();\n    complex2.NaN.sin();\n    complex0.equals(\"{yd!<`NuF\\\"oaX$(y3HW\");\n    complex1.getReal();\n    Complex complex3 = complex1.sqrt1z();\n    Complex complex4 = complex3.INF.asin();\n    complex3.INF.asin();\n    complex0.ZERO.tanh();\n    Complex complex5 = complex4.I.sqrt1z();\n    complex4.NaN.hashCode();\n    Complex complex6 = complex3.atan();\n    complex5.ZERO.log();\n    complex1.ONE.abs();\n    Complex complex7 = complex6.NaN.exp();\n    complex7.INF.multiply(complex1);\n    complex4.I.tan();\n    Complex complex8 = complex3.asin();\n    complex8.NaN.tanh();\n    Complex complex9 = complex6.negate();\n    complex9.ONE.pow(complex8);\n    Complex complex10 = complex9.tanh();\n    complex10.I.divide(complex9);\n    complex0.nthRoot((-1143));\n}",
    "testName" : "test2626"
  },
  "test7070" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7070() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.sqrt1z();\n    Complex complex2 = complex1.exp();\n    complex1.nthRoot(1);\n    complex2.abs();\n    complex1.nthRoot(1);\n    complex1.toString();\n    Complex complex3 = complex1.acos();\n    complex0.I.getField();\n    complex3.ZERO.negate();\n    complex2.cosh();\n    complex2.createComplex(3.425518820814759, Double.POSITIVE_INFINITY);\n    complex1.negate();\n}",
    "testName" : "test7070"
  },
  "test4242" : {
    "methodSignature" : "public Complex multiply(double rhs)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    complex0.I.cosh();\n    Complex complex1 = Complex.INF;\n    complex0.multiply(complex1);\n    complex1.isInfinite();\n    complex1.multiply(0.0);\n}",
    "testName" : "test4242"
  },
  "test3030" : {
    "methodSignature" : "public Complex multiply(Complex rhs) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = complex0.INF.tanh();\n    Complex complex2 = complex1.ZERO.cosh();\n    complex2.ONE.tan();\n    Complex complex3 = complex0.INF.multiply(Double.NaN);\n    complex3.ONE.toString();\n    complex0.isInfinite();\n    complex0.nthRoot(1109);\n    Complex complex4 = complex0.sqrt1z();\n    complex4.tan();\n    complex3.isInfinite();\n    Complex complex5 = new Complex(Double.NaN, 0.0);\n    complex0.multiply(complex5);\n}",
    "testName" : "test3030"
  },
  "test7474" : {
    "methodSignature" : "public Complex multiply(double rhs)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7474() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.sinh();\n    Complex complex2 = complex1.I.tanh();\n    complex2.INF.log();\n    complex1.I.hashCode();\n    complex1.getField();\n    Complex complex3 = complex0.cos();\n    Complex complex4 = complex3.cos();\n    complex1.NaN.negate();\n    complex0.getReal();\n    complex2.nthRoot(37);\n    Complex complex5 = complex3.INF.atan();\n    complex4.INF.abs();\n    Complex complex6 = complex4.atan();\n    complex6.NaN.abs();\n    complex6.sqrt();\n    complex6.I.cos();\n    Complex complex7 = complex2.acos();\n    complex7.ONE.multiply(complex2);\n    complex6.getArgument();\n    complex2.getField();\n    Complex complex8 = complex3.negate();\n    complex0.tan();\n    complex8.divide(complex2);\n    complex5.multiply(Double.NaN);\n}",
    "testName" : "test7474"
  },
  "test6262" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6262() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.ONE.multiply(0.0);\n    complex0.negate();\n}",
    "testName" : "test6262"
  },
  "test5050" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5050() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.I;\n    complex0.NaN.pow(complex1);\n    complex0.toString();\n    Complex complex2 = complex0.sqrt1z();\n    complex0.NaN.negate();\n    Complex complex3 = complex0.cosh();\n    Complex complex4 = complex2.asin();\n    Complex complex5 = complex4.cos();\n    complex3.INF.sqrt();\n    complex2.acos();\n    complex3.abs();\n    complex5.acos();\n}",
    "testName" : "test5050"
  },
  "test7889" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7889() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n}",
    "testName" : "test7889"
  },
  "test022" : {
    "methodSignature" : "public Complex multiply(double rhs)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.sinh();\n    Complex complex2 = complex1.I.tanh();\n    complex2.INF.log();\n    complex1.I.hashCode();\n    complex1.getField();\n    Complex complex3 = complex0.cos();\n    Complex complex4 = complex3.cos();\n    complex1.NaN.negate();\n    complex0.getReal();\n    complex2.nthRoot(37);\n    Complex complex5 = complex3.INF.atan();\n    complex4.INF.abs();\n    Complex complex6 = complex4.atan();\n    complex6.NaN.abs();\n    Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);\n    complex6.I.cos();\n    Complex complex8 = complex2.acos();\n    complex8.ONE.multiply(complex2);\n    complex6.getArgument();\n    complex2.getField();\n    Complex complex9 = complex3.negate();\n    complex0.tan();\n    complex9.divide(complex2);\n    complex5.multiply(Double.NaN);\n}",
    "testName" : "test022"
  },
  "test1818" : {
    "methodSignature" : "public Complex multiply(Complex rhs) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.conjugate();\n    complex0.multiply((Complex) null);\n}",
    "testName" : "test1818"
  },
  "test5757" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5757() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.cosh();\n    Complex complex2 = complex1.NaN.exp();\n    complex2.acos();\n    complex2.I.createComplex(1084.03784095867, 1084.03784095867);\n    Complex complex3 = complex1.negate();\n    complex3.ZERO.createComplex(0.0, 0.0);\n    complex3.atan();\n    complex1.getArgument();\n    complex1.sqrt();\n}",
    "testName" : "test5757"
  },
  "test1313" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex1.NaN.multiply(complex0);\n    Complex complex3 = complex2.INF.sqrt();\n    Complex complex4 = complex0.multiply(complex1);\n    complex0.NaN.abs();\n    complex0.nthRoot(1223);\n    Complex complex5 = complex0.acos();\n    Complex complex6 = complex5.divide(complex0);\n    complex1.subtract(complex4);\n    Complex complex7 = complex6.tan();\n    complex3.getReal();\n    complex4.INF.hashCode();\n    complex4.createComplex(Double.NaN, (-1559.34));\n    complex5.add(complex6);\n    complex0.multiply(Double.NaN);\n    complex4.isInfinite();\n    complex6.tan();\n    complex4.log();\n    complex7.equals(\"\");\n}",
    "testName" : "test1313"
  },
  "test4545" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4545() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = Complex.I;\n    complex1.ZERO.getArgument();\n    Complex complex2 = complex1.multiply((-1698.38546402823));\n    Complex complex3 = complex1.I.multiply(2.0);\n    Complex complex4 = complex3.INF.cos();\n    Complex complex5 = complex4.NaN.exp();\n    Complex complex6 = complex0.add(complex1);\n    complex0.tan();\n    complex5.ONE.add(complex3);\n    Complex complex7 = complex5.negate();\n    Complex complex8 = complex7.ONE.negate();\n    complex5.divide(complex4);\n    complex6.tan();\n    complex2.sqrt();\n    complex8.getImaginary();\n}",
    "testName" : "test4545"
  },
  "test7778" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7778() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n}",
    "testName" : "test7778"
  },
  "test2121" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ZERO.asin();\n    Complex complex2 = complex0.negate();\n    Complex complex3 = complex2.add(complex0);\n    Complex complex4 = complex3.conjugate();\n    Complex complex5 = complex4.I.negate();\n    complex0.isNaN();\n    Complex complex6 = complex2.ONE.tan();\n    complex6.ONE.getField();\n    complex4.isInfinite();\n    complex2.isNaN();\n    complex6.add(complex0);\n    Complex complex7 = complex5.sinh();\n    complex1.tanh();\n    complex7.equals(\"\");\n    complex4.readResolve();\n    complex0.conjugate();\n    complex5.log();\n}",
    "testName" : "test2121"
  },
  "test7777" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7777() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    complex2.getReal();\n}",
    "testName" : "test7777"
  },
  "test7897" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7897() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n    double double1 = complex8.abs();\n    Complex complex13 = complex0.asin();\n    complex8.equals((Object) null);\n    complex3.subtract(complex8);\n    complex3.log();\n    double double2 = complex1.getArgument();\n    complex12.divide(complex10);\n    Complex complex14 = complex7.atan();\n    Complex complex15 = complex9.pow(complex4);\n    complex15.isNaN();\n}",
    "testName" : "test7897"
  },
  "test3333" : {
    "methodSignature" : "public Complex subtract(Complex rhs) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    Complex complex0 = new Complex(9.0, 2567.8858228083);\n    Complex complex1 = new Complex(1253.629671148, 9.0);\n    complex0.multiply(1253.629671148);\n    Complex complex2 = complex0.ONE.multiply(complex1);\n    Complex complex3 = complex0.cos();\n    complex3.createComplex(0.0, 1253.629671148);\n    complex0.isInfinite();\n    complex2.abs();\n    Complex complex4 = complex1.add(complex3);\n    complex4.ZERO.log();\n    complex1.subtract(complex3);\n}",
    "testName" : "test3333"
  },
  "test6565" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6565() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.sqrt();\n    Complex complex2 = complex0.I.add(complex1);\n    complex2.INF.atan();\n    complex0.getField();\n    complex1.NaN.divide(complex0);\n    Complex complex3 = complex1.cos();\n    Complex complex4 = complex3.divide(complex1);\n    complex4.NaN.pow((Complex) null);\n}",
    "testName" : "test6565"
  },
  "test7896" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7896() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n    double double1 = complex8.abs();\n    Complex complex13 = complex0.asin();\n    complex8.equals((Object) null);\n    complex3.subtract(complex8);\n    complex3.log();\n    double double2 = complex1.getArgument();\n    complex12.divide(complex10);\n    Complex complex14 = complex7.atan();\n    Complex complex15 = complex9.pow(complex4);\n    complex1.equals((Object) complex13);\n}",
    "testName" : "test7896"
  },
  "test055" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.INF.log();\n    Complex complex2 = complex1.ZERO.negate();\n    Complex complex3 = complex2.I.add(complex1);\n    Complex complex4 = complex1.INF.atan();\n    Complex complex5 = complex1.ONE.log();\n    Complex complex6 = complex4.I.createComplex(1.979872122629245E8, 1.979872122629245E8);\n    complex6.ONE.hashCode();\n    complex5.toString();\n    complex3.I.sqrt1z();\n    complex0.abs();\n    Complex complex7 = complex0.asin();\n    Complex complex8 = complex4.divide(complex5);\n    Object object0 = new Object();\n    complex7.equals(object0);\n    complex7.ZERO.atan();\n    Complex complex9 = complex7.sqrt1z();\n    Complex complex10 = complex5.sinh();\n    complex9.cosh();\n    Complex complex11 = complex7.subtract(complex5);\n    complex11.ONE.cosh();\n    complex3.readResolve();\n    Complex complex12 = complex7.divide(complex9);\n    complex12.NaN.hashCode();\n    complex12.ZERO.sinh();\n    complex11.ONE.asin();\n    complex12.ONE.hashCode();\n    complex5.getField();\n    complex8.abs();\n    complex11.sqrt1z();\n    complex3.negate();\n    complex10.getField();\n    complex6.sin();\n    complex11.nthRoot((-341));\n}",
    "testName" : "test055"
  },
  "test1717" : {
    "methodSignature" : "public Complex multiply(Complex rhs) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = new Complex((-1183.0), (-1183.0));\n    complex0.multiply(complex1);\n}",
    "testName" : "test1717"
  },
  "test4949" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.ZERO.createComplex((-7.44321345601866E-11), (-7.44321345601866E-11));\n    complex0.add(complex1);\n    Complex complex2 = complex0.I.negate();\n    complex2.INF.exp();\n    Complex complex3 = complex0.conjugate();\n    complex3.ZERO.abs();\n    complex1.isInfinite();\n    Complex complex4 = complex3.log();\n    complex0.ZERO.sin();\n    complex1.getReal();\n    complex1.INF.createComplex((-1244.0), 0.0);\n    complex1.createComplex(3833.732008, 3833.732008);\n    complex4.isNaN();\n}",
    "testName" : "test4949"
  },
  "test80108" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test80108() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.getArgument();\n    complex0.equals((Object) null);\n    complex0.getImaginary();\n    Complex complex1 = complex0.log();\n    complex1.INF.conjugate();\n    complex1.ONE.toString();\n    complex1.NaN.acos();\n    Complex complex2 = complex0.I.exp();\n    Complex complex3 = complex1.NaN.exp();\n    Complex complex4 = complex3.INF.cosh();\n    complex4.ZERO.toString();\n    complex4.log();\n    Complex complex5 = complex3.ONE.cosh();\n    complex5.INF.multiply(complex0);\n    complex1.ONE.createComplex(1.0, 1.5707963267948966);\n    complex0.createComplex(1.5707963267948966, 1.0);\n    complex2.nthRoot((-982));\n}",
    "testName" : "test80108"
  },
  "test2525" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.ZERO.negate();\n    Complex complex1 = complex0.exp();\n    complex0.isNaN();\n    complex1.isInfinite();\n    Complex complex2 = complex0.acos();\n    Complex complex3 = Complex.I;\n    Complex complex4 = complex0.INF.sin();\n    complex4.ONE.subtract(complex0);\n    complex2.pow(complex3);\n    complex2.INF.sqrt();\n    Complex complex5 = complex2.sinh();\n    complex5.ONE.hashCode();\n    complex1.sin();\n    // Undeclared exception!\n    complex1.nthRoot(8388608);\n}",
    "testName" : "test2525"
  },
  "test3737" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.INF;\n    Complex complex2 = complex1.ZERO.asin();\n    complex0.I.getArgument();\n    complex2.ONE.conjugate();\n    Complex complex3 = complex1.INF.sin();\n    Complex complex4 = complex0.INF.pow(complex1);\n    complex4.INF.hashCode();\n    complex0.nthRoot(17);\n    complex0.NaN.tanh();\n    complex0.nthRoot(1);\n    Complex complex5 = complex0.conjugate();\n    complex5.pow(complex3);\n    Complex complex6 = Complex.ONE;\n    complex0.equals(complex6);\n    complex6.sin();\n}",
    "testName" : "test3737"
  },
  "test6969" : {
    "methodSignature" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6969() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.ONE.sinh();\n    complex1.I.multiply(3.425518820814759);\n    complex0.asin();\n    complex0.sinh();\n    Complex complex2 = complex0.sqrt();\n    complex2.NaN.getField();\n    complex2.I.sin();\n    Complex complex3 = complex0.sin();\n    Complex complex4 = complex3.INF.divide(complex0);\n    complex4.ZERO.negate();\n    Complex complex5 = complex2.acos();\n    complex5.I.atan();\n    complex0.NaN.abs();\n    // Undeclared exception!\n    complex1.nthRoot(2141026880);\n}",
    "testName" : "test6969"
  },
  "test5353" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5353() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.I;\n    complex0.ONE.multiply(complex1);\n    complex0.ZERO.abs();\n    complex0.sinh();\n}",
    "testName" : "test5353"
  },
  "test7895" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7895() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n    double double1 = complex8.abs();\n    Complex complex13 = complex0.asin();\n    complex8.equals((Object) null);\n    complex3.subtract(complex8);\n    complex3.log();\n    double double2 = complex1.getArgument();\n    complex12.divide(complex10);\n    Complex complex14 = complex7.atan();\n    Complex complex15 = complex9.pow(complex4);\n    complex9.getReal();\n}",
    "testName" : "test7895"
  },
  "test79104" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79104() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex1.toString();\n    String string0 = complex0.INF.toString();\n    List<Complex> list0 = complex1.INF.nthRoot(17);\n    Complex complex3 = complex0.INF.acos();\n    Complex complex4 = complex3.NaN.sqrt();\n    Complex complex5 = complex1.INF.multiply((-869.3549889687644));\n    complex5.INF.exp();\n    Complex complex6 = complex0.ONE.multiply(0.7853981633974483);\n    Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);\n    Complex complex8 = complex0.negate();\n    Complex complex9 = complex8.ZERO.sinh();\n    complex8.getField();\n    complex9.hashCode();\n    complex9.getImaginary();\n}",
    "testName" : "test79104"
  },
  "test7894" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7894() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n    double double1 = complex8.abs();\n    Complex complex13 = complex0.asin();\n    complex8.equals((Object) null);\n    complex3.subtract(complex8);\n    complex3.log();\n    double double2 = complex1.getArgument();\n    complex12.divide(complex10);\n    Complex complex14 = complex7.atan();\n    complex14.getImaginary();\n}",
    "testName" : "test7894"
  },
  "test79103" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79103() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex1.toString();\n    String string0 = complex0.INF.toString();\n    List<Complex> list0 = complex1.INF.nthRoot(17);\n    Complex complex3 = complex0.INF.acos();\n    Complex complex4 = complex3.NaN.sqrt();\n    Complex complex5 = complex1.INF.multiply((-869.3549889687644));\n    complex5.INF.exp();\n    Complex complex6 = complex0.ONE.multiply(0.7853981633974483);\n    Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);\n    Complex complex8 = complex0.negate();\n    Complex complex9 = complex8.ZERO.sinh();\n    complex8.getField();\n    complex9.hashCode();\n    complex8.getReal();\n}",
    "testName" : "test79103"
  },
  "test4141" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.cosh();\n    Complex complex2 = complex1.ONE.sqrt1z();\n    complex0.ZERO.abs();\n    Complex complex3 = complex1.tanh();\n    complex3.NaN.conjugate();\n    complex0.hashCode();\n    complex1.hashCode();\n    complex1.asin();\n    complex2.getField();\n}",
    "testName" : "test4141"
  },
  "test7893" : {
    "methodSignature" : "public Complex divide(Complex rhs) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7893() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n    double double1 = complex8.abs();\n    Complex complex13 = complex0.asin();\n    complex8.equals((Object) null);\n    complex3.subtract(complex8);\n    complex3.log();\n    double double2 = complex1.getArgument();\n    complex12.divide(complex10);\n}",
    "testName" : "test7893"
  },
  "test7892" : {
    "methodSignature" : "public double getArgument()",
    "methodName" : "getArgument",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7892() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n    double double1 = complex8.abs();\n    Complex complex13 = complex0.asin();\n    complex8.equals((Object) null);\n    complex3.subtract(complex8);\n    complex3.log();\n    double double2 = complex1.getArgument();\n}",
    "testName" : "test7892"
  },
  "test79105" : {
    "methodSignature" : "public Complex multiply(double rhs)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79105() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex1.toString();\n    String string0 = complex0.INF.toString();\n    List<Complex> list0 = complex1.INF.nthRoot(17);\n    Complex complex3 = complex0.INF.acos();\n    Complex complex4 = complex3.NaN.sqrt();\n    Complex complex5 = complex1.INF.multiply((-869.3549889687644));\n    complex5.INF.exp();\n    Complex complex6 = complex0.ONE.multiply(0.7853981633974483);\n    Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);\n    Complex complex8 = complex0.negate();\n    Complex complex9 = complex8.ZERO.sinh();\n    complex8.getField();\n    complex9.hashCode();\n    Complex complex10 = complex0.sqrt();\n    complex4.multiply((double) 17);\n}",
    "testName" : "test79105"
  },
  "test7891" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7891() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n    double double1 = complex8.abs();\n    Complex complex13 = complex0.asin();\n    complex13.getImaginary();\n}",
    "testName" : "test7891"
  },
  "test7373" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7373() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.toString();\n    Complex complex1 = complex0.atan();\n    complex0.abs();\n    Complex complex2 = complex1.INF.multiply(Double.POSITIVE_INFINITY);\n    complex0.readResolve();\n    complex0.negate();\n    Complex complex3 = complex1.log();\n    Complex complex4 = complex0.ONE.log();\n    complex0.INF.toString();\n    complex3.isNaN();\n    Complex complex5 = complex1.ONE.negate();\n    complex5.ONE.tanh();\n    complex5.ONE.multiply(Double.POSITIVE_INFINITY);\n    Complex complex6 = complex3.cos();\n    complex3.ONE.exp();\n    complex6.ONE.sqrt();\n    complex3.nthRoot(2918);\n    complex2.log();\n    complex1.readResolve();\n    complex3.cosh();\n    complex4.isNaN();\n}",
    "testName" : "test7373"
  },
  "test7890" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7890() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex2.INF.exp();\n    complex2.getArgument();\n    Complex complex4 = (Complex) complex1.INF.readResolve();\n    Complex complex5 = complex1.INF.subtract(complex3);\n    Complex complex6 = complex2.cos();\n    Complex complex7 = complex3.ONE.atan();\n    Complex complex8 = complex0.cos();\n    Complex complex9 = complex6.I.multiply((-2753.17));\n    complex3.NaN.asin();\n    Complex complex10 = complex9.NaN.pow(complex2);\n    Complex complex11 = complex8.I.subtract(complex2);\n    Complex complex12 = complex11.INF.negate();\n    complex6.conjugate();\n    complex1.INF.tanh();\n    double double0 = complex1.abs();\n    double double1 = complex8.abs();\n}",
    "testName" : "test7890"
  },
  "test79107" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79107() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.INF.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex1.toString();\n    String string0 = complex0.INF.toString();\n    List<Complex> list0 = complex1.INF.nthRoot(17);\n    Complex complex3 = complex0.INF.acos();\n    Complex complex4 = complex3.NaN.sqrt();\n    Complex complex5 = complex1.INF.multiply((-869.3549889687644));\n    complex5.INF.exp();\n    Complex complex6 = complex0.ONE.multiply(0.7853981633974483);\n    Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);\n    Complex complex8 = complex0.negate();\n    Complex complex9 = complex8.ZERO.sinh();\n    complex8.getField();\n    complex9.hashCode();\n    Complex complex10 = complex0.sqrt();\n    complex4.multiply((double) 17);\n    complex0.equals((Object) complex10);\n}",
    "testName" : "test79107"
  },
  "test6161" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6161() throws Throwable {\n    Complex complex0 = new Complex(3270.9503103, 2.0);\n    complex0.I.hashCode();\n    Complex complex1 = complex0.asin();\n    complex1.I.sin();\n    complex0.tan();\n}",
    "testName" : "test6161"
  },
  "test7788" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7788() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n    Complex complex12 = complex3.sqrt1z();\n    Complex complex13 = complex5.exp();\n    Complex complex14 = complex3.log();\n    complex1.createComplex(3908.994616, 331.594212);\n    Complex complex15 = complex13.pow(complex8);\n    complex13.getReal();\n}",
    "testName" : "test7788"
  },
  "test7787" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7787() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n    Complex complex12 = complex3.sqrt1z();\n    Complex complex13 = complex5.exp();\n    Complex complex14 = complex3.log();\n    complex1.createComplex(3908.994616, 331.594212);\n    Complex complex15 = complex13.pow(complex8);\n    complex13.getImaginary();\n}",
    "testName" : "test7787"
  },
  "test7786" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7786() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n    Complex complex12 = complex3.sqrt1z();\n    Complex complex13 = complex5.exp();\n    Complex complex14 = complex3.log();\n    complex1.createComplex(3908.994616, 331.594212);\n    Complex complex15 = complex13.pow(complex8);\n}",
    "testName" : "test7786"
  },
  "test044" : {
    "methodSignature" : "public Complex add(Complex rhs) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.add((Complex) null);\n}",
    "testName" : "test044"
  },
  "test2929" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    Complex complex0 = new Complex((-2122.66), (-2122.66));\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex0.subtract(complex1);\n    complex2.NaN.sqrt1z();\n    Complex complex3 = complex2.INF.acos();\n    Complex complex4 = complex3.I.multiply(complex2);\n    Complex complex5 = complex2.exp();\n    Complex complex6 = complex1.pow(complex0);\n    Complex complex7 = complex0.exp();\n    Complex complex8 = complex5.pow(complex6);\n    Complex complex9 = complex2.ZERO.asin();\n    complex8.I.createComplex((-2122.66), (-2122.66));\n    complex8.INF.readResolve();\n    Complex complex10 = complex6.tan();\n    complex2.sin();\n    Complex complex11 = complex10.cosh();\n    complex8.log();\n    complex7.cosh();\n    Complex complex12 = complex9.multiply(complex2);\n    complex11.log();\n    complex1.getArgument();\n    complex12.log();\n    complex11.negate();\n    complex12.getImaginary();\n    Complex complex13 = Complex.NaN;\n    complex4.pow(complex13);\n    complex12.getReal();\n}",
    "testName" : "test2929"
  },
  "test7785" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7785() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n    Complex complex12 = complex3.sqrt1z();\n    Complex complex13 = complex5.exp();\n    Complex complex14 = complex3.log();\n    complex14.getReal();\n}",
    "testName" : "test7785"
  },
  "test7784" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7784() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n    Complex complex12 = complex3.sqrt1z();\n    Complex complex13 = complex5.exp();\n    Complex complex14 = complex3.log();\n    complex3.getReal();\n}",
    "testName" : "test7784"
  },
  "test7783" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7783() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n    Complex complex12 = complex3.sqrt1z();\n    Complex complex13 = complex5.exp();\n    Complex complex14 = complex3.log();\n    complex14.getImaginary();\n}",
    "testName" : "test7783"
  },
  "test7782" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7782() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n    Complex complex12 = complex3.sqrt1z();\n    complex12.getReal();\n}",
    "testName" : "test7782"
  },
  "test7781" : {
    "methodSignature" : "public Complex divide(Complex rhs) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7781() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n}",
    "testName" : "test7781"
  },
  "test7780" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7780() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = new Complex(331.594212, 0.0);\n    Complex complex2 = complex1.ONE.add(complex0);\n    Complex complex3 = complex0.I.multiply(complex1);\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex4.ONE.tan();\n    String string0 = complex0.NaN.toString();\n    Complex complex6 = complex0.sqrt();\n    complex0.createComplex(0.0, 1.0);\n    List<Complex> list0 = complex0.nthRoot(2645);\n    Complex complex7 = complex4.asin();\n    Complex complex8 = complex7.tanh();\n    complex7.abs();\n    Complex complex9 = complex0.subtract(complex7);\n    complex9.ONE.sqrt();\n    Complex complex10 = complex9.negate();\n    complex10.I.createComplex((-978.246), (-978.246));\n    Complex complex11 = complex7.divide(complex6);\n    complex6.getImaginary();\n}",
    "testName" : "test7780"
  }
}