{
  "test0000" : {
    "methodSignature" : "protected Complex createComplex(double realPart, double imaginaryPart)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    complex4.NaN.add(8.0E298);\n    Complex complex5 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex5.abs();\n    complex2.abs();\n    Complex complex6 = complex1.negate();\n    Complex complex7 = complex0.ONE.sqrt1z();\n    complex6.ZERO.toString();\n    complex5.nthRoot(3814);\n    Complex complex8 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    Complex complex9 = new Complex(3814, Double.NaN);\n    complex4.subtract(complex8);\n    complex8.sqrt();\n    complex6.acos();\n    complex7.atan();\n    complex7.conjugate();\n    complex5.atan();\n    complex2.atan();\n    complex5.createComplex(2.0, 6.283185307179586);\n}",
    "testName" : "test0000"
  },
  "test0088" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0088() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.abs();\n    Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    Complex complex2 = complex0.pow(complex1);\n    complex1.ONE.hashCode();\n    Complex complex3 = complex2.INF.pow(complex0);\n    Complex complex4 = complex2.cosh();\n    Complex complex5 = complex4.I.log();\n    Complex complex6 = complex2.ZERO.sqrt();\n    complex6.ZERO.conjugate();\n    complex4.INF.getField();\n    Complex.valueOf(Double.POSITIVE_INFINITY);\n    Complex complex7 = complex4.I.divide((-3123.98166223953));\n    complex2.ONE.log();\n    Complex complex8 = complex2.log();\n    Complex complex9 = complex3.NaN.atan();\n    complex9.ZERO.getArgument();\n    Complex complex10 = complex4.subtract(complex3);\n    complex10.ZERO.pow(Double.POSITIVE_INFINITY);\n    complex10.I.hashCode();\n    complex1.negate();\n    Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.997844754509471E-9);\n    Complex complex12 = complex7.exp();\n    complex12.ONE.negate();\n    complex4.add(complex5);\n    Complex complex13 = complex11.subtract(complex4);\n    Complex complex14 = complex13.acos();\n    complex14.ONE.cosh();\n    complex8.conjugate();\n    complex7.log();\n}",
    "testName" : "test0088"
  },
  "test107107" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107107() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = new Complex(125.255577);\n    Complex complex2 = Complex.ONE;\n    Complex.valueOf(125.255577, Double.NaN);\n    complex0.INF.pow(complex2);\n    complex0.pow(complex1);\n    Complex complex3 = complex0.ONE.subtract(complex0);\n    complex3.divide(0.0);\n    Complex.valueOf(0.0, 836.3305);\n    complex0.ZERO.pow(0.0);\n    Complex complex4 = Complex.I;\n    complex4.NaN.tanh();\n    Complex complex5 = complex0.multiply(complex4);\n    complex0.INF.tanh();\n    complex5.I.nthRoot((-472));\n}",
    "testName" : "test107107"
  },
  "test03636" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03636() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.ONE.toString();\n    Complex complex1 = new Complex((-2130.345), (-1145.30516837));\n    Complex complex2 = complex0.subtract(complex1);\n    complex2.ZERO.sinh();\n    complex1.getImaginary();\n    Complex complex3 = complex1.cosh();\n    complex3.tan();\n    Complex complex4 = complex3.cos();\n    Complex complex5 = complex3.acos();\n    complex5.sqrt();\n    complex2.exp();\n    complex4.getImaginary();\n}",
    "testName" : "test03636"
  },
  "test02424" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02424() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ZERO.log();\n    Complex complex2 = complex1.INF.conjugate();\n    complex0.hashCode();\n    Complex complex3 = complex1.add((-2.957007209750105E-8));\n    complex3.INF.getArgument();\n    Complex complex4 = complex0.tan();\n    complex4.ZERO.toString();\n    complex4.INF.getArgument();\n    Complex complex5 = complex4.acos();\n    complex1.sqrt();\n    Complex complex6 = Complex.valueOf((-970.8813176722667), (-970.8813176722667));\n    complex6.NaN.pow((-2.957007209750105E-8));\n    complex6.INF.log();\n    Complex complex7 = Complex.valueOf(0.167);\n    Complex complex8 = complex7.ZERO.divide(complex5);\n    Complex complex9 = complex1.sinh();\n    complex2.ONE.abs();\n    Complex complex10 = complex9.NaN.log();\n    complex1.tanh();\n    Complex.valueOf(3757.229241514609);\n    Complex complex11 = complex10.ZERO.cosh();\n    complex11.INF.subtract(0.7853981633974483);\n    Complex complex12 = complex1.sinh();\n    complex12.ZERO.conjugate();\n    Complex complex13 = complex12.NaN.negate();\n    Complex complex14 = complex2.conjugate();\n    complex14.divide(complex9);\n    Complex complex15 = complex9.tanh();\n    complex10.isInfinite();\n    complex15.cos();\n    complex13.multiply(0.7853981633974483);\n    complex12.getArgument();\n    complex8.isNaN();\n    complex14.getReal();\n}",
    "testName" : "test02424"
  },
  "test04848" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04848() throws Throwable {\n    double double0 = 2.718281828459045;\n    Complex complex0 = new Complex(2.718281828459045, 2.718281828459045);\n    Complex complex1 = Complex.valueOf(2.718281828459045, 0.0);\n    Complex complex2 = complex0.pow(complex1);\n    Complex complex3 = Complex.valueOf(2.718281828459045);\n    complex3.NaN.nthRoot(1827);\n    complex0.toString();\n    Complex complex4 = complex1.acos();\n    complex2.ZERO.createComplex(0.0, 6.283185307179586);\n    Complex.valueOf(2.718281828459045, 0.0);\n    complex2.subtract(0.0);\n    Complex complex5 = complex4.sinh();\n    complex5.ONE.nthRoot((-1));\n}",
    "testName" : "test04848"
  },
  "test01212" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);\n    Complex complex2 = complex1.exp();\n    Complex complex3 = complex1.ONE.pow(Double.POSITIVE_INFINITY);\n    Complex complex4 = complex3.pow(complex0);\n    Complex complex5 = complex2.ZERO.cosh();\n    Complex complex6 = complex3.I.tan();\n    complex6.I.hashCode();\n    Complex complex7 = complex0.ZERO.sin();\n    complex2.createComplex(1870.5758085, 0.0);\n    complex7.getArgument();\n    complex1.toString();\n    complex0.sin();\n    Complex complex8 = complex0.multiply((-3240.151965));\n    complex0.ONE.getField();\n    Complex complex9 = complex1.NaN.pow(complex0);\n    complex9.NaN.tanh();\n    complex4.getField();\n    Complex complex10 = complex7.log();\n    complex10.INF.atan();\n    Complex complex11 = complex8.atan();\n    complex11.ZERO.atan();\n    complex8.ZERO.getArgument();\n    Complex complex12 = complex7.sin();\n    complex12.NaN.divide(complex4);\n    Complex.valueOf((-2345.9582633378));\n    complex8.asin();\n    Complex.valueOf((-3240.151965));\n    complex12.hashCode();\n    complex5.nthRoot((-2148));\n}",
    "testName" : "test01212"
  },
  "test05656" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05656() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.sinh();\n    complex1.toString();\n    Complex complex2 = complex1.NaN.tanh();\n    complex2.ONE.sinh();\n    Complex complex3 = complex0.INF.tanh();\n    complex0.nthRoot(2377);\n    complex3.hashCode();\n    complex0.getReal();\n    Complex complex4 = Complex.valueOf(370.4486452049);\n    Complex.valueOf(0.0);\n    complex4.atan();\n    complex3.add(complex1);\n}",
    "testName" : "test05656"
  },
  "test06868" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06868() throws Throwable {\n    Complex complex0 = new Complex((-622.25), 1.0);\n    complex0.exp();\n}",
    "testName" : "test06868"
  },
  "test02828" : {
    "methodSignature" : "public double getArgument()",
    "methodName" : "getArgument",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02828() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, (-3735.8220878899638));\n    Complex complex1 = complex0.I.multiply((-2389.6805));\n    Complex complex2 = Complex.valueOf(2266.42684135932);\n    Complex complex3 = complex2.atan();\n    Complex complex4 = complex2.conjugate();\n    complex1.isNaN();\n    complex2.ZERO.divide(complex4);\n    Complex complex5 = complex2.exp();\n    Complex complex6 = complex3.atan();\n    complex5.isNaN();\n    complex6.readResolve();\n    complex1.exp();\n    Complex complex7 = complex4.multiply((-3735.8220878899638));\n    complex7.ZERO.nthRoot(1);\n    complex5.getArgument();\n}",
    "testName" : "test02828"
  },
  "test113113" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113113() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.I.sin();\n    complex1.INF.divide(complex0);\n    complex1.I.abs();\n    Complex complex2 = complex1.ONE.tan();\n    complex2.toString();\n    complex0.multiply(0.0);\n    complex1.getArgument();\n    Complex complex3 = complex1.createComplex(0.0, 1.5707963267948966);\n    Complex complex4 = complex1.multiply((-1837.5053));\n    complex1.getField();\n    Complex complex5 = complex4.INF.cos();\n    complex3.pow(0.0);\n    Complex complex6 = complex2.negate();\n    Complex complex7 = Complex.valueOf(0.0, 0.0);\n    Complex complex8 = complex6.ONE.multiply(complex7);\n    complex7.multiply((-1.0000003035640237));\n    complex8.NaN.cosh();\n    complex3.INF.pow(complex5);\n    complex8.cos();\n    complex6.nthRoot(0);\n}",
    "testName" : "test113113"
  },
  "test01616" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01616() throws Throwable {\n    Complex complex0 = Complex.I;\n    double double0 = 0.0;\n    Complex complex1 = complex0.ONE.pow(0.0);\n    int int0 = 3265;\n    complex1.INF.sqrt();\n    complex0.nthRoot(3265);\n    Complex complex2 = complex1.NaN.tanh();\n    Complex.valueOf(0.0);\n    complex2.NaN.pow(complex0);\n    Complex complex3 = complex1.I.atan();\n    complex3.NaN.subtract(5.650007086920087E-9);\n    Complex complex4 = complex0.multiply((-1761.203806667228));\n    // Undeclared exception!\n    complex4.nthRoot(3265);\n}",
    "testName" : "test01616"
  },
  "test08484" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08484() throws Throwable {\n    Complex complex0 = new Complex((-2289.0505632029985), (-36.04));\n    Complex complex1 = new Complex(630.736923883764, (-2289.0505632029985));\n    complex1.I.negate();\n    complex1.NaN.divide(complex0);\n    complex1.NaN.toString();\n    Complex complex2 = complex0.subtract(complex1);\n    complex2.isInfinite();\n    complex2.divide(0.0);\n}",
    "testName" : "test08484"
  },
  "test07272" : {
    "methodSignature" : "protected final Object readResolve()",
    "methodName" : "readResolve",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07272() throws Throwable {\n    Complex complex0 = Complex.valueOf((-284.5248018489));\n    complex0.ONE.createComplex((-119.711), (-284.5248018489));\n    complex0.readResolve();\n}",
    "testName" : "test07272"
  },
  "test04040" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04040() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.ONE.add(5265.00324922752);\n    Complex complex1 = Complex.valueOf(1772.2415, 1772.2415);\n    Complex complex2 = Complex.NaN;\n    Complex complex3 = complex2.divide(complex0);\n    complex1.ZERO.log();\n    complex3.INF.negate();\n    Complex complex4 = complex3.divide(complex0);\n    complex4.ONE.add(complex1);\n    complex0.subtract(complex2);\n    complex0.conjugate();\n    Complex complex5 = complex2.atan();\n    complex5.ZERO.getArgument();\n    complex5.ONE.sin();\n    complex4.getField();\n    complex4.tan();\n    complex4.getImaginary();\n}",
    "testName" : "test04040"
  },
  "test115121" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115121() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    Complex complex10 = complex9.sqrt();\n    Complex complex11 = complex7.acos();\n    Complex complex12 = complex8.atan();\n    complex12.getImaginary();\n}",
    "testName" : "test115121"
  },
  "test115120" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115120() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    Complex complex10 = complex9.sqrt();\n    Complex complex11 = complex7.acos();\n    complex11.getImaginary();\n}",
    "testName" : "test115120"
  },
  "test0011" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    Complex complex0 = new Complex((-2595.188104221), (-2595.188104221));\n    Complex complex1 = (Complex) complex0.ZERO.readResolve();\n    complex0.readResolve();\n    Complex complex2 = Complex.valueOf(0.0, (-2595.188104221));\n    Complex complex3 = Complex.valueOf(0.0, 0.0);\n    Complex complex4 = complex3.ONE.cosh();\n    Complex complex5 = complex3.add(0.0);\n    complex5.acos();\n    Complex complex6 = complex3.createComplex((-2595.188104221), (-1077.1));\n    complex6.divide(complex3);\n    complex0.getReal();\n    Complex complex7 = complex0.sinh();\n    complex7.INF.multiply((-2595.188104221));\n    Complex complex8 = complex2.sqrt1z();\n    complex2.ONE.pow((-2595.188104221));\n    complex4.cos();\n    complex3.NaN.abs();\n    Complex.valueOf((-2595.188104221));\n    Complex complex9 = complex8.subtract(complex3);\n    complex4.cos();\n    Complex complex10 = complex7.sinh();\n    complex10.createComplex(0.041666666666621166, 892.28875252206);\n    Complex complex11 = complex9.sinh();\n    complex10.subtract(Double.NaN);\n    Complex complex12 = new Complex(0.0);\n    complex4.divide(complex12);\n    Complex complex13 = complex7.divide(0.0);\n    complex4.divide(complex13);\n    complex12.acos();\n    complex4.getField();\n    complex11.isInfinite();\n    complex1.add((Complex) null);\n}",
    "testName" : "test0011"
  },
  "test0099" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    Complex complex0 = new Complex(8.251545029714408E-9, 0.8471270883830365);\n    Complex complex1 = complex0.INF.sqrt();\n    Complex complex2 = complex0.atan();\n    complex1.ONE.acos();\n    complex1.ONE.pow(8.251545029714408E-9);\n    complex0.INF.sqrt();\n    complex2.INF.toString();\n    Complex complex3 = Complex.valueOf(8.251545029714408E-9);\n    complex1.getField();\n    complex3.ONE.abs();\n    Complex complex4 = complex3.log();\n    complex4.getField();\n    complex0.readResolve();\n    complex4.tan();\n}",
    "testName" : "test0099"
  },
  "test09292" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09292() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.INF.subtract((Complex) null);\n}",
    "testName" : "test09292"
  },
  "test115123" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115123() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    Complex complex10 = complex9.sqrt();\n    Complex complex11 = complex7.acos();\n    Complex complex12 = complex8.atan();\n    complex8.conjugate();\n    Complex complex13 = complex6.atan();\n    Complex complex14 = complex2.atan();\n    complex14.getImaginary();\n}",
    "testName" : "test115123"
  },
  "test06060" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06060() throws Throwable {\n    Complex complex0 = Complex.valueOf(1956.6, 1956.6);\n    Complex complex1 = complex0.INF.subtract(Double.NaN);\n    Complex complex2 = complex0.tanh();\n    complex1.add(255.48228475795665);\n    Complex complex3 = Complex.valueOf(1956.6, 200.9600880936);\n    Complex complex4 = complex3.I.createComplex(89.18336117, 2119.06574035);\n    complex4.ZERO.multiply(complex2);\n    complex0.toString();\n    complex1.hashCode();\n    complex2.isNaN();\n}",
    "testName" : "test06060"
  },
  "test115122" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115122() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    Complex complex10 = complex9.sqrt();\n    Complex complex11 = complex7.acos();\n    Complex complex12 = complex8.atan();\n    complex8.conjugate();\n    Complex complex13 = complex6.atan();\n}",
    "testName" : "test115122"
  },
  "test03232" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03232() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.INF.abs();\n    Complex complex1 = complex0.sqrt();\n    Complex complex2 = complex1.NaN.add((-4935.6723));\n    Complex complex3 = complex1.ZERO.subtract(1704.3733911);\n    complex2.INF.abs();\n    Complex complex4 = complex3.INF.cos();\n    complex4.ONE.tan();\n    Complex complex5 = complex1.conjugate();\n    complex0.ZERO.subtract(complex2);\n    complex0.toString();\n    complex3.abs();\n    complex5.hashCode();\n    Complex complex6 = complex5.negate();\n    complex6.NaN.negate();\n    complex5.hashCode();\n    complex6.getReal();\n    complex4.add(Double.NaN);\n}",
    "testName" : "test03232"
  },
  "test08888" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08888() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.valueOf(1333.55);\n    complex0.add(complex1);\n    complex0.isInfinite();\n}",
    "testName" : "test08888"
  },
  "test102102" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102102() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.NaN.divide((-1284.45113536849));\n    complex0.asin();\n}",
    "testName" : "test102102"
  },
  "test02020" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02020() throws Throwable {\n    double double0 = 1015.7;\n    double double1 = Double.POSITIVE_INFINITY;\n    Complex complex0 = new Complex(1015.7, Double.POSITIVE_INFINITY);\n    complex0.NaN.pow(0.16666666666666666);\n    complex0.nthRoot((-909));\n}",
    "testName" : "test02020"
  },
  "test04444" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04444() throws Throwable {\n    Complex complex0 = Complex.valueOf(1.0, 1.0);\n    Complex complex1 = complex0.exp();\n    Complex complex2 = complex1.add(1.0);\n    Complex complex3 = complex0.log();\n    Complex complex4 = complex3.cos();\n    complex4.ZERO.tanh();\n    Complex complex5 = complex4.cos();\n    Complex complex6 = complex5.ONE.createComplex((-2932.941614), 0.0);\n    Complex complex7 = complex6.ONE.subtract((-2932.941614));\n    complex7.ZERO.multiply(complex1);\n    complex3.NaN.add((-2932.941614));\n    complex1.INF.createComplex(0.5000000000042687, 1.0);\n    complex3.nthRoot(1);\n    Complex complex8 = complex2.tan();\n    complex8.NaN.tan();\n    Complex complex9 = complex2.asin();\n    complex3.asin();\n    complex3.sin();\n    complex4.sin();\n    complex9.asin();\n}",
    "testName" : "test04444"
  },
  "test07676" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07676() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.log();\n    Complex complex2 = complex1.conjugate();\n    Complex complex3 = complex2.ZERO.subtract(complex1);\n    Complex complex4 = complex3.INF.createComplex((-1917.2566645), (-1917.2566645));\n    complex4.add(complex0);\n    complex3.I.pow((-480.12940172));\n    complex0.divide(complex2);\n    complex3.getImaginary();\n}",
    "testName" : "test07676"
  },
  "test05252" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05252() throws Throwable {\n    Complex complex0 = new Complex(0.9999997615814209);\n    complex0.NaN.exp();\n    complex0.ONE.asin();\n    complex0.conjugate();\n}",
    "testName" : "test05252"
  },
  "test09696" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09696() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.toString();\n    complex0.sqrt1z();\n    complex0.add(Double.NaN);\n}",
    "testName" : "test09696"
  },
  "test06464" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06464() throws Throwable {\n    Complex complex0 = Complex.valueOf(1179.18081, 1559.264433296705);\n    Complex complex1 = complex0.ONE.cos();\n    complex1.I.getArgument();\n    complex0.getArgument();\n    Complex complex2 = complex0.conjugate();\n    Complex complex3 = complex2.I.tanh();\n    Complex complex4 = complex0.I.createComplex(1.5707963267948966, 1179.18081);\n    complex3.NaN.getField();\n    Complex complex5 = Complex.I;\n    Complex complex6 = Complex.valueOf(1179.18081);\n    Complex complex7 = complex4.asin();\n    complex1.getImaginary();\n    complex6.sqrt();\n    complex7.tan();\n}",
    "testName" : "test06464"
  },
  "test110110" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110110() throws Throwable {\n    Complex complex0 = new Complex(1015.7, Double.POSITIVE_INFINITY);\n    complex0.NaN.pow(0.16666666666666666);\n    Complex complex1 = complex0.sin();\n    Complex complex2 = complex0.exp();\n    complex2.ZERO.cos();\n    Complex complex3 = complex0.pow(complex1);\n    complex0.INF.cosh();\n    Complex complex4 = complex3.tan();\n    complex4.NaN.getArgument();\n    Complex complex5 = complex1.createComplex((-50.36), Double.POSITIVE_INFINITY);\n    Complex complex6 = complex1.conjugate();\n    Complex complex7 = complex3.multiply(1015.7);\n    complex7.NaN.sqrt();\n    Complex complex8 = complex7.INF.acos();\n    complex3.abs();\n    Complex complex9 = complex5.asin();\n    complex9.NaN.cos();\n    Complex.valueOf(Double.NaN, 0.0);\n    complex0.ONE.asin();\n    complex6.nthRoot(47);\n    complex0.toString();\n    complex8.exp();\n    complex1.conjugate();\n    complex5.nthRoot((-1));\n}",
    "testName" : "test110110"
  },
  "test08080" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08080() throws Throwable {\n    Complex complex0 = Complex.valueOf((-670.0));\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex0.I.add(complex1);\n    complex0.asin();\n    Complex complex3 = complex0.tan();\n    complex3.INF.sin();\n    complex1.ZERO.negate();\n    Complex complex4 = complex3.log();\n    complex2.pow(complex4);\n    complex3.toString();\n}",
    "testName" : "test08080"
  },
  "test115125" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115125() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    Complex complex10 = complex9.sqrt();\n    Complex complex11 = complex7.acos();\n    Complex complex12 = complex8.atan();\n    complex8.conjugate();\n    Complex complex13 = complex6.atan();\n    Complex complex14 = complex2.atan();\n    complex6.createComplex(2.0, 5.861389442564046);\n    complex3.equals((Object) complex8);\n}",
    "testName" : "test115125"
  },
  "test115124" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115124() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    Complex complex10 = complex9.sqrt();\n    Complex complex11 = complex7.acos();\n    Complex complex12 = complex8.atan();\n    complex8.conjugate();\n    Complex complex13 = complex6.atan();\n    Complex complex14 = complex2.atan();\n    complex14.getReal();\n}",
    "testName" : "test115124"
  },
  "test0022" : {
    "methodSignature" : "public Complex divide(Complex divisor) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    Complex complex0 = new Complex((-12.397928415777582), (-12.397928415777582));\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.pow((-12.397928415777582));\n    Complex complex3 = complex2.ONE.tan();\n    Complex complex4 = complex1.tan();\n    complex0.ONE.abs();\n    Complex complex5 = complex4.multiply((-12.397928415777582));\n    Complex complex6 = complex5.ONE.atan();\n    complex6.INF.pow(complex5);\n    Complex complex7 = complex6.INF.tan();\n    complex7.INF.readResolve();\n    complex6.multiply(complex4);\n    complex4.multiply((-12.397928415777582));\n    complex3.conjugate();\n    complex5.sin();\n    complex3.isNaN();\n    complex0.divide(complex2);\n}",
    "testName" : "test0022"
  },
  "test105105" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105105() throws Throwable {\n    double double0 = (-3330.0);\n    Complex complex0 = new Complex((-3330.0), 2597.88);\n    Complex complex1 = Complex.INF;\n    Complex complex2 = complex0.subtract(complex1);\n    Complex complex3 = complex1.NaN.subtract(complex0);\n    complex3.ONE.multiply(complex1);\n    complex0.abs();\n    Complex complex4 = Complex.valueOf((-3330.0));\n    Complex complex5 = complex1.INF.divide(complex0);\n    complex5.INF.multiply(complex1);\n    complex1.divide(complex0);\n    complex2.exp();\n    complex3.I.tanh();\n    Complex complex6 = complex0.acos();\n    complex6.divide(complex1);\n    complex1.ONE.tan();\n    Complex complex7 = complex3.add(complex2);\n    complex7.I.tanh();\n    complex4.conjugate();\n    complex6.ONE.log();\n    double double1 = (-2.647648);\n    Complex complex8 = Complex.valueOf((-2.647648), (-1645.2035586420611));\n    complex8.I.negate();\n    int int0 = (-1968);\n    complex2.nthRoot((-1968));\n}",
    "testName" : "test105105"
  },
  "test01313" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.ZERO.negate();\n    Complex complex2 = complex0.log();\n    Complex complex3 = complex0.ZERO.sinh();\n    Complex complex4 = complex3.ZERO.conjugate();\n    Complex complex5 = complex2.INF.negate();\n    complex5.NaN.getField();\n    complex4.I.asin();\n    complex4.INF.getArgument();\n    Complex complex6 = new Complex(0.0);\n    complex6.NaN.getField();\n    Complex complex7 = complex2.I.divide(complex6);\n    complex6.I.abs();\n    Complex complex8 = complex7.ONE.conjugate();\n    complex0.readResolve();\n    Complex complex9 = complex1.I.sqrt1z();\n    complex2.hashCode();\n    complex0.atan();\n    complex7.ONE.negate();\n    Complex complex10 = complex1.multiply(2504.643931016);\n    complex4.INF.acos();\n    complex6.subtract(complex7);\n    complex4.divide(0.0);\n    complex9.conjugate();\n    complex10.isNaN();\n    complex0.atan();\n    complex8.divide(Double.NaN);\n}",
    "testName" : "test01313"
  },
  "test06969" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06969() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.INF;\n    complex1.NaN.exp();\n    Complex complex2 = complex0.subtract(complex1);\n    complex2.ZERO.multiply(Double.POSITIVE_INFINITY);\n    Complex complex3 = Complex.ONE;\n    Complex complex4 = complex0.multiply(complex3);\n    Complex complex5 = complex3.sinh();\n    complex5.getArgument();\n    Complex complex6 = complex4.negate();\n    complex6.ONE.multiply(Double.POSITIVE_INFINITY);\n    complex6.atan();\n}",
    "testName" : "test06969"
  },
  "test03737" : {
    "methodSignature" : "public Complex divide(Complex divisor) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03737() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.NaN.abs();\n    Complex complex1 = Complex.valueOf(Double.NaN);\n    complex0.ONE.add(0.99);\n    Complex complex2 = complex1.multiply(Double.NaN);\n    complex2.ZERO.cos();\n    Complex complex3 = complex2.NaN.subtract(0.0);\n    complex1.I.add(Double.NaN);\n    Complex complex4 = complex0.NaN.subtract(complex1);\n    complex4.ZERO.negate();\n    complex0.nthRoot(577);\n    Complex.valueOf(Double.NaN);\n    complex3.divide(complex1);\n}",
    "testName" : "test03737"
  },
  "test04545" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04545() throws Throwable {\n    Complex complex0 = new Complex((-1.0E-6), (-1.0E-6));\n    Complex complex1 = complex0.ZERO.atan();\n    complex0.NaN.hashCode();\n    Complex complex2 = complex0.add((-1.0E-6));\n    complex2.createComplex(0.0, (-1.0E-6));\n    Complex complex3 = complex1.tan();\n    Complex complex4 = complex3.INF.tanh();\n    complex4.sin();\n    complex4.NaN.cos();\n    Complex.valueOf(0.0, (-1.0E-6));\n    Complex complex5 = complex2.asin();\n    Complex complex6 = complex5.divide(complex3);\n    complex6.sqrt();\n}",
    "testName" : "test04545"
  },
  "test08989" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08989() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    complex0.I.cos();\n    Complex complex1 = complex0.NaN.tanh();\n    Complex complex2 = complex0.negate();\n    complex2.getArgument();\n    complex2.add(complex1);\n}",
    "testName" : "test08989"
  },
  "test02525" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02525() throws Throwable {\n    Complex complex0 = new Complex(2676.8242);\n    Complex complex1 = complex0.pow(908.2);\n    complex1.INF.acos();\n    Complex complex2 = complex1.tanh();\n    complex1.ONE.atan();\n    complex0.sqrt1z();\n    complex0.toString();\n    complex2.sqrt1z();\n    complex1.negate();\n}",
    "testName" : "test02525"
  },
  "test05757" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05757() throws Throwable {\n    Complex complex0 = Complex.valueOf(304.61329);\n    Complex complex1 = complex0.log();\n    complex0.NaN.asin();\n    complex1.ZERO.nthRoot(2765);\n    complex1.divide(304.61329);\n    complex0.getReal();\n}",
    "testName" : "test05757"
  },
  "test01717" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01717() throws Throwable {\n    Complex complex0 = new Complex((-940.0), (-940.0));\n    Complex complex1 = Complex.valueOf((-1105.325103098376));\n    Complex complex2 = complex0.INF.sqrt1z();\n    Complex complex3 = complex0.add(complex1);\n    Complex complex4 = complex1.ONE.exp();\n    complex0.sin();\n    complex1.exp();\n    Complex complex5 = complex4.tanh();\n    complex2.isInfinite();\n    complex2.hashCode();\n    Complex complex6 = complex4.NaN.conjugate();\n    complex0.toString();\n    complex5.ZERO.divide((-3545.1566946));\n    Complex complex7 = complex0.subtract(complex3);\n    complex7.ZERO.divide(complex6);\n    complex5.abs();\n    Complex complex8 = complex4.atan();\n    complex8.ONE.log();\n    Complex complex9 = Complex.valueOf((-3545.1566946));\n    complex2.divide(complex9);\n    complex1.sqrt();\n}",
    "testName" : "test01717"
  },
  "test111111" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111111() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.003, 0.003);\n    Complex complex1 = complex0.sqrt();\n    complex1.INF.pow(0.0);\n    Complex complex2 = Complex.valueOf(0.003);\n    complex0.INF.divide(0.0);\n    Complex complex3 = complex1.INF.atan();\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex3.INF.sqrt1z();\n    Complex complex6 = Complex.valueOf(0.003);\n    complex1.toString();\n    complex3.ZERO.multiply(complex2);\n    Complex complex7 = complex3.sinh();\n    complex7.asin();\n    complex6.toString();\n    Complex complex8 = complex6.divide(complex0);\n    complex5.subtract(0.0);\n    Complex complex9 = complex3.pow(complex6);\n    complex9.multiply(complex1);\n    complex9.INF.sin();\n    complex8.createComplex(0.0, 1776.746099015292);\n    complex4.isNaN();\n}",
    "testName" : "test111111"
  },
  "test116126" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116126() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0);\n    complex0.createComplex(0.0, 3593.98163);\n    complex0.cosh();\n    Complex complex1 = new Complex(0.0);\n    complex0.equals(complex1);\n}",
    "testName" : "test116126"
  },
  "test04949" : {
    "methodSignature" : "public Complex subtract(double subtrahend)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04949() throws Throwable {\n    Complex complex0 = Complex.valueOf(51.49210426066, 51.49210426066);\n    complex0.getReal();\n    Complex complex1 = Complex.valueOf(51.49210426066);\n    complex0.acos();\n    Complex.valueOf(51.49210426066);\n    Complex complex2 = complex1.add(51.49210426066);\n    complex2.pow(complex0);\n    complex2.nthRoot(3505);\n    complex0.subtract(51.49210426066);\n}",
    "testName" : "test04949"
  },
  "test02929" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02929() throws Throwable {\n    Complex complex0 = new Complex(0.19999998807907104);\n    Complex complex1 = complex0.subtract(0.19999998807907104);\n    complex1.INF.multiply(complex0);\n    complex0.ZERO.tan();\n    Complex complex2 = complex0.sqrt1z();\n    complex0.readResolve();\n    complex1.tan();\n    Complex complex3 = complex0.subtract(complex2);\n    Complex complex4 = complex0.sqrt();\n    complex4.toString();\n    complex3.add(complex4);\n}",
    "testName" : "test02929"
  },
  "test06161" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06161() throws Throwable {\n    Complex complex0 = new Complex(0.0);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.ZERO.pow(complex1);\n    Complex complex3 = complex2.ONE.log();\n    complex0.ONE.divide(complex1);\n    Complex complex4 = complex0.NaN.tan();\n    complex4.ONE.tanh();\n    complex0.abs();\n    Complex complex5 = complex1.cosh();\n    complex5.add(complex3);\n}",
    "testName" : "test06161"
  },
  "test07373" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07373() throws Throwable {\n    Complex complex0 = new Complex(2230.116, 6.283185307179586);\n    complex0.getImaginary();\n    complex0.NaN.negate();\n    Complex complex1 = Complex.valueOf(1.0);\n    complex1.conjugate();\n    complex0.getImaginary();\n}",
    "testName" : "test07373"
  },
  "test09393" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09393() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.ONE.log();\n    Complex complex2 = complex1.I.acos();\n    complex0.INF.abs();\n    Complex complex3 = complex0.tan();\n    Complex.valueOf(Double.NaN, 1269.4028396762067);\n    complex0.INF.pow((-2851.0975952218));\n    complex3.getField();\n    Complex complex4 = complex0.negate();\n    complex4.I.log();\n    complex4.divide(complex0);\n    complex2.getField();\n    complex3.divide(10.0);\n    complex3.sqrt();\n}",
    "testName" : "test09393"
  },
  "test0033" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN);\n    Complex complex1 = complex0.NaN.exp();\n    Complex complex2 = complex0.multiply(Double.NaN);\n    Complex complex3 = complex0.divide(Double.NaN);\n    complex0.NaN.getField();\n    complex3.NaN.readResolve();\n    Complex.valueOf(1533.4099858269, 1888.3755);\n    complex3.INF.abs();\n    Complex complex4 = complex3.acos();\n    Complex complex5 = complex4.I.cosh();\n    complex5.NaN.exp();\n    Complex complex6 = complex1.subtract(complex2);\n    complex6.ZERO.divide(Double.POSITIVE_INFINITY);\n    Object object0 = new Object();\n    complex2.equals(object0);\n    Complex complex7 = complex3.log();\n    complex7.add(1533.4099858269);\n}",
    "testName" : "test0033"
  },
  "test08181" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08181() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.ZERO.cosh();\n    complex1.I.pow(complex0);\n    complex0.hashCode();\n    complex0.abs();\n    Complex complex2 = complex0.log();\n    Complex complex3 = complex2.I.cos();\n    complex3.nthRoot(1);\n    complex0.atan();\n}",
    "testName" : "test08181"
  },
  "test07777" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07777() throws Throwable {\n    Complex complex0 = new Complex(393.960084492, 393.960084492);\n    complex0.NaN.abs();\n    Complex complex1 = complex0.pow(393.960084492);\n    complex0.toString();\n    complex1.isNaN();\n    Complex complex2 = complex1.divide(complex0);\n    complex2.INF.getField();\n    complex0.getImaginary();\n    Complex complex3 = complex1.subtract(393.960084492);\n    Complex.valueOf(0.0);\n    complex1.getField();\n    complex3.getField();\n}",
    "testName" : "test07777"
  },
  "test06565" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06565() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.pow(1283.164);\n    Complex.valueOf(1283.164, 1283.164);\n    complex1.INF.acos();\n    Complex complex2 = complex0.pow(complex1);\n    complex0.tan();\n    complex2.isInfinite();\n}",
    "testName" : "test06565"
  },
  "test03333" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03333() throws Throwable {\n    Complex complex0 = Complex.valueOf((-2098.980137684341));\n    Complex.valueOf(0.0, (-1884.806573799));\n    Complex complex1 = complex0.createComplex(3160.071260027, (-2098.980137684341));\n    complex1.NaN.tanh();\n    Complex complex2 = complex1.ZERO.divide(3160.071260027);\n    complex2.NaN.tanh();\n    Complex complex3 = Complex.ONE;\n    complex3.I.readResolve();\n    Complex complex4 = complex1.NaN.add(complex3);\n    complex4.sin();\n    Complex complex5 = complex1.ZERO.acos();\n    complex5.ZERO.log();\n    complex0.getReal();\n    complex2.INF.nthRoot(0);\n}",
    "testName" : "test03333"
  },
  "test100100" : {
    "methodSignature" : "public Complex subtract(double subtrahend)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100100() throws Throwable {\n    Complex complex0 = new Complex(4500.020425281427, 4500.020425281427);\n    complex0.INF.sqrt1z();\n    complex0.subtract(4500.020425281427);\n}",
    "testName" : "test100100"
  },
  "test04141" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04141() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.I.hashCode();\n    complex0.getReal();\n    Complex complex1 = complex0.negate();\n    Complex complex2 = complex1.tanh();\n    complex0.INF.pow(complex1);\n    Complex complex3 = complex1.createComplex(0.14982303977012634, 0.0);\n    complex1.ONE.divide(0.14982303977012634);\n    Complex complex4 = complex2.pow(0.0);\n    Complex complex5 = complex4.ZERO.sqrt();\n    complex2.hashCode();\n    Complex complex6 = complex3.sin();\n    Complex complex7 = complex6.sqrt();\n    complex7.ONE.sinh();\n    Complex complex8 = complex5.divide(2315.662);\n    complex8.I.sinh();\n    complex5.nthRoot(0);\n}",
    "testName" : "test04141"
  },
  "test09797" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09797() throws Throwable {\n    Complex complex0 = new Complex((-2304.035705716513), (-319.5240611725));\n    complex0.divide((-319.5240611725));\n}",
    "testName" : "test09797"
  },
  "test08585" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08585() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex0.subtract(complex1);\n    Complex complex3 = complex2.tan();\n    complex3.subtract(complex2);\n    complex3.abs();\n    complex3.tanh();\n}",
    "testName" : "test08585"
  },
  "test02121" : {
    "methodSignature" : "protected Complex createComplex(double realPart, double imaginaryPart)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02121() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex1.ZERO.cos();\n    Complex complex3 = complex0.sinh();\n    complex3.tan();\n    Complex complex4 = complex0.INF.multiply(complex1);\n    complex4.NaN.exp();\n    Complex complex5 = complex0.pow(722.206499088);\n    Complex complex6 = complex5.INF.divide(complex0);\n    complex6.NaN.pow(0.0);\n    Complex complex7 = complex0.tan();\n    Complex complex8 = complex7.NaN.negate();\n    complex2.ONE.add(722.206499088);\n    Complex complex9 = Complex.INF;\n    Complex complex10 = Complex.valueOf(722.206499088, 722.206499088);\n    Complex complex11 = complex2.multiply(complex9);\n    complex11.divide(12.0);\n    Complex complex12 = complex0.sqrt();\n    complex12.INF.acos();\n    Complex complex13 = Complex.valueOf(12.0);\n    complex13.NaN.sqrt1z();\n    complex12.ONE.tan();\n    complex0.ZERO.getArgument();\n    complex10.getImaginary();\n    complex9.I.abs();\n    complex5.toString();\n    complex2.readResolve();\n    Complex complex14 = complex11.pow(722.206499088);\n    Complex complex15 = complex14.divide(complex12);\n    complex15.I.sinh();\n    complex1.multiply(0.01745329052209854);\n    complex8.createComplex(332.609741714, 0.01745329052209854);\n}",
    "testName" : "test02121"
  },
  "test05353" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05353() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.I.sin();\n    Complex complex2 = complex0.tan();\n    complex2.log();\n    complex0.I.readResolve();\n    Complex complex3 = Complex.valueOf(0.0, 0.0);\n    Complex complex4 = complex0.ONE.divide(0.0);\n    complex4.getField();\n    Complex complex5 = complex3.tanh();\n    Complex complex6 = complex5.I.pow((-329.233591427587));\n    complex3.ZERO.negate();\n    Complex complex7 = complex5.createComplex(0.0, 0.0);\n    complex6.toString();\n    complex7.ZERO.sinh();\n    Complex complex8 = complex1.add(complex3);\n    complex8.NaN.sin();\n    complex6.sqrt();\n}",
    "testName" : "test05353"
  },
  "test108108" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108108() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.I;\n    Complex complex2 = complex0.divide(complex1);\n    complex2.INF.getField();\n    Complex complex3 = complex0.multiply(1.3245471311735498E-8);\n    Complex complex4 = Complex.valueOf(0.0);\n    complex4.ZERO.negate();\n    complex0.I.log();\n    Complex complex5 = complex3.negate();\n    complex1.ONE.abs();\n    Complex complex6 = complex0.sin();\n    Complex complex7 = Complex.valueOf(1.3245471311735498E-8, 1.3245471311735498E-8);\n    complex0.equals(complex7);\n    complex6.negate();\n    complex2.hashCode();\n    complex6.pow(1.3245471311735498E-8);\n    complex5.sinh();\n    complex3.nthRoot(0);\n}",
    "testName" : "test108108"
  },
  "test0044" : {
    "methodSignature" : "public Complex divide(Complex divisor) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    Complex complex0 = Complex.valueOf(3154.786305001714);\n    Complex complex1 = complex0.I.log();\n    Complex complex2 = complex1.INF.sin();\n    complex2.ONE.cosh();\n    complex1.ONE.log();\n    complex2.INF.cos();\n    complex1.ZERO.sqrt1z();\n    Complex complex3 = new Complex((-0.9993909506205958));\n    complex1.ZERO.add(complex3);\n    complex0.divide((Complex) null);\n}",
    "testName" : "test0044"
  },
  "test103103" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103103() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex1.log();\n    complex2.conjugate();\n}",
    "testName" : "test103103"
  },
  "test05858" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05858() throws Throwable {\n    Complex complex0 = new Complex(899.0, 899.0);\n    Complex complex1 = new Complex(899.0, 899.0);\n    Complex complex2 = complex0.multiply(complex1);\n    complex2.INF.acos();\n    complex0.getImaginary();\n    complex0.asin();\n    complex1.add(899.0);\n}",
    "testName" : "test05858"
  },
  "test03434" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03434() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.pow((-1580.0526));\n    Complex complex2 = complex1.ZERO.sin();\n    Complex complex3 = complex2.NaN.sqrt();\n    complex1.hashCode();\n    Complex complex4 = complex0.exp();\n    complex4.NaN.multiply((-1580.0526));\n    complex4.INF.abs();\n    Complex complex5 = complex0.negate();\n    complex0.subtract(2024.5786127379486);\n    Complex.valueOf(2.0, 4328.89478421);\n    complex3.tan();\n    complex2.isNaN();\n    complex2.readResolve();\n    complex5.equals(complex1);\n}",
    "testName" : "test03434"
  },
  "test02626" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02626() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    complex0.hashCode();\n    complex0.ONE.tan();\n    Complex complex1 = complex0.sin();\n    Complex complex2 = Complex.valueOf((-1637.31273183776), 0.0);\n    Complex complex3 = complex2.I.tan();\n    Complex.valueOf((-1.0));\n    complex3.NaN.log();\n    Complex.valueOf(0.0, (-1802.089548400548));\n    complex2.atan();\n    Complex complex4 = complex0.conjugate();\n    complex4.sqrt1z();\n    Complex.valueOf(0.0, (-1802.089548400548));\n    complex2.sqrt();\n    complex1.exp();\n}",
    "testName" : "test02626"
  },
  "test04646" : {
    "methodSignature" : "public Complex cosh()",
    "methodName" : "cosh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04646() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.getImaginary();\n    Complex complex1 = complex0.subtract((-1010.64271470606));\n    Complex complex2 = complex0.tan();\n    complex2.I.readResolve();\n    complex1.cosh();\n}",
    "testName" : "test04646"
  },
  "test07878" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07878() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.I.cosh();\n    complex0.NaN.tan();\n    complex0.add(0.0);\n    Complex complex1 = complex0.subtract(0.0);\n    complex1.INF.cosh();\n    complex1.cos();\n}",
    "testName" : "test07878"
  },
  "test01414" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.NaN.exp();\n    Complex complex2 = complex0.multiply(Double.NaN);\n    Complex complex3 = complex0.divide(Double.NaN);\n    complex0.NaN.getField();\n    complex3.NaN.readResolve();\n    Complex.valueOf(1533.4099858269, Double.NaN);\n    complex3.INF.abs();\n    Complex complex4 = complex3.acos();\n    Complex complex5 = complex4.I.cosh();\n    complex5.NaN.exp();\n    Complex complex6 = complex1.subtract(complex2);\n    complex6.ZERO.divide(Double.POSITIVE_INFINITY);\n    Object object0 = new Object();\n    complex2.equals(object0);\n    complex3.log();\n    complex6.equals(complex4);\n}",
    "testName" : "test01414"
  },
  "test03838" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03838() throws Throwable {\n    Complex complex0 = new Complex(696.202035286);\n    Complex complex1 = complex0.pow(696.202035286);\n    Complex complex2 = complex0.ZERO.pow(13.07);\n    Complex complex3 = complex1.I.acos();\n    complex0.INF.divide(complex3);\n    Complex complex4 = complex2.subtract(0.0);\n    complex1.NaN.asin();\n    Complex complex5 = complex1.ONE.negate();\n    Complex complex6 = complex5.INF.log();\n    Complex complex7 = complex6.createComplex(696.202035286, 13.07);\n    complex7.I.toString();\n    Complex complex8 = complex5.I.cos();\n    Complex complex9 = complex1.pow(696.202035286);\n    Complex complex10 = complex8.divide(0.0);\n    Complex complex11 = complex0.multiply(complex9);\n    complex10.sqrt1z();\n    Complex complex12 = complex4.cosh();\n    Complex complex13 = complex12.add(0.0);\n    complex4.equals(complex2);\n    complex2.log();\n    complex11.nthRoot(37);\n    complex13.exp();\n}",
    "testName" : "test03838"
  },
  "test01818" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01818() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.07692307692307693, 1.0);\n    Complex complex1 = complex0.cos();\n    Complex complex2 = complex1.log();\n    Complex complex3 = complex0.cosh();\n    complex1.NaN.divide((-2569.32327198));\n    Complex complex4 = complex0.NaN.pow(complex3);\n    complex4.ZERO.cos();\n    Complex complex5 = complex1.NaN.multiply(complex0);\n    Complex.valueOf(0.0);\n    Complex complex6 = complex2.subtract(0.0);\n    complex2.ZERO.toString();\n    Complex complex7 = complex6.tan();\n    Complex complex8 = complex0.divide(complex3);\n    complex3.NaN.sqrt1z();\n    complex1.tan();\n    complex7.toString();\n    complex0.asin();\n    complex8.subtract(complex3);\n    complex1.subtract(0.0);\n    complex5.abs();\n}",
    "testName" : "test01818"
  },
  "test05050" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05050() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.ZERO.tanh();\n    Complex complex1 = complex0.subtract(795.423452);\n    Complex complex2 = complex1.ZERO.add(complex0);\n    complex1.cos();\n    Complex complex3 = complex2.conjugate();\n    complex1.NaN.divide(795.423452);\n    complex1.log();\n    Complex complex4 = complex2.NaN.tan();\n    complex1.isNaN();\n    Complex complex5 = complex3.tanh();\n    complex5.ONE.getField();\n    complex0.cosh();\n    Complex.valueOf(795.423452);\n    Complex.valueOf(0.0, 795.423452);\n    complex4.subtract((-668.8104386325));\n    complex0.subtract(complex3);\n}",
    "testName" : "test05050"
  },
  "test09494" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09494() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN, Double.NaN);\n    Complex complex1 = complex0.atan();\n    complex1.negate();\n}",
    "testName" : "test09494"
  },
  "test06262" : {
    "methodSignature" : "protected Complex createComplex(double realPart, double imaginaryPart)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06262() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.divide((-1.0));\n    complex1.I.hashCode();\n    complex1.INF.abs();\n    Complex complex2 = complex0.NaN.asin();\n    complex2.NaN.subtract(complex0);\n    complex1.NaN.createComplex(0.0, Double.NaN);\n    Complex complex3 = complex2.NaN.tanh();\n    Complex complex4 = complex0.pow(complex1);\n    complex4.getField();\n    complex0.readResolve();\n    complex3.createComplex(Double.POSITIVE_INFINITY, (-4154.983845027));\n}",
    "testName" : "test06262"
  },
  "test08282" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08282() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.NaN.multiply((-0.7853981633974483));\n    complex0.ZERO.toString();\n    complex0.sqrt1z();\n    complex1.nthRoot(0);\n}",
    "testName" : "test08282"
  },
  "test07070" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07070() throws Throwable {\n    Complex complex0 = new Complex(0.0);\n    Complex complex1 = complex0.sqrt();\n    complex1.I.tanh();\n    complex1.ZERO.divide(0.0);\n    complex1.tanh();\n    complex1.toString();\n    complex0.multiply(0.0);\n}",
    "testName" : "test07070"
  },
  "test0055" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    complex0.ONE.pow(0.0);\n    complex0.toString();\n    Complex complex1 = null;\n    complex0.multiply((Complex) null);\n}",
    "testName" : "test0055"
  },
  "test05454" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05454() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    complex0.NaN.acos();\n    complex0.ONE.sin();\n    Complex complex1 = complex0.createComplex(0.0, 8.0E298);\n    complex1.tan();\n    Complex.valueOf((-744.0));\n    Complex.valueOf(0.0, 1.0);\n    complex0.cos();\n}",
    "testName" : "test05454"
  },
  "test09898" : {
    "methodSignature" : "public double getArgument()",
    "methodName" : "getArgument",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09898() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.getImaginary();\n    complex0.abs();\n    Complex complex1 = complex0.cosh();\n    complex1.getArgument();\n}",
    "testName" : "test09898"
  },
  "test06666" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06666() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.ONE.acos();\n    complex1.INF.divide((-448.3463));\n    Complex complex2 = complex0.asin();\n    Complex complex3 = complex2.INF.atan();\n    complex3.I.exp();\n    Complex complex4 = Complex.valueOf(770.0);\n    Complex complex5 = complex4.I.asin();\n    complex0.getField();\n    complex3.getArgument();\n    complex1.multiply(complex5);\n}",
    "testName" : "test06666"
  },
  "test03030" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03030() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    Complex complex1 = complex0.NaN.cos();\n    complex0.getReal();\n    complex0.readResolve();\n    complex1.NaN.sinh();\n    Complex complex2 = complex1.createComplex((-10.57), (-456.9455001));\n    Complex complex3 = Complex.valueOf((-10.57));\n    complex0.ONE.multiply(complex3);\n    complex3.INF.readResolve();\n    Complex complex4 = complex3.ONE.add(complex1);\n    complex4.I.toString();\n    complex2.equals(complex3);\n    complex1.tan();\n}",
    "testName" : "test03030"
  },
  "test08686" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08686() throws Throwable {\n    Complex complex0 = new Complex(0.3333333134651184, 2.0);\n    Complex complex1 = complex0.sqrt1z();\n    complex1.ZERO.getArgument();\n    Complex complex2 = complex1.sqrt1z();\n    complex1.I.atan();\n    complex2.getArgument();\n    Complex complex3 = complex1.multiply(0.0);\n    complex3.I.sqrt1z();\n    Complex complex4 = complex3.tanh();\n    complex3.equals(complex4);\n}",
    "testName" : "test08686"
  },
  "test02222" : {
    "methodSignature" : "public Complex pow(double x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02222() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.valueOf(0.0);\n    Complex complex2 = complex0.multiply(complex1);\n    Complex complex3 = complex2.ONE.asin();\n    Complex complex4 = complex0.ZERO.log();\n    complex1.I.subtract(0.0);\n    complex2.nthRoot(2302);\n    complex0.NaN.negate();\n    Complex complex5 = complex2.ONE.tan();\n    Complex complex6 = complex2.pow(complex1);\n    Complex complex7 = complex6.exp();\n    complex7.I.sin();\n    complex1.atan();\n    complex4.isInfinite();\n    complex5.ZERO.nthRoot(2302);\n    Complex complex8 = complex0.add(0.333333333333333);\n    complex8.abs();\n    Complex complex9 = complex3.NaN.divide(complex5);\n    Complex complex10 = Complex.valueOf(2459.070788, 2459.070788);\n    complex3.pow(complex10);\n    Complex.valueOf((-685.2963035897));\n    complex0.conjugate();\n    complex3.sqrt();\n    complex0.equals(complex9);\n    complex3.pow((-2372.332706601));\n}",
    "testName" : "test02222"
  },
  "test07474" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07474() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.I.readResolve();\n    Complex complex1 = complex0.cosh();\n    Complex complex2 = complex0.add(complex1);\n    Complex complex3 = complex1.negate();\n    complex2.cosh();\n    complex3.isNaN();\n    complex0.asin();\n    complex2.toString();\n    complex0.conjugate();\n}",
    "testName" : "test07474"
  },
  "test04242" : {
    "methodSignature" : "public Complex divide(Complex divisor) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04242() throws Throwable {\n    Complex complex0 = Complex.valueOf((-3939.65017517634));\n    Complex complex1 = Complex.I;\n    Complex.valueOf(1667.009475630678);\n    complex0.I.multiply(complex1);\n    Complex complex2 = complex0.sinh();\n    complex2.INF.hashCode();\n    complex2.divide(complex0);\n}",
    "testName" : "test04242"
  },
  "test106106" : {
    "methodSignature" : "public Complex sqrt1z()",
    "methodName" : "sqrt1z",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106106() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.I.acos();\n    Complex complex2 = complex1.INF.createComplex(924.0048839990227, (-2511.0));\n    Complex complex3 = complex0.NaN.asin();\n    Complex complex4 = complex3.sinh();\n    Complex complex5 = complex4.ZERO.pow(5.613391611251);\n    Complex complex6 = complex3.INF.tanh();\n    complex1.abs();\n    complex4.INF.subtract(2.85040095144011776E17);\n    Complex complex7 = complex3.NaN.subtract(complex1);\n    complex0.equals(\"\");\n    Complex.valueOf(Double.NaN);\n    Complex complex8 = complex1.I.cosh();\n    complex1.pow(1.0);\n    Complex complex9 = complex7.sinh();\n    complex0.subtract(complex2);\n    complex6.sin();\n    complex6.negate();\n    Complex complex10 = complex7.add(complex5);\n    complex8.tan();\n    Complex complex11 = complex9.subtract(complex10);\n    complex11.sqrt1z();\n}",
    "testName" : "test106106"
  },
  "test01010" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.isInfinite();\n    complex0.pow((Complex) null);\n}",
    "testName" : "test01010"
  },
  "test09090" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09090() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.ZERO.cos();\n    complex0.add(171.057);\n}",
    "testName" : "test09090"
  },
  "test114114" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114114() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.toString();\n    Complex complex1 = complex0.NaN.tan();\n    Complex complex2 = complex1.I.pow(complex0);\n    complex2.INF.hashCode();\n    Complex complex3 = complex0.pow((-1.0));\n    Complex complex4 = complex3.INF.tanh();\n    complex4.NaN.sqrt1z();\n    complex3.isInfinite();\n    complex3.atan();\n    complex4.getImaginary();\n}",
    "testName" : "test114114"
  },
  "test0066" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.INF.createComplex(0.0, (-2091.90184));\n    Complex complex2 = complex0.sqrt();\n    Complex complex3 = complex2.sin();\n    complex3.I.pow((-2091.90184));\n    Complex complex4 = complex2.INF.subtract(complex0);\n    complex2.ZERO.exp();\n    Complex complex5 = complex4.NaN.acos();\n    complex0.NaN.negate();\n    complex4.ZERO.getField();\n    complex0.abs();\n    Complex complex6 = complex4.INF.sin();\n    Complex complex7 = complex1.ZERO.conjugate();\n    complex5.ONE.getArgument();\n    Complex complex8 = complex0.atan();\n    complex8.I.subtract(complex7);\n    Complex complex9 = complex1.sqrt();\n    complex4.INF.log();\n    complex9.ZERO.log();\n    Complex complex10 = complex7.ONE.pow(complex9);\n    complex5.I.sqrt();\n    Complex complex11 = complex10.NaN.pow(complex5);\n    complex7.ONE.cos();\n    Complex complex12 = complex11.exp();\n    Complex complex13 = complex7.ZERO.sqrt1z();\n    complex1.getField();\n    Complex complex14 = complex7.sqrt1z();\n    complex14.log();\n    Object object0 = new Object();\n    complex12.equals(object0);\n    complex13.sin();\n    complex6.sqrt();\n}",
    "testName" : "test0066"
  },
  "test101101" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101101() throws Throwable {\n    Complex complex0 = new Complex((-5243.2324));\n    Complex complex1 = new Complex((-5243.2324));\n    complex1.I.sinh();\n    complex0.multiply(complex1);\n    Object object0 = new Object();\n    complex0.equals(object0);\n}",
    "testName" : "test101101"
  },
  "test109109" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109109() throws Throwable {\n    Complex complex0 = new Complex((-2595.188104221), (-2595.188104221));\n    complex0.ZERO.readResolve();\n    complex0.readResolve();\n    Complex complex1 = Complex.valueOf(0.0, (-2595.188104221));\n    Complex complex2 = Complex.valueOf(0.0, 0.0);\n    Complex complex3 = complex2.ONE.cosh();\n    Complex complex4 = complex2.add(0.0);\n    complex4.acos();\n    complex4.INF.asin();\n    Complex complex5 = complex2.createComplex((-2595.188104221), (-1077.1));\n    complex5.divide(complex2);\n    complex0.getReal();\n    Complex complex6 = complex0.sinh();\n    complex6.INF.multiply((-2595.188104221));\n    Complex complex7 = complex1.sqrt1z();\n    Complex.valueOf(0.0);\n    complex3.cos();\n    complex2.NaN.abs();\n    Complex.valueOf((-2595.188104221));\n    Complex complex8 = complex7.subtract(complex2);\n    complex3.cos();\n    Complex complex9 = complex6.sinh();\n    complex9.createComplex(0.041666666666621166, 892.28875252206);\n    Complex complex10 = complex8.sinh();\n    complex9.subtract(Double.NaN);\n    Complex complex11 = new Complex(0.0);\n    complex3.divide(complex11);\n    Complex complex12 = complex6.divide(0.0);\n    complex3.divide(complex12);\n    complex11.acos();\n    complex3.getField();\n    complex10.isInfinite();\n}",
    "testName" : "test109109"
  },
  "test04747" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04747() throws Throwable {\n    Complex complex0 = new Complex(2642.074901291758, 2642.074901291758);\n    Complex complex1 = new Complex((-4954.60382), (-4954.60382));\n    complex0.I.subtract(complex1);\n    Complex complex2 = Complex.ONE;\n    complex1.INF.divide(0.333333333333333);\n    Complex complex3 = complex0.subtract(complex2);\n    Complex complex4 = complex3.pow((-4954.60382));\n    complex1.abs();\n    complex2.divide(complex1);\n    complex1.divide((-371.7178401964143));\n    complex4.acos();\n}",
    "testName" : "test04747"
  },
  "test02323" : {
    "methodSignature" : "public Complex divide(Complex divisor) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02323() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = new Complex(71.2586727722403);\n    Complex complex2 = complex1.cos();\n    Complex complex3 = complex0.subtract(complex1);\n    complex1.ZERO.multiply(71.2586727722403);\n    Complex complex4 = complex3.NaN.subtract((-2549.782341));\n    complex1.isInfinite();\n    complex4.ONE.createComplex((-2549.782341), 2.0);\n    complex2.log();\n    Complex complex5 = complex0.cos();\n    complex5.exp();\n    complex1.divide(complex4);\n}",
    "testName" : "test02323"
  },
  "test05959" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05959() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.19999954120254515);\n    Complex complex1 = complex0.createComplex((-4676.564), 2421.231213461219);\n    Complex complex2 = complex1.divide(complex0);\n    complex1.NaN.nthRoot(1);\n    complex2.ONE.toString();\n    complex1.isInfinite();\n    complex1.log();\n}",
    "testName" : "test05959"
  },
  "test07979" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07979() throws Throwable {\n    Complex complex0 = new Complex((-877.79251249), 3085.66284);\n    Complex complex1 = complex0.ONE.sqrt();\n    Complex complex2 = complex1.I.conjugate();\n    Complex complex3 = complex2.ONE.add(complex0);\n    complex2.NaN.sqrt();\n    complex0.cos();\n    complex3.add((-82.968385));\n}",
    "testName" : "test07979"
  },
  "test01515" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01515() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.abs();\n    complex0.acos();\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex1.I.sin();\n    Complex complex3 = complex1.add(0.0);\n    Complex complex4 = complex3.I.cosh();\n    complex3.getReal();\n    complex1.log();\n    Complex complex5 = Complex.valueOf(0.0, 0.1111111111111111);\n    complex1.getArgument();\n    Complex complex6 = complex2.cosh();\n    Complex complex7 = complex1.divide(0.1111111111111111);\n    Complex complex8 = complex6.tan();\n    complex7.tanh();\n    complex5.getReal();\n    complex8.cosh();\n    complex2.atan();\n    Complex.valueOf(0.0);\n    complex4.hashCode();\n}",
    "testName" : "test01515"
  },
  "test06767" : {
    "methodSignature" : "public Complex sqrt1z()",
    "methodName" : "sqrt1z",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06767() throws Throwable {\n    Complex complex0 = new Complex(1.997844754509471E-9, 1227.35957140178);\n    Complex complex1 = complex0.ONE.atan();\n    complex0.abs();\n    Complex complex2 = complex0.asin();\n    Complex complex3 = complex2.I.multiply((-2573.8717282));\n    complex0.isInfinite();\n    Complex complex4 = complex2.pow(complex0);\n    Complex complex5 = complex1.cosh();\n    Complex.valueOf(1.997844754509471E-9, (-2573.8717282));\n    Complex complex6 = complex5.ONE.multiply(0.0);\n    complex6.INF.conjugate();\n    complex0.multiply(complex3);\n    Complex complex7 = complex2.cos();\n    Complex complex8 = complex7.exp();\n    complex8.NaN.multiply((-2573.8717282));\n    complex4.sqrt1z();\n}",
    "testName" : "test06767"
  },
  "test03535" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03535() throws Throwable {\n    Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);\n    Complex complex1 = Complex.valueOf(0.0, 1077.513167137088);\n    Complex.valueOf(0.0, 0.0);\n    complex1.tan();\n    Complex complex2 = complex1.INF.sin();\n    complex2.I.divide(0.0);\n    complex0.equals(complex1);\n}",
    "testName" : "test03535"
  },
  "test115116" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115116() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n}",
    "testName" : "test115116"
  },
  "test02727" : {
    "methodSignature" : "public Complex subtract(double subtrahend)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02727() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = new Complex(451.708049122054, 451.708049122054);\n    Complex complex2 = new Complex((-1603.4959993), 451.708049122054);\n    complex1.NaN.divide(complex2);\n    complex0.pow(complex1);\n    complex0.isInfinite();\n    Complex complex3 = complex0.cosh();\n    complex3.subtract(451.708049122054);\n}",
    "testName" : "test02727"
  },
  "test115118" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115118() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    complex4.getReal();\n}",
    "testName" : "test115118"
  },
  "test01919" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01919() throws Throwable {\n    Complex complex0 = Complex.valueOf((-1106.4407611427034), (-1830.56497));\n    Complex complex1 = complex0.ONE.atan();\n    Complex complex2 = complex1.createComplex(1300.335011281131, 0.0);\n    complex2.ONE.divide(complex1);\n    Complex complex3 = complex0.conjugate();\n    Complex complex4 = complex3.INF.conjugate();\n    complex4.I.log();\n    complex3.INF.sin();\n    Complex complex5 = complex0.sin();\n    complex5.ONE.pow(complex3);\n    Complex complex6 = complex0.multiply((-1830.56497));\n    Complex complex7 = complex6.INF.pow(1.176342548272881E-8);\n    complex7.sinh();\n    complex0.divide((-622.2));\n    complex1.isNaN();\n    Complex complex8 = complex3.divide((-1830.56497));\n    complex4.isInfinite();\n    complex8.createComplex((-1106.4407611427034), (-622.2));\n    complex6.getField();\n}",
    "testName" : "test01919"
  },
  "test115117" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115117() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    complex4.getImaginary();\n}",
    "testName" : "test115117"
  },
  "test03939" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03939() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.INF.negate();\n    Complex complex2 = new Complex(125.255577);\n    Complex complex3 = Complex.ONE;\n    Complex.valueOf(125.255577, Double.NaN);\n    complex0.INF.pow(complex3);\n    Complex complex4 = complex1.pow(complex2);\n    complex4.ZERO.add(complex2);\n    Complex complex5 = complex0.ONE.subtract(complex1);\n    complex5.divide(0.0);\n    Complex.valueOf(0.0, 836.3305);\n    complex0.ZERO.pow(0.0);\n    Complex complex6 = Complex.I;\n    complex6.NaN.tanh();\n    Complex complex7 = complex0.multiply(complex6);\n    complex0.INF.tanh();\n    complex7.I.nthRoot((-472));\n}",
    "testName" : "test03939"
  },
  "test115119" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115119() throws Throwable {\n    Complex complex0 = new Complex(3294198.0, 3294198.0);\n    Complex complex1 = complex0.I.conjugate();\n    Complex complex2 = complex0.ONE.divide(3294198.0);\n    List<Complex> list0 = complex2.ONE.nthRoot(3814);\n    Complex complex3 = Complex.NaN;\n    Complex complex4 = complex2.cos();\n    Complex complex5 = complex4.NaN.add(8.0E298);\n    Complex complex6 = complex0.subtract(complex3);\n    complex3.isNaN();\n    complex2.isInfinite();\n    complex6.abs();\n    complex2.abs();\n    Complex complex7 = complex1.negate();\n    Complex complex8 = complex0.ONE.sqrt1z();\n    String string0 = complex7.ZERO.toString();\n    complex6.nthRoot(3814);\n    Complex complex9 = Complex.I;\n    complex3.ZERO.add(3294198.0);\n    complex3.I.add(2.0);\n    complex4.subtract(complex9);\n    Complex complex10 = complex9.sqrt();\n    complex10.getImaginary();\n}",
    "testName" : "test115119"
  },
  "test09595" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09595() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.INF.atan();\n    Complex complex2 = complex0.ZERO.asin();\n    Complex complex3 = complex0.negate();\n    Complex complex4 = complex0.add(complex3);\n    complex2.add(complex3);\n    Complex complex5 = complex4.add(complex2);\n    complex5.divide((-202.3));\n    complex1.conjugate();\n    complex4.exp();\n}",
    "testName" : "test09595"
  },
  "test08383" : {
    "methodSignature" : "public static Complex valueOf(double realPart, double imaginaryPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08383() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.I.multiply(0.5);\n    complex0.toString();\n    Complex.valueOf(0.11764700710773468, 0.11764700710773468);\n}",
    "testName" : "test08383"
  },
  "test05151" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05151() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.ZERO.divide(0.0);\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex1.I.cosh();\n    complex1.ZERO.getArgument();\n    complex2.multiply((-1433.800400190024));\n    Complex complex3 = complex1.subtract(complex0);\n    complex3.ZERO.acos();\n    Complex.valueOf((-1719.8124983792463), (-1719.8124983792463));\n    complex1.sinh();\n    complex3.atan();\n    complex1.sin();\n}",
    "testName" : "test05151"
  },
  "test0077" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.I.asin();\n    Complex complex2 = complex0.ONE.multiply(complex1);\n    Complex.valueOf(2.7553817452272217E-6);\n    double double0 = 12.0;\n    Complex complex3 = complex2.ZERO.createComplex(12.0, 12.0);\n    complex3.sqrt();\n    complex3.I.readResolve();\n    Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);\n    Complex complex5 = complex4.I.sin();\n    Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 12.0);\n    complex4.NaN.subtract(complex6);\n    complex4.subtract(complex5);\n    complex5.NaN.pow(complex6);\n    complex6.NaN.log();\n    complex0.ONE.readResolve();\n    complex0.ONE.readResolve();\n    complex4.tan();\n    complex0.abs();\n    Complex complex7 = complex4.pow(1014.1582587727);\n    complex7.subtract((Complex) null);\n}",
    "testName" : "test0077"
  },
  "test07171" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07171() throws Throwable {\n    Complex complex0 = new Complex(0.16666666666666666);\n    complex0.I.createComplex(0.16666666666666666, 0.16666666666666666);\n    Complex.valueOf(0.16666666666666666, 6.123233995736766E-17);\n    Complex complex1 = complex0.add(0.0);\n    complex1.tanh();\n}",
    "testName" : "test07171"
  },
  "test04343" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04343() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.add(1618.51707594719);\n    Complex complex2 = complex1.conjugate();\n    Complex complex3 = complex1.tanh();\n    complex2.multiply(1.2599210498948732);\n    complex3.cos();\n    complex3.log();\n    complex2.tan();\n}",
    "testName" : "test04343"
  },
  "test09999" : {
    "methodSignature" : "protected final Object readResolve()",
    "methodName" : "readResolve",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09999() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.negate();\n    complex1.NaN.abs();\n    Complex complex2 = complex1.add(complex0);\n    complex2.atan();\n    complex0.readResolve();\n}",
    "testName" : "test09999"
  },
  "test104104" : {
    "methodSignature" : "public Complex pow(double x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104104() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.add(0.0);\n    complex1.I.pow(0.0);\n    complex0.sqrt1z();\n    complex0.pow((-472.86906330773));\n}",
    "testName" : "test104104"
  },
  "test08787" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08787() throws Throwable {\n    Complex complex0 = Complex.valueOf((-1361.4611261272), 0.0);\n    Complex complex1 = Complex.NaN;\n    complex0.pow(complex1);\n}",
    "testName" : "test08787"
  },
  "test05555" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05555() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.ZERO;\n    complex1.abs();\n    complex1.ONE.nthRoot(2097);\n    complex0.INF.multiply(complex1);\n    Complex complex2 = complex0.INF.exp();\n    complex2.ZERO.hashCode();\n    Complex complex3 = complex0.tanh();\n    Complex complex4 = complex3.sqrt();\n    Complex complex5 = complex0.sin();\n    Complex complex6 = complex0.asin();\n    complex6.hashCode();\n    complex6.add(complex4);\n    Complex complex7 = complex5.pow(complex2);\n    complex7.NaN.cosh();\n    complex0.log();\n}",
    "testName" : "test05555"
  },
  "test01111" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.ZERO.atan();\n    Complex complex1 = Complex.NaN;\n    complex1.INF.tanh();\n    Complex complex2 = Complex.valueOf(0.19999954120254515, 0.19999954120254515);\n    complex1.NaN.pow(complex2);\n    complex1.NaN.toString();\n    Complex complex3 = complex0.INF.sqrt();\n    complex0.ZERO.subtract(complex1);\n    Complex complex4 = complex0.subtract((-2490.7));\n    Complex complex5 = complex4.INF.tanh();\n    Complex complex6 = complex0.pow(Double.POSITIVE_INFINITY);\n    complex5.NaN.conjugate();\n    complex4.sin();\n    Complex.valueOf((-616.3680538715619));\n    complex5.add(Double.POSITIVE_INFINITY);\n    complex5.I.negate();\n    Complex complex7 = complex3.tan();\n    Complex complex8 = complex6.exp();\n    Complex complex9 = complex5.log();\n    complex7.getImaginary();\n    complex4.getReal();\n    complex8.readResolve();\n    Complex complex10 = complex9.cos();\n    Complex complex11 = complex10.ONE.multiply(Double.NaN);\n    complex2.cos();\n    complex11.abs();\n}",
    "testName" : "test01111"
  },
  "test06363" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06363() throws Throwable {\n    Complex complex0 = new Complex(231.772612109326);\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex1.INF.cosh();\n    complex2.NaN.conjugate();\n    Complex complex3 = complex0.I.pow((-2836.58));\n    complex0.ZERO.pow(complex1);\n    complex3.ONE.negate();\n    complex0.abs();\n    complex0.getImaginary();\n    complex3.subtract(complex0);\n    Complex complex4 = complex3.cosh();\n    complex4.getField();\n}",
    "testName" : "test06363"
  },
  "test03131" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03131() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.ONE.sqrt1z();\n    complex0.readResolve();\n    complex0.I.multiply(complex1);\n    complex0.nthRoot(7);\n    Complex complex2 = complex0.sqrt1z();\n    complex0.multiply((double) 7);\n    complex1.pow((-2956.314));\n    Complex complex3 = complex2.cos();\n    complex3.INF.nthRoot(7);\n    complex3.conjugate();\n    Complex.valueOf((-2956.314));\n    complex2.getReal();\n}",
    "testName" : "test03131"
  },
  "test07575" : {
    "methodSignature" : "public Complex cosh()",
    "methodName" : "cosh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07575() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.asin();\n    complex0.cosh();\n}",
    "testName" : "test07575"
  },
  "test09191" : {
    "methodSignature" : "public double getArgument()",
    "methodName" : "getArgument",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09191() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.getImaginary();\n    complex0.abs();\n    Complex complex1 = complex0.cosh();\n    complex1.INF.subtract(1.0);\n    complex1.getArgument();\n}",
    "testName" : "test09191"
  },
  "test112112" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112112() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.ONE.getArgument();\n    Complex complex1 = complex0.divide(0.2);\n    Complex complex2 = complex1.INF.cos();\n    complex2.readResolve();\n    Complex complex3 = complex0.pow(complex1);\n    complex3.subtract(complex2);\n    Complex complex4 = Complex.valueOf(0.2);\n    Complex complex5 = complex4.ONE.sqrt1z();\n    complex5.ZERO.log();\n    complex5.ZERO.sin();\n    Complex complex6 = Complex.valueOf(0.0, (-642.02215));\n    complex2.ZERO.multiply(complex0);\n    Complex complex7 = complex2.add(complex0);\n    complex7.I.abs();\n    Complex complex8 = complex7.INF.createComplex((-1211.0), 0.0);\n    complex6.toString();\n    Complex complex9 = complex6.pow(6.283185307179586);\n    complex9.INF.abs();\n    Complex complex10 = Complex.valueOf((-2161.582167348243), 1772.9070940932968);\n    Complex complex11 = complex10.ZERO.createComplex((-1211.0), Double.POSITIVE_INFINITY);\n    Complex complex12 = complex6.NaN.pow(complex0);\n    Complex complex13 = complex12.ONE.cos();\n    Object object0 = complex3.readResolve();\n    complex1.equals(object0);\n    Complex complex14 = complex8.conjugate();\n    complex14.divide(1766.39814103);\n    complex11.sqrt();\n    complex4.subtract(1772.9070940932968);\n    complex13.subtract(0.2);\n    complex2.conjugate();\n}",
    "testName" : "test112112"
  }
}