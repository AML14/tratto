focal_method,test_prefix,docstring
"public boolean isSquare() {
    return (this.getColumnDimension() == this.getRowDimension());
}","public void test000() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 920.529;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    assertTrue(realMatrixImpl0.isSquare());
}","/**
 * @return true if the matrix is square (rowDimension = columnDimension)
 */"
"public double getNorm() {
    double maxColSum = 0;
    for (int col = 0; col < this.getColumnDimension(); col++) {
        double sum = 0;
        for (int row = 0; row < this.getRowDimension(); row++) {
            sum += Math.abs(data[row][col]);
        }
        maxColSum = Math.max(maxColSum, sum);
    }
    return maxColSum;
}","public void test001() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 920.529;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    assertEquals(920.529, realMatrixImpl0.getNorm(), 0.01);
}","/**
 * @return norm
 */"
"public double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {
    final int nRows = this.getRowDimension();
    if (b.length != nRows) {
        throw new IllegalArgumentException(""constant vector has wrong length"");
    }
    final RealMatrix bMatrix = new RealMatrixImpl(b);
    final double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();
    final double[] out = new double[nRows];
    for (int row = 0; row < nRows; row++) {
        out[row] = solution[row][0];
    }
    return out;
}","public void test002() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 920.529;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
    assertArrayEquals(new double[] { 1.0 }, doubleArray1, 0.01);
}","/**
 * Returns a matrix of (column) solution vectors for linear systems with
 * coefficient matrix = this and constant vectors = columns of
 * <code>b</code>.
 *
 * @param b  array of constant forming RHS of linear systems to
 * to solve
 * @return solution array
 * @throws IllegalArgumentException if this.rowDimension != row dimension
 * @throws InvalidMatrixException if this matrix is not square or is singular
 */"
"double getNorm();","public void test003() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 920.529;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.inverse();
    assertEquals(0.0010863318809076086, realMatrix0.getNorm(), 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">
 * maximum absolute row sum norm</a> of the matrix.
 *
 * @return norm
 */"
"public RealMatrix copy() {
    return new RealMatrixImpl(copyOut(), false);
}","public void test014() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
    // Undeclared exception!
    try {
        realMatrixImpl0.copy();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Create a new RealMatrix which is a copy of this.
 *
 * @return  the cloned matrix
 */"
"public RealMatrix inverse() throws InvalidMatrixException {
    return solve(MatrixUtils.createRealIdentityMatrix(getRowDimension()));
}","public void test025() throws Throwable {
    double[][] doubleArray0 = new double[4][1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.inverse();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // coefficient matrix is not square
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the inverse matrix if this matrix is invertible.
 *
 * @return inverse matrix
 * @throws InvalidMatrixException if this is not invertible
 */"
"protected int[] getPermutation() {
    final int[] out = new int[permutation.length];
    System.arraycopy(permutation, 0, out, 0, permutation.length);
    return out;
}","public void test036() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    // Undeclared exception!
    try {
        realMatrixImpl0.getPermutation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the permutation associated with the lu decomposition.
 * The entries of the array represent a permutation of the numbers 0, ... , nRows - 1.
 * <p>
 * Example:
 * permutation = [1, 2, 0] means current 2nd row is first, current third row is second
 * and current first row is last.</p>
 * <p>
 * Returns a fresh copy of the array.</p>
 *
 * @return the permutation
 */"
"public RealMatrixImpl(int rowDimension, int columnDimension) {
    if (rowDimension <= 0 || columnDimension <= 0) {
        throw new IllegalArgumentException(""row and column dimensions must be postive"");
    }
    data = new double[rowDimension][columnDimension];
    lu = null;
}","public void test047() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = null;
    try {
        realMatrixImpl0 = new RealMatrixImpl((-1), (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row and column dimensions must be postive
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Create a new RealMatrix with the supplied row and column dimensions.
 *
 * @param rowDimension  the number of rows in the new matrix
 * @param columnDimension  the number of columns in the new matrix
 * @throws IllegalArgumentException if row or column dimension is not
 *  positive
 */"
"double getNorm();","public void test058() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(31, 31);
    RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(31);
    assertEquals(961.0, realMatrix0.getNorm(), 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">
 * maximum absolute row sum norm</a> of the matrix.
 *
 * @return norm
 */"
"int getColumnDimension();","public void test059() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(31, 31);
    RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(31);
    assertEquals(31, realMatrix0.getColumnDimension());
}","/**
 * Returns the number of columns in the matrix.
 *
 * @return columnDimension
 */"
"public RealMatrixImpl(int rowDimension, int columnDimension) {
    if (rowDimension <= 0 || columnDimension <= 0) {
        throw new IllegalArgumentException(""row and column dimensions must be postive"");
    }
    data = new double[rowDimension][columnDimension];
    lu = null;
}","public void test0610() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = null;
    try {
        realMatrixImpl0 = new RealMatrixImpl(2145198021, (-4));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row and column dimensions must be postive
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Create a new RealMatrix with the supplied row and column dimensions.
 *
 * @param rowDimension  the number of rows in the new matrix
 * @param columnDimension  the number of columns in the new matrix
 * @throws IllegalArgumentException if row or column dimension is not
 *  positive
 */"
"public double getNorm() {
    double maxColSum = 0;
    for (int col = 0; col < this.getColumnDimension(); col++) {
        double sum = 0;
        for (int row = 0; row < this.getRowDimension(); row++) {
            sum += Math.abs(data[row][col]);
        }
        maxColSum = Math.max(maxColSum, sum);
    }
    return maxColSum;
}","public void test0711() throws Throwable {
    double[][] doubleArray0 = new double[4][1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, true);
    double double0 = realMatrixImpl0.getNorm();
    assertEquals(0.0, double0, 0.01);
}","/**
 * @return norm
 */"
"public RealMatrixImpl(double[][] d, boolean copyArray) {
    if (copyArray) {
        copyIn(d);
    } else {
        if (d == null) {
            throw new NullPointerException();
        }
        final int nRows = d.length;
        if (nRows == 0) {
            throw new IllegalArgumentException(""Matrix must have at least one row."");
        }
        final int nCols = d[0].length;
        if (nCols == 0) {
            throw new IllegalArgumentException(""Matrix must have at least one column."");
        }
        for (int r = 1; r < nRows; r++) {
            if (d[r].length != nCols) {
                throw new IllegalArgumentException(""All input rows must have the same length."");
            }
        }
        data = d;
    }
    lu = null;
}","public void test0812() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = null;
    try {
        realMatrixImpl0 = new RealMatrixImpl((double[][]) null, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Create a new RealMatrix using the input array as the underlying
 * data array.
 * <p>If an array is built specially in order to be embedded in a
 * RealMatrix and not used directly, the <code>copyArray</code> may be
 * set to <code>false</code. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</p>
 * @param d data for new matrix
 * @param copyArray if true, the input array will be copied, otherwise
 * it will be referenced
 * @throws IllegalArgumentException if <code>d</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>d</code> is null
 * @see #RealMatrixImpl(double[][])
 */"
"public RealMatrix inverse() throws InvalidMatrixException {
    return solve(MatrixUtils.createRealIdentityMatrix(getRowDimension()));
}","public void test0913() throws Throwable {
    double[] doubleArray0 = new double[0];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    // Undeclared exception!
    try {
        realMatrixImpl0.inverse();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Matrix must have at least one row.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the inverse matrix if this matrix is invertible.
 *
 * @return inverse matrix
 * @throws InvalidMatrixException if this is not invertible
 */"
"public RealMatrixImpl(double[][] d, boolean copyArray) {
    if (copyArray) {
        copyIn(d);
    } else {
        if (d == null) {
            throw new NullPointerException();
        }
        final int nRows = d.length;
        if (nRows == 0) {
            throw new IllegalArgumentException(""Matrix must have at least one row."");
        }
        final int nCols = d[0].length;
        if (nCols == 0) {
            throw new IllegalArgumentException(""Matrix must have at least one column."");
        }
        for (int r = 1; r < nRows; r++) {
            if (d[r].length != nCols) {
                throw new IllegalArgumentException(""All input rows must have the same length."");
            }
        }
        data = d;
    }
    lu = null;
}","public void test1014() throws Throwable {
    double[][] doubleArray0 = new double[1][0];
    RealMatrixImpl realMatrixImpl0 = null;
    try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Matrix must have at least one column.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Create a new RealMatrix using the input array as the underlying
 * data array.
 * <p>If an array is built specially in order to be embedded in a
 * RealMatrix and not used directly, the <code>copyArray</code> may be
 * set to <code>false</code. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</p>
 * @param d data for new matrix
 * @param copyArray if true, the input array will be copied, otherwise
 * it will be referenced
 * @throws IllegalArgumentException if <code>d</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>d</code> is null
 * @see #RealMatrixImpl(double[][])
 */"
"public RealMatrixImpl(double[][] d, boolean copyArray) {
    if (copyArray) {
        copyIn(d);
    } else {
        if (d == null) {
            throw new NullPointerException();
        }
        final int nRows = d.length;
        if (nRows == 0) {
            throw new IllegalArgumentException(""Matrix must have at least one row."");
        }
        final int nCols = d[0].length;
        if (nCols == 0) {
            throw new IllegalArgumentException(""Matrix must have at least one column."");
        }
        for (int r = 1; r < nRows; r++) {
            if (d[r].length != nCols) {
                throw new IllegalArgumentException(""All input rows must have the same length."");
            }
        }
        data = d;
    }
    lu = null;
}","public void test1115() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[][] doubleArray1 = new double[3][6];
    doubleArray1[0] = doubleArray0;
    RealMatrixImpl realMatrixImpl0 = null;
    try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray1, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // All input rows must have the same length.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Create a new RealMatrix using the input array as the underlying
 * data array.
 * <p>If an array is built specially in order to be embedded in a
 * RealMatrix and not used directly, the <code>copyArray</code> may be
 * set to <code>false</code. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</p>
 * @param d data for new matrix
 * @param copyArray if true, the input array will be copied, otherwise
 * it will be referenced
 * @throws IllegalArgumentException if <code>d</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>d</code> is null
 * @see #RealMatrixImpl(double[][])
 */"
"public RealMatrix add(RealMatrix m) throws IllegalArgumentException {
    try {
        return add((RealMatrixImpl) m);
    } catch (ClassCastException cce) {
        final int rowCount = getRowDimension();
        final int columnCount = getColumnDimension();
        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
            throw new IllegalArgumentException(""matrix dimension mismatch"");
        }
        final double[][] outData = new double[rowCount][columnCount];
        for (int row = 0; row < rowCount; row++) {
            final double[] dataRow = data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < columnCount; col++) {
                outDataRow[col] = dataRow[col] + m.getEntry(row, col);
            }
        }
        return new RealMatrixImpl(outData, false);
    }
}","public void test1216() throws Throwable {
    double[][] doubleArray0 = new double[2][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.transpose();
    try {
        realMatrixImpl0.add(realMatrix0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // matrix dimension mismatch
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Compute the sum of this and <code>m</code>.
 *
 * @param m    matrix to be added
 * @return     this + m
 * @throws  IllegalArgumentException if m is not the same size as this
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test1317() throws Throwable {
    double[][] doubleArray0 = new double[15][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.add((RealMatrix) realMatrixImpl0);
    assertTrue(realMatrix0.equals((Object) realMatrixImpl0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public RealMatrix add(RealMatrix m) throws IllegalArgumentException {
    try {
        return add((RealMatrixImpl) m);
    } catch (ClassCastException cce) {
        final int rowCount = getRowDimension();
        final int columnCount = getColumnDimension();
        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
            throw new IllegalArgumentException(""matrix dimension mismatch"");
        }
        final double[][] outData = new double[rowCount][columnCount];
        for (int row = 0; row < rowCount; row++) {
            final double[] dataRow = data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < columnCount; col++) {
                outDataRow[col] = dataRow[col] + m.getEntry(row, col);
            }
        }
        return new RealMatrixImpl(outData, false);
    }
}","public void test1418() throws Throwable {
    double[][] doubleArray0 = new double[15][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(1);
    try {
        realMatrixImpl0.add(realMatrix0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // matrix dimension mismatch
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Compute the sum of this and <code>m</code>.
 *
 * @param m    matrix to be added
 * @return     this + m
 * @throws  IllegalArgumentException if m is not the same size as this
 */"
"public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {
    try {
        return subtract((RealMatrixImpl) m);
    } catch (ClassCastException cce) {
        final int rowCount = getRowDimension();
        final int columnCount = getColumnDimension();
        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
            throw new IllegalArgumentException(""matrix dimension mismatch"");
        }
        final double[][] outData = new double[rowCount][columnCount];
        for (int row = 0; row < rowCount; row++) {
            final double[] dataRow = data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < columnCount; col++) {
                outDataRow[col] = dataRow[col] - m.getEntry(row, col);
            }
        }
        return new RealMatrixImpl(outData, false);
    }
}","public void test1519() throws Throwable {
    double[][] doubleArray0 = new double[3][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.getColumnMatrix(2);
    try {
        realMatrixImpl0.subtract(realMatrix0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // matrix dimension mismatch
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Compute  this minus <code>m</code>.
 *
 * @param m    matrix to be subtracted
 * @return     this + m
 * @throws  IllegalArgumentException if m is not the same size as this
 */"
"public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {
    try {
        return subtract((RealMatrixImpl) m);
    } catch (ClassCastException cce) {
        final int rowCount = getRowDimension();
        final int columnCount = getColumnDimension();
        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
            throw new IllegalArgumentException(""matrix dimension mismatch"");
        }
        final double[][] outData = new double[rowCount][columnCount];
        for (int row = 0; row < rowCount; row++) {
            final double[] dataRow = data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < columnCount; col++) {
                outDataRow[col] = dataRow[col] - m.getEntry(row, col);
            }
        }
        return new RealMatrixImpl(outData, false);
    }
}","public void test1620() throws Throwable {
    double[][] doubleArray0 = new double[6][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(1);
    try {
        realMatrixImpl0.subtract(realMatrix0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // matrix dimension mismatch
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Compute  this minus <code>m</code>.
 *
 * @param m    matrix to be subtracted
 * @return     this + m
 * @throws  IllegalArgumentException if m is not the same size as this
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test1721() throws Throwable {
    double[][] doubleArray0 = new double[4][1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply((-1645.855237378296));
    assertFalse(realMatrix0.equals((Object) realMatrixImpl0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"double getNorm();","public void test1722() throws Throwable {
    double[][] doubleArray0 = new double[4][1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply((-1645.855237378296));
    assertEquals(0.0, realMatrix0.getNorm(), 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">
 * maximum absolute row sum norm</a> of the matrix.
 *
 * @return norm
 */"
"int getColumnDimension();","public void test1723() throws Throwable {
    double[][] doubleArray0 = new double[4][1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply((-1645.855237378296));
    assertEquals(1, realMatrix0.getColumnDimension());
}","/**
 * Returns the number of columns in the matrix.
 *
 * @return columnDimension
 */"
"int getColumnDimension();","public void test1824() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[][] doubleArray1 = new double[4][1];
    doubleArray1[0] = doubleArray0;
    doubleArray1[1] = doubleArray0;
    doubleArray1[2] = doubleArray0;
    doubleArray1[3] = doubleArray0;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
    RealMatrix realMatrix0 = realMatrixImpl0.multiply((RealMatrix) realMatrixImpl0);
    assertEquals(4, realMatrix0.getColumnDimension());
}","/**
 * Returns the number of columns in the matrix.
 *
 * @return columnDimension
 */"
"public RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException {
    return m.multiply(this);
}","public void test1925() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Matrices are not multiplication compatible.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the result of premultiplying this by <code>m</code>.
 * @param m    matrix to premultiply by
 * @return     m * this
 * @throws     IllegalArgumentException
 *             if rowDimension(this) != columnDimension(m)
 */"
"public RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn) throws MatrixIndexException {
    if (startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final double[][] subMatrixData = new double[endRow - startRow + 1][endColumn - startColumn + 1];
    for (int i = startRow; i <= endRow; i++) {
        System.arraycopy(data[i], startColumn, subMatrixData[i - startRow], 0, endColumn - startColumn + 1);
    }
    return new RealMatrixImpl(subMatrixData, false);
}","public void test2026() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
    try {
        realMatrixImpl0.getSubMatrix((-1085), (-1085), (-1085), (-1085));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Gets a submatrix. Rows and columns are indicated
 * counting from 0 to n-1.
 *
 * @param startRow Initial row index
 * @param endRow Final row index
 * @param startColumn Initial column index
 * @param endColumn Final column index
 * @return The subMatrix containing the data of the
 *         specified rows and columns
 * @exception MatrixIndexException if row or column selections are not valid
 */"
"public RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn) throws MatrixIndexException {
    if (startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final double[][] subMatrixData = new double[endRow - startRow + 1][endColumn - startColumn + 1];
    for (int i = startRow; i <= endRow; i++) {
        System.arraycopy(data[i], startColumn, subMatrixData[i - startRow], 0, endColumn - startColumn + 1);
    }
    return new RealMatrixImpl(subMatrixData, false);
}","public void test2127() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2170, 2170);
    try {
        realMatrixImpl0.getSubMatrix(2170, 2170, 2170, 3666);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Gets a submatrix. Rows and columns are indicated
 * counting from 0 to n-1.
 *
 * @param startRow Initial row index
 * @param endRow Final row index
 * @param startColumn Initial column index
 * @param endColumn Final column index
 * @return The subMatrix containing the data of the
 *         specified rows and columns
 * @exception MatrixIndexException if row or column selections are not valid
 */"
"public RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn) throws MatrixIndexException {
    if (startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final double[][] subMatrixData = new double[endRow - startRow + 1][endColumn - startColumn + 1];
    for (int i = startRow; i <= endRow; i++) {
        System.arraycopy(data[i], startColumn, subMatrixData[i - startRow], 0, endColumn - startColumn + 1);
    }
    return new RealMatrixImpl(subMatrixData, false);
}","public void test2228() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
    try {
        realMatrixImpl0.getSubMatrix(31, 0, 0, 0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Gets a submatrix. Rows and columns are indicated
 * counting from 0 to n-1.
 *
 * @param startRow Initial row index
 * @param endRow Final row index
 * @param startColumn Initial column index
 * @param endColumn Final column index
 * @return The subMatrix containing the data of the
 *         specified rows and columns
 * @exception MatrixIndexException if row or column selections are not valid
 */"
"public RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn) throws MatrixIndexException {
    if (startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final double[][] subMatrixData = new double[endRow - startRow + 1][endColumn - startColumn + 1];
    for (int i = startRow; i <= endRow; i++) {
        System.arraycopy(data[i], startColumn, subMatrixData[i - startRow], 0, endColumn - startColumn + 1);
    }
    return new RealMatrixImpl(subMatrixData, false);
}","public void test2329() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.getSubMatrix(758, 758, 758, (-2073));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Gets a submatrix. Rows and columns are indicated
 * counting from 0 to n-1.
 *
 * @param startRow Initial row index
 * @param endRow Final row index
 * @param startColumn Initial column index
 * @param endColumn Final column index
 * @return The subMatrix containing the data of the
 *         specified rows and columns
 * @exception MatrixIndexException if row or column selections are not valid
 */"
"public RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn) throws MatrixIndexException {
    if (startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final double[][] subMatrixData = new double[endRow - startRow + 1][endColumn - startColumn + 1];
    for (int i = startRow; i <= endRow; i++) {
        System.arraycopy(data[i], startColumn, subMatrixData[i - startRow], 0, endColumn - startColumn + 1);
    }
    return new RealMatrixImpl(subMatrixData, false);
}","public void test2430() throws Throwable {
    double[] doubleArray0 = new double[4];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.getSubMatrix(2, 2, (-86), 2);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Gets a submatrix. Rows and columns are indicated
 * counting from 0 to n-1.
 *
 * @param startRow Initial row index
 * @param endRow Final row index
 * @param startColumn Initial column index
 * @param endColumn Final column index
 * @return The subMatrix containing the data of the
 *         specified rows and columns
 * @exception MatrixIndexException if row or column selections are not valid
 */"
"public RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn) throws MatrixIndexException {
    if (startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final double[][] subMatrixData = new double[endRow - startRow + 1][endColumn - startColumn + 1];
    for (int i = startRow; i <= endRow; i++) {
        System.arraycopy(data[i], startColumn, subMatrixData[i - startRow], 0, endColumn - startColumn + 1);
    }
    return new RealMatrixImpl(subMatrixData, false);
}","public void test2531() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.getSubMatrix(1, 1, 1410, 1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Gets a submatrix. Rows and columns are indicated
 * counting from 0 to n-1.
 *
 * @param startRow Initial row index
 * @param endRow Final row index
 * @param startColumn Initial column index
 * @param endColumn Final column index
 * @return The subMatrix containing the data of the
 *         specified rows and columns
 * @exception MatrixIndexException if row or column selections are not valid
 */"
"boolean isSquare();","public void test2632() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, true);
    RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(0, 0, 0, 0);
    assertTrue(realMatrix0.isSquare());
}","/**
 * Is this a square matrix?
 * @return true if the matrix is square (rowDimension = columnDimension)
 */"
"public RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns) throws MatrixIndexException {
    if (selectedRows.length * selectedColumns.length == 0) {
        throw new MatrixIndexException(""selected row and column index arrays must be non-empty"");
    }
    final double[][] subMatrixData = new double[selectedRows.length][selectedColumns.length];
    try {
        for (int i = 0; i < selectedRows.length; i++) {
            final double[] subI = subMatrixData[i];
            final double[] dataSelectedI = data[selectedRows[i]];
            for (int j = 0; j < selectedColumns.length; j++) {
                subI[j] = dataSelectedI[selectedColumns[j]];
            }
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        throw new MatrixIndexException(""matrix dimension mismatch"");
    }
    return new RealMatrixImpl(subMatrixData, false);
}","public void test2733() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
    int[] intArray0 = new int[0];
    try {
        realMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // selected row and column index arrays must be non-empty
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Gets a submatrix. Rows and columns are indicated
 * counting from 0 to n-1.
 *
 * @param selectedRows Array of row indices must be non-empty
 * @param selectedColumns Array of column indices must be non-empty
 * @return The subMatrix containing the data in the
 *     specified rows and columns
 * @exception MatrixIndexException  if supplied row or column index arrays
 *     are not valid
 */"
"public boolean isSquare() {
    return (this.getColumnDimension() == this.getRowDimension());
}","public void test2834() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2, 2);
    int[] intArray0 = new int[1];
    RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(intArray0, intArray0);
    assertTrue(realMatrixImpl0.isSquare());
}","/**
 * @return true if the matrix is square (rowDimension = columnDimension)
 */"
"int getRowDimension();","public void test2835() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2, 2);
    int[] intArray0 = new int[1];
    RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(intArray0, intArray0);
    assertEquals(1, realMatrix0.getRowDimension());
}","/**
 * Returns the number of rows in the matrix.
 *
 * @return rowDimension
 */"
"public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {
    if ((row < 0) || (column < 0)) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final int nRows = subMatrix.length;
    if (nRows == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one row."");
    }
    final int nCols = subMatrix[0].length;
    if (nCols == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one column."");
    }
    for (int r = 1; r < nRows; r++) {
        if (subMatrix[r].length != nCols) {
            throw new IllegalArgumentException(""All input rows must have the same length."");
        }
    }
    if (data == null) {
        if ((row > 0) || (column > 0))
            throw new MatrixIndexException(""matrix must be initialized to perfom this method"");
        data = new double[nRows][nCols];
        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);
    }
    if (((nRows + row) > this.getRowDimension()) || (nCols + column > this.getColumnDimension()))
        throw new MatrixIndexException(""invalid row or column index selection"");
    for (int i = 0; i < nRows; i++) {
        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);
    }
    lu = null;
}","public void test2936() throws Throwable {
    double[][] doubleArray0 = new double[12][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.setSubMatrix(doubleArray0, (-348), (-348));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Replace the submatrix starting at <code>row, column</code> using data in
 * the input <code>subMatrix</code> array. Indexes are 0-based.
 * <p>
 * Example:<br>
 * Starting with <pre>
 * 1  2  3  4
 * 5  6  7  8
 * 9  0  1  2
 * </pre>
 * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking
 * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>
 * 1  2  3  4
 * 5  3  4  8
 * 9  5  6  2
 * </pre></p>
 *
 * @param subMatrix  array containing the submatrix replacement data
 * @param row  row coordinate of the top, left element to be replaced
 * @param column  column coordinate of the top, left element to be replaced
 * @throws MatrixIndexException  if subMatrix does not fit into this
 *    matrix from element in (row, column)
 * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>subMatrix</code> is null
 * @since 1.1
 */"
"public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {
    if ((row < 0) || (column < 0)) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final int nRows = subMatrix.length;
    if (nRows == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one row."");
    }
    final int nCols = subMatrix[0].length;
    if (nCols == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one column."");
    }
    for (int r = 1; r < nRows; r++) {
        if (subMatrix[r].length != nCols) {
            throw new IllegalArgumentException(""All input rows must have the same length."");
        }
    }
    if (data == null) {
        if ((row > 0) || (column > 0))
            throw new MatrixIndexException(""matrix must be initialized to perfom this method"");
        data = new double[nRows][nCols];
        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);
    }
    if (((nRows + row) > this.getRowDimension()) || (nCols + column > this.getColumnDimension()))
        throw new MatrixIndexException(""invalid row or column index selection"");
    for (int i = 0; i < nRows; i++) {
        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);
    }
    lu = null;
}","public void test3037() throws Throwable {
    double[][] doubleArray0 = new double[4][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.setSubMatrix(doubleArray0, 3681, (-1));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Replace the submatrix starting at <code>row, column</code> using data in
 * the input <code>subMatrix</code> array. Indexes are 0-based.
 * <p>
 * Example:<br>
 * Starting with <pre>
 * 1  2  3  4
 * 5  6  7  8
 * 9  0  1  2
 * </pre>
 * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking
 * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>
 * 1  2  3  4
 * 5  3  4  8
 * 9  5  6  2
 * </pre></p>
 *
 * @param subMatrix  array containing the submatrix replacement data
 * @param row  row coordinate of the top, left element to be replaced
 * @param column  column coordinate of the top, left element to be replaced
 * @throws MatrixIndexException  if subMatrix does not fit into this
 *    matrix from element in (row, column)
 * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>subMatrix</code> is null
 * @since 1.1
 */"
"public RealMatrixImpl(double[][] d) {
    copyIn(d);
    lu = null;
}","public void test3138() throws Throwable {
    double[][] doubleArray0 = new double[0][4];
    RealMatrixImpl realMatrixImpl0 = null;
    try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Matrix must have at least one row.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Create a new RealMatrix using the input array as the underlying
 * data array.
 * <p>The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #RealMatrixImpl(double[][], boolean)}
 * with the second argument set to <code>true</code>.</p>
 *
 * @param d data for new matrix
 * @throws IllegalArgumentException if <code>d</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>d</code> is null
 * @see #RealMatrixImpl(double[][], boolean)
 */"
"public RealMatrixImpl(double[][] d) {
    copyIn(d);
    lu = null;
}","public void test3239() throws Throwable {
    double[][] doubleArray0 = new double[2][0];
    RealMatrixImpl realMatrixImpl0 = null;
    try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Matrix must have at least one column.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Create a new RealMatrix using the input array as the underlying
 * data array.
 * <p>The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #RealMatrixImpl(double[][], boolean)}
 * with the second argument set to <code>true</code>.</p>
 *
 * @param d data for new matrix
 * @throws IllegalArgumentException if <code>d</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>d</code> is null
 * @see #RealMatrixImpl(double[][], boolean)
 */"
"public RealMatrixImpl(double[][] d) {
    copyIn(d);
    lu = null;
}","public void test3340() throws Throwable {
    double[] doubleArray0 = new double[10];
    double[][] doubleArray1 = new double[4][0];
    doubleArray1[0] = doubleArray0;
    RealMatrixImpl realMatrixImpl0 = null;
    try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // All input rows must have the same length.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Create a new RealMatrix using the input array as the underlying
 * data array.
 * <p>The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #RealMatrixImpl(double[][], boolean)}
 * with the second argument set to <code>true</code>.</p>
 *
 * @param d data for new matrix
 * @throws IllegalArgumentException if <code>d</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>d</code> is null
 * @see #RealMatrixImpl(double[][], boolean)
 */"
"public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {
    if ((row < 0) || (column < 0)) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final int nRows = subMatrix.length;
    if (nRows == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one row."");
    }
    final int nCols = subMatrix[0].length;
    if (nCols == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one column."");
    }
    for (int r = 1; r < nRows; r++) {
        if (subMatrix[r].length != nCols) {
            throw new IllegalArgumentException(""All input rows must have the same length."");
        }
    }
    if (data == null) {
        if ((row > 0) || (column > 0))
            throw new MatrixIndexException(""matrix must be initialized to perfom this method"");
        data = new double[nRows][nCols];
        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);
    }
    if (((nRows + row) > this.getRowDimension()) || (nCols + column > this.getColumnDimension()))
        throw new MatrixIndexException(""invalid row or column index selection"");
    for (int i = 0; i < nRows; i++) {
        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);
    }
    lu = null;
}","public void test3441() throws Throwable {
    double[] doubleArray0 = new double[3];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double[][] doubleArray1 = new double[1][2];
    try {
        realMatrixImpl0.setSubMatrix(doubleArray1, 2, 2024);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Replace the submatrix starting at <code>row, column</code> using data in
 * the input <code>subMatrix</code> array. Indexes are 0-based.
 * <p>
 * Example:<br>
 * Starting with <pre>
 * 1  2  3  4
 * 5  6  7  8
 * 9  0  1  2
 * </pre>
 * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking
 * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>
 * 1  2  3  4
 * 5  3  4  8
 * 9  5  6  2
 * </pre></p>
 *
 * @param subMatrix  array containing the submatrix replacement data
 * @param row  row coordinate of the top, left element to be replaced
 * @param column  column coordinate of the top, left element to be replaced
 * @throws MatrixIndexException  if subMatrix does not fit into this
 *    matrix from element in (row, column)
 * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>subMatrix</code> is null
 * @since 1.1
 */"
"public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {
    if ((row < 0) || (column < 0)) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final int nRows = subMatrix.length;
    if (nRows == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one row."");
    }
    final int nCols = subMatrix[0].length;
    if (nCols == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one column."");
    }
    for (int r = 1; r < nRows; r++) {
        if (subMatrix[r].length != nCols) {
            throw new IllegalArgumentException(""All input rows must have the same length."");
        }
    }
    if (data == null) {
        if ((row > 0) || (column > 0))
            throw new MatrixIndexException(""matrix must be initialized to perfom this method"");
        data = new double[nRows][nCols];
        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);
    }
    if (((nRows + row) > this.getRowDimension()) || (nCols + column > this.getColumnDimension()))
        throw new MatrixIndexException(""invalid row or column index selection"");
    for (int i = 0; i < nRows; i++) {
        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);
    }
    lu = null;
}","public void test3542() throws Throwable {
    double[][] doubleArray0 = new double[17][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
    try {
        realMatrixImpl0.setSubMatrix(doubleArray0, 31, 31);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // matrix must be initialized to perfom this method
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Replace the submatrix starting at <code>row, column</code> using data in
 * the input <code>subMatrix</code> array. Indexes are 0-based.
 * <p>
 * Example:<br>
 * Starting with <pre>
 * 1  2  3  4
 * 5  6  7  8
 * 9  0  1  2
 * </pre>
 * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking
 * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>
 * 1  2  3  4
 * 5  3  4  8
 * 9  5  6  2
 * </pre></p>
 *
 * @param subMatrix  array containing the submatrix replacement data
 * @param row  row coordinate of the top, left element to be replaced
 * @param column  column coordinate of the top, left element to be replaced
 * @throws MatrixIndexException  if subMatrix does not fit into this
 *    matrix from element in (row, column)
 * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>subMatrix</code> is null
 * @since 1.1
 */"
"public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {
    if ((row < 0) || (column < 0)) {
        throw new MatrixIndexException(""invalid row or column index selection"");
    }
    final int nRows = subMatrix.length;
    if (nRows == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one row."");
    }
    final int nCols = subMatrix[0].length;
    if (nCols == 0) {
        throw new IllegalArgumentException(""Matrix must have at least one column."");
    }
    for (int r = 1; r < nRows; r++) {
        if (subMatrix[r].length != nCols) {
            throw new IllegalArgumentException(""All input rows must have the same length."");
        }
    }
    if (data == null) {
        if ((row > 0) || (column > 0))
            throw new MatrixIndexException(""matrix must be initialized to perfom this method"");
        data = new double[nRows][nCols];
        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);
    }
    if (((nRows + row) > this.getRowDimension()) || (nCols + column > this.getColumnDimension()))
        throw new MatrixIndexException(""invalid row or column index selection"");
    for (int i = 0; i < nRows; i++) {
        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);
    }
    lu = null;
}","public void test3643() throws Throwable {
    double[][] doubleArray0 = new double[5][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.setSubMatrix(doubleArray0, 838, 838);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // invalid row or column index selection
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Replace the submatrix starting at <code>row, column</code> using data in
 * the input <code>subMatrix</code> array. Indexes are 0-based.
 * <p>
 * Example:<br>
 * Starting with <pre>
 * 1  2  3  4
 * 5  6  7  8
 * 9  0  1  2
 * </pre>
 * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking
 * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>
 * 1  2  3  4
 * 5  3  4  8
 * 9  5  6  2
 * </pre></p>
 *
 * @param subMatrix  array containing the submatrix replacement data
 * @param row  row coordinate of the top, left element to be replaced
 * @param column  column coordinate of the top, left element to be replaced
 * @throws MatrixIndexException  if subMatrix does not fit into this
 *    matrix from element in (row, column)
 * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
 *  (not all rows have the same length) or empty
 * @throws NullPointerException if <code>subMatrix</code> is null
 * @since 1.1
 */"
"public RealMatrix getRowMatrix(int row) throws MatrixIndexException {
    if (!isValidCoordinate(row, 0)) {
        throw new MatrixIndexException(""illegal row argument"");
    }
    final int ncols = this.getColumnDimension();
    final double[][] out = new double[1][ncols];
    System.arraycopy(data[row], 0, out[0], 0, ncols);
    return new RealMatrixImpl(out, false);
}","public void test3744() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1384, 1384);
    try {
        realMatrixImpl0.getRowMatrix(1384);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // illegal row argument
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the entries in row number <code>row</code> as a row matrix.
 * Row indices start at 0.
 *
 * @param row  the row to be fetched
 * @return row matrix
 * @throws MatrixIndexException if the specified row index is invalid
 */"
"public RealMatrix getColumnMatrix(int column) throws MatrixIndexException {
    if (!isValidCoordinate(0, column)) {
        throw new MatrixIndexException(""illegal column argument"");
    }
    final int nRows = this.getRowDimension();
    final double[][] out = new double[nRows][1];
    for (int row = 0; row < nRows; row++) {
        out[row][0] = data[row][column];
    }
    return new RealMatrixImpl(out, false);
}","public void test3845() throws Throwable {
    double[][] doubleArray0 = new double[9][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.getColumnMatrix((-197));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // illegal column argument
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the entries in column number <code>column</code>
 * as a column matrix.  Column indices start at 0.
 *
 * @param column the column to be fetched
 * @return column matrix
 * @throws MatrixIndexException if the specified column index is invalid
 */"
"public double[] getRow(int row) throws MatrixIndexException {
    if (!isValidCoordinate(row, 0)) {
        throw new MatrixIndexException(""illegal row argument"");
    }
    final int ncols = this.getColumnDimension();
    final double[] out = new double[ncols];
    System.arraycopy(data[row], 0, out, 0, ncols);
    return out;
}","public void test3946() throws Throwable {
    double[][] doubleArray0 = new double[20][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
    double[] doubleArray1 = realMatrixImpl0.getRow(17);
    assertEquals(8, doubleArray1.length);
}","/**
 * Returns the entries in row number <code>row</code> as an array.
 * <p>
 * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
 * unless <code>0 <= row < rowDimension.</code></p>
 *
 * @param row the row to be fetched
 * @return array of entries in the row
 * @throws MatrixIndexException if the specified row index is not valid
 */"
"public double[] getRow(int row) throws MatrixIndexException {
    if (!isValidCoordinate(row, 0)) {
        throw new MatrixIndexException(""illegal row argument"");
    }
    final int ncols = this.getColumnDimension();
    final double[] out = new double[ncols];
    System.arraycopy(data[row], 0, out, 0, ncols);
    return out;
}","public void test4047() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2, 2);
    try {
        realMatrixImpl0.getRow((-2527));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // illegal row argument
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the entries in row number <code>row</code> as an array.
 * <p>
 * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
 * unless <code>0 <= row < rowDimension.</code></p>
 *
 * @param row the row to be fetched
 * @return array of entries in the row
 * @throws MatrixIndexException if the specified row index is not valid
 */"
"public double[] getColumn(int col) throws MatrixIndexException {
    if (!isValidCoordinate(0, col)) {
        throw new MatrixIndexException(""illegal column argument"");
    }
    final int nRows = this.getRowDimension();
    final double[] out = new double[nRows];
    for (int row = 0; row < nRows; row++) {
        out[row] = data[row][col];
    }
    return out;
}","public void test4148() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, true);
    double[] doubleArray1 = realMatrixImpl0.getColumn(0);
    assertEquals(1, doubleArray1.length);
}","/**
 * Returns the entries in column number <code>col</code> as an array.
 * <p>
 * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
 * unless <code>0 <= column < columnDimension.</code></p>
 *
 * @param col the column to be fetched
 * @return array of entries in the column
 * @throws MatrixIndexException if the specified column index is not valid
 */"
"public double[] getColumn(int col) throws MatrixIndexException {
    if (!isValidCoordinate(0, col)) {
        throw new MatrixIndexException(""illegal column argument"");
    }
    final int nRows = this.getRowDimension();
    final double[] out = new double[nRows];
    for (int row = 0; row < nRows; row++) {
        out[row] = data[row][col];
    }
    return out;
}","public void test4249() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.getColumn(25);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // illegal column argument
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the entries in column number <code>col</code> as an array.
 * <p>
 * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
 * unless <code>0 <= column < columnDimension.</code></p>
 *
 * @param col the column to be fetched
 * @return array of entries in the column
 * @throws MatrixIndexException if the specified column index is not valid
 */"
"public int getRowDimension() {
    return data.length;
}","public void test4350() throws Throwable {
    double[] doubleArray0 = new double[1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    assertEquals(1, realMatrixImpl0.getRowDimension());
}","/**
 * @return rowDimension
 */"
"public boolean isSquare() {
    return (this.getColumnDimension() == this.getRowDimension());
}","public void test4351() throws Throwable {
    double[] doubleArray0 = new double[1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    assertTrue(realMatrixImpl0.isSquare());
}","/**
 * @return true if the matrix is square (rowDimension = columnDimension)
 */"
"public double getDeterminant() throws InvalidMatrixException {
    if (!isSquare()) {
        throw new InvalidMatrixException(""matrix is not square"");
    }
    if (isSingular()) {
        // note: this has side effect of attempting LU decomp if lu == null
        return 0d;
    } else {
        double det = parity;
        for (int i = 0; i < this.getRowDimension(); i++) {
            det *= lu[i][i];
        }
        return det;
    }
}","public void test4352() throws Throwable {
    double[] doubleArray0 = new double[1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double double0 = realMatrixImpl0.getDeterminant();
    assertEquals(0.0, double0, 0.01);
}","/**
 * @return determinant
 * @throws InvalidMatrixException if matrix is not square
 */"
"public double getDeterminant() throws InvalidMatrixException {
    if (!isSquare()) {
        throw new InvalidMatrixException(""matrix is not square"");
    }
    if (isSingular()) {
        // note: this has side effect of attempting LU decomp if lu == null
        return 0d;
    } else {
        double det = parity;
        for (int i = 0; i < this.getRowDimension(); i++) {
            det *= lu[i][i];
        }
        return det;
    }
}","public void test4453() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.getDeterminant();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // matrix is not square
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * @return determinant
 * @throws InvalidMatrixException if matrix is not square
 */"
"public double getDeterminant() throws InvalidMatrixException {
    if (!isSquare()) {
        throw new InvalidMatrixException(""matrix is not square"");
    }
    if (isSingular()) {
        // note: this has side effect of attempting LU decomp if lu == null
        return 0d;
    } else {
        double det = parity;
        for (int i = 0; i < this.getRowDimension(); i++) {
            det *= lu[i][i];
        }
        return det;
    }
}","public void test4554() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-1461.73353);
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double double0 = realMatrixImpl0.getDeterminant();
    assertEquals((-1461.73353), double0, 0.01);
}","/**
 * @return determinant
 * @throws InvalidMatrixException if matrix is not square
 */"
"public double getTrace() throws IllegalArgumentException {
    if (!isSquare()) {
        throw new IllegalArgumentException(""matrix is not square"");
    }
    double trace = data[0][0];
    for (int i = 1; i < this.getRowDimension(); i++) {
        trace += data[i][i];
    }
    return trace;
}","public void test4655() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[][] doubleArray1 = new double[4][1];
    doubleArray1[0] = doubleArray0;
    doubleArray1[1] = doubleArray0;
    doubleArray1[2] = doubleArray0;
    doubleArray1[3] = doubleArray0;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
    double double0 = realMatrixImpl0.getTrace();
    assertEquals(0.0, double0, 0.01);
}","/**
 * @return trace
 * @throws IllegalArgumentException if the matrix is not square
 */"
"public double getTrace() throws IllegalArgumentException {
    if (!isSquare()) {
        throw new IllegalArgumentException(""matrix is not square"");
    }
    double trace = data[0][0];
    for (int i = 1; i < this.getRowDimension(); i++) {
        trace += data[i][i];
    }
    return trace;
}","public void test4756() throws Throwable {
    double[] doubleArray0 = new double[4];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.getTrace();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // matrix is not square
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * @return trace
 * @throws IllegalArgumentException if the matrix is not square
 */"
"public double[] operate(double[] v) throws IllegalArgumentException {
    final int nRows = this.getRowDimension();
    final int nCols = this.getColumnDimension();
    if (v.length != nCols) {
        throw new IllegalArgumentException(""vector has wrong length"");
    }
    final double[] out = new double[v.length];
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        double sum = 0;
        for (int i = 0; i < nCols; i++) {
            sum += dataRow[i] * v[i];
        }
        out[row] = sum;
    }
    return out;
}","public void test4857() throws Throwable {
    double[] doubleArray0 = new double[1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double[] doubleArray1 = realMatrixImpl0.operate(doubleArray0);
    assertNotSame(doubleArray1, doubleArray0);
}","/**
 * @param v vector to operate on
 * @throws IllegalArgumentException if columnDimension != v.length
 * @return resulting vector
 */"
"public double[] operate(double[] v) throws IllegalArgumentException {
    final int nRows = this.getRowDimension();
    final int nCols = this.getColumnDimension();
    if (v.length != nCols) {
        throw new IllegalArgumentException(""vector has wrong length"");
    }
    final double[] out = new double[v.length];
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        double sum = 0;
        for (int i = 0; i < nCols; i++) {
            sum += dataRow[i] * v[i];
        }
        out[row] = sum;
    }
    return out;
}","public void test4959() throws Throwable {
    double[] doubleArray0 = new double[3];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    try {
        realMatrixImpl0.operate(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector has wrong length
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * @param v vector to operate on
 * @throws IllegalArgumentException if columnDimension != v.length
 * @return resulting vector
 */"
"public double[] preMultiply(double[] v) throws IllegalArgumentException {
    final int nRows = this.getRowDimension();
    if (v.length != nRows) {
        throw new IllegalArgumentException(""vector has wrong length"");
    }
    final int nCols = this.getColumnDimension();
    final double[] out = new double[nCols];
    for (int col = 0; col < nCols; col++) {
        double sum = 0;
        for (int i = 0; i < nRows; i++) {
            sum += data[i][col] * v[i];
        }
        out[col] = sum;
    }
    return out;
}","public void test5060() throws Throwable {
    double[] doubleArray0 = new double[1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0);
    assertArrayEquals(new double[] { 0.0 }, doubleArray1, 0.01);
}","/**
 * @param v vector to premultiply by
 * @throws IllegalArgumentException if rowDimension != v.length
 * @return resulting matrix
 */"
"public double[] preMultiply(double[] v) throws IllegalArgumentException {
    final int nRows = this.getRowDimension();
    if (v.length != nRows) {
        throw new IllegalArgumentException(""vector has wrong length"");
    }
    final int nCols = this.getColumnDimension();
    final double[] out = new double[nCols];
    for (int col = 0; col < nCols; col++) {
        double sum = 0;
        for (int i = 0; i < nRows; i++) {
            sum += data[i][col] * v[i];
        }
        out[col] = sum;
    }
    return out;
}","public void test5161() throws Throwable {
    double[] doubleArray0 = new double[4];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(2, 2);
    try {
        realMatrixImpl0.preMultiply(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // vector has wrong length
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * @param v vector to premultiply by
 * @throws IllegalArgumentException if rowDimension != v.length
 * @return resulting matrix
 */"
"public double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {
    final int nRows = this.getRowDimension();
    if (b.length != nRows) {
        throw new IllegalArgumentException(""constant vector has wrong length"");
    }
    final RealMatrix bMatrix = new RealMatrixImpl(b);
    final double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();
    final double[] out = new double[nRows];
    for (int row = 0; row < nRows; row++) {
        out[row] = solution[row][0];
    }
    return out;
}","public void test5262() throws Throwable {
    double[] doubleArray0 = new double[1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double[] doubleArray1 = new double[0];
    try {
        realMatrixImpl0.solve(doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // constant vector has wrong length
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns a matrix of (column) solution vectors for linear systems with
 * coefficient matrix = this and constant vectors = columns of
 * <code>b</code>.
 *
 * @param b  array of constant forming RHS of linear systems to
 * to solve
 * @return solution array
 * @throws IllegalArgumentException if this.rowDimension != row dimension
 * @throws InvalidMatrixException if this matrix is not square or is singular
 */"
"public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException {
    if (b.getRowDimension() != this.getRowDimension()) {
        throw new IllegalArgumentException(""Incorrect row dimension"");
    }
    if (!this.isSquare()) {
        throw new InvalidMatrixException(""coefficient matrix is not square"");
    }
    if (this.isSingular()) {
        // side effect: compute LU decomp
        throw new InvalidMatrixException(""Matrix is singular."");
    }
    final int nCol = this.getColumnDimension();
    final int nColB = b.getColumnDimension();
    final int nRowB = b.getRowDimension();
    // Apply permutations to b
    final double[][] bp = new double[nRowB][nColB];
    for (int row = 0; row < nRowB; row++) {
        final double[] bpRow = bp[row];
        for (int col = 0; col < nColB; col++) {
            bpRow[col] = b.getEntry(permutation[row], col);
        }
    }
    // Solve LY = b
    for (int col = 0; col < nCol; col++) {
        for (int i = col + 1; i < nCol; i++) {
            final double[] bpI = bp[i];
            final double[] luI = lu[i];
            for (int j = 0; j < nColB; j++) {
                bpI[j] -= bp[col][j] * luI[col];
            }
        }
    }
    // Solve UX = Y
    for (int col = nCol - 1; col >= 0; col--) {
        final double[] bpCol = bp[col];
        final double luDiag = lu[col][col];
        for (int j = 0; j < nColB; j++) {
            bpCol[j] /= luDiag;
        }
        for (int i = 0; i < col; i++) {
            final double[] bpI = bp[i];
            final double[] luI = lu[i];
            for (int j = 0; j < nColB; j++) {
                bpI[j] -= bp[col][j] * luI[col];
            }
        }
    }
    return new RealMatrixImpl(bp, false);
}","public void test5363() throws Throwable {
    double[][] doubleArray0 = new double[2][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.transpose();
    try {
        realMatrixImpl0.solve(realMatrix0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Incorrect row dimension
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns a matrix of (column) solution vectors for linear systems with
 * coefficient matrix = this and constant vectors = columns of
 * <code>b</code>.
 *
 * @param b  matrix of constant vectors forming RHS of linear systems to
 * to solve
 * @return matrix of solution vectors
 * @throws IllegalArgumentException if this.rowDimension != row dimension
 * @throws InvalidMatrixException if this matrix is not square or is singular
 */"
"public RealMatrix inverse() throws InvalidMatrixException {
    return solve(MatrixUtils.createRealIdentityMatrix(getRowDimension()));
}","public void test5464() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[][] doubleArray1 = new double[4][1];
    doubleArray1[0] = doubleArray0;
    doubleArray1[1] = doubleArray0;
    doubleArray1[2] = doubleArray0;
    doubleArray1[3] = doubleArray0;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
    try {
        realMatrixImpl0.inverse();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Matrix is singular.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Returns the inverse matrix if this matrix is invertible.
 *
 * @return inverse matrix
 * @throws InvalidMatrixException if this is not invertible
 */"
"public void luDecompose() throws InvalidMatrixException {
    final int nRows = this.getRowDimension();
    final int nCols = this.getColumnDimension();
    if (nRows != nCols) {
        throw new InvalidMatrixException(""LU decomposition requires that the matrix be square."");
    }
    lu = getData();
    // Initialize permutation array and parity
    permutation = new int[nRows];
    for (int row = 0; row < nRows; row++) {
        permutation[row] = row;
    }
    parity = 1;
    // Loop over columns
    for (int col = 0; col < nCols; col++) {
        double sum = 0;
        // upper
        for (int row = 0; row < col; row++) {
            final double[] luRow = lu[row];
            sum = luRow[col];
            for (int i = 0; i < row; i++) {
                sum -= luRow[i] * lu[i][col];
            }
            luRow[col] = sum;
        }
        // lower
        // permutation row
        int max = col;
        double largest = 0d;
        for (int row = col; row < nRows; row++) {
            final double[] luRow = lu[row];
            sum = luRow[col];
            for (int i = 0; i < col; i++) {
                sum -= luRow[i] * lu[i][col];
            }
            luRow[col] = sum;
            // maintain best permutation choice
            if (Math.abs(sum) > largest) {
                largest = Math.abs(sum);
                max = row;
            }
        }
        // Singularity check
        if (Math.abs(lu[max][col]) < TOO_SMALL) {
            lu = null;
            throw new InvalidMatrixException(""matrix is singular"");
        }
        // Pivot if necessary
        if (max != col) {
            double tmp = 0;
            for (int i = 0; i < nCols; i++) {
                tmp = lu[max][i];
                lu[max][i] = lu[col][i];
                lu[col][i] = tmp;
            }
            int temp = permutation[max];
            permutation[max] = permutation[col];
            permutation[col] = temp;
            parity = -parity;
        }
        // Divide the lower elements by the ""winning"" diagonal elt.
        final double luDiag = lu[col][col];
        for (int row = col + 1; row < nRows; row++) {
            lu[row][col] /= luDiag;
        }
    }
}","public void test5565() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = (-1645.855237378296);
    double[][] doubleArray1 = new double[4][1];
    doubleArray1[0] = doubleArray0;
    doubleArray1[1] = doubleArray0;
    doubleArray1[2] = doubleArray0;
    doubleArray1[3] = doubleArray0;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
    RealMatrix realMatrix0 = realMatrixImpl0.transpose();
    RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl) realMatrixImpl0.subtract(realMatrix0);
    try {
        realMatrixImpl1.luDecompose();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // matrix is singular
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Computes a new
 * <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">
 * LU decomposition</a> for this matrix, storing the result for use by other methods.
 * <p>
 * <strong>Implementation Note</strong>:<br>
 * Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm"">
 * Crout's algorithm</a>, with partial pivoting.</p>
 * <p>
 * <strong>Usage Note</strong>:<br>
 * This method should rarely be invoked directly. Its only use is
 * to force recomputation of the LU decomposition when changes have been
 * made to the underlying data using direct array references. Changes
 * made using setXxx methods will trigger recomputation when needed
 * automatically.</p>
 *
 * @throws InvalidMatrixException if the matrix is non-square or singular.
 */"
"public String toString() {
    StringBuffer res = new StringBuffer();
    res.append(""RealMatrixImpl{"");
    if (data != null) {
        for (int i = 0; i < data.length; i++) {
            if (i > 0) {
                res.append("","");
            }
            res.append(""{"");
            for (int j = 0; j < data[0].length; j++) {
                if (j > 0) {
                    res.append("","");
                }
                res.append(data[i][j]);
            }
            res.append(""}"");
        }
    }
    res.append(""}"");
    return res.toString();
}","public void test5666() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
    String string0 = realMatrixImpl0.toString();
    assertEquals(""RealMatrixImpl{}"", string0);
}","/**
 * Get a string representation for this matrix.
 * @return a string representation for this matrix
 */"
"public String toString() {
    StringBuffer res = new StringBuffer();
    res.append(""RealMatrixImpl{"");
    if (data != null) {
        for (int i = 0; i < data.length; i++) {
            if (i > 0) {
                res.append("","");
            }
            res.append(""{"");
            for (int j = 0; j < data[0].length; j++) {
                if (j > 0) {
                    res.append("","");
                }
                res.append(data[i][j]);
            }
            res.append(""}"");
        }
    }
    res.append(""}"");
    return res.toString();
}","public void test5767() throws Throwable {
    double[][] doubleArray0 = new double[10][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    String string0 = realMatrixImpl0.toString();
    assertEquals(""RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}"", string0);
}","/**
 * Get a string representation for this matrix.
 * @return a string representation for this matrix
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test5868() throws Throwable {
    double[] doubleArray0 = new double[1];
    double[][] doubleArray1 = new double[9][0];
    doubleArray1[0] = doubleArray0;
    doubleArray1[1] = doubleArray0;
    doubleArray1[2] = doubleArray0;
    doubleArray1[3] = doubleArray0;
    doubleArray1[4] = doubleArray0;
    doubleArray1[5] = doubleArray0;
    doubleArray1[6] = doubleArray1[5];
    doubleArray1[7] = doubleArray0;
    doubleArray1[8] = doubleArray0;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, false);
    RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
    boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
    assertFalse(realMatrixImpl1.equals((Object) realMatrixImpl0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test5869() throws Throwable {
    double[] doubleArray0 = new double[1];
    double[][] doubleArray1 = new double[9][0];
    doubleArray1[0] = doubleArray0;
    doubleArray1[1] = doubleArray0;
    doubleArray1[2] = doubleArray0;
    doubleArray1[3] = doubleArray0;
    doubleArray1[4] = doubleArray0;
    doubleArray1[5] = doubleArray0;
    doubleArray1[6] = doubleArray1[5];
    doubleArray1[7] = doubleArray0;
    doubleArray1[8] = doubleArray0;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, false);
    RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
    boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test5970() throws Throwable {
    double[] doubleArray0 = new double[1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl0);
    assertTrue(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test6071() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
    Object object0 = new Object();
    boolean boolean0 = realMatrixImpl0.equals(object0);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test6172() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1409, 1409);
    double[] doubleArray0 = new double[3];
    RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
    boolean boolean0 = realMatrixImpl1.equals(realMatrixImpl0);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public boolean isSquare() {
    return (this.getColumnDimension() == this.getRowDimension());
}","public void test6173() throws Throwable {
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1409, 1409);
    double[] doubleArray0 = new double[3];
    RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
    boolean boolean0 = realMatrixImpl1.equals(realMatrixImpl0);
    assertTrue(realMatrixImpl0.isSquare());
}","/**
 * @return true if the matrix is square (rowDimension = columnDimension)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test6275() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 920.529;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.inverse();
    boolean boolean0 = realMatrixImpl0.equals(realMatrix0);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"double getNorm();","public void test6276() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 920.529;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrix realMatrix0 = realMatrixImpl0.inverse();
    boolean boolean0 = realMatrixImpl0.equals(realMatrix0);
    assertEquals(0.0010863318809076086, realMatrix0.getNorm(), 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">
 * maximum absolute row sum norm</a> of the matrix.
 *
 * @return norm
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof RealMatrixImpl == false) {
        return false;
    }
    RealMatrix m = (RealMatrix) object;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
        return false;
    }
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            if (Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry(row, col))) {
                return false;
            }
        }
    }
    return true;
}","public void test6377() throws Throwable {
    double[][] doubleArray0 = new double[1][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    RealMatrixImpl realMatrixImpl1 = realMatrixImpl0.subtract(realMatrixImpl0);
    boolean boolean0 = realMatrixImpl1.equals(realMatrixImpl0);
    assertTrue(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>RealMatrixImpl</code> instance with the same dimensions as this
 * and all corresponding matrix entries are equal.  Corresponding entries
 * are compared using {@link java.lang.Double#doubleToLongBits(double)}
 *
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public int hashCode() {
    int ret = 7;
    final int nRows = getRowDimension();
    final int nCols = getColumnDimension();
    ret = ret * 31 + nRows;
    ret = ret * 31 + nCols;
    for (int row = 0; row < nRows; row++) {
        final double[] dataRow = data[row];
        for (int col = 0; col < nCols; col++) {
            ret = ret * 31 + (11 * (row + 1) + 17 * (col + 1)) * MathUtils.hash(dataRow[col]);
        }
    }
    return ret;
}","public void test6478() throws Throwable {
    double[] doubleArray0 = new double[1];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    realMatrixImpl0.hashCode();
}","/**
 * Computes a hashcode for the matrix.
 *
 * @return hashcode for matrix
 */"
"//------------------------ Protected methods
/**
 *  Returns the LU decomposition as a RealMatrix.
 *  Returns a fresh copy of the cached LU matrix if this has been computed;
 *  otherwise the composition is computed and cached for use by other methods.
 *  Since a copy is returned in either case, changes to the returned matrix do not
 *  affect the LU decomposition property.
 * <p>
 * The matrix returned is a compact representation of the LU decomposition.
 * Elements below the main diagonal correspond to entries of the ""L"" matrix;
 * elements on and above the main diagonal correspond to entries of the ""U""
 * matrix.</p>
 * <p>
 * Example: <pre>
 *
 *     Returned matrix                L                  U
 *         2  3  1                   1  0  0            2  3  1
 *         5  4  6                   5  1  0            0  4  6
 *         1  7  8                   1  7  1            0  0  8
 * </pre>
 *
 * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>
 *  where permuteRows reorders the rows of the matrix to follow the order determined
 *  by the <a href=#getPermutation()>permutation</a> property.</p>
 *
 * @return LU decomposition matrix
 * @throws InvalidMatrixException if the matrix is non-square or singular.
 */
protected RealMatrix getLUMatrix() throws InvalidMatrixException {
    if (lu == null) {
        luDecompose();
    }
    return new RealMatrixImpl(lu);
}","public void test6581() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 920.529;
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
    double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
    realMatrixImpl0.getLUMatrix();
    assertArrayEquals(new double[] { 920.529 }, doubleArray0, 0.01);
}",""
"//------------------------ Protected methods
/**
 *  Returns the LU decomposition as a RealMatrix.
 *  Returns a fresh copy of the cached LU matrix if this has been computed;
 *  otherwise the composition is computed and cached for use by other methods.
 *  Since a copy is returned in either case, changes to the returned matrix do not
 *  affect the LU decomposition property.
 * <p>
 * The matrix returned is a compact representation of the LU decomposition.
 * Elements below the main diagonal correspond to entries of the ""L"" matrix;
 * elements on and above the main diagonal correspond to entries of the ""U""
 * matrix.</p>
 * <p>
 * Example: <pre>
 *
 *     Returned matrix                L                  U
 *         2  3  1                   1  0  0            2  3  1
 *         5  4  6                   5  1  0            0  4  6
 *         1  7  8                   1  7  1            0  0  8
 * </pre>
 *
 * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>
 *  where permuteRows reorders the rows of the matrix to follow the order determined
 *  by the <a href=#getPermutation()>permutation</a> property.</p>
 *
 * @return LU decomposition matrix
 * @throws InvalidMatrixException if the matrix is non-square or singular.
 */
protected RealMatrix getLUMatrix() throws InvalidMatrixException {
    if (lu == null) {
        luDecompose();
    }
    return new RealMatrixImpl(lu);
}","public void test6682() throws Throwable {
    double[][] doubleArray0 = new double[20][8];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
    try {
        realMatrixImpl0.getLUMatrix();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // LU decomposition requires that the matrix be square.
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}",""
