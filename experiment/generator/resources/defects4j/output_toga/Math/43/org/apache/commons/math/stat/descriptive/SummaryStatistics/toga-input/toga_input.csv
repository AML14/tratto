focal_method,test_prefix,docstring
"@Override
public String toString() {
    StringBuilder outBuffer = new StringBuilder();
    String endl = ""\n"";
    outBuffer.append(""SummaryStatistics:"").append(endl);
    outBuffer.append(""n: "").append(getN()).append(endl);
    outBuffer.append(""min: "").append(getMin()).append(endl);
    outBuffer.append(""max: "").append(getMax()).append(endl);
    outBuffer.append(""mean: "").append(getMean()).append(endl);
    outBuffer.append(""geometric mean: "").append(getGeometricMean()).append(endl);
    outBuffer.append(""variance: "").append(getVariance()).append(endl);
    outBuffer.append(""sum of squares: "").append(getSumsq()).append(endl);
    outBuffer.append(""standard deviation: "").append(getStandardDeviation()).append(endl);
    outBuffer.append(""sum of logs: "").append(getSumOfLogs()).append(endl);
    return outBuffer.toString();
}","public void test000() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    String string0 = summaryStatistics0.toString();
    assertEquals(""SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n"", string0);
}","/**
 * Generates a text report displaying summary statistics from values that
 * have been added.
 * @return String with line feeds displaying statistics
 * @since 1.2
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test011() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertTrue(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public long getN() {
    return n;
}","public void test013() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertEquals(0L, summaryStatistics1.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test024() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
    summaryStatistics0.setMeanImpl(storelessUnivariateStatistic0);
    summaryStatistics0.clear();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test035() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StandardDeviation standardDeviation0 = new StandardDeviation(true);
    summaryStatistics0.setSumImpl(standardDeviation0);
    SummaryStatistics summaryStatistics1 = new SummaryStatistics();
    boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
    assertEquals(0L, summaryStatistics1.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test036() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StandardDeviation standardDeviation0 = new StandardDeviation(true);
    summaryStatistics0.setSumImpl(standardDeviation0);
    SummaryStatistics summaryStatistics1 = new SummaryStatistics();
    boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public long getN() {
    return n;
}","public void test047() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.hashCode();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test058() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.getSecondMoment();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test069() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
    summaryStatistics0.setSumLogImpl(storelessUnivariateStatistic0);
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test0710() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.getSumLogImpl();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test0811() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    summaryStatistics1.addValue(0.0);
    boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
    assertEquals(1L, summaryStatistics1.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test0812() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    summaryStatistics1.addValue(0.0);
    boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public long getN() {
    return n;
}","public void test0913() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.getSumImpl();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test1014() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    Product product0 = new Product();
    summaryStatistics0.setMaxImpl(product0);
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"long getN();","public void test1115() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
    assertEquals(0L, statisticalSummary0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test1216() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.getMinImpl();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test1317() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.getMaxImpl();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test1418() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.getMeanImpl();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test1519() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.getPopulationVariance();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test1620() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.addValue((-674.23487837027));
    double double0 = summaryStatistics0.getStandardDeviation();
    assertEquals(1L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public double getStandardDeviation() {
    double stdDev = Double.NaN;
    if (getN() > 0) {
        if (getN() > 1) {
            stdDev = FastMath.sqrt(getVariance());
        } else {
            stdDev = 0.0;
        }
    }
    return stdDev;
}","public void test1621() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.addValue((-674.23487837027));
    double double0 = summaryStatistics0.getStandardDeviation();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the standard deviation of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p>
 * @return the standard deviation
 */"
"public long getN() {
    return n;
}","public void test1722() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SecondMoment secondMoment0 = summaryStatistics0.secondMoment;
    Variance variance0 = new Variance(false, secondMoment0);
    summaryStatistics0.setMeanImpl(variance0);
    summaryStatistics0.addValue(0.0);
    assertEquals(1L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test1823() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    Product product0 = new Product();
    summaryStatistics0.setVarianceImpl(product0);
    summaryStatistics0.addValue(Double.NaN);
    assertEquals(1L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test1924() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    Product product0 = new Product();
    summaryStatistics0.setGeoMeanImpl(product0);
    summaryStatistics0.addValue(Double.NaN);
    assertEquals(1L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test2025() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.addValue((-674.23487837027));
    summaryStatistics0.addValue(Double.NaN);
    double double0 = summaryStatistics0.getStandardDeviation();
    assertEquals(2L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public double getStandardDeviation() {
    double stdDev = Double.NaN;
    if (getN() > 0) {
        if (getN() > 1) {
            stdDev = FastMath.sqrt(getVariance());
        } else {
            stdDev = 0.0;
        }
    }
    return stdDev;
}","public void test2026() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.addValue((-674.23487837027));
    summaryStatistics0.addValue(Double.NaN);
    double double0 = summaryStatistics0.getStandardDeviation();
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Returns the standard deviation of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p>
 * @return the standard deviation
 */"
"public long getN() {
    return n;
}","public void test2127() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.clear();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test2228() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
    summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic0);
    summaryStatistics0.clear();
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test2329() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics0);
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2330() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics0);
    assertTrue(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2431() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    Product product0 = new Product();
    boolean boolean0 = summaryStatistics0.equals(product0);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public long getN() {
    return n;
}","public void test2432() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    Product product0 = new Product();
    boolean boolean0 = summaryStatistics0.equals(product0);
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test2533() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    summaryStatistics1.addValue((-1661.153641221));
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertEquals(1L, summaryStatistics1.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2534() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    summaryStatistics1.addValue((-1661.153641221));
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2635() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    assertTrue(summaryStatistics1.equals((Object) summaryStatistics0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2636() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    SumOfLogs sumOfLogs0 = new SumOfLogs();
    summaryStatistics1.setMeanImpl(sumOfLogs0);
    boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
    assertFalse(summaryStatistics1.equals((Object) summaryStatistics0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2637() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    SumOfLogs sumOfLogs0 = new SumOfLogs();
    summaryStatistics1.setMeanImpl(sumOfLogs0);
    boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2739() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    SumOfLogs sumOfLogs0 = summaryStatistics1.sumLog;
    summaryStatistics1.setMinImpl(sumOfLogs0);
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertFalse(summaryStatistics1.equals((Object) summaryStatistics0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2740() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    SumOfLogs sumOfLogs0 = summaryStatistics1.sumLog;
    summaryStatistics1.setMinImpl(sumOfLogs0);
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public long getN() {
    return n;
}","public void test2841() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.n = (-1740L);
    SummaryStatistics summaryStatistics1 = new SummaryStatistics();
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertEquals((-1740L), summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2842() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.n = (-1740L);
    SummaryStatistics summaryStatistics1 = new SummaryStatistics();
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2943() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics();
    SecondMoment secondMoment0 = summaryStatistics1.secondMoment;
    Variance variance0 = new Variance(secondMoment0);
    assertTrue(summaryStatistics1.equals((Object) summaryStatistics0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test2944() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics();
    SecondMoment secondMoment0 = summaryStatistics1.secondMoment;
    Variance variance0 = new Variance(secondMoment0);
    summaryStatistics1.setSumsqImpl(variance0);
    boolean boolean0 = summaryStatistics0.equals(summaryStatistics1);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test3046() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    SumOfSquares sumOfSquares0 = new SumOfSquares();
    summaryStatistics0.setVarianceImpl(sumOfSquares0);
    boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
    assertFalse(boolean0);
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public void setVarianceImpl(StorelessUnivariateStatistic varianceImpl) {
    checkEmpty();
    this.varianceImpl = varianceImpl;
}","public void test3147() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    summaryStatistics0.n = 1L;
    // Undeclared exception!
    try {
        summaryStatistics0.setVarianceImpl((StorelessUnivariateStatistic) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 1 values have been added before statistic is configured
        //
        verifyException(""org.apache.commons.math.stat.descriptive.SummaryStatistics"", e);
    }
}","/**
 * <p>
 * Sets the implementation for the variance.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p>
 * @param varianceImpl the StorelessUnivariateStatistic instance to use for
 *        computing the variance
 * @throws IllegalStateException if data has already been added (i.e if n >
 *         0)
 * @since 1.2
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test3248() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
    summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic0);
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    assertTrue(summaryStatistics1.equals((Object) summaryStatistics0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public long getN() {
    return n;
}","public void test3249() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
    summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic0);
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    assertEquals(0L, summaryStatistics1.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"public long getN() {
    return n;
}","public void test3350() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
    summaryStatistics0.setMeanImpl(storelessUnivariateStatistic0);
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    assertEquals(0L, summaryStatistics1.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
"@Override
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (object instanceof SummaryStatistics == false) {
        return false;
    }
    SummaryStatistics stat = (SummaryStatistics) object;
    return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance());
}","public void test3351() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
    summaryStatistics0.setMeanImpl(storelessUnivariateStatistic0);
    SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
    assertTrue(summaryStatistics1.equals((Object) summaryStatistics0));
}","/**
 * Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.
 * @param object the object to test equality against.
 * @return true if object equals this
 */"
"public long getN() {
    return n;
}","public void test3452() throws Throwable {
    SummaryStatistics summaryStatistics0 = new SummaryStatistics();
    SumOfLogs sumOfLogs0 = summaryStatistics0.sumLog;
    summaryStatistics0.setGeoMeanImpl(sumOfLogs0);
    SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
    assertEquals(0L, summaryStatistics0.getN());
}","/**
 * Returns the number of available values
 * @return The number of available values
 */"
