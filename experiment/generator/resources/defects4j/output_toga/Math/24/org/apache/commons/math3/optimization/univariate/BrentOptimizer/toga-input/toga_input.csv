focal_method,test_prefix,docstring
"public BrentOptimizer(double rel, double abs) {
    this(rel, abs, null);
}","public void test000() throws Throwable {
    BrentOptimizer brentOptimizer0 = null;
    try {
        brentOptimizer0 = new BrentOptimizer((-3.356118100840571E-7), (-3.356118100840571E-7));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -0 is smaller than the minimum (0)
        //
        verifyException(""org.apache.commons.math3.optimization.univariate.BrentOptimizer"", e);
    }
}","/**
 * The arguments are used for implementing the original stopping criterion
 * of Brent's algorithm.
 * {@code abs} and {@code rel} define a tolerance
 * {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.
 *
 * @param rel Relative threshold.
 * @param abs Absolute threshold.
 * @throws NotStrictlyPositiveException if {@code abs <= 0}.
 * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
 */"
"public BrentOptimizer(double rel, double abs) {
    this(rel, abs, null);
}","public void test011() throws Throwable {
    BrentOptimizer brentOptimizer0 = null;
    try {
        brentOptimizer0 = new BrentOptimizer(1034.718748, (-1728.0852664));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -1,728.085 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math3.optimization.univariate.BrentOptimizer"", e);
    }
}","/**
 * The arguments are used for implementing the original stopping criterion
 * of Brent's algorithm.
 * {@code abs} and {@code rel} define a tolerance
 * {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.
 *
 * @param rel Relative threshold.
 * @param abs Absolute threshold.
 * @throws NotStrictlyPositiveException if {@code abs <= 0}.
 * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
 */"
"public double getPoint() {
    return point;
}","public void test022() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(721.4313229246643, 721.4313229246643);
    Asin asin0 = new Asin();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(334, (UnivariateFunction) asin0, goalType0, 1445.23141598, 1445.23141598, 1.12996721591364E-202);
    assertEquals(721.4313229246643, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"public double getValue() {
    return value;
}","public void test033() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(721.4313229246643, 721.4313229246643);
    Asin asin0 = new Asin();
    GoalType goalType0 = GoalType.MAXIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(4687, (UnivariateFunction) asin0, goalType0, 3.0, (double) 334);
    assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 *
 * @return the stored value of the objective function.
 */"
"public double getPoint() {
    return point;
}","public void test034() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(721.4313229246643, 721.4313229246643);
    Asin asin0 = new Asin();
    GoalType goalType0 = GoalType.MAXIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(4687, (UnivariateFunction) asin0, goalType0, 3.0, (double) 334);
    assertEquals(168.5, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"@Override
protected UnivariatePointValuePair doOptimize() {
    final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
    final double lo = getMin();
    final double mid = getStartValue();
    final double hi = getMax();
    // Optional additional convergence criteria.
    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
    double a;
    double b;
    if (lo < hi) {
        a = lo;
        b = hi;
    } else {
        a = hi;
        b = lo;
    }
    double x = mid;
    double v = x;
    double w = x;
    double d = 0;
    double e = 0;
    double fx = computeObjectiveValue(x);
    if (!isMinim) {
        fx = -fx;
    }
    double fv = fx;
    double fw = fx;
    UnivariatePointValuePair previous = null;
    UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
    int iter = 0;
    while (true) {
        final double m = 0.5 * (a + b);
        final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
        final double tol2 = 2 * tol1;
        // Default stopping criterion.
        final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
        if (!stop) {
            double p = 0;
            double q = 0;
            double r = 0;
            double u = 0;
            if (FastMath.abs(e) > tol1) {
                // Fit parabola.
                r = (x - w) * (fx - fv);
                q = (x - v) * (fx - fw);
                p = (x - v) * q - (x - w) * r;
                q = 2 * (q - r);
                if (q > 0) {
                    p = -p;
                } else {
                    q = -q;
                }
                r = e;
                e = d;
                if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                    // Parabolic interpolation step.
                    d = p / q;
                    u = x + d;
                    // f must not be evaluated too close to a or b.
                    if (u - a < tol2 || b - u < tol2) {
                        if (x <= m) {
                            d = tol1;
                        } else {
                            d = -tol1;
                        }
                    }
                } else {
                    // Golden section step.
                    if (x < m) {
                        e = b - x;
                    } else {
                        e = a - x;
                    }
                    d = GOLDEN_SECTION * e;
                }
            } else {
                // Golden section step.
                if (x < m) {
                    e = b - x;
                } else {
                    e = a - x;
                }
                d = GOLDEN_SECTION * e;
            }
            // Update by at least ""tol1"".
            if (FastMath.abs(d) < tol1) {
                if (d >= 0) {
                    u = x + tol1;
                } else {
                    u = x - tol1;
                }
            } else {
                u = x + d;
            }
            double fu = computeObjectiveValue(u);
            if (!isMinim) {
                fu = -fu;
            }
            // User-defined convergence checker.
            previous = current;
            current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
            if (checker != null) {
                if (checker.converged(iter, previous, current)) {
                    return current;
                }
            }
            // Update a, b, v, w and x.
            if (fu <= fx) {
                if (u < x) {
                    b = x;
                } else {
                    a = x;
                }
                v = w;
                fv = fw;
                w = x;
                fw = fx;
                x = u;
                fx = fu;
            } else {
                if (u < x) {
                    a = u;
                } else {
                    b = u;
                }
                if (fu <= fw || Precision.equals(w, x)) {
                    v = w;
                    fv = fw;
                    w = u;
                    fw = fu;
                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                    v = u;
                    fv = fu;
                }
            }
        } else {
            // Default termination (Brent's criterion).
            return current;
        }
        ++iter;
    }
}","public void test045() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(1249.2, 1249.2);
    Ceil ceil0 = new Ceil();
    GoalType goalType0 = GoalType.MAXIMIZE;
    brentOptimizer0.optimize(2145249207, (UnivariateFunction) ceil0, goalType0, 1249.2, (-1.8740018211089393E288), (double) 2145249207);
    brentOptimizer0.doOptimize();
    brentOptimizer0.doOptimize();
    // Undeclared exception!
    brentOptimizer0.doOptimize();
}","/**
 * {@inheritDoc}
 */"
"public UnivariatePointValuePair optimize(int maxEval, UnivariateFunction f, GoalType goalType, double min, double max, double startValue) {
    // Checks.
    if (f == null) {
        throw new NullArgumentException();
    }
    if (goalType == null) {
        throw new NullArgumentException();
    }
    // Reset.
    searchMin = min;
    searchMax = max;
    searchStart = startValue;
    goal = goalType;
    function = f;
    evaluations.setMaximalCount(maxEval);
    evaluations.resetCount();
    // Perform computation.
    return doOptimize();
}","public void test056() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(3038.8573290628333, 3038.8573290628333);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-2153.3921348511344), 2918, 3038.8573290628333);
    GoalType goalType0 = GoalType.MAXIMIZE;
    brentOptimizer0.optimize(2144511069, (UnivariateFunction) harmonicOscillator0, goalType0, (-508.0), (-7.049068240916723E166), (double) 2144511069);
}","/**
 * {@inheritDoc}
 */"
"@Override
protected UnivariatePointValuePair doOptimize() {
    final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
    final double lo = getMin();
    final double mid = getStartValue();
    final double hi = getMax();
    // Optional additional convergence criteria.
    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
    double a;
    double b;
    if (lo < hi) {
        a = lo;
        b = hi;
    } else {
        a = hi;
        b = lo;
    }
    double x = mid;
    double v = x;
    double w = x;
    double d = 0;
    double e = 0;
    double fx = computeObjectiveValue(x);
    if (!isMinim) {
        fx = -fx;
    }
    double fv = fx;
    double fw = fx;
    UnivariatePointValuePair previous = null;
    UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
    int iter = 0;
    while (true) {
        final double m = 0.5 * (a + b);
        final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
        final double tol2 = 2 * tol1;
        // Default stopping criterion.
        final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
        if (!stop) {
            double p = 0;
            double q = 0;
            double r = 0;
            double u = 0;
            if (FastMath.abs(e) > tol1) {
                // Fit parabola.
                r = (x - w) * (fx - fv);
                q = (x - v) * (fx - fw);
                p = (x - v) * q - (x - w) * r;
                q = 2 * (q - r);
                if (q > 0) {
                    p = -p;
                } else {
                    q = -q;
                }
                r = e;
                e = d;
                if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                    // Parabolic interpolation step.
                    d = p / q;
                    u = x + d;
                    // f must not be evaluated too close to a or b.
                    if (u - a < tol2 || b - u < tol2) {
                        if (x <= m) {
                            d = tol1;
                        } else {
                            d = -tol1;
                        }
                    }
                } else {
                    // Golden section step.
                    if (x < m) {
                        e = b - x;
                    } else {
                        e = a - x;
                    }
                    d = GOLDEN_SECTION * e;
                }
            } else {
                // Golden section step.
                if (x < m) {
                    e = b - x;
                } else {
                    e = a - x;
                }
                d = GOLDEN_SECTION * e;
            }
            // Update by at least ""tol1"".
            if (FastMath.abs(d) < tol1) {
                if (d >= 0) {
                    u = x + tol1;
                } else {
                    u = x - tol1;
                }
            } else {
                u = x + d;
            }
            double fu = computeObjectiveValue(u);
            if (!isMinim) {
                fu = -fu;
            }
            // User-defined convergence checker.
            previous = current;
            current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
            if (checker != null) {
                if (checker.converged(iter, previous, current)) {
                    return current;
                }
            }
            // Update a, b, v, w and x.
            if (fu <= fx) {
                if (u < x) {
                    b = x;
                } else {
                    a = x;
                }
                v = w;
                fv = fw;
                w = x;
                fw = fx;
                x = u;
                fx = fu;
            } else {
                if (u < x) {
                    a = u;
                } else {
                    b = u;
                }
                if (fu <= fw || Precision.equals(w, x)) {
                    v = w;
                    fv = fw;
                    w = u;
                    fw = fu;
                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                    v = u;
                    fv = fu;
                }
            }
        } else {
            // Default termination (Brent's criterion).
            return current;
        }
        ++iter;
    }
}","public void test067() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.0, 1.0);
    Abs abs0 = new Abs();
    GoalType goalType0 = GoalType.MAXIMIZE;
    brentOptimizer0.optimize(17, (UnivariateFunction) abs0, goalType0, 2654.49, 549.35120909645, 1.0);
    brentOptimizer0.doOptimize();
}","/**
 * {@inheritDoc}
 */"
"public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) {
    super(checker);
    if (rel < MIN_RELATIVE_TOLERANCE) {
        throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
    }
    if (abs <= 0) {
        throw new NotStrictlyPositiveException(abs);
    }
    relativeThreshold = rel;
    absoluteThreshold = abs;
}","public void test078() throws Throwable {
    ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    BrentOptimizer brentOptimizer0 = null;
    try {
        brentOptimizer0 = new BrentOptimizer((-34.0), (-34.0), convergenceChecker0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -34 is smaller than the minimum (0)
        //
        verifyException(""org.apache.commons.math3.optimization.univariate.BrentOptimizer"", e);
    }
}","/**
 * The arguments are used implement the original stopping criterion
 * of Brent's algorithm.
 * {@code abs} and {@code rel} define a tolerance
 * {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.
 *
 * @param rel Relative threshold.
 * @param abs Absolute threshold.
 * @param checker Additional, user-defined, convergence checking
 * procedure.
 * @throws NotStrictlyPositiveException if {@code abs <= 0}.
 * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
 */"
"public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) {
    super(checker);
    if (rel < MIN_RELATIVE_TOLERANCE) {
        throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
    }
    if (abs <= 0) {
        throw new NotStrictlyPositiveException(abs);
    }
    relativeThreshold = rel;
    absoluteThreshold = abs;
}","public void test089() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.9808930158615112, 0.9808930158615112, (ConvergenceChecker<UnivariatePointValuePair>) null);
}","/**
 * The arguments are used implement the original stopping criterion
 * of Brent's algorithm.
 * {@code abs} and {@code rel} define a tolerance
 * {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.
 *
 * @param rel Relative threshold.
 * @param abs Absolute threshold.
 * @param checker Additional, user-defined, convergence checking
 * procedure.
 * @throws NotStrictlyPositiveException if {@code abs <= 0}.
 * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
 */"
"public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) {
    super(checker);
    if (rel < MIN_RELATIVE_TOLERANCE) {
        throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
    }
    if (abs <= 0) {
        throw new NotStrictlyPositiveException(abs);
    }
    relativeThreshold = rel;
    absoluteThreshold = abs;
}","public void test0910() throws Throwable {
    ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
    BrentOptimizer brentOptimizer0 = null;
    try {
        brentOptimizer0 = new BrentOptimizer(805.80288612552, (-1661.1974), convergenceChecker0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -1,661.197 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math3.optimization.univariate.BrentOptimizer"", e);
    }
}","/**
 * The arguments are used implement the original stopping criterion
 * of Brent's algorithm.
 * {@code abs} and {@code rel} define a tolerance
 * {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.
 *
 * @param rel Relative threshold.
 * @param abs Absolute threshold.
 * @param checker Additional, user-defined, convergence checking
 * procedure.
 * @throws NotStrictlyPositiveException if {@code abs <= 0}.
 * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
 */"
"@Override
protected UnivariatePointValuePair doOptimize() {
    final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
    final double lo = getMin();
    final double mid = getStartValue();
    final double hi = getMax();
    // Optional additional convergence criteria.
    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
    double a;
    double b;
    if (lo < hi) {
        a = lo;
        b = hi;
    } else {
        a = hi;
        b = lo;
    }
    double x = mid;
    double v = x;
    double w = x;
    double d = 0;
    double e = 0;
    double fx = computeObjectiveValue(x);
    if (!isMinim) {
        fx = -fx;
    }
    double fv = fx;
    double fw = fx;
    UnivariatePointValuePair previous = null;
    UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
    int iter = 0;
    while (true) {
        final double m = 0.5 * (a + b);
        final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
        final double tol2 = 2 * tol1;
        // Default stopping criterion.
        final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
        if (!stop) {
            double p = 0;
            double q = 0;
            double r = 0;
            double u = 0;
            if (FastMath.abs(e) > tol1) {
                // Fit parabola.
                r = (x - w) * (fx - fv);
                q = (x - v) * (fx - fw);
                p = (x - v) * q - (x - w) * r;
                q = 2 * (q - r);
                if (q > 0) {
                    p = -p;
                } else {
                    q = -q;
                }
                r = e;
                e = d;
                if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                    // Parabolic interpolation step.
                    d = p / q;
                    u = x + d;
                    // f must not be evaluated too close to a or b.
                    if (u - a < tol2 || b - u < tol2) {
                        if (x <= m) {
                            d = tol1;
                        } else {
                            d = -tol1;
                        }
                    }
                } else {
                    // Golden section step.
                    if (x < m) {
                        e = b - x;
                    } else {
                        e = a - x;
                    }
                    d = GOLDEN_SECTION * e;
                }
            } else {
                // Golden section step.
                if (x < m) {
                    e = b - x;
                } else {
                    e = a - x;
                }
                d = GOLDEN_SECTION * e;
            }
            // Update by at least ""tol1"".
            if (FastMath.abs(d) < tol1) {
                if (d >= 0) {
                    u = x + tol1;
                } else {
                    u = x - tol1;
                }
            } else {
                u = x + d;
            }
            double fu = computeObjectiveValue(u);
            if (!isMinim) {
                fu = -fu;
            }
            // User-defined convergence checker.
            previous = current;
            current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
            if (checker != null) {
                if (checker.converged(iter, previous, current)) {
                    return current;
                }
            }
            // Update a, b, v, w and x.
            if (fu <= fx) {
                if (u < x) {
                    b = x;
                } else {
                    a = x;
                }
                v = w;
                fv = fw;
                w = x;
                fw = fx;
                x = u;
                fx = fu;
            } else {
                if (u < x) {
                    a = u;
                } else {
                    b = u;
                }
                if (fu <= fw || Precision.equals(w, x)) {
                    v = w;
                    fv = fw;
                    w = u;
                    fw = fu;
                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                    v = u;
                    fv = fu;
                }
            }
        } else {
            // Default termination (Brent's criterion).
            return current;
        }
        ++iter;
    }
}","public void test1011() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.0, 1.0);
    // Undeclared exception!
    try {
        brentOptimizer0.doOptimize();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (0) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
protected UnivariatePointValuePair doOptimize() {
    final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
    final double lo = getMin();
    final double mid = getStartValue();
    final double hi = getMax();
    // Optional additional convergence criteria.
    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
    double a;
    double b;
    if (lo < hi) {
        a = lo;
        b = hi;
    } else {
        a = hi;
        b = lo;
    }
    double x = mid;
    double v = x;
    double w = x;
    double d = 0;
    double e = 0;
    double fx = computeObjectiveValue(x);
    if (!isMinim) {
        fx = -fx;
    }
    double fv = fx;
    double fw = fx;
    UnivariatePointValuePair previous = null;
    UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
    int iter = 0;
    while (true) {
        final double m = 0.5 * (a + b);
        final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
        final double tol2 = 2 * tol1;
        // Default stopping criterion.
        final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
        if (!stop) {
            double p = 0;
            double q = 0;
            double r = 0;
            double u = 0;
            if (FastMath.abs(e) > tol1) {
                // Fit parabola.
                r = (x - w) * (fx - fv);
                q = (x - v) * (fx - fw);
                p = (x - v) * q - (x - w) * r;
                q = 2 * (q - r);
                if (q > 0) {
                    p = -p;
                } else {
                    q = -q;
                }
                r = e;
                e = d;
                if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                    // Parabolic interpolation step.
                    d = p / q;
                    u = x + d;
                    // f must not be evaluated too close to a or b.
                    if (u - a < tol2 || b - u < tol2) {
                        if (x <= m) {
                            d = tol1;
                        } else {
                            d = -tol1;
                        }
                    }
                } else {
                    // Golden section step.
                    if (x < m) {
                        e = b - x;
                    } else {
                        e = a - x;
                    }
                    d = GOLDEN_SECTION * e;
                }
            } else {
                // Golden section step.
                if (x < m) {
                    e = b - x;
                } else {
                    e = a - x;
                }
                d = GOLDEN_SECTION * e;
            }
            // Update by at least ""tol1"".
            if (FastMath.abs(d) < tol1) {
                if (d >= 0) {
                    u = x + tol1;
                } else {
                    u = x - tol1;
                }
            } else {
                u = x + d;
            }
            double fu = computeObjectiveValue(u);
            if (!isMinim) {
                fu = -fu;
            }
            // User-defined convergence checker.
            previous = current;
            current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
            if (checker != null) {
                if (checker.converged(iter, previous, current)) {
                    return current;
                }
            }
            // Update a, b, v, w and x.
            if (fu <= fx) {
                if (u < x) {
                    b = x;
                } else {
                    a = x;
                }
                v = w;
                fv = fw;
                w = x;
                fw = fx;
                x = u;
                fx = fu;
            } else {
                if (u < x) {
                    a = u;
                } else {
                    b = u;
                }
                if (fu <= fw || Precision.equals(w, x)) {
                    v = w;
                    fv = fw;
                    w = u;
                    fw = fu;
                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                    v = u;
                    fv = fu;
                }
            }
        } else {
            // Default termination (Brent's criterion).
            return current;
        }
        ++iter;
    }
}","public void test1112() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(1881.1, 3.0);
    Cbrt cbrt0 = new Cbrt();
    GoalType goalType0 = GoalType.MINIMIZE;
    brentOptimizer0.optimize(42, (UnivariateFunction) cbrt0, goalType0, 5.0, (double) 0, (double) 0);
    brentOptimizer0.doOptimize();
}","/**
 * {@inheritDoc}
 */"
"public UnivariatePointValuePair optimize(int maxEval, UnivariateFunction f, GoalType goalType, double min, double max, double startValue) {
    // Checks.
    if (f == null) {
        throw new NullArgumentException();
    }
    if (goalType == null) {
        throw new NullArgumentException();
    }
    // Reset.
    searchMin = min;
    searchMax = max;
    searchStart = startValue;
    goal = goalType;
    function = f;
    evaluations.setMaximalCount(maxEval);
    evaluations.resetCount();
    // Perform computation.
    return doOptimize();
}","public void test1213() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(3052.9454376443, 3052.9454376443);
    GoalType goalType0 = GoalType.MINIMIZE;
    Acos acos0 = new Acos();
    brentOptimizer0.optimize(2944, (UnivariateFunction) acos0, goalType0, 3.1780704338483322E165, (-1451.669414), 1445.23141598);
}","/**
 * {@inheritDoc}
 */"
