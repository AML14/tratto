/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 11:18:13 GMT 2023
 */
package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Abs;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.function.Asin;
import org.apache.commons.math3.analysis.function.Cbrt;
import org.apache.commons.math3.analysis.function.Ceil;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BrentOptimizer brentOptimizer0 = null;
        brentOptimizer0 = new BrentOptimizer((-3.356118100840571E-7), (-3.356118100840571E-7));
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BrentOptimizer brentOptimizer0 = null;
        brentOptimizer0 = new BrentOptimizer(1034.718748, (-1728.0852664));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(721.4313229246643, 721.4313229246643);
        Asin asin0 = new Asin();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(334, (UnivariateFunction) asin0, goalType0, 1445.23141598, 1445.23141598, 1.12996721591364E-202);
        univariatePointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(721.4313229246643, 721.4313229246643);
        Asin asin0 = new Asin();
        GoalType goalType0 = GoalType.MAXIMIZE;
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(4687, (UnivariateFunction) asin0, goalType0, 3.0, (double) 334);
        univariatePointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(721.4313229246643, 721.4313229246643);
        Asin asin0 = new Asin();
        GoalType goalType0 = GoalType.MAXIMIZE;
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(4687, (UnivariateFunction) asin0, goalType0, 3.0, (double) 334);
        univariatePointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(1249.2, 1249.2);
        Ceil ceil0 = new Ceil();
        GoalType goalType0 = GoalType.MAXIMIZE;
        brentOptimizer0.optimize(2145249207, (UnivariateFunction) ceil0, goalType0, 1249.2, (-1.8740018211089393E288), (double) 2145249207);
        brentOptimizer0.doOptimize();
        brentOptimizer0.doOptimize();
        // Undeclared exception!
        brentOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(3038.8573290628333, 3038.8573290628333);
        HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-2153.3921348511344), 2918, 3038.8573290628333);
        GoalType goalType0 = GoalType.MAXIMIZE;
        brentOptimizer0.optimize(2144511069, (UnivariateFunction) harmonicOscillator0, goalType0, (-508.0), (-7.049068240916723E166), (double) 2144511069);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.0, 1.0);
        Abs abs0 = new Abs();
        GoalType goalType0 = GoalType.MAXIMIZE;
        brentOptimizer0.optimize(17, (UnivariateFunction) abs0, goalType0, 2654.49, 549.35120909645, 1.0);
        brentOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BrentOptimizer brentOptimizer0 = null;
        brentOptimizer0 = new BrentOptimizer((-34.0), (-34.0), convergenceChecker0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.9808930158615112, 0.9808930158615112, (ConvergenceChecker<UnivariatePointValuePair>) null);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BrentOptimizer brentOptimizer0 = null;
        brentOptimizer0 = new BrentOptimizer(805.80288612552, (-1661.1974), convergenceChecker0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.0, 1.0);
        brentOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(1881.1, 3.0);
        Cbrt cbrt0 = new Cbrt();
        GoalType goalType0 = GoalType.MINIMIZE;
        brentOptimizer0.optimize(42, (UnivariateFunction) cbrt0, goalType0, 5.0, (double) 0, (double) 0);
        brentOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        BrentOptimizer brentOptimizer0 = new BrentOptimizer(3052.9454376443, 3052.9454376443);
        GoalType goalType0 = GoalType.MINIMIZE;
        Acos acos0 = new Acos();
        brentOptimizer0.optimize(2944, (UnivariateFunction) acos0, goalType0, 3.1780704338483322E165, (-1451.669414), 1445.23141598);
    }
}
