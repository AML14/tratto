focal_method,test_prefix,docstring
"public double getPoint() {
    return point;
}","public void test000() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.48008447885513306, 0.48008447885513306);
    Expm1 expm1_0 = new Expm1();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1458271765, (UnivariateFunction) expm1_0, goalType0, 0.48008447885513306, 0.48008447885513306, (double) 1458271765);
    assertEquals(30.190590761630535, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"public BrentOptimizer(double rel, double abs) {
    this(rel, abs, null);
}","public void test011() throws Throwable {
    BrentOptimizer brentOptimizer0 = null;
    try {
        brentOptimizer0 = new BrentOptimizer((-958.04074868), (-958.04074868));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -958.041 is smaller than the minimum (0)
        //
        verifyException(""org.apache.commons.math3.optimization.univariate.BrentOptimizer"", e);
    }
}","/**
 * The arguments are used for implementing the original stopping criterion
 * of Brent's algorithm.
 * {@code abs} and {@code rel} define a tolerance
 * {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.
 *
 * @param rel Relative threshold.
 * @param abs Absolute threshold.
 * @throws NotStrictlyPositiveException if {@code abs <= 0}.
 * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
 */"
"public BrentOptimizer(double rel, double abs) {
    this(rel, abs, null);
}","public void test022() throws Throwable {
    BrentOptimizer brentOptimizer0 = null;
    try {
        brentOptimizer0 = new BrentOptimizer(3968.4, (-0.0492602052561105));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -0.049 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math3.optimization.univariate.BrentOptimizer"", e);
    }
}","/**
 * The arguments are used for implementing the original stopping criterion
 * of Brent's algorithm.
 * {@code abs} and {@code rel} define a tolerance
 * {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.
 *
 * @param rel Relative threshold.
 * @param abs Absolute threshold.
 * @throws NotStrictlyPositiveException if {@code abs <= 0}.
 * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
 */"
"public double getPoint() {
    return point;
}","public void test033() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(3.655589133934081E-8, 3.655589133934081E-8);
    Acosh acosh0 = new Acosh();
    GoalType goalType0 = GoalType.MAXIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(925, (UnivariateFunction) acosh0, goalType0, (-2019.678552), (-2019.678552), (double) 925);
    assertEquals(924.9999661492446, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"public double getPoint() {
    return point;
}","public void test044() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(3.655589133934081E-8, 3.655589133934081E-8);
    Log1p log1p0 = new Log1p();
    GoalType goalType0 = GoalType.MAXIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1967532823, (UnivariateFunction) log1p0, goalType0, 3.655589133934081E-8, (double) 1967532823, (double) 1967532823);
    assertEquals(1.967532751075084E9, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"public double getPoint() {
    return point;
}","public void test055() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.097, 0.097);
    Inverse inverse0 = new Inverse();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(927, (UnivariateFunction) inverse0, goalType0, 0.097, (double) 927);
    assertEquals(788.4390227447333, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"public double getPoint() {
    return point;
}","public void test066() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(5.0, 5.0);
    Expm1 expm1_0 = new Expm1();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2147423806, (UnivariateFunction) expm1_0, goalType0, (double) 2147423806, 5.0, 5.0);
    assertEquals(35.0, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"public double getPoint() {
    return point;
}","public void test077() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.5415972471237183, 0.5415972471237183);
    Acosh acosh0 = new Acosh();
    GoalType goalType0 = GoalType.MAXIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2147483592, (UnivariateFunction) acosh0, goalType0, (double) 2147483592, (double) 2147483592, 0.5415972471237183);
    assertEquals(4.126265450918533, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"public UnivariatePointValuePair optimize(int maxEval, UnivariateFunction f, GoalType goalType, double min, double max, double startValue) {
    // Checks.
    if (f == null) {
        throw new NullArgumentException();
    }
    if (goalType == null) {
        throw new NullArgumentException();
    }
    // Reset.
    searchMin = min;
    searchMax = max;
    searchStart = startValue;
    goal = goalType;
    function = f;
    evaluations.setMaximalCount(maxEval);
    evaluations.resetCount();
    // Perform computation.
    return doOptimize();
}","public void test088() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(2735.968463865598, 2735.968463865598);
    Expm1 expm1_0 = new Expm1();
    GoalType goalType0 = GoalType.MINIMIZE;
    // Undeclared exception!
    brentOptimizer0.optimize(2147483625, (UnivariateFunction) expm1_0, goalType0, 2735.968463865598, Double.NEGATIVE_INFINITY, (double) 2147483625);
}","/**
 * {@inheritDoc}
 */"
"public double getValue() {
    return value;
}","public void test099() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(2727.5728673977655, 2727.5728673977655);
    Log1p log1p0 = new Log1p();
    GoalType goalType0 = GoalType.MAXIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1754, (UnivariateFunction) log1p0, goalType0, (double) 1754, (double) 1754, (double) 1754);
    assertEquals(7.470224135899966, univariatePointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 *
 * @return the stored value of the objective function.
 */"
"public UnivariatePointValuePair optimize(int maxEval, UnivariateFunction f, GoalType goalType, double min, double max, double startValue) {
    // Checks.
    if (f == null) {
        throw new NullArgumentException();
    }
    if (goalType == null) {
        throw new NullArgumentException();
    }
    // Reset.
    searchMin = min;
    searchMax = max;
    searchStart = startValue;
    goal = goalType;
    function = f;
    evaluations.setMaximalCount(maxEval);
    evaluations.resetCount();
    // Perform computation.
    return doOptimize();
}","public void test0910() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(2727.5728673977655, 2727.5728673977655);
    Log1p log1p0 = new Log1p();
    GoalType goalType0 = GoalType.MAXIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1754, (UnivariateFunction) log1p0, goalType0, (double) 1754, (double) 1754, (double) 1754);
    assertNotNull(univariatePointValuePair0);
}","/**
 * {@inheritDoc}
 */"
"public double getPoint() {
    return point;
}","public void test0911() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(2727.5728673977655, 2727.5728673977655);
    Log1p log1p0 = new Log1p();
    GoalType goalType0 = GoalType.MAXIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1754, (UnivariateFunction) log1p0, goalType0, (double) 1754, (double) 1754, (double) 1754);
    assertEquals(1754.0, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
"public double getPoint() {
    return point;
}","public void test1012() throws Throwable {
    BrentOptimizer brentOptimizer0 = new BrentOptimizer(2731.088474737597, 2731.088474737597);
    Asin asin0 = new Asin();
    GoalType goalType0 = GoalType.MINIMIZE;
    UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2147483603, (UnivariateFunction) asin0, goalType0, (double) 2147483603, 2731.088474737597, 2731.088474737597);
    assertEquals(1.7463079343324553E7, univariatePointValuePair0.getPoint(), 0.01);
}","/**
 * Get the point.
 *
 * @return the point.
 */"
