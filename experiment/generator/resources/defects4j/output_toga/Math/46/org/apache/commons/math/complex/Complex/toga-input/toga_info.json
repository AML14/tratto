{
  "test0321" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0321() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n    Complex complex22 = complex21.tanh();\n    Complex complex23 = complex22.INF.pow(complex16);\n    String string0 = complex8.toString();\n}",
    "testName" : "test0321"
  },
  "test2544" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2544() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0);\n    Complex complex1 = complex0.I.divide((-4225.05308651376));\n    Complex complex2 = complex0.atan();\n    Complex complex3 = complex0.sqrt();\n    Complex complex4 = complex2.atan();\n    complex3.getArgument();\n    complex4.ONE.toString();\n    complex1.ONE.hashCode();\n    complex3.toString();\n    Complex complex5 = Complex.valueOf((-4225.05308651376));\n    Complex complex6 = complex1.divide(0.0);\n    complex6.conjugate();\n    complex4.divide(complex0);\n    complex5.conjugate();\n    complex5.isInfinite();\n}",
    "testName" : "test2544"
  },
  "test0322" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0322() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n    Complex complex22 = complex21.tanh();\n    Complex complex23 = complex22.INF.pow(complex16);\n    String string0 = complex8.toString();\n    complex8.equals((Object) complex17);\n}",
    "testName" : "test0322"
  },
  "test1534" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1534() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.INF.abs();\n    Complex complex1 = complex0.sqrt();\n    Complex complex2 = complex1.NaN.add((-4935.6723));\n    Complex complex3 = complex1.ZERO.subtract(1704.3733911);\n    complex2.INF.abs();\n    Complex complex4 = complex3.INF.cos();\n    complex4.ONE.tan();\n    Complex complex5 = complex1.conjugate();\n    complex0.ZERO.subtract(complex2);\n    complex0.toString();\n    complex3.abs();\n    complex5.hashCode();\n    Complex complex6 = complex5.negate();\n    complex6.NaN.negate();\n    complex5.hashCode();\n    complex6.getReal();\n    complex4.add(Double.NaN);\n}",
    "testName" : "test1534"
  },
  "test2342" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2342() throws Throwable {\n    Complex complex0 = new Complex(1.0);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex1.ONE.sqrt();\n    Complex.valueOf(0.49999999999999994);\n    Complex complex3 = complex0.INF.conjugate();\n    complex0.add((-525.9438461004012));\n    complex0.equals(complex1);\n    Complex complex4 = complex3.tanh();\n    complex0.NaN.subtract(1.0);\n    complex3.getImaginary();\n    Complex complex5 = Complex.valueOf(Double.NaN);\n    Complex complex6 = complex5.add(complex4);\n    complex6.conjugate();\n    Complex complex7 = complex1.ZERO.cosh();\n    complex7.cosh();\n    complex7.ZERO.toString();\n    Complex complex8 = complex3.tanh();\n    complex8.add(complex5);\n    complex1.sin();\n    complex1.getReal();\n    Complex complex9 = complex4.subtract(complex5);\n    Complex.valueOf((-525.9438461004012));\n    complex9.abs();\n    complex8.tan();\n    Complex.valueOf(Double.NaN, Double.NaN);\n    complex2.isInfinite();\n    complex8.multiply(0.0);\n}",
    "testName" : "test2342"
  },
  "test3554" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3554() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.ONE.acos();\n    complex1.INF.divide((-448.3463));\n    Complex complex2 = complex0.asin();\n    Complex complex3 = complex2.INF.atan();\n    complex3.I.exp();\n    Complex complex4 = Complex.valueOf(770.0);\n    Complex complex5 = complex4.I.asin();\n    complex0.getField();\n    complex3.getArgument();\n    complex1.multiply(complex5);\n}",
    "testName" : "test3554"
  },
  "test0320" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0320() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n    Complex complex22 = complex21.tanh();\n    Complex complex23 = complex22.INF.pow(complex16);\n    String string0 = complex8.toString();\n    complex8.equals((Object) complex18);\n}",
    "testName" : "test0320"
  },
  "test1332" : {
    "methodSignature" : "protected final Object readResolve()",
    "methodName" : "readResolve",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1332() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.ONE;\n    Complex complex2 = complex0.add(complex1);\n    complex2.NaN.hashCode();\n    complex0.getImaginary();\n    complex0.ONE.add(complex1);\n    complex1.NaN.getArgument();\n    Complex complex3 = new Complex(Double.NaN, Double.NaN);\n    complex0.NaN.subtract(complex3);\n    Complex complex4 = complex2.pow(complex3);\n    complex2.readResolve();\n    complex3.getImaginary();\n    complex4.readResolve();\n}",
    "testName" : "test1332"
  },
  "test2948" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2948() throws Throwable {\n    Complex complex0 = Complex.valueOf(1.0);\n    complex0.abs();\n    Complex complex1 = complex0.sinh();\n    Complex complex2 = complex1.NaN.pow(1.0);\n    complex1.INF.toString();\n    Complex complex3 = complex0.multiply(1.0);\n    Complex complex4 = complex2.NaN.asin();\n    Complex complex5 = complex2.cos();\n    Complex complex6 = complex5.NaN.cosh();\n    complex1.abs();\n    complex3.ZERO.tan();\n    Complex complex7 = complex0.pow(1.0);\n    complex7.ONE.exp();\n    complex7.I.acos();\n    complex2.ONE.readResolve();\n    complex5.add((-920.35809));\n    complex1.atan();\n    complex3.divide(1.0);\n    complex3.getArgument();\n    complex4.hashCode();\n    complex6.divide(407.95183982683);\n}",
    "testName" : "test2948"
  },
  "test0726" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0726() throws Throwable {\n    Complex complex0 = Complex.valueOf(1.0, 1655.21305);\n    Complex complex1 = complex0.NaN.createComplex(1.0, 1.0);\n    Complex complex2 = complex1.ZERO.atan();\n    complex1.ZERO.getArgument();\n    Complex complex3 = Complex.valueOf(3859.182206032, 1.0);\n    Complex complex4 = complex0.multiply(1.0);\n    complex2.hashCode();\n    Complex complex5 = complex0.sqrt();\n    complex5.INF.add(0.0);\n    Complex complex6 = complex4.I.divide(complex3);\n    complex6.ZERO.getArgument();\n    complex5.ONE.hashCode();\n    complex5.getReal();\n    Complex complex7 = complex4.negate();\n    complex5.ZERO.subtract(1.0);\n    Complex complex8 = Complex.valueOf(1.0, -0.0);\n    complex2.tan();\n    complex5.getArgument();\n    Complex complex9 = Complex.valueOf(1.0, 0.0);\n    complex8.pow(1986.200292018337);\n    complex4.nthRoot(3109);\n    complex9.getArgument();\n    complex7.hashCode();\n    complex0.toString();\n}",
    "testName" : "test0726"
  },
  "test1938" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1938() throws Throwable {\n    Complex complex0 = new Complex(0.041666663879186654, 0.041666663879186654);\n    Complex complex1 = complex0.sqrt();\n    Complex complex2 = complex0.ZERO.subtract(complex1);\n    Complex complex3 = complex2.exp();\n    complex1.NaN.add(complex0);\n    Complex complex4 = complex0.I.cos();\n    Complex complex5 = complex4.conjugate();\n    Complex complex6 = Complex.valueOf((-1.0));\n    complex6.ZERO.acos();\n    complex1.I.divide((-1.0));\n    complex1.ZERO.getArgument();\n    Complex complex7 = complex1.INF.tanh();\n    complex7.INF.tan();\n    complex0.readResolve();\n    Complex complex8 = complex0.cosh();\n    complex2.NaN.negate();\n    complex2.INF.getArgument();\n    Complex complex9 = complex8.I.sinh();\n    Complex.valueOf((-1.0));\n    complex1.add(2807.984);\n    complex0.INF.divide(complex8);\n    complex5.add(1.2958646899018938E-9);\n    complex3.acos();\n    complex9.hashCode();\n}",
    "testName" : "test1938"
  },
  "test2746" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2746() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.acos();\n    complex1.I.readResolve();\n    Complex complex2 = complex0.conjugate();\n    complex2.I.exp();\n    Complex complex3 = complex1.add(complex0);\n    Complex complex4 = complex0.NaN.sqrt1z();\n    Complex complex5 = complex0.multiply(1.0);\n    Complex complex6 = complex5.divide((-2983.168584589799));\n    complex0.getImaginary();\n    complex6.divide(complex5);\n    complex5.getArgument();\n    complex0.getImaginary();\n    complex6.negate();\n    Object object0 = complex3.readResolve();\n    complex4.equals(object0);\n    Complex.valueOf(0.0);\n    Complex complex7 = new Complex((-2175.92756), (-2983.168584589799));\n    complex3.equals(complex7);\n    complex1.exp();\n}",
    "testName" : "test2746"
  },
  "test0524" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0524() throws Throwable {\n    Complex complex0 = new Complex(928.4931335996077);\n    Complex complex1 = Complex.valueOf(928.4931335996077);\n    complex1.readResolve();\n    complex1.readResolve();\n    complex1.NaN.exp();\n    Complex complex2 = complex1.I.divide(complex0);\n    Complex complex3 = complex2.ONE.asin();\n    complex3.createComplex(928.4931335996077, (-1093.25));\n    complex2.ONE.hashCode();\n    complex0.hashCode();\n    complex1.subtract(complex0);\n    Complex complex4 = complex0.multiply(459.55744);\n    Complex.valueOf((-347.808928076401), (-347.808928076401));\n    complex4.abs();\n    complex4.isInfinite();\n}",
    "testName" : "test0524"
  },
  "test1736" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1736() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.INF.subtract((Complex) null);\n}",
    "testName" : "test1736"
  },
  "test028" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.cosh();\n    Complex complex2 = complex0.NaN.tan();\n    Complex complex3 = complex0.add(1.0);\n    Complex complex4 = complex0.subtract(0.0);\n    complex4.INF.cosh();\n    Complex complex5 = complex4.cos();\n    complex0.equals((Object) complex4);\n}",
    "testName" : "test028"
  },
  "test029" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.cosh();\n    Complex complex2 = complex0.NaN.tan();\n    Complex complex3 = complex0.add(1.0);\n    Complex complex4 = complex0.subtract(0.0);\n    complex4.INF.cosh();\n    Complex complex5 = complex4.cos();\n    complex4.isInfinite();\n}",
    "testName" : "test029"
  },
  "test026" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.cosh();\n    Complex complex2 = complex0.NaN.tan();\n    Complex complex3 = complex0.add(1.0);\n    Complex complex4 = complex0.subtract(0.0);\n    complex4.INF.cosh();\n    Complex complex5 = complex4.cos();\n    complex4.equals((Object) complex3);\n}",
    "testName" : "test026"
  },
  "test027" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.cosh();\n    Complex complex2 = complex0.NaN.tan();\n    Complex complex3 = complex0.add(1.0);\n    Complex complex4 = complex0.subtract(0.0);\n    complex4.INF.cosh();\n    Complex complex5 = complex4.cos();\n}",
    "testName" : "test027"
  },
  "test024" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.cosh();\n    complex1.getReal();\n}",
    "testName" : "test024"
  },
  "test025" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.cosh();\n    complex1.getImaginary();\n}",
    "testName" : "test025"
  },
  "test2140" : {
    "methodSignature" : "protected final Object readResolve()",
    "methodName" : "readResolve",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2140() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.NaN.createComplex(Double.NaN, (-564.689));\n    Complex complex1 = complex0.I.pow(1123.5432165985771);\n    Complex complex2 = complex1.ZERO.tanh();\n    Complex complex3 = complex1.INF.sqrt1z();\n    Complex complex4 = complex0.sqrt();\n    complex4.I.readResolve();\n    complex0.getImaginary();\n    complex4.getArgument();\n    complex0.getField();\n    Complex complex5 = complex0.conjugate();\n    complex5.ZERO.getField();\n    Complex.valueOf(Double.NaN, (-564.689));\n    complex5.add(1123.5432165985771);\n    complex4.sqrt();\n    complex4.atan();\n    complex3.getField();\n    complex2.readResolve();\n}",
    "testName" : "test2140"
  },
  "test3352" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3352() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.pow((-1580.0526));\n    Complex complex2 = complex1.ZERO.sin();\n    Complex complex3 = complex2.NaN.sqrt();\n    complex1.hashCode();\n    Complex complex4 = complex0.exp();\n    complex4.NaN.multiply((-1580.0526));\n    complex4.INF.abs();\n    Complex complex5 = complex0.negate();\n    complex0.subtract(2024.5786127379486);\n    Complex.valueOf(2.0, 4328.89478421);\n    complex3.tan();\n    complex2.isNaN();\n    complex2.readResolve();\n    complex5.equals(complex1);\n}",
    "testName" : "test3352"
  },
  "test1130" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1130() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.ZERO.asin();\n    complex1.abs();\n    Complex complex2 = Complex.valueOf(1294.1774039);\n    Complex complex3 = complex0.createComplex(1055.1760992392, 1055.1760992392);\n    Complex complex4 = complex0.subtract((-453.688402));\n    Complex complex5 = complex4.ZERO.pow(complex2);\n    Object object0 = new Object();\n    complex4.equals(object0);\n    Complex complex6 = complex4.sqrt1z();\n    complex5.NaN.sin();\n    Complex complex7 = complex6.I.divide(complex2);\n    complex3.getField();\n    Complex complex8 = complex3.cos();\n    Complex complex9 = complex5.divide((-453.688402));\n    complex9.NaN.divide(complex4);\n    complex0.INF.tan();\n    complex3.INF.atan();\n    Complex.valueOf(0.0);\n    complex0.divide(complex2);\n    Complex complex10 = complex3.multiply(1055.1760992392);\n    complex10.INF.asin();\n    complex8.toString();\n    complex8.cosh();\n    complex7.sqrt1z();\n    complex1.pow((-1.0));\n    complex5.toString();\n    complex3.conjugate();\n}",
    "testName" : "test1130"
  },
  "test3150" : {
    "methodSignature" : "public Complex divide(Complex divisor) throws NullArgumentException",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3150() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.25);\n    complex0.getField();\n    Complex complex1 = complex0.sqrt();\n    Complex complex2 = complex1.ONE.sin();\n    complex1.INF.getField();\n    complex1.nthRoot(2770);\n    Complex complex3 = Complex.valueOf(1.570796251296997, (double) 2770);\n    complex1.sqrt1z();\n    Complex complex4 = complex2.NaN.subtract(complex0);\n    complex3.sinh();\n    complex2.readResolve();\n    complex4.subtract((-473.25324));\n    complex3.conjugate();\n    Complex.valueOf((-473.25324), (-473.25324));\n    Complex complex5 = complex3.add((double) 2770);\n    Complex complex6 = Complex.ZERO;\n    complex5.divide(complex6);\n}",
    "testName" : "test3150"
  },
  "test3049" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3049() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.INF.sqrt();\n    Complex complex2 = complex1.log();\n    Complex.valueOf((double) 2540, (double) 2540);\n    complex0.I.conjugate();\n    complex1.ZERO.nthRoot(2540);\n    complex0.getField();\n    Complex complex3 = complex0.add(complex1);\n    complex1.isNaN();\n    complex0.INF.negate();\n    Complex complex4 = complex0.divide(complex3);\n    complex4.getImaginary();\n    complex2.getArgument();\n    complex4.multiply((-1546.4158));\n}",
    "testName" : "test3049"
  },
  "test2039" : {
    "methodSignature" : "public Complex pow(double x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2039() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.I.atan();\n    complex1.divide(complex0);\n    Complex complex2 = complex0.ZERO.multiply(complex1);\n    Complex.valueOf(558.826502192676, 558.826502192676);\n    Complex complex3 = complex0.divide(3398.0);\n    Complex complex4 = Complex.valueOf((-333.47), (-333.47));\n    complex3.createComplex(3398.0, 0.11764700710773468);\n    complex3.getArgument();\n    complex2.sqrt();\n    complex2.pow(0.0);\n    complex4.pow(1.0);\n}",
    "testName" : "test2039"
  },
  "test0210" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0210() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.cosh();\n    Complex complex2 = complex0.NaN.tan();\n    Complex complex3 = complex0.add(1.0);\n    Complex complex4 = complex0.subtract(0.0);\n    complex4.INF.cosh();\n    Complex complex5 = complex4.cos();\n    complex5.equals((Object) complex2);\n}",
    "testName" : "test0210"
  },
  "test023" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.cosh();\n    complex1.isInfinite();\n}",
    "testName" : "test023"
  },
  "test1029" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1029() throws Throwable {\n    Complex complex0 = new Complex(1.0);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.ZERO.pow(complex1);\n    Complex complex3 = complex2.ONE.log();\n    complex0.ONE.divide(complex1);\n    Complex complex4 = complex0.NaN.tan();\n    complex4.ONE.tanh();\n    complex0.abs();\n    Complex complex5 = complex1.cosh();\n    complex5.add(complex3);\n}",
    "testName" : "test1029"
  },
  "test0928" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0928() throws Throwable {\n    Complex complex0 = new Complex((-2304.035705716513), (-319.5240611725));\n    complex0.divide((-319.5240611725));\n}",
    "testName" : "test0928"
  },
  "test1433" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1433() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 671.3094465196);\n    Complex complex1 = complex0.NaN.negate();\n    Complex complex2 = complex0.NaN.conjugate();\n    complex0.getImaginary();\n    complex0.abs();\n    complex1.INF.pow((-1240.1536142814514));\n    complex2.ZERO.atan();\n    Complex complex3 = complex2.subtract(complex1);\n    complex3.readResolve();\n    complex2.getReal();\n}",
    "testName" : "test1433"
  },
  "test2645" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2645() throws Throwable {\n    Complex complex0 = Complex.valueOf((-739.0));\n    Complex complex1 = complex0.ONE.conjugate();\n    Complex complex2 = complex0.subtract((-13.95));\n    complex2.NaN.abs();\n    complex0.ZERO.asin();\n    Complex complex3 = complex2.pow(complex0);\n    Complex complex4 = complex3.ONE.exp();\n    Complex complex5 = complex0.ZERO.add(complex2);\n    complex5.ZERO.cos();\n    complex1.I.negate();\n    complex0.tanh();\n    complex1.abs();\n    complex0.sinh();\n    Complex complex6 = complex1.tanh();\n    complex6.divide(complex2);\n    Complex complex7 = complex4.conjugate();\n    complex7.conjugate();\n    complex6.getReal();\n}",
    "testName" : "test2645"
  },
  "test0423" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0423() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.ONE.add(5265.00324922752);\n    Complex complex1 = Complex.valueOf(1772.2415, 1772.2415);\n    Complex complex2 = Complex.NaN;\n    Complex complex3 = complex2.divide(complex0);\n    complex1.ZERO.log();\n    complex3.INF.negate();\n    Complex complex4 = complex3.divide(complex0);\n    complex4.ONE.add(complex1);\n    complex0.subtract(complex2);\n    complex0.conjugate();\n    Complex complex5 = complex2.atan();\n    complex5.ZERO.getArgument();\n    complex5.ONE.sin();\n    complex4.getField();\n    complex4.tan();\n    complex4.getImaginary();\n}",
    "testName" : "test0423"
  },
  "test3453" : {
    "methodSignature" : "public static Complex valueOf(double realPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3453() throws Throwable {\n    Complex complex0 = Complex.valueOf((-2098.980137684341));\n    Complex complex1 = Complex.valueOf(0.0, (-1884.806573799));\n    Complex complex2 = complex0.createComplex(3160.071260027, (-2098.980137684341));\n    complex2.NaN.tanh();\n    Complex complex3 = complex2.ZERO.divide(3160.071260027);\n    Complex complex4 = complex3.NaN.tanh();\n    Complex complex5 = Complex.ONE;\n    complex5.I.readResolve();\n    Complex complex6 = complex2.NaN.add(complex5);\n    complex6.sin();\n    Complex complex7 = complex2.ZERO.acos();\n    Complex complex8 = complex7.ZERO.log();\n    complex0.getReal();\n    complex3.INF.nthRoot(1073741824);\n    complex1.getImaginary();\n    Complex complex9 = complex0.sqrt();\n    complex3.getArgument();\n    complex5.conjugate();\n    complex4.acos();\n    complex2.INF.pow(complex4);\n    complex8.negate();\n    complex3.divide(complex9);\n    Complex.valueOf(0.0);\n}",
    "testName" : "test3453"
  },
  "test1231" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ZERO.atan();\n    complex0.readResolve();\n    Complex complex2 = complex0.I.asin();\n    complex2.ZERO.divide(complex1);\n    Complex complex3 = complex0.atan();\n    complex1.multiply((-3007.6));\n    complex3.cosh();\n    complex2.toString();\n}",
    "testName" : "test1231"
  },
  "test2443" : {
    "methodSignature" : "public static Complex valueOf(double realPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2443() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0);\n    Complex complex1 = complex0.add((-1384.5897272));\n    Complex complex2 = Complex.valueOf(0.0, 0.0);\n    complex2.readResolve();\n    complex0.ZERO.tanh();\n    complex0.getImaginary();\n    Complex complex3 = complex0.cos();\n    Complex complex4 = complex3.ONE.tanh();\n    Complex complex5 = complex0.atan();\n    complex5.NaN.abs();\n    Complex complex6 = complex4.divide(complex1);\n    Complex complex7 = complex3.INF.add((-3515.79));\n    Complex complex8 = complex3.I.asin();\n    Complex complex9 = complex8.ONE.cos();\n    complex9.I.negate();\n    Complex complex10 = complex0.multiply(complex3);\n    complex10.getArgument();\n    Complex complex11 = complex0.divide(complex7);\n    Complex complex12 = complex0.divide(0.0);\n    complex12.ONE.pow(complex5);\n    complex12.NaN.divide(complex4);\n    complex11.I.log();\n    Complex complex13 = complex0.ZERO.divide(complex5);\n    Complex complex14 = complex13.I.add(1067.523246575);\n    Complex complex15 = complex14.NaN.sqrt1z();\n    complex11.isInfinite();\n    complex5.isInfinite();\n    Complex complex16 = complex7.sqrt();\n    complex15.NaN.multiply(complex16);\n    complex6.toString();\n    complex15.createComplex(6.283185307179586, 1067.523246575);\n    Complex.valueOf(0.0);\n}",
    "testName" : "test2443"
  },
  "test011" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex0.subtract(complex1);\n    Complex complex3 = complex2.tan();\n    complex3.subtract(complex2);\n    double double0 = complex3.abs();\n}",
    "testName" : "test011"
  },
  "test012" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.NaN;\n    Complex complex2 = complex0.subtract(complex1);\n    Complex complex3 = complex2.tan();\n    complex3.subtract(complex2);\n    double double0 = complex3.abs();\n    Complex complex4 = complex3.tanh();\n}",
    "testName" : "test012"
  },
  "test1837" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1837() throws Throwable {\n    Complex complex0 = new Complex((-2289.0505632029985), (-36.04));\n    Complex complex1 = new Complex(630.736923883764, (-2289.0505632029985));\n    complex1.I.negate();\n    complex1.NaN.divide(complex0);\n    complex1.NaN.toString();\n    Complex complex2 = complex0.subtract(complex1);\n    complex2.isInfinite();\n    complex2.divide(1.0);\n}",
    "testName" : "test1837"
  },
  "test0827" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0827() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    Complex complex1 = complex0.createComplex(0.0, (-1.0));\n    Complex complex2 = complex1.tanh();\n    complex0.NaN.getArgument();\n    Complex complex3 = Complex.valueOf(Double.NaN, 0.0);\n    complex3.ZERO.createComplex(0.0, 1.0);\n    complex3.multiply((-1.0));\n    complex2.I.abs();\n    Complex complex4 = complex1.acos();\n    Complex complex5 = complex0.ZERO.acos();\n    complex2.hashCode();\n    Complex complex6 = complex1.sinh();\n    Complex complex7 = complex6.add(0.0);\n    Complex complex8 = complex7.INF.sinh();\n    Complex.valueOf(1.0, Double.NaN);\n    Complex complex9 = complex1.sinh();\n    complex4.abs();\n    Complex complex10 = complex4.tanh();\n    complex10.I.add(complex0);\n    Complex complex11 = complex4.exp();\n    complex11.INF.abs();\n    complex9.negate();\n    complex9.tan();\n    complex7.sin();\n    complex8.toString();\n    complex5.abs();\n}",
    "testName" : "test0827"
  },
  "test1635" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1635() throws Throwable {\n    Complex complex0 = new Complex(0.3333333134651184, 2.0);\n    Complex complex1 = complex0.sqrt1z();\n    complex1.ZERO.getArgument();\n    Complex complex2 = complex1.sqrt1z();\n    complex1.I.atan();\n    complex2.getArgument();\n    Complex complex3 = complex1.multiply(1.0);\n    complex3.I.sqrt1z();\n    Complex complex4 = complex3.tanh();\n    complex3.equals(complex4);\n}",
    "testName" : "test1635"
  },
  "test2847" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2847() throws Throwable {\n    Complex complex0 = Complex.valueOf(1.9699272335463627E-8, 1.9699272335463627E-8);\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex1.sinh();\n    complex0.pow(complex1);\n    Complex complex3 = complex1.log();\n    Complex complex4 = complex2.negate();\n    Complex complex5 = complex3.sin();\n    complex2.NaN.sqrt();\n    complex2.readResolve();\n    Complex complex6 = complex0.exp();\n    complex6.ONE.multiply(2.0);\n    Complex complex7 = complex4.pow(0.0);\n    complex7.asin();\n    complex5.toString();\n}",
    "testName" : "test2847"
  },
  "test0625" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0625() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.readResolve();\n    complex0.nthRoot(1223);\n    complex0.getReal();\n    Complex complex1 = complex0.I.multiply(2597.767982);\n    Complex complex2 = complex1.INF.add(complex0);\n    Complex complex3 = complex2.ONE.atan();\n    complex3.ZERO.nthRoot(17);\n    Complex complex4 = complex0.acos();\n    Complex complex5 = complex4.ONE.tan();\n    Complex complex6 = complex5.INF.add(complex4);\n    complex5.I.toString();\n    Complex complex7 = complex4.ONE.sqrt();\n    complex7.INF.atan();\n    Complex complex8 = complex7.NaN.pow((double) 1223);\n    Complex complex9 = complex7.ZERO.cosh();\n    complex7.ZERO.getField();\n    complex0.getImaginary();\n    Complex complex10 = complex4.divide(complex0);\n    Complex.valueOf((double) 1223, 0.0);\n    complex10.getArgument();\n    complex10.pow(complex3);\n    complex8.getReal();\n    Complex complex11 = Complex.ONE;\n    complex11.NaN.exp();\n    complex1.pow(complex11);\n    complex6.multiply((-2.082121537131544));\n    complex6.tan();\n    complex9.asin();\n}",
    "testName" : "test0625"
  },
  "test3251" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3251() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.16666666666666666, 0.16666666666666666);\n    Complex complex1 = complex0.NaN.conjugate();\n    complex1.I.createComplex(1.0, 0.16666666666666666);\n    Complex complex2 = complex0.INF.negate();\n    Complex.valueOf(1.0, 0.16666666666666666);\n    complex2.ONE.multiply(complex0);\n    Complex complex3 = complex2.ONE.sqrt();\n    Complex complex4 = Complex.valueOf((-2135.0));\n    complex4.I.add((-2135.0));\n    complex0.abs();\n    complex0.toString();\n    complex0.getReal();\n    complex0.hashCode();\n    complex4.getImaginary();\n    complex0.pow((-2135.0));\n    complex3.multiply(1.0);\n}",
    "testName" : "test3251"
  },
  "test2241" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2241() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = Complex.NaN;\n    complex1.INF.toString();\n    complex0.INF.divide(complex1);\n    complex0.isNaN();\n}",
    "testName" : "test2241"
  },
  "test0311" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0311() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    complex6.getReal();\n}",
    "testName" : "test0311"
  },
  "test0312" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0312() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex14.getImaginary();\n}",
    "testName" : "test0312"
  },
  "test0313" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0313() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex14.getReal();\n}",
    "testName" : "test0313"
  },
  "test000" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.valueOf(1.0);\n    Complex complex2 = complex0.multiply(complex1);\n    Complex complex3 = Complex.valueOf(1.0);\n    complex3.I.add(1.0);\n    complex0.NaN.nthRoot(2501);\n    Complex complex4 = complex2.ONE.pow(complex0);\n    complex4.conjugate();\n    complex4.ONE.getField();\n    Complex.valueOf(1.0);\n    Complex complex5 = complex4.asin();\n    complex5.log();\n    complex1.asin();\n}",
    "testName" : "test000"
  },
  "test0318" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0318() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n    Complex complex22 = complex21.tanh();\n    Complex complex23 = complex22.INF.pow(complex16);\n    String string0 = complex8.toString();\n    complex8.equals((Object) complex4);\n}",
    "testName" : "test0318"
  },
  "test0319" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0319() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n    Complex complex22 = complex21.tanh();\n    Complex complex23 = complex22.INF.pow(complex16);\n    String string0 = complex8.toString();\n    complex0.equals((Object) complex15);\n}",
    "testName" : "test0319"
  },
  "test0314" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0314() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n}",
    "testName" : "test0314"
  },
  "test0315" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0315() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n    Complex complex22 = complex21.tanh();\n    Complex complex23 = complex22.INF.pow(complex16);\n    complex22.equals((Object) complex11);\n}",
    "testName" : "test0315"
  },
  "test0316" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0316() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n    Complex complex22 = complex21.tanh();\n    Complex complex23 = complex22.INF.pow(complex16);\n    complex22.getImaginary();\n}",
    "testName" : "test0316"
  },
  "test0317" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0317() throws Throwable {\n    Complex complex0 = new Complex(1.0, 1.0);\n    Complex complex1 = complex0.multiply(0.0);\n    Complex complex2 = complex1.ZERO.conjugate();\n    complex2.I.createComplex((-618.01996014), 0.0);\n    Complex complex3 = complex0.NaN.exp();\n    Complex complex4 = complex1.INF.divide(0.0);\n    Complex complex5 = complex1.divide(0.0);\n    Complex complex6 = complex0.log();\n    Complex complex7 = complex1.sin();\n    Complex complex8 = complex0.INF.sqrt();\n    Complex complex9 = complex0.NaN.tan();\n    complex7.I.getArgument();\n    complex5.atan();\n    Complex complex10 = complex5.conjugate();\n    Complex complex11 = complex0.INF.multiply(complex3);\n    Complex complex12 = complex10.INF.cosh();\n    Complex complex13 = complex12.I.pow(1.0);\n    Complex complex14 = complex7.negate();\n    complex7.getImaginary();\n    Complex complex15 = complex7.add(complex0);\n    Complex complex16 = complex1.log();\n    Complex complex17 = complex12.multiply(0.0);\n    Complex complex18 = complex17.I.pow(1.5707963267948966);\n    Complex complex19 = Complex.valueOf(4734.7381062603);\n    complex19.INF.exp();\n    Complex complex20 = complex9.divide(1.0);\n    Complex complex21 = complex19.multiply(1.0);\n    complex20.equals(complex21);\n    complex9.multiply(complex13);\n    Complex complex22 = complex21.tanh();\n    Complex complex23 = complex22.INF.pow(complex16);\n}",
    "testName" : "test0317"
  }
}