{
  "test1212" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.conjugate();\n}",
    "testName" : "test1212"
  },
  "test4646" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4646() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    Complex complex1 = Complex.ZERO;\n    Complex complex2 = complex0.ONE.add(complex1);\n    complex2.subtract(complex0);\n    Complex complex3 = complex0.ZERO.reciprocal();\n    complex0.nthRoot(1);\n    Complex complex4 = complex3.ONE.conjugate();\n    complex4.tanh();\n    complex0.sqrt1z();\n    complex3.divide(complex0);\n    complex1.sqrt();\n}",
    "testName" : "test4646"
  },
  "test3434" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    Complex complex0 = new Complex(5.471416081500162E-8);\n    Complex complex1 = Complex.valueOf((-669.88619), (-669.88619));\n    complex0.ZERO.multiply(complex1);\n    complex0.ONE.add((-119.71));\n    complex0.divide((-284.5248018489));\n    complex0.sinh();\n}",
    "testName" : "test3434"
  },
  "test6868" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6868() throws Throwable {\n    Complex complex0 = Complex.valueOf(2.0, 2.0);\n    complex0.abs();\n    Complex complex1 = Complex.valueOf(0.0, (-2532.4582014));\n    complex1.ZERO.nthRoot(1);\n    Complex complex2 = complex0.subtract(890.0);\n    Complex complex3 = complex2.tan();\n    Complex complex4 = complex3.pow(complex2);\n    Complex complex5 = complex2.reciprocal();\n    complex2.I.atan();\n    complex3.cosh();\n    Complex complex6 = complex0.I.tanh();\n    Complex complex7 = complex5.divide((-2324.9947));\n    complex7.INF.exp();\n    complex3.ONE.subtract((-2838.56312075));\n    complex3.isInfinite();\n    Complex complex8 = complex0.exp();\n    complex4.pow((-853.2));\n    Complex complex9 = complex0.multiply(complex6);\n    complex9.ZERO.conjugate();\n    Complex complex10 = complex8.pow(complex2);\n    Complex complex11 = Complex.valueOf(2.8284271247461903, 154.29284748061);\n    complex10.multiply(complex11);\n}",
    "testName" : "test6868"
  },
  "test5656" : {
    "methodSignature" : "public Complex cosh()",
    "methodName" : "cosh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    Complex complex0 = new Complex(0.0, 1.6944255828857422);\n    Complex complex1 = new Complex(1.6944255828857422, 1.6944255828857422);\n    Complex complex2 = complex0.pow(complex1);\n    Complex complex3 = Complex.ONE;\n    complex2.subtract(complex3);\n    complex0.divide(complex1);\n    complex0.NaN.conjugate();\n    complex0.negate();\n    complex2.cosh();\n}",
    "testName" : "test5656"
  },
  "test2424" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    Complex complex0 = Complex.valueOf((-4.342161053332263E165));\n    complex0.INF.sqrt1z();\n    Complex complex1 = Complex.valueOf(0.0, 501.6);\n    complex0.ONE.abs();\n    Complex complex2 = complex0.sqrt1z();\n    complex2.atan();\n    Complex complex3 = complex1.multiply(501.6);\n    complex1.exp();\n    Object object0 = complex3.readResolve();\n    complex0.equals(object0);\n}",
    "testName" : "test2424"
  },
  "test7878" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7878() throws Throwable {\n    Complex complex0 = Complex.valueOf(1.0, 463.610560731626);\n    Complex complex1 = complex0.INF.conjugate();\n    complex0.getArgument();\n    Complex complex2 = complex0.cos();\n    complex0.sqrt();\n    complex1.NaN.pow(complex0);\n    Complex complex3 = complex2.NaN.sin();\n    complex2.getField();\n    Complex complex4 = complex2.asin();\n    complex4.ZERO.conjugate();\n    complex4.INF.tan();\n    complex1.getField();\n    complex0.add(complex4);\n    Complex complex5 = Complex.I;\n    complex0.add(complex5);\n    complex3.multiply(complex4);\n    Complex complex6 = Complex.valueOf(1746.86);\n    complex2.pow(complex6);\n    complex3.atan();\n}",
    "testName" : "test7878"
  },
  "test1010" : {
    "methodSignature" : "public Complex subtract(double subtrahend)",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    complex0.subtract(0.0);\n}",
    "testName" : "test1010"
  },
  "test4444" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4444() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.NaN.acos();\n    Complex complex2 = complex1.I.reciprocal();\n    complex2.I.getField();\n    complex0.abs();\n    Complex complex3 = complex0.ZERO.add(1.6903781197123503E-8);\n    Complex complex4 = complex3.INF.cos();\n    complex3.NaN.getField();\n    complex0.getField();\n    complex3.I.multiply(0);\n    complex0.hashCode();\n    complex4.atan();\n}",
    "testName" : "test4444"
  },
  "test3232" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    Complex complex0 = Complex.valueOf(809.662269086, (-2164.175568227));\n    complex0.tan();\n}",
    "testName" : "test3232"
  },
  "test6666" : {
    "methodSignature" : "public Complex sqrt1z()",
    "methodName" : "sqrt1z",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6666() throws Throwable {\n    Complex complex0 = new Complex((-18.5323301726));\n    Complex complex1 = complex0.ZERO.asin();\n    Complex complex2 = complex0.add((-18.5323301726));\n    Complex complex3 = complex2.ONE.negate();\n    Complex complex4 = complex3.ONE.subtract(complex0);\n    complex0.isInfinite();\n    complex4.NaN.acos();\n    Complex complex5 = complex0.sinh();\n    Complex complex6 = complex1.acos();\n    complex0.ONE.subtract(complex1);\n    complex6.I.conjugate();\n    Complex complex7 = complex2.multiply(complex4);\n    complex5.tan();\n    complex0.tan();\n    complex7.sqrt1z();\n}",
    "testName" : "test6666"
  },
  "test8888" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8888() throws Throwable {\n    double double0 = 0.0;\n    Complex complex0 = new Complex(0.0);\n    Complex complex1 = complex0.INF.negate();\n    Complex complex2 = complex1.conjugate();\n    Complex complex3 = complex2.INF.pow(complex0);\n    Complex complex4 = complex1.divide(0.0);\n    complex4.NaN.getField();\n    Complex complex5 = complex3.INF.sqrt();\n    Complex complex6 = complex3.I.add(Double.NaN);\n    complex6.I.toString();\n    complex2.tan();\n    complex0.nthRoot((-725));\n    complex3.cos();\n    complex5.asin();\n}",
    "testName" : "test8888"
  },
  "test5454" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.valueOf(410.74671926924213);\n    complex0.ZERO.multiply(617.3);\n    Complex complex2 = complex1.ONE.createComplex(410.74671926924213, (-3737.74531));\n    complex2.I.divide(1330.447275424);\n    Complex complex3 = complex1.divide(410.74671926924213);\n    complex3.acos();\n    complex0.multiply(complex1);\n    complex2.cos();\n}",
    "testName" : "test5454"
  },
  "test2222" : {
    "methodSignature" : "public double getImaginary()",
    "methodName" : "getImaginary",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.sqrt1z();\n    Complex complex2 = complex1.NaN.cos();\n    Complex complex3 = complex1.atan();\n    complex3.ONE.conjugate();\n    complex1.NaN.toString();\n    Complex complex4 = complex0.createComplex(0.0, 0.0);\n    complex4.NaN.abs();\n    complex0.NaN.abs();\n    complex0.INF.createComplex(0.0, 0.0);\n    complex4.readResolve();\n    complex1.ONE.sqrt();\n    Complex complex5 = complex0.tan();\n    complex5.I.atan();\n    complex5.multiply(complex2);\n    complex1.NaN.toString();\n    complex0.nthRoot((-3728));\n    complex3.tanh();\n    complex1.getImaginary();\n}",
    "testName" : "test2222"
  },
  "test7676" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7676() throws Throwable {\n    Complex complex0 = Complex.valueOf((-879.322541214), 2.0);\n    complex0.ONE.pow(2969.33717141241);\n    Complex complex1 = complex0.add((Complex) null);\n    complex1.tan();\n}",
    "testName" : "test7676"
  },
  "test033" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Complex complex0 = new Complex(578.16691, 578.16691);\n    Complex complex1 = complex0.INF.divide(578.16691);\n    Complex complex2 = complex1.ONE.multiply(2553);\n    Complex complex3 = complex2.NaN.tan();\n    complex0.toString();\n    complex0.isNaN();\n    Complex complex4 = complex1.atan();\n    complex4.nthRoot(2553);\n    Complex complex5 = Complex.valueOf((-6.292835950782));\n    Complex complex6 = complex1.multiply(complex5);\n    Complex complex7 = complex6.INF.subtract((-6.292835950782));\n    Complex complex8 = complex5.add(complex6);\n    complex8.NaN.reciprocal();\n    complex0.multiply(complex2);\n    complex0.asin();\n    complex7.tan();\n    complex8.reciprocal();\n    complex3.tanh();\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Complex complex0 = new Complex(56.92772100273, 0.0);\n    Complex complex1 = complex0.ONE.tanh();\n    Complex complex2 = complex1.add(1.0);\n    complex0.getImaginary();\n    Complex complex3 = complex0.createComplex(0.0, 0.0);\n    complex3.divide(complex1);\n    Complex complex4 = complex0.exp();\n    complex2.negate();\n    complex4.asin();\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = complex0.tan();\n    complex1.NaN.createComplex(0.0, 0.0);\n    Complex complex2 = complex1.NaN.divide(complex0);\n    complex2.NaN.abs();\n    complex1.getArgument();\n    complex0.multiply(0.0);\n}",
    "testName" : "test1616"
  },
  "test9898" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9898() throws Throwable {\n    Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    Complex complex1 = complex0.INF.exp();\n    Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);\n    Complex complex3 = complex2.INF.cosh();\n    complex3.ZERO.pow(Double.POSITIVE_INFINITY);\n    complex2.NaN.add(Double.POSITIVE_INFINITY);\n    complex2.NaN.sqrt1z();\n    Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    complex4.INF.sqrt1z();\n    complex2.log();\n    Complex complex5 = complex1.multiply(0.36891552999700106);\n    complex0.conjugate();\n    complex1.sin();\n    complex5.pow(0.36891552999700106);\n    complex4.add((-263.2637752));\n}",
    "testName" : "test9898"
  },
  "test3838" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    complex0.multiply((-1510.16));\n    Complex complex1 = complex0.atan();\n    complex0.subtract(complex1);\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Complex complex0 = new Complex((-2289.0505632029985), (-36.04));\n    Complex complex1 = complex0.subtract((-763.75318048848));\n    Complex complex2 = complex0.tanh();\n    Complex complex3 = complex2.multiply(complex1);\n    Complex complex4 = complex2.asin();\n    complex4.ZERO.readResolve();\n    complex1.tanh();\n    complex3.createComplex((-2289.0505632029985), (-36.04));\n    complex4.multiply(complex2);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    Object object0 = new Object();\n    complex0.equals(object0);\n}",
    "testName" : "test1414"
  },
  "test4848" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4848() throws Throwable {\n    Complex complex0 = new Complex(0.0);\n    Complex complex1 = Complex.INF;\n    complex1.INF.sinh();\n    complex1.INF.subtract(complex0);\n    Complex complex2 = complex0.multiply(complex1);\n    Complex complex3 = complex2.ONE.negate();\n    complex3.I.conjugate();\n    complex1.getField();\n    complex1.toString();\n}",
    "testName" : "test4848"
  },
  "test3636" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.nthRoot(1);\n    complex0.NaN.getField();\n    Complex complex1 = complex0.pow(0.0);\n    complex1.NaN.sqrt();\n    complex1.INF.abs();\n    complex0.acos();\n}",
    "testName" : "test3636"
  },
  "test5858" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.INF;\n    Complex complex2 = complex1.NaN.multiply(1);\n    Complex complex3 = complex0.pow(complex1);\n    complex0.abs();\n    Complex.valueOf(0.0, 0.0);\n    Complex complex4 = complex0.divide(complex3);\n    complex4.NaN.cosh();\n    Complex complex5 = complex1.divide(complex3);\n    complex5.ZERO.pow(complex2);\n    complex5.INF.conjugate();\n    complex5.multiply((double) 1);\n}",
    "testName" : "test5858"
  },
  "test2626" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = Complex.valueOf(0.0);\n    complex0.NaN.add(complex1);\n    complex0.atan();\n}",
    "testName" : "test2626"
  },
  "test6060" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6060() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.INF.divide(0.0);\n    Complex complex1 = complex0.ZERO.sin();\n    complex1.ONE.pow(0.0);\n    complex0.isInfinite();\n}",
    "testName" : "test6060"
  },
  "test9494" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9494() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.ZERO.cosh();\n    complex1.NaN.abs();\n    Complex complex2 = complex0.reciprocal();\n    Complex complex3 = complex0.sqrt();\n    Complex complex4 = complex2.log();\n    complex2.sin();\n    Complex complex5 = complex0.multiply(Double.NaN);\n    Object object0 = complex3.readResolve();\n    complex2.equals(object0);\n    complex0.NaN.tan();\n    Complex complex6 = complex1.sqrt1z();\n    Complex complex7 = complex6.pow(complex1);\n    Complex complex8 = complex1.tan();\n    complex5.acos();\n    complex1.negate();\n    complex8.ONE.sinh();\n    complex7.ONE.sin();\n    complex2.divide(2099.765853);\n    Complex complex9 = complex7.add(0.0);\n    complex8.hashCode();\n    Complex.valueOf(4520.321449207714, 3509.9814);\n    Complex complex10 = Complex.INF;\n    complex10.ZERO.divide(complex4);\n    complex1.multiply(complex10);\n    complex4.multiply(complex8);\n    complex9.cosh();\n    complex8.log();\n}",
    "testName" : "test9494"
  },
  "test8282" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8282() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    complex0.ZERO.readResolve();\n    complex0.getField();\n    Complex complex1 = complex0.createComplex((-640.598), 2772.2);\n    Complex complex2 = complex1.atan();\n    complex1.ONE.tan();\n    complex1.createComplex(1608.5279, (-620.0947));\n    Complex complex3 = complex1.tanh();\n    Complex complex4 = complex3.NaN.negate();\n    complex4.ONE.abs();\n    Complex complex5 = complex2.add(1608.5279);\n    Complex complex6 = complex5.I.log();\n    complex5.log();\n    complex6.acos();\n    Complex.valueOf((-620.0947), (-620.0947));\n    complex1.getField();\n}",
    "testName" : "test8282"
  },
  "test7070" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7070() throws Throwable {\n    Complex complex0 = new Complex(1.0);\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.subtract(0.0);\n    Complex complex3 = complex2.ZERO.divide(complex1);\n    Complex complex4 = complex0.log();\n    Complex complex5 = complex4.INF.subtract(complex1);\n    complex3.NaN.cos();\n    complex4.ZERO.abs();\n    Complex complex6 = complex0.sqrt1z();\n    Complex complex7 = complex4.ONE.asin();\n    Complex complex8 = complex7.tan();\n    complex7.ZERO.negate();\n    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));\n    complex9.INF.pow(complex6);\n    complex9.NaN.acos();\n    complex4.INF.toString();\n    complex0.abs();\n    complex0.add(complex5);\n    complex0.ONE.acos();\n    complex5.toString();\n    complex5.createComplex(1.0, 5627.840250944935);\n    Complex complex10 = Complex.valueOf((-1596.23024));\n    complex3.log();\n    complex10.subtract(complex8);\n    Complex complex11 = complex10.multiply((-61.25461971));\n    complex2.createComplex(0.0, (-1506.638287109));\n    complex8.multiply(3140);\n    complex9.reciprocal();\n    complex11.nthRoot(3140);\n}",
    "testName" : "test7070"
  },
  "test9696" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9696() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.ZERO.log();\n    Complex complex2 = Complex.valueOf(0.0, 6.034539636024073E-8);\n    Complex complex3 = complex2.NaN.tanh();\n    complex3.ZERO.getField();\n    Complex complex4 = complex0.createComplex((-1019.8015), (-1019.8015));\n    complex4.NaN.getArgument();\n    complex4.I.asin();\n    complex4.INF.conjugate();\n    Complex complex5 = complex2.add(complex0);\n    Complex complex6 = complex2.subtract(0.0);\n    Complex complex7 = complex6.ZERO.sqrt();\n    Complex complex8 = complex7.ZERO.divide(complex5);\n    complex8.I.getField();\n    Complex complex9 = complex1.add(0.0);\n    complex9.INF.toString();\n    Complex complex10 = complex9.add(0.0);\n    complex10.ZERO.multiply((-2323.058664706638));\n    complex9.multiply(complex6);\n    complex4.subtract(Double.NaN);\n    Complex.valueOf(6.034539636024073E-8, Double.NaN);\n    complex4.asin();\n}",
    "testName" : "test9696"
  },
  "test8080" : {
    "methodSignature" : "public Complex exp()",
    "methodName" : "exp",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8080() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = Complex.I;\n    complex0.ONE.divide(complex1);\n    Complex complex2 = complex0.divide(398.231268431959);\n    complex0.toString();\n    complex0.abs();\n    Complex complex3 = complex1.subtract(398.231268431959);\n    complex3.ZERO.nthRoot(1210);\n    complex3.divide(complex1);\n    complex2.ONE.abs();\n    Complex complex4 = complex1.pow(398.231268431959);\n    Complex complex5 = complex1.conjugate();\n    Complex complex6 = complex5.NaN.cos();\n    complex4.asin();\n    complex4.INF.cos();\n    complex2.hashCode();\n    Complex.valueOf(1.0);\n    complex0.equals(complex4);\n    complex6.abs();\n    complex1.pow(Double.NaN);\n    Complex complex7 = complex0.tanh();\n    Complex complex8 = complex5.exp();\n    Complex complex9 = complex5.tan();\n    complex9.ONE.getArgument();\n    complex4.pow(complex8);\n    complex7.exp();\n}",
    "testName" : "test8080"
  },
  "test4242" : {
    "methodSignature" : "public Complex pow(double x)",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = Complex.INF;\n    complex0.subtract(complex1);\n    Complex complex2 = Complex.valueOf(2.0, 0.0);\n    complex2.toString();\n    Complex complex3 = complex2.divide(complex1);\n    Complex complex4 = complex1.reciprocal();\n    complex4.ZERO.hashCode();\n    Complex complex5 = complex3.acos();\n    Complex complex6 = new Complex(0.0);\n    complex6.I.cos();\n    complex0.multiply(complex6);\n    complex5.getReal();\n    complex5.pow(2.0);\n}",
    "testName" : "test4242"
  },
  "test9090" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9090() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.ZERO.divide(844.11757802136);\n    complex0.NaN.log();\n    complex0.NaN.getArgument();\n    Complex complex1 = complex0.atan();\n    Complex complex2 = complex1.ONE.cos();\n    Complex.valueOf(0.0, Double.NaN);\n    Complex.valueOf(6.283185307179586, 0.0);\n    Complex complex3 = complex2.createComplex((-1181.0736), 0.0);\n    complex3.add(complex0);\n}",
    "testName" : "test9090"
  },
  "test3030" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.I;\n    complex0.ZERO.subtract(complex1);\n    complex0.multiply(0.0);\n}",
    "testName" : "test3030"
  },
  "test6464" : {
    "methodSignature" : "public Complex reciprocal()",
    "methodName" : "reciprocal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6464() throws Throwable {\n    Complex complex0 = Complex.INF;\n    complex0.ONE.reciprocal();\n    complex0.I.getField();\n    complex0.I.subtract(1853.3643);\n    Complex complex1 = Complex.NaN;\n    complex0.equals(complex1);\n    Complex complex2 = Complex.valueOf(0.0, 0.0);\n    Complex complex3 = complex2.INF.subtract((-1.0));\n    Complex complex4 = complex2.sin();\n    Complex complex5 = complex4.ZERO.divide((-1.0));\n    complex5.ONE.add(complex3);\n    complex3.tanh();\n    complex4.reciprocal();\n}",
    "testName" : "test6464"
  },
  "test8686" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8686() throws Throwable {\n    Complex complex0 = new Complex(0.0, (-1537.2113330561938));\n    Complex complex1 = complex0.cosh();\n    Complex complex2 = Complex.valueOf((-1537.2113330561938));\n    Complex complex3 = Complex.valueOf(0.0);\n    Complex complex4 = complex3.I.atan();\n    complex0.readResolve();\n    Complex complex5 = Complex.valueOf((-1537.2113330561938), 0.0);\n    Complex.valueOf((-2294.247799), 0.0);\n    complex3.INF.sqrt1z();\n    complex5.readResolve();\n    Complex complex6 = complex2.tanh();\n    complex4.I.nthRoot(495);\n    complex6.INF.subtract(complex2);\n    Complex complex7 = complex0.add((-1537.2113330561938));\n    complex7.I.multiply(0.0);\n    complex3.asin();\n    Complex complex8 = complex0.NaN.divide((-1537.2113330561938));\n    complex3.toString();\n    complex1.negate();\n    complex4.sinh();\n    Complex complex9 = complex8.log();\n    complex9.ZERO.add((-1537.2113330561938));\n    complex7.isInfinite();\n    complex5.getArgument();\n    complex8.sqrt1z();\n    Complex complex10 = complex4.sinh();\n    complex10.getArgument();\n    complex2.negate();\n    complex3.sqrt();\n}",
    "testName" : "test8686"
  },
  "test5252" : {
    "methodSignature" : "public static Complex valueOf(double realPart, double imaginaryPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    Complex complex0 = Complex.valueOf(1.3377854824066162, 1.3377854824066162);\n    Complex complex1 = complex0.NaN.sqrt();\n    complex0.acos();\n    Complex complex2 = complex1.NaN.pow(0.0);\n    complex0.readResolve();\n    complex0.getImaginary();\n    complex1.conjugate();\n    complex1.subtract(complex2);\n    Complex.valueOf(0.0, 0.0);\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.subtract((-1641.870995591));\n    Complex complex2 = complex1.INF.divide((-1641.870995591));\n    complex2.ZERO.tanh();\n    Complex complex3 = complex2.NaN.divide(1234.5736213204275);\n    complex0.getImaginary();\n    complex1.conjugate();\n    Complex complex4 = complex0.createComplex(Double.NaN, Double.NaN);\n    complex4.INF.log();\n    complex0.ONE.abs();\n    complex0.isNaN();\n    Object object0 = new Object();\n    complex4.equals(object0);\n    complex4.pow(complex0);\n    complex3.tan();\n}",
    "testName" : "test2020"
  },
  "test7474" : {
    "methodSignature" : "public Complex reciprocal()",
    "methodName" : "reciprocal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7474() throws Throwable {\n    Complex complex0 = Complex.valueOf(2225.0);\n    complex0.hashCode();\n    Complex complex1 = complex0.negate();\n    complex1.NaN.tanh();\n    complex0.reciprocal();\n}",
    "testName" : "test7474"
  },
  "test4040" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0, 0.0);\n    Complex complex1 = complex0.INF.negate();\n    Complex complex2 = Complex.I;\n    complex0.pow(complex2);\n    Complex complex3 = complex2.add(complex0);\n    complex3.ONE.abs();\n    complex1.abs();\n    Complex complex4 = Complex.valueOf(1011.13);\n    Complex complex5 = complex4.INF.divide(complex3);\n    complex1.multiply(94.55);\n    complex5.sin();\n    complex1.subtract(complex4);\n}",
    "testName" : "test4040"
  },
  "test6262" : {
    "methodSignature" : "public Complex add(Complex addend) throws NullArgumentException",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6262() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.INF.negate();\n    complex0.ZERO.abs();\n    Complex complex2 = complex1.I.divide((-366.422758));\n    complex0.sin();\n    Complex complex3 = complex2.negate();\n    complex3.reciprocal();\n    complex3.equals(complex1);\n    complex3.add(complex0);\n}",
    "testName" : "test6262"
  },
  "test9292" : {
    "methodSignature" : "protected Complex createComplex(double realPart, double imaginaryPart)",
    "methodName" : "createComplex",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9292() throws Throwable {\n    Complex complex0 = new Complex(4170.0, (-246.60791724184));\n    Complex complex1 = complex0.cosh();\n    Complex complex2 = complex1.INF.add(complex0);\n    complex2.ZERO.createComplex(4170.0, (-246.60791724184));\n    complex2.INF.readResolve();\n    complex0.add(198.2750164);\n    complex1.exp();\n    complex1.createComplex(198.2750164, (-346.10525424));\n}",
    "testName" : "test9292"
  },
  "test8484" : {
    "methodSignature" : "public Complex tan()",
    "methodName" : "tan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8484() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = Complex.I;\n    complex0.I.subtract(complex1);\n    complex0.getField();\n    Complex complex2 = complex0.conjugate();\n    Complex complex3 = complex2.ZERO.subtract(2253.86183);\n    complex2.INF.abs();\n    Object object0 = complex2.readResolve();\n    complex2.equals(object0);\n    complex3.exp();\n    complex3.tan();\n}",
    "testName" : "test8484"
  },
  "test5050" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5050() throws Throwable {\n    Complex complex0 = new Complex(459.557442, 1.0);\n    complex0.NaN.getField();\n    complex0.INF.getArgument();\n    complex0.toString();\n    complex0.asin();\n}",
    "testName" : "test5050"
  },
  "test7272" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7272() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.I.subtract((-2003.4322116849));\n    Complex complex2 = complex0.log();\n    complex1.exp();\n    Complex.valueOf((-2003.4322116849), (-2003.4322116849));\n    Complex complex3 = complex0.sin();\n    complex3.INF.pow(6.283185307179586);\n    complex1.multiply(complex0);\n    complex3.reciprocal();\n    complex2.getField();\n    complex0.getArgument();\n    complex1.add(0.39893341064453125);\n}",
    "testName" : "test7272"
  },
  "test022" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Complex complex0 = new Complex((-464.584278398));\n    Complex complex1 = complex0.ZERO.multiply((-464.584278398));\n    Complex complex2 = complex1.I.divide(complex0);\n    Complex complex3 = complex2.sinh();\n    complex2.NaN.cos();\n    complex2.ONE.toString();\n    Complex complex4 = complex0.cos();\n    Complex.valueOf(0.0, (-464.584278398));\n    Complex complex5 = complex4.ZERO.tanh();\n    complex5.I.nthRoot(828);\n    complex0.nthRoot(952);\n    Complex complex6 = new Complex(828);\n    complex4.NaN.sin();\n    Complex complex7 = complex6.reciprocal();\n    Complex complex8 = complex7.I.createComplex(828, (-464.584278398));\n    Complex complex9 = complex8.ZERO.sin();\n    complex9.ZERO.pow(0.0);\n    complex4.ONE.sqrt1z();\n    Complex complex10 = complex4.divide(Double.NaN);\n    complex10.INF.toString();\n    Complex complex11 = complex3.INF.pow((-1.0));\n    complex10.INF.tan();\n    complex11.sqrt1z();\n    complex10.subtract(complex5);\n    complex6.getReal();\n    complex3.atan();\n    complex8.log();\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public Complex negate()",
    "methodName" : "negate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Object object0 = complex0.readResolve();\n    complex0.equals(object0);\n    Complex complex1 = complex0.conjugate();\n    Complex complex2 = complex1.ONE.log();\n    Complex complex3 = complex2.pow(1.5129516124725342);\n    Complex complex4 = complex2.reciprocal();\n    complex4.I.hashCode();\n    Complex complex5 = complex1.atan();\n    Complex complex6 = Complex.ONE;\n    complex0.add(complex6);\n    Complex complex7 = complex0.I.reciprocal();\n    complex1.divide(complex4);\n    Complex complex8 = complex1.divide(1.5129516124725342);\n    complex2.divide(1.5129516124725342);\n    complex4.cosh();\n    complex8.sinh();\n    complex2.subtract(complex5);\n    complex3.pow((Complex) null);\n    complex7.log();\n    complex1.negate();\n}",
    "testName" : "test066"
  },
  "test5757" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5757() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.tanh();\n    complex1.reciprocal();\n    complex1.multiply((-2.2239222395888823E-8));\n}",
    "testName" : "test5757"
  },
  "test2323" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Complex complex0 = new Complex((-1.1410233017161343E-9));\n    complex0.ONE.multiply((-1));\n    Complex complex1 = complex0.exp();\n    complex1.ZERO.subtract((-84.230041));\n    complex1.getField();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public Complex reciprocal()",
    "methodName" : "reciprocal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Complex complex0 = Complex.valueOf(Double.NaN);\n    complex0.INF.createComplex(Double.NaN, 1105.556);\n    Complex complex1 = complex0.asin();\n    complex0.conjugate();\n    complex1.reciprocal();\n}",
    "testName" : "test1313"
  },
  "test4545" : {
    "methodSignature" : "public Complex multiply(double factor)",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4545() throws Throwable {\n    Complex complex0 = Complex.valueOf((-469.23), (-962.625682634));\n    Complex complex1 = complex0.asin();\n    Complex complex2 = complex0.multiply((-2294));\n    Complex complex3 = complex2.pow((-54.03));\n    complex3.INF.tanh();\n    complex3.INF.divide((-54.03));\n    complex3.I.readResolve();\n    complex3.INF.add((-54.03));\n    complex2.abs();\n    Complex complex4 = complex0.add((-469.23));\n    complex4.ONE.toString();\n    complex2.multiply(0.0);\n    complex1.multiply(complex2);\n    complex1.multiply((-469.23));\n}",
    "testName" : "test4545"
  },
  "test3535" : {
    "methodSignature" : "public double abs()",
    "methodName" : "abs",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    Complex complex0 = new Complex(963.852);\n    Complex complex1 = complex0.INF.multiply(2137);\n    Complex.valueOf((-969.4245145108173));\n    complex0.ZERO.abs();\n    complex0.sinh();\n    complex1.abs();\n}",
    "testName" : "test3535"
  },
  "test6767" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6767() throws Throwable {\n    Complex complex0 = Complex.valueOf((-3422.8));\n    Complex complex1 = complex0.negate();\n    complex1.pow(complex0);\n}",
    "testName" : "test6767"
  },
  "test8989" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8989() throws Throwable {\n    Complex complex0 = new Complex((-54.752), (-1305.981));\n    Complex complex1 = Complex.valueOf((-54.752), (-1.0));\n    complex1.cosh();\n    Complex complex2 = complex0.NaN.tan();\n    complex2.INF.hashCode();\n    Complex complex3 = complex0.reciprocal();\n    Complex complex4 = complex0.pow(complex2);\n    complex4.NaN.hashCode();\n    Complex complex5 = complex2.I.sqrt();\n    Complex complex6 = complex3.pow((-54.752));\n    complex3.I.sinh();\n    Complex complex7 = complex6.ZERO.conjugate();\n    complex7.ZERO.subtract(complex3);\n    complex0.divide(complex2);\n    Complex complex8 = complex3.sqrt1z();\n    complex8.ONE.conjugate();\n    complex8.ZERO.pow(complex4);\n    Complex complex9 = complex6.acos();\n    Complex.valueOf((-1305.981), (-54.752));\n    Complex complex10 = complex0.pow(70.532908);\n    Complex complex11 = complex0.sinh();\n    Complex complex12 = complex9.divide(complex10);\n    complex12.INF.getArgument();\n    complex5.getField();\n    complex9.cos();\n    complex12.asin();\n    Complex complex13 = complex5.multiply(complex11);\n    complex11.getReal();\n    complex13.sinh();\n}",
    "testName" : "test8989"
  },
  "test5555" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.NaN.nthRoot(1);\n    complex0.acos();\n}",
    "testName" : "test5555"
  },
  "test7777" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7777() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    Complex complex1 = Complex.INF;\n    complex0.NaN.add(0.0);\n    Complex complex2 = complex0.ONE.pow(complex1);\n    Complex complex3 = complex2.tanh();\n    complex3.acos();\n    Complex complex4 = complex3.sinh();\n    complex4.NaN.readResolve();\n    Complex complex5 = complex0.sqrt();\n    Complex complex6 = complex5.subtract(0.0);\n    Complex complex7 = complex0.acos();\n    complex1.isInfinite();\n    Complex complex8 = complex1.conjugate();\n    Complex complex9 = complex8.I.reciprocal();\n    complex6.I.divide(1488.2062);\n    complex0.getArgument();\n    complex7.ZERO.atan();\n    complex1.nthRoot(3371);\n    complex7.multiply(complex0);\n    Complex complex10 = complex1.asin();\n    complex10.INF.pow(complex6);\n    Complex complex11 = complex6.exp();\n    complex11.I.sin();\n    complex0.NaN.multiply(0.0);\n    complex11.NaN.add(6.283185307179586);\n    complex6.abs();\n    complex5.pow(complex0);\n    Complex complex12 = complex5.tan();\n    complex12.NaN.conjugate();\n    complex9.atan();\n    complex1.equals(complex7);\n}",
    "testName" : "test7777"
  },
  "test1111" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Complex complex0 = new Complex((-3491.067328733715));\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex1.NaN.sinh();\n    complex2.ZERO.sqrt();\n    complex0.INF.tanh();\n    complex0.getImaginary();\n    complex1.hashCode();\n}",
    "testName" : "test1111"
  },
  "test4343" : {
    "methodSignature" : "public static Complex valueOf(double realPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4343() throws Throwable {\n    Complex complex0 = Complex.valueOf(Double.NaN, (-1948.70347));\n    Complex complex1 = complex0.NaN.sqrt();\n    Complex complex2 = complex1.ONE.log();\n    complex0.getArgument();\n    Complex complex3 = complex0.divide((-1948.70347));\n    Complex complex4 = complex3.ONE.conjugate();\n    complex4.ZERO.divide(complex2);\n    Complex complex5 = complex3.subtract(2.147638465376883E-257);\n    Complex complex6 = complex3.ONE.multiply(complex2);\n    Complex complex7 = complex6.NaN.multiply(complex1);\n    Complex complex8 = complex7.add((-189.65088836));\n    complex8.ONE.atan();\n    Complex complex9 = Complex.valueOf(0.4580921530723572, 2.147638465376883E-257);\n    complex3.asin();\n    complex1.getImaginary();\n    Complex complex10 = Complex.INF;\n    complex10.NaN.sqrt();\n    complex6.INF.divide(complex10);\n    Complex complex11 = complex3.exp();\n    complex11.NaN.cosh();\n    complex3.toString();\n    complex6.sqrt();\n    complex6.abs();\n    complex9.hashCode();\n    complex5.divide((-4.608112855795952E276));\n    complex6.equals(\"(NaN, NaN)\");\n    Complex.valueOf(3579.297);\n}",
    "testName" : "test4343"
  },
  "test3333" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    Complex complex0 = Complex.valueOf(4346.7092332);\n    complex0.conjugate();\n    Complex.valueOf(4346.7092332, 1601.13460539);\n    Complex complex1 = complex0.acos();\n    complex1.multiply(complex0);\n}",
    "testName" : "test3333"
  },
  "test6565" : {
    "methodSignature" : "public Complex divide(double divisor)",
    "methodName" : "divide",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6565() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    complex0.I.subtract((-2353.4967));\n    complex0.ZERO.hashCode();\n    Complex complex1 = complex0.cosh();\n    complex1.getField();\n    complex0.subtract(complex1);\n    complex1.ZERO.log();\n    Complex complex2 = complex1.divide(complex0);\n    Complex complex3 = Complex.valueOf(0.0, 0.0);\n    complex3.acos();\n    complex2.abs();\n    Complex complex4 = complex2.tanh();\n    complex4.divide((-2353.4967));\n}",
    "testName" : "test6565"
  },
  "test8787" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8787() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.NaN.atan();\n    Complex complex2 = complex0.multiply(932);\n    complex2.NaN.divide(0.5979346036911011);\n    complex2.ZERO.exp();\n    Complex complex3 = complex0.createComplex(932, (-569.03392815193));\n    complex3.INF.toString();\n    Complex complex4 = complex3.conjugate();\n    Complex complex5 = complex2.ZERO.cos();\n    Complex complex6 = complex5.INF.acos();\n    complex3.multiply(1.2334070098307164E267);\n    Complex complex7 = complex2.subtract(0.5979346036911011);\n    complex7.cos();\n    Complex complex8 = complex0.add(complex2);\n    Complex complex9 = complex1.tan();\n    complex9.sqrt1z();\n    complex6.subtract(complex9);\n    complex4.reciprocal();\n    complex8.getField();\n    Complex complex10 = Complex.ZERO;\n    complex4.subtract(complex10);\n}",
    "testName" : "test8787"
  },
  "test011" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Complex complex0 = Complex.valueOf(0.0);\n    Complex complex1 = complex0.pow(0.0);\n    Complex complex2 = Complex.INF;\n    complex2.INF.asin();\n    Complex complex3 = complex2.NaN.subtract(complex1);\n    complex3.NaN.getField();\n    Complex complex4 = complex0.ONE.multiply(complex2);\n    Complex complex5 = complex4.I.divide(complex0);\n    Complex complex6 = complex2.ONE.divide(0.0);\n    complex4.NaN.cosh();\n    complex6.INF.hashCode();\n    Complex complex7 = complex0.cos();\n    Complex complex8 = complex7.I.conjugate();\n    Complex complex9 = complex4.reciprocal();\n    complex7.I.sqrt();\n    complex9.NaN.abs();\n    Complex complex10 = complex4.tanh();\n    complex9.NaN.subtract(complex3);\n    Complex complex11 = complex10.ZERO.createComplex(2.0, Double.NaN);\n    Complex complex12 = complex0.createComplex(0.0, 1.0);\n    complex8.abs();\n    complex6.equals(complex5);\n    Complex complex13 = complex8.multiply(complex7);\n    complex13.INF.tanh();\n    complex10.NaN.getField();\n    Complex complex14 = complex0.multiply((-6.0896188500539086E-9));\n    complex11.sin();\n    complex12.pow(complex1);\n    complex5.sqrt();\n    Complex complex15 = complex2.tan();\n    complex15.NaN.cosh();\n    complex14.getArgument();\n    complex1.getImaginary();\n    complex14.getField();\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Complex complex0 = new Complex(Double.NaN, Double.NaN);\n    Complex complex1 = new Complex(Double.NaN);\n    Complex complex2 = complex0.multiply(complex1);\n    complex1.ZERO.getField();\n    Complex complex3 = complex1.add(0.0);\n    complex3.I.toString();\n    complex1.INF.log();\n    complex2.INF.readResolve();\n    complex1.isInfinite();\n    Complex complex4 = complex0.exp();\n    Complex complex5 = complex4.NaN.createComplex(1852.1590224026, 1852.1590224026);\n    Complex complex6 = Complex.valueOf(Double.NaN, 2776.0);\n    complex4.acos();\n    complex6.ONE.sin();\n    Complex complex7 = complex6.sqrt1z();\n    Complex complex8 = complex7.atan();\n    complex7.cosh();\n    complex7.isInfinite();\n    complex1.isNaN();\n    complex5.reciprocal();\n    Complex complex9 = Complex.valueOf(0.0);\n    complex8.equals(complex9);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public Complex acos()",
    "methodName" : "acos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.ZERO.subtract(258.12728);\n    Complex complex2 = complex1.ONE.tanh();\n    complex0.INF.tanh();\n    Complex complex3 = complex2.NaN.tanh();\n    complex0.multiply(1.0);\n    Complex complex4 = Complex.INF;\n    complex4.reciprocal();\n    Complex complex5 = complex0.ONE.conjugate();\n    complex5.ONE.add(complex1);\n    Complex complex6 = complex1.NaN.subtract(complex4);\n    Complex complex7 = complex2.subtract(1.0);\n    Complex complex8 = complex7.log();\n    complex1.ONE.readResolve();\n    complex8.I.sqrt();\n    Complex complex9 = complex2.multiply((-158.620239));\n    complex3.nthRoot((-3353));\n    complex6.tan();\n    complex9.equals(complex4);\n    complex4.acos();\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    Complex complex0 = Complex.valueOf((-441.88499));\n    complex0.NaN.multiply(823);\n    complex0.I.readResolve();\n    complex0.hashCode();\n    Complex complex1 = complex0.asin();\n    complex1.ZERO.pow(complex0);\n    complex1.sqrt1z();\n    complex1.sqrt();\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.INF;\n    complex0.ZERO.subtract(complex1);\n    complex0.cos();\n    complex0.ZERO.getArgument();\n    complex0.atan();\n    complex0.asin();\n}",
    "testName" : "test1717"
  },
  "test4949" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    Complex complex0 = Complex.valueOf((-348.047146));\n    Complex complex1 = complex0.exp();\n    complex1.ZERO.hashCode();\n    Complex complex2 = complex1.subtract(complex0);\n    complex2.getImaginary();\n    Complex.valueOf(928.4931335996077);\n    Complex complex3 = complex2.asin();\n    complex3.tan();\n    Complex.valueOf(0.0);\n    complex1.hashCode();\n    Complex complex4 = complex2.negate();\n    complex4.sinh();\n}",
    "testName" : "test4949"
  },
  "test9999" : {
    "methodSignature" : "public Complex cosh()",
    "methodName" : "cosh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9999() throws Throwable {\n    Complex complex0 = new Complex(828.0, 828.0);\n    complex0.readResolve();\n    complex0.nthRoot(1431651503);\n    int int0 = 4502;\n    // Undeclared exception!\n    complex0.cosh();\n}",
    "testName" : "test9999"
  },
  "test3939" : {
    "methodSignature" : "public static Complex valueOf(double realPart, double imaginaryPart)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.INF.cos();\n    complex0.ZERO.multiply(complex1);\n    complex0.getField();\n    complex1.ONE.getArgument();\n    complex0.getReal();\n    complex0.isInfinite();\n    complex1.readResolve();\n    Complex complex2 = complex1.cosh();\n    complex2.NaN.readResolve();\n    Complex.valueOf(0.0, 0.0);\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public ComplexField getField()",
    "methodName" : "getField",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    Complex complex0 = Complex.valueOf((-2350.488384));\n    complex0.negate();\n    Complex complex1 = complex0.ONE.cosh();\n    complex1.ZERO.divide(0.0);\n    Complex complex2 = complex0.NaN.sinh();\n    Complex complex3 = complex1.NaN.divide(complex2);\n    Complex complex4 = complex3.ZERO.asin();\n    complex3.nthRoot(1);\n    Complex complex5 = complex0.atan();\n    Complex complex6 = complex5.ZERO.sqrt1z();\n    complex6.tanh();\n    complex5.NaN.readResolve();\n    complex0.cosh();\n    Complex complex7 = complex5.tan();\n    complex1.ONE.pow(complex2);\n    Complex complex8 = complex1.divide(complex7);\n    complex8.toString();\n    complex2.isInfinite();\n    complex4.getField();\n}",
    "testName" : "test5959"
  },
  "test2525" : {
    "methodSignature" : "public Complex cos()",
    "methodName" : "cos",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.valueOf(0.0);\n    Complex complex2 = complex0.add(complex1);\n    complex0.sqrt();\n    complex2.cos();\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Complex complex0 = Complex.I;\n    complex0.ONE.hashCode();\n    Complex complex1 = Complex.NaN;\n    complex0.ONE.readResolve();\n    Complex complex2 = complex0.pow(complex1);\n    complex1.ONE.divide(complex2);\n    Complex complex3 = complex1.log();\n    Complex complex4 = complex3.NaN.cos();\n    complex3.I.log();\n    complex3.hashCode();\n    complex3.readResolve();\n    complex4.negate();\n    complex4.isInfinite();\n}",
    "testName" : "test1515"
  },
  "test4747" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4747() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = complex0.log();\n    Complex complex2 = complex1.NaN.multiply(complex0);\n    Complex complex3 = complex2.INF.reciprocal();\n    complex3.multiply(1.1375834941864014);\n    complex1.getArgument();\n    complex0.sinh();\n    complex2.getReal();\n}",
    "testName" : "test4747"
  },
  "test3737" : {
    "methodSignature" : "public Complex log()",
    "methodName" : "log",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex.valueOf(1.0);\n    complex0.ONE.tan();\n    Complex complex1 = complex0.cosh();\n    complex1.getArgument();\n    complex0.log();\n}",
    "testName" : "test3737"
  },
  "test6969" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6969() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    complex0.ONE.getField();\n    Complex complex1 = complex0.exp();\n    Complex complex2 = complex1.ONE.asin();\n    Complex complex3 = complex1.NaN.acos();\n    complex1.INF.abs();\n    complex0.ZERO.divide(Double.POSITIVE_INFINITY);\n    complex1.tan();\n    Complex complex4 = complex1.ZERO.pow(complex0);\n    Complex complex5 = complex4.INF.pow(complex3);\n    complex5.INF.tanh();\n    Complex complex6 = complex1.INF.atan();\n    complex2.NaN.abs();\n    Complex.valueOf(0.0);\n    Complex complex7 = complex2.multiply(728);\n    Complex complex8 = complex1.pow(complex0);\n    complex7.pow((-2978.708));\n    complex1.isInfinite();\n    complex8.getReal();\n    complex6.subtract((Complex) null);\n}",
    "testName" : "test6969"
  },
  "test7171" : {
    "methodSignature" : "public Complex multiply(Complex factor) throws NullArgumentException",
    "methodName" : "multiply",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7171() throws Throwable {\n    Complex complex0 = Complex.valueOf((-1009.7903));\n    Complex complex1 = complex0.conjugate();\n    Complex complex2 = complex1.atan();\n    complex0.conjugate();\n    Complex complex3 = complex1.I.reciprocal();\n    complex3.hashCode();\n    complex1.I.hashCode();\n    complex3.hashCode();\n    Complex complex4 = complex0.NaN.log();\n    Complex complex5 = complex2.I.multiply((-2794));\n    complex3.ZERO.nthRoot(1);\n    Complex complex6 = complex0.cos();\n    complex6.I.add(complex3);\n    Complex complex7 = complex2.subtract(complex0);\n    complex7.ONE.subtract(complex4);\n    Complex complex8 = complex1.multiply(1);\n    complex3.nthRoot(1);\n    complex0.subtract(complex5);\n    complex2.add(complex3);\n    complex1.sqrt();\n    complex8.hashCode();\n    complex4.multiply(complex8);\n}",
    "testName" : "test7171"
  },
  "test9595" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9595() throws Throwable {\n    Complex complex0 = Complex.valueOf((-1143.91));\n    Complex complex1 = complex0.tanh();\n    Complex complex2 = complex1.sqrt1z();\n    Complex complex3 = Complex.ZERO;\n    Complex complex4 = complex3.NaN.sin();\n    complex1.INF.sin();\n    complex0.ZERO.tan();\n    complex3.ONE.sqrt();\n    complex4.I.toString();\n    Complex complex5 = complex0.add(complex3);\n    complex1.INF.sqrt1z();\n    complex5.NaN.multiply((-475));\n    Complex complex6 = complex0.subtract(Double.NaN);\n    complex6.subtract(complex2);\n    Complex complex7 = complex3.cosh();\n    complex7.asin();\n    Complex complex8 = new Complex(1255.0);\n    complex1.subtract(complex8);\n}",
    "testName" : "test9595"
  },
  "test8181" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8181() throws Throwable {\n    Complex complex0 = Complex.NaN;\n    Complex complex1 = Complex.valueOf(0.5197699069976807);\n    Complex complex2 = complex0.subtract(complex1);\n    Complex complex3 = complex0.divide(0.0);\n    Complex complex4 = complex0.pow(complex3);\n    Complex complex5 = Complex.valueOf(3122.88, 3122.88);\n    complex5.INF.getArgument();\n    Complex complex6 = complex0.cos();\n    Complex complex7 = complex6.NaN.log();\n    complex4.pow(complex3);\n    complex6.nthRoot(948);\n    complex3.isNaN();\n    complex7.equals(complex0);\n    complex7.getArgument();\n    complex2.tanh();\n}",
    "testName" : "test8181"
  },
  "test9797" : {
    "methodSignature" : "public Complex asin()",
    "methodName" : "asin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9797() throws Throwable {\n    Complex complex0 = new Complex(56.92772100273, 56.92772100273);\n    Complex complex1 = complex0.ONE.tanh();\n    Complex complex2 = complex1.add(1.0);\n    complex0.getImaginary();\n    Complex complex3 = complex0.createComplex(56.92772100273, 56.92772100273);\n    complex1.NaN.add(240.8034804947);\n    complex3.divide(complex1);\n    Complex complex4 = complex0.exp();\n    complex2.negate();\n    complex4.asin();\n}",
    "testName" : "test9797"
  },
  "test5353" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5353() throws Throwable {\n    Complex complex0 = Complex.valueOf((-419.11099889808), (-419.11099889808));\n    Complex complex1 = complex0.sqrt();\n    complex1.ZERO.divide(complex0);\n    Complex complex2 = complex0.sqrt();\n    complex2.ZERO.toString();\n    complex2.I.readResolve();\n    Complex complex3 = complex0.I.cos();\n    Complex complex4 = complex3.ONE.sin();\n    Complex complex5 = complex3.ONE.sinh();\n    Complex.valueOf((-419.11099889808));\n    complex4.I.abs();\n    complex3.ZERO.cos();\n    complex0.getField();\n    Complex complex6 = complex0.tan();\n    Complex complex7 = complex6.NaN.subtract(2.0);\n    complex6.NaN.hashCode();\n    complex3.getReal();\n    Complex complex8 = complex3.asin();\n    complex8.ZERO.getArgument();\n    complex3.INF.getArgument();\n    complex0.getImaginary();\n    complex3.sinh();\n    complex5.log();\n    complex7.getField();\n    Complex complex9 = complex7.pow((-419.11099889808));\n    complex0.reciprocal();\n    complex9.hashCode();\n    complex9.getField();\n    complex1.getReal();\n}",
    "testName" : "test5353"
  },
  "test7575" : {
    "methodSignature" : "public Complex pow(Complex x) throws NullArgumentException",
    "methodName" : "pow",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7575() throws Throwable {\n    Complex complex0 = Complex.INF;\n    Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    Complex complex2 = complex1.NaN.add(complex0);\n    complex0.getImaginary();\n    Complex complex3 = complex1.negate();\n    complex3.nthRoot(66);\n    complex0.pow(complex2);\n}",
    "testName" : "test7575"
  },
  "test4141" : {
    "methodSignature" : "public Complex tanh()",
    "methodName" : "tanh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    Complex complex0 = Complex.ZERO;\n    Complex complex1 = complex0.INF.multiply(1338.237264829);\n    Complex complex2 = complex0.ONE.sqrt1z();\n    Complex complex3 = complex2.I.reciprocal();\n    complex0.ONE.sqrt();\n    Complex complex4 = Complex.valueOf(1338.237264829);\n    complex3.ONE.pow(1717.9892);\n    complex0.tanh();\n    Complex complex5 = complex2.negate();\n    Complex complex6 = complex0.atan();\n    complex6.NaN.hashCode();\n    Complex complex7 = complex0.sinh();\n    complex7.divide(complex2);\n    complex5.subtract(complex7);\n    complex4.asin();\n    complex7.sqrt1z();\n    complex1.tanh();\n}",
    "testName" : "test4141"
  },
  "test9191" : {
    "methodSignature" : "public Complex conjugate()",
    "methodName" : "conjugate",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9191() throws Throwable {\n    Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);\n    Complex complex1 = complex0.sin();\n    Complex complex2 = complex0.NaN.divide(complex1);\n    complex2.INF.multiply(Double.POSITIVE_INFINITY);\n    Complex complex3 = complex2.createComplex(192.1345, Double.POSITIVE_INFINITY);\n    complex3.I.acos();\n    Complex complex4 = Complex.valueOf(0.0);\n    Complex complex5 = complex4.ONE.divide((-264.283023385));\n    complex0.toString();\n    Complex complex6 = complex4.cos();\n    complex5.nthRoot(1);\n    complex6.multiply(2334);\n    Complex complex7 = complex4.log();\n    complex7.conjugate();\n}",
    "testName" : "test9191"
  },
  "test3131" : {
    "methodSignature" : "public Complex sqrt()",
    "methodName" : "sqrt",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    Complex complex0 = new Complex(703.94);\n    complex0.sqrt();\n}",
    "testName" : "test3131"
  },
  "test8585" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8585() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = new Complex(6.910528108396216E258);\n    Complex complex2 = complex1.multiply((-1029.24933021));\n    complex2.ONE.negate();\n    complex0.subtract(complex1);\n}",
    "testName" : "test8585"
  },
  "test5151" : {
    "methodSignature" : "public boolean isNaN()",
    "methodName" : "isNaN",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    Complex complex0 = new Complex(0.0, 0.0);\n    complex0.isNaN();\n}",
    "testName" : "test5151"
  },
  "test7373" : {
    "methodSignature" : "public double getReal()",
    "methodName" : "getReal",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7373() throws Throwable {\n    Complex complex0 = Complex.valueOf((-4498.931));\n    complex0.getReal();\n}",
    "testName" : "test7373"
  },
  "test6161" : {
    "methodSignature" : "public Complex sin()",
    "methodName" : "sin",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6161() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = complex0.createComplex((-1.8013411720005014E-7), (-2507.0));\n    complex0.ONE.asin();\n    complex1.add((-1.8013411720005014E-7));\n    complex1.I.createComplex((-1.8013411720005014E-7), Double.POSITIVE_INFINITY);\n    complex0.cos();\n    complex1.sin();\n}",
    "testName" : "test6161"
  },
  "test9393" : {
    "methodSignature" : "public Complex add(double addend)",
    "methodName" : "add",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9393() throws Throwable {\n    Complex complex0 = new Complex((-2236.84), (-2236.84));\n    Complex complex1 = Complex.valueOf((-2236.84));\n    complex0.INF.abs();\n    Complex complex2 = Complex.valueOf((-2180.971));\n    complex0.abs();\n    Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);\n    complex3.ONE.sinh();\n    complex1.acos();\n    complex2.add(1851.6813594113);\n}",
    "testName" : "test9393"
  },
  "test8383" : {
    "methodSignature" : "public Complex atan()",
    "methodName" : "atan",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8383() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.valueOf((-68.512100919));\n    Complex complex2 = Complex.INF;\n    Complex complex3 = complex1.ZERO.multiply(complex2);\n    complex3.ZERO.sinh();\n    Complex complex4 = complex1.NaN.divide((-2556.0));\n    complex4.INF.multiply((-68.512100919));\n    Complex complex5 = complex0.I.divide(complex1);\n    complex5.getArgument();\n    complex0.isNaN();\n    complex5.sqrt();\n    Complex complex6 = complex2.acos();\n    complex6.ONE.exp();\n    complex6.ONE.pow(0.29036402702331543);\n    complex6.getImaginary();\n    complex0.atan();\n}",
    "testName" : "test8383"
  },
  "test000" : {
    "methodSignature" : "public Complex sinh()",
    "methodName" : "sinh",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Complex complex0 = Complex.ONE;\n    Complex complex1 = complex0.NaN.negate();\n    complex0.isNaN();\n    Complex complex2 = complex0.pow(0.0);\n    Complex complex3 = complex2.ZERO.multiply(complex1);\n    complex3.INF.getField();\n    complex2.INF.pow((-5.253258132241335E-8));\n    Complex complex4 = complex1.sqrt1z();\n    complex4.hashCode();\n    Complex complex5 = complex0.tan();\n    Complex complex6 = complex5.INF.exp();\n    Complex complex7 = complex6.INF.acos();\n    Complex complex8 = complex6.NaN.sin();\n    complex7.ZERO.negate();\n    complex8.ONE.log();\n    complex5.asin();\n    complex7.INF.atan();\n    complex5.toString();\n    complex5.I.abs();\n    complex5.getReal();\n    complex7.divide(complex0);\n    Complex complex9 = complex2.acos();\n    complex9.createComplex(1.0, (-5.253258132241335E-8));\n    Complex complex10 = Complex.valueOf(0.0);\n    complex10.cosh();\n    complex2.sinh();\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public boolean isInfinite()",
    "methodName" : "isInfinite",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Complex complex0 = new Complex(79.1515712, 6.283185307179586);\n    Complex complex1 = complex0.tan();\n    Complex complex2 = complex0.ONE.sinh();\n    Complex complex3 = complex2.INF.divide(0.0);\n    complex1.getImaginary();\n    complex0.getField();\n    complex2.getArgument();\n    Complex complex4 = complex1.sqrt1z();\n    Complex complex5 = complex4.NaN.asin();\n    Complex complex6 = complex5.INF.acos();\n    Complex complex7 = complex1.sqrt1z();\n    complex7.hashCode();\n    complex0.hashCode();\n    complex7.tanh();\n    complex0.add(complex2);\n    Complex complex8 = complex6.add(0.999997626163689);\n    complex8.subtract(complex3);\n    complex2.isInfinite();\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Complex complex0 = Complex.I;\n    Complex complex1 = Complex.valueOf(4.8988494581069625E-8, 4.8988494581069625E-8);\n    Complex complex2 = complex0.INF.sqrt1z();\n    complex0.I.tan();\n    complex1.I.tanh();\n    Complex complex3 = Complex.valueOf((-7920.564772208353), (-89.00317282102));\n    complex0.ZERO.abs();\n    complex0.INF.getField();\n    Complex complex4 = complex0.sqrt1z();\n    complex1.subtract(4.8988494581069625E-8);\n    complex2.asin();\n    Complex complex5 = complex2.tan();\n    Complex complex6 = Complex.ZERO;\n    Complex complex7 = complex3.ONE.pow(complex6);\n    complex5.cosh();\n    complex2.cos();\n    complex5.conjugate();\n    Complex complex8 = complex5.multiply((-3553.5448350985));\n    Complex complex9 = complex8.INF.exp();\n    complex9.I.conjugate();\n    complex8.multiply(599);\n    complex3.add(complex8);\n    complex4.reciprocal();\n    complex7.toString();\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "public Complex subtract(Complex subtrahend) throws NullArgumentException",
    "methodName" : "subtract",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    Complex complex0 = Complex.valueOf((-1.0));\n    Complex complex1 = complex0.tanh();\n    complex1.I.exp();\n    complex0.subtract(complex1);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public List<Complex> nthRoot(int n)",
    "methodName" : "nthRoot",
    "className" : "org.apache.commons.math.complex.Complex",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Complex complex0 = new Complex(0.0);\n    complex0.nthRoot((-1798));\n}",
    "testName" : "test1919"
  }
}