focal_method,test_prefix,docstring
"public Complex sinh() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary), FastMath.cosh(real) * FastMath.sin(imaginary));
}","public void test000() throws Throwable {
    Complex complex0 = Complex.ONE;
    Complex complex1 = complex0.NaN.negate();
    complex0.isNaN();
    Complex complex2 = complex0.pow(0.0);
    Complex complex3 = complex2.ZERO.multiply(complex1);
    complex3.INF.getField();
    complex2.INF.pow((-5.253258132241335E-8));
    Complex complex4 = complex1.sqrt1z();
    complex4.hashCode();
    Complex complex5 = complex0.tan();
    Complex complex6 = complex5.INF.exp();
    Complex complex7 = complex6.INF.acos();
    Complex complex8 = complex6.NaN.sin();
    complex7.ZERO.negate();
    complex8.ONE.log();
    complex5.asin();
    complex7.INF.atan();
    complex5.toString();
    complex5.I.abs();
    complex5.getReal();
    complex7.divide(complex0);
    Complex complex9 = complex2.acos();
    complex9.createComplex(1.0, (-5.253258132241335E-8));
    Complex complex10 = Complex.valueOf(0.0);
    complex10.cosh();
    complex2.sinh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"" TARGET=""_top"">
 * hyperbolic sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sinh(1 &plusmn; INFINITY i) = NaN + NaN i
 *   sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
 *   sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic sine of {@code this}.
 * @since 1.2
 */"
"public ComplexField getField() {
    return ComplexField.getInstance();
}","public void test011() throws Throwable {
    Complex complex0 = Complex.valueOf(0.0);
    Complex complex1 = complex0.pow(0.0);
    Complex complex2 = Complex.INF;
    complex2.INF.asin();
    Complex complex3 = complex2.NaN.subtract(complex1);
    complex3.NaN.getField();
    Complex complex4 = complex0.ONE.multiply(complex2);
    Complex complex5 = complex4.I.divide(complex0);
    Complex complex6 = complex2.ONE.divide(0.0);
    complex4.NaN.cosh();
    complex6.INF.hashCode();
    Complex complex7 = complex0.cos();
    Complex complex8 = complex7.I.conjugate();
    Complex complex9 = complex4.reciprocal();
    complex7.I.sqrt();
    complex9.NaN.abs();
    Complex complex10 = complex4.tanh();
    complex9.NaN.subtract(complex3);
    Complex complex11 = complex10.ZERO.createComplex(2.0, Double.NaN);
    Complex complex12 = complex0.createComplex(0.0, 1.0);
    complex8.abs();
    complex6.equals(complex5);
    Complex complex13 = complex8.multiply(complex7);
    complex13.INF.tanh();
    complex10.NaN.getField();
    Complex complex14 = complex0.multiply((-6.0896188500539086E-9));
    complex11.sin();
    complex12.pow(complex1);
    complex5.sqrt();
    Complex complex15 = complex2.tan();
    complex15.NaN.cosh();
    complex14.getArgument();
    complex1.getImaginary();
    complex14.getField();
}","/**
 * {@inheritDoc}
 */"
"public Complex log() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));
}","public void test022() throws Throwable {
    Complex complex0 = new Complex((-464.584278398));
    Complex complex1 = complex0.ZERO.multiply((-464.584278398));
    Complex complex2 = complex1.I.divide(complex0);
    Complex complex3 = complex2.sinh();
    complex2.NaN.cos();
    complex2.ONE.toString();
    Complex complex4 = complex0.cos();
    Complex.valueOf(0.0, (-464.584278398));
    Complex complex5 = complex4.ZERO.tanh();
    complex5.I.nthRoot(828);
    complex0.nthRoot(952);
    Complex complex6 = new Complex(828);
    complex4.NaN.sin();
    Complex complex7 = complex6.reciprocal();
    Complex complex8 = complex7.I.createComplex(828, (-464.584278398));
    Complex complex9 = complex8.ZERO.sin();
    complex9.ZERO.pow(0.0);
    complex4.ONE.sqrt1z();
    Complex complex10 = complex4.divide(Double.NaN);
    complex10.INF.toString();
    Complex complex11 = complex3.INF.pow((-1.0));
    complex10.INF.tan();
    complex11.sqrt1z();
    complex10.subtract(complex5);
    complex6.getReal();
    complex3.atan();
    complex8.log();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/NaturalLogarithm.html"" TARGET=""_top"">
 * natural logarithm</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   log(a + bi) = ln(|a + bi|) + arg(a + bi)i
 *  </code>
 * </pre>
 * where ln on the right hand side is {@link java.lang.Math#log},
 * {@code |a + bi|} is the modulus, {@link Complex#abs},  and
 * {@code arg(a + bi) = }{@link java.lang.Math#atan2}(b, a).
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite (or critical) values in real or imaginary parts of the input may
 * result in infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i
 *   log(INFINITY + i) = INFINITY + 0i
 *   log(-INFINITY + i) = INFINITY + &pi;i
 *   log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i
 *   log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i
 *   log(0 + 0i) = -INFINITY + 0i
 *  </code>
 * </pre>
 *
 * @return the value <code>ln &nbsp; this</code>, the natural logarithm
 * of {@code this}.
 * @since 1.2
 */"
"public Complex tanh() {
    if (isNaN) {
        return NaN;
    }
    double real2 = 2.0 * real;
    double imaginary2 = 2.0 * imaginary;
    double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
    return createComplex(FastMath.sinh(real2) / d, FastMath.sin(imaginary2) / d);
}","public void test033() throws Throwable {
    Complex complex0 = new Complex(578.16691, 578.16691);
    Complex complex1 = complex0.INF.divide(578.16691);
    Complex complex2 = complex1.ONE.multiply(2553);
    Complex complex3 = complex2.NaN.tan();
    complex0.toString();
    complex0.isNaN();
    Complex complex4 = complex1.atan();
    complex4.nthRoot(2553);
    Complex complex5 = Complex.valueOf((-6.292835950782));
    Complex complex6 = complex1.multiply(complex5);
    Complex complex7 = complex6.INF.subtract((-6.292835950782));
    Complex complex8 = complex5.add(complex6);
    complex8.NaN.reciprocal();
    complex0.multiply(complex2);
    complex0.asin();
    complex7.tan();
    complex8.reciprocal();
    complex3.tanh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicTangent.html"" TARGET=""_top"">
 * hyperbolic tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
 * {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   tanh(a &plusmn; INFINITY i) = NaN + NaN i
 *   tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i
 *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic tangent of {@code this}.
 * @since 1.2
 */"
"public boolean isInfinite() {
    return isInfinite;
}","public void test044() throws Throwable {
    Complex complex0 = new Complex(79.1515712, 6.283185307179586);
    Complex complex1 = complex0.tan();
    Complex complex2 = complex0.ONE.sinh();
    Complex complex3 = complex2.INF.divide(0.0);
    complex1.getImaginary();
    complex0.getField();
    complex2.getArgument();
    Complex complex4 = complex1.sqrt1z();
    Complex complex5 = complex4.NaN.asin();
    Complex complex6 = complex5.INF.acos();
    Complex complex7 = complex1.sqrt1z();
    complex7.hashCode();
    complex0.hashCode();
    complex7.tanh();
    complex0.add(complex2);
    Complex complex8 = complex6.add(0.999997626163689);
    complex8.subtract(complex3);
    complex2.isInfinite();
}","/**
 * Checks whether either the real or imaginary part of this complex number
 * takes an infinite value (either {@code Double.POSITIVE_INFINITY} or
 * {@code Double.NEGATIVE_INFINITY}) and neither part
 * is {@code NaN}.
 *
 * @return true if one or both parts of this complex number are infinite
 * and neither part is {@code NaN}.
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Complex) {
        Complex c = (Complex) other;
        if (c.isNaN) {
            return isNaN;
        } else {
            return (real == c.real) && (imaginary == c.imaginary);
        }
    }
    return false;
}","public void test055() throws Throwable {
    Complex complex0 = new Complex(Double.NaN, Double.NaN);
    Complex complex1 = new Complex(Double.NaN);
    Complex complex2 = complex0.multiply(complex1);
    complex1.ZERO.getField();
    Complex complex3 = complex1.add(0.0);
    complex3.I.toString();
    complex1.INF.log();
    complex2.INF.readResolve();
    complex1.isInfinite();
    Complex complex4 = complex0.exp();
    Complex complex5 = complex4.NaN.createComplex(1852.1590224026, 1852.1590224026);
    Complex complex6 = Complex.valueOf(Double.NaN, 2776.0);
    complex4.acos();
    complex6.ONE.sin();
    Complex complex7 = complex6.sqrt1z();
    Complex complex8 = complex7.atan();
    complex7.cosh();
    complex7.isInfinite();
    complex1.isNaN();
    complex5.reciprocal();
    Complex complex9 = Complex.valueOf(0.0);
    complex8.equals(complex9);
}","/**
 * Test for the equality of two Complex objects.
 * If both the real and imaginary parts of two complex numbers
 * are exactly the same, and neither is {@code Double.NaN}, the two
 * Complex objects are considered to be equal.
 * All {@code NaN} values are considered to be equal - i.e, if either
 * (or both) real and imaginary parts of the complex number are equal
 * to {@code Double.NaN}, the complex number is equal to
 * {@code NaN}.
 *
 * @param other Object to test for equality to this
 * @return true if two Complex objects are equal, false if object is
 * {@code null}, not an instance of Complex, or not equal to this Complex
 * instance.
 */"
"public Complex negate() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(-real, -imaginary);
}","public void test066() throws Throwable {
    Complex complex0 = Complex.INF;
    Object object0 = complex0.readResolve();
    complex0.equals(object0);
    Complex complex1 = complex0.conjugate();
    Complex complex2 = complex1.ONE.log();
    Complex complex3 = complex2.pow(1.5129516124725342);
    Complex complex4 = complex2.reciprocal();
    complex4.I.hashCode();
    Complex complex5 = complex1.atan();
    Complex complex6 = Complex.ONE;
    complex0.add(complex6);
    Complex complex7 = complex0.I.reciprocal();
    complex1.divide(complex4);
    Complex complex8 = complex1.divide(1.5129516124725342);
    complex2.divide(1.5129516124725342);
    complex4.cosh();
    complex8.sinh();
    complex2.subtract(complex5);
    complex3.pow((Complex) null);
    complex7.log();
    // Undeclared exception!
    try {
        complex1.negate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns a {@code Complex} whose value is {@code (-this)}.
 * Returns {@code NaN} if either real or imaginary
 * part of this Complex number equals {@code Double.NaN}.
 *
 * @return {@code -this}.
 */"
"public Complex asin() {
    if (isNaN) {
        return NaN;
    }
    return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
}","public void test077() throws Throwable {
    Complex complex0 = new Complex(56.92772100273, 0.0);
    Complex complex1 = complex0.ONE.tanh();
    Complex complex2 = complex1.add(1.0);
    complex0.getImaginary();
    Complex complex3 = complex0.createComplex(0.0, 0.0);
    complex3.divide(complex1);
    Complex complex4 = complex0.exp();
    complex2.negate();
    complex4.asin();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">
 * inverse sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse sine of this complex number.
 * @since 1.2
 */"
"@Override
public String toString() {
    return ""("" + real + "", "" + imaginary + "")"";
}","public void test088() throws Throwable {
    Complex complex0 = Complex.I;
    Complex complex1 = Complex.valueOf(4.8988494581069625E-8, 4.8988494581069625E-8);
    Complex complex2 = complex0.INF.sqrt1z();
    complex0.I.tan();
    complex1.I.tanh();
    Complex complex3 = Complex.valueOf((-7920.564772208353), (-89.00317282102));
    complex0.ZERO.abs();
    complex0.INF.getField();
    Complex complex4 = complex0.sqrt1z();
    complex1.subtract(4.8988494581069625E-8);
    complex2.asin();
    Complex complex5 = complex2.tan();
    Complex complex6 = Complex.ZERO;
    Complex complex7 = complex3.ONE.pow(complex6);
    complex5.cosh();
    complex2.cos();
    complex5.conjugate();
    Complex complex8 = complex5.multiply((-3553.5448350985));
    Complex complex9 = complex8.INF.exp();
    complex9.I.conjugate();
    complex8.multiply(599);
    complex3.add(complex8);
    complex4.reciprocal();
    complex7.toString();
}","/**
 * {@inheritDoc}
 */"
"public Complex acos() {
    if (isNaN) {
        return NaN;
    }
    return this.add(this.sqrt1z().multiply(I)).log().multiply(I.negate());
}","public void test099() throws Throwable {
    Complex complex0 = Complex.ONE;
    Complex complex1 = complex0.ZERO.subtract(258.12728);
    Complex complex2 = complex1.ONE.tanh();
    complex0.INF.tanh();
    Complex complex3 = complex2.NaN.tanh();
    complex0.multiply(1.0);
    Complex complex4 = Complex.INF;
    complex4.reciprocal();
    Complex complex5 = complex0.ONE.conjugate();
    complex5.ONE.add(complex1);
    Complex complex6 = complex1.NaN.subtract(complex4);
    Complex complex7 = complex2.subtract(1.0);
    Complex complex8 = complex7.log();
    complex1.ONE.readResolve();
    complex8.I.sqrt();
    Complex complex9 = complex2.multiply((-158.620239));
    complex3.nthRoot((-3353));
    complex6.tan();
    complex9.equals(complex4);
    complex4.acos();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseCosine.html"" TARGET=""_top"">
 * inverse cosine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse cosine of this complex number.
 * @since 1.2
 */"
"public Complex subtract(double subtrahend) {
    if (isNaN || Double.isNaN(subtrahend)) {
        return NaN;
    }
    return createComplex(real - subtrahend, imaginary);
}","public void test1010() throws Throwable {
    Complex complex0 = new Complex(0.0, 0.0);
    complex0.subtract(0.0);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this - subtrahend)}.
 *
 * @param  subtrahend value to be subtracted from this {@code Complex}.
 * @return {@code this - subtrahend}.
 * @see #subtract(Complex)
 */"
"@Override
public int hashCode() {
    if (isNaN) {
        return 7;
    }
    return 37 * (17 * MathUtils.hash(imaginary) + MathUtils.hash(real));
}","public void test1111() throws Throwable {
    Complex complex0 = new Complex((-3491.067328733715));
    Complex complex1 = complex0.tan();
    Complex complex2 = complex1.NaN.sinh();
    complex2.ZERO.sqrt();
    complex0.INF.tanh();
    complex0.getImaginary();
    complex1.hashCode();
}","/**
 * Get a hashCode for the complex number.
 * Any {@code Double.NaN} value in real or imaginary part produces
 * the same hash code {@code 7}.
 *
 * @return a hash code value for this object.
 */"
"public Complex conjugate() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(real, -imaginary);
}","public void test1212() throws Throwable {
    Complex complex0 = Complex.ZERO;
    complex0.conjugate();
}","/**
 * Return the conjugate of this complex number.
 * The conjugate of {@code a + bi} is {@code a - bi}.
 * <br/>
 * {@link #NaN} is returned if either the real or imaginary
 * part of this Complex number equals {@code Double.NaN}.
 * <br/>
 * If the imaginary part is infinite, and the real part is not
 * {@code NaN}, the returned value has infinite imaginary part
 * of the opposite sign, e.g. the conjugate of
 * {@code 1 + POSITIVE_INFINITY i} is {@code 1 - NEGATIVE_INFINITY i}.
 *
 * @return the conjugate of this Complex object.
 */"
"public Complex reciprocal() {
    if (isNaN) {
        return NaN;
    }
    if (real == 0.0 && imaginary == 0.0) {
        return NaN;
    }
    if (isInfinite) {
        return ZERO;
    }
    if (FastMath.abs(real) < FastMath.abs(imaginary)) {
        double q = real / imaginary;
        double scale = 1. / (real * q + imaginary);
        return createComplex(scale * q, -scale);
    } else {
        double q = imaginary / real;
        double scale = 1. / (imaginary * q + real);
        return createComplex(scale, -scale * q);
    }
}","public void test1313() throws Throwable {
    Complex complex0 = Complex.valueOf(Double.NaN);
    complex0.INF.createComplex(Double.NaN, 1105.556);
    Complex complex1 = complex0.asin();
    complex0.conjugate();
    complex1.reciprocal();
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Complex) {
        Complex c = (Complex) other;
        if (c.isNaN) {
            return isNaN;
        } else {
            return (real == c.real) && (imaginary == c.imaginary);
        }
    }
    return false;
}","public void test1414() throws Throwable {
    Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
    Object object0 = new Object();
    complex0.equals(object0);
}","/**
 * Test for the equality of two Complex objects.
 * If both the real and imaginary parts of two complex numbers
 * are exactly the same, and neither is {@code Double.NaN}, the two
 * Complex objects are considered to be equal.
 * All {@code NaN} values are considered to be equal - i.e, if either
 * (or both) real and imaginary parts of the complex number are equal
 * to {@code Double.NaN}, the complex number is equal to
 * {@code NaN}.
 *
 * @param other Object to test for equality to this
 * @return true if two Complex objects are equal, false if object is
 * {@code null}, not an instance of Complex, or not equal to this Complex
 * instance.
 */"
"public boolean isInfinite() {
    return isInfinite;
}","public void test1515() throws Throwable {
    Complex complex0 = Complex.I;
    complex0.ONE.hashCode();
    Complex complex1 = Complex.NaN;
    complex0.ONE.readResolve();
    Complex complex2 = complex0.pow(complex1);
    complex1.ONE.divide(complex2);
    Complex complex3 = complex1.log();
    Complex complex4 = complex3.NaN.cos();
    complex3.I.log();
    complex3.hashCode();
    complex3.readResolve();
    complex4.negate();
    complex4.isInfinite();
}","/**
 * Checks whether either the real or imaginary part of this complex number
 * takes an infinite value (either {@code Double.POSITIVE_INFINITY} or
 * {@code Double.NEGATIVE_INFINITY}) and neither part
 * is {@code NaN}.
 *
 * @return true if one or both parts of this complex number are infinite
 * and neither part is {@code NaN}.
 */"
"public Complex multiply(double factor) {
    if (isNaN || Double.isNaN(factor)) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor, imaginary * factor);
}","public void test1616() throws Throwable {
    Complex complex0 = new Complex(0.0, 0.0);
    Complex complex1 = complex0.tan();
    complex1.NaN.createComplex(0.0, 0.0);
    Complex complex2 = complex1.NaN.divide(complex0);
    complex2.NaN.abs();
    complex1.getArgument();
    complex0.multiply(0.0);
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}
 * interpreted as a real number.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @see #multiply(Complex)
 */"
"public Complex asin() {
    if (isNaN) {
        return NaN;
    }
    return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
}","public void test1717() throws Throwable {
    Complex complex0 = Complex.I;
    Complex complex1 = Complex.INF;
    complex0.ZERO.subtract(complex1);
    complex0.cos();
    complex0.ZERO.getArgument();
    complex0.atan();
    complex0.asin();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">
 * inverse sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse sine of this complex number.
 * @since 1.2
 */"
"public List<Complex> nthRoot(int n) {
    if (n <= 0) {
        throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);
    }
    final List<Complex> result = new ArrayList<Complex>();
    if (isNaN) {
        result.add(NaN);
        return result;
    }
    if (isInfinite()) {
        result.add(INF);
        return result;
    }
    // nth root of abs -- faster / more accurate to use a solver here?
    final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);
    // Compute nth roots of complex number with k = 0, 1, ... n-1
    final double nthPhi = getArgument() / n;
    final double slice = 2 * FastMath.PI / n;
    double innerPart = nthPhi;
    for (int k = 0; k < n; k++) {
        // inner part
        final double realPart = nthRootOfAbs * FastMath.cos(innerPart);
        final double imaginaryPart = nthRootOfAbs * FastMath.sin(innerPart);
        result.add(createComplex(realPart, imaginaryPart));
        innerPart += slice;
    }
    return result;
}","public void test1919() throws Throwable {
    Complex complex0 = new Complex(0.0);
    complex0.nthRoot((-1798));
}","/**
 * Computes the n-th roots of this complex number.
 * The nth roots are defined by the formula:
 * <pre>
 *  <code>
 *   z<sub>k</sub> = abs<sup>1/n</sup> (cos(phi + 2&pi;k/n) + i (sin(phi + 2&pi;k/n))
 *  </code>
 * </pre>
 * for <i>{@code k=0, 1, ..., n-1}</i>, where {@code abs} and {@code phi}
 * are respectively the {@link #abs() modulus} and
 * {@link #getArgument() argument} of this complex number.
 * <br/>
 * If one or both parts of this complex number is NaN, a list with just
 * one element, {@link #NaN} is returned.
 * if neither part is NaN, but at least one part is infinite, the result
 * is a one-element list containing {@link #INF}.
 *
 * @param n Degree of root.
 * @return a List<Complex> of all {@code n}-th roots of {@code this}.
 * @throws NotPositiveException if {@code n <= 0}.
 * @since 2.0
 */"
"public Complex tan() {
    if (isNaN) {
        return NaN;
    }
    double real2 = 2.0 * real;
    double imaginary2 = 2.0 * imaginary;
    double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);
    return createComplex(FastMath.sin(real2) / d, FastMath.sinh(imaginary2) / d);
}","public void test2020() throws Throwable {
    Complex complex0 = Complex.NaN;
    Complex complex1 = complex0.subtract((-1641.870995591));
    Complex complex2 = complex1.INF.divide((-1641.870995591));
    complex2.ZERO.tanh();
    Complex complex3 = complex2.NaN.divide(1234.5736213204275);
    complex0.getImaginary();
    complex1.conjugate();
    Complex complex4 = complex0.createComplex(Double.NaN, Double.NaN);
    complex4.INF.log();
    complex0.ONE.abs();
    complex0.isNaN();
    Object object0 = new Object();
    complex4.equals(object0);
    complex4.pow(complex0);
    complex3.tan();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/Tangent.html"" TARGET=""_top"">
 * tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
 * {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite (or critical) values in real or imaginary parts of the input may
 * result in infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i
 *   tan(&plusmn;INFINITY + bi) = NaN + NaN i
 *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i
 *  </code>
 * </pre>
 *
 * @return the tangent of {@code this}.
 * @since 1.2
 */"
"public double getImaginary() {
    return imaginary;
}","public void test2222() throws Throwable {
    Complex complex0 = Complex.NaN;
    Complex complex1 = complex0.sqrt1z();
    Complex complex2 = complex1.NaN.cos();
    Complex complex3 = complex1.atan();
    complex3.ONE.conjugate();
    complex1.NaN.toString();
    Complex complex4 = complex0.createComplex(0.0, 0.0);
    complex4.NaN.abs();
    complex0.NaN.abs();
    complex0.INF.createComplex(0.0, 0.0);
    complex4.readResolve();
    complex1.ONE.sqrt();
    Complex complex5 = complex0.tan();
    complex5.I.atan();
    complex5.multiply(complex2);
    complex1.NaN.toString();
    complex0.nthRoot((-3728));
    complex3.tanh();
    // Undeclared exception!
    try {
        complex1.getImaginary();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot compute nth root for null or negative n: -3,728
        //
        verifyException(""org.apache.commons.math.complex.Complex"", e);
    }
}","/**
 * Access the imaginary part.
 *
 * @return the imaginary part.
 */"
"public ComplexField getField() {
    return ComplexField.getInstance();
}","public void test2323() throws Throwable {
    Complex complex0 = new Complex((-1.1410233017161343E-9));
    complex0.ONE.multiply((-1));
    Complex complex1 = complex0.exp();
    complex1.ZERO.subtract((-84.230041));
    complex1.getField();
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Complex) {
        Complex c = (Complex) other;
        if (c.isNaN) {
            return isNaN;
        } else {
            return (real == c.real) && (imaginary == c.imaginary);
        }
    }
    return false;
}","public void test2424() throws Throwable {
    Complex complex0 = Complex.valueOf((-4.342161053332263E165));
    complex0.INF.sqrt1z();
    Complex complex1 = Complex.valueOf(0.0, 501.6);
    complex0.ONE.abs();
    Complex complex2 = complex0.sqrt1z();
    complex2.atan();
    Complex complex3 = complex1.multiply(501.6);
    complex1.exp();
    Object object0 = complex3.readResolve();
    complex0.equals(object0);
}","/**
 * Test for the equality of two Complex objects.
 * If both the real and imaginary parts of two complex numbers
 * are exactly the same, and neither is {@code Double.NaN}, the two
 * Complex objects are considered to be equal.
 * All {@code NaN} values are considered to be equal - i.e, if either
 * (or both) real and imaginary parts of the complex number are equal
 * to {@code Double.NaN}, the complex number is equal to
 * {@code NaN}.
 *
 * @param other Object to test for equality to this
 * @return true if two Complex objects are equal, false if object is
 * {@code null}, not an instance of Complex, or not equal to this Complex
 * instance.
 */"
"public Complex cos() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary), -FastMath.sin(real) * FastMath.sinh(imaginary));
}","public void test2525() throws Throwable {
    Complex complex0 = Complex.I;
    Complex complex1 = Complex.valueOf(0.0);
    Complex complex2 = complex0.add(complex1);
    complex0.sqrt();
    complex2.cos();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/Cosine.html"" TARGET=""_top"">
 * cosine</a>
 * of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i
 *   cos(&plusmn;INFINITY + i) = NaN + NaN i
 *   cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the cosine of this complex number.
 * @since 1.2
 */"
"public Complex atan() {
    if (isNaN) {
        return NaN;
    }
    return this.add(I).divide(I.subtract(this)).log().multiply(I.divide(createComplex(2.0, 0.0)));
}","public void test2626() throws Throwable {
    Complex complex0 = Complex.INF;
    Complex complex1 = Complex.valueOf(0.0);
    complex0.NaN.add(complex1);
    complex0.atan();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseTangent.html"" TARGET=""_top"">
 * inverse tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   atan(z) = (i/2) log((i + z)/(i - z))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse tangent of this complex number
 * @since 1.2
 */"
"public Complex sqrt() {
    if (isNaN) {
        return NaN;
    }
    if (real == 0.0 && imaginary == 0.0) {
        return createComplex(0.0, 0.0);
    }
    double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
    if (real >= 0.0) {
        return createComplex(t, imaginary / (2.0 * t));
    } else {
        return createComplex(FastMath.abs(imaginary) / (2.0 * t), FastMath.copySign(1d, imaginary) * t);
    }
}","public void test2727() throws Throwable {
    Complex complex0 = Complex.valueOf((-441.88499));
    complex0.NaN.multiply(823);
    complex0.I.readResolve();
    complex0.hashCode();
    Complex complex1 = complex0.asin();
    complex1.ZERO.pow(complex0);
    complex1.sqrt1z();
    complex1.sqrt();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">
 * square root</a> of this complex number.
 * Implements the following algorithm to compute {@code sqrt(a + bi)}:
 * <ol><li>Let {@code t = sqrt((|a| + |a + bi|) / 2)}</li>
 * <li><pre>if {@code  a &#8805; 0} return {@code t + (b/2t)i}
 *  else return {@code |b|/2t + sign(b)t i }</pre></li>
 * </ol>
 * where <ul>
 * <li>{@code |a| = }{@link Math#abs}(a)</li>
 * <li>{@code |a + bi| = }{@link Complex#abs}(a + bi)</li>
 * <li>{@code sign(b) =  }{@link FastMath#copySign(double,double) copySign(1d, b)}
 * </ul>
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
 *   sqrt(INFINITY + i) = INFINITY + 0i
 *   sqrt(-INFINITY + i) = 0 + INFINITY i
 *   sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
 *   sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
 *  </code>
 * </pre>
 *
 * @return the square root of {@code this}.
 * @since 1.2
 */"
"public Complex multiply(Complex factor) throws NullArgumentException {
    MathUtils.checkNotNull(factor);
    if (isNaN || factor.isNaN) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);
}","public void test2828() throws Throwable {
    Complex complex0 = new Complex((-2289.0505632029985), (-36.04));
    Complex complex1 = complex0.subtract((-763.75318048848));
    Complex complex2 = complex0.tanh();
    Complex complex3 = complex2.multiply(complex1);
    Complex complex4 = complex2.asin();
    complex4.ZERO.readResolve();
    complex1.tanh();
    complex3.createComplex((-2289.0505632029985), (-36.04));
    complex4.multiply(complex2);
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}.
 * Implements preliminary checks for {@code NaN} and infinity followed by
 * the definitional formula:
 * <pre>
 *  <code>
 *   (a + bi)(c + di) = (ac - bd) + (ad + bc)i
 *  </code>
 * </pre>
 * Returns {@link #NaN} if either {@code this} or {@code factor} has one or
 * more {@code NaN} parts.
 * <br/>
 * Returns {@link #INF} if neither {@code this} nor {@code factor} has one
 * or more {@code NaN} parts and if either {@code this} or {@code factor}
 * has one or more infinite parts (same result is returned regardless of
 * the sign of the components).
 * <br/>
 * Returns finite values in components of the result per the definitional
 * formula in all remaining cases.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @throws NullArgumentException if {@code factor} is {@code null}.
 */"
"public Complex subtract(Complex subtrahend) throws NullArgumentException {
    MathUtils.checkNotNull(subtrahend);
    if (isNaN || subtrahend.isNaN) {
        return NaN;
    }
    return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());
}","public void test2929() throws Throwable {
    Complex complex0 = Complex.valueOf((-1.0));
    Complex complex1 = complex0.tanh();
    complex1.I.exp();
    complex0.subtract(complex1);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this - subtrahend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) - (c + di) = (a-c) + (b-d)i
 *  </code>
 * </pre>
 * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,
 * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are
 * returned in the parts of the result according to the rules for
 * {@link java.lang.Double} arithmetic.
 *
 * @param  subtrahend value to be subtracted from this {@code Complex}.
 * @return {@code this - subtrahend}.
 * @throws NullArgumentException if {@code subtrahend} is {@code null}.
 */"
"public Complex multiply(double factor) {
    if (isNaN || Double.isNaN(factor)) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor, imaginary * factor);
}","public void test3030() throws Throwable {
    Complex complex0 = Complex.I;
    Complex complex1 = Complex.I;
    complex0.ZERO.subtract(complex1);
    complex0.multiply(0.0);
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}
 * interpreted as a real number.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @see #multiply(Complex)
 */"
"public Complex sqrt() {
    if (isNaN) {
        return NaN;
    }
    if (real == 0.0 && imaginary == 0.0) {
        return createComplex(0.0, 0.0);
    }
    double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
    if (real >= 0.0) {
        return createComplex(t, imaginary / (2.0 * t));
    } else {
        return createComplex(FastMath.abs(imaginary) / (2.0 * t), FastMath.copySign(1d, imaginary) * t);
    }
}","public void test3131() throws Throwable {
    Complex complex0 = new Complex(703.94);
    complex0.sqrt();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">
 * square root</a> of this complex number.
 * Implements the following algorithm to compute {@code sqrt(a + bi)}:
 * <ol><li>Let {@code t = sqrt((|a| + |a + bi|) / 2)}</li>
 * <li><pre>if {@code  a &#8805; 0} return {@code t + (b/2t)i}
 *  else return {@code |b|/2t + sign(b)t i }</pre></li>
 * </ol>
 * where <ul>
 * <li>{@code |a| = }{@link Math#abs}(a)</li>
 * <li>{@code |a + bi| = }{@link Complex#abs}(a + bi)</li>
 * <li>{@code sign(b) =  }{@link FastMath#copySign(double,double) copySign(1d, b)}
 * </ul>
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
 *   sqrt(INFINITY + i) = INFINITY + 0i
 *   sqrt(-INFINITY + i) = 0 + INFINITY i
 *   sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
 *   sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
 *  </code>
 * </pre>
 *
 * @return the square root of {@code this}.
 * @since 1.2
 */"
"public Complex tan() {
    if (isNaN) {
        return NaN;
    }
    double real2 = 2.0 * real;
    double imaginary2 = 2.0 * imaginary;
    double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);
    return createComplex(FastMath.sin(real2) / d, FastMath.sinh(imaginary2) / d);
}","public void test3232() throws Throwable {
    Complex complex0 = Complex.valueOf(809.662269086, (-2164.175568227));
    complex0.tan();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/Tangent.html"" TARGET=""_top"">
 * tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
 * {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite (or critical) values in real or imaginary parts of the input may
 * result in infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i
 *   tan(&plusmn;INFINITY + bi) = NaN + NaN i
 *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i
 *  </code>
 * </pre>
 *
 * @return the tangent of {@code this}.
 * @since 1.2
 */"
"public Complex multiply(Complex factor) throws NullArgumentException {
    MathUtils.checkNotNull(factor);
    if (isNaN || factor.isNaN) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);
}","public void test3333() throws Throwable {
    Complex complex0 = Complex.valueOf(4346.7092332);
    complex0.conjugate();
    Complex.valueOf(4346.7092332, 1601.13460539);
    Complex complex1 = complex0.acos();
    complex1.multiply(complex0);
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}.
 * Implements preliminary checks for {@code NaN} and infinity followed by
 * the definitional formula:
 * <pre>
 *  <code>
 *   (a + bi)(c + di) = (ac - bd) + (ad + bc)i
 *  </code>
 * </pre>
 * Returns {@link #NaN} if either {@code this} or {@code factor} has one or
 * more {@code NaN} parts.
 * <br/>
 * Returns {@link #INF} if neither {@code this} nor {@code factor} has one
 * or more {@code NaN} parts and if either {@code this} or {@code factor}
 * has one or more infinite parts (same result is returned regardless of
 * the sign of the components).
 * <br/>
 * Returns finite values in components of the result per the definitional
 * formula in all remaining cases.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @throws NullArgumentException if {@code factor} is {@code null}.
 */"
"public Complex sinh() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary), FastMath.cosh(real) * FastMath.sin(imaginary));
}","public void test3434() throws Throwable {
    Complex complex0 = new Complex(5.471416081500162E-8);
    Complex complex1 = Complex.valueOf((-669.88619), (-669.88619));
    complex0.ZERO.multiply(complex1);
    complex0.ONE.add((-119.71));
    complex0.divide((-284.5248018489));
    complex0.sinh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"" TARGET=""_top"">
 * hyperbolic sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sinh(1 &plusmn; INFINITY i) = NaN + NaN i
 *   sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
 *   sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic sine of {@code this}.
 * @since 1.2
 */"
"public double abs() {
    if (isNaN) {
        return Double.NaN;
    }
    if (isInfinite()) {
        return Double.POSITIVE_INFINITY;
    }
    if (FastMath.abs(real) < FastMath.abs(imaginary)) {
        if (imaginary == 0.0) {
            return FastMath.abs(real);
        }
        double q = real / imaginary;
        return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);
    } else {
        if (real == 0.0) {
            return FastMath.abs(imaginary);
        }
        double q = imaginary / real;
        return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
    }
}","public void test3535() throws Throwable {
    Complex complex0 = new Complex(963.852);
    Complex complex1 = complex0.INF.multiply(2137);
    Complex.valueOf((-969.4245145108173));
    complex0.ZERO.abs();
    complex0.sinh();
    complex1.abs();
}","/**
 * Return the absolute value of this complex number.
 * Returns {@code NaN} if either real or imaginary part is {@code NaN}
 * and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},
 * but at least one part is infinite.
 *
 * @return the absolute value.
 */"
"public Complex acos() {
    if (isNaN) {
        return NaN;
    }
    return this.add(this.sqrt1z().multiply(I)).log().multiply(I.negate());
}","public void test3636() throws Throwable {
    Complex complex0 = Complex.ONE;
    complex0.nthRoot(1);
    complex0.NaN.getField();
    Complex complex1 = complex0.pow(0.0);
    complex1.NaN.sqrt();
    complex1.INF.abs();
    complex0.acos();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseCosine.html"" TARGET=""_top"">
 * inverse cosine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse cosine of this complex number.
 * @since 1.2
 */"
"public Complex log() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));
}","public void test3737() throws Throwable {
    Complex complex0 = Complex.ONE;
    Complex.valueOf(1.0);
    complex0.ONE.tan();
    Complex complex1 = complex0.cosh();
    complex1.getArgument();
    complex0.log();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/NaturalLogarithm.html"" TARGET=""_top"">
 * natural logarithm</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   log(a + bi) = ln(|a + bi|) + arg(a + bi)i
 *  </code>
 * </pre>
 * where ln on the right hand side is {@link java.lang.Math#log},
 * {@code |a + bi|} is the modulus, {@link Complex#abs},  and
 * {@code arg(a + bi) = }{@link java.lang.Math#atan2}(b, a).
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite (or critical) values in real or imaginary parts of the input may
 * result in infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i
 *   log(INFINITY + i) = INFINITY + 0i
 *   log(-INFINITY + i) = INFINITY + &pi;i
 *   log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i
 *   log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i
 *   log(0 + 0i) = -INFINITY + 0i
 *  </code>
 * </pre>
 *
 * @return the value <code>ln &nbsp; this</code>, the natural logarithm
 * of {@code this}.
 * @since 1.2
 */"
"public Complex subtract(Complex subtrahend) throws NullArgumentException {
    MathUtils.checkNotNull(subtrahend);
    if (isNaN || subtrahend.isNaN) {
        return NaN;
    }
    return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());
}","public void test3838() throws Throwable {
    Complex complex0 = new Complex(0.0, 0.0);
    complex0.multiply((-1510.16));
    Complex complex1 = complex0.atan();
    complex0.subtract(complex1);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this - subtrahend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) - (c + di) = (a-c) + (b-d)i
 *  </code>
 * </pre>
 * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,
 * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are
 * returned in the parts of the result according to the rules for
 * {@link java.lang.Double} arithmetic.
 *
 * @param  subtrahend value to be subtracted from this {@code Complex}.
 * @return {@code this - subtrahend}.
 * @throws NullArgumentException if {@code subtrahend} is {@code null}.
 */"
"public static Complex valueOf(double realPart, double imaginaryPart) {
    if (Double.isNaN(realPart) || Double.isNaN(imaginaryPart)) {
        return NaN;
    }
    return new Complex(realPart, imaginaryPart);
}","public void test3939() throws Throwable {
    Complex complex0 = Complex.I;
    Complex complex1 = complex0.INF.cos();
    complex0.ZERO.multiply(complex1);
    complex0.getField();
    complex1.ONE.getArgument();
    complex0.getReal();
    complex0.isInfinite();
    complex1.readResolve();
    Complex complex2 = complex1.cosh();
    complex2.NaN.readResolve();
    Complex.valueOf(0.0, 0.0);
}","/**
 * Create a complex number given the real and imaginary parts.
 *
 * @param realPart Real part.
 * @param imaginaryPart Imaginary part.
 * @return a Complex instance.
 */"
"public Complex subtract(Complex subtrahend) throws NullArgumentException {
    MathUtils.checkNotNull(subtrahend);
    if (isNaN || subtrahend.isNaN) {
        return NaN;
    }
    return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());
}","public void test4040() throws Throwable {
    Complex complex0 = Complex.valueOf(0.0, 0.0);
    Complex complex1 = complex0.INF.negate();
    Complex complex2 = Complex.I;
    complex0.pow(complex2);
    Complex complex3 = complex2.add(complex0);
    complex3.ONE.abs();
    complex1.abs();
    Complex complex4 = Complex.valueOf(1011.13);
    Complex complex5 = complex4.INF.divide(complex3);
    complex1.multiply(94.55);
    complex5.sin();
    complex1.subtract(complex4);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this - subtrahend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) - (c + di) = (a-c) + (b-d)i
 *  </code>
 * </pre>
 * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,
 * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are
 * returned in the parts of the result according to the rules for
 * {@link java.lang.Double} arithmetic.
 *
 * @param  subtrahend value to be subtracted from this {@code Complex}.
 * @return {@code this - subtrahend}.
 * @throws NullArgumentException if {@code subtrahend} is {@code null}.
 */"
"public Complex tanh() {
    if (isNaN) {
        return NaN;
    }
    double real2 = 2.0 * real;
    double imaginary2 = 2.0 * imaginary;
    double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
    return createComplex(FastMath.sinh(real2) / d, FastMath.sin(imaginary2) / d);
}","public void test4141() throws Throwable {
    Complex complex0 = Complex.ZERO;
    Complex complex1 = complex0.INF.multiply(1338.237264829);
    Complex complex2 = complex0.ONE.sqrt1z();
    Complex complex3 = complex2.I.reciprocal();
    complex0.ONE.sqrt();
    Complex complex4 = Complex.valueOf(1338.237264829);
    complex3.ONE.pow(1717.9892);
    complex0.tanh();
    Complex complex5 = complex2.negate();
    Complex complex6 = complex0.atan();
    complex6.NaN.hashCode();
    Complex complex7 = complex0.sinh();
    complex7.divide(complex2);
    complex5.subtract(complex7);
    complex4.asin();
    complex7.sqrt1z();
    complex1.tanh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicTangent.html"" TARGET=""_top"">
 * hyperbolic tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
 * {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   tanh(a &plusmn; INFINITY i) = NaN + NaN i
 *   tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i
 *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic tangent of {@code this}.
 * @since 1.2
 */"
"public Complex pow(double x) {
    return this.log().multiply(x).exp();
}","public void test4242() throws Throwable {
    Complex complex0 = Complex.INF;
    Complex complex1 = Complex.INF;
    complex0.subtract(complex1);
    Complex complex2 = Complex.valueOf(2.0, 0.0);
    complex2.toString();
    Complex complex3 = complex2.divide(complex1);
    Complex complex4 = complex1.reciprocal();
    complex4.ZERO.hashCode();
    Complex complex5 = complex3.acos();
    Complex complex6 = new Complex(0.0);
    complex6.I.cos();
    complex0.multiply(complex6);
    complex5.getReal();
    complex5.pow(2.0);
}","/**
 * Returns of value of this complex number raised to the power of {@code x}.
 *
 * @param  x exponent to which this {@code Complex} is to be raised.
 * @return <code>this<sup>x</sup></code>.
 * @see #pow(Complex)
 */"
"public static Complex valueOf(double realPart) {
    if (Double.isNaN(realPart)) {
        return NaN;
    }
    return new Complex(realPart);
}","public void test4343() throws Throwable {
    Complex complex0 = Complex.valueOf(Double.NaN, (-1948.70347));
    Complex complex1 = complex0.NaN.sqrt();
    Complex complex2 = complex1.ONE.log();
    complex0.getArgument();
    Complex complex3 = complex0.divide((-1948.70347));
    Complex complex4 = complex3.ONE.conjugate();
    complex4.ZERO.divide(complex2);
    Complex complex5 = complex3.subtract(2.147638465376883E-257);
    Complex complex6 = complex3.ONE.multiply(complex2);
    Complex complex7 = complex6.NaN.multiply(complex1);
    Complex complex8 = complex7.add((-189.65088836));
    complex8.ONE.atan();
    Complex complex9 = Complex.valueOf(0.4580921530723572, 2.147638465376883E-257);
    complex3.asin();
    complex1.getImaginary();
    Complex complex10 = Complex.INF;
    complex10.NaN.sqrt();
    complex6.INF.divide(complex10);
    Complex complex11 = complex3.exp();
    complex11.NaN.cosh();
    complex3.toString();
    complex6.sqrt();
    complex6.abs();
    complex9.hashCode();
    complex5.divide((-4.608112855795952E276));
    complex6.equals(""(NaN, NaN)"");
    Complex.valueOf(3579.297);
}","/**
 * Create a complex number given only the real part.
 *
 * @param realPart Real part.
 * @return a Complex instance.
 */"
"public Complex atan() {
    if (isNaN) {
        return NaN;
    }
    return this.add(I).divide(I.subtract(this)).log().multiply(I.divide(createComplex(2.0, 0.0)));
}","public void test4444() throws Throwable {
    Complex complex0 = Complex.NaN;
    Complex complex1 = complex0.NaN.acos();
    Complex complex2 = complex1.I.reciprocal();
    complex2.I.getField();
    complex0.abs();
    Complex complex3 = complex0.ZERO.add(1.6903781197123503E-8);
    Complex complex4 = complex3.INF.cos();
    complex3.NaN.getField();
    complex0.getField();
    complex3.I.multiply(0);
    complex0.hashCode();
    complex4.atan();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseTangent.html"" TARGET=""_top"">
 * inverse tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   atan(z) = (i/2) log((i + z)/(i - z))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse tangent of this complex number
 * @since 1.2
 */"
"public Complex multiply(double factor) {
    if (isNaN || Double.isNaN(factor)) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor, imaginary * factor);
}","public void test4545() throws Throwable {
    Complex complex0 = Complex.valueOf((-469.23), (-962.625682634));
    Complex complex1 = complex0.asin();
    Complex complex2 = complex0.multiply((-2294));
    Complex complex3 = complex2.pow((-54.03));
    complex3.INF.tanh();
    complex3.INF.divide((-54.03));
    complex3.I.readResolve();
    complex3.INF.add((-54.03));
    complex2.abs();
    Complex complex4 = complex0.add((-469.23));
    complex4.ONE.toString();
    complex2.multiply(0.0);
    complex1.multiply(complex2);
    complex1.multiply((-469.23));
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}
 * interpreted as a real number.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @see #multiply(Complex)
 */"
"public Complex sqrt() {
    if (isNaN) {
        return NaN;
    }
    if (real == 0.0 && imaginary == 0.0) {
        return createComplex(0.0, 0.0);
    }
    double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
    if (real >= 0.0) {
        return createComplex(t, imaginary / (2.0 * t));
    } else {
        return createComplex(FastMath.abs(imaginary) / (2.0 * t), FastMath.copySign(1d, imaginary) * t);
    }
}","public void test4646() throws Throwable {
    Complex complex0 = Complex.valueOf(0.0, 0.0);
    Complex complex1 = Complex.ZERO;
    Complex complex2 = complex0.ONE.add(complex1);
    complex2.subtract(complex0);
    Complex complex3 = complex0.ZERO.reciprocal();
    complex0.nthRoot(1);
    Complex complex4 = complex3.ONE.conjugate();
    complex4.tanh();
    complex0.sqrt1z();
    complex3.divide(complex0);
    complex1.sqrt();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">
 * square root</a> of this complex number.
 * Implements the following algorithm to compute {@code sqrt(a + bi)}:
 * <ol><li>Let {@code t = sqrt((|a| + |a + bi|) / 2)}</li>
 * <li><pre>if {@code  a &#8805; 0} return {@code t + (b/2t)i}
 *  else return {@code |b|/2t + sign(b)t i }</pre></li>
 * </ol>
 * where <ul>
 * <li>{@code |a| = }{@link Math#abs}(a)</li>
 * <li>{@code |a + bi| = }{@link Complex#abs}(a + bi)</li>
 * <li>{@code sign(b) =  }{@link FastMath#copySign(double,double) copySign(1d, b)}
 * </ul>
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
 *   sqrt(INFINITY + i) = INFINITY + 0i
 *   sqrt(-INFINITY + i) = 0 + INFINITY i
 *   sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
 *   sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
 *  </code>
 * </pre>
 *
 * @return the square root of {@code this}.
 * @since 1.2
 */"
"public double getReal() {
    return real;
}","public void test4747() throws Throwable {
    Complex complex0 = Complex.NaN;
    Complex complex1 = complex0.log();
    Complex complex2 = complex1.NaN.multiply(complex0);
    Complex complex3 = complex2.INF.reciprocal();
    complex3.multiply(1.1375834941864014);
    complex1.getArgument();
    complex0.sinh();
    complex2.getReal();
}","/**
 * Access the real part.
 *
 * @return the real part.
 */"
"@Override
public String toString() {
    return ""("" + real + "", "" + imaginary + "")"";
}","public void test4848() throws Throwable {
    Complex complex0 = new Complex(0.0);
    Complex complex1 = Complex.INF;
    complex1.INF.sinh();
    complex1.INF.subtract(complex0);
    Complex complex2 = complex0.multiply(complex1);
    Complex complex3 = complex2.ONE.negate();
    complex3.I.conjugate();
    complex1.getField();
    complex1.toString();
}","/**
 * {@inheritDoc}
 */"
"public Complex sinh() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary), FastMath.cosh(real) * FastMath.sin(imaginary));
}","public void test4949() throws Throwable {
    Complex complex0 = Complex.valueOf((-348.047146));
    Complex complex1 = complex0.exp();
    complex1.ZERO.hashCode();
    Complex complex2 = complex1.subtract(complex0);
    complex2.getImaginary();
    Complex.valueOf(928.4931335996077);
    Complex complex3 = complex2.asin();
    complex3.tan();
    Complex.valueOf(0.0);
    complex1.hashCode();
    Complex complex4 = complex2.negate();
    complex4.sinh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"" TARGET=""_top"">
 * hyperbolic sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sinh(1 &plusmn; INFINITY i) = NaN + NaN i
 *   sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
 *   sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic sine of {@code this}.
 * @since 1.2
 */"
"public Complex asin() {
    if (isNaN) {
        return NaN;
    }
    return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
}","public void test5050() throws Throwable {
    Complex complex0 = new Complex(459.557442, 1.0);
    complex0.NaN.getField();
    complex0.INF.getArgument();
    complex0.toString();
    complex0.asin();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">
 * inverse sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse sine of this complex number.
 * @since 1.2
 */"
"public boolean isNaN() {
    return isNaN;
}","public void test5151() throws Throwable {
    Complex complex0 = new Complex(0.0, 0.0);
    complex0.isNaN();
}","/**
 * Checks whether either or both parts of this complex number is
 * {@code NaN}.
 *
 * @return true if either or both parts of this complex number is
 * {@code NaN}; false otherwise.
 */"
"public static Complex valueOf(double realPart, double imaginaryPart) {
    if (Double.isNaN(realPart) || Double.isNaN(imaginaryPart)) {
        return NaN;
    }
    return new Complex(realPart, imaginaryPart);
}","public void test5252() throws Throwable {
    Complex complex0 = Complex.valueOf(1.3377854824066162, 1.3377854824066162);
    Complex complex1 = complex0.NaN.sqrt();
    complex0.acos();
    Complex complex2 = complex1.NaN.pow(0.0);
    complex0.readResolve();
    complex0.getImaginary();
    complex1.conjugate();
    complex1.subtract(complex2);
    Complex.valueOf(0.0, 0.0);
}","/**
 * Create a complex number given the real and imaginary parts.
 *
 * @param realPart Real part.
 * @param imaginaryPart Imaginary part.
 * @return a Complex instance.
 */"
"public double getReal() {
    return real;
}","public void test5353() throws Throwable {
    Complex complex0 = Complex.valueOf((-419.11099889808), (-419.11099889808));
    Complex complex1 = complex0.sqrt();
    complex1.ZERO.divide(complex0);
    Complex complex2 = complex0.sqrt();
    complex2.ZERO.toString();
    complex2.I.readResolve();
    Complex complex3 = complex0.I.cos();
    Complex complex4 = complex3.ONE.sin();
    Complex complex5 = complex3.ONE.sinh();
    Complex.valueOf((-419.11099889808));
    complex4.I.abs();
    complex3.ZERO.cos();
    complex0.getField();
    Complex complex6 = complex0.tan();
    Complex complex7 = complex6.NaN.subtract(2.0);
    complex6.NaN.hashCode();
    complex3.getReal();
    Complex complex8 = complex3.asin();
    complex8.ZERO.getArgument();
    complex3.INF.getArgument();
    complex0.getImaginary();
    complex3.sinh();
    complex5.log();
    complex7.getField();
    Complex complex9 = complex7.pow((-419.11099889808));
    complex0.reciprocal();
    complex9.hashCode();
    complex9.getField();
    complex1.getReal();
}","/**
 * Access the real part.
 *
 * @return the real part.
 */"
"public Complex cos() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary), -FastMath.sin(real) * FastMath.sinh(imaginary));
}","public void test5454() throws Throwable {
    Complex complex0 = Complex.ONE;
    Complex complex1 = Complex.valueOf(410.74671926924213);
    complex0.ZERO.multiply(617.3);
    Complex complex2 = complex1.ONE.createComplex(410.74671926924213, (-3737.74531));
    complex2.I.divide(1330.447275424);
    Complex complex3 = complex1.divide(410.74671926924213);
    complex3.acos();
    complex0.multiply(complex1);
    complex2.cos();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/Cosine.html"" TARGET=""_top"">
 * cosine</a>
 * of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i
 *   cos(&plusmn;INFINITY + i) = NaN + NaN i
 *   cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the cosine of this complex number.
 * @since 1.2
 */"
"public Complex acos() {
    if (isNaN) {
        return NaN;
    }
    return this.add(this.sqrt1z().multiply(I)).log().multiply(I.negate());
}","public void test5555() throws Throwable {
    Complex complex0 = Complex.ZERO;
    complex0.NaN.nthRoot(1);
    complex0.acos();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseCosine.html"" TARGET=""_top"">
 * inverse cosine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse cosine of this complex number.
 * @since 1.2
 */"
"public Complex cosh() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary), FastMath.sinh(real) * FastMath.sin(imaginary));
}","public void test5656() throws Throwable {
    Complex complex0 = new Complex(0.0, 1.6944255828857422);
    Complex complex1 = new Complex(1.6944255828857422, 1.6944255828857422);
    Complex complex2 = complex0.pow(complex1);
    Complex complex3 = Complex.ONE;
    complex2.subtract(complex3);
    complex0.divide(complex1);
    complex0.NaN.conjugate();
    complex0.negate();
    complex2.cosh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicCosine.html"" TARGET=""_top"">
 * hyperbolic cosine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i}
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   cosh(1 &plusmn; INFINITY i) = NaN + NaN i
 *   cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i
 *   cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic cosine of this complex number.
 * @since 1.2
 */"
"public Complex multiply(double factor) {
    if (isNaN || Double.isNaN(factor)) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor, imaginary * factor);
}","public void test5757() throws Throwable {
    Complex complex0 = Complex.INF;
    Complex complex1 = complex0.tanh();
    complex1.reciprocal();
    complex1.multiply((-2.2239222395888823E-8));
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}
 * interpreted as a real number.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @see #multiply(Complex)
 */"
"public Complex multiply(double factor) {
    if (isNaN || Double.isNaN(factor)) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor, imaginary * factor);
}","public void test5858() throws Throwable {
    Complex complex0 = Complex.ONE;
    Complex complex1 = Complex.INF;
    Complex complex2 = complex1.NaN.multiply(1);
    Complex complex3 = complex0.pow(complex1);
    complex0.abs();
    Complex.valueOf(0.0, 0.0);
    Complex complex4 = complex0.divide(complex3);
    complex4.NaN.cosh();
    Complex complex5 = complex1.divide(complex3);
    complex5.ZERO.pow(complex2);
    complex5.INF.conjugate();
    complex5.multiply((double) 1);
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}
 * interpreted as a real number.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @see #multiply(Complex)
 */"
"public ComplexField getField() {
    return ComplexField.getInstance();
}","public void test5959() throws Throwable {
    Complex complex0 = Complex.valueOf((-2350.488384));
    complex0.negate();
    Complex complex1 = complex0.ONE.cosh();
    complex1.ZERO.divide(0.0);
    Complex complex2 = complex0.NaN.sinh();
    Complex complex3 = complex1.NaN.divide(complex2);
    Complex complex4 = complex3.ZERO.asin();
    complex3.nthRoot(1);
    Complex complex5 = complex0.atan();
    Complex complex6 = complex5.ZERO.sqrt1z();
    complex6.tanh();
    complex5.NaN.readResolve();
    complex0.cosh();
    Complex complex7 = complex5.tan();
    complex1.ONE.pow(complex2);
    Complex complex8 = complex1.divide(complex7);
    complex8.toString();
    complex2.isInfinite();
    complex4.getField();
}","/**
 * {@inheritDoc}
 */"
"public boolean isInfinite() {
    return isInfinite;
}","public void test6060() throws Throwable {
    Complex complex0 = Complex.INF;
    complex0.INF.divide(0.0);
    Complex complex1 = complex0.ZERO.sin();
    complex1.ONE.pow(0.0);
    complex0.isInfinite();
}","/**
 * Checks whether either the real or imaginary part of this complex number
 * takes an infinite value (either {@code Double.POSITIVE_INFINITY} or
 * {@code Double.NEGATIVE_INFINITY}) and neither part
 * is {@code NaN}.
 *
 * @return true if one or both parts of this complex number are infinite
 * and neither part is {@code NaN}.
 */"
"public Complex sin() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary), FastMath.cos(real) * FastMath.sinh(imaginary));
}","public void test6161() throws Throwable {
    Complex complex0 = Complex.I;
    Complex complex1 = complex0.createComplex((-1.8013411720005014E-7), (-2507.0));
    complex0.ONE.asin();
    complex1.add((-1.8013411720005014E-7));
    complex1.I.createComplex((-1.8013411720005014E-7), Double.POSITIVE_INFINITY);
    complex0.cos();
    complex1.sin();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/Sine.html"" TARGET=""_top"">
 * sine</a>
 * of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or {@code NaN} values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i
 *   sin(&plusmn;INFINITY + i) = NaN + NaN i
 *   sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the sine of this complex number.
 * @since 1.2
 */"
"public Complex add(Complex addend) throws NullArgumentException {
    MathUtils.checkNotNull(addend);
    if (isNaN || addend.isNaN) {
        return NaN;
    }
    return createComplex(real + addend.getReal(), imaginary + addend.getImaginary());
}","public void test6262() throws Throwable {
    Complex complex0 = Complex.I;
    Complex complex1 = complex0.INF.negate();
    complex0.ZERO.abs();
    Complex complex2 = complex1.I.divide((-366.422758));
    complex0.sin();
    Complex complex3 = complex2.negate();
    complex3.reciprocal();
    complex3.equals(complex1);
    complex3.add(complex0);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this + addend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) + (c + di) = (a+c) + (b+d)i
 *  </code>
 * </pre>
 * <br/>
 * If either {@code this} or {@code addend} has a {@code NaN} value in
 * either part, {@link #NaN} is returned; otherwise {@code Infinite}
 * and {@code NaN} values are returned in the parts of the result
 * according to the rules for {@link java.lang.Double} arithmetic.
 *
 * @param  addend Value to be added to this {@code Complex}.
 * @return {@code this + addend}.
 * @throws NullArgumentException if {@code addend} is {@code null}.
 */"
"public Complex reciprocal() {
    if (isNaN) {
        return NaN;
    }
    if (real == 0.0 && imaginary == 0.0) {
        return NaN;
    }
    if (isInfinite) {
        return ZERO;
    }
    if (FastMath.abs(real) < FastMath.abs(imaginary)) {
        double q = real / imaginary;
        double scale = 1. / (real * q + imaginary);
        return createComplex(scale * q, -scale);
    } else {
        double q = imaginary / real;
        double scale = 1. / (imaginary * q + real);
        return createComplex(scale, -scale * q);
    }
}","public void test6464() throws Throwable {
    Complex complex0 = Complex.INF;
    complex0.ONE.reciprocal();
    complex0.I.getField();
    complex0.I.subtract(1853.3643);
    Complex complex1 = Complex.NaN;
    complex0.equals(complex1);
    Complex complex2 = Complex.valueOf(0.0, 0.0);
    Complex complex3 = complex2.INF.subtract((-1.0));
    Complex complex4 = complex2.sin();
    Complex complex5 = complex4.ZERO.divide((-1.0));
    complex5.ONE.add(complex3);
    complex3.tanh();
    complex4.reciprocal();
}","/**
 * {@inheritDoc}
 */"
"public Complex divide(double divisor) {
    if (isNaN || Double.isNaN(divisor)) {
        return NaN;
    }
    if (divisor == 0d) {
        return NaN;
    }
    if (Double.isInfinite(divisor)) {
        return !isInfinite() ? ZERO : NaN;
    }
    return createComplex(real / divisor, imaginary / divisor);
}","public void test6565() throws Throwable {
    Complex complex0 = Complex.ONE;
    complex0.I.subtract((-2353.4967));
    complex0.ZERO.hashCode();
    Complex complex1 = complex0.cosh();
    complex1.getField();
    complex0.subtract(complex1);
    complex1.ZERO.log();
    Complex complex2 = complex1.divide(complex0);
    Complex complex3 = Complex.valueOf(0.0, 0.0);
    complex3.acos();
    complex2.abs();
    Complex complex4 = complex2.tanh();
    complex4.divide((-2353.4967));
}","/**
 * Returns a {@code Complex} whose value is {@code (this / divisor)},
 * with {@code divisor} interpreted as a real number.
 *
 * @param  divisor Value by which this {@code Complex} is to be divided.
 * @return {@code this / divisor}.
 * @see #divide(Complex)
 */"
"public Complex sqrt1z() {
    return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
}","public void test6666() throws Throwable {
    Complex complex0 = new Complex((-18.5323301726));
    Complex complex1 = complex0.ZERO.asin();
    Complex complex2 = complex0.add((-18.5323301726));
    Complex complex3 = complex2.ONE.negate();
    Complex complex4 = complex3.ONE.subtract(complex0);
    complex0.isInfinite();
    complex4.NaN.acos();
    Complex complex5 = complex0.sinh();
    Complex complex6 = complex1.acos();
    complex0.ONE.subtract(complex1);
    complex6.I.conjugate();
    Complex complex7 = complex2.multiply(complex4);
    complex5.tan();
    complex0.tan();
    complex7.sqrt1z();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">
 * square root</a> of <code>1 - this<sup>2</sup></code> for this complex
 * number.
 * Computes the result directly as
 * {@code sqrt(ONE.subtract(z.multiply(z)))}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 *
 * @return the square root of <code>1 - this<sup>2</sup></code>.
 * @since 1.2
 */"
"public Complex pow(Complex x) throws NullArgumentException {
    MathUtils.checkNotNull(x);
    return this.log().multiply(x).exp();
}","public void test6767() throws Throwable {
    Complex complex0 = Complex.valueOf((-3422.8));
    Complex complex1 = complex0.negate();
    complex1.pow(complex0);
}","/**
 * Returns of value of this complex number raised to the power of {@code x}.
 * Implements the formula:
 * <pre>
 *  <code>
 *   y<sup>x</sup> = exp(x&middot;log(y))
 *  </code>
 * </pre>
 * where {@code exp} and {@code log} are {@link #exp} and
 * {@link #log}, respectively.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite, or if {@code y}
 * equals {@link Complex#ZERO}.
 *
 * @param  x exponent to which this {@code Complex} is to be raised.
 * @return <code> this<sup>{@code x}</sup></code>.
 * @throws NullArgumentException if x is {@code null}.
 * @since 1.2
 */"
"public Complex multiply(Complex factor) throws NullArgumentException {
    MathUtils.checkNotNull(factor);
    if (isNaN || factor.isNaN) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);
}","public void test6868() throws Throwable {
    Complex complex0 = Complex.valueOf(2.0, 2.0);
    complex0.abs();
    Complex complex1 = Complex.valueOf(0.0, (-2532.4582014));
    complex1.ZERO.nthRoot(1);
    Complex complex2 = complex0.subtract(890.0);
    Complex complex3 = complex2.tan();
    Complex complex4 = complex3.pow(complex2);
    Complex complex5 = complex2.reciprocal();
    complex2.I.atan();
    complex3.cosh();
    Complex complex6 = complex0.I.tanh();
    Complex complex7 = complex5.divide((-2324.9947));
    complex7.INF.exp();
    complex3.ONE.subtract((-2838.56312075));
    complex3.isInfinite();
    Complex complex8 = complex0.exp();
    complex4.pow((-853.2));
    Complex complex9 = complex0.multiply(complex6);
    complex9.ZERO.conjugate();
    Complex complex10 = complex8.pow(complex2);
    Complex complex11 = Complex.valueOf(2.8284271247461903, 154.29284748061);
    complex10.multiply(complex11);
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}.
 * Implements preliminary checks for {@code NaN} and infinity followed by
 * the definitional formula:
 * <pre>
 *  <code>
 *   (a + bi)(c + di) = (ac - bd) + (ad + bc)i
 *  </code>
 * </pre>
 * Returns {@link #NaN} if either {@code this} or {@code factor} has one or
 * more {@code NaN} parts.
 * <br/>
 * Returns {@link #INF} if neither {@code this} nor {@code factor} has one
 * or more {@code NaN} parts and if either {@code this} or {@code factor}
 * has one or more infinite parts (same result is returned regardless of
 * the sign of the components).
 * <br/>
 * Returns finite values in components of the result per the definitional
 * formula in all remaining cases.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @throws NullArgumentException if {@code factor} is {@code null}.
 */"
"public Complex subtract(Complex subtrahend) throws NullArgumentException {
    MathUtils.checkNotNull(subtrahend);
    if (isNaN || subtrahend.isNaN) {
        return NaN;
    }
    return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());
}","public void test6969() throws Throwable {
    Complex complex0 = Complex.ZERO;
    complex0.ONE.getField();
    Complex complex1 = complex0.exp();
    Complex complex2 = complex1.ONE.asin();
    Complex complex3 = complex1.NaN.acos();
    complex1.INF.abs();
    complex0.ZERO.divide(Double.POSITIVE_INFINITY);
    complex1.tan();
    Complex complex4 = complex1.ZERO.pow(complex0);
    Complex complex5 = complex4.INF.pow(complex3);
    complex5.INF.tanh();
    Complex complex6 = complex1.INF.atan();
    complex2.NaN.abs();
    Complex.valueOf(0.0);
    Complex complex7 = complex2.multiply(728);
    Complex complex8 = complex1.pow(complex0);
    complex7.pow((-2978.708));
    complex1.isInfinite();
    complex8.getReal();
    complex6.subtract((Complex) null);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this - subtrahend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) - (c + di) = (a-c) + (b-d)i
 *  </code>
 * </pre>
 * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,
 * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are
 * returned in the parts of the result according to the rules for
 * {@link java.lang.Double} arithmetic.
 *
 * @param  subtrahend value to be subtracted from this {@code Complex}.
 * @return {@code this - subtrahend}.
 * @throws NullArgumentException if {@code subtrahend} is {@code null}.
 */"
"public List<Complex> nthRoot(int n) {
    if (n <= 0) {
        throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);
    }
    final List<Complex> result = new ArrayList<Complex>();
    if (isNaN) {
        result.add(NaN);
        return result;
    }
    if (isInfinite()) {
        result.add(INF);
        return result;
    }
    // nth root of abs -- faster / more accurate to use a solver here?
    final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);
    // Compute nth roots of complex number with k = 0, 1, ... n-1
    final double nthPhi = getArgument() / n;
    final double slice = 2 * FastMath.PI / n;
    double innerPart = nthPhi;
    for (int k = 0; k < n; k++) {
        // inner part
        final double realPart = nthRootOfAbs * FastMath.cos(innerPart);
        final double imaginaryPart = nthRootOfAbs * FastMath.sin(innerPart);
        result.add(createComplex(realPart, imaginaryPart));
        innerPart += slice;
    }
    return result;
}","public void test7070() throws Throwable {
    Complex complex0 = new Complex(1.0);
    Complex complex1 = complex0.NaN.atan();
    Complex complex2 = complex0.subtract(0.0);
    Complex complex3 = complex2.ZERO.divide(complex1);
    Complex complex4 = complex0.log();
    Complex complex5 = complex4.INF.subtract(complex1);
    complex3.NaN.cos();
    complex4.ZERO.abs();
    Complex complex6 = complex0.sqrt1z();
    Complex complex7 = complex4.ONE.asin();
    Complex complex8 = complex7.tan();
    complex7.ZERO.negate();
    Complex complex9 = complex8.createComplex(0.0, (-300.57874955));
    complex9.INF.pow(complex6);
    complex9.NaN.acos();
    complex4.INF.toString();
    complex0.abs();
    complex0.add(complex5);
    complex0.ONE.acos();
    complex5.toString();
    complex5.createComplex(1.0, 5627.840250944935);
    Complex complex10 = Complex.valueOf((-1596.23024));
    complex3.log();
    complex10.subtract(complex8);
    Complex complex11 = complex10.multiply((-61.25461971));
    complex2.createComplex(0.0, (-1506.638287109));
    complex8.multiply(3140);
    complex9.reciprocal();
    complex11.nthRoot(3140);
}","/**
 * Computes the n-th roots of this complex number.
 * The nth roots are defined by the formula:
 * <pre>
 *  <code>
 *   z<sub>k</sub> = abs<sup>1/n</sup> (cos(phi + 2&pi;k/n) + i (sin(phi + 2&pi;k/n))
 *  </code>
 * </pre>
 * for <i>{@code k=0, 1, ..., n-1}</i>, where {@code abs} and {@code phi}
 * are respectively the {@link #abs() modulus} and
 * {@link #getArgument() argument} of this complex number.
 * <br/>
 * If one or both parts of this complex number is NaN, a list with just
 * one element, {@link #NaN} is returned.
 * if neither part is NaN, but at least one part is infinite, the result
 * is a one-element list containing {@link #INF}.
 *
 * @param n Degree of root.
 * @return a List<Complex> of all {@code n}-th roots of {@code this}.
 * @throws NotPositiveException if {@code n <= 0}.
 * @since 2.0
 */"
"public Complex multiply(Complex factor) throws NullArgumentException {
    MathUtils.checkNotNull(factor);
    if (isNaN || factor.isNaN) {
        return NaN;
    }
    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {
        // we don't use isInfinite() to avoid testing for NaN again
        return INF;
    }
    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);
}","public void test7171() throws Throwable {
    Complex complex0 = Complex.valueOf((-1009.7903));
    Complex complex1 = complex0.conjugate();
    Complex complex2 = complex1.atan();
    complex0.conjugate();
    Complex complex3 = complex1.I.reciprocal();
    complex3.hashCode();
    complex1.I.hashCode();
    complex3.hashCode();
    Complex complex4 = complex0.NaN.log();
    Complex complex5 = complex2.I.multiply((-2794));
    complex3.ZERO.nthRoot(1);
    Complex complex6 = complex0.cos();
    complex6.I.add(complex3);
    Complex complex7 = complex2.subtract(complex0);
    complex7.ONE.subtract(complex4);
    Complex complex8 = complex1.multiply(1);
    complex3.nthRoot(1);
    complex0.subtract(complex5);
    complex2.add(complex3);
    complex1.sqrt();
    complex8.hashCode();
    complex4.multiply(complex8);
}","/**
 * Returns a {@code Complex} whose value is {@code this * factor}.
 * Implements preliminary checks for {@code NaN} and infinity followed by
 * the definitional formula:
 * <pre>
 *  <code>
 *   (a + bi)(c + di) = (ac - bd) + (ad + bc)i
 *  </code>
 * </pre>
 * Returns {@link #NaN} if either {@code this} or {@code factor} has one or
 * more {@code NaN} parts.
 * <br/>
 * Returns {@link #INF} if neither {@code this} nor {@code factor} has one
 * or more {@code NaN} parts and if either {@code this} or {@code factor}
 * has one or more infinite parts (same result is returned regardless of
 * the sign of the components).
 * <br/>
 * Returns finite values in components of the result per the definitional
 * formula in all remaining cases.
 *
 * @param  factor value to be multiplied by this {@code Complex}.
 * @return {@code this * factor}.
 * @throws NullArgumentException if {@code factor} is {@code null}.
 */"
"public Complex add(double addend) {
    if (isNaN || Double.isNaN(addend)) {
        return NaN;
    }
    return createComplex(real + addend, imaginary);
}","public void test7272() throws Throwable {
    Complex complex0 = Complex.INF;
    Complex complex1 = complex0.I.subtract((-2003.4322116849));
    Complex complex2 = complex0.log();
    complex1.exp();
    Complex.valueOf((-2003.4322116849), (-2003.4322116849));
    Complex complex3 = complex0.sin();
    complex3.INF.pow(6.283185307179586);
    complex1.multiply(complex0);
    complex3.reciprocal();
    complex2.getField();
    complex0.getArgument();
    complex1.add(0.39893341064453125);
}","/**
 * Returns a {@code Complex} whose value is {@code (this + addend)},
 * with {@code addend} interpreted as a real number.
 *
 * @param addend Value to be added to this {@code Complex}.
 * @return {@code this + addend}.
 * @see #add(Complex)
 */"
"public double getReal() {
    return real;
}","public void test7373() throws Throwable {
    Complex complex0 = Complex.valueOf((-4498.931));
    complex0.getReal();
}","/**
 * Access the real part.
 *
 * @return the real part.
 */"
"public Complex reciprocal() {
    if (isNaN) {
        return NaN;
    }
    if (real == 0.0 && imaginary == 0.0) {
        return NaN;
    }
    if (isInfinite) {
        return ZERO;
    }
    if (FastMath.abs(real) < FastMath.abs(imaginary)) {
        double q = real / imaginary;
        double scale = 1. / (real * q + imaginary);
        return createComplex(scale * q, -scale);
    } else {
        double q = imaginary / real;
        double scale = 1. / (imaginary * q + real);
        return createComplex(scale, -scale * q);
    }
}","public void test7474() throws Throwable {
    Complex complex0 = Complex.valueOf(2225.0);
    complex0.hashCode();
    Complex complex1 = complex0.negate();
    complex1.NaN.tanh();
    complex0.reciprocal();
}","/**
 * {@inheritDoc}
 */"
"public Complex pow(Complex x) throws NullArgumentException {
    MathUtils.checkNotNull(x);
    return this.log().multiply(x).exp();
}","public void test7575() throws Throwable {
    Complex complex0 = Complex.INF;
    Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
    Complex complex2 = complex1.NaN.add(complex0);
    complex0.getImaginary();
    Complex complex3 = complex1.negate();
    complex3.nthRoot(66);
    complex0.pow(complex2);
}","/**
 * Returns of value of this complex number raised to the power of {@code x}.
 * Implements the formula:
 * <pre>
 *  <code>
 *   y<sup>x</sup> = exp(x&middot;log(y))
 *  </code>
 * </pre>
 * where {@code exp} and {@code log} are {@link #exp} and
 * {@link #log}, respectively.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite, or if {@code y}
 * equals {@link Complex#ZERO}.
 *
 * @param  x exponent to which this {@code Complex} is to be raised.
 * @return <code> this<sup>{@code x}</sup></code>.
 * @throws NullArgumentException if x is {@code null}.
 * @since 1.2
 */"
"public Complex tan() {
    if (isNaN) {
        return NaN;
    }
    double real2 = 2.0 * real;
    double imaginary2 = 2.0 * imaginary;
    double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);
    return createComplex(FastMath.sin(real2) / d, FastMath.sinh(imaginary2) / d);
}","public void test7676() throws Throwable {
    Complex complex0 = Complex.valueOf((-879.322541214), 2.0);
    complex0.ONE.pow(2969.33717141241);
    Complex complex1 = complex0.add((Complex) null);
    complex1.tan();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/Tangent.html"" TARGET=""_top"">
 * tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
 * {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite (or critical) values in real or imaginary parts of the input may
 * result in infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i
 *   tan(&plusmn;INFINITY + bi) = NaN + NaN i
 *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i
 *  </code>
 * </pre>
 *
 * @return the tangent of {@code this}.
 * @since 1.2
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof Complex) {
        Complex c = (Complex) other;
        if (c.isNaN) {
            return isNaN;
        } else {
            return (real == c.real) && (imaginary == c.imaginary);
        }
    }
    return false;
}","public void test7777() throws Throwable {
    Complex complex0 = new Complex(0.0, 0.0);
    Complex complex1 = Complex.INF;
    complex0.NaN.add(0.0);
    Complex complex2 = complex0.ONE.pow(complex1);
    Complex complex3 = complex2.tanh();
    complex3.acos();
    Complex complex4 = complex3.sinh();
    complex4.NaN.readResolve();
    Complex complex5 = complex0.sqrt();
    Complex complex6 = complex5.subtract(0.0);
    Complex complex7 = complex0.acos();
    complex1.isInfinite();
    Complex complex8 = complex1.conjugate();
    Complex complex9 = complex8.I.reciprocal();
    complex6.I.divide(1488.2062);
    complex0.getArgument();
    complex7.ZERO.atan();
    complex1.nthRoot(3371);
    complex7.multiply(complex0);
    Complex complex10 = complex1.asin();
    complex10.INF.pow(complex6);
    Complex complex11 = complex6.exp();
    complex11.I.sin();
    complex0.NaN.multiply(0.0);
    complex11.NaN.add(6.283185307179586);
    complex6.abs();
    complex5.pow(complex0);
    Complex complex12 = complex5.tan();
    complex12.NaN.conjugate();
    complex9.atan();
    complex1.equals(complex7);
}","/**
 * Test for the equality of two Complex objects.
 * If both the real and imaginary parts of two complex numbers
 * are exactly the same, and neither is {@code Double.NaN}, the two
 * Complex objects are considered to be equal.
 * All {@code NaN} values are considered to be equal - i.e, if either
 * (or both) real and imaginary parts of the complex number are equal
 * to {@code Double.NaN}, the complex number is equal to
 * {@code NaN}.
 *
 * @param other Object to test for equality to this
 * @return true if two Complex objects are equal, false if object is
 * {@code null}, not an instance of Complex, or not equal to this Complex
 * instance.
 */"
"public Complex atan() {
    if (isNaN) {
        return NaN;
    }
    return this.add(I).divide(I.subtract(this)).log().multiply(I.divide(createComplex(2.0, 0.0)));
}","public void test7878() throws Throwable {
    Complex complex0 = Complex.valueOf(1.0, 463.610560731626);
    Complex complex1 = complex0.INF.conjugate();
    complex0.getArgument();
    Complex complex2 = complex0.cos();
    complex0.sqrt();
    complex1.NaN.pow(complex0);
    Complex complex3 = complex2.NaN.sin();
    complex2.getField();
    Complex complex4 = complex2.asin();
    complex4.ZERO.conjugate();
    complex4.INF.tan();
    complex1.getField();
    complex0.add(complex4);
    Complex complex5 = Complex.I;
    complex0.add(complex5);
    complex3.multiply(complex4);
    Complex complex6 = Complex.valueOf(1746.86);
    complex2.pow(complex6);
    complex3.atan();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseTangent.html"" TARGET=""_top"">
 * inverse tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   atan(z) = (i/2) log((i + z)/(i - z))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse tangent of this complex number
 * @since 1.2
 */"
"public Complex exp() {
    if (isNaN) {
        return NaN;
    }
    double expReal = FastMath.exp(real);
    return createComplex(expReal * FastMath.cos(imaginary), expReal * FastMath.sin(imaginary));
}","public void test8080() throws Throwable {
    Complex complex0 = Complex.ONE;
    Complex complex1 = Complex.I;
    complex0.ONE.divide(complex1);
    Complex complex2 = complex0.divide(398.231268431959);
    complex0.toString();
    complex0.abs();
    Complex complex3 = complex1.subtract(398.231268431959);
    complex3.ZERO.nthRoot(1210);
    complex3.divide(complex1);
    complex2.ONE.abs();
    Complex complex4 = complex1.pow(398.231268431959);
    Complex complex5 = complex1.conjugate();
    Complex complex6 = complex5.NaN.cos();
    complex4.asin();
    complex4.INF.cos();
    complex2.hashCode();
    Complex.valueOf(1.0);
    complex0.equals(complex4);
    complex6.abs();
    complex1.pow(Double.NaN);
    Complex complex7 = complex0.tanh();
    Complex complex8 = complex5.exp();
    Complex complex9 = complex5.tan();
    complex9.ONE.getArgument();
    complex4.pow(complex8);
    complex7.exp();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/ExponentialFunction.html"" TARGET=""_top"">
 * exponential function</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and
 * {@link java.lang.Math#sin}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   exp(1 &plusmn; INFINITY i) = NaN + NaN i
 *   exp(INFINITY + i) = INFINITY + INFINITY i
 *   exp(-INFINITY + i) = 0 + 0i
 *   exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return <code><i>e</i><sup>this</sup></code>.
 * @since 1.2
 */"
"public Complex tanh() {
    if (isNaN) {
        return NaN;
    }
    double real2 = 2.0 * real;
    double imaginary2 = 2.0 * imaginary;
    double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
    return createComplex(FastMath.sinh(real2) / d, FastMath.sin(imaginary2) / d);
}","public void test8181() throws Throwable {
    Complex complex0 = Complex.NaN;
    Complex complex1 = Complex.valueOf(0.5197699069976807);
    Complex complex2 = complex0.subtract(complex1);
    Complex complex3 = complex0.divide(0.0);
    Complex complex4 = complex0.pow(complex3);
    Complex complex5 = Complex.valueOf(3122.88, 3122.88);
    complex5.INF.getArgument();
    Complex complex6 = complex0.cos();
    Complex complex7 = complex6.NaN.log();
    complex4.pow(complex3);
    complex6.nthRoot(948);
    complex3.isNaN();
    complex7.equals(complex0);
    complex7.getArgument();
    complex2.tanh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicTangent.html"" TARGET=""_top"">
 * hyperbolic tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
 * {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   tanh(a &plusmn; INFINITY i) = NaN + NaN i
 *   tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i
 *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic tangent of {@code this}.
 * @since 1.2
 */"
"public ComplexField getField() {
    return ComplexField.getInstance();
}","public void test8282() throws Throwable {
    Complex complex0 = Complex.NaN;
    complex0.ZERO.readResolve();
    complex0.getField();
    Complex complex1 = complex0.createComplex((-640.598), 2772.2);
    Complex complex2 = complex1.atan();
    complex1.ONE.tan();
    complex1.createComplex(1608.5279, (-620.0947));
    Complex complex3 = complex1.tanh();
    Complex complex4 = complex3.NaN.negate();
    complex4.ONE.abs();
    Complex complex5 = complex2.add(1608.5279);
    Complex complex6 = complex5.I.log();
    complex5.log();
    complex6.acos();
    Complex.valueOf((-620.0947), (-620.0947));
    complex1.getField();
}","/**
 * {@inheritDoc}
 */"
"public Complex atan() {
    if (isNaN) {
        return NaN;
    }
    return this.add(I).divide(I.subtract(this)).log().multiply(I.divide(createComplex(2.0, 0.0)));
}","public void test8383() throws Throwable {
    Complex complex0 = Complex.I;
    Complex complex1 = Complex.valueOf((-68.512100919));
    Complex complex2 = Complex.INF;
    Complex complex3 = complex1.ZERO.multiply(complex2);
    complex3.ZERO.sinh();
    Complex complex4 = complex1.NaN.divide((-2556.0));
    complex4.INF.multiply((-68.512100919));
    Complex complex5 = complex0.I.divide(complex1);
    complex5.getArgument();
    complex0.isNaN();
    complex5.sqrt();
    Complex complex6 = complex2.acos();
    complex6.ONE.exp();
    complex6.ONE.pow(0.29036402702331543);
    complex6.getImaginary();
    complex0.atan();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseTangent.html"" TARGET=""_top"">
 * inverse tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   atan(z) = (i/2) log((i + z)/(i - z))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse tangent of this complex number
 * @since 1.2
 */"
"public Complex tan() {
    if (isNaN) {
        return NaN;
    }
    double real2 = 2.0 * real;
    double imaginary2 = 2.0 * imaginary;
    double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);
    return createComplex(FastMath.sin(real2) / d, FastMath.sinh(imaginary2) / d);
}","public void test8484() throws Throwable {
    Complex complex0 = Complex.ZERO;
    Complex complex1 = Complex.I;
    complex0.I.subtract(complex1);
    complex0.getField();
    Complex complex2 = complex0.conjugate();
    Complex complex3 = complex2.ZERO.subtract(2253.86183);
    complex2.INF.abs();
    Object object0 = complex2.readResolve();
    complex2.equals(object0);
    complex3.exp();
    complex3.tan();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/Tangent.html"" TARGET=""_top"">
 * tangent</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
 * {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite (or critical) values in real or imaginary parts of the input may
 * result in infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i
 *   tan(&plusmn;INFINITY + bi) = NaN + NaN i
 *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i
 *  </code>
 * </pre>
 *
 * @return the tangent of {@code this}.
 * @since 1.2
 */"
"public Complex subtract(Complex subtrahend) throws NullArgumentException {
    MathUtils.checkNotNull(subtrahend);
    if (isNaN || subtrahend.isNaN) {
        return NaN;
    }
    return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());
}","public void test8585() throws Throwable {
    Complex complex0 = Complex.ONE;
    Complex complex1 = new Complex(6.910528108396216E258);
    Complex complex2 = complex1.multiply((-1029.24933021));
    complex2.ONE.negate();
    complex0.subtract(complex1);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this - subtrahend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) - (c + di) = (a-c) + (b-d)i
 *  </code>
 * </pre>
 * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,
 * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are
 * returned in the parts of the result according to the rules for
 * {@link java.lang.Double} arithmetic.
 *
 * @param  subtrahend value to be subtracted from this {@code Complex}.
 * @return {@code this - subtrahend}.
 * @throws NullArgumentException if {@code subtrahend} is {@code null}.
 */"
"public Complex sqrt() {
    if (isNaN) {
        return NaN;
    }
    if (real == 0.0 && imaginary == 0.0) {
        return createComplex(0.0, 0.0);
    }
    double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
    if (real >= 0.0) {
        return createComplex(t, imaginary / (2.0 * t));
    } else {
        return createComplex(FastMath.abs(imaginary) / (2.0 * t), FastMath.copySign(1d, imaginary) * t);
    }
}","public void test8686() throws Throwable {
    Complex complex0 = new Complex(0.0, (-1537.2113330561938));
    Complex complex1 = complex0.cosh();
    Complex complex2 = Complex.valueOf((-1537.2113330561938));
    Complex complex3 = Complex.valueOf(0.0);
    Complex complex4 = complex3.I.atan();
    complex0.readResolve();
    Complex complex5 = Complex.valueOf((-1537.2113330561938), 0.0);
    Complex.valueOf((-2294.247799), 0.0);
    complex3.INF.sqrt1z();
    complex5.readResolve();
    Complex complex6 = complex2.tanh();
    complex4.I.nthRoot(495);
    complex6.INF.subtract(complex2);
    Complex complex7 = complex0.add((-1537.2113330561938));
    complex7.I.multiply(0.0);
    complex3.asin();
    Complex complex8 = complex0.NaN.divide((-1537.2113330561938));
    complex3.toString();
    complex1.negate();
    complex4.sinh();
    Complex complex9 = complex8.log();
    complex9.ZERO.add((-1537.2113330561938));
    complex7.isInfinite();
    complex5.getArgument();
    complex8.sqrt1z();
    Complex complex10 = complex4.sinh();
    complex10.getArgument();
    complex2.negate();
    complex3.sqrt();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">
 * square root</a> of this complex number.
 * Implements the following algorithm to compute {@code sqrt(a + bi)}:
 * <ol><li>Let {@code t = sqrt((|a| + |a + bi|) / 2)}</li>
 * <li><pre>if {@code  a &#8805; 0} return {@code t + (b/2t)i}
 *  else return {@code |b|/2t + sign(b)t i }</pre></li>
 * </ol>
 * where <ul>
 * <li>{@code |a| = }{@link Math#abs}(a)</li>
 * <li>{@code |a + bi| = }{@link Complex#abs}(a + bi)</li>
 * <li>{@code sign(b) =  }{@link FastMath#copySign(double,double) copySign(1d, b)}
 * </ul>
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
 *   sqrt(INFINITY + i) = INFINITY + 0i
 *   sqrt(-INFINITY + i) = 0 + INFINITY i
 *   sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
 *   sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
 *  </code>
 * </pre>
 *
 * @return the square root of {@code this}.
 * @since 1.2
 */"
"public Complex subtract(Complex subtrahend) throws NullArgumentException {
    MathUtils.checkNotNull(subtrahend);
    if (isNaN || subtrahend.isNaN) {
        return NaN;
    }
    return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());
}","public void test8787() throws Throwable {
    Complex complex0 = Complex.INF;
    Complex complex1 = complex0.NaN.atan();
    Complex complex2 = complex0.multiply(932);
    complex2.NaN.divide(0.5979346036911011);
    complex2.ZERO.exp();
    Complex complex3 = complex0.createComplex(932, (-569.03392815193));
    complex3.INF.toString();
    Complex complex4 = complex3.conjugate();
    Complex complex5 = complex2.ZERO.cos();
    Complex complex6 = complex5.INF.acos();
    complex3.multiply(1.2334070098307164E267);
    Complex complex7 = complex2.subtract(0.5979346036911011);
    complex7.cos();
    Complex complex8 = complex0.add(complex2);
    Complex complex9 = complex1.tan();
    complex9.sqrt1z();
    complex6.subtract(complex9);
    complex4.reciprocal();
    complex8.getField();
    Complex complex10 = Complex.ZERO;
    complex4.subtract(complex10);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this - subtrahend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) - (c + di) = (a-c) + (b-d)i
 *  </code>
 * </pre>
 * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,
 * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are
 * returned in the parts of the result according to the rules for
 * {@link java.lang.Double} arithmetic.
 *
 * @param  subtrahend value to be subtracted from this {@code Complex}.
 * @return {@code this - subtrahend}.
 * @throws NullArgumentException if {@code subtrahend} is {@code null}.
 */"
"public Complex asin() {
    if (isNaN) {
        return NaN;
    }
    return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
}","public void test8888() throws Throwable {
    double double0 = 0.0;
    Complex complex0 = new Complex(0.0);
    Complex complex1 = complex0.INF.negate();
    Complex complex2 = complex1.conjugate();
    Complex complex3 = complex2.INF.pow(complex0);
    Complex complex4 = complex1.divide(0.0);
    complex4.NaN.getField();
    Complex complex5 = complex3.INF.sqrt();
    Complex complex6 = complex3.I.add(Double.NaN);
    complex6.I.toString();
    complex2.tan();
    complex0.nthRoot((-725));
    complex3.cos();
    // Undeclared exception!
    try {
        complex5.asin();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cannot compute nth root for null or negative n: -725
        //
        verifyException(""org.apache.commons.math.complex.Complex"", e);
    }
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">
 * inverse sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse sine of this complex number.
 * @since 1.2
 */"
"public Complex sinh() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary), FastMath.cosh(real) * FastMath.sin(imaginary));
}","public void test8989() throws Throwable {
    Complex complex0 = new Complex((-54.752), (-1305.981));
    Complex complex1 = Complex.valueOf((-54.752), (-1.0));
    complex1.cosh();
    Complex complex2 = complex0.NaN.tan();
    complex2.INF.hashCode();
    Complex complex3 = complex0.reciprocal();
    Complex complex4 = complex0.pow(complex2);
    complex4.NaN.hashCode();
    Complex complex5 = complex2.I.sqrt();
    Complex complex6 = complex3.pow((-54.752));
    complex3.I.sinh();
    Complex complex7 = complex6.ZERO.conjugate();
    complex7.ZERO.subtract(complex3);
    complex0.divide(complex2);
    Complex complex8 = complex3.sqrt1z();
    complex8.ONE.conjugate();
    complex8.ZERO.pow(complex4);
    Complex complex9 = complex6.acos();
    Complex.valueOf((-1305.981), (-54.752));
    Complex complex10 = complex0.pow(70.532908);
    Complex complex11 = complex0.sinh();
    Complex complex12 = complex9.divide(complex10);
    complex12.INF.getArgument();
    complex5.getField();
    complex9.cos();
    complex12.asin();
    Complex complex13 = complex5.multiply(complex11);
    complex11.getReal();
    complex13.sinh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"" TARGET=""_top"">
 * hyperbolic sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   sinh(1 &plusmn; INFINITY i) = NaN + NaN i
 *   sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
 *   sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic sine of {@code this}.
 * @since 1.2
 */"
"public Complex add(Complex addend) throws NullArgumentException {
    MathUtils.checkNotNull(addend);
    if (isNaN || addend.isNaN) {
        return NaN;
    }
    return createComplex(real + addend.getReal(), imaginary + addend.getImaginary());
}","public void test9090() throws Throwable {
    Complex complex0 = Complex.ZERO;
    complex0.ZERO.divide(844.11757802136);
    complex0.NaN.log();
    complex0.NaN.getArgument();
    Complex complex1 = complex0.atan();
    Complex complex2 = complex1.ONE.cos();
    Complex.valueOf(0.0, Double.NaN);
    Complex.valueOf(6.283185307179586, 0.0);
    Complex complex3 = complex2.createComplex((-1181.0736), 0.0);
    complex3.add(complex0);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this + addend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) + (c + di) = (a+c) + (b+d)i
 *  </code>
 * </pre>
 * <br/>
 * If either {@code this} or {@code addend} has a {@code NaN} value in
 * either part, {@link #NaN} is returned; otherwise {@code Infinite}
 * and {@code NaN} values are returned in the parts of the result
 * according to the rules for {@link java.lang.Double} arithmetic.
 *
 * @param  addend Value to be added to this {@code Complex}.
 * @return {@code this + addend}.
 * @throws NullArgumentException if {@code addend} is {@code null}.
 */"
"public Complex conjugate() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(real, -imaginary);
}","public void test9191() throws Throwable {
    Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
    Complex complex1 = complex0.sin();
    Complex complex2 = complex0.NaN.divide(complex1);
    complex2.INF.multiply(Double.POSITIVE_INFINITY);
    Complex complex3 = complex2.createComplex(192.1345, Double.POSITIVE_INFINITY);
    complex3.I.acos();
    Complex complex4 = Complex.valueOf(0.0);
    Complex complex5 = complex4.ONE.divide((-264.283023385));
    complex0.toString();
    Complex complex6 = complex4.cos();
    complex5.nthRoot(1);
    complex6.multiply(2334);
    Complex complex7 = complex4.log();
    complex7.conjugate();
}","/**
 * Return the conjugate of this complex number.
 * The conjugate of {@code a + bi} is {@code a - bi}.
 * <br/>
 * {@link #NaN} is returned if either the real or imaginary
 * part of this Complex number equals {@code Double.NaN}.
 * <br/>
 * If the imaginary part is infinite, and the real part is not
 * {@code NaN}, the returned value has infinite imaginary part
 * of the opposite sign, e.g. the conjugate of
 * {@code 1 + POSITIVE_INFINITY i} is {@code 1 - NEGATIVE_INFINITY i}.
 *
 * @return the conjugate of this Complex object.
 */"
"protected Complex createComplex(double realPart, double imaginaryPart) {
    return new Complex(realPart, imaginaryPart);
}","public void test9292() throws Throwable {
    Complex complex0 = new Complex(4170.0, (-246.60791724184));
    Complex complex1 = complex0.cosh();
    Complex complex2 = complex1.INF.add(complex0);
    complex2.ZERO.createComplex(4170.0, (-246.60791724184));
    complex2.INF.readResolve();
    complex0.add(198.2750164);
    complex1.exp();
    complex1.createComplex(198.2750164, (-346.10525424));
}","/**
 * Create a complex number given the real and imaginary parts.
 *
 * @param realPart Real part.
 * @param imaginaryPart Imaginary part.
 * @return a new complex number instance.
 * @since 1.2
 * @see #valueOf(double, double)
 */"
"public Complex add(double addend) {
    if (isNaN || Double.isNaN(addend)) {
        return NaN;
    }
    return createComplex(real + addend, imaginary);
}","public void test9393() throws Throwable {
    Complex complex0 = new Complex((-2236.84), (-2236.84));
    Complex complex1 = Complex.valueOf((-2236.84));
    complex0.INF.abs();
    Complex complex2 = Complex.valueOf((-2180.971));
    complex0.abs();
    Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
    complex3.ONE.sinh();
    complex1.acos();
    complex2.add(1851.6813594113);
}","/**
 * Returns a {@code Complex} whose value is {@code (this + addend)},
 * with {@code addend} interpreted as a real number.
 *
 * @param addend Value to be added to this {@code Complex}.
 * @return {@code this + addend}.
 * @see #add(Complex)
 */"
"public Complex log() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));
}","public void test9494() throws Throwable {
    Complex complex0 = Complex.INF;
    Complex complex1 = complex0.ZERO.cosh();
    complex1.NaN.abs();
    Complex complex2 = complex0.reciprocal();
    Complex complex3 = complex0.sqrt();
    Complex complex4 = complex2.log();
    complex2.sin();
    Complex complex5 = complex0.multiply(Double.NaN);
    Object object0 = complex3.readResolve();
    complex2.equals(object0);
    complex0.NaN.tan();
    Complex complex6 = complex1.sqrt1z();
    Complex complex7 = complex6.pow(complex1);
    Complex complex8 = complex1.tan();
    complex5.acos();
    complex1.negate();
    complex8.ONE.sinh();
    complex7.ONE.sin();
    complex2.divide(2099.765853);
    Complex complex9 = complex7.add(0.0);
    complex8.hashCode();
    Complex.valueOf(4520.321449207714, 3509.9814);
    Complex complex10 = Complex.INF;
    complex10.ZERO.divide(complex4);
    complex1.multiply(complex10);
    complex4.multiply(complex8);
    complex9.cosh();
    complex8.log();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/NaturalLogarithm.html"" TARGET=""_top"">
 * natural logarithm</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   log(a + bi) = ln(|a + bi|) + arg(a + bi)i
 *  </code>
 * </pre>
 * where ln on the right hand side is {@link java.lang.Math#log},
 * {@code |a + bi|} is the modulus, {@link Complex#abs},  and
 * {@code arg(a + bi) = }{@link java.lang.Math#atan2}(b, a).
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite (or critical) values in real or imaginary parts of the input may
 * result in infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i
 *   log(INFINITY + i) = INFINITY + 0i
 *   log(-INFINITY + i) = INFINITY + &pi;i
 *   log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i
 *   log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i
 *   log(0 + 0i) = -INFINITY + 0i
 *  </code>
 * </pre>
 *
 * @return the value <code>ln &nbsp; this</code>, the natural logarithm
 * of {@code this}.
 * @since 1.2
 */"
"public Complex subtract(Complex subtrahend) throws NullArgumentException {
    MathUtils.checkNotNull(subtrahend);
    if (isNaN || subtrahend.isNaN) {
        return NaN;
    }
    return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());
}","public void test9595() throws Throwable {
    Complex complex0 = Complex.valueOf((-1143.91));
    Complex complex1 = complex0.tanh();
    Complex complex2 = complex1.sqrt1z();
    Complex complex3 = Complex.ZERO;
    Complex complex4 = complex3.NaN.sin();
    complex1.INF.sin();
    complex0.ZERO.tan();
    complex3.ONE.sqrt();
    complex4.I.toString();
    Complex complex5 = complex0.add(complex3);
    complex1.INF.sqrt1z();
    complex5.NaN.multiply((-475));
    Complex complex6 = complex0.subtract(Double.NaN);
    complex6.subtract(complex2);
    Complex complex7 = complex3.cosh();
    complex7.asin();
    Complex complex8 = new Complex(1255.0);
    complex1.subtract(complex8);
}","/**
 * Returns a {@code Complex} whose value is
 * {@code (this - subtrahend)}.
 * Uses the definitional formula
 * <pre>
 *  <code>
 *   (a + bi) - (c + di) = (a-c) + (b-d)i
 *  </code>
 * </pre>
 * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,
 * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are
 * returned in the parts of the result according to the rules for
 * {@link java.lang.Double} arithmetic.
 *
 * @param  subtrahend value to be subtracted from this {@code Complex}.
 * @return {@code this - subtrahend}.
 * @throws NullArgumentException if {@code subtrahend} is {@code null}.
 */"
"public Complex asin() {
    if (isNaN) {
        return NaN;
    }
    return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
}","public void test9696() throws Throwable {
    Complex complex0 = Complex.NaN;
    Complex complex1 = complex0.ZERO.log();
    Complex complex2 = Complex.valueOf(0.0, 6.034539636024073E-8);
    Complex complex3 = complex2.NaN.tanh();
    complex3.ZERO.getField();
    Complex complex4 = complex0.createComplex((-1019.8015), (-1019.8015));
    complex4.NaN.getArgument();
    complex4.I.asin();
    complex4.INF.conjugate();
    Complex complex5 = complex2.add(complex0);
    Complex complex6 = complex2.subtract(0.0);
    Complex complex7 = complex6.ZERO.sqrt();
    Complex complex8 = complex7.ZERO.divide(complex5);
    complex8.I.getField();
    Complex complex9 = complex1.add(0.0);
    complex9.INF.toString();
    Complex complex10 = complex9.add(0.0);
    complex10.ZERO.multiply((-2323.058664706638));
    complex9.multiply(complex6);
    complex4.subtract(Double.NaN);
    Complex.valueOf(6.034539636024073E-8, Double.NaN);
    complex4.asin();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">
 * inverse sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse sine of this complex number.
 * @since 1.2
 */"
"public Complex asin() {
    if (isNaN) {
        return NaN;
    }
    return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
}","public void test9797() throws Throwable {
    Complex complex0 = new Complex(56.92772100273, 56.92772100273);
    Complex complex1 = complex0.ONE.tanh();
    Complex complex2 = complex1.add(1.0);
    complex0.getImaginary();
    Complex complex3 = complex0.createComplex(56.92772100273, 56.92772100273);
    complex1.NaN.add(240.8034804947);
    complex3.divide(complex1);
    Complex complex4 = complex0.exp();
    complex2.negate();
    complex4.asin();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">
 * inverse sine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))
 *  </code>
 * </pre>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN} or infinite.
 *
 * @return the inverse sine of this complex number.
 * @since 1.2
 */"
"public Complex add(double addend) {
    if (isNaN || Double.isNaN(addend)) {
        return NaN;
    }
    return createComplex(real + addend, imaginary);
}","public void test9898() throws Throwable {
    Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
    Complex complex1 = complex0.INF.exp();
    Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
    Complex complex3 = complex2.INF.cosh();
    complex3.ZERO.pow(Double.POSITIVE_INFINITY);
    complex2.NaN.add(Double.POSITIVE_INFINITY);
    complex2.NaN.sqrt1z();
    Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
    complex4.INF.sqrt1z();
    complex2.log();
    Complex complex5 = complex1.multiply(0.36891552999700106);
    complex0.conjugate();
    complex1.sin();
    complex5.pow(0.36891552999700106);
    complex4.add((-263.2637752));
}","/**
 * Returns a {@code Complex} whose value is {@code (this + addend)},
 * with {@code addend} interpreted as a real number.
 *
 * @param addend Value to be added to this {@code Complex}.
 * @return {@code this + addend}.
 * @see #add(Complex)
 */"
"public Complex cosh() {
    if (isNaN) {
        return NaN;
    }
    return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary), FastMath.sinh(real) * FastMath.sin(imaginary));
}","public void test9999() throws Throwable {
    Complex complex0 = new Complex(828.0, 828.0);
    complex0.readResolve();
    complex0.nthRoot(1431651503);
    int int0 = 4502;
    // Undeclared exception!
    complex0.cosh();
}","/**
 * Compute the
 * <a href=""http://mathworld.wolfram.com/HyperbolicCosine.html"" TARGET=""_top"">
 * hyperbolic cosine</a> of this complex number.
 * Implements the formula:
 * <pre>
 *  <code>
 *   cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i}
 *  </code>
 * </pre>
 * where the (real) functions on the right-hand side are
 * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},
 * {@link FastMath#cosh} and {@link FastMath#sinh}.
 * <br/>
 * Returns {@link Complex#NaN} if either real or imaginary part of the
 * input argument is {@code NaN}.
 * <br/>
 * Infinite values in real or imaginary parts of the input may result in
 * infinite or NaN values returned in parts of the result.
 * <pre>
 *  Examples:
 *  <code>
 *   cosh(1 &plusmn; INFINITY i) = NaN + NaN i
 *   cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i
 *   cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
 *  </code>
 * </pre>
 *
 * @return the hyperbolic cosine of this complex number.
 * @since 1.2
 */"
