{
  "test1212" : {
    "methodSignature" : "public Side side(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "side",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Vector2D vector2D0 = Vector2D.ZERO;\n    Line line0 = new Line(vector2D0, 1.0);\n    SubLine subLine0 = new SubLine(vector2D0, vector2D0);\n    Side side0 = subLine0.side(line0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public SplitSubHyperplane<Euclidean2D> split(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "split",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Vector2D vector2D0 = Vector2D.ZERO;\n    Line line0 = new Line(vector2D0, (-619.764576640369));\n    IntervalsSet intervalsSet0 = new IntervalsSet();\n    SubLine subLine0 = new SubLine(line0, intervalsSet0);\n    SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public Side side(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "side",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Vector2D vector2D0 = Vector2D.ZERO;\n    Line line0 = new Line(vector2D0, (-3026.663285856013));\n    Line line1 = new Line(line0);\n    Segment segment0 = new Segment(vector2D0, vector2D0, line1);\n    SubLine subLine0 = new SubLine(segment0);\n    line0.setOriginOffset((-2489.84438345));\n    Side side0 = subLine0.side(line0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public Side side(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "side",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Vector2D vector2D0 = Vector2D.ZERO;\n    Line line0 = new Line(vector2D0, (-619.764576640369));\n    IntervalsSet intervalsSet0 = new IntervalsSet();\n    SubLine subLine0 = new SubLine(line0, intervalsSet0);\n    Line line1 = new Line(vector2D0, (-619.764576640369));\n    line0.setOriginOffset((-184.191494550068));\n    Side side0 = subLine0.side(line1);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public Side side(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "side",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Vector2D vector2D0 = Vector2D.ZERO;\n    Line line0 = new Line(vector2D0, (-3026.663285856013));\n    Segment segment0 = new Segment(vector2D0, vector2D0, line0);\n    SubLine subLine0 = new SubLine(segment0);\n    Side side0 = subLine0.side(line0);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public boolean equals(Object other)",
    "methodName" : "equals",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Vector2D vector2D0 = Vector2D.NaN;\n    Line line0 = new Line(vector2D0, vector2D0);\n    SubLine subLine0 = line0.wholeHyperplane();\n    Vector2D vector2D1 = subLine0.intersection(subLine0, true);\n    vector2D1.equals((Object) vector2D0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Vector2D vector2D0 = Vector2D.NaN;\n    SubLine subLine0 = new SubLine(vector2D0, vector2D0);\n    Vector2D vector2D1 = subLine0.intersection(subLine0, false);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public Side side(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "side",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;\n    SubLine subLine0 = new SubLine(vector2D0, vector2D0);\n    Hyperplane<Euclidean2D> hyperplane0 = subLine0.getHyperplane();\n    Side side0 = subLine0.side(hyperplane0);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public SplitSubHyperplane<Euclidean2D> split(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "split",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Vector2D vector2D0 = Vector2D.NaN;\n    Line line0 = new Line(vector2D0, vector2D0);\n    SubLine subLine0 = new SubLine(vector2D0, vector2D0);\n    SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);\n}",
    "testName" : "test1616"
  },
  "test1414" : {
    "methodSignature" : "public SplitSubHyperplane<Euclidean2D> split(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "split",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Vector2D vector2D0 = Vector2D.ZERO;\n    Line line0 = new Line(vector2D0, vector2D0);\n    SubLine subLine0 = line0.wholeHyperplane();\n    Line line1 = new Line(line0);\n    line1.setOriginOffset((-0.06441789580971566));\n    SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line1);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public SplitSubHyperplane<Euclidean2D> split(final Hyperplane<Euclidean2D> hyperplane)",
    "methodName" : "split",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Vector2D vector2D0 = Vector2D.ZERO;\n    Line line0 = new Line(vector2D0, 45.27502593443734);\n    SubLine subLine0 = new SubLine(vector2D0, vector2D0);\n    SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);\n}",
    "testName" : "test1515"
  },
  "test000" : {
    "methodSignature" : "public AbstractSubHyperplane<S, T> copySelf()",
    "methodName" : "copySelf",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Vector2D vector2D0 = Vector2D.ZERO;\n    Line line0 = new Line(vector2D0, vector2D0);\n    SubLine subLine0 = line0.wholeHyperplane();\n    AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.copySelf();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Vector2D vector2D0 = Vector2D.NaN;\n    SubLine subLine0 = new SubLine(vector2D0, vector2D0);\n    Vector2D vector2D1 = subLine0.intersection(subLine0, true);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public double getNorm1()",
    "methodName" : "getNorm1",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Vector2D vector2D0 = Vector2D.NaN;\n    Line line0 = new Line(vector2D0, vector2D0);\n    SubLine subLine0 = line0.wholeHyperplane();\n    Vector2D vector2D1 = subLine0.intersection(subLine0, false);\n    vector2D1.getNorm1();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;\n    SubLine subLine0 = new SubLine(vector2D0, vector2D0);\n    Hyperplane<Euclidean2D> hyperplane0 = subLine0.getHyperplane();\n    IntervalsSet intervalsSet0 = new IntervalsSet();\n    SubLine subLine1 = new SubLine(hyperplane0, intervalsSet0);\n    Vector2D vector2D1 = subLine1.intersection(subLine0, true);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints)",
    "methodName" : "intersection",
    "className" : "org.apache.commons.math3.geometry.euclidean.twod.SubLine",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;\n    SubLine subLine0 = new SubLine(vector2D0, vector2D0);\n    Hyperplane<Euclidean2D> hyperplane0 = subLine0.getHyperplane();\n    IntervalsSet intervalsSet0 = new IntervalsSet();\n    SubLine subLine1 = new SubLine(hyperplane0, intervalsSet0);\n    Vector2D vector2D1 = subLine1.intersection(subLine0, false);\n}",
    "testName" : "test088"
  }
}