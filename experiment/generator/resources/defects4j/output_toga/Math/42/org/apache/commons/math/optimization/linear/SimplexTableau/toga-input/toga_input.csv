focal_method,test_prefix,docstring
"protected RealPointValuePair getSolution() {
    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    for (int i = 0; i < coefficients.length; i++) {
        int colIndex = columnLabels.indexOf(""x"" + i);
        if (colIndex < 0) {
            coefficients[i] = 0;
            continue;
        }
        Integer basicRow = getBasicRow(colIndex);
        // if the basic row is found to be the objective function row
        // set the coefficient to 0 -> this case handles unconstrained
        // variables that are still part of the objective function
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test000() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[3] = (-1476.86);
    doubleArray0[1] = (-1476.86);
    doubleArray0[3] = Double.NaN;
    doubleArray0[5] = (-1476.86);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) 0.0;
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) (-1476.86);
    doubleArray1[3] = doubleArray1[1];
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1151.079702577819);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    simplexTableau0.initializeColumnLabels();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.dropPhase1Objective();
    // Undeclared exception!
    try {
        simplexTableau0.getSolution();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (15)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"boolean isOptimal() {
    for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, epsilon) < 0) {
            return false;
        }
    }
    return true;
}","public void test011() throws Throwable {
    int int0 = 2635;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(2635);
    double double0 = 2719.27667650948;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 2719.27667650948);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2635);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    simplexTableau0.initializeColumnLabels();
    linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
    arrayRealVector0.append(2719.27667650948);
    int int1 = 1197;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 67.1, 1197);
    // Undeclared exception!
    simplexTableau1.isOptimal();
}","/**
 * Returns whether the problem is at an optimal state.
 * @return whether the model has been solved
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test022() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[1] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) 0.0;
    doubleArray0[1] = 639.098447199516;
    doubleArray1[3] = (Double) 1151.079702577819;
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, Double.NaN);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (double) doubleArray1[1]);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, 2175.42114);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected RealPointValuePair getSolution() {
    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    for (int i = 0; i < coefficients.length; i++) {
        int colIndex = columnLabels.indexOf(""x"" + i);
        if (colIndex < 0) {
            coefficients[i] = 0;
            continue;
        }
        Integer basicRow = getBasicRow(colIndex);
        // if the basic row is found to be the objective function row
        // set the coefficient to 0 -> this case handles unconstrained
        // variables that are still part of the objective function
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test033() throws Throwable {
    int int0 = 5752;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(5752, 1512.1984698665597);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 5752);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    double double0 = 845.7854011495;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 845.7854011495, 5752);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, 5752);
    linkedList0.add(linearConstraint0);
    // Undeclared exception!
    simplexTableau0.getSolution();
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"protected RealPointValuePair getSolution() {
    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    for (int i = 0; i < coefficients.length; i++) {
        int colIndex = columnLabels.indexOf(""x"" + i);
        if (colIndex < 0) {
            coefficients[i] = 0;
            continue;
        }
        Integer basicRow = getBasicRow(colIndex);
        // if the basic row is found to be the objective function row
        // set the coefficient to 0 -> this case handles unconstrained
        // variables that are still part of the objective function
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test044() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 1.0;
    doubleArray0[1] = (-975.73314);
    doubleArray0[2] = 942.97;
    doubleArray0[3] = (-1.0);
    doubleArray0[4] = 0.0;
    doubleArray0[5] = (-1.0);
    doubleArray0[6] = 58.0547673;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, (-975.73314));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    simplexTableau0.getOriginalNumDecisionVariables();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, (-2780.06341805081));
    simplexTableau1.getSolution();
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon, final int maxUlps) {
    this.f = f;
    this.constraints = normalizeConstraints(constraints);
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.maxUlps = maxUlps;
    this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = createTableau(goalType == GoalType.MAXIMIZE);
    initializeColumnLabels();
}","public void test055() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), (-2.260957518848075E-281));
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1.0));
    openMapRealVector0.set((-1945.205331824));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    linkedList1.add((Object) goalType0);
    linkedList0.removeAll(linkedList1);
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.990680456161499, (-1));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealVector"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 * @param maxUlps amount of error to accept in floating point comparisons
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test066() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[1] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) 0.0;
    doubleArray0[1] = 639.098447199516;
    doubleArray1[3] = (Double) 1151.079702577819;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau1.isOptimal();
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    simplexTableau0.getNumSlackVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, 2175.42114);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test077() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[1] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) 0.0;
    doubleArray0[1] = 639.098447199516;
    doubleArray1[3] = (Double) 1151.079702577819;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (double) doubleArray1[1]);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, 2175.42114);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected void dropPhase1Objective() {
    if (getNumObjectiveFunctions() == 1) {
        return;
    }
    List<Integer> columnsToDrop = new ArrayList<Integer>();
    columnsToDrop.add(0);
    // positive cost non-artificial variables
    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
            columnsToDrop.add(i);
        }
    }
    // non-basic artificial variables
    for (int i = 0; i < getNumArtificialVariables(); i++) {
        int col = i + getArtificialVariableOffset();
        if (getBasicRow(col) == null) {
            columnsToDrop.add(col);
        }
    }
    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
    for (int i = 1; i < getHeight(); i++) {
        int col = 0;
        for (int j = 0; j < getWidth(); j++) {
            if (!columnsToDrop.contains(j)) {
                matrix[i - 1][col++] = tableau.getEntry(i, j);
            }
        }
    }
    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
        columnLabels.remove((int) columnsToDrop.get(i));
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test088() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(2518);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1489.35189910372));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    linkedList0.pollLast();
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, (-1489.35189910372));
    linkedList0.addFirst(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2518);
    simplexTableau0.divideRow(1, 193.3297565);
    simplexTableau0.getHeight();
    // Undeclared exception!
    simplexTableau0.dropPhase1Objective();
}","/**
 * Removes the phase 1 objective function, positive cost non-artificial variables,
 * and the non-basic artificial variables from this tableau.
 */"
"public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints) {
    List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();
    for (LinearConstraint constraint : originalConstraints) {
        normalized.add(normalize(constraint));
    }
    return normalized;
}","public void test099() throws Throwable {
    boolean boolean0 = false;
    double double0 = 1.0;
    int int0 = 11;
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = (double) 11;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (double) 11;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 11);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1424.11);
    Collection<LinearConstraint> collection0 = null;
    // Undeclared exception!
    try {
        simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Get new versions of the constraints which have positive right hand sides.
 * @param originalConstraints original (not normalized) constraints
 * @return new versions of the constraints
 */"
"protected RealMatrix createTableau(final boolean maximize) {
    // create a matrix of the correct size
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix.setEntry(0, 0, -1);
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);
    matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());
    if (!restrictToNonNegative) {
        matrix.setEntry(zIndex, getSlackVariableOffset() - 1, getInvertedCoefficientSum(objectiveCoefficients));
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);
        // x-
        if (!restrictToNonNegative) {
            matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients()));
        }
        // RHS
        matrix.setEntry(row, width - 1, constraint.getValue());
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1);
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);
            matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);
            matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
        }
    }
    return matrix;
}","public void test1010() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(363, 363, 363);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    linearObjectiveFunction0.getValue((RealVector) openMapRealVector0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 363, 1334);
    simplexTableau1.getData();
    simplexTableau0.createTableau(true);
    simplexTableau1.getWidth();
    simplexTableau0.getHeight();
    simplexTableau1.dropPhase1Objective();
    simplexTableau0.getSolution();
    simplexTableau1.normalizeConstraints(linkedList0);
    simplexTableau0.getWidth();
    simplexTableau0.getNumDecisionVariables();
    // Undeclared exception!
    simplexTableau1.createTableau(true);
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"protected Integer getBasicRow(final int col) {
    Integer row = null;
    for (int i = 0; i < getHeight(); i++) {
        final double entry = getEntry(i, col);
        if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {
            row = i;
        } else if (!Precision.equals(entry, 0d, maxUlps)) {
            return null;
        }
    }
    return row;
}","public void test1111() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1476.86);
    doubleArray0[2] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 1151.079702577819;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-214.0633986872392));
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.initializeColumnLabels();
    simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.getBasicRow(9);
}","/**
 * Checks whether the given column is basic.
 * @param col index of the column to check
 * @return the row that the variable is basic in.  null if the column is not basic
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test1212() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    simplexTableau0.getNumDecisionVariables();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    linkedList1.spliterator();
    linkedList0.addAll(0, (Collection<? extends LinearConstraint>) linkedList1);
    linearObjectiveFunction0.getValue(doubleArray0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.getOriginalNumDecisionVariables();
    simplexTableau0.getSolution();
    simplexTableau0.getNumSlackVariables();
    simplexTableau0.divideRow(0, 0.0);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    linkedList1.add(linearConstraint0);
    simplexTableau0.subtractRow(0, 0, 0);
    simplexTableau0.getNumDecisionVariables();
    linkedList1.addAll((Collection<? extends LinearConstraint>) list0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.normalizeConstraints(linkedList1);
    linkedList0.offer(linearConstraint0);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    simplexTableau0.getEntry(0, 0);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected static double getInvertedCoefficientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.toArray()) {
        sum -= coefficient;
    }
    return sum;
}","public void test1313() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 583.983576;
    doubleArray0[2] = 583.983576;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-3277.2674305406554);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 583.983576, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-5138.939914));
    simplexTableau0.getSolution();
    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(2146906483);
    // Undeclared exception!
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector1);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected final int getWidth() {
    return tableau.getColumnDimension();
}","public void test1414() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[3] = (-1476.86);
    doubleArray0[1] = (-1476.86);
    doubleArray0[1] = 0.0;
    doubleArray0[3] = Double.NaN;
    doubleArray0[5] = 632.68;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) 0.0;
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau1.createTableau(false);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.getSolution();
    simplexTableau0.getWidth();
}","/**
 * Get the width of the tableau.
 * @return width of the tableau
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test1515() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[5] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) Double.POSITIVE_INFINITY;
    doubleArray1[3] = (Double) 1151.079702577819;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (double) doubleArray1[1]);
    simplexTableau0.equals(simplexTableau1);
}","/**
 * {@inheritDoc}
 */"
"protected void dropPhase1Objective() {
    if (getNumObjectiveFunctions() == 1) {
        return;
    }
    List<Integer> columnsToDrop = new ArrayList<Integer>();
    columnsToDrop.add(0);
    // positive cost non-artificial variables
    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
            columnsToDrop.add(i);
        }
    }
    // non-basic artificial variables
    for (int i = 0; i < getNumArtificialVariables(); i++) {
        int col = i + getArtificialVariableOffset();
        if (getBasicRow(col) == null) {
            columnsToDrop.add(col);
        }
    }
    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
    for (int i = 1; i < getHeight(); i++) {
        int col = 0;
        for (int j = 0; j < getWidth(); j++) {
            if (!columnsToDrop.contains(j)) {
                matrix[i - 1][col++] = tableau.getEntry(i, j);
            }
        }
    }
    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
        columnLabels.remove((int) columnsToDrop.get(i));
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test1616() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1509.4966);
    doubleArray0[1] = (-1578.8);
    doubleArray0[2] = (-4663.639503);
    doubleArray0[3] = (-1270.0);
    doubleArray0[5] = (-1291.416448259596);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-4222.331916304862));
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.isOptimal();
    simplexTableau0.getRhsOffset();
    Integer integer0 = new Integer(0);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
}","/**
 * Removes the phase 1 objective function, positive cost non-artificial variables,
 * and the non-basic artificial variables from this tableau.
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);
}","public void test1717() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 6101.397;
    doubleArray0[1] = (-2151.3);
    doubleArray0[2] = (-3632.5);
    doubleArray0[3] = (-3.5813506001861646E-8);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2151.3));
    int int0 = (-1);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
    LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, (-3632.5));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, true, 379.92880937120833);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealVector"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test1818() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[5] = 632.68;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) Double.POSITIVE_INFINITY;
    doubleArray1[3] = (Double) 1151.079702577819;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    simplexTableau0.normalizeConstraints(linkedList0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.getEntry(2, 2);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {
    tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow).subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));
}","public void test1919() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray0 = new Double[5];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double(1.0);
    doubleArray0[1] = double1;
    Double double2 = new Double(0);
    doubleArray0[2] = double2;
    Double.isFinite(1.0);
    Double double3 = new Double(0.0);
    doubleArray0[3] = double3;
    Double double4 = new Double(1695.062136499728);
    doubleArray0[4] = double4;
    Double.isFinite((double) doubleArray0[4]);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (double) doubleArray0[0]);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1695.062136499728, 1976);
    // Undeclared exception!
    try {
        simplexTableau0.subtractRow(0, 1976, 2707.873502311258);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,976)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param minuendRow row index
 * @param subtrahendRow row index
 * @param multiple multiplication factor
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test2020() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[5] = 632.68;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) Double.POSITIVE_INFINITY;
    doubleArray1[3] = (Double) 1151.079702577819;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau1.equals(simplexTableau1);
}","/**
 * {@inheritDoc}
 */"
"protected RealPointValuePair getSolution() {
    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    for (int i = 0; i < coefficients.length; i++) {
        int colIndex = columnLabels.indexOf(""x"" + i);
        if (colIndex < 0) {
            coefficients[i] = 0;
            continue;
        }
        Integer basicRow = getBasicRow(colIndex);
        // if the basic row is found to be the objective function row
        // set the coefficient to 0 -> this case handles unconstrained
        // variables that are still part of the objective function
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test2121() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[3] = (-1476.86);
    doubleArray0[1] = (-1476.86);
    doubleArray0[1] = 0.0;
    doubleArray0[3] = Double.NaN;
    doubleArray0[5] = 632.68;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) 0.0;
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau1.createTableau(false);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.getSolution();
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"protected final double[][] getData() {
    return tableau.getData();
}","public void test2222() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 583.983576;
    doubleArray0[2] = 583.983576;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-3277.2674305406554);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 583.983576, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-5138.939914));
    simplexTableau0.getSolution();
    simplexTableau0.getData();
    simplexTableau0.getNumArtificialVariables();
    simplexTableau0.getData();
}","/**
 * Get the tableau data.
 * @return tableau data
 */"
"protected void dropPhase1Objective() {
    if (getNumObjectiveFunctions() == 1) {
        return;
    }
    List<Integer> columnsToDrop = new ArrayList<Integer>();
    columnsToDrop.add(0);
    // positive cost non-artificial variables
    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
            columnsToDrop.add(i);
        }
    }
    // non-basic artificial variables
    for (int i = 0; i < getNumArtificialVariables(); i++) {
        int col = i + getArtificialVariableOffset();
        if (getBasicRow(col) == null) {
            columnsToDrop.add(col);
        }
    }
    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
    for (int i = 1; i < getHeight(); i++) {
        int col = 0;
        for (int j = 0; j < getWidth(); j++) {
            if (!columnsToDrop.contains(j)) {
                matrix[i - 1][col++] = tableau.getEntry(i, j);
            }
        }
    }
    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
        columnLabels.remove((int) columnsToDrop.get(i));
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test2323() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[3] = (-1476.86);
    doubleArray0[1] = (-1476.86);
    doubleArray0[1] = 0.0;
    doubleArray0[3] = Double.NaN;
    doubleArray0[5] = 632.68;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) 0.0;
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau1.dropPhase1Objective();
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.dropPhase1Objective();
}","/**
 * Removes the phase 1 objective function, positive cost non-artificial variables,
 * and the non-basic artificial variables from this tableau.
 */"
"protected final int getNumSlackVariables() {
    return numSlackVariables;
}","public void test2424() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[5] = 632.68;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) Double.POSITIVE_INFINITY;
    doubleArray1[3] = (Double) 1151.079702577819;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.getNumSlackVariables();
}","/**
 * Get the number of slack variables.
 * @return number of slack variables
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test2525() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = (-1476.86);
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[5] = 633.090522524107;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) Double.POSITIVE_INFINITY;
    doubleArray1[3] = (Double) 1151.079702577819;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
}","/**
 * {@inheritDoc}
 */"
"protected void dropPhase1Objective() {
    if (getNumObjectiveFunctions() == 1) {
        return;
    }
    List<Integer> columnsToDrop = new ArrayList<Integer>();
    columnsToDrop.add(0);
    // positive cost non-artificial variables
    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
            columnsToDrop.add(i);
        }
    }
    // non-basic artificial variables
    for (int i = 0; i < getNumArtificialVariables(); i++) {
        int col = i + getArtificialVariableOffset();
        if (getBasicRow(col) == null) {
            columnsToDrop.add(col);
        }
    }
    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
    for (int i = 1; i < getHeight(); i++) {
        int col = 0;
        for (int j = 0; j < getWidth(); j++) {
            if (!columnsToDrop.contains(j)) {
                matrix[i - 1][col++] = tableau.getEntry(i, j);
            }
        }
    }
    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
        columnLabels.remove((int) columnsToDrop.get(i));
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test2626() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1509.4966);
    doubleArray0[1] = (-1578.8);
    doubleArray0[2] = (-4663.639503);
    doubleArray0[3] = (-1270.0);
    doubleArray0[4] = (-1.0);
    doubleArray0[5] = (-1291.416448259596);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-1509.4966), relationship0, openMapRealVector0, 2.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.createTableau(true);
    simplexTableau0.isOptimal();
    simplexTableau0.getRhsOffset();
    simplexTableau0.getBasicRow(0);
    simplexTableau0.hashCode();
    simplexTableau0.equals(openMapRealVector0);
    simplexTableau0.dropPhase1Objective();
}","/**
 * Removes the phase 1 objective function, positive cost non-artificial variables,
 * and the non-basic artificial variables from this tableau.
 */"
"protected void dropPhase1Objective() {
    if (getNumObjectiveFunctions() == 1) {
        return;
    }
    List<Integer> columnsToDrop = new ArrayList<Integer>();
    columnsToDrop.add(0);
    // positive cost non-artificial variables
    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
            columnsToDrop.add(i);
        }
    }
    // non-basic artificial variables
    for (int i = 0; i < getNumArtificialVariables(); i++) {
        int col = i + getArtificialVariableOffset();
        if (getBasicRow(col) == null) {
            columnsToDrop.add(col);
        }
    }
    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
    for (int i = 1; i < getHeight(); i++) {
        int col = 0;
        for (int j = 0; j < getWidth(); j++) {
            if (!columnsToDrop.contains(j)) {
                matrix[i - 1][col++] = tableau.getEntry(i, j);
            }
        }
    }
    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
        columnLabels.remove((int) columnsToDrop.get(i));
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test2727() throws Throwable {
    double[] doubleArray0 = new double[23];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-3277.2674305406554);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.075991153717041, relationship0, doubleArray0, 257.3306807085107);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-5138.939914));
    simplexTableau0.getSolution();
    simplexTableau0.getData();
    simplexTableau0.dropPhase1Objective();
}","/**
 * Removes the phase 1 objective function, positive cost non-artificial variables,
 * and the non-basic artificial variables from this tableau.
 */"
"protected static double getInvertedCoefficientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.toArray()) {
        sum -= coefficient;
    }
    return sum;
}","public void test2828() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 1.0E-9;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-9);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.3260791301727295, relationship0, doubleArray0, 2.5257552661512635E-165);
    linkedList0.add(linearConstraint0);
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>(linkedList0);
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship1 = Relationship.LEQ;
    LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship1, 1.0E-9);
    linkedList1.add(linearConstraint1);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, false, (-2072.9697838825));
    simplexTableau0.normalizeConstraints(linkedList1);
    simplexTableau0.getHeight();
    simplexTableau0.getRhsOffset();
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1341), (-1341), (-1446.9));
    // Undeclared exception!
    try {
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealVector"", e);
    }
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected RealMatrix createTableau(final boolean maximize) {
    // create a matrix of the correct size
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix.setEntry(0, 0, -1);
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);
    matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());
    if (!restrictToNonNegative) {
        matrix.setEntry(zIndex, getSlackVariableOffset() - 1, getInvertedCoefficientSum(objectiveCoefficients));
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);
        // x-
        if (!restrictToNonNegative) {
            matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients()));
        }
        // RHS
        matrix.setEntry(row, width - 1, constraint.getValue());
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1);
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);
            matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);
            matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
        }
    }
    return matrix;
}","public void test2929() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    simplexTableau0.getNumDecisionVariables();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    linkedList1.spliterator();
    linkedList0.addAll(0, (Collection<? extends LinearConstraint>) linkedList1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.getOriginalNumDecisionVariables();
    simplexTableau0.getSolution();
    simplexTableau0.getNumSlackVariables();
    simplexTableau0.divideRow(0, 2631.35832);
    simplexTableau0.createTableau(false);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    linkedList1.add(linearConstraint0);
    simplexTableau0.subtractRow(0, 0, 0);
    simplexTableau0.getNumDecisionVariables();
    linkedList1.addAll((Collection<? extends LinearConstraint>) list0);
    simplexTableau0.normalizeConstraints(linkedList1);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    // Undeclared exception!
    try {
        simplexTableau0.createTableau(true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (2)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"boolean isOptimal() {
    for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, epsilon) < 0) {
            return false;
        }
    }
    return true;
}","public void test3030() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    simplexTableau0.getNumDecisionVariables();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    linkedList1.spliterator();
    linkedList0.addAll(0, (Collection<? extends LinearConstraint>) linkedList1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.getOriginalNumDecisionVariables();
    simplexTableau0.getSolution();
    simplexTableau0.getNumSlackVariables();
    simplexTableau0.divideRow(0, 0.0);
    simplexTableau0.createTableau(false);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    linkedList1.add(linearConstraint0);
    simplexTableau0.subtractRow(0, 0, 0);
    simplexTableau0.getNumDecisionVariables();
    linkedList1.addAll((Collection<? extends LinearConstraint>) list0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.normalizeConstraints(linkedList1);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
}","/**
 * Returns whether the problem is at an optimal state.
 * @return whether the model has been solved
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);
}","public void test3131() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 41.03164;
    doubleArray0[1] = (-128.8756131);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-128.8756131));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    boolean boolean0 = false;
    Double[] doubleArray1 = new Double[8];
    doubleArray1[0] = (Double) (-128.8756131);
    doubleArray1[1] = (Double) (-128.8756131);
    doubleArray1[2] = (Double) 41.03164;
    doubleArray1[3] = (Double) (-128.8756131);
    doubleArray1[4] = (Double) 41.03164;
    doubleArray1[5] = (Double) 41.03164;
    doubleArray1[6] = (Double) (-128.8756131);
    doubleArray1[7] = (Double) (-128.8756131);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (double) doubleArray1[4], relationship0, arrayRealVector1, (-1.0));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-128.8756131));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 */"
"boolean isOptimal() {
    for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, epsilon) < 0) {
            return false;
        }
    }
    return true;
}","public void test3232() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    simplexTableau0.getNumDecisionVariables();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    linkedList1.spliterator();
    linkedList0.addAll(0, (Collection<? extends LinearConstraint>) linkedList1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.getOriginalNumDecisionVariables();
    simplexTableau0.getSolution();
    simplexTableau0.getNumSlackVariables();
    simplexTableau0.divideRow(0, 2631.35832);
    simplexTableau0.createTableau(false);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    linkedList1.add(linearConstraint0);
    simplexTableau0.subtractRow(0, 0, 0);
    simplexTableau0.getNumDecisionVariables();
    linkedList1.addAll((Collection<? extends LinearConstraint>) list0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.normalizeConstraints(linkedList1);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
}","/**
 * Returns whether the problem is at an optimal state.
 * @return whether the model has been solved
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test3333() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = Double.NaN;
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[5] = 632.68;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) Double.POSITIVE_INFINITY;
    doubleArray1[3] = (Double) 1151.079702577819;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
}","/**
 * {@inheritDoc}
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);
}","public void test3434() throws Throwable {
    int int0 = 4059;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4059, 4059);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 4059);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    openMapRealVector0.getNorm();
    boolean boolean0 = true;
    double double0 = (-1.0);
    int int1 = 0;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0));
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 */"
"@Override
public OpenMapRealVector getSubVector(int index, int n) {
    checkIndex(index);
    checkIndex(index + n - 1);
    OpenMapRealVector res = new OpenMapRealVector(n);
    int end = index + n;
    Iterator iter = entries.iterator();
    while (iter.hasNext()) {
        iter.advance();
        int key = iter.key();
        if (key >= index && key < end) {
            res.setEntry(key - index, iter.value());
        }
    }
    return res;
}","public void test3535() throws Throwable {
    int int0 = 0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Comparator<LinearConstraint> comparator0 = (Comparator<LinearConstraint>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    linkedList0.sort(comparator0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1117.55383), 0);
    simplexTableau0.setEntry(0, 0, 1.0E-12);
    openMapRealVector0.mapAdd(0.0);
    openMapRealVector0.getNorm();
    simplexTableau0.createTableau(true);
    simplexTableau0.getNumArtificialVariables();
    // Undeclared exception!
    try {
        openMapRealVector0.getSubVector(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // index (0)
        //
        verifyException(""org.apache.commons.math.linear.RealVector"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon, final int maxUlps) {
    this.f = f;
    this.constraints = normalizeConstraints(constraints);
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.maxUlps = maxUlps;
    this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = createTableau(goalType == GoalType.MAXIMIZE);
    initializeColumnLabels();
}","public void test3636() throws Throwable {
    int int0 = (-4030);
    double double0 = 2.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-4030), 2.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    double double1 = 353.1209249552243;
    int int1 = (-1770);
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 353.1209249552243, (-1770));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -4,027 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 * @param maxUlps amount of error to accept in floating point comparisons
 */"
"protected final int getWidth() {
    return tableau.getColumnDimension();
}","public void test3737() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = 913.303534561356;
    doubleArray0[1] = 416.985275;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-1.0);
    doubleArray0[5] = 0.0;
    doubleArray0[6] = (-2612.614736);
    doubleArray0[7] = (-1438.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1438.0));
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 476.00848, 0);
    simplexTableau1.getNumArtificialVariables();
    simplexTableau1.getNumObjectiveFunctions();
    simplexTableau0.getWidth();
}","/**
 * Get the width of the tableau.
 * @return width of the tableau
 */"
"protected final int getNumDecisionVariables() {
    return numDecisionVariables;
}","public void test3838() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 1137.7657;
    doubleArray0[1] = 1.0E-9;
    doubleArray0[2] = (-1.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-261.9925719), 2352);
    simplexTableau0.getNumDecisionVariables();
}","/**
 * Get the number of decision variables.
 * <p>
 * If variables are not restricted to positive values, this will include 1
 * extra decision variable to represent the absolute value of the most
 * negative variable.
 * </p>
 * @return number of decision variables
 * @see #getOriginalNumDecisionVariables()
 */"
"protected static double getInvertedCoefficientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.toArray()) {
        sum -= coefficient;
    }
    return sum;
}","public void test3939() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (-3263.4302419043483);
    doubleArray0[1] = 2378.711533;
    doubleArray0[2] = 3437.94071;
    doubleArray0[3] = 1559.49072;
    doubleArray0[4] = 0.0;
    doubleArray0[5] = 1685.55;
    doubleArray0[6] = 1.0;
    doubleArray0[7] = 2176.25;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected final int getWidth() {
    return tableau.getColumnDimension();
}","public void test4040() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (-2252.1513765);
    doubleArray0[1] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1428.47797487);
    simplexTableau0.getWidth();
}","/**
 * Get the width of the tableau.
 * @return width of the tableau
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon, final int maxUlps) {
    this.f = f;
    this.constraints = normalizeConstraints(constraints);
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.maxUlps = maxUlps;
    this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = createTableau(goalType == GoalType.MAXIMIZE);
    initializeColumnLabels();
}","public void test4141() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = (-4091.30585795025);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-4091.30585795025));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-4091.30585795025), relationship0, doubleArray0, 1.0E-12);
    linkedList0.add(linearConstraint0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(31);
    Relationship relationship1 = Relationship.LEQ;
    LinearConstraint linearConstraint1 = new LinearConstraint(arrayRealVector0, 0.0, relationship1, arrayRealVector0, 1285.039736);
    linkedList0.add(linearConstraint1);
    Relationship relationship2 = Relationship.EQ;
    LinearConstraint linearConstraint2 = new LinearConstraint(arrayRealVector0, 2048.68712176, relationship2, arrayRealVector0, (-1446.6029898018262));
    linkedList0.add(linearConstraint2);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 3594);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 * @param maxUlps amount of error to accept in floating point comparisons
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);
}","public void test4242() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1933), (-1933), 0.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2064.3949636);
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (double) (-1933);
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = (double) (-1933);
    doubleArray0[4] = 1.0E-12;
    LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    int int0 = 0;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, 0.0, 0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    SimplexTableau simplexTableau1 = null;
    try {
        simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 2064.3949636);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -1,930 is smaller than, or equal to, the minimum (0)
        //
        verifyException(""org.apache.commons.math.linear.AbstractRealMatrix"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 */"
"public ArrayRealVector(double[] d, int pos, int size) {
    if (d == null) {
        throw new NullArgumentException();
    }
    if (d.length < pos + size) {
        throw new NumberIsTooLargeException(pos + size, d.length, true);
    }
    data = new double[size];
    System.arraycopy(d, pos, data, 0, size);
}","public void test4343() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (-2638.99);
    doubleArray0[1] = (-2139.206689553469);
    doubleArray0[2] = 1464.19;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-364.37117018);
    doubleArray0[5] = (-1172.189888672);
    doubleArray0[6] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-364.37117018));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 726.94629620667, (-3035));
    simplexTableau0.isOptimal();
    simplexTableau0.getHeight();
    ArrayRealVector arrayRealVector0 = null;
    try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 1, (-3035));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector from part of a array.
 *
 * @param d Array.
 * @param pos Position of first entry.
 * @param size Number of entries to copy.
 * @throws NullArgumentException if {@code d} is {@code null}.
 * @throws NumberIsTooLargeException if the size of {@code d} is less
 * than {@code pos + size}.
 */"
"protected RealPointValuePair getSolution() {
    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    for (int i = 0; i < coefficients.length; i++) {
        int colIndex = columnLabels.indexOf(""x"" + i);
        if (colIndex < 0) {
            coefficients[i] = 0;
            continue;
        }
        Integer basicRow = getBasicRow(colIndex);
        // if the basic row is found to be the objective function row
        // set the coefficient to 0 -> this case handles unconstrained
        // variables that are still part of the objective function
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test4444() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = 2563.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 1.0E-9;
    doubleArray0[4] = 2.0;
    doubleArray0[5] = 0.0;
    doubleArray0[6] = 6.283185307179586;
    doubleArray0[7] = (-1541.7074207017);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1541.7074207017));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 1);
    simplexTableau0.getSolution();
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test4545() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 2855.6223866043;
    doubleArray0[1] = 1251.638551;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1251.638551);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 1109.421305, 1119);
    simplexTableau1.getBasicRow(0);
    // Undeclared exception!
    try {
        simplexTableau0.getEntry(0, 1119);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (1,119)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test4646() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 1299.0;
    doubleArray0[1] = 1736.1559394737176;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 1736.1559394737176);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
    simplexTableau0.getOriginalNumDecisionVariables();
    simplexTableau0.getHeight();
    simplexTableau0.equals(linkedList0);
}","/**
 * {@inheritDoc}
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);
}","public void test4747() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-1318.4864768652458);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 242.4038064295051);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, true, 1715.691804926);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test4848() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-6117.869348855));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 10);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    List<LinearConstraint> list1 = simplexTableau0.normalizeConstraints(list0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list1, goalType0, false, 0.0);
    // Undeclared exception!
    try {
        simplexTableau1.divideRow(10, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (10)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected void initializeColumnLabels() {
    if (getNumObjectiveFunctions() == 2) {
        columnLabels.add(""W"");
    }
    columnLabels.add(""Z"");
    for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {
        columnLabels.add(""x"" + i);
    }
    if (!restrictToNonNegative) {
        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
    }
    for (int i = 0; i < getNumSlackVariables(); i++) {
        columnLabels.add(""s"" + i);
    }
    for (int i = 0; i < getNumArtificialVariables(); i++) {
        columnLabels.add(""a"" + i);
    }
    columnLabels.add(""RHS"");
}","public void test4949() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-1.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-584.1142103697689));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, (-1));
    simplexTableau0.initializeColumnLabels();
}","/**
 * Initialize the labels for the columns.
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon, final int maxUlps) {
    this.f = f;
    this.constraints = normalizeConstraints(constraints);
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.maxUlps = maxUlps;
    this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = createTableau(goalType == GoalType.MAXIMIZE);
    initializeColumnLabels();
}","public void test5050() throws Throwable {
    int int0 = 4059;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4059, 4059);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 4059);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    boolean boolean0 = true;
    double double0 = (-1.0);
    int int1 = 0;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), 0);
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 * @param maxUlps amount of error to accept in floating point comparisons
 */"
"protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {
    tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow).subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));
}","public void test5151() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 119.363;
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = Double.NEGATIVE_INFINITY;
    doubleArray0[4] = 249.23235454789;
    doubleArray0[5] = 178.1313857385658;
    doubleArray0[6] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 249.23235454789);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 178.1313857385658);
    // Undeclared exception!
    try {
        simplexTableau0.subtractRow(1110, 0, 1.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,110)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param minuendRow row index
 * @param subtrahendRow row index
 * @param multiple multiplication factor
 */"
"boolean isOptimal() {
    for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, epsilon) < 0) {
            return false;
        }
    }
    return true;
}","public void test5252() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    simplexTableau0.getNumDecisionVariables();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    linkedList1.spliterator();
    linkedList0.addAll(0, (Collection<? extends LinearConstraint>) linkedList1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.getOriginalNumDecisionVariables();
    simplexTableau0.getSolution();
    simplexTableau0.getNumSlackVariables();
    simplexTableau0.divideRow(0, 2631.35832);
    simplexTableau0.createTableau(false);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    linkedList1.add(linearConstraint0);
    simplexTableau0.subtractRow(0, 0, 0);
    simplexTableau0.getNumDecisionVariables();
    linkedList1.addAll((Collection<? extends LinearConstraint>) list0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.normalizeConstraints(linkedList1);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
}","/**
 * Returns whether the problem is at an optimal state.
 * @return whether the model has been solved
 */"
"protected final int getNumArtificialVariables() {
    return numArtificialVariables;
}","public void test5353() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 579.96420888413;
    doubleArray0[1] = 1033.973057;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = (-1241.9298288244);
    doubleArray0[5] = Double.NaN;
    doubleArray0[6] = 0.5;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1033.973057);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.getNumArtificialVariables();
}","/**
 * Get the number of artificial variables.
 * @return number of artificial variables
 */"
"protected final void setEntry(final int row, final int column, final double value) {
    tableau.setEntry(row, column, value);
}","public void test5454() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (-3224.3891);
    doubleArray0[1] = 0.5;
    doubleArray0[2] = 860.1068512751797;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 860.1068512751797);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.5);
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(4, 4, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (4)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Set an entry of the tableau.
 * @param row row index
 * @param column column index
 * @param value for the entry
 */"
"protected final void setEntry(final int row, final int column, final double value) {
    tableau.setEntry(row, column, value);
}","public void test5555() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-3524.5);
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = Double.NaN;
    doubleArray0[5] = 840.187671115898;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 332.0, 0);
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(0, 250, 332.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (250)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Set an entry of the tableau.
 * @param row row index
 * @param column column index
 * @param value for the entry
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test5656() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[0] = (-1.0);
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1929.108575191126;
    doubleArray0[3] = (-2204.70153582);
    doubleArray0[4] = 0.0;
    doubleArray0[5] = (-2550.090378917);
    doubleArray0[6] = 1.0;
    doubleArray0[7] = (-563.5264595619399);
    doubleArray0[8] = (-1574.643);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1929.108575191126);
    linearObjectiveFunction0.getValue(doubleArray0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-2204.70153582), relationship0, openMapRealVector0, 1.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2550.090378917));
    simplexTableau0.getOriginalNumDecisionVariables();
    simplexTableau0.getEntry(0, 0);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected RealMatrix createTableau(final boolean maximize) {
    // create a matrix of the correct size
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix.setEntry(0, 0, -1);
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);
    matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());
    if (!restrictToNonNegative) {
        matrix.setEntry(zIndex, getSlackVariableOffset() - 1, getInvertedCoefficientSum(objectiveCoefficients));
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);
        // x-
        if (!restrictToNonNegative) {
            matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients()));
        }
        // RHS
        matrix.setEntry(row, width - 1, constraint.getValue());
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1);
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);
            matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);
            matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
        }
    }
    return matrix;
}","public void test5757() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 37.32);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12, 728);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 728);
    simplexTableau1.getData();
    simplexTableau0.createTableau(true);
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"protected void dropPhase1Objective() {
    if (getNumObjectiveFunctions() == 1) {
        return;
    }
    List<Integer> columnsToDrop = new ArrayList<Integer>();
    columnsToDrop.add(0);
    // positive cost non-artificial variables
    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
            columnsToDrop.add(i);
        }
    }
    // non-basic artificial variables
    for (int i = 0; i < getNumArtificialVariables(); i++) {
        int col = i + getArtificialVariableOffset();
        if (getBasicRow(col) == null) {
            columnsToDrop.add(col);
        }
    }
    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
    for (int i = 1; i < getHeight(); i++) {
        int col = 0;
        for (int j = 0; j < getWidth(); j++) {
            if (!columnsToDrop.contains(j)) {
                matrix[i - 1][col++] = tableau.getEntry(i, j);
            }
        }
    }
    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
        columnLabels.remove((int) columnsToDrop.get(i));
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test5858() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(184, 0);
    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
    openMapRealVector1.mapAddToSelf(0.0);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-4501.082));
    simplexTableau0.dropPhase1Objective();
}","/**
 * Removes the phase 1 objective function, positive cost non-artificial variables,
 * and the non-basic artificial variables from this tableau.
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test5959() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 4277.09325596068;
    doubleArray0[1] = (-2742.6564151);
    doubleArray0[2] = (-1118.61378102298);
    doubleArray0[3] = 471.587095;
    doubleArray0[4] = 0.0;
    doubleArray0[5] = Double.POSITIVE_INFINITY;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3.141592653589793);
    // Undeclared exception!
    try {
        simplexTableau0.getEntry(0, (-406));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (-406)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected static double getInvertedCoefficientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.toArray()) {
        sum -= coefficient;
    }
    return sum;
}","public void test6060() throws Throwable {
    // Undeclared exception!
    try {
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected Integer getBasicRow(final int col) {
    Integer row = null;
    for (int i = 0; i < getHeight(); i++) {
        final double entry = getEntry(i, col);
        if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {
            row = i;
        } else if (!Precision.equals(entry, 0d, maxUlps)) {
            return null;
        }
    }
    return row;
}","public void test6161() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 0.0;
    double double0 = 0.0;
    doubleArray0[1] = 0.0;
    doubleArray0[2] = 1934.74176663;
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 2112.1677119392566;
    doubleArray0[5] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0, (-1500));
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
    linkedList0.add(linearConstraint0);
    simplexTableau0.normalizeConstraints(linkedList0);
    int int0 = 3859;
    // Undeclared exception!
    try {
        simplexTableau0.getBasicRow(3859);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (3,859)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Checks whether the given column is basic.
 * @param col index of the column to check
 * @return the row that the variable is basic in.  null if the column is not basic
 */"
"public ArrayRealVector(double[] v1, ArrayRealVector v2) {
    final int l1 = v1.length;
    final int l2 = v2.getDimension();
    data = new double[l1 + l2];
    System.arraycopy(v1, 0, data, 0, l1);
    System.arraycopy(v2.data, 0, data, l1, l2);
}","public void test6262() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 2644.888130468538;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 2807.984;
    doubleArray0[4] = 1123.543217;
    doubleArray0[5] = 2500.45592312;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2644.888130468538);
    linearObjectiveFunction0.getValue(doubleArray0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1123.543217);
    linkedList0.parallelStream();
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-46.1295), 0);
    simplexTableau0.getBasicRow(0);
    simplexTableau0.getOriginalNumDecisionVariables();
    linkedList0.add(linearConstraint0);
    simplexTableau0.getHeight();
    simplexTableau0.getArtificialVariableOffset();
    simplexTableau0.hashCode();
    double[] doubleArray1 = new double[9];
    doubleArray1[0] = (double) 2;
    doubleArray1[1] = (-46.1295);
    doubleArray1[2] = 2644.888130468538;
    doubleArray1[3] = 1846.96;
    doubleArray1[4] = 1123.543217;
    doubleArray1[5] = (double) 2;
    doubleArray1[6] = (double) 8;
    doubleArray1[7] = 2807.984;
    doubleArray1[8] = 2807.984;
    ArrayRealVector arrayRealVector0 = null;
    try {
        arrayRealVector0 = new ArrayRealVector(doubleArray1, (ArrayRealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.ArrayRealVector"", e);
    }
}","/**
 * Construct a vector by appending one vector to another vector.
 * @param v1 First vector (will be put in front of the new vector).
 * @param v2 Second vector (will be put at back of the new vector).
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon, final int maxUlps) {
    this.f = f;
    this.constraints = normalizeConstraints(constraints);
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.maxUlps = maxUlps;
    this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = createTableau(goalType == GoalType.MAXIMIZE);
    initializeColumnLabels();
}","public void test6363() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2041.233835653));
    GoalType goalType0 = GoalType.MINIMIZE;
    int int0 = 0;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, false, Double.POSITIVE_INFINITY, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 * @param maxUlps amount of error to accept in floating point comparisons
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);
}","public void test6464() throws Throwable {
    Double[] doubleArray0 = new Double[5];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    Double double1 = new Double(0.0);
    doubleArray0[1] = double1;
    Double double2 = Double.valueOf((double) doubleArray0[0]);
    doubleArray0[2] = double2;
    Double double3 = new Double(0.0);
    doubleArray0[3] = double3;
    Double double4 = new Double((-1721.36667));
    doubleArray0[4] = double4;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-3471.442816367518));
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 3426.53120054);
    Collection<LinearConstraint> collection0 = null;
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, false, (-685.11517));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 */"
"@Override
public int hashCode() {
    return Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables ^ numSlackVariables ^ numArtificialVariables ^ Double.valueOf(epsilon).hashCode() ^ maxUlps ^ f.hashCode() ^ constraints.hashCode() ^ tableau.hashCode();
}","public void test6565() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[0] = 0.0;
    doubleArray0[1] = 1.0E-12;
    doubleArray0[2] = 1401.553580024;
    doubleArray0[3] = (-2991.6359261);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, (-1021));
    simplexTableau0.hashCode();
}","/**
 * {@inheritDoc}
 */"
"protected RealPointValuePair getSolution() {
    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    for (int i = 0; i < coefficients.length; i++) {
        int colIndex = columnLabels.indexOf(""x"" + i);
        if (colIndex < 0) {
            coefficients[i] = 0;
            continue;
        }
        Integer basicRow = getBasicRow(colIndex);
        // if the basic row is found to be the objective function row
        // set the coefficient to 0 -> this case handles unconstrained
        // variables that are still part of the objective function
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test6666() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 1.0;
    doubleArray0[1] = (-975.73314);
    doubleArray0[2] = 942.97;
    doubleArray0[3] = (-1.0);
    doubleArray0[4] = 0.0;
    doubleArray0[5] = (-1.0);
    doubleArray0[6] = 58.0547673;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, (-2780.06341805081));
    simplexTableau1.getSolution();
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test6767() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(46);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 1735.570171827);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 46);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 1735.570171827, 46);
    simplexTableau1.getSolution();
    simplexTableau1.divideRow(0, 46);
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected Integer getBasicRow(final int col) {
    Integer row = null;
    for (int i = 0; i < getHeight(); i++) {
        final double entry = getEntry(i, col);
        if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {
            row = i;
        } else if (!Precision.equals(entry, 0d, maxUlps)) {
            return null;
        }
    }
    return row;
}","public void test6868() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-2148.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2148.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2148.0));
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 0.0, 2711);
    // Undeclared exception!
    try {
        simplexTableau1.getBasicRow(10);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // column index (10)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Checks whether the given column is basic.
 * @param col index of the column to check
 * @return the row that the variable is basic in.  null if the column is not basic
 */"
"protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {
    tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow).subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));
}","public void test6969() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (-1476.464687214);
    doubleArray0[1] = 1647.7668589247;
    doubleArray0[2] = 1.0E-9;
    doubleArray0[3] = 1780.4812892102034;
    doubleArray0[4] = 2699.41821805;
    doubleArray0[5] = (-5636.940604490026);
    doubleArray0[6] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1687.829146036806);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 1.0E-9);
    linkedList0.addLast(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 17);
    // Undeclared exception!
    try {
        simplexTableau0.subtractRow(17, 546, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (17)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param minuendRow row index
 * @param subtrahendRow row index
 * @param multiple multiplication factor
 */"
"protected final int getRhsOffset() {
    return getWidth() - 1;
}","public void test7070() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.poll();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 0.0);
    simplexTableau1.getRhsOffset();
    simplexTableau1.getRhsOffset();
}","/**
 * Get the offset of the right hand side.
 * @return offset of the right hand side
 */"
"protected final int getSlackVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables;
}","public void test7171() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(10, (-1), 0.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 3.141592653589793);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3.141592653589793);
    simplexTableau0.getSlackVariableOffset();
}","/**
 * Get the offset of the first slack variable.
 * @return offset of the first slack variable
 */"
"protected final int getSlackVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables;
}","public void test7272() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1574.390823), 0);
    simplexTableau0.getSlackVariableOffset();
}","/**
 * Get the offset of the first slack variable.
 * @return offset of the first slack variable
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);
}","public void test7373() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, false, (-2142.80194));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept when checking for optimality
 */"
"protected final int getRhsOffset() {
    return getWidth() - 1;
}","public void test7474() throws Throwable {
    double[] doubleArray0 = new double[1];
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
    LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(arrayRealVector0, 1.976524624939355E-8);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, 0.0, 1360);
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList1);
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, (-2276.464819));
    GoalType goalType2 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType2, false, 1123.543217, 0);
    simplexTableau1.equals(simplexTableau2);
    simplexTableau2.getRhsOffset();
}","/**
 * Get the offset of the right hand side.
 * @return offset of the right hand side
 */"
"protected RealPointValuePair getSolution() {
    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    for (int i = 0; i < coefficients.length; i++) {
        int colIndex = columnLabels.indexOf(""x"" + i);
        if (colIndex < 0) {
            coefficients[i] = 0;
            continue;
        }
        Integer basicRow = getBasicRow(colIndex);
        // if the basic row is found to be the objective function row
        // set the coefficient to 0 -> this case handles unconstrained
        // variables that are still part of the objective function
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test7575() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[3] = (-1476.86);
    doubleArray0[1] = (-1476.86);
    doubleArray0[3] = Double.NaN;
    doubleArray0[5] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) 0.0;
    doubleArray1[1] = (Double) Double.NaN;
    doubleArray1[2] = (Double) (-1476.86);
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Double.NaN, relationship0, openMapRealVector0, 0.0);
    linkedList0.offerLast(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.getSolution();
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"public double getValue() {
    return value;
}","public void test7676() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = 1.0;
    doubleArray0[1] = (-975.73314);
    doubleArray0[2] = 942.97;
    doubleArray0[3] = (-1.0);
    doubleArray0[5] = (-1.0);
    doubleArray0[6] = 58.0547673;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, (-2780.06341805081));
    RealPointValuePair realPointValuePair0 = simplexTableau1.getSolution();
    assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 * @return the stored value of the objective function
 */"
"protected static double getInvertedCoefficientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.toArray()) {
        sum -= coefficient;
    }
    return sum;
}","public void test7777() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected final int getArtificialVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;
}","public void test7778() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    assertEquals(8, int0);
}","/**
 * Get the offset of the first artificial variable.
 * @return offset of the first artificial variable
 */"
"int getColumnDimension();","public void test7779() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    RealMatrix realMatrix0 = simplexTableau1.createTableau(false);
    assertEquals(11, realMatrix0.getColumnDimension());
}","/**
 * Returns the number of columns in the matrix.
 *
 * @return columnDimension
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test7780() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    RealMatrix realMatrix0 = simplexTableau1.createTableau(false);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test7781() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 0.0;
    doubleArray0[0] = Double.NaN;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) Double.NaN;
    doubleArray1[1] = (Double) 0.0;
    doubleArray1[2] = (Double) 0.0;
    doubleArray1[3] = (Double) 0.0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    RealMatrix realMatrix0 = simplexTableau1.createTableau(false);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.getSolution();
    assertFalse(simplexTableau0.equals((Object) simplexTableau1));
}","/**
 * {@inheritDoc}
 */"
"protected final int getArtificialVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;
}","public void test7882() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1151.079702577819);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[1] = (Double) 0.0;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    assertEquals(8, int0);
}","/**
 * Get the offset of the first artificial variable.
 * @return offset of the first artificial variable
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test7883() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1151.079702577819);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[1] = (Double) 0.0;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"protected final int getSlackVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables;
}","public void test7884() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1151.079702577819);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[1] = (Double) 0.0;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    int int0 = simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    int int1 = simplexTableau1.getSlackVariableOffset();
    assertEquals(8, int1);
}","/**
 * Get the offset of the first slack variable.
 * @return offset of the first slack variable
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test7985() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[1] = (-1476.86);
    doubleArray0[4] = 1151.079702577819;
    doubleArray0[1] = (-1476.86);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Double[] doubleArray1 = new Double[4];
    doubleArray1[0] = (Double) (-1476.86);
    doubleArray1[1] = (Double) 0.0;
    doubleArray0[1] = (-1476.86);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[1]);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(doubleArray1[2]);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (double) doubleArray1[1]);
    simplexTableau1.isOptimal();
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, (-1476.86));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test8086() throws Throwable {
    double[] doubleArray0 = new double[13];
    doubleArray0[0] = (-1476.86);
    doubleArray0[3] = 0.0;
    doubleArray0[4] = 1151.079702577819;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    doubleArray0[1] = 0.0;
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.getNumObjectiveFunctions();
    simplexTableau0.equals(1151.079702577819);
    simplexTableau0.getArtificialVariableOffset();
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0);
    simplexTableau0.equals(simplexTableau1);
    simplexTableau1.getNumArtificialVariables();
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1203, 2175.42114);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (1,203)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test8187() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = Double.POSITIVE_INFINITY;
    doubleArray0[2] = (-15.047511983814928);
    doubleArray0[3] = Double.NaN;
    doubleArray0[5] = 639.098447199516;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1490.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3719.7487517476907);
    simplexTableau0.getNumObjectiveFunctions();
    boolean boolean0 = simplexTableau0.equals(639.098447199516);
    simplexTableau0.getArtificialVariableOffset();
    boolean boolean1 = simplexTableau0.equals(simplexTableau0);
    assertFalse(boolean1 == boolean0);
}","/**
 * {@inheritDoc}
 */"
"protected final int getArtificialVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;
}","public void test8288() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = Double.POSITIVE_INFINITY;
    doubleArray0[4] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, Double.POSITIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.equals(Double.POSITIVE_INFINITY);
    int int0 = simplexTableau0.getArtificialVariableOffset();
    assertEquals(8, int0);
}","/**
 * Get the offset of the first artificial variable.
 * @return offset of the first artificial variable
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other instanceof SimplexTableau) {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    }
    return false;
}","public void test8289() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[2] = Double.POSITIVE_INFINITY;
    doubleArray0[3] = Double.POSITIVE_INFINITY;
    doubleArray0[4] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, Double.POSITIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.equals(Double.POSITIVE_INFINITY);
    int int0 = simplexTableau0.getArtificialVariableOffset();
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"protected final void setEntry(final int row, final int column, final double value) {
    tableau.setEntry(row, column, value);
}","public void test8390() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[1] = (-790.66);
    double double0 = 1424.11;
    doubleArray0[2] = 1424.11;
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 1.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    int int0 = 11;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-790.66), 11);
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(20, 20, (-790.66));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // row index (20)
        //
        verifyException(""org.apache.commons.math.linear.MatrixUtils"", e);
    }
}","/**
 * Set an entry of the tableau.
 * @param row row index
 * @param column column index
 * @param value for the entry
 */"
"protected final int getRhsOffset() {
    return getWidth() - 1;
}","public void test8491() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (-1509.4966);
    doubleArray0[5] = (-1578.8);
    doubleArray0[2] = (-4663.639503);
    doubleArray0[5] = (-4663.639503);
    doubleArray0[5] = (-1291.416448259596);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-1509.4966), relationship0, openMapRealVector0, 2.0);
    linkedList0.add(linearConstraint0);
    Integer integer0 = new Integer(0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2.0, 2820);
    int int0 = simplexTableau0.getRhsOffset();
    assertEquals(8, int0);
}","/**
 * Get the offset of the right hand side.
 * @return offset of the right hand side
 */"
"public double getValue() {
    return value;
}","public void test8592() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[1] = 583.983576;
    doubleArray0[3] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 583.983576, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-5138.939914));
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 * @return the stored value of the objective function
 */"
"protected final double[][] getData() {
    return tableau.getData();
}","public void test8593() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[1] = 583.983576;
    doubleArray0[3] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 583.983576, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-5138.939914));
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    double[][] doubleArray1 = simplexTableau0.getData();
    assertEquals(3, doubleArray1.length);
}","/**
 * Get the tableau data.
 * @return tableau data
 */"
"boolean isOptimal() {
    for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, epsilon) < 0) {
            return false;
        }
    }
    return true;
}","public void test8594() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[1] = 583.983576;
    doubleArray0[3] = 0.0;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 583.983576, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-5138.939914));
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    double[][] doubleArray1 = simplexTableau0.getData();
    boolean boolean0 = simplexTableau0.isOptimal();
    assertTrue(boolean0);
}","/**
 * Returns whether the problem is at an optimal state.
 * @return whether the model has been solved
 */"
"boolean isOptimal() {
    for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {
        final double entry = tableau.getEntry(0, i);
        if (Precision.compareTo(entry, 0d, epsilon) < 0) {
            return false;
        }
    }
    return true;
}","public void test8695() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
    boolean boolean0 = linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.getHeight();
    simplexTableau0.getNumDecisionVariables();
    LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
    linkedList0.addAll(0, (Collection<? extends LinearConstraint>) linkedList1);
    List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
    Integer integer0 = new Integer(0);
    simplexTableau0.getSolution();
    simplexTableau0.divideRow(0, 0.0);
    simplexTableau0.isOptimal();
    simplexTableau0.isOptimal();
    linkedList1.add(linearConstraint0);
    simplexTableau0.subtractRow(0, 0, 0);
    simplexTableau0.getNumDecisionVariables();
    linkedList1.addAll((Collection<? extends LinearConstraint>) list0);
    linearObjectiveFunction0.getValue(doubleArray0);
    simplexTableau0.normalizeConstraints(linkedList1);
    linkedList0.offer(linearConstraint0);
    simplexTableau0.hashCode();
    simplexTableau0.dropPhase1Objective();
    simplexTableau0.isOptimal();
    boolean boolean1 = simplexTableau0.isOptimal();
    assertTrue(boolean1 == boolean0);
}","/**
 * Returns whether the problem is at an optimal state.
 * @return whether the model has been solved
 */"
