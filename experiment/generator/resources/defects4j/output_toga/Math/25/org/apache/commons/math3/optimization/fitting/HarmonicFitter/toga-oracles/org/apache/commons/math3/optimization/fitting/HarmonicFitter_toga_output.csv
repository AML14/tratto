project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt(), any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class), any(double[].class), any(double[].class), any(double[].class));
    doReturn(0, 0, 0, 0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();
    int[] intArray0 = new int[7];
    Well1024a well1024a0 = new Well1024a(intArray0);
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1092, well1024a0);
    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 1092, unitSphereRandomVectorGenerator0);
    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);
    double[] doubleArray0 = new double[1];
    // Undeclared exception!
    harmonicFitter0.fit(doubleArray0);
}",0,
project,0,test11,"public void test11() throws Throwable {
    WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
    WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-649.361113), 3238.74448133, (-1061.55549));
    weightedObservedPointArray0[0] = weightedObservedPoint0;
    weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
    weightedObservedPointArray0[2] = weightedObservedPointArray0[0];
    weightedObservedPointArray0[3] = weightedObservedPointArray0[1];
    weightedObservedPointArray0[4] = weightedObservedPointArray0[2];
    weightedObservedPointArray0[5] = weightedObservedPointArray0[1];
    weightedObservedPointArray0[6] = weightedObservedPointArray0[4];
    weightedObservedPointArray0[7] = weightedObservedPoint0;
    weightedObservedPointArray0[8] = weightedObservedPointArray0[1];
    HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
    double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
    GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator((RandomGenerator) null);
    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, gaussianRandomGenerator0);
    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 2145948725, uncorrelatedRandomVectorGenerator0);
    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);
    // Undeclared exception!
    harmonicFitter0.fit(doubleArray0);
}",0,
project,0,test22,"public void test22() throws Throwable {
    WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
    WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-649.361113), 3238.74448133, 3238.74448133);
    weightedObservedPointArray0[0] = weightedObservedPoint0;
    weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
    weightedObservedPointArray0[2] = weightedObservedPoint0;
    weightedObservedPointArray0[3] = weightedObservedPoint0;
    weightedObservedPointArray0[4] = weightedObservedPointArray0[3];
    weightedObservedPointArray0[5] = weightedObservedPointArray0[4];
    weightedObservedPointArray0[6] = weightedObservedPointArray0[0];
    weightedObservedPointArray0[7] = weightedObservedPointArray0[5];
    weightedObservedPointArray0[8] = weightedObservedPoint0;
    HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
    double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
    HarmonicFitter harmonicFitter0 = new HarmonicFitter((DifferentiableMultivariateVectorOptimizer) null);
    // Undeclared exception!
    try {
        harmonicFitter0.fit(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.optimization.fitting.CurveFitter"", e);
    }
}",0,
project,0,test33,"public void test33() throws Throwable {
    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt(), any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class), any(double[].class), any(double[].class), any(double[].class));
    doReturn(0, 0, 0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();
    Well44497b well44497b0 = new Well44497b(0L);
    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator((-582), well44497b0);
    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 4, unitSphereRandomVectorGenerator0);
    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);
    double[] doubleArray0 = new double[3];
    // Undeclared exception!
    try {
        harmonicFitter0.fit(doubleArray0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.random.UnitSphereRandomVectorGenerator"", e);
    }
}",0,
project,0,test88,"public void test88() throws Throwable {
    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
    int[] intArray0 = new int[3];
    Well19937a well19937a0 = new Well19937a(intArray0);
    UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937a0);
    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(840, uniformRandomGenerator0);
    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 840, uncorrelatedRandomVectorGenerator0);
    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);
    // Undeclared exception!
    try {
        harmonicFitter0.fit();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // sample contains 0 observed points, at least 4 are required
        //
        verifyException(""org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser"", e);
    }
}",0,
project,0,test99,"public void test99() throws Throwable {
    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
    doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt(), any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class), any(double[].class), any(double[].class), any(double[].class));
    doReturn(0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();
    double[] doubleArray0 = new double[5];
    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, (NormalizedRandomGenerator) null);
    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 2, uncorrelatedRandomVectorGenerator0);
    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);
    // Undeclared exception!
    try {
        harmonicFitter0.fit(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator"", e);
    }
}",0,
