{
  "test00" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt(), any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    doReturn(0, 0, 0, 0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();\n    int[] intArray0 = new int[7];\n    Well1024a well1024a0 = new Well1024a(intArray0);\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1092, well1024a0);\n    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 1092, unitSphereRandomVectorGenerator0);\n    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);\n    double[] doubleArray0 = new double[1];\n    // Undeclared exception!\n    harmonicFitter0.fit(doubleArray0);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];\n    WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-649.361113), 3238.74448133, (-1061.55549));\n    weightedObservedPointArray0[0] = weightedObservedPoint0;\n    weightedObservedPointArray0[1] = weightedObservedPointArray0[0];\n    weightedObservedPointArray0[2] = weightedObservedPointArray0[0];\n    weightedObservedPointArray0[3] = weightedObservedPointArray0[1];\n    weightedObservedPointArray0[4] = weightedObservedPointArray0[2];\n    weightedObservedPointArray0[5] = weightedObservedPointArray0[1];\n    weightedObservedPointArray0[6] = weightedObservedPointArray0[4];\n    weightedObservedPointArray0[7] = weightedObservedPoint0;\n    weightedObservedPointArray0[8] = weightedObservedPointArray0[1];\n    HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);\n    double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();\n    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());\n    GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator((RandomGenerator) null);\n    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, gaussianRandomGenerator0);\n    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 2145948725, uncorrelatedRandomVectorGenerator0);\n    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);\n    // Undeclared exception!\n    harmonicFitter0.fit(doubleArray0);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];\n    WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-649.361113), 3238.74448133, 3238.74448133);\n    weightedObservedPointArray0[0] = weightedObservedPoint0;\n    weightedObservedPointArray0[1] = weightedObservedPointArray0[0];\n    weightedObservedPointArray0[2] = weightedObservedPoint0;\n    weightedObservedPointArray0[3] = weightedObservedPoint0;\n    weightedObservedPointArray0[4] = weightedObservedPointArray0[3];\n    weightedObservedPointArray0[5] = weightedObservedPointArray0[4];\n    weightedObservedPointArray0[6] = weightedObservedPointArray0[0];\n    weightedObservedPointArray0[7] = weightedObservedPointArray0[5];\n    weightedObservedPointArray0[8] = weightedObservedPoint0;\n    HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);\n    double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();\n    HarmonicFitter harmonicFitter0 = new HarmonicFitter((DifferentiableMultivariateVectorOptimizer) null);\n    harmonicFitter0.fit(doubleArray0);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt(), any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    doReturn(0, 0, 0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();\n    Well44497b well44497b0 = new Well44497b(0L);\n    UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator((-582), well44497b0);\n    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 4, unitSphereRandomVectorGenerator0);\n    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);\n    double[] doubleArray0 = new double[3];\n    harmonicFitter0.fit(doubleArray0);\n}",
    "testName" : "test33"
  },
  "test88" : {
    "methodSignature" : "public double[] fit()",
    "methodName" : "fit",
    "className" : "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88() throws Throwable {\n    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());\n    int[] intArray0 = new int[3];\n    Well19937a well19937a0 = new Well19937a(intArray0);\n    UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937a0);\n    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(840, uniformRandomGenerator0);\n    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 840, uncorrelatedRandomVectorGenerator0);\n    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);\n    harmonicFitter0.fit();\n}",
    "testName" : "test88"
  },
  "test99" : {
    "methodSignature" : "public double[] fit(double[] initialGuess)",
    "methodName" : "fit",
    "className" : "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test99() throws Throwable {\n    DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());\n    doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt(), any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class), any(double[].class), any(double[].class), any(double[].class));\n    doReturn(0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();\n    double[] doubleArray0 = new double[5];\n    UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, (NormalizedRandomGenerator) null);\n    DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 2, uncorrelatedRandomVectorGenerator0);\n    HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);\n    harmonicFitter0.fit(doubleArray0);\n}",
    "testName" : "test99"
  }
}