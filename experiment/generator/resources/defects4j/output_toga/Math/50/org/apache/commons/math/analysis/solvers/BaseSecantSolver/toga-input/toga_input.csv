focal_method,test_prefix,docstring
"public IllinoisSolver() {
    super(DEFAULT_ABSOLUTE_ACCURACY, Method.ILLINOIS);
}","public void test000() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    assertNotNull(illinoisSolver0);
}","/**
 * Construct a solver with default accuracy (1e-6).
 */"
"public double getMax() {
    return searchMax;
}","public void test001() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test002() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test003() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test004() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test005() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test006() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test008() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Atan atan0 = new Atan();
    double double0 = illinoisSolver0.solve(206, (UnivariateRealFunction) atan0, (-1099.3979317634332), 4.9E-324, 1.3754765451254772E-11);
    assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test009() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Atan atan0 = new Atan();
    double double0 = illinoisSolver0.solve(206, (UnivariateRealFunction) atan0, (-1099.3979317634332), 4.9E-324, 1.3754765451254772E-11);
    assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0010() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Atan atan0 = new Atan();
    double double0 = illinoisSolver0.solve(206, (UnivariateRealFunction) atan0, (-1099.3979317634332), 4.9E-324, 1.3754765451254772E-11);
    assertEquals(1.3754765451254772E-11, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getMin() {
    return searchMin;
}","public void test0011() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Atan atan0 = new Atan();
    double double0 = illinoisSolver0.solve(206, (UnivariateRealFunction) atan0, (-1099.3979317634332), 4.9E-324, 1.3754765451254772E-11);
    assertEquals((-1099.3979317634332), illinoisSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0012() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Atan atan0 = new Atan();
    double double0 = illinoisSolver0.solve(206, (UnivariateRealFunction) atan0, (-1099.3979317634332), 4.9E-324, 1.3754765451254772E-11);
    assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test0013() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Atan atan0 = new Atan();
    double double0 = illinoisSolver0.solve(206, (UnivariateRealFunction) atan0, (-1099.3979317634332), 4.9E-324, 1.3754765451254772E-11);
    assertEquals(4.9E-324, illinoisSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"@Override
public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue) {
    return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
}","public void test0014() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Atan atan0 = new Atan();
    double double0 = illinoisSolver0.solve(206, (UnivariateRealFunction) atan0, (-1099.3979317634332), 4.9E-324, 1.3754765451254772E-11);
    assertEquals((-3.454E-321), double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public IllinoisSolver(final double absoluteAccuracy) {
    super(absoluteAccuracy, Method.ILLINOIS);
}","public void test0115() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    assertNotNull(illinoisSolver0);
}","/**
 * Construct a solver.
 *
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0116() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    assertEquals((-3470.627599577), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0117() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test0118() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0119() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test0120() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0121() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public PolynomialFunction(double[] c) throws NullArgumentException, NoDataException {
    super();
    MathUtils.checkNotNull(c);
    int n = c.length;
    if (n == 0) {
        throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
    }
    while ((n > 1) && (c[n - 1] == 0)) {
        --n;
    }
    this.coefficients = new double[n];
    System.arraycopy(c, 0, this.coefficients, 0, n);
}","public void test0122() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertNotNull(polynomialFunction0);
}","/**
 * Construct a polynomial with the given coefficients.  The first element
 * of the coefficients array is the constant term.  Higher degree
 * coefficients follow in sequence.  The degree of the resulting polynomial
 * is the index of the last non-null element of the array, or 0 if all elements
 * are null.
 * <p>
 * The constructor makes a copy of the input array and assigns the copy to
 * the coefficients property.</p>
 *
 * @param c Polynomial coefficients.
 * @throws NullArgumentException if {@code c} is {@code null}.
 * @throws NoDataException if {@code c} is empty.
 */"
"public int degree() {
    return coefficients.length - 1;
}","public void test0123() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    assertEquals(7, polynomialFunction0.degree());
}","/**
 * Returns the degree of the polynomial.
 *
 * @return the degree of the polynomial.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0126() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    double double0 = illinoisSolver0.solve(2141536214, (UnivariateRealFunction) polynomialFunction0, (-3470.627599577), 2.141536214E9);
    assertEquals((-3470.627599577), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0127() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    double double0 = illinoisSolver0.solve(2141536214, (UnivariateRealFunction) polynomialFunction0, (-3470.627599577), 2.141536214E9);
    assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0128() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    double double0 = illinoisSolver0.solve(2141536214, (UnivariateRealFunction) polynomialFunction0, (-3470.627599577), 2.141536214E9);
    assertEquals(1.0707663716862001E9, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getMin() {
    return searchMin;
}","public void test0129() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    double double0 = illinoisSolver0.solve(2141536214, (UnivariateRealFunction) polynomialFunction0, (-3470.627599577), 2.141536214E9);
    assertEquals((-3470.627599577), illinoisSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0130() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    double double0 = illinoisSolver0.solve(2141536214, (UnivariateRealFunction) polynomialFunction0, (-3470.627599577), 2.141536214E9);
    assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test0131() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    double double0 = illinoisSolver0.solve(2141536214, (UnivariateRealFunction) polynomialFunction0, (-3470.627599577), 2.141536214E9);
    assertEquals(2.141536214E9, illinoisSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public int degree() {
    return coefficients.length - 1;
}","public void test0132() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    double double0 = illinoisSolver0.solve(2141536214, (UnivariateRealFunction) polynomialFunction0, (-3470.627599577), 2.141536214E9);
    assertEquals(7, polynomialFunction0.degree());
}","/**
 * Returns the degree of the polynomial.
 *
 * @return the degree of the polynomial.
 */"
"public double solve(int maxEval, FUNC f, double min, double max) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min));
}","public void test0133() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3470.627599577));
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) 2141536214;
    doubleArray0[3] = (double) 2141536214;
    doubleArray0[4] = (-3470.627599577);
    doubleArray0[7] = (double) 2141536214;
    PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    double double0 = illinoisSolver0.solve(2141536214, (UnivariateRealFunction) polynomialFunction0, (-3470.627599577), 2.141536214E9);
    assertArrayEquals(new double[] { 2.141536214E9, 0.0, 0.0, 2.141536214E9, (-3470.627599577), 0.0, 0.0, 2.141536214E9 }, doubleArray0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver(final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);
}","public void test0236() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 * @param functionValueAccuracy Maximum function value error.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0237() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0238() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    assertEquals(3128.7, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0239() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    assertEquals(2725.29567932, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test0240() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0241() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test0242() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test0244() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Floor floor0 = new Floor();
    double double0 = pegasusSolver0.solve(793, (UnivariateRealFunction) floor0, (double) 793, 1.0E-6, (double) 793);
    assertEquals(1.0E-6, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0245() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Floor floor0 = new Floor();
    double double0 = pegasusSolver0.solve(793, (UnivariateRealFunction) floor0, (double) 793, 1.0E-6, (double) 793);
    assertEquals(793.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0246() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Floor floor0 = new Floor();
    double double0 = pegasusSolver0.solve(793, (UnivariateRealFunction) floor0, (double) 793, 1.0E-6, (double) 793);
    assertEquals(3128.7, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0247() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Floor floor0 = new Floor();
    double double0 = pegasusSolver0.solve(793, (UnivariateRealFunction) floor0, (double) 793, 1.0E-6, (double) 793);
    assertEquals(2725.29567932, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0248() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Floor floor0 = new Floor();
    double double0 = pegasusSolver0.solve(793, (UnivariateRealFunction) floor0, (double) 793, 1.0E-6, (double) 793);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test0249() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Floor floor0 = new Floor();
    double double0 = pegasusSolver0.solve(793, (UnivariateRealFunction) floor0, (double) 793, 1.0E-6, (double) 793);
    assertEquals(793.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"@Override
public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue) {
    return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
}","public void test0250() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Floor floor0 = new Floor();
    double double0 = pegasusSolver0.solve(793, (UnivariateRealFunction) floor0, (double) 793, 1.0E-6, (double) 793);
    assertEquals(1.0E-6, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver(final double absoluteAccuracy) {
    super(absoluteAccuracy, Method.PEGASUS);
}","public void test0351() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver.
 *
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0352() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test0353() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getMin() {
    return searchMin;
}","public void test0354() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0355() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0356() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0357() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public Sigmoid(double lo, double hi) {
    this.lo = lo;
    this.hi = hi;
}","public void test0358() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    assertNotNull(sigmoid0);
}","/**
 * Sigmoid function.
 *
 * @param lo Lower asymptote.
 * @param hi Higher asymptote.
 */"
"public UnivariateRealFunction derivative() {
    return new UnivariateRealFunction() {

        /**
         * {@inheritDoc}
         */
        public double value(double x) {
            final double exp = FastMath.exp(-x);
            if (Double.isInfinite(exp)) {
                // Avoid returning NaN in case of overflow.
                return 0;
            }
            final double exp1 = 1 + exp;
            return (hi - lo) * exp / (exp1 * exp1);
        }
    };
}","public void test0359() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
    assertNotNull(univariateRealFunction0);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0360() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(3333, univariateRealFunction0, (-2993.2715265), 549.77032, allowedSolution0);
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0361() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(3333, univariateRealFunction0, (-2993.2715265), 549.77032, allowedSolution0);
    assertEquals((-1221.75060325), pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0362() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(3333, univariateRealFunction0, (-2993.2715265), 549.77032, allowedSolution0);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test0363() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(3333, univariateRealFunction0, (-2993.2715265), 549.77032, allowedSolution0);
    assertEquals((-2993.2715265), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test0364() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(3333, univariateRealFunction0, (-2993.2715265), 549.77032, allowedSolution0);
    assertEquals(549.77032, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0365() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(3333, univariateRealFunction0, (-2993.2715265), 549.77032, allowedSolution0);
    assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
}","public void test0366() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Sigmoid sigmoid0 = new Sigmoid((-2.2250738585072014E-308), 3333);
    UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(3333, univariateRealFunction0, (-2993.2715265), 549.77032, allowedSolution0);
    assertEquals((-2993.2715265), double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public RegulaFalsiSolver(final double relativeAccuracy, final double absoluteAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, Method.REGULA_FALSI);
}","public void test0467() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    assertNotNull(regulaFalsiSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getMin() {
    return searchMin;
}","public void test0468() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0469() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0470() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getMax() {
    return searchMax;
}","public void test0471() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0472() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    assertEquals(1.176342548272881E-8, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0473() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    assertEquals(1.176342548272881E-8, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public HarmonicOscillator(double amplitude, double omega, double phase) {
    this.amplitude = amplitude;
    this.omega = omega;
    this.phase = phase;
}","public void test0474() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    assertNotNull(harmonicOscillator0);
}","/**
 * Harmonic oscillator function.
 *
 * @param amplitude Amplitude.
 * @param omega Angular frequency.
 * @param phase Phase.
 */"
"public UnivariateRealFunction derivative() {
    return new UnivariateRealFunction() {

        /**
         * {@inheritDoc}
         */
        public double value(double x) {
            return -amplitude * omega * FastMath.sin(omega * x + phase);
        }
    };
}","public void test0475() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    assertNotNull(univariateRealFunction0);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test0476() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0477() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0478() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getMax() {
    return searchMax;
}","public void test0479() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0480() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    assertEquals(1.176342548272881E-8, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0481() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    assertEquals(1.176342548272881E-8, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue) {
    return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
}","public void test0482() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"protected final double doSolve() {
    // Get initial solution
    double x0 = getMin();
    double x1 = getMax();
    double f0 = computeObjectiveValue(x0);
    double f1 = computeObjectiveValue(x1);
    // If one of the bounds is the exact root, return it. Since these are
    // not under-approximations or over-approximations, we can return them
    // regardless of the allowed solutions.
    if (f0 == 0.0) {
        return x0;
    }
    if (f1 == 0.0) {
        return x1;
    }
    // Verify bracketing of initial solution.
    verifyBracketing(x0, x1);
    // Get accuracies.
    final double ftol = getFunctionValueAccuracy();
    final double atol = getAbsoluteAccuracy();
    final double rtol = getRelativeAccuracy();
    // Keep track of inverted intervals, meaning that the left bound is
    // larger than the right bound.
    boolean inverted = false;
    // Keep finding better approximations.
    while (true) {
        // Calculate the next approximation.
        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
        final double fx = computeObjectiveValue(x);
        // If the new approximation is the exact root, return it. Since
        // this is not an under-approximation or an over-approximation,
        // we can return it regardless of the allowed solutions.
        if (fx == 0.0) {
            return x;
        }
        // Update the bounds with the new approximation.
        if (f1 * fx < 0) {
            // The value of x1 has switched to the other bound, thus inverting
            // the interval.
            x0 = x1;
            f0 = f1;
            inverted = !inverted;
        } else {
            switch(method) {
                case ILLINOIS:
                    f0 *= 0.5;
                    break;
                case PEGASUS:
                    f0 *= f1 / (f1 + fx);
                    break;
                case REGULA_FALSI:
                    // Nothing.
                    if (x == x1) {
                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                        f0 = computeObjectiveValue(x0);
                    }
                    break;
                default:
                    // Should never happen.
                    throw new MathInternalError();
            }
        }
        // Update from [x0, x1] to [x0, x].
        x1 = x;
        f1 = fx;
        // If the function value of the last approximation is too small,
        // given the function value accuracy, then we can't get closer to
        // the root than we already are.
        if (FastMath.abs(f1) <= ftol) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    if (inverted) {
                        return x1;
                    }
                    break;
                case RIGHT_SIDE:
                    if (!inverted) {
                        return x1;
                    }
                    break;
                case BELOW_SIDE:
                    if (f1 <= 0) {
                        return x1;
                    }
                    break;
                case ABOVE_SIDE:
                    if (f1 >= 0) {
                        return x1;
                    }
                    break;
                default:
                    throw new MathInternalError();
            }
        }
        // If the current interval is within the given accuracies, we
        // are satisfied with the current approximation.
        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    return inverted ? x1 : x0;
                case RIGHT_SIDE:
                    return inverted ? x0 : x1;
                case BELOW_SIDE:
                    return (f1 <= 0) ? x1 : x0;
                case ABOVE_SIDE:
                    return (f1 >= 0) ? x1 : x0;
                default:
                    throw new MathInternalError();
            }
        }
    }
}","public void test0483() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    double double1 = regulaFalsiSolver0.doSolve();
    assertEquals(double1, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test0484() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    double double1 = regulaFalsiSolver0.doSolve();
    assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test0485() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    double double1 = regulaFalsiSolver0.doSolve();
    assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test0486() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    double double1 = regulaFalsiSolver0.doSolve();
    assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getMax() {
    return searchMax;
}","public void test0487() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    double double1 = regulaFalsiSolver0.doSolve();
    assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test0488() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    double double1 = regulaFalsiSolver0.doSolve();
    assertEquals(1.176342548272881E-8, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test0489() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.176342548272881E-8, 1.176342548272881E-8);
    HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.176342548272881E-8, 0.0, 1.176342548272881E-8);
    UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
    double double0 = regulaFalsiSolver0.solve(62, univariateRealFunction0, 0.0, 0.0, 0.0);
    double double1 = regulaFalsiSolver0.doSolve();
    assertEquals(1.176342548272881E-8, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public Gaussian(double mean, double sigma) {
    this(1 / (sigma * FastMath.sqrt(2 * Math.PI)), mean, sigma);
}","public void test0598() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    assertNotNull(gaussian0);
}","/**
 * Normalized gaussian with given mean and standard deviation.
 *
 * @param mean Mean.
 * @param sigma Standard deviation.
 * @throws NotStrictlyPositiveException if {@code sigma <= 0}.
 */"
"public UnivariateRealFunction derivative() {
    return new UnivariateRealFunction() {

        /**
         * {@inheritDoc}
         */
        public double value(double x) {
            final double diff = x - mean;
            final double g = Gaussian.value(diff, norm, i2s2);
            if (g == 0) {
                // Avoid returning NaN in case of overflow.
                return 0;
            } else {
                return -2 * diff * i2s2 * g;
            }
        }
    };
}","public void test0599() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    assertNotNull(univariateRealFunction0);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test05100() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    assertEquals(2608.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test05101() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test05102() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test05103() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test05104() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    assertEquals((-1.504961346353674E-8), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test05105() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    assertEquals(1303.999999992475, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
}","public void test05106() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    assertEquals(8.784354577073827E-9, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"protected final double doSolve() {
    // Get initial solution
    double x0 = getMin();
    double x1 = getMax();
    double f0 = computeObjectiveValue(x0);
    double f1 = computeObjectiveValue(x1);
    // If one of the bounds is the exact root, return it. Since these are
    // not under-approximations or over-approximations, we can return them
    // regardless of the allowed solutions.
    if (f0 == 0.0) {
        return x0;
    }
    if (f1 == 0.0) {
        return x1;
    }
    // Verify bracketing of initial solution.
    verifyBracketing(x0, x1);
    // Get accuracies.
    final double ftol = getFunctionValueAccuracy();
    final double atol = getAbsoluteAccuracy();
    final double rtol = getRelativeAccuracy();
    // Keep track of inverted intervals, meaning that the left bound is
    // larger than the right bound.
    boolean inverted = false;
    // Keep finding better approximations.
    while (true) {
        // Calculate the next approximation.
        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
        final double fx = computeObjectiveValue(x);
        // If the new approximation is the exact root, return it. Since
        // this is not an under-approximation or an over-approximation,
        // we can return it regardless of the allowed solutions.
        if (fx == 0.0) {
            return x;
        }
        // Update the bounds with the new approximation.
        if (f1 * fx < 0) {
            // The value of x1 has switched to the other bound, thus inverting
            // the interval.
            x0 = x1;
            f0 = f1;
            inverted = !inverted;
        } else {
            switch(method) {
                case ILLINOIS:
                    f0 *= 0.5;
                    break;
                case PEGASUS:
                    f0 *= f1 / (f1 + fx);
                    break;
                case REGULA_FALSI:
                    // Nothing.
                    if (x == x1) {
                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                        f0 = computeObjectiveValue(x0);
                    }
                    break;
                default:
                    // Should never happen.
                    throw new MathInternalError();
            }
        }
        // Update from [x0, x1] to [x0, x].
        x1 = x;
        f1 = fx;
        // If the function value of the last approximation is too small,
        // given the function value accuracy, then we can't get closer to
        // the root than we already are.
        if (FastMath.abs(f1) <= ftol) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    if (inverted) {
                        return x1;
                    }
                    break;
                case RIGHT_SIDE:
                    if (!inverted) {
                        return x1;
                    }
                    break;
                case BELOW_SIDE:
                    if (f1 <= 0) {
                        return x1;
                    }
                    break;
                case ABOVE_SIDE:
                    if (f1 >= 0) {
                        return x1;
                    }
                    break;
                default:
                    throw new MathInternalError();
            }
        }
        // If the current interval is within the given accuracies, we
        // are satisfied with the current approximation.
        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    return inverted ? x1 : x0;
                case RIGHT_SIDE:
                    return inverted ? x0 : x1;
                case BELOW_SIDE:
                    return (f1 <= 0) ? x1 : x0;
                case ABOVE_SIDE:
                    return (f1 >= 0) ? x1 : x0;
                default:
                    throw new MathInternalError();
            }
        }
    }
}","public void test05107() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(double1, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test05108() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(2608.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test05109() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test05110() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test05111() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test05112() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals((-1.504961346353674E-8), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test05113() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    double double0 = pegasusSolver0.solve(8, univariateRealFunction0, (-1.504961346353674E-8), 2608.0, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(1303.999999992475, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public IllinoisSolver(final double relativeAccuracy, final double absoluteAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, Method.ILLINOIS);
}","public void test06115() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-69.934811), (-69.934811));
    assertNotNull(illinoisSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test06116() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-69.934811), (-69.934811));
    assertEquals((-69.934811), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test06117() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-69.934811), (-69.934811));
    assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getMin() {
    return searchMin;
}","public void test06118() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-69.934811), (-69.934811));
    assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test06119() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-69.934811), (-69.934811));
    assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test06120() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-69.934811), (-69.934811));
    assertEquals((-69.934811), illinoisSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test06121() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-69.934811), (-69.934811));
    assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
}","public void test06123() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-69.934811), (-69.934811));
    Atanh atanh0 = new Atanh();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    // Undeclared exception!
    try {
        illinoisSolver0.solve(1, (UnivariateRealFunction) atanh0, (-2621.940926377), (-269.5762), allowedSolution0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (1) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
}","public void test07132() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    // Undeclared exception!
    try {
        pegasusSolver0.solve(11, (UnivariateRealFunction) sinc0, 3128.7, 0.0, allowedSolution0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // endpoints do not specify an interval: [3,128.7, 0]
        //
        verifyException(""org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public IllinoisSolver(final double relativeAccuracy, final double absoluteAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, Method.ILLINOIS);
}","public void test08133() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    assertNotNull(illinoisSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test08134() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    assertEquals((-1.5707963267948966), illinoisSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test08135() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test08136() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test08137() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getMax() {
    return searchMax;
}","public void test08138() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test08139() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    assertEquals((-1.5707963267948966), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
}","public void test08141() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    Identity identity0 = new Identity();
    // Undeclared exception!
    try {
        illinoisSolver0.solve(2432, (UnivariateRealFunction) identity0, (-1.5707963267948966), 1.4153871807274658, (AllowedSolution) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.analysis.solvers.BaseSecantSolver"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver() {
    super(DEFAULT_ABSOLUTE_ACCURACY, Method.PEGASUS);
}","public void test09142() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver with default accuracy (1e-6).
 */"
"public double getMax() {
    return searchMax;
}","public void test09143() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getMin() {
    return searchMin;
}","public void test09144() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test09145() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test09146() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test09147() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test09148() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public Gaussian() {
    this(0, 1);
}","public void test09149() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    Gaussian gaussian0 = new Gaussian();
    assertNotNull(gaussian0);
}","/**
 * Normalized gaussian with zero mean and unit standard deviation.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test09150() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    Gaussian gaussian0 = new Gaussian();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    // Undeclared exception!
    try {
        pegasusSolver0.solve((-2943), (UnivariateRealFunction) gaussian0, (-2246.38), (-532.00254439), (-219.1901488425366), allowedSolution0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (-2,943) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver(final double relativeAccuracy, final double absoluteAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, Method.PEGASUS);
}","public void test10151() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-4.8559), (-4.8559));
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getMin() {
    return searchMin;
}","public void test10152() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-4.8559), (-4.8559));
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test10153() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-4.8559), (-4.8559));
    assertEquals((-4.8559), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test10154() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-4.8559), (-4.8559));
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test10155() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-4.8559), (-4.8559));
    assertEquals((-4.8559), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test10156() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-4.8559), (-4.8559));
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test10157() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-4.8559), (-4.8559));
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test10159() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-4.8559), (-4.8559));
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    // Undeclared exception!
    try {
        pegasusSolver0.solve(5, (UnivariateRealFunction) cbrt0, (-4.8559), (-465.9968625720741), 1331.339230942915, allowedSolution0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // endpoints do not specify an interval: [-4.856, -465.997]
        //
        verifyException(""org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RegulaFalsiSolver() {
    super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
}","public void test11160() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    assertNotNull(regulaFalsiSolver0);
}","/**
 * Construct a solver with default accuracy (1e-6).
 */"
"public double getStartValue() {
    return searchStart;
}","public void test11161() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test11162() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test11163() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test11164() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test11165() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test11166() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test11168() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    Floor floor0 = new Floor();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    // Undeclared exception!
    try {
        regulaFalsiSolver0.solve(2979, (UnivariateRealFunction) floor0, 359.7455671164, (double) 2979, (double) 2979, allowedSolution0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // function values at endpoints do not have different signs, endpoints: [359.746, 2,979], values: [359, 2,979]
        //
        verifyException(""org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver(final double relativeAccuracy, final double absoluteAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, Method.PEGASUS);
}","public void test12169() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test12170() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test12171() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test12172() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test12173() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    assertEquals(2725.29567932, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test12174() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    assertEquals((-360.07737924462), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test12175() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test12177() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    // Undeclared exception!
    try {
        pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, (AllowedSolution) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.analysis.solvers.BaseSecantSolver"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue) {
    return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
}","public void test13186() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
    Gaussian gaussian0 = new Gaussian(0.0, 2719.82);
    // Undeclared exception!
    try {
        pegasusSolver0.solve((-3237), (UnivariateRealFunction) gaussian0, 6.4281638347818415E-6, 1.9868161777724352E-8, 1055.616);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (-3,237) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue) {
    return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
}","public void test14195() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Floor floor0 = new Floor();
    // Undeclared exception!
    try {
        pegasusSolver0.solve(793, (UnivariateRealFunction) floor0, (double) 793, (-0.12502530217170715), (double) 793);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // endpoints do not specify an interval: [793, -0.125]
        //
        verifyException(""org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public IllinoisSolver(final double relativeAccuracy, final double absoluteAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, Method.ILLINOIS);
}","public void test15196() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
    assertNotNull(illinoisSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test15197() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
    assertEquals((-1.0), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test15198() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
    assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test15199() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
    assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test15200() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
    assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test15201() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
    assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test15202() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
    assertEquals((-1.0), illinoisSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue) {
    return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
}","public void test15203() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
    // Undeclared exception!
    try {
        illinoisSolver0.solve(1023, (UnivariateRealFunction) null, (-2407.914897403), (-2407.728119), (-1.0));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver(final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);
}","public void test16204() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 * @param functionValueAccuracy Maximum function value error.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test16205() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    assertEquals(3128.7, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test16206() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test16207() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test16208() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    assertEquals((-360.07737924462), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test16209() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test16210() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"protected final double doSolve() {
    // Get initial solution
    double x0 = getMin();
    double x1 = getMax();
    double f0 = computeObjectiveValue(x0);
    double f1 = computeObjectiveValue(x1);
    // If one of the bounds is the exact root, return it. Since these are
    // not under-approximations or over-approximations, we can return them
    // regardless of the allowed solutions.
    if (f0 == 0.0) {
        return x0;
    }
    if (f1 == 0.0) {
        return x1;
    }
    // Verify bracketing of initial solution.
    verifyBracketing(x0, x1);
    // Get accuracies.
    final double ftol = getFunctionValueAccuracy();
    final double atol = getAbsoluteAccuracy();
    final double rtol = getRelativeAccuracy();
    // Keep track of inverted intervals, meaning that the left bound is
    // larger than the right bound.
    boolean inverted = false;
    // Keep finding better approximations.
    while (true) {
        // Calculate the next approximation.
        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
        final double fx = computeObjectiveValue(x);
        // If the new approximation is the exact root, return it. Since
        // this is not an under-approximation or an over-approximation,
        // we can return it regardless of the allowed solutions.
        if (fx == 0.0) {
            return x;
        }
        // Update the bounds with the new approximation.
        if (f1 * fx < 0) {
            // The value of x1 has switched to the other bound, thus inverting
            // the interval.
            x0 = x1;
            f0 = f1;
            inverted = !inverted;
        } else {
            switch(method) {
                case ILLINOIS:
                    f0 *= 0.5;
                    break;
                case PEGASUS:
                    f0 *= f1 / (f1 + fx);
                    break;
                case REGULA_FALSI:
                    // Nothing.
                    if (x == x1) {
                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                        f0 = computeObjectiveValue(x0);
                    }
                    break;
                default:
                    // Should never happen.
                    throw new MathInternalError();
            }
        }
        // Update from [x0, x1] to [x0, x].
        x1 = x;
        f1 = fx;
        // If the function value of the last approximation is too small,
        // given the function value accuracy, then we can't get closer to
        // the root than we already are.
        if (FastMath.abs(f1) <= ftol) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    if (inverted) {
                        return x1;
                    }
                    break;
                case RIGHT_SIDE:
                    if (!inverted) {
                        return x1;
                    }
                    break;
                case BELOW_SIDE:
                    if (f1 <= 0) {
                        return x1;
                    }
                    break;
                case ABOVE_SIDE:
                    if (f1 >= 0) {
                        return x1;
                    }
                    break;
                default:
                    throw new MathInternalError();
            }
        }
        // If the current interval is within the given accuracies, we
        // are satisfied with the current approximation.
        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    return inverted ? x1 : x0;
                case RIGHT_SIDE:
                    return inverted ? x0 : x1;
                case BELOW_SIDE:
                    return (f1 <= 0) ? x1 : x0;
                case ABOVE_SIDE:
                    return (f1 >= 0) ? x1 : x0;
                default:
                    throw new MathInternalError();
            }
        }
    }
}","public void test16211() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    // Undeclared exception!
    try {
        pegasusSolver0.doSolve();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (0) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test17220() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Cos cos0 = new Cos();
    illinoisSolver0.setup(5, cos0, 5, 0.0, 0.0);
    assertEquals(5.0, illinoisSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test17221() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Cos cos0 = new Cos();
    illinoisSolver0.setup(5, cos0, 5, 0.0, 0.0);
    assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test17222() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Cos cos0 = new Cos();
    illinoisSolver0.setup(5, cos0, 5, 0.0, 0.0);
    assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test17223() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Cos cos0 = new Cos();
    illinoisSolver0.setup(5, cos0, 5, 0.0, 0.0);
    assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test17224() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Cos cos0 = new Cos();
    illinoisSolver0.setup(5, cos0, 5, 0.0, 0.0);
    assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test17225() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Cos cos0 = new Cos();
    illinoisSolver0.setup(5, cos0, 5, 0.0, 0.0);
    assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"protected final double doSolve() {
    // Get initial solution
    double x0 = getMin();
    double x1 = getMax();
    double f0 = computeObjectiveValue(x0);
    double f1 = computeObjectiveValue(x1);
    // If one of the bounds is the exact root, return it. Since these are
    // not under-approximations or over-approximations, we can return them
    // regardless of the allowed solutions.
    if (f0 == 0.0) {
        return x0;
    }
    if (f1 == 0.0) {
        return x1;
    }
    // Verify bracketing of initial solution.
    verifyBracketing(x0, x1);
    // Get accuracies.
    final double ftol = getFunctionValueAccuracy();
    final double atol = getAbsoluteAccuracy();
    final double rtol = getRelativeAccuracy();
    // Keep track of inverted intervals, meaning that the left bound is
    // larger than the right bound.
    boolean inverted = false;
    // Keep finding better approximations.
    while (true) {
        // Calculate the next approximation.
        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
        final double fx = computeObjectiveValue(x);
        // If the new approximation is the exact root, return it. Since
        // this is not an under-approximation or an over-approximation,
        // we can return it regardless of the allowed solutions.
        if (fx == 0.0) {
            return x;
        }
        // Update the bounds with the new approximation.
        if (f1 * fx < 0) {
            // The value of x1 has switched to the other bound, thus inverting
            // the interval.
            x0 = x1;
            f0 = f1;
            inverted = !inverted;
        } else {
            switch(method) {
                case ILLINOIS:
                    f0 *= 0.5;
                    break;
                case PEGASUS:
                    f0 *= f1 / (f1 + fx);
                    break;
                case REGULA_FALSI:
                    // Nothing.
                    if (x == x1) {
                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                        f0 = computeObjectiveValue(x0);
                    }
                    break;
                default:
                    // Should never happen.
                    throw new MathInternalError();
            }
        }
        // Update from [x0, x1] to [x0, x].
        x1 = x;
        f1 = fx;
        // If the function value of the last approximation is too small,
        // given the function value accuracy, then we can't get closer to
        // the root than we already are.
        if (FastMath.abs(f1) <= ftol) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    if (inverted) {
                        return x1;
                    }
                    break;
                case RIGHT_SIDE:
                    if (!inverted) {
                        return x1;
                    }
                    break;
                case BELOW_SIDE:
                    if (f1 <= 0) {
                        return x1;
                    }
                    break;
                case ABOVE_SIDE:
                    if (f1 >= 0) {
                        return x1;
                    }
                    break;
                default:
                    throw new MathInternalError();
            }
        }
        // If the current interval is within the given accuracies, we
        // are satisfied with the current approximation.
        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    return inverted ? x1 : x0;
                case RIGHT_SIDE:
                    return inverted ? x0 : x1;
                case BELOW_SIDE:
                    return (f1 <= 0) ? x1 : x0;
                case ABOVE_SIDE:
                    return (f1 >= 0) ? x1 : x0;
                default:
                    throw new MathInternalError();
            }
        }
    }
}","public void test17226() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver();
    Cos cos0 = new Cos();
    illinoisSolver0.setup(5, cos0, 5, 0.0, 0.0);
    // Undeclared exception!
    try {
        illinoisSolver0.doSolve();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // endpoints do not specify an interval: [5, 0]
        //
        verifyException(""org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public RegulaFalsiSolver(final double relativeAccuracy, final double absoluteAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, Method.REGULA_FALSI);
}","public void test18227() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    assertNotNull(regulaFalsiSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test18228() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    assertEquals((-208.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test18229() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test18230() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test18231() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test18232() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    assertEquals((-208.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test18233() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public Logit(double lo, double hi) {
    this.lo = lo;
    this.hi = hi;
}","public void test18234() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    assertNotNull(logit0);
}","/**
 * Logit function.
 *
 * @param lo Lower bound of the function domain.
 * @param hi Higher bound of the function domain.
 */"
"public UnivariateRealFunction derivative() {
    return new UnivariateRealFunction() {

        /**
         * {@inheritDoc}
         */
        public double value(double x) {
            return (hi - lo) / ((x - lo) * (hi - x));
        }
    };
}","public void test18235() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
    assertNotNull(univariateRealFunction0);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test18236() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
    regulaFalsiSolver0.setup(282, univariateRealFunction0, (-208.0), (-2.391465199580939E-10), (-208.0));
    assertEquals((-208.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test18237() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
    regulaFalsiSolver0.setup(282, univariateRealFunction0, (-208.0), (-2.391465199580939E-10), (-208.0));
    assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test18238() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
    regulaFalsiSolver0.setup(282, univariateRealFunction0, (-208.0), (-2.391465199580939E-10), (-208.0));
    assertEquals((-208.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test18239() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
    regulaFalsiSolver0.setup(282, univariateRealFunction0, (-208.0), (-2.391465199580939E-10), (-208.0));
    assertEquals((-208.0), regulaFalsiSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test18240() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
    regulaFalsiSolver0.setup(282, univariateRealFunction0, (-208.0), (-2.391465199580939E-10), (-208.0));
    assertEquals((-2.391465199580939E-10), regulaFalsiSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test18241() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
    regulaFalsiSolver0.setup(282, univariateRealFunction0, (-208.0), (-2.391465199580939E-10), (-208.0));
    assertEquals((-208.0), regulaFalsiSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"protected final double doSolve() {
    // Get initial solution
    double x0 = getMin();
    double x1 = getMax();
    double f0 = computeObjectiveValue(x0);
    double f1 = computeObjectiveValue(x1);
    // If one of the bounds is the exact root, return it. Since these are
    // not under-approximations or over-approximations, we can return them
    // regardless of the allowed solutions.
    if (f0 == 0.0) {
        return x0;
    }
    if (f1 == 0.0) {
        return x1;
    }
    // Verify bracketing of initial solution.
    verifyBracketing(x0, x1);
    // Get accuracies.
    final double ftol = getFunctionValueAccuracy();
    final double atol = getAbsoluteAccuracy();
    final double rtol = getRelativeAccuracy();
    // Keep track of inverted intervals, meaning that the left bound is
    // larger than the right bound.
    boolean inverted = false;
    // Keep finding better approximations.
    while (true) {
        // Calculate the next approximation.
        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
        final double fx = computeObjectiveValue(x);
        // If the new approximation is the exact root, return it. Since
        // this is not an under-approximation or an over-approximation,
        // we can return it regardless of the allowed solutions.
        if (fx == 0.0) {
            return x;
        }
        // Update the bounds with the new approximation.
        if (f1 * fx < 0) {
            // The value of x1 has switched to the other bound, thus inverting
            // the interval.
            x0 = x1;
            f0 = f1;
            inverted = !inverted;
        } else {
            switch(method) {
                case ILLINOIS:
                    f0 *= 0.5;
                    break;
                case PEGASUS:
                    f0 *= f1 / (f1 + fx);
                    break;
                case REGULA_FALSI:
                    // Nothing.
                    if (x == x1) {
                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                        f0 = computeObjectiveValue(x0);
                    }
                    break;
                default:
                    // Should never happen.
                    throw new MathInternalError();
            }
        }
        // Update from [x0, x1] to [x0, x].
        x1 = x;
        f1 = fx;
        // If the function value of the last approximation is too small,
        // given the function value accuracy, then we can't get closer to
        // the root than we already are.
        if (FastMath.abs(f1) <= ftol) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    if (inverted) {
                        return x1;
                    }
                    break;
                case RIGHT_SIDE:
                    if (!inverted) {
                        return x1;
                    }
                    break;
                case BELOW_SIDE:
                    if (f1 <= 0) {
                        return x1;
                    }
                    break;
                case ABOVE_SIDE:
                    if (f1 >= 0) {
                        return x1;
                    }
                    break;
                default:
                    throw new MathInternalError();
            }
        }
        // If the current interval is within the given accuracies, we
        // are satisfied with the current approximation.
        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    return inverted ? x1 : x0;
                case RIGHT_SIDE:
                    return inverted ? x0 : x1;
                case BELOW_SIDE:
                    return (f1 <= 0) ? x1 : x0;
                case ABOVE_SIDE:
                    return (f1 >= 0) ? x1 : x0;
                default:
                    throw new MathInternalError();
            }
        }
    }
}","public void test18242() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-208.0), (-208.0));
    Logit logit0 = new Logit((-208.0), (-2.391465199580939E-10));
    UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
    regulaFalsiSolver0.setup(282, univariateRealFunction0, (-208.0), (-2.391465199580939E-10), (-208.0));
    // Undeclared exception!
    try {
        regulaFalsiSolver0.doSolve();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // function values at endpoints do not have different signs, endpoints: [-208, -0], values: [\u221E, \u221E]
        //
        verifyException(""org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver(final double absoluteAccuracy) {
    super(absoluteAccuracy, Method.PEGASUS);
}","public void test19243() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver.
 *
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test19244() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    assertEquals(2725.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test19245() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test19246() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test19247() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test19248() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test19249() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test19251() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(14, (UnivariateRealFunction) sinc0, (-1.5707963267948966), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getMin() {
    return searchMin;
}","public void test19252() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(14, (UnivariateRealFunction) sinc0, (-1.5707963267948966), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals((-1.5707963267948966), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test19253() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(14, (UnivariateRealFunction) sinc0, (-1.5707963267948966), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(2725.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test19254() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(14, (UnivariateRealFunction) sinc0, (-1.5707963267948966), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test19255() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(14, (UnivariateRealFunction) sinc0, (-1.5707963267948966), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test19256() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(14, (UnivariateRealFunction) sinc0, (-1.5707963267948966), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test19257() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(14, (UnivariateRealFunction) sinc0, (-1.5707963267948966), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.8892378844107, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test20266() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, (double) 5, (double) 5, allowedSolution0);
    assertEquals(1.0E-6, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test20267() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, (double) 5, (double) 5, allowedSolution0);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test20268() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, (double) 5, (double) 5, allowedSolution0);
    assertEquals(5.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test20269() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, (double) 5, (double) 5, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test20270() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, (double) 5, (double) 5, allowedSolution0);
    assertEquals(2725.29567932, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test20271() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, (double) 5, (double) 5, allowedSolution0);
    assertEquals(5.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test20272() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, (double) 5, (double) 5, allowedSolution0);
    assertEquals(4.195388262479115, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test21281() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(10, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(1.0E-6, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test21282() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(10, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getMax() {
    return searchMax;
}","public void test21283() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(10, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test21284() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(10, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test21285() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(10, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(2725.29567932, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test21286() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(10, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test21287() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(2725.29567932, (-360.07737924462));
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(10, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9025767054369, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver(final double absoluteAccuracy) {
    super(absoluteAccuracy, Method.PEGASUS);
}","public void test22288() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver.
 *
 * @param absoluteAccuracy absolute accuracy
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test22289() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test22290() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test22291() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test22292() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test22293() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    assertEquals(6.849234071909364E-14, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test22294() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test22296() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test22297() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    assertEquals(0.5, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getMin() {
    return searchMin;
}","public void test22298() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    assertEquals((-732.0), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test22299() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test22300() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    assertEquals(3128.7, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test22301() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    assertEquals(6.849234071909364E-14, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test22302() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    assertEquals((-1.9679668874187844E-14), double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"protected final double doSolve() {
    // Get initial solution
    double x0 = getMin();
    double x1 = getMax();
    double f0 = computeObjectiveValue(x0);
    double f1 = computeObjectiveValue(x1);
    // If one of the bounds is the exact root, return it. Since these are
    // not under-approximations or over-approximations, we can return them
    // regardless of the allowed solutions.
    if (f0 == 0.0) {
        return x0;
    }
    if (f1 == 0.0) {
        return x1;
    }
    // Verify bracketing of initial solution.
    verifyBracketing(x0, x1);
    // Get accuracies.
    final double ftol = getFunctionValueAccuracy();
    final double atol = getAbsoluteAccuracy();
    final double rtol = getRelativeAccuracy();
    // Keep track of inverted intervals, meaning that the left bound is
    // larger than the right bound.
    boolean inverted = false;
    // Keep finding better approximations.
    while (true) {
        // Calculate the next approximation.
        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
        final double fx = computeObjectiveValue(x);
        // If the new approximation is the exact root, return it. Since
        // this is not an under-approximation or an over-approximation,
        // we can return it regardless of the allowed solutions.
        if (fx == 0.0) {
            return x;
        }
        // Update the bounds with the new approximation.
        if (f1 * fx < 0) {
            // The value of x1 has switched to the other bound, thus inverting
            // the interval.
            x0 = x1;
            f0 = f1;
            inverted = !inverted;
        } else {
            switch(method) {
                case ILLINOIS:
                    f0 *= 0.5;
                    break;
                case PEGASUS:
                    f0 *= f1 / (f1 + fx);
                    break;
                case REGULA_FALSI:
                    // Nothing.
                    if (x == x1) {
                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                        f0 = computeObjectiveValue(x0);
                    }
                    break;
                default:
                    // Should never happen.
                    throw new MathInternalError();
            }
        }
        // Update from [x0, x1] to [x0, x].
        x1 = x;
        f1 = fx;
        // If the function value of the last approximation is too small,
        // given the function value accuracy, then we can't get closer to
        // the root than we already are.
        if (FastMath.abs(f1) <= ftol) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    if (inverted) {
                        return x1;
                    }
                    break;
                case RIGHT_SIDE:
                    if (!inverted) {
                        return x1;
                    }
                    break;
                case BELOW_SIDE:
                    if (f1 <= 0) {
                        return x1;
                    }
                    break;
                case ABOVE_SIDE:
                    if (f1 >= 0) {
                        return x1;
                    }
                    break;
                default:
                    throw new MathInternalError();
            }
        }
        // If the current interval is within the given accuracies, we
        // are satisfied with the current approximation.
        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
            switch(allowed) {
                case ANY_SIDE:
                    return x1;
                case LEFT_SIDE:
                    return inverted ? x1 : x0;
                case RIGHT_SIDE:
                    return inverted ? x0 : x1;
                case BELOW_SIDE:
                    return (f1 <= 0) ? x1 : x0;
                case ABOVE_SIDE:
                    return (f1 >= 0) ? x1 : x0;
                default:
                    throw new MathInternalError();
            }
        }
    }
}","public void test22303() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(double1, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test22304() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test22305() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(0.5, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getMin() {
    return searchMin;
}","public void test22306() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals((-732.0), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test22307() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test22308() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(3128.7, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test22309() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(6.849234071909364E-14);
    Cbrt cbrt0 = new Cbrt();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(283, (UnivariateRealFunction) cbrt0, (-732.0), 0.5, 3128.7, allowedSolution0);
    double double1 = pegasusSolver0.doSolve();
    assertEquals(6.849234071909364E-14, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test23319() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(2725.29567932, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test23320() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getMin() {
    return searchMin;
}","public void test23321() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals((-1.9567994573865304), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test23322() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test23323() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(3128.7, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test23324() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test23325() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test24334() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    Sin sin0 = new Sin();
    double double0 = regulaFalsiSolver0.solve(43, (UnivariateRealFunction) sin0, (-2248.6), 3113.5035287079068);
    assertEquals(432.4517643539534, regulaFalsiSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test24335() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    Sin sin0 = new Sin();
    double double0 = regulaFalsiSolver0.solve(43, (UnivariateRealFunction) sin0, (-2248.6), 3113.5035287079068);
    assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test24336() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    Sin sin0 = new Sin();
    double double0 = regulaFalsiSolver0.solve(43, (UnivariateRealFunction) sin0, (-2248.6), 3113.5035287079068);
    assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test24337() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    Sin sin0 = new Sin();
    double double0 = regulaFalsiSolver0.solve(43, (UnivariateRealFunction) sin0, (-2248.6), 3113.5035287079068);
    assertEquals((-2248.6), regulaFalsiSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test24338() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    Sin sin0 = new Sin();
    double double0 = regulaFalsiSolver0.solve(43, (UnivariateRealFunction) sin0, (-2248.6), 3113.5035287079068);
    assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test24339() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    Sin sin0 = new Sin();
    double double0 = regulaFalsiSolver0.solve(43, (UnivariateRealFunction) sin0, (-2248.6), 3113.5035287079068);
    assertEquals(3113.5035287079068, regulaFalsiSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double solve(int maxEval, FUNC f, double min, double max) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min));
}","public void test24340() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
    Sin sin0 = new Sin();
    double double0 = regulaFalsiSolver0.solve(43, (UnivariateRealFunction) sin0, (-2248.6), 3113.5035287079068);
    assertEquals(3100.751949093126, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test25349() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 2725.29567932, 2725.29567932, allowedSolution0);
    assertEquals(2725.29567932, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test25350() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 2725.29567932, 2725.29567932, allowedSolution0);
    assertEquals(3128.7, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test25351() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 2725.29567932, 2725.29567932, allowedSolution0);
    assertEquals(2725.29567932, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test25352() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 2725.29567932, 2725.29567932, allowedSolution0);
    assertEquals((-1.9567994573865304), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test25353() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 2725.29567932, 2725.29567932, allowedSolution0);
    assertEquals(2725.29567932, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test25354() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 2725.29567932, 2725.29567932, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test25355() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 2725.29567932, 2725.29567932, allowedSolution0);
    assertEquals(2723.18494960874, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test26364() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1207.0657488), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(2725.29567932, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test26365() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1207.0657488), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test26366() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1207.0657488), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(3128.7, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test26367() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1207.0657488), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals((-1207.0657488), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test26368() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1207.0657488), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test26369() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1207.0657488), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test26370() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1207.0657488), 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test27379() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(6, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test27380() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(6, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(3128.7, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test27381() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(6, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test27382() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(6, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(2725.29567932, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test27383() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(6, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(1.0E-6, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test27384() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(6, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(951.9258407496, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test27385() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), 2725.29567932, 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = pegasusSolver0.solve(6, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
    assertEquals(1.0E-6, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public PegasusSolver(final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy) {
    super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);
}","public void test28386() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    assertNotNull(pegasusSolver0);
}","/**
 * Construct a solver.
 *
 * @param relativeAccuracy relative accuracy
 * @param absoluteAccuracy absolute accuracy
 * @param functionValueAccuracy Maximum function value error.
 */"
"public double getMax() {
    return searchMax;
}","public void test28387() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test28388() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test28389() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    assertEquals(1.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test28390() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    assertEquals((-360.07737924462), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test28391() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test28392() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test28394() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 952.2252843414894, 952.2252843414894, allowedSolution0);
    assertEquals(1.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test28395() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 952.2252843414894, 952.2252843414894, allowedSolution0);
    assertEquals(952.2252843414894, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test28396() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 952.2252843414894, 952.2252843414894, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test28397() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 952.2252843414894, 952.2252843414894, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test28398() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 952.2252843414894, 952.2252843414894, allowedSolution0);
    assertEquals((-1.9567994573865304), pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double getMax() {
    return searchMax;
}","public void test28399() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 952.2252843414894, 952.2252843414894, allowedSolution0);
    assertEquals(952.2252843414894, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test28400() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 1.0);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, (-1.9567994573865304), 952.2252843414894, 952.2252843414894, allowedSolution0);
    assertEquals(951.9025808688075, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getFunctionValueAccuracy() {
    return functionValueAccuracy;
}","public void test29409() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 3128.7, 3128.7, allowedSolution0);
    assertEquals(3128.7, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getRelativeAccuracy() {
    return relativeAccuracy;
}","public void test29410() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 3128.7, 3128.7, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getRelativeAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMax() {
    return searchMax;
}","public void test29411() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 3128.7, 3128.7, allowedSolution0);
    assertEquals(3128.7, pegasusSolver0.getMax(), 0.01);
}","/**
 * @return the higher end of the search interval.
 */"
"public double getStartValue() {
    return searchStart;
}","public void test29412() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 3128.7, 3128.7, allowedSolution0);
    assertEquals(3128.7, pegasusSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double getAbsoluteAccuracy() {
    return absoluteAccuracy;
}","public void test29413() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 3128.7, 3128.7, allowedSolution0);
    assertEquals((-360.07737924462), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMin() {
    return searchMin;
}","public void test29414() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 3128.7, 3128.7, allowedSolution0);
    assertEquals(1.0E-6, pegasusSolver0.getMin(), 0.01);
}","/**
 * @return the lower end of the search interval.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test29415() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver((-360.07737924462), (-360.07737924462), 3128.7);
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
    double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 3128.7, 3128.7, allowedSolution0);
    assertEquals(3128.3795084980015, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test30416() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    Identity identity0 = new Identity();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = illinoisSolver0.solve(2432, (UnivariateRealFunction) identity0, (-1.5707963267948966), 1.4153871807274658, allowedSolution0);
    assertEquals((-0.07770457303371536), illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
}","public void test30417() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.5707963267948966), (-1.5707963267948966));
    Identity identity0 = new Identity();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = illinoisSolver0.solve(2432, (UnivariateRealFunction) identity0, (-1.5707963267948966), 1.4153871807274658, allowedSolution0);
    assertEquals((-2.220446049250313E-16), double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue) {
    return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
}","public void test31418() throws Throwable {
    RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2914.8166312), (-585.8036717639643));
    Cos cos0 = new Cos();
    // Undeclared exception!
    try {
        regulaFalsiSolver0.solve(2753, (UnivariateRealFunction) cos0, (-2914.8166312), 2725.29567932, 2725.0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: maximal count (2,753) exceeded: evaluations
        //
        verifyException(""org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test32419() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver(916.737, 916.737);
    Abs abs0 = new Abs();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = illinoisSolver0.solve(750, (UnivariateRealFunction) abs0, 916.737, 0.0, allowedSolution0);
    assertEquals(458.3685, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
}","public void test32420() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver(916.737, 916.737);
    Abs abs0 = new Abs();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = illinoisSolver0.solve(750, (UnivariateRealFunction) abs0, 916.737, 0.0, allowedSolution0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getStartValue() {
    return searchStart;
}","public void test33421() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver(916.737, 916.737);
    Abs abs0 = new Abs();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = illinoisSolver0.solve(750, (UnivariateRealFunction) abs0, 0.0, 0.0, 916.737, allowedSolution0);
    assertEquals(916.737, illinoisSolver0.getStartValue(), 0.01);
}","/**
 * @return the initial guess.
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test33422() throws Throwable {
    IllinoisSolver illinoisSolver0 = new IllinoisSolver(916.737, 916.737);
    Abs abs0 = new Abs();
    AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
    double double0 = illinoisSolver0.solve(750, (UnivariateRealFunction) abs0, 0.0, 0.0, 916.737, allowedSolution0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {
    return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
}","public void test34423() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 0.0, 0.0);
    AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
    // Undeclared exception!
    try {
        pegasusSolver0.solve(0, (UnivariateRealFunction) null, (double) 0, (-1645.0), allowedSolution0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) {
    this.allowed = allowedSolution;
    return super.solve(maxEval, f, min, max, startValue);
}","public void test35424() throws Throwable {
    PegasusSolver pegasusSolver0 = new PegasusSolver();
    Sinc sinc0 = new Sinc();
    AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
    pegasusSolver0.solve(5, (UnivariateRealFunction) sinc0, 1.0E-6, 951.9258407496, 951.9258407496, allowedSolution0);
}","/**
 * {@inheritDoc}
 */"
