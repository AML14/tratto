project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertNotNull(dormandPrince54Integrator0);
}",0,assertNotNull(dormandPrince54Integrator0)
project,0,test003,"public void test003() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test004,"public void test004() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test005,"public void test005() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test006,"public void test006() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test007,"public void test007() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test008,"public void test008() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test009,"public void test009() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0010,"public void test0010() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0012,"public void test0012() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(1, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test0013,"public void test0013() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0014,"public void test0014() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertArrayEquals(new double[] { 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test0016,"public void test0016() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test0017,"public void test0017() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test0018,"public void test0018() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0019,"public void test0019() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0020,"public void test0020() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0021,"public void test0021() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0023,"public void test0023() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,
project,0,test0024,"public void test0024() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0025,"public void test0025() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test0026,"public void test0026() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0027,"public void test0027() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test0030,"public void test0030() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test0031,"public void test0031() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test0032,"public void test0032() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0034,"public void test0034() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0035,"public void test0035() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0036,"public void test0036() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0037,"public void test0037() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,
project,0,test0038,"public void test0038() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0039,"public void test0039() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,
project,0,test0040,"public void test0040() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0141,"public void test0141() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertNotNull(dormandPrince54Integrator0);
}",1,
project,0,test0142,"public void test0142() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test0143,"public void test0143() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getEvaluations())"
project,0,test0144,"public void test0144() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0145,"public void test0145() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test0146,"public void test0146() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0147,"public void test0147() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0148,"public void test0148() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0149,"public void test0149() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0150,"public void test0150() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0151,"public void test0151() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0152,"public void test0152() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test0153,"public void test0153() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test0154,"public void test0154() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(1, dormandPrince54Integrator0.getEvaluations())"
project,0,test0155,"public void test0155() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0156,"public void test0156() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals((-1151.70847888), dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0157,"public void test0157() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test0158,"public void test0158() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0159,"public void test0159() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0160,"public void test0160() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0161,"public void test0161() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0162,"public void test0162() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0163,"public void test0163() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test0164,"public void test0164() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals((-1151.70847888), double0, 0.01);
}",0,
project,0,test0165,"public void test0165() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test0166,"public void test0166() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getEvaluations())"
project,0,test0167,"public void test0167() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0168,"public void test0168() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals((-1151.70847888), dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0169,"public void test0169() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test0170,"public void test0170() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0171,"public void test0171() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0172,"public void test0172() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0173,"public void test0173() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0174,"public void test0174() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0175,"public void test0175() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test0276,"public void test0276() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertNotNull(highamHall54Integrator0);
}",0,
project,0,test0279,"public void test0279() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals((-547.75788), highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0280,"public void test0280() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(63.45092921305408, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0281,"public void test0281() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0282,"public void test0282() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals((-7.35), highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0283,"public void test0283() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,"assertEquals(1, highamHall54Integrator0.getEvaluations())"
project,0,test0284,"public void test0284() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,
project,0,test0285,"public void test0285() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test0286,"public void test0286() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test0287,"public void test0287() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test0288,"public void test0288() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test0289,"public void test0289() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test0290,"public void test0290() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(5, int0);
}",0,"assertEquals(0, int0)"
project,0,test0293,"public void test0293() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals((-547.75788), highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test0294,"public void test0294() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(63.45092921305408, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test0295,"public void test0295() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test0296,"public void test0296() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals((-7.35), highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test0297,"public void test0297() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getEvaluations())"
project,0,test0298,"public void test0298() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test0299,"public void test0299() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test02100,"public void test02100() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,"assertEquals(0, highamHall54Integrator0.getOrder())"
project,0,test02101,"public void test02101() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test02102,"public void test02102() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test02103,"public void test02103() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test03104,"public void test03104() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertNotNull(highamHall54Integrator0);
}",1,
project,0,test03107,"public void test03107() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test03108,"public void test03108() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals((-3004.8064), highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test03109,"public void test03109() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test03110,"public void test03110() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test03111,"public void test03111() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getEvaluations())"
project,0,test03112,"public void test03112() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test03113,"public void test03113() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals((-3004.8064), highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test03114,"public void test03114() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test03115,"public void test03115() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test03116,"public void test03116() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(3004.8064, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test03117,"public void test03117() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test03118,"public void test03118() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test03120,"public void test03120() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test03121,"public void test03121() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals((-3004.8064), highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test03122,"public void test03122() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test03123,"public void test03123() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test03124,"public void test03124() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getEvaluations())"
project,0,test03125,"public void test03125() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test03126,"public void test03126() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(0.0, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test03127,"public void test03127() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals((-3004.8064), highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test03128,"public void test03128() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test03129,"public void test03129() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(3004.8064, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test03130,"public void test03130() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test03131,"public void test03131() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test03134,"public void test03134() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test03135,"public void test03135() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals((-3004.8064), highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test03136,"public void test03136() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test03137,"public void test03137() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test03138,"public void test03138() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getEvaluations())"
project,0,test03139,"public void test03139() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test03140,"public void test03140() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.0, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test03141,"public void test03141() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals((-3004.8064), highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test03142,"public void test03142() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test03143,"public void test03143() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(3004.8064, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test03144,"public void test03144() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test04145,"public void test04145() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertNotNull(highamHall54Integrator0);
}",1,
project,0,test04146,"public void test04146() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test04147,"public void test04147() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test04148,"public void test04148() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test04149,"public void test04149() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test04150,"public void test04150() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(1643.914493, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test04151,"public void test04151() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test04152,"public void test04152() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(1643.914493, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test04153,"public void test04153() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(1643.914493, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test04154,"public void test04154() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test04155,"public void test04155() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getEvaluations())"
project,0,test04156,"public void test04156() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test04157,"public void test04157() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test04158,"public void test04158() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test04159,"public void test04159() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals((-3.0689499459498917), highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test04160,"public void test04160() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test04161,"public void test04161() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(1643.914493, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test04162,"public void test04162() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test04163,"public void test04163() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(1643.914493, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test04164,"public void test04164() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(1643.914493, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test04165,"public void test04165() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test04166,"public void test04166() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getEvaluations())"
project,0,test04167,"public void test04167() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test04168,"public void test04168() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals((-3.0689499459498917), double0, 0.01);
}",0,
project,0,test04169,"public void test04169() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test04170,"public void test04170() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test04171,"public void test04171() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals((-3.0689499459498917), highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test04172,"public void test04172() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test04173,"public void test04173() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(1643.914493, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test04174,"public void test04174() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test04175,"public void test04175() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(1643.914493, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test04176,"public void test04176() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(1643.914493, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test04177,"public void test04177() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test04178,"public void test04178() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getEvaluations())"
project,0,test04179,"public void test04179() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test05192,"public void test05192() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getEvaluations())"
project,0,test05193,"public void test05193() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test05194,"public void test05194() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals((-2629.544768), dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test05195,"public void test05195() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test05196,"public void test05196() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test05197,"public void test05197() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test05198,"public void test05198() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test05199,"public void test05199() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test05200,"public void test05200() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test05201,"public void test05201() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test05202,"public void test05202() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test05203,"public void test05203() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals((-2629.544768), double0, 0.01);
}",0,
project,0,test05204,"public void test05204() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getEvaluations())"
project,0,test05205,"public void test05205() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test05206,"public void test05206() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals((-2629.544768), dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test05207,"public void test05207() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test05208,"public void test05208() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test05209,"public void test05209() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test05210,"public void test05210() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test05211,"public void test05211() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test05212,"public void test05212() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test05213,"public void test05213() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test05214,"public void test05214() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test06215,"public void test06215() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test06216,"public void test06216() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(4, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test06217,"public void test06217() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertNotNull(highamHall54Integrator0);
}",0,assertNotNull(highamHall54Integrator0)
project,0,test06218,"public void test06218() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(5.0, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test06219,"public void test06219() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test06220,"public void test06220() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test06221,"public void test06221() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test06222,"public void test06222() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test06223,"public void test06223() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test06224,"public void test06224() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test06225,"public void test06225() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test06226,"public void test06226() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test06227,"public void test06227() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,
project,0,test06228,"public void test06228() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test06229,"public void test06229() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    double[][] doubleArray0 = new double[3][7];
    try {
        highamHall54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0[2], 2.0, doubleArray0[1]);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // dimensions mismatch: ODE problem has dimension 4, initial state vector has dimension 7
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}",1,
project,0,test07230,"public void test07230() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertNotNull(dormandPrince54Integrator0);
}",1,
project,0,test07231,"public void test07231() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test07232,"public void test07232() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(1, dormandPrince54Integrator0.getEvaluations())"
project,0,test07233,"public void test07233() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test07234,"public void test07234() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test07235,"public void test07235() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test07236,"public void test07236() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(305.07576780617, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test07237,"public void test07237() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test07238,"public void test07238() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(305.07576780617, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test07239,"public void test07239() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test07240,"public void test07240() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test07241,"public void test07241() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(305.07576780617, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test07242,"public void test07242() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    double[] doubleArray0 = new double[7];
    // Undeclared exception!
    try {
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-331.364376440207), doubleArray0, 0.0, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}",1,
project,0,test08257,"public void test08257() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertArrayEquals(new double[] { 0.0 }, doubleArray0, 0.01);
}",0,
project,0,test08259,"public void test08259() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test08260,"public void test08260() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test08261,"public void test08261() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test08262,"public void test08262() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(1, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test08263,"public void test08263() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test08264,"public void test08264() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,
project,0,test08265,"public void test08265() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test08266,"public void test08266() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(0.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test08267,"public void test08267() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test08268,"public void test08268() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test08269,"public void test08269() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test08270,"public void test08270() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test08273,"public void test08273() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test08274,"public void test08274() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test08275,"public void test08275() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test08276,"public void test08276() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test08277,"public void test08277() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test08278,"public void test08278() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(1, dormandPrince54Integrator0.getEvaluations())"
project,0,test08279,"public void test08279() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test08280,"public void test08280() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test08281,"public void test08281() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test08282,"public void test08282() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test08283,"public void test08283() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test09286,"public void test09286() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertNotNull(highamHall54Integrator0);
}",0,assertNotNull(highamHall54Integrator0)
project,0,test09287,"public void test09287() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test09288,"public void test09288() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test09289,"public void test09289() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, highamHall54Integrator0.getMaxEvaluations())"
project,0,test09290,"public void test09290() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test09291,"public void test09291() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}",0,
project,0,test09292,"public void test09292() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}",0,assertNotNull(highamHall54Integrator0.getName())
project,0,test09293,"public void test09293() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test09294,"public void test09294() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test09295,"public void test09295() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(5.0, highamHall54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test09296,"public void test09296() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test09297,"public void test09297() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(5, highamHall54Integrator0.getOrder());
}",0,
project,0,test10298,"public void test10298() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertNotNull(dormandPrince54Integrator0);
}",1,
project,0,test10299,"public void test10299() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test10300,"public void test10300() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test10301,"public void test10301() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getEvaluations())"
project,0,test10302,"public void test10302() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test10303,"public void test10303() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test10304,"public void test10304() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test10305,"public void test10305() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(958.3823, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test10306,"public void test10306() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test10307,"public void test10307() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test10308,"public void test10308() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test10309,"public void test10309() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test10310,"public void test10310() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}",0,assertNotNull(firstOrderConverter0)
project,0,test10311,"public void test10311() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(4, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test10312,"public void test10312() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    assertNotNull(stepNormalizer0);
}",0,assertNotNull(stepNormalizer0)
project,0,test10313,"public void test10313() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    assertTrue(stepNormalizer0.requiresDenseOutput());
}",0,assertTrue(stepNormalizer0.requiresDenseOutput())
project,0,test10314,"public void test10314() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test10315,"public void test10315() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test10316,"public void test10316() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getEvaluations())"
project,0,test10317,"public void test10317() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test10318,"public void test10318() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test10319,"public void test10319() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test10320,"public void test10320() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(958.3823, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test10321,"public void test10321() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test10322,"public void test10322() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test10323,"public void test10323() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test10324,"public void test10324() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test10325,"public void test10325() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertTrue(stepNormalizer0.requiresDenseOutput());
}",0,assertTrue(stepNormalizer0.requiresDenseOutput())
project,0,test10326,"public void test10326() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(3831.9243024, double0, 0.01);
}",1,
project,0,test10329,"public void test10329() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}",0,
project,0,test10330,"public void test10330() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMinStep(), 0.01);
}",0,
project,0,test10331,"public void test10331() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(32, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getEvaluations())"
project,0,test10332,"public void test10332() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}",0,
project,0,test10333,"public void test10333() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test10334,"public void test10334() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test10335,"public void test10335() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(958.3823, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}",0,
project,0,test10336,"public void test10336() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMaxStep(), 0.01);
}",0,
project,0,test10337,"public void test10337() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}",0,
project,0,test10338,"public void test10338() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}",0,assertNotNull(dormandPrince54Integrator0.getName())
project,0,test10339,"public void test10339() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations())"
project,0,test10340,"public void test10340() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(4, firstOrderConverter0.getDimension());
}",0,"assertEquals(0, firstOrderConverter0.getDimension())"
project,0,test11341,"public void test11341() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    double[] doubleArray1 = new double[4];
    // Undeclared exception!
    highamHall54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray1, 2.0, doubleArray0);
}",1,
project,0,test12342,"public void test12342() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), (-11.87528245965743));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0, (-11.87528245965743), doubleArray0);
    assertEquals(20, dormandPrince54Integrator0.getEvaluations());
}",0,"assertEquals(0, dormandPrince54Integrator0.getEvaluations())"
project,0,test12343,"public void test12343() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), (-11.87528245965743));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0, (-11.87528245965743), doubleArray0);
    assertEquals((-11.87528245965743), double0, 0.01);
}",1,
project,0,test13344,"public void test13344() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getMaxGrowth();
    assertEquals(10.0, double0, 0.01);
}",0,
project,0,test13345,"public void test13345() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getMaxGrowth();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test13346,"public void test13346() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getMaxGrowth();
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test14347,"public void test14347() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.2, double0, 0.01);
}",0,
project,0,test14348,"public void test14348() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}",0,
project,0,test14349,"public void test14349() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test15350,"public void test15350() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getSafety();
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}",0,
project,0,test15351,"public void test15351() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getSafety();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}",0,
project,0,test15352,"public void test15352() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getSafety();
    assertEquals(0.9, double0, 0.01);
}",0,
project,0,test16353,"public void test16353() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.9, (-1.0), doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    // Undeclared exception!
    dormandPrince853Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 5, doubleArray0);
}",1,
