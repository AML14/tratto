focal_method,test_prefix,docstring
"public DormandPrince54Integrator(final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) {
    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince54StepInterpolator(), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
}","public void test000() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertNotNull(dormandPrince54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Dormand-Prince integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param vecAbsoluteTolerance allowed absolute error
 * @param vecRelativeTolerance allowed relative error
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test003() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test004() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test005() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test006() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getSafety() {
    return safety;
}","public void test007() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test008() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test009() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test0010() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test0011() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test0012() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test0013() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public void setSafety(final double safety) {
    this.safety = safety;
}","public void test0014() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertArrayEquals(new double[] { 0.0 }, doubleArray0, 0.01);
}","/**
 * Set the safety factor for stepsize control.
 * @param safety safety factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test0016() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test0017() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test0018() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test0019() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test0020() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test0021() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getSafety() {
    return safety;
}","public void test0022() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test0023() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test0024() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test0025() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test0026() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test0027() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test0030() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test0031() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test0032() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test0033() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test0034() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test0035() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getSafety() {
    return safety;
}","public void test0036() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test0037() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test0038() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test0039() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test0040() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setSafety(0.0);
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public DormandPrince54Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince54StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
}","public void test0141() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertNotNull(dormandPrince54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Dormand-Prince integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param scalAbsoluteTolerance allowed absolute error
 * @param scalRelativeTolerance allowed relative error
 */"
"public String getName() {
    return name;
}","public void test0142() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test0143() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test0144() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test0145() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test0146() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test0147() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test0148() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test0149() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test0150() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test0151() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test0152() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test0153() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test0154() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test0155() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getSafety() {
    return safety;
}","public void test0156() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals((-1151.70847888), dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test0157() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test0158() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test0159() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test0160() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test0161() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test0162() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test0163() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test0164() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals((-1151.70847888), double0, 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public String getName() {
    return name;
}","public void test0165() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test0166() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test0167() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getSafety() {
    return safety;
}","public void test0168() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals((-1151.70847888), dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test0169() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test0170() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test0171() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test0172() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test0173() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test0174() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test0175() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setSafety((-1151.70847888));
    double double0 = dormandPrince54Integrator0.getSafety();
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public HighamHall54Integrator(final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) {
    super(METHOD_NAME, false, STATIC_C, STATIC_A, STATIC_B, new HighamHall54StepInterpolator(), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
}","public void test0276() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertNotNull(highamHall54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Higham and Hall integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param vecAbsoluteTolerance allowed absolute error
 * @param vecRelativeTolerance allowed relative error
 */"
"public double getMinStep() {
    return minStep;
}","public void test0279() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals((-547.75788), highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test0280() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(63.45092921305408, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test0281() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test0282() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals((-7.35), highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test0283() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test0284() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test0285() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test0286() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test0287() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getSafety() {
    return safety;
}","public void test0288() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test0289() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test0290() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(5, int0);
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test0293() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals((-547.75788), highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test0294() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(63.45092921305408, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test0295() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test0296() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals((-7.35), highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test0297() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test0298() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test0299() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test02100() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test02101() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getSafety() {
    return safety;
}","public void test02102() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test02103() throws Throwable {
    double[] doubleArray0 = new double[1];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    int int0 = highamHall54Integrator0.getOrder();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public HighamHall54Integrator(final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) {
    super(METHOD_NAME, false, STATIC_C, STATIC_A, STATIC_B, new HighamHall54StepInterpolator(), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
}","public void test03104() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertNotNull(highamHall54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Higham and Hall integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param vecAbsoluteTolerance allowed absolute error
 * @param vecRelativeTolerance allowed relative error
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test03107() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinStep() {
    return minStep;
}","public void test03108() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals((-3004.8064), highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public String getName() {
    return name;
}","public void test03109() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test03110() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test03111() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test03112() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test03113() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals((-3004.8064), highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test03114() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getSafety() {
    return safety;
}","public void test03115() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test03116() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(3004.8064, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test03117() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public void setMinReduction(final double minReduction) {
    this.minReduction = minReduction;
}","public void test03118() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}","/**
 * Set the minimal reduction factor for stepsize control.
 * @param minReduction minimal reduction factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test03120() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinStep() {
    return minStep;
}","public void test03121() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals((-3004.8064), highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public String getName() {
    return name;
}","public void test03122() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test03123() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test03124() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test03125() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test03126() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(0.0, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test03127() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals((-3004.8064), highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getSafety() {
    return safety;
}","public void test03128() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test03129() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(3004.8064, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test03130() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test03131() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test03134() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinStep() {
    return minStep;
}","public void test03135() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals((-3004.8064), highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public String getName() {
    return name;
}","public void test03136() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test03137() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test03138() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test03139() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test03140() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.0, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test03141() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals((-3004.8064), highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getSafety() {
    return safety;
}","public void test03142() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test03143() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(3004.8064, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test03144() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    highamHall54Integrator0.setMinReduction(0.0);
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public HighamHall54Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
    super(METHOD_NAME, false, STATIC_C, STATIC_A, STATIC_B, new HighamHall54StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
}","public void test04145() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertNotNull(highamHall54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Higham and Hall integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param scalAbsoluteTolerance allowed absolute error
 * @param scalRelativeTolerance allowed relative error
 */"
"public double getSafety() {
    return safety;
}","public void test04146() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test04147() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test04148() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test04149() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test04150() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(1643.914493, highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test04151() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test04152() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(1643.914493, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test04153() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(1643.914493, highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public String getName() {
    return name;
}","public void test04154() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test04155() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test04156() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test04157() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test04158() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test04159() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals((-3.0689499459498917), highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test04160() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test04161() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(1643.914493, highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test04162() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test04163() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(1643.914493, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test04164() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(1643.914493, highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public String getName() {
    return name;
}","public void test04165() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test04166() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test04167() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test04168() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals((-3.0689499459498917), double0, 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getSafety() {
    return safety;
}","public void test04169() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test04170() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test04171() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals((-3.0689499459498917), highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test04172() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test04173() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(1643.914493, highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test04174() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test04175() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(1643.914493, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test04176() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(1643.914493, highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public String getName() {
    return name;
}","public void test04177() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test04178() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test04179() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    highamHall54Integrator0.setMinReduction((-3.0689499459498917));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test05192() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test05193() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test05194() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals((-2629.544768), dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test05195() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getSafety() {
    return safety;
}","public void test05196() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test05197() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test05198() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test05199() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test05200() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test05201() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test05202() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test05203() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals((-2629.544768), double0, 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test05204() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test05205() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test05206() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals((-2629.544768), dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test05207() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getSafety() {
    return safety;
}","public void test05208() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test05209() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(2333.907148752371, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test05210() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(152.77130452910228, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test05211() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test05212() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test05213() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(10.0, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test05214() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public FirstOrderConverter(final SecondOrderDifferentialEquations equations) {
    this.equations = equations;
    dimension = equations.getDimension();
    z = new double[dimension];
    zDot = new double[dimension];
    zDDot = new double[dimension];
}","public void test06215() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}","/**
 * Simple constructor.
 * Build a converter around a second order equations set.
 * @param equations second order equations set to convert
 */"
"public int getDimension() {
    return 2 * dimension;
}","public void test06216() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(4, firstOrderConverter0.getDimension());
}","/**
 * Get the dimension of the problem.
 * <p>The dimension of the first order problem is twice the
 * dimension of the underlying second order problem.</p>
 * @return dimension of the problem
 */"
"public HighamHall54Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
    super(METHOD_NAME, false, STATIC_C, STATIC_A, STATIC_B, new HighamHall54StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
}","public void test06217() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertNotNull(highamHall54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Higham and Hall integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param scalAbsoluteTolerance allowed absolute error
 * @param scalRelativeTolerance allowed relative error
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test06218() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(5.0, highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public String getName() {
    return name;
}","public void test06219() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test06220() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test06221() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test06222() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test06223() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getSafety() {
    return safety;
}","public void test06224() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test06225() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test06226() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test06227() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test06228() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {
    sanityChecks(equations, t0, y0, t, y);
    setEquations(equations);
    resetEvaluations();
    final boolean forward = t > t0;
    // create some internal working arrays
    final int stages = c.length + 1;
    if (y != y0) {
        System.arraycopy(y0, 0, y, 0, y0.length);
    }
    final double[][] yDotK = new double[stages][y0.length];
    final double[] yTmp = new double[y0.length];
    // set up an interpolator sharing the integrator arrays
    AbstractStepInterpolator interpolator;
    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {
        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
        rki.reinitialize(this, yTmp, yDotK, forward);
        interpolator = rki;
    } else {
        interpolator = new DummyStepInterpolator(yTmp, forward);
    }
    interpolator.storeTime(t0);
    // set up integration control objects
    stepStart = t0;
    double hNew = 0;
    boolean firstTime = true;
    for (StepHandler handler : stepHandlers) {
        handler.reset();
    }
    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
    boolean lastStep = false;
    // main integration loop
    while (!lastStep) {
        interpolator.shift();
        double error = 0;
        for (boolean loop = true; loop; ) {
            if (firstTime || !fsal) {
                // first stage
                computeDerivatives(stepStart, y, yDotK[0]);
            }
            if (firstTime) {
                final double[] scale;
                if (vecAbsoluteTolerance == null) {
                    scale = new double[y0.length];
                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                } else {
                    scale = vecAbsoluteTolerance;
                }
                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);
                firstTime = false;
            }
            stepSize = hNew;
            // next stages
            for (int k = 1; k < stages; ++k) {
                for (int j = 0; j < y0.length; ++j) {
                    double sum = a[k - 1][0] * yDotK[0][j];
                    for (int l = 1; l < k; ++l) {
                        sum += a[k - 1][l] * yDotK[l][j];
                    }
                    yTmp[j] = y[j] + stepSize * sum;
                }
                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);
            }
            // estimate the state at the end of the step
            for (int j = 0; j < y0.length; ++j) {
                double sum = b[0] * yDotK[0][j];
                for (int l = 1; l < stages; ++l) {
                    sum += b[l] * yDotK[l][j];
                }
                yTmp[j] = y[j] + stepSize * sum;
            }
            // estimate the error at the end of the step
            error = estimateError(yDotK, y, yTmp, stepSize);
            if (error <= 1.0) {
                // discrete events handling
                interpolator.storeTime(stepStart + stepSize);
                if (manager.evaluateStep(interpolator)) {
                    final double dt = manager.getEventTime() - stepStart;
                    if (Math.abs(dt) <= Math.ulp(stepStart)) {
                        // rejecting the step would lead to a too small next step, we accept it
                        loop = false;
                    } else {
                        // reject the step to match exactly the next switch time
                        hNew = dt;
                    }
                } else {
                    // accept the step
                    loop = false;
                }
            } else {
                // reject the step and attempt to reduce error by stepsize control
                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
                hNew = filterStep(stepSize * factor, forward, false);
            }
        }
        // the step has been accepted
        final double nextStep = stepStart + stepSize;
        System.arraycopy(yTmp, 0, y, 0, y0.length);
        manager.stepAccepted(nextStep, y);
        lastStep = manager.stop();
        // provide the step data to the step handler
        interpolator.storeTime(nextStep);
        for (StepHandler handler : stepHandlers) {
            handler.handleStep(interpolator, lastStep);
        }
        stepStart = nextStep;
        if (fsal) {
            // save the last evaluation for the next step
            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
        }
        if (manager.reset(stepStart, y) && !lastStep) {
            // some event handler has triggered changes that
            // invalidate the derivatives, we need to recompute them
            computeDerivatives(stepStart, y, yDotK[0]);
        }
        if (!lastStep) {
            // in some rare cases we may get here with stepSize = 0, for example
            // when an event occurs at integration start, reducing the first step
            // to zero; we have to reset the step to some safe non zero value
            stepSize = filterStep(stepSize, forward, true);
            // stepsize control for next step
            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
            final double scaledH = stepSize * factor;
            final double nextT = stepStart + scaledH;
            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
            hNew = filterStep(scaledH, forward, nextIsLast);
        }
    }
    final double stopTime = stepStart;
    resetInternalState();
    return stopTime;
}","public void test06229() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    double[][] doubleArray0 = new double[3][7];
    try {
        highamHall54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0[2], 2.0, doubleArray0[1]);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // dimensions mismatch: ODE problem has dimension 4, initial state vector has dimension 7
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public DormandPrince54Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince54StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
}","public void test07230() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertNotNull(dormandPrince54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Dormand-Prince integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param scalAbsoluteTolerance allowed absolute error
 * @param scalRelativeTolerance allowed relative error
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test07231() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test07232() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test07233() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test07234() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test07235() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test07236() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(305.07576780617, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getSafety() {
    return safety;
}","public void test07237() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test07238() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(305.07576780617, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test07239() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test07240() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test07241() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    assertEquals(305.07576780617, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"@Override
public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {
    sanityChecks(equations, t0, y0, t, y);
    setEquations(equations);
    resetEvaluations();
    final boolean forward = t > t0;
    // create some internal working arrays
    final int stages = c.length + 1;
    if (y != y0) {
        System.arraycopy(y0, 0, y, 0, y0.length);
    }
    final double[][] yDotK = new double[stages][y0.length];
    final double[] yTmp = new double[y0.length];
    // set up an interpolator sharing the integrator arrays
    AbstractStepInterpolator interpolator;
    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {
        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
        rki.reinitialize(this, yTmp, yDotK, forward);
        interpolator = rki;
    } else {
        interpolator = new DummyStepInterpolator(yTmp, forward);
    }
    interpolator.storeTime(t0);
    // set up integration control objects
    stepStart = t0;
    double hNew = 0;
    boolean firstTime = true;
    for (StepHandler handler : stepHandlers) {
        handler.reset();
    }
    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
    boolean lastStep = false;
    // main integration loop
    while (!lastStep) {
        interpolator.shift();
        double error = 0;
        for (boolean loop = true; loop; ) {
            if (firstTime || !fsal) {
                // first stage
                computeDerivatives(stepStart, y, yDotK[0]);
            }
            if (firstTime) {
                final double[] scale;
                if (vecAbsoluteTolerance == null) {
                    scale = new double[y0.length];
                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                } else {
                    scale = vecAbsoluteTolerance;
                }
                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);
                firstTime = false;
            }
            stepSize = hNew;
            // next stages
            for (int k = 1; k < stages; ++k) {
                for (int j = 0; j < y0.length; ++j) {
                    double sum = a[k - 1][0] * yDotK[0][j];
                    for (int l = 1; l < k; ++l) {
                        sum += a[k - 1][l] * yDotK[l][j];
                    }
                    yTmp[j] = y[j] + stepSize * sum;
                }
                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);
            }
            // estimate the state at the end of the step
            for (int j = 0; j < y0.length; ++j) {
                double sum = b[0] * yDotK[0][j];
                for (int l = 1; l < stages; ++l) {
                    sum += b[l] * yDotK[l][j];
                }
                yTmp[j] = y[j] + stepSize * sum;
            }
            // estimate the error at the end of the step
            error = estimateError(yDotK, y, yTmp, stepSize);
            if (error <= 1.0) {
                // discrete events handling
                interpolator.storeTime(stepStart + stepSize);
                if (manager.evaluateStep(interpolator)) {
                    final double dt = manager.getEventTime() - stepStart;
                    if (Math.abs(dt) <= Math.ulp(stepStart)) {
                        // rejecting the step would lead to a too small next step, we accept it
                        loop = false;
                    } else {
                        // reject the step to match exactly the next switch time
                        hNew = dt;
                    }
                } else {
                    // accept the step
                    loop = false;
                }
            } else {
                // reject the step and attempt to reduce error by stepsize control
                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
                hNew = filterStep(stepSize * factor, forward, false);
            }
        }
        // the step has been accepted
        final double nextStep = stepStart + stepSize;
        System.arraycopy(yTmp, 0, y, 0, y0.length);
        manager.stepAccepted(nextStep, y);
        lastStep = manager.stop();
        // provide the step data to the step handler
        interpolator.storeTime(nextStep);
        for (StepHandler handler : stepHandlers) {
            handler.handleStep(interpolator, lastStep);
        }
        stepStart = nextStep;
        if (fsal) {
            // save the last evaluation for the next step
            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
        }
        if (manager.reset(stepStart, y) && !lastStep) {
            // some event handler has triggered changes that
            // invalidate the derivatives, we need to recompute them
            computeDerivatives(stepStart, y, yDotK[0]);
        }
        if (!lastStep) {
            // in some rare cases we may get here with stepSize = 0, for example
            // when an event occurs at integration start, reducing the first step
            // to zero; we have to reset the step to some safe non zero value
            stepSize = filterStep(stepSize, forward, true);
            // stepsize control for next step
            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
            final double scaledH = stepSize * factor;
            final double nextT = stepStart + scaledH;
            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
            hNew = filterStep(scaledH, forward, nextIsLast);
        }
    }
    final double stopTime = stepStart;
    resetInternalState();
    return stopTime;
}","public void test07242() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    double[] doubleArray0 = new double[7];
    // Undeclared exception!
    try {
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-331.364376440207), doubleArray0, 0.0, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.ode.AbstractIntegrator"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public void setMaxGrowth(final double maxGrowth) {
    this.maxGrowth = maxGrowth;
}","public void test08257() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertArrayEquals(new double[] { 0.0 }, doubleArray0, 0.01);
}","/**
 * Set the maximal growth factor for stepsize control.
 * @param maxGrowth maximal growth factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test08259() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test08260() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test08261() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test08262() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test08263() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test08264() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test08265() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test08266() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(0.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinStep() {
    return minStep;
}","public void test08267() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test08268() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test08269() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test08270() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test08273() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(573.13, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test08274() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test08275() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test08276() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test08277() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test08278() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test08279() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test08280() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinStep() {
    return minStep;
}","public void test08281() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals((-2473.63036006), dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test08282() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test08283() throws Throwable {
    double[] doubleArray0 = new double[1];
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    dormandPrince54Integrator0.setMaxGrowth(0.0);
    double double0 = dormandPrince54Integrator0.getMaxGrowth();
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public HighamHall54Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
    super(METHOD_NAME, false, STATIC_C, STATIC_A, STATIC_B, new HighamHall54StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
}","public void test09286() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertNotNull(highamHall54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Higham and Hall integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param scalAbsoluteTolerance allowed absolute error
 * @param scalRelativeTolerance allowed relative error
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test09287() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test09288() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test09289() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test09290() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test09291() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0, highamHall54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test09292() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(""Higham-Hall 5(4)"", highamHall54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test09293() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinStep() {
    return minStep;
}","public void test09294() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test09295() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(5.0, highamHall54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"public double getSafety() {
    return safety;
}","public void test09296() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test09297() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    assertEquals(5, highamHall54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public DormandPrince54Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince54StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
}","public void test10298() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertNotNull(dormandPrince54Integrator0);
}","/**
 * Simple constructor.
 * Build a fifth order Dormand-Prince integrator with the given step bounds
 * @param minStep minimal step (must be positive even for backward
 * integration), the last step can be smaller than this
 * @param maxStep maximal step (must be positive even for backward
 * integration)
 * @param scalAbsoluteTolerance allowed absolute error
 * @param scalRelativeTolerance allowed relative error
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test10299() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test10300() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test10301() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test10302() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test10303() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test10304() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test10305() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(958.3823, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test10306() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test10307() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test10308() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test10309() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public FirstOrderConverter(final SecondOrderDifferentialEquations equations) {
    this.equations = equations;
    dimension = equations.getDimension();
    z = new double[dimension];
    zDot = new double[dimension];
    zDDot = new double[dimension];
}","public void test10310() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertNotNull(firstOrderConverter0);
}","/**
 * Simple constructor.
 * Build a converter around a second order equations set.
 * @param equations second order equations set to convert
 */"
"public int getDimension() {
    return 2 * dimension;
}","public void test10311() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    assertEquals(4, firstOrderConverter0.getDimension());
}","/**
 * Get the dimension of the problem.
 * <p>The dimension of the first order problem is twice the
 * dimension of the underlying second order problem.</p>
 * @return dimension of the problem
 */"
"public StepNormalizer(final double h, final FixedStepHandler handler) {
    this.h = Math.abs(h);
    this.handler = handler;
    reset();
}","public void test10312() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    assertNotNull(stepNormalizer0);
}","/**
 * Simple constructor.
 * @param h fixed time step (sign is not used)
 * @param handler fixed time step handler to wrap
 */"
"public boolean requiresDenseOutput() {
    return true;
}","public void test10313() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    assertTrue(stepNormalizer0.requiresDenseOutput());
}","/**
 * Determines whether this handler needs dense output.
 * This handler needs dense output in order to provide data at
 * regularly spaced steps regardless of the steps the integrator
 * uses, so this method always returns true.
 * @return always true
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test10314() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test10315() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test10316() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(0, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test10317() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test10318() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test10319() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test10320() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(958.3823, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test10321() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test10322() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test10323() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test10324() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public boolean requiresDenseOutput() {
    return true;
}","public void test10325() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    assertTrue(stepNormalizer0.requiresDenseOutput());
}","/**
 * Determines whether this handler needs dense output.
 * This handler needs dense output in order to provide data at
 * regularly spaced steps regardless of the steps the integrator
 * uses, so this method always returns true.
 * @return always true
 */"
"@Override
public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {
    sanityChecks(equations, t0, y0, t, y);
    setEquations(equations);
    resetEvaluations();
    final boolean forward = t > t0;
    // create some internal working arrays
    final int stages = c.length + 1;
    if (y != y0) {
        System.arraycopy(y0, 0, y, 0, y0.length);
    }
    final double[][] yDotK = new double[stages][y0.length];
    final double[] yTmp = new double[y0.length];
    // set up an interpolator sharing the integrator arrays
    AbstractStepInterpolator interpolator;
    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {
        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
        rki.reinitialize(this, yTmp, yDotK, forward);
        interpolator = rki;
    } else {
        interpolator = new DummyStepInterpolator(yTmp, forward);
    }
    interpolator.storeTime(t0);
    // set up integration control objects
    stepStart = t0;
    double hNew = 0;
    boolean firstTime = true;
    for (StepHandler handler : stepHandlers) {
        handler.reset();
    }
    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
    boolean lastStep = false;
    // main integration loop
    while (!lastStep) {
        interpolator.shift();
        double error = 0;
        for (boolean loop = true; loop; ) {
            if (firstTime || !fsal) {
                // first stage
                computeDerivatives(stepStart, y, yDotK[0]);
            }
            if (firstTime) {
                final double[] scale;
                if (vecAbsoluteTolerance == null) {
                    scale = new double[y0.length];
                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                } else {
                    scale = vecAbsoluteTolerance;
                }
                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);
                firstTime = false;
            }
            stepSize = hNew;
            // next stages
            for (int k = 1; k < stages; ++k) {
                for (int j = 0; j < y0.length; ++j) {
                    double sum = a[k - 1][0] * yDotK[0][j];
                    for (int l = 1; l < k; ++l) {
                        sum += a[k - 1][l] * yDotK[l][j];
                    }
                    yTmp[j] = y[j] + stepSize * sum;
                }
                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);
            }
            // estimate the state at the end of the step
            for (int j = 0; j < y0.length; ++j) {
                double sum = b[0] * yDotK[0][j];
                for (int l = 1; l < stages; ++l) {
                    sum += b[l] * yDotK[l][j];
                }
                yTmp[j] = y[j] + stepSize * sum;
            }
            // estimate the error at the end of the step
            error = estimateError(yDotK, y, yTmp, stepSize);
            if (error <= 1.0) {
                // discrete events handling
                interpolator.storeTime(stepStart + stepSize);
                if (manager.evaluateStep(interpolator)) {
                    final double dt = manager.getEventTime() - stepStart;
                    if (Math.abs(dt) <= Math.ulp(stepStart)) {
                        // rejecting the step would lead to a too small next step, we accept it
                        loop = false;
                    } else {
                        // reject the step to match exactly the next switch time
                        hNew = dt;
                    }
                } else {
                    // accept the step
                    loop = false;
                }
            } else {
                // reject the step and attempt to reduce error by stepsize control
                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
                hNew = filterStep(stepSize * factor, forward, false);
            }
        }
        // the step has been accepted
        final double nextStep = stepStart + stepSize;
        System.arraycopy(yTmp, 0, y, 0, y0.length);
        manager.stepAccepted(nextStep, y);
        lastStep = manager.stop();
        // provide the step data to the step handler
        interpolator.storeTime(nextStep);
        for (StepHandler handler : stepHandlers) {
            handler.handleStep(interpolator, lastStep);
        }
        stepStart = nextStep;
        if (fsal) {
            // save the last evaluation for the next step
            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
        }
        if (manager.reset(stepStart, y) && !lastStep) {
            // some event handler has triggered changes that
            // invalidate the derivatives, we need to recompute them
            computeDerivatives(stepStart, y, yDotK[0]);
        }
        if (!lastStep) {
            // in some rare cases we may get here with stepSize = 0, for example
            // when an event occurs at integration start, reducing the first step
            // to zero; we have to reset the step to some safe non zero value
            stepSize = filterStep(stepSize, forward, true);
            // stepsize control for next step
            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
            final double scaledH = stepSize * factor;
            final double nextT = stepStart + scaledH;
            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
            hNew = filterStep(scaledH, forward, nextIsLast);
        }
    }
    final double stopTime = stepStart;
    resetInternalState();
    return stopTime;
}","public void test10326() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(3831.9243024, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"@Override
public double getCurrentStepStart() {
    return stepStart;
}","public void test10329() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMinStep() {
    return minStep;
}","public void test10330() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMinStep(), 0.01);
}","/**
 * Get the minimal step.
 * @return minimal step
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test10331() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(32, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public double getSafety() {
    return safety;
}","public void test10332() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test10333() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test10334() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getCurrentSignedStepsize() {
    return stepSize;
}","public void test10335() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(958.3823, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxStep() {
    return maxStep;
}","public void test10336() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(958.3823, dormandPrince54Integrator0.getMaxStep(), 0.01);
}","/**
 * Get the maximal step.
 * @return maximal step
 */"
"@Override
public int getOrder() {
    return 5;
}","public void test10337() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(5, dormandPrince54Integrator0.getOrder());
}","/**
 * {@inheritDoc}
 */"
"public String getName() {
    return name;
}","public void test10338() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(""Dormand-Prince 5(4)"", dormandPrince54Integrator0.getName());
}","/**
 * {@inheritDoc}
 */"
"public int getMaxEvaluations() {
    return maxEvaluations;
}","public void test10339() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
}","/**
 * {@inheritDoc}
 */"
"public int getDimension() {
    return 2 * dimension;
}","public void test10340() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
    StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    assertEquals(4, firstOrderConverter0.getDimension());
}","/**
 * Get the dimension of the problem.
 * <p>The dimension of the first order problem is twice the
 * dimension of the underlying second order problem.</p>
 * @return dimension of the problem
 */"
"@Override
public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {
    sanityChecks(equations, t0, y0, t, y);
    setEquations(equations);
    resetEvaluations();
    final boolean forward = t > t0;
    // create some internal working arrays
    final int stages = c.length + 1;
    if (y != y0) {
        System.arraycopy(y0, 0, y, 0, y0.length);
    }
    final double[][] yDotK = new double[stages][y0.length];
    final double[] yTmp = new double[y0.length];
    // set up an interpolator sharing the integrator arrays
    AbstractStepInterpolator interpolator;
    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {
        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
        rki.reinitialize(this, yTmp, yDotK, forward);
        interpolator = rki;
    } else {
        interpolator = new DummyStepInterpolator(yTmp, forward);
    }
    interpolator.storeTime(t0);
    // set up integration control objects
    stepStart = t0;
    double hNew = 0;
    boolean firstTime = true;
    for (StepHandler handler : stepHandlers) {
        handler.reset();
    }
    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
    boolean lastStep = false;
    // main integration loop
    while (!lastStep) {
        interpolator.shift();
        double error = 0;
        for (boolean loop = true; loop; ) {
            if (firstTime || !fsal) {
                // first stage
                computeDerivatives(stepStart, y, yDotK[0]);
            }
            if (firstTime) {
                final double[] scale;
                if (vecAbsoluteTolerance == null) {
                    scale = new double[y0.length];
                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                } else {
                    scale = vecAbsoluteTolerance;
                }
                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);
                firstTime = false;
            }
            stepSize = hNew;
            // next stages
            for (int k = 1; k < stages; ++k) {
                for (int j = 0; j < y0.length; ++j) {
                    double sum = a[k - 1][0] * yDotK[0][j];
                    for (int l = 1; l < k; ++l) {
                        sum += a[k - 1][l] * yDotK[l][j];
                    }
                    yTmp[j] = y[j] + stepSize * sum;
                }
                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);
            }
            // estimate the state at the end of the step
            for (int j = 0; j < y0.length; ++j) {
                double sum = b[0] * yDotK[0][j];
                for (int l = 1; l < stages; ++l) {
                    sum += b[l] * yDotK[l][j];
                }
                yTmp[j] = y[j] + stepSize * sum;
            }
            // estimate the error at the end of the step
            error = estimateError(yDotK, y, yTmp, stepSize);
            if (error <= 1.0) {
                // discrete events handling
                interpolator.storeTime(stepStart + stepSize);
                if (manager.evaluateStep(interpolator)) {
                    final double dt = manager.getEventTime() - stepStart;
                    if (Math.abs(dt) <= Math.ulp(stepStart)) {
                        // rejecting the step would lead to a too small next step, we accept it
                        loop = false;
                    } else {
                        // reject the step to match exactly the next switch time
                        hNew = dt;
                    }
                } else {
                    // accept the step
                    loop = false;
                }
            } else {
                // reject the step and attempt to reduce error by stepsize control
                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
                hNew = filterStep(stepSize * factor, forward, false);
            }
        }
        // the step has been accepted
        final double nextStep = stepStart + stepSize;
        System.arraycopy(yTmp, 0, y, 0, y0.length);
        manager.stepAccepted(nextStep, y);
        lastStep = manager.stop();
        // provide the step data to the step handler
        interpolator.storeTime(nextStep);
        for (StepHandler handler : stepHandlers) {
            handler.handleStep(interpolator, lastStep);
        }
        stepStart = nextStep;
        if (fsal) {
            // save the last evaluation for the next step
            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
        }
        if (manager.reset(stepStart, y) && !lastStep) {
            // some event handler has triggered changes that
            // invalidate the derivatives, we need to recompute them
            computeDerivatives(stepStart, y, yDotK[0]);
        }
        if (!lastStep) {
            // in some rare cases we may get here with stepSize = 0, for example
            // when an event occurs at integration start, reducing the first step
            // to zero; we have to reset the step to some safe non zero value
            stepSize = filterStep(stepSize, forward, true);
            // stepsize control for next step
            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
            final double scaledH = stepSize * factor;
            final double nextT = stepStart + scaledH;
            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
            hNew = filterStep(scaledH, forward, nextIsLast);
        }
    }
    final double stopTime = stepStart;
    resetInternalState();
    return stopTime;
}","public void test11341() throws Throwable {
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    double[] doubleArray1 = new double[4];
    // Undeclared exception!
    highamHall54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray1, 2.0, doubleArray0);
}","/**
 * {@inheritDoc}
 */"
"public int getEvaluations() {
    return evaluations;
}","public void test12342() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), (-11.87528245965743));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0, (-11.87528245965743), doubleArray0);
    assertEquals(20, dormandPrince54Integrator0.getEvaluations());
}","/**
 * {@inheritDoc}
 */"
"@Override
public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {
    sanityChecks(equations, t0, y0, t, y);
    setEquations(equations);
    resetEvaluations();
    final boolean forward = t > t0;
    // create some internal working arrays
    final int stages = c.length + 1;
    if (y != y0) {
        System.arraycopy(y0, 0, y, 0, y0.length);
    }
    final double[][] yDotK = new double[stages][y0.length];
    final double[] yTmp = new double[y0.length];
    // set up an interpolator sharing the integrator arrays
    AbstractStepInterpolator interpolator;
    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {
        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
        rki.reinitialize(this, yTmp, yDotK, forward);
        interpolator = rki;
    } else {
        interpolator = new DummyStepInterpolator(yTmp, forward);
    }
    interpolator.storeTime(t0);
    // set up integration control objects
    stepStart = t0;
    double hNew = 0;
    boolean firstTime = true;
    for (StepHandler handler : stepHandlers) {
        handler.reset();
    }
    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
    boolean lastStep = false;
    // main integration loop
    while (!lastStep) {
        interpolator.shift();
        double error = 0;
        for (boolean loop = true; loop; ) {
            if (firstTime || !fsal) {
                // first stage
                computeDerivatives(stepStart, y, yDotK[0]);
            }
            if (firstTime) {
                final double[] scale;
                if (vecAbsoluteTolerance == null) {
                    scale = new double[y0.length];
                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                } else {
                    scale = vecAbsoluteTolerance;
                }
                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);
                firstTime = false;
            }
            stepSize = hNew;
            // next stages
            for (int k = 1; k < stages; ++k) {
                for (int j = 0; j < y0.length; ++j) {
                    double sum = a[k - 1][0] * yDotK[0][j];
                    for (int l = 1; l < k; ++l) {
                        sum += a[k - 1][l] * yDotK[l][j];
                    }
                    yTmp[j] = y[j] + stepSize * sum;
                }
                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);
            }
            // estimate the state at the end of the step
            for (int j = 0; j < y0.length; ++j) {
                double sum = b[0] * yDotK[0][j];
                for (int l = 1; l < stages; ++l) {
                    sum += b[l] * yDotK[l][j];
                }
                yTmp[j] = y[j] + stepSize * sum;
            }
            // estimate the error at the end of the step
            error = estimateError(yDotK, y, yTmp, stepSize);
            if (error <= 1.0) {
                // discrete events handling
                interpolator.storeTime(stepStart + stepSize);
                if (manager.evaluateStep(interpolator)) {
                    final double dt = manager.getEventTime() - stepStart;
                    if (Math.abs(dt) <= Math.ulp(stepStart)) {
                        // rejecting the step would lead to a too small next step, we accept it
                        loop = false;
                    } else {
                        // reject the step to match exactly the next switch time
                        hNew = dt;
                    }
                } else {
                    // accept the step
                    loop = false;
                }
            } else {
                // reject the step and attempt to reduce error by stepsize control
                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
                hNew = filterStep(stepSize * factor, forward, false);
            }
        }
        // the step has been accepted
        final double nextStep = stepStart + stepSize;
        System.arraycopy(yTmp, 0, y, 0, y0.length);
        manager.stepAccepted(nextStep, y);
        lastStep = manager.stop();
        // provide the step data to the step handler
        interpolator.storeTime(nextStep);
        for (StepHandler handler : stepHandlers) {
            handler.handleStep(interpolator, lastStep);
        }
        stepStart = nextStep;
        if (fsal) {
            // save the last evaluation for the next step
            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
        }
        if (manager.reset(stepStart, y) && !lastStep) {
            // some event handler has triggered changes that
            // invalidate the derivatives, we need to recompute them
            computeDerivatives(stepStart, y, yDotK[0]);
        }
        if (!lastStep) {
            // in some rare cases we may get here with stepSize = 0, for example
            // when an event occurs at integration start, reducing the first step
            // to zero; we have to reset the step to some safe non zero value
            stepSize = filterStep(stepSize, forward, true);
            // stepsize control for next step
            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
            final double scaledH = stepSize * factor;
            final double nextT = stepStart + scaledH;
            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
            hNew = filterStep(scaledH, forward, nextIsLast);
        }
    }
    final double stopTime = stepStart;
    resetInternalState();
    return stopTime;
}","public void test12343() throws Throwable {
    DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), (-11.87528245965743));
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    double[] doubleArray0 = new double[4];
    double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0, (-11.87528245965743), doubleArray0);
    assertEquals((-11.87528245965743), double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test13344() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getMaxGrowth();
    assertEquals(10.0, double0, 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getSafety() {
    return safety;
}","public void test13345() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getMaxGrowth();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test13346() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getMaxGrowth();
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test14347() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.2, double0, 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getSafety() {
    return safety;
}","public void test14348() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test14349() throws Throwable {
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    double double0 = highamHall54Integrator0.getMinReduction();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getMinReduction() {
    return minReduction;
}","public void test15350() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getSafety();
    assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
}","/**
 * Get the minimal reduction factor for stepsize control.
 * @return minimal reduction factor
 */"
"public double getMaxGrowth() {
    return maxGrowth;
}","public void test15351() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getSafety();
    assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
}","/**
 * Get the maximal growth factor for stepsize control.
 * @return maximal growth factor
 */"
"public double getSafety() {
    return safety;
}","public void test15352() throws Throwable {
    double[] doubleArray0 = new double[9];
    HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    double double0 = highamHall54Integrator0.getSafety();
    assertEquals(0.9, double0, 0.01);
}","/**
 * Get the safety factor for stepsize control.
 * @return safety factor
 */"
"@Override
public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {
    sanityChecks(equations, t0, y0, t, y);
    setEquations(equations);
    resetEvaluations();
    final boolean forward = t > t0;
    // create some internal working arrays
    final int stages = c.length + 1;
    if (y != y0) {
        System.arraycopy(y0, 0, y, 0, y0.length);
    }
    final double[][] yDotK = new double[stages][y0.length];
    final double[] yTmp = new double[y0.length];
    // set up an interpolator sharing the integrator arrays
    AbstractStepInterpolator interpolator;
    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {
        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
        rki.reinitialize(this, yTmp, yDotK, forward);
        interpolator = rki;
    } else {
        interpolator = new DummyStepInterpolator(yTmp, forward);
    }
    interpolator.storeTime(t0);
    // set up integration control objects
    stepStart = t0;
    double hNew = 0;
    boolean firstTime = true;
    for (StepHandler handler : stepHandlers) {
        handler.reset();
    }
    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
    boolean lastStep = false;
    // main integration loop
    while (!lastStep) {
        interpolator.shift();
        double error = 0;
        for (boolean loop = true; loop; ) {
            if (firstTime || !fsal) {
                // first stage
                computeDerivatives(stepStart, y, yDotK[0]);
            }
            if (firstTime) {
                final double[] scale;
                if (vecAbsoluteTolerance == null) {
                    scale = new double[y0.length];
                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                } else {
                    scale = vecAbsoluteTolerance;
                }
                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);
                firstTime = false;
            }
            stepSize = hNew;
            // next stages
            for (int k = 1; k < stages; ++k) {
                for (int j = 0; j < y0.length; ++j) {
                    double sum = a[k - 1][0] * yDotK[0][j];
                    for (int l = 1; l < k; ++l) {
                        sum += a[k - 1][l] * yDotK[l][j];
                    }
                    yTmp[j] = y[j] + stepSize * sum;
                }
                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);
            }
            // estimate the state at the end of the step
            for (int j = 0; j < y0.length; ++j) {
                double sum = b[0] * yDotK[0][j];
                for (int l = 1; l < stages; ++l) {
                    sum += b[l] * yDotK[l][j];
                }
                yTmp[j] = y[j] + stepSize * sum;
            }
            // estimate the error at the end of the step
            error = estimateError(yDotK, y, yTmp, stepSize);
            if (error <= 1.0) {
                // discrete events handling
                interpolator.storeTime(stepStart + stepSize);
                if (manager.evaluateStep(interpolator)) {
                    final double dt = manager.getEventTime() - stepStart;
                    if (Math.abs(dt) <= Math.ulp(stepStart)) {
                        // rejecting the step would lead to a too small next step, we accept it
                        loop = false;
                    } else {
                        // reject the step to match exactly the next switch time
                        hNew = dt;
                    }
                } else {
                    // accept the step
                    loop = false;
                }
            } else {
                // reject the step and attempt to reduce error by stepsize control
                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
                hNew = filterStep(stepSize * factor, forward, false);
            }
        }
        // the step has been accepted
        final double nextStep = stepStart + stepSize;
        System.arraycopy(yTmp, 0, y, 0, y0.length);
        manager.stepAccepted(nextStep, y);
        lastStep = manager.stop();
        // provide the step data to the step handler
        interpolator.storeTime(nextStep);
        for (StepHandler handler : stepHandlers) {
            handler.handleStep(interpolator, lastStep);
        }
        stepStart = nextStep;
        if (fsal) {
            // save the last evaluation for the next step
            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
        }
        if (manager.reset(stepStart, y) && !lastStep) {
            // some event handler has triggered changes that
            // invalidate the derivatives, we need to recompute them
            computeDerivatives(stepStart, y, yDotK[0]);
        }
        if (!lastStep) {
            // in some rare cases we may get here with stepSize = 0, for example
            // when an event occurs at integration start, reducing the first step
            // to zero; we have to reset the step to some safe non zero value
            stepSize = filterStep(stepSize, forward, true);
            // stepsize control for next step
            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));
            final double scaledH = stepSize * factor;
            final double nextT = stepStart + scaledH;
            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
            hNew = filterStep(scaledH, forward, nextIsLast);
        }
    }
    final double stopTime = stepStart;
    resetInternalState();
    return stopTime;
}","public void test16353() throws Throwable {
    double[] doubleArray0 = new double[0];
    DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.9, (-1.0), doubleArray0, doubleArray0);
    SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
    FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    // Undeclared exception!
    dormandPrince853Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 5, doubleArray0);
}","/**
 * {@inheritDoc}
 */"
