{
  "test1212" : {
    "methodSignature" : "protected void doIteration(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException",
    "methodName" : "doIteration",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    double[] doubleArray0 = new double[14];\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 100);\n    simplexSolver0.doIteration(simplexTableau0);\n}",
    "testName" : "test1212"
  },
  "test1010" : {
    "methodSignature" : "protected void doIteration(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException",
    "methodName" : "doIteration",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    double[] doubleArray0 = new double[14];\n    doubleArray0[0] = (double) 100;\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    Double[] doubleArray1 = new Double[2];\n    doubleArray1[0] = (Double) 100.0;\n    doubleArray1[1] = (Double) 100.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);\n    Relationship relationship0 = Relationship.LEQ;\n    LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0).when(linearConstraint0).getCoefficients();\n    doReturn(relationship0).when(linearConstraint0).getRelationship();\n    doReturn(100.0, 100.0).when(linearConstraint0).getValue();\n    linkedList0.add(linearConstraint0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0).when(linearConstraint1).getCoefficients();\n    doReturn(relationship0).when(linearConstraint1).getRelationship();\n    doReturn(100.0, doubleArray1[1]).when(linearConstraint1).getValue();\n    linkedList0.offerLast(linearConstraint1);\n    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 100);\n    simplexSolver0.doIteration(simplexTableau0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public int getIterations()",
    "methodName" : "getIterations",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    double[] doubleArray0 = new double[3];\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    Double[] doubleArray1 = new Double[2];\n    doubleArray1[0] = (Double) 100.0;\n    doubleArray1[1] = (Double) 100.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);\n    Relationship relationship0 = Relationship.GEQ;\n    LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0).when(linearConstraint0).getCoefficients();\n    doReturn(relationship0).when(linearConstraint0).getRelationship();\n    doReturn(100.0, 100.0).when(linearConstraint0).getValue();\n    linkedList0.add(linearConstraint0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0).when(linearConstraint1).getCoefficients();\n    doReturn(relationship0).when(linearConstraint1).getRelationship();\n    doReturn(100.0, doubleArray1[1]).when(linearConstraint1).getValue();\n    linkedList0.offerLast(linearConstraint1);\n    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 100);\n    simplexSolver0.solvePhase1(simplexTableau0);\n    simplexSolver0.getIterations();\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "protected void solvePhase1(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
    "methodName" : "solvePhase1",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    simplexSolver0.solvePhase1((SimplexTableau) null);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public PointValuePair doOptimize() throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    simplexSolver0.doOptimize();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "protected void doIteration(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException",
    "methodName" : "doIteration",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    GoalType goalType0 = GoalType.MINIMIZE;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(5183);\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);\n    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 100);\n    // Undeclared exception!\n    simplexSolver0.doIteration(simplexTableau0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public SimplexSolver(final double epsilon, final int maxUlps)",
    "methodName" : "SimplexSolver",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver(1594.949, (-599));\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public int getIterations()",
    "methodName" : "getIterations",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    double[] doubleArray0 = new double[1];\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    Double[] doubleArray1 = new Double[2];\n    doubleArray1[0] = (Double) 100.0;\n    doubleArray1[1] = (Double) 100.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);\n    Relationship relationship0 = Relationship.LEQ;\n    Relationship relationship1 = Relationship.EQ;\n    LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();\n    doReturn(relationship0, relationship0, relationship1).when(linearConstraint0).getRelationship();\n    doReturn(100.0, 100.0, 100.0, (double) 100, doubleArray1[0]).when(linearConstraint0).getValue();\n    linkedList0.add(linearConstraint0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100.0, 100);\n    LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0, openMapRealVector0).when(linearConstraint1).getCoefficients();\n    doReturn(relationship1, relationship1).when(linearConstraint1).getRelationship();\n    doReturn(100.0, doubleArray1[1], 1.0E-12, (double) 100).when(linearConstraint1).getValue();\n    linkedList0.offerLast(linearConstraint1);\n    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100.0, 100);\n    SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray1[0], 100);\n    simplexSolver0.solvePhase1(simplexTableau2);\n    simplexSolver0.getIterations();\n}",
    "testName" : "test099"
  },
  "test000" : {
    "methodSignature" : "protected void doIteration(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException",
    "methodName" : "doIteration",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = (double) 100;\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();\n    Relationship relationship0 = Relationship.GEQ;\n    LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0).when(linearConstraint0).getCoefficients();\n    doReturn(relationship0).when(linearConstraint0).getRelationship();\n    doReturn((-1092.386), (-1092.386)).when(linearConstraint0).getValue();\n    linkedList0.add(linearConstraint0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 100.0, 100);\n    simplexSolver0.doIteration(simplexTableau0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public PointValuePair doOptimize() throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1328);\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 100);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);\n    // Undeclared exception!\n    simplexSolver0.doOptimize();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public PointValuePair doOptimize() throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    double[] doubleArray0 = new double[1];\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    Double[] doubleArray1 = new Double[2];\n    doubleArray1[0] = (Double) 100.0;\n    doubleArray1[1] = (Double) 100.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);\n    Relationship relationship0 = Relationship.LEQ;\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);\n    OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(100, 100);\n    LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0, openMapRealVector1).when(linearConstraint0).getCoefficients();\n    doReturn(relationship0, relationship0).when(linearConstraint0).getRelationship();\n    doReturn(100.0, doubleArray1[1], 1.0E-6, (-1234.0)).when(linearConstraint0).getValue();\n    linkedList0.offerLast(linearConstraint0);\n    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 100);\n    simplexSolver0.doOptimize();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public int getIterations()",
    "methodName" : "getIterations",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = (double) 100;\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    Double[] doubleArray1 = new Double[2];\n    doubleArray1[0] = (Double) 100.0;\n    doubleArray1[1] = (Double) 100.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);\n    Relationship relationship0 = Relationship.LEQ;\n    LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();\n    doReturn(relationship0, relationship0).when(linearConstraint0).getRelationship();\n    doReturn(100.0, 100.0, 100.0, (double) 100).when(linearConstraint0).getValue();\n    linkedList0.add(linearConstraint0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);\n    simplexSolver0.doOptimize();\n    simplexSolver0.getIterations();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "protected void solvePhase1(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
    "methodName" : "solvePhase1",
    "className" : "org.apache.commons.math3.optimization.linear.SimplexSolver",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    SimplexSolver simplexSolver0 = new SimplexSolver();\n    double[] doubleArray0 = new double[1];\n    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100.0);\n    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();\n    Double[] doubleArray1 = new Double[2];\n    doubleArray1[0] = (Double) 100.0;\n    doubleArray1[1] = (Double) 100.0;\n    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);\n    Relationship relationship0 = Relationship.LEQ;\n    LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();\n    doReturn(relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();\n    doReturn(100.0, 100.0, 100.0, (double) 100, 1.0E-12).when(linearConstraint0).getValue();\n    linkedList0.add(linearConstraint0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100.0, 100);\n    simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);\n    Relationship relationship1 = Relationship.EQ;\n    LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());\n    doReturn(openMapRealVector0).when(linearConstraint1).getCoefficients();\n    doReturn(relationship1).when(linearConstraint1).getRelationship();\n    doReturn(100.0, doubleArray1[1]).when(linearConstraint1).getValue();\n    linkedList0.offerLast(linearConstraint1);\n    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 100);\n    simplexSolver0.solvePhase1(simplexTableau1);\n}",
    "testName" : "test088"
  }
}