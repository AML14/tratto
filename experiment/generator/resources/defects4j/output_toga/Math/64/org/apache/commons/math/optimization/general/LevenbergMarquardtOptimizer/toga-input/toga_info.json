{
  "test1212" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[1][6];\n    double[] doubleArray1 = new double[1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-1008.4756371066549));\n    levenbergMarquardtOptimizer0.setQRRankingThreshold((-2202.23851991449));\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test1212"
  },
  "test1010" : {
    "methodSignature" : "public int getEvaluations()",
    "methodName" : "getEvaluations",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[1][6];\n    double[] doubleArray1 = new double[1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.setCostRelativeTolerance(100);\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-1008.4756371066549));\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.getEvaluations();\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[1][6];\n    double[] doubleArray1 = new double[1];\n    SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker((-58.597104784), (-58.597104784));\n    levenbergMarquardtOptimizer0.setConvergenceChecker(simpleVectorialValueChecker0);\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.setOrthoTolerance(Double.NEGATIVE_INFINITY);\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.cols = 49;\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[1][6];\n    double[] doubleArray1 = new double[1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray2 = new double[0];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = (-1);\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[2][6];\n    double[] doubleArray1 = new double[2];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.setQRRankingThreshold((-3473.304238));\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[1][6];\n    double[] doubleArray1 = new double[1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-3473.304238));\n    levenbergMarquardtOptimizer0.setInitialStepBoundFactor((-2491.571243063269));\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test099"
  },
  "test000" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[1][6];\n    double[] doubleArray1 = new double[1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    doubleArray1[0] = (-94.83151985);\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[1][6];\n    double[] doubleArray1 = new double[1];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[2][6];\n    double[] doubleArray1 = new double[2];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.setMaxIterations(1);\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public int getMaxIterations()",
    "methodName" : "getMaxIterations",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setParRelativeTolerance(1637.44);\n    levenbergMarquardtOptimizer0.getMaxIterations();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[1][6];\n    double[] doubleArray1 = new double[1];\n    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(Double.NEGATIVE_INFINITY);\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.setOrthoTolerance(Double.NEGATIVE_INFINITY);\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n}",
    "testName" : "test088"
  }
}