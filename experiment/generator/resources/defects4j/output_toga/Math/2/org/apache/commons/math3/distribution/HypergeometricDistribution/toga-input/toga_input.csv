focal_method,test_prefix,docstring
"public double upperCumulativeProbability(int x) {
    double ret;
    final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x <= domain[0]) {
        ret = 1.0;
    } else if (x > domain[1]) {
        ret = 0.0;
    } else {
        ret = innerCumulativeProbability(domain[1], x, -1);
    }
    return ret;
}","public void test000() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability(568);
    assertEquals(9.678525982176148E-89, double0, 0.01);
}","/**
 * For this distribution, {@code X}, this method returns {@code P(X >= x)}.
 *
 * @param x Value at which the CDF is evaluated.
 * @return the upper tail CDF for this distribution.
 * @since 1.1
 */"
"public double upperCumulativeProbability(int x) {
    double ret;
    final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x <= domain[0]) {
        ret = 1.0;
    } else if (x > domain[1]) {
        ret = 0.0;
    } else {
        ret = innerCumulativeProbability(domain[1], x, -1);
    }
    return ret;
}","public void test011() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
    assertEquals(1.0, double0, 0.01);
}","/**
 * For this distribution, {@code X}, this method returns {@code P(X >= x)}.
 *
 * @param x Value at which the CDF is evaluated.
 * @return the upper tail CDF for this distribution.
 * @since 1.1
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test012() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
    assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int[] sample(int sampleSize) {
    if (sampleSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    int[] out = new int[sampleSize];
    for (int i = 0; i < sampleSize; i++) {
        out[i] = sample();
    }
    return out;
}","public void test023() throws Throwable {
    ISAACRandom iSAACRandom0 = new ISAACRandom();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2548, 324, 324);
    // Undeclared exception!
    hypergeometricDistribution0.sample(2048);
}","/**
 * {@inheritDoc}
 *
 * The default implementation generates the sample by calling
 * {@link #sample()} in a loop.
 */"
"public double cumulativeProbability(int x0, int x1) throws NumberIsTooLargeException {
    if (x1 < x0) {
        throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true);
    }
    return cumulativeProbability(x1) - cumulativeProbability(x0);
}","public void test034() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    double double0 = hypergeometricDistribution0.cumulativeProbability(0, 144);
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 *
 * The default implementation uses the identity
 * <p>{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</p>
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test035() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    double double0 = hypergeometricDistribution0.cumulativeProbability(0, 144);
    assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test036() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    double double0 = hypergeometricDistribution0.cumulativeProbability(0, 144);
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test037() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    double double0 = hypergeometricDistribution0.cumulativeProbability(0, 144);
    assertEquals(1395, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public double cumulativeProbability(int x) {
    double ret;
    int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x < domain[0]) {
        ret = 0.0;
    } else if (x >= domain[1]) {
        ret = 1.0;
    } else {
        ret = innerCumulativeProbability(domain[0], x, 1);
    }
    return ret;
}","public void test048() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    double double0 = hypergeometricDistribution0.cumulativeProbability(326);
    assertEquals(2.7617451183816397E-87, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
    this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);
}","public void test059() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = null;
    try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // population size (0)
        //
        verifyException(""org.apache.commons.math3.distribution.HypergeometricDistribution"", e);
    }
}","/**
 * Construct a new hypergeometric distribution with the specified population
 * size, number of successes in the population, and sample size.
 *
 * @param populationSize Population size.
 * @param numberOfSuccesses Number of successes in the population.
 * @param sampleSize Sample size.
 * @throws NotPositiveException if {@code numberOfSuccesses < 0}.
 * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
 * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.
 */"
"public double probability(int x) {
    double ret;
    int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x < domain[0] || x > domain[1]) {
        ret = 0.0;
    } else {
        double p = (double) sampleSize / (double) populationSize;
        double q = (double) (populationSize - sampleSize) / (double) populationSize;
        double p1 = SaddlePointExpansion.logBinomialProbability(x, numberOfSuccesses, p, q);
        double p2 = SaddlePointExpansion.logBinomialProbability(sampleSize - x, populationSize - numberOfSuccesses, p, q);
        double p3 = SaddlePointExpansion.logBinomialProbability(sampleSize, populationSize, p, q);
        ret = FastMath.exp(p1 + p2 - p3);
    }
    return ret;
}","public void test0610() throws Throwable {
    Well19937a well19937a0 = new Well19937a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 200, 1, 1);
    double double0 = hypergeometricDistribution0.probability(1);
    assertEquals(0.005000000000000006, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getSupportUpperBound() {
    return FastMath.min(getNumberOfSuccesses(), getSampleSize());
}","public void test0711() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSupportUpperBound();
    assertEquals(0, int0);
}","/**
 * {@inheritDoc}
 *
 * For number of successes {@code m} and sample size {@code n}, the upper
 * bound of the support is {@code min(m, n)}.
 *
 * @return upper bound of the support
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test0712() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSupportUpperBound();
    assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test0713() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSupportUpperBound();
    assertEquals(1395, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public int getSupportLowerBound() {
    return FastMath.max(0, getSampleSize() + getNumberOfSuccesses() - getPopulationSize());
}","public void test0814() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    int int0 = hypergeometricDistribution0.getSupportLowerBound();
    assertEquals(326, int0);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the lower bound of the support is
 * {@code max(0, n + m - N)}.
 *
 * @return lower bound of the support
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test0915() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
    int int0 = hypergeometricDistribution0.getSampleSize();
    assertEquals(2, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test0916() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
    int int0 = hypergeometricDistribution0.getSampleSize();
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getNumberOfSuccesses() {
    return numberOfSuccesses;
}","public void test0917() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
    int int0 = hypergeometricDistribution0.getSampleSize();
    assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
}","/**
 * Access the number of successes.
 *
 * @return the number of successes.
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test0918() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
    int int0 = hypergeometricDistribution0.getSampleSize();
    assertEquals(0, int0);
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test1019() throws Throwable {
    Well19937c well19937c0 = new Well19937c();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1795, 1795, 0);
    double double0 = hypergeometricDistribution0.getNumericalMean();
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getNumberOfSuccesses() {
    return numberOfSuccesses;
}","public void test1020() throws Throwable {
    Well19937c well19937c0 = new Well19937c();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1795, 1795, 0);
    double double0 = hypergeometricDistribution0.getNumericalMean();
    assertEquals(1795, hypergeometricDistribution0.getNumberOfSuccesses());
}","/**
 * Access the number of successes.
 *
 * @return the number of successes.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test1021() throws Throwable {
    Well19937c well19937c0 = new Well19937c();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1795, 1795, 0);
    double double0 = hypergeometricDistribution0.getNumericalMean();
    assertEquals(1795, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test1122() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
    int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
    assertEquals(474.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getNumberOfSuccesses() {
    return numberOfSuccesses;
}","public void test1123() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
    int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
    assertEquals(474, int0);
}","/**
 * Access the number of successes.
 *
 * @return the number of successes.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test1224() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    double double0 = hypergeometricDistribution0.calculateNumericalVariance();
    assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test1225() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    double double0 = hypergeometricDistribution0.calculateNumericalVariance();
    assertEquals(1395, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public int getNumberOfSuccesses() {
    return numberOfSuccesses;
}","public void test1226() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    double double0 = hypergeometricDistribution0.calculateNumericalVariance();
    assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
}","/**
 * Access the number of successes.
 *
 * @return the number of successes.
 */"
"protected double calculateNumericalVariance() {
    final double N = getPopulationSize();
    final double m = getNumberOfSuccesses();
    final double n = getSampleSize();
    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
}","public void test1227() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    double double0 = hypergeometricDistribution0.calculateNumericalVariance();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Used by {@link #getNumericalVariance()}.
 *
 * @return the variance of this distribution
 */"
"public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
    this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);
}","public void test1328() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = null;
    try {
        hypergeometricDistribution0 = new HypergeometricDistribution(807, 807, 1880);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // sample size (1,880) must be less than or equal to population size (807)
        //
        verifyException(""org.apache.commons.math3.distribution.HypergeometricDistribution"", e);
    }
}","/**
 * Construct a new hypergeometric distribution with the specified population
 * size, number of successes in the population, and sample size.
 *
 * @param populationSize Population size.
 * @param numberOfSuccesses Number of successes in the population.
 * @param sampleSize Sample size.
 * @throws NotPositiveException if {@code numberOfSuccesses < 0}.
 * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
 * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.
 */"
"public double getNumericalVariance() {
    if (!numericalVarianceIsCalculated) {
        numericalVariance = calculateNumericalVariance();
        numericalVarianceIsCalculated = true;
    }
    return numericalVariance;
}","public void test1429() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    double double0 = hypergeometricDistribution0.getNumericalVariance();
    assertEquals(47.58413228006463, double0, 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the variance is
 * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.
 */"
"public HypergeometricDistribution(RandomGenerator rng, int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
    super(rng);
    if (populationSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize);
    }
    if (numberOfSuccesses < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
    }
    if (sampleSize < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    if (numberOfSuccesses > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true);
    }
    if (sampleSize > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true);
    }
    this.numberOfSuccesses = numberOfSuccesses;
    this.populationSize = populationSize;
    this.sampleSize = sampleSize;
}","public void test1530() throws Throwable {
    MersenneTwister mersenneTwister0 = new MersenneTwister(6722166367014452318L);
    HypergeometricDistribution hypergeometricDistribution0 = null;
    try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // population size (0)
        //
        verifyException(""org.apache.commons.math3.distribution.HypergeometricDistribution"", e);
    }
}","/**
 * Creates a new hypergeometric distribution.
 *
 * @param rng Random number generator.
 * @param populationSize Population size.
 * @param numberOfSuccesses Number of successes in the population.
 * @param sampleSize Sample size.
 * @throws NotPositiveException if {@code numberOfSuccesses < 0}.
 * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
 * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.
 * @since 3.1
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test1631() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
    double double0 = hypergeometricDistribution0.getNumericalMean();
    assertEquals(474.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test1732() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
    int int0 = hypergeometricDistribution0.getPopulationSize();
    assertEquals(474.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test1733() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
    int int0 = hypergeometricDistribution0.getPopulationSize();
    assertEquals(474, int0);
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test1834() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
    assertEquals(1395, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test1835() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test1836() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
    assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public int getNumberOfSuccesses() {
    return numberOfSuccesses;
}","public void test1837() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
    assertEquals(0, int0);
}","/**
 * Access the number of successes.
 *
 * @return the number of successes.
 */"
"public int getSupportLowerBound() {
    return FastMath.max(0, getSampleSize() + getNumberOfSuccesses() - getPopulationSize());
}","public void test1938() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSupportLowerBound();
    assertEquals(0, int0);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the lower bound of the support is
 * {@code max(0, n + m - N)}.
 *
 * @return lower bound of the support
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test1939() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSupportLowerBound();
    assertEquals(1395, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test1940() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSupportLowerBound();
    assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test1941() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSupportLowerBound();
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test2042() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSampleSize();
    assertEquals(1395, int0);
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test2043() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSampleSize();
    assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public int getNumberOfSuccesses() {
    return numberOfSuccesses;
}","public void test2044() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
    int int0 = hypergeometricDistribution0.getSampleSize();
    assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
}","/**
 * Access the number of successes.
 *
 * @return the number of successes.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test2145() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    int int0 = hypergeometricDistribution0.getSupportUpperBound();
    assertEquals(446.35752212389383, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getSupportUpperBound() {
    return FastMath.min(getNumberOfSuccesses(), getSampleSize());
}","public void test2146() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    int int0 = hypergeometricDistribution0.getSupportUpperBound();
    assertEquals(568, int0);
}","/**
 * {@inheritDoc}
 *
 * For number of successes {@code m} and sample size {@code n}, the upper
 * bound of the support is {@code min(m, n)}.
 *
 * @return upper bound of the support
 */"
"public double upperCumulativeProbability(int x) {
    double ret;
    final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x <= domain[0]) {
        ret = 1.0;
    } else if (x > domain[1]) {
        ret = 0.0;
    } else {
        ret = innerCumulativeProbability(domain[1], x, -1);
    }
    return ret;
}","public void test2247() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability(458);
    assertEquals(0.0529983853060436, double0, 0.01);
}","/**
 * For this distribution, {@code X}, this method returns {@code P(X >= x)}.
 *
 * @param x Value at which the CDF is evaluated.
 * @return the upper tail CDF for this distribution.
 * @since 1.1
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test2348() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2040));
    assertEquals(835, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test2349() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2040));
    assertEquals(835, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test2350() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2040));
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public double upperCumulativeProbability(int x) {
    double ret;
    final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x <= domain[0]) {
        ret = 1.0;
    } else if (x > domain[1]) {
        ret = 0.0;
    } else {
        ret = innerCumulativeProbability(domain[1], x, -1);
    }
    return ret;
}","public void test2351() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2040));
    assertEquals(1.0, double0, 0.01);
}","/**
 * For this distribution, {@code X}, this method returns {@code P(X >= x)}.
 *
 * @param x Value at which the CDF is evaluated.
 * @return the upper tail CDF for this distribution.
 * @since 1.1
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test2452() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability(835);
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public double upperCumulativeProbability(int x) {
    double ret;
    final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x <= domain[0]) {
        ret = 1.0;
    } else if (x > domain[1]) {
        ret = 0.0;
    } else {
        ret = innerCumulativeProbability(domain[1], x, -1);
    }
    return ret;
}","public void test2453() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability(835);
    assertEquals(0.0, double0, 0.01);
}","/**
 * For this distribution, {@code X}, this method returns {@code P(X >= x)}.
 *
 * @param x Value at which the CDF is evaluated.
 * @return the upper tail CDF for this distribution.
 * @since 1.1
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test2454() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability(835);
    assertEquals(835, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test2455() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.upperCumulativeProbability(835);
    assertEquals(835, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test2556() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.probability(835);
    assertEquals(835, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test2557() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.probability(835);
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public double probability(int x) {
    double ret;
    int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x < domain[0] || x > domain[1]) {
        ret = 0.0;
    } else {
        double p = (double) sampleSize / (double) populationSize;
        double q = (double) (populationSize - sampleSize) / (double) populationSize;
        double p1 = SaddlePointExpansion.logBinomialProbability(x, numberOfSuccesses, p, q);
        double p2 = SaddlePointExpansion.logBinomialProbability(sampleSize - x, populationSize - numberOfSuccesses, p, q);
        double p3 = SaddlePointExpansion.logBinomialProbability(sampleSize, populationSize, p, q);
        ret = FastMath.exp(p1 + p2 - p3);
    }
    return ret;
}","public void test2558() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.probability(835);
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test2559() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.probability(835);
    assertEquals(835, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test2660() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.probability((-1892));
    assertEquals(835, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test2661() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.probability((-1892));
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test2662() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.probability((-1892));
    assertEquals(835, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public double probability(int x) {
    double ret;
    int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x < domain[0] || x > domain[1]) {
        ret = 0.0;
    } else {
        double p = (double) sampleSize / (double) populationSize;
        double q = (double) (populationSize - sampleSize) / (double) populationSize;
        double p1 = SaddlePointExpansion.logBinomialProbability(x, numberOfSuccesses, p, q);
        double p2 = SaddlePointExpansion.logBinomialProbability(sampleSize - x, populationSize - numberOfSuccesses, p, q);
        double p3 = SaddlePointExpansion.logBinomialProbability(sampleSize, populationSize, p, q);
        ret = FastMath.exp(p1 + p2 - p3);
    }
    return ret;
}","public void test2663() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.probability((-1892));
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test2764() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.cumulativeProbability((-24));
    assertEquals(835, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public double cumulativeProbability(int x) {
    double ret;
    int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x < domain[0]) {
        ret = 0.0;
    } else if (x >= domain[1]) {
        ret = 1.0;
    } else {
        ret = innerCumulativeProbability(domain[0], x, 1);
    }
    return ret;
}","public void test2765() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.cumulativeProbability((-24));
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test2766() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.cumulativeProbability((-24));
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test2767() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    double double0 = hypergeometricDistribution0.cumulativeProbability((-24));
    assertEquals(835, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public HypergeometricDistribution(RandomGenerator rng, int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
    super(rng);
    if (populationSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize);
    }
    if (numberOfSuccesses < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
    }
    if (sampleSize < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    if (numberOfSuccesses > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true);
    }
    if (sampleSize > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true);
    }
    this.numberOfSuccesses = numberOfSuccesses;
    this.populationSize = populationSize;
    this.sampleSize = sampleSize;
}","public void test2868() throws Throwable {
    Well1024a well1024a0 = new Well1024a(3952L);
    HypergeometricDistribution hypergeometricDistribution0 = null;
    try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 30, 30, 1269);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // sample size (1,269) must be less than or equal to population size (30)
        //
        verifyException(""org.apache.commons.math3.distribution.HypergeometricDistribution"", e);
    }
}","/**
 * Creates a new hypergeometric distribution.
 *
 * @param rng Random number generator.
 * @param populationSize Population size.
 * @param numberOfSuccesses Number of successes in the population.
 * @param sampleSize Sample size.
 * @throws NotPositiveException if {@code numberOfSuccesses < 0}.
 * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
 * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.
 * @since 3.1
 */"
"public HypergeometricDistribution(RandomGenerator rng, int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
    super(rng);
    if (populationSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize);
    }
    if (numberOfSuccesses < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
    }
    if (sampleSize < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    if (numberOfSuccesses > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true);
    }
    if (sampleSize > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true);
    }
    this.numberOfSuccesses = numberOfSuccesses;
    this.populationSize = populationSize;
    this.sampleSize = sampleSize;
}","public void test2969() throws Throwable {
    Well44497a well44497a0 = new Well44497a(860);
    HypergeometricDistribution hypergeometricDistribution0 = null;
    try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 739, 860, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // number of successes (860) must be less than or equal to population size (739)
        //
        verifyException(""org.apache.commons.math3.distribution.HypergeometricDistribution"", e);
    }
}","/**
 * Creates a new hypergeometric distribution.
 *
 * @param rng Random number generator.
 * @param populationSize Population size.
 * @param numberOfSuccesses Number of successes in the population.
 * @param sampleSize Sample size.
 * @throws NotPositiveException if {@code numberOfSuccesses < 0}.
 * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
 * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.
 * @since 3.1
 */"
"public HypergeometricDistribution(RandomGenerator rng, int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
    super(rng);
    if (populationSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize);
    }
    if (numberOfSuccesses < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
    }
    if (sampleSize < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    if (numberOfSuccesses > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true);
    }
    if (sampleSize > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true);
    }
    this.numberOfSuccesses = numberOfSuccesses;
    this.populationSize = populationSize;
    this.sampleSize = sampleSize;
}","public void test3070() throws Throwable {
    Well512a well512a0 = new Well512a();
    HypergeometricDistribution hypergeometricDistribution0 = null;
    try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 426, 426, (byte) (-13));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // number of samples (-13)
        //
        verifyException(""org.apache.commons.math3.distribution.HypergeometricDistribution"", e);
    }
}","/**
 * Creates a new hypergeometric distribution.
 *
 * @param rng Random number generator.
 * @param populationSize Population size.
 * @param numberOfSuccesses Number of successes in the population.
 * @param sampleSize Sample size.
 * @throws NotPositiveException if {@code numberOfSuccesses < 0}.
 * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
 * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.
 * @since 3.1
 */"
"public HypergeometricDistribution(RandomGenerator rng, int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
    super(rng);
    if (populationSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize);
    }
    if (numberOfSuccesses < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
    }
    if (sampleSize < 0) {
        throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    if (numberOfSuccesses > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true);
    }
    if (sampleSize > populationSize) {
        throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true);
    }
    this.numberOfSuccesses = numberOfSuccesses;
    this.populationSize = populationSize;
    this.sampleSize = sampleSize;
}","public void test3171() throws Throwable {
    Well44497b well44497b0 = new Well44497b(178);
    HypergeometricDistribution hypergeometricDistribution0 = null;
    try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1, (-766), 5976);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // number of successes (-766)
        //
        verifyException(""org.apache.commons.math3.distribution.HypergeometricDistribution"", e);
    }
}","/**
 * Creates a new hypergeometric distribution.
 *
 * @param rng Random number generator.
 * @param populationSize Population size.
 * @param numberOfSuccesses Number of successes in the population.
 * @param sampleSize Sample size.
 * @throws NotPositiveException if {@code numberOfSuccesses < 0}.
 * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
 * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.
 * @since 3.1
 */"
"public boolean isSupportConnected() {
    return true;
}","public void test3272() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
    boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
    assertTrue(boolean0);
}","/**
 * {@inheritDoc}
 *
 * The support of this distribution is connected.
 *
 * @return {@code true}
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test3273() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
    boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
    assertEquals(474.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public int getSampleSize() {
    return sampleSize;
}","public void test3374() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    hypergeometricDistribution0.sample();
    double double0 = hypergeometricDistribution0.getNumericalVariance();
    assertEquals(835, hypergeometricDistribution0.getSampleSize());
}","/**
 * Access the sample size.
 *
 * @return the sample size.
 */"
"public int getPopulationSize() {
    return populationSize;
}","public void test3375() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    hypergeometricDistribution0.sample();
    double double0 = hypergeometricDistribution0.getNumericalVariance();
    assertEquals(835, hypergeometricDistribution0.getPopulationSize());
}","/**
 * Access the population size.
 *
 * @return the population size.
 */"
"public double getNumericalVariance() {
    if (!numericalVarianceIsCalculated) {
        numericalVariance = calculateNumericalVariance();
        numericalVarianceIsCalculated = true;
    }
    return numericalVariance;
}","public void test3376() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    hypergeometricDistribution0.sample();
    double double0 = hypergeometricDistribution0.getNumericalVariance();
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the variance is
 * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test3377() throws Throwable {
    Well1024a well1024a0 = new Well1024a();
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
    hypergeometricDistribution0.sample();
    double double0 = hypergeometricDistribution0.getNumericalVariance();
    assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public double getNumericalMean() {
    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
}","public void test3478() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    double double0 = hypergeometricDistribution0.cumulativeProbability(1130);
    assertEquals(446.35752212389383, hypergeometricDistribution0.getNumericalMean(), 0.01);
}","/**
 * {@inheritDoc}
 *
 * For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.
 */"
"public double cumulativeProbability(int x) {
    double ret;
    int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
    if (x < domain[0]) {
        ret = 0.0;
    } else if (x >= domain[1]) {
        ret = 1.0;
    } else {
        ret = innerCumulativeProbability(domain[0], x, 1);
    }
    return ret;
}","public void test3479() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    double double0 = hypergeometricDistribution0.cumulativeProbability(1130);
    assertEquals(1.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"protected double calculateNumericalVariance() {
    final double N = getPopulationSize();
    final double m = getNumberOfSuccesses();
    final double n = getSampleSize();
    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
}","public void test3580() throws Throwable {
    HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
    double double0 = hypergeometricDistribution0.calculateNumericalVariance();
    assertEquals(47.58413228006463, double0, 0.01);
}","/**
 * Used by {@link #getNumericalVariance()}.
 *
 * @return the variance of this distribution
 */"
