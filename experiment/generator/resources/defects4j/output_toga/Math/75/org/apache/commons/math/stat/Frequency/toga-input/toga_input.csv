focal_method,test_prefix,docstring
"@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((freqTable == null) ? 0 : freqTable.hashCode());
    return result;
}","public void test000() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(770L);
    frequency0.hashCode();
}","/**
 * {@inheritDoc}
 */"
"@Override
public String toString() {
    NumberFormat nf = NumberFormat.getPercentInstance();
    StringBuffer outBuffer = new StringBuffer();
    outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    Iterator<Comparable<?>> iter = freqTable.keySet().iterator();
    while (iter.hasNext()) {
        Comparable<?> value = iter.next();
        outBuffer.append(value);
        outBuffer.append('\t');
        outBuffer.append(getCount(value));
        outBuffer.append('\t');
        outBuffer.append(nf.format(getPct(value)));
        outBuffer.append('\t');
        outBuffer.append(nf.format(getCumPct(value)));
        outBuffer.append('\n');
    }
    return outBuffer.toString();
}","public void test011() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    frequency0.addValue((-2007));
    String string0 = frequency0.toString();
    assertEquals(""Value \t Freq. \t Pct. \t Cum Pct. \n-2007\t2\t100%\t100%\n"", string0);
}","/**
 * Return a string representation of this frequency
 * distribution.
 *
 * @return a string representation.
 */"
"@Deprecated
public void addValue(Object v) {
    if (v instanceof Comparable<?>) {
        addValue((Comparable<?>) v);
    } else {
        throw MathRuntimeException.createIllegalArgumentException(""class ({0}) does not implement Comparable"", v.getClass().getName());
    }
}","public void test022() throws Throwable {
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0).when(comparator0).compare(anyString(), anyString());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(31);
    Integer integer0 = new Integer(31);
    frequency0.addValue((Object) integer0);
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not Comparable,
 *         or is not comparable with previous entries
 * @deprecated use {@link #addValue(Comparable)} instead
 */"
"//-------------------------------------------------------------
/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
 */
@Deprecated
public double getPct(Object v) {
    return getCumPct((Comparable<?>) v);
}","public void test033() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('l');
    double double0 = frequency0.getPct((Object) """");
    assertEquals(0.0, double0, 0.01);
}",""
"//-------------------------------------------------------------
/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
 */
@Deprecated
public double getPct(Object v) {
    return getCumPct((Comparable<?>) v);
}","public void test044() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    double double0 = frequency0.getPct((Object) """");
    assertEquals(1.0, double0, 0.01);
}",""
"public double getPct(Comparable<?> v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCount(v) / (double) sumFreq;
}","public void test055() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(0L);
    double double0 = frequency0.getPct((Comparable<?>) 33);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(long v) {
    return getPct(Long.valueOf(v));
}","public void test066() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('');
    double double0 = frequency0.getPct(796L);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(long v) {
    return getPct(Long.valueOf(v));
}","public void test077() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    double double0 = frequency0.getPct(1L);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(int v) {
    return getPct(Long.valueOf(v));
}","public void test088() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-797));
    double double0 = frequency0.getPct((-797));
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(char v) {
    return getPct(Character.valueOf(v));
}","public void test099() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(770L);
    double double0 = frequency0.getPct('Y');
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(char v) {
    return getPct(Character.valueOf(v));
}","public void test1010() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    double double0 = frequency0.getPct(',');
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"//----------------------------------------------------------------------------------------------
/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0
 */
@Deprecated
public double getCumPct(Object v) {
    return getCumPct((Comparable<?>) v);
}","public void test1111() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('a');
    Integer integer0 = new Integer(1961);
    double double0 = frequency0.getCumPct((Object) integer0);
    assertEquals(0.0, double0, 0.01);
}",""
"public double getCumPct(Comparable<?> v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCumFreq(v) / (double) sumFreq;
}","public void test1212() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    Long long0 = Long.getLong(""QiSON~eFIdi]WTwsEb"", (-1388L));
    double double0 = frequency0.getCumPct((Comparable<?>) long0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(long v) {
    return getCumPct(Long.valueOf(v));
}","public void test1313() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable0).compareTo(any());
    frequency0.addValue(comparable0);
    double double0 = frequency0.getCumPct(2L);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(long v) {
    return getCumPct(Long.valueOf(v));
}","public void test1414() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-797));
    double double0 = frequency0.getCumPct((long) (-797));
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(int v) {
    return getCumPct(Long.valueOf(v));
}","public void test1515() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(770L);
    double double0 = frequency0.getCumPct((-2288));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(int v) {
    return getCumPct(Long.valueOf(v));
}","public void test1616() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2715L));
    double double0 = frequency0.getCumPct(520);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(char v) {
    return getCumPct(Character.valueOf(v));
}","public void test1717() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    double double0 = frequency0.getCumPct('+');
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(char v) {
    return getCumPct(Character.valueOf(v));
}","public void test1818() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-797));
    double double0 = frequency0.getCumPct('>');
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 * @deprecated replaced by {@link #getCumFreq(Comparable)} as of 2.0
 */
@Deprecated
public long getCumFreq(Object v) {
    return getCumFreq((Comparable<?>) v);
}","public void test1919() throws Throwable {
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyString(), anyString());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((Object) ""[H0Ka"");
    long long0 = frequency0.getCumFreq((Object) ""[H0Ka"");
    assertEquals(1L, long0);
}",""
"public long getCumFreq(int v) {
    return getCumFreq(Long.valueOf(v));
}","public void test2020() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-3471));
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq(1);
    assertEquals(1L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public long getCumFreq(char v) {
    return getCumFreq(Character.valueOf(v));
}","public void test2121() throws Throwable {
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyString(), anyString());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((Object) ""[H0Ka"");
    long long0 = frequency0.getCumFreq('/');
    assertEquals(1L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"@Deprecated
public long getCount(Object v) {
    return getCount((Comparable<?>) v);
}","public void test2222() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount((Object) ""org.apace.ommons.math.MathRntimeException2"");
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 * @deprecated replaced by {@link #getCount(Comparable)} as of 2.0
 */"
"@Deprecated
public long getCount(Object v) {
    return getCount((Comparable<?>) v);
}","public void test2323() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    long long0 = frequency0.getCount((Object) """");
    assertEquals(1L, long0);
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 * @deprecated replaced by {@link #getCount(Comparable)} as of 2.0
 */"
"public long getCount(long v) {
    return getCount(Long.valueOf(v));
}","public void test2424() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    long long0 = frequency0.getCount((long) (-2007));
    assertEquals(1L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public long getCount(int v) {
    return getCount(Long.valueOf(v));
}","public void test2525() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-797));
    long long0 = frequency0.getCount(3306);
    assertEquals(1L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public long getCount(char v) {
    return getCount(Character.valueOf(v));
}","public void test2626() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    long long0 = frequency0.getCount('e');
    assertEquals(1L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"//-------------------------------------------------------------
/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
 */
@Deprecated
public double getPct(Object v) {
    return getCumPct((Comparable<?>) v);
}","public void test2727() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(9);
    // Undeclared exception!
    try {
        frequency0.getPct((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",""
"//-------------------------------------------------------------
/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
 */
@Deprecated
public double getPct(Object v) {
    return getCumPct((Comparable<?>) v);
}","public void test2828() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Object object0 = new Object();
    // Undeclared exception!
    try {
        frequency0.getPct(object0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Object cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",""
"public double getPct(Comparable<?> v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCount(v) / (double) sumFreq;
}","public void test2929() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-571));
    frequency0.addValue(integer0);
    // Undeclared exception!
    try {
        frequency0.getPct((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"//----------------------------------------------------------------------------------------------
/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0
 */
@Deprecated
public double getCumPct(Object v) {
    return getCumPct((Comparable<?>) v);
}","public void test3030() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    // Undeclared exception!
    try {
        frequency0.getCumPct((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",""
"//----------------------------------------------------------------------------------------------
/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0
 */
@Deprecated
public double getCumPct(Object v) {
    return getCumPct((Comparable<?>) v);
}","public void test3131() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
    // Undeclared exception!
    try {
        frequency0.getCumPct((Object) iterator0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",""
"public double getCumPct(Comparable<?> v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCumFreq(v) / (double) sumFreq;
}","public void test3232() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(13);
    // Undeclared exception!
    try {
        frequency0.getCumPct((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 * @deprecated replaced by {@link #getCumFreq(Comparable)} as of 2.0
 */
@Deprecated
public long getCumFreq(Object v) {
    return getCumFreq((Comparable<?>) v);
}","public void test3333() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((-450));
    // Undeclared exception!
    try {
        frequency0.getCumFreq((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",""
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 * @deprecated replaced by {@link #getCumFreq(Comparable)} as of 2.0
 */
@Deprecated
public long getCumFreq(Object v) {
    return getCumFreq((Comparable<?>) v);
}","public void test3434() throws Throwable {
    Frequency frequency0 = new Frequency();
    Object object0 = new Object();
    // Undeclared exception!
    try {
        frequency0.getCumFreq(object0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Object cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}",""
"@SuppressWarnings(""unchecked"")
public long getCumFreq(Comparable<?> v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator<Comparable<?>> values = valuesIterator();
    while (values.hasNext()) {
        Comparable<?> nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test3535() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable0).compareTo(any());
    frequency0.addValue(comparable0);
    // Undeclared exception!
    try {
        frequency0.getCumFreq((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */"
"public long getCumFreq(int v) {
    return getCumFreq(Long.valueOf(v));
}","public void test3636() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(1431655765, 1431655765).when(comparable0).compareTo(any());
    Integer integer0 = new Integer((-8));
    frequency0.addValue(integer0);
    frequency0.addValue(comparable0);
    // Undeclared exception!
    try {
        frequency0.getCumFreq((-8));
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"@Deprecated
public long getCount(Object v) {
    return getCount((Comparable<?>) v);
}","public void test3737() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.getCount((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 * @deprecated replaced by {@link #getCount(Comparable)} as of 2.0
 */"
"public long getCount(Comparable<?> v) {
    if (v instanceof Integer) {
        return getCount(((Integer) v).longValue());
    }
    long result = 0;
    try {
        Long count = freqTable.get(v);
        if (count != null) {
            result = count.longValue();
        }
    } catch (ClassCastException ex) {
        // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
    }
    return result;
}","public void test3838() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.getCount((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"@Deprecated
public void addValue(Object v) {
    if (v instanceof Comparable<?>) {
        addValue((Comparable<?>) v);
    } else {
        throw MathRuntimeException.createIllegalArgumentException(""class ({0}) does not implement Comparable"", v.getClass().getName());
    }
}","public void test3939() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    // Undeclared exception!
    try {
        frequency0.addValue((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not Comparable,
 *         or is not comparable with previous entries
 * @deprecated use {@link #addValue(Comparable)} instead
 */"
"public void addValue(Integer v) {
    addValue(Long.valueOf(v.longValue()));
}","public void test4040() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    Integer integer0 = new Integer(237);
    // Undeclared exception!
    try {
        frequency0.addValue(integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Long not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 * @deprecated to be removed in math 3.0
 */"
"public void addValue(Integer v) {
    addValue(Long.valueOf(v.longValue()));
}","public void test4141() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    // Undeclared exception!
    try {
        frequency0.addValue((Integer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 * @deprecated to be removed in math 3.0
 */"
"public void addValue(Comparable<?> v) {
    Comparable<?> obj = v;
    if (v instanceof Integer) {
        obj = Long.valueOf(((Integer) v).longValue());
    }
    try {
        Long count = freqTable.get(obj);
        if (count == null) {
            freqTable.put(obj, Long.valueOf(1));
        } else {
            freqTable.put(obj, Long.valueOf(count.longValue() + 1));
        }
    } catch (ClassCastException ex) {
        //TreeMap will throw ClassCastException if v is not comparable
        throw MathRuntimeException.createIllegalArgumentException(""instance of class {0} not comparable to existing values"", v.getClass().getName());
    }
}","public void test4242() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('a');
    Integer integer0 = new Integer(1961);
    // Undeclared exception!
    try {
        frequency0.addValue((Comparable<?>) integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Integer not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
 */"
"public void addValue(Comparable<?> v) {
    Comparable<?> obj = v;
    if (v instanceof Integer) {
        obj = Long.valueOf(((Integer) v).longValue());
    }
    try {
        Long count = freqTable.get(obj);
        if (count == null) {
            freqTable.put(obj, Long.valueOf(1));
        } else {
            freqTable.put(obj, Long.valueOf(count.longValue() + 1));
        }
    } catch (ClassCastException ex) {
        //TreeMap will throw ClassCastException if v is not comparable
        throw MathRuntimeException.createIllegalArgumentException(""instance of class {0} not comparable to existing values"", v.getClass().getName());
    }
}","public void test4343() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.addValue((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
 */"
"public void addValue(int v) {
    addValue(Long.valueOf(v));
}","public void test4444() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('\'');
    // Undeclared exception!
    try {
        frequency0.addValue((-148));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Long not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 */"
"public void addValue(char v) {
    addValue(Character.valueOf(v));
}","public void test4545() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(770L);
    // Undeclared exception!
    try {
        frequency0.addValue('Y');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Character not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 */"
"public double getCumPct(Comparable<?> v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCumFreq(v) / (double) sumFreq;
}","public void test4646() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    double double0 = frequency0.getCumPct((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n-2007\t1\t100%\t100%\n"");
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(Comparable<?> v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCumFreq(v) / (double) sumFreq;
}","public void test4747() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Comparable<Frequency> comparable0 = (Comparable<Frequency>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    double double0 = frequency0.getCumPct(comparable0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"@SuppressWarnings(""unchecked"")
public long getCumFreq(Comparable<?> v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator<Comparable<?>> values = valuesIterator();
    while (values.hasNext()) {
        Comparable<?> nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test4848() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(1431655765, 1, (-594), 0).when(comparable0).compareTo(any());
    long long0 = frequency0.getCumFreq(comparable0);
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */"
"@SuppressWarnings(""unchecked"")
public long getCumFreq(Comparable<?> v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator<Comparable<?>> values = valuesIterator();
    while (values.hasNext()) {
        Comparable<?> nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test4949() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(1610612736, (-687)).when(comparable0).compareTo(any());
    long long0 = frequency0.getCumFreq(comparable0);
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */"
"@SuppressWarnings(""unchecked"")
public long getCumFreq(Comparable<?> v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator<Comparable<?>> values = valuesIterator();
    while (values.hasNext()) {
        Comparable<?> nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test5050() throws Throwable {
    Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class), any(org.apache.commons.math.stat.Frequency.class));
    Frequency frequency0 = new Frequency(comparator0);
    Long long0 = new Long((-875L));
    frequency0.addValue('0');
    long long1 = frequency0.getCumFreq((Comparable<?>) long0);
    assertEquals(1L, long1);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */"
"@SuppressWarnings(""unchecked"")
public long getCumFreq(Comparable<?> v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator<Comparable<?>> values = valuesIterator();
    while (values.hasNext()) {
        Comparable<?> nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test5151() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    Integer integer0 = new Integer((-617));
    long long0 = frequency0.getCumFreq((Comparable<?>) integer0);
    assertEquals(1L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */"
"@SuppressWarnings(""unchecked"")
public long getCumFreq(Comparable<?> v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator<Comparable<?>> values = valuesIterator();
    while (values.hasNext()) {
        Comparable<?> nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test5252() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */"
"public double getPct(Comparable<?> v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCount(v) / (double) sumFreq;
}","public void test5353() throws Throwable {
    Frequency frequency0 = new Frequency();
    double double0 = frequency0.getPct((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(Comparable<?> v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCount(v) / (double) sumFreq;
}","public void test5454() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    double double0 = frequency0.getPct((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public long getCount(Comparable<?> v) {
    if (v instanceof Integer) {
        return getCount(((Integer) v).longValue());
    }
    long result = 0;
    try {
        Long count = freqTable.get(v);
        if (count != null) {
            result = count.longValue();
        }
    } catch (ClassCastException ex) {
        // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
    }
    return result;
}","public void test5555() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable0).compareTo(any());
    frequency0.addValue(comparable0);
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable1).compareTo(any());
    long long0 = frequency0.getCount(comparable1);
    assertEquals(1L, long0);
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public long getCount(Comparable<?> v) {
    if (v instanceof Integer) {
        return getCount(((Integer) v).longValue());
    }
    long result = 0;
    try {
        Long count = freqTable.get(v);
        if (count != null) {
            result = count.longValue();
        }
    } catch (ClassCastException ex) {
        // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
    }
    return result;
}","public void test5656() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"//-------------------------------------------------------------------------
/**
 * Returns the sum of all frequencies.
 *
 * @return the total frequency count.
 */
public long getSumFreq() {
    long result = 0;
    Iterator<Long> iterator = freqTable.values().iterator();
    while (iterator.hasNext()) {
        result += iterator.next().longValue();
    }
    return result;
}","public void test5757() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('a');
    long long0 = frequency0.getSumFreq();
    assertEquals(1L, long0);
}",""
"//-------------------------------------------------------------------------
/**
 * Returns the sum of all frequencies.
 *
 * @return the total frequency count.
 */
public long getSumFreq() {
    long result = 0;
    Iterator<Long> iterator = freqTable.values().iterator();
    while (iterator.hasNext()) {
        result += iterator.next().longValue();
    }
    return result;
}","public void test5858() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getSumFreq();
    assertEquals(0L, long0);
}",""
"public void addValue(Comparable<?> v) {
    Comparable<?> obj = v;
    if (v instanceof Integer) {
        obj = Long.valueOf(((Integer) v).longValue());
    }
    try {
        Long count = freqTable.get(obj);
        if (count == null) {
            freqTable.put(obj, Long.valueOf(1));
        } else {
            freqTable.put(obj, Long.valueOf(count.longValue() + 1));
        }
    } catch (ClassCastException ex) {
        //TreeMap will throw ClassCastException if v is not comparable
        throw MathRuntimeException.createIllegalArgumentException(""instance of class {0} not comparable to existing values"", v.getClass().getName());
    }
}","public void test5959() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer(1961);
    frequency0.addValue((Comparable<?>) integer0);
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
 */"
"public long getCount(long v) {
    return getCount(Long.valueOf(v));
}","public void test6060() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCount((long) (-2007));
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (!(obj instanceof Frequency))
        return false;
    Frequency other = (Frequency) obj;
    if (freqTable == null) {
        if (other.freqTable != null)
            return false;
    } else if (!freqTable.equals(other.freqTable))
        return false;
    return true;
}","public void test6161() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""instance of class {0} not comparableto exiting values"");
    Frequency frequency1 = new Frequency();
    boolean boolean0 = frequency0.equals(frequency1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (!(obj instanceof Frequency))
        return false;
    Frequency other = (Frequency) obj;
    if (freqTable == null) {
        if (other.freqTable != null)
            return false;
    } else if (!freqTable.equals(other.freqTable))
        return false;
    return true;
}","public void test6262() throws Throwable {
    Frequency frequency0 = new Frequency();
    Frequency frequency1 = new Frequency();
    boolean boolean0 = frequency0.equals(frequency1);
    assertTrue(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (!(obj instanceof Frequency))
        return false;
    Frequency other = (Frequency) obj;
    if (freqTable == null) {
        if (other.freqTable != null)
            return false;
    } else if (!freqTable.equals(other.freqTable))
        return false;
    return true;
}","public void test6363() throws Throwable {
    Frequency frequency0 = new Frequency();
    boolean boolean0 = frequency0.equals((Object) null);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (!(obj instanceof Frequency))
        return false;
    Frequency other = (Frequency) obj;
    if (freqTable == null) {
        if (other.freqTable != null)
            return false;
    } else if (!freqTable.equals(other.freqTable))
        return false;
    return true;
}","public void test6464() throws Throwable {
    Frequency frequency0 = new Frequency();
    boolean boolean0 = frequency0.equals(frequency0);
    assertTrue(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (!(obj instanceof Frequency))
        return false;
    Frequency other = (Frequency) obj;
    if (freqTable == null) {
        if (other.freqTable != null)
            return false;
    } else if (!freqTable.equals(other.freqTable))
        return false;
    return true;
}","public void test6565() throws Throwable {
    Frequency frequency0 = new Frequency();
    boolean boolean0 = frequency0.equals(""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"public long getCumFreq(long v) {
    return getCumFreq(Long.valueOf(v));
}","public void test6666() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-571));
    frequency0.addValue(integer0);
    frequency0.addValue(9);
    long long0 = frequency0.getCumFreq(1L);
    assertEquals(1L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public long getCumFreq(long v) {
    return getCumFreq(Long.valueOf(v));
}","public void test6767() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(9);
    long long0 = frequency0.getCumFreq(1L);
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 * @deprecated replaced by {@link #getCumFreq(Comparable)} as of 2.0
 */
@Deprecated
public long getCumFreq(Object v) {
    return getCumFreq((Comparable<?>) v);
}","public void test6868() throws Throwable {
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(10, 10, 10, (-872), 10).when(comparator0).compare(anyString(), anyString());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n"");
    long long0 = frequency0.getCumFreq((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n"");
    assertEquals(0L, long0);
}",""
"public void addValue(Comparable<?> v) {
    Comparable<?> obj = v;
    if (v instanceof Integer) {
        obj = Long.valueOf(((Integer) v).longValue());
    }
    try {
        Long count = freqTable.get(obj);
        if (count == null) {
            freqTable.put(obj, Long.valueOf(1));
        } else {
            freqTable.put(obj, Long.valueOf(count.longValue() + 1));
        }
    } catch (ClassCastException ex) {
        //TreeMap will throw ClassCastException if v is not comparable
        throw MathRuntimeException.createIllegalArgumentException(""instance of class {0} not comparable to existing values"", v.getClass().getName());
    }
}","public void test6969() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    frequency0.addValue((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
 */"
"@Deprecated
public void addValue(Object v) {
    if (v instanceof Comparable<?>) {
        addValue((Comparable<?>) v);
    } else {
        throw MathRuntimeException.createIllegalArgumentException(""class ({0}) does not implement Comparable"", v.getClass().getName());
    }
}","public void test7070() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    // Undeclared exception!
    try {
        frequency0.addValue((Object) frequency0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // class (org.apache.commons.math.stat.Frequency) does not implement Comparable
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not Comparable,
 *         or is not comparable with previous entries
 * @deprecated use {@link #addValue(Comparable)} instead
 */"
"public long getCount(Comparable<?> v) {
    if (v instanceof Integer) {
        return getCount(((Integer) v).longValue());
    }
    long result = 0;
    try {
        Long count = freqTable.get(v);
        if (count != null) {
            result = count.longValue();
        }
    } catch (ClassCastException ex) {
        // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
    }
    return result;
}","public void test7171() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Integer integer0 = new Integer((-617));
    long long0 = frequency0.getCount((Comparable<?>) integer0);
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public double getPct(int v) {
    return getPct(Long.valueOf(v));
}","public void test7272() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-542));
    frequency0.addValue(integer0);
    double double0 = frequency0.getPct(0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public long getCount(int v) {
    return getCount(Long.valueOf(v));
}","public void test7373() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCount((-2007));
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"@Deprecated
public long getCount(Object v) {
    return getCount((Comparable<?>) v);
}","public void test7474() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
    // Undeclared exception!
    try {
        frequency0.getCount((Object) iterator0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 * @deprecated replaced by {@link #getCount(Comparable)} as of 2.0
 */"
"public void addValue(long v) {
    addValue(Long.valueOf(v));
}","public void test7575() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('#');
    // Undeclared exception!
    try {
        frequency0.addValue(69L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // instance of class java.lang.Long not comparable to existing values
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 */"
"public long getCumFreq(char v) {
    return getCumFreq(Character.valueOf(v));
}","public void test7676() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq(':');
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public long getCount(char v) {
    return getCount(Character.valueOf(v));
}","public void test7777() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount('b');
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"//----------------------------------------------------------------------------------------------
/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0
 */
@Deprecated
public double getCumPct(Object v) {
    return getCumPct((Comparable<?>) v);
}","public void test7878() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-2007));
    Integer integer0 = new Integer((-617));
    double double0 = frequency0.getCumPct((Object) integer0);
    assertEquals(1.0, double0, 0.01);
}",""
"public void clear() {
    freqTable.clear();
}","public void test7979() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.clear();
}","/**
 * Clears the frequency table
 */"
"public long getCumFreq(int v) {
    return getCumFreq(Long.valueOf(v));
}","public void test8080() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq((-8));
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"@SuppressWarnings(""unchecked"")
public long getCumFreq(Comparable<?> v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator<Comparable<?>> values = valuesIterator();
    while (values.hasNext()) {
        Comparable<?> nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test8181() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(1, 582, (-1234), 73).when(comparable0).compareTo(any());
    long long0 = frequency0.getCumFreq(comparable0);
    assertEquals(1L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */"
