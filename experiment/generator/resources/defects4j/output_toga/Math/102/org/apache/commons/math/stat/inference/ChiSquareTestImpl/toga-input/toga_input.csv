focal_method,test_prefix,docstring
"public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom(expected.length - 1.0);
    return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));
}","public void test000() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (-345.5);
    long[] longArray0 = new long[8];
    try {
        chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts must be non-negative and expected counts must be postive
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquare(long[][] counts) throws IllegalArgumentException {
    checkArray(counts);
    int nRows = counts.length;
    int nCols = counts[0].length;
    // compute row, column and total sums
    double[] rowSum = new double[nRows];
    double[] colSum = new double[nCols];
    double total = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            rowSum[row] += (double) counts[row][col];
            colSum[col] += (double) counts[row][col];
            total += (double) counts[row][col];
        }
    }
    // compute expected counts and chi-square
    double sumSq = 0.0d;
    double expected = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            expected = (rowSum[row] * colSum[col]) / total;
            sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected)) / expected;
        }
    }
    return sumSq;
}","public void test011() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) null);
    long[][] longArray0 = new long[2][3];
    long[] longArray1 = new long[9];
    longArray0[0] = longArray1;
    try {
        chiSquareTestImpl0.chiSquare(longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Input table must be rectangular
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
}","public void test022() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[0] = 32L;
    long[] longArray1 = new long[2];
    longArray1[1] = 32L;
    boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray1, longArray0, 6.661338147750939E-16);
    assertFalse(boolean0);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
}","public void test033() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[7];
    try {
        chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: 0.0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(counts) < alpha);
}","public void test044() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[2][5];
    long[] longArray1 = new long[2];
    longArray1[0] = 32L;
    longArray0[0] = longArray1;
    long[] longArray2 = new long[2];
    longArray2[1] = 32L;
    longArray0[1] = longArray2;
    boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, 6.661338147750939E-16);
    assertFalse(boolean0);
}","/**
 * @param counts array representation of 2-way table
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(counts) < alpha);
}","public void test055() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[8][9];
    try {
        chiSquareTestImpl0.chiSquareTest(longArray0, (double) 0L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: 0.0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(expected, observed) < alpha);
}","public void test066() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[4];
    try {
        chiSquareTestImpl0.chiSquareTest(doubleArray0, (long[]) null, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: 0.0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {
    if ((expected.length < 2) || (expected.length != observed.length)) {
        throw new IllegalArgumentException(""observed, expected array lengths incorrect"");
    }
    if (!isPositive(expected) || !isNonNegative(observed)) {
        throw new IllegalArgumentException(""observed counts must be non-negative and expected counts must be postive"");
    }
    double sumSq = 0.0d;
    double dev = 0.0d;
    for (int i = 0; i < observed.length; i++) {
        dev = ((double) observed[i] - expected[i]);
        sumSq += dev * dev / expected[i];
    }
    return sumSq;
}","public void test077() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[3];
    long[] longArray0 = new long[6];
    try {
        chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed, expected array lengths incorrect
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 * or length is less than 2
 */"
"public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom((double) observed1.length - 1);
    return 1 - distribution.cumulativeProbability(chiSquareDataSetsComparison(observed1, observed2));
}","public void test088() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[4];
    longArray0[0] = 594L;
    longArray0[1] = 6806558058485689L;
    longArray0[2] = 1229L;
    longArray0[3] = 6808107201675025L;
    double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom((double) observed1.length - 1);
    return 1 - distribution.cumulativeProbability(chiSquareDataSetsComparison(observed1, observed2));
}","public void test099() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[1] = 32L;
    longArray0[0] = 1805L;
    long[] longArray1 = new long[2];
    longArray1[1] = 32L;
    double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1);
    assertEquals((-1.7541523789077473E-14), double0, 0.01);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {
    checkArray(counts);
    double df = ((double) counts.length - 1) * ((double) counts[0].length - 1);
    distribution.setDegreesOfFreedom(df);
    return 1 - distribution.cumulativeProbability(chiSquare(counts));
}","public void test1010() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[0] = 32L;
    long[] longArray1 = new long[2];
    longArray1[1] = 32L;
    long[][] longArray2 = new long[7][7];
    longArray2[0] = longArray0;
    longArray2[1] = longArray1;
    longArray2[2] = longArray0;
    longArray2[3] = longArray1;
    longArray2[4] = longArray0;
    longArray2[5] = longArray1;
    longArray2[6] = longArray1;
    double double0 = chiSquareTestImpl0.chiSquareTest(longArray2);
    assertEquals(0.0, double0, 0.01);
}","/**
 * @param counts array representation of 2-way table
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {
    checkArray(counts);
    double df = ((double) counts.length - 1) * ((double) counts[0].length - 1);
    distribution.setDegreesOfFreedom(df);
    return 1 - distribution.cumulativeProbability(chiSquare(counts));
}","public void test1111() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[2][5];
    long[] longArray1 = new long[2];
    longArray1[0] = 32L;
    longArray1[1] = 8977L;
    longArray0[0] = longArray1;
    longArray0[1] = longArray1;
    double double0 = chiSquareTestImpl0.chiSquareTest(longArray0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * @param counts array representation of 2-way table
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {
    checkArray(counts);
    double df = ((double) counts.length - 1) * ((double) counts[0].length - 1);
    distribution.setDegreesOfFreedom(df);
    return 1 - distribution.cumulativeProbability(chiSquare(counts));
}","public void test1212() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[2][5];
    long[] longArray1 = new long[2];
    longArray1[0] = 32L;
    longArray1[1] = 8977L;
    longArray0[0] = longArray1;
    long[] longArray2 = new long[2];
    longArray2[0] = 4L;
    longArray2[1] = 32L;
    longArray0[1] = longArray2;
    double double0 = chiSquareTestImpl0.chiSquareTest(longArray0);
    assertEquals((-1.7763568394002505E-15), double0, 0.01);
}","/**
 * @param counts array representation of 2-way table
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double getDegreesOfFreedom() {
    return getGamma().getAlpha() * 2.0;
}","public void test1313() throws Throwable {
    ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(996.0);
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl(chiSquaredDistributionImpl0);
    long[] longArray0 = new long[3];
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (double) 909L;
    doubleArray0[1] = (double) 412L;
    doubleArray0[2] = (double) 412L;
    double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
    assertEquals(2.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01);
}","/**
 * Access the degrees of freedom.
 * @return the degrees of freedom.
 */"
"public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom(expected.length - 1.0);
    return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));
}","public void test1314() throws Throwable {
    ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(996.0);
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl(chiSquaredDistributionImpl0);
    long[] longArray0 = new long[3];
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (double) 909L;
    doubleArray0[1] = (double) 412L;
    doubleArray0[2] = (double) 412L;
    double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom(expected.length - 1.0);
    return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));
}","public void test1415() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) 32L;
    doubleArray0[1] = (double) 32L;
    double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
    assertEquals(6.661338147750939E-16, double0, 0.01);
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom(expected.length - 1.0);
    return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));
}","public void test1516() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[0] = 32L;
    longArray0[1] = 8977L;
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 0.7355596401791559;
    doubleArray0[1] = (double) 8977L;
    double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
    assertEquals((-4.618527782440651E-14), double0, 0.01);
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquare(long[][] counts) throws IllegalArgumentException {
    checkArray(counts);
    int nRows = counts.length;
    int nCols = counts[0].length;
    // compute row, column and total sums
    double[] rowSum = new double[nRows];
    double[] colSum = new double[nCols];
    double total = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            rowSum[row] += (double) counts[row][col];
            colSum[col] += (double) counts[row][col];
            total += (double) counts[row][col];
        }
    }
    // compute expected counts and chi-square
    double sumSq = 0.0d;
    double expected = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            expected = (rowSum[row] * colSum[col]) / total;
            sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected)) / expected;
        }
    }
    return sumSq;
}","public void test1617() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[3];
    longArray0[0] = 9291L;
    longArray0[1] = 9291L;
    longArray0[2] = 9291L;
    long[][] longArray1 = new long[5][7];
    longArray1[0] = longArray0;
    longArray1[1] = longArray0;
    longArray1[2] = longArray0;
    longArray1[3] = longArray0;
    longArray1[4] = longArray0;
    double double0 = chiSquareTestImpl0.chiSquare(longArray1);
    assertEquals(0.0, double0, 0.01);
}","/**
 * @param counts array representation of 2-way table
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquare(long[][] counts) throws IllegalArgumentException {
    checkArray(counts);
    int nRows = counts.length;
    int nCols = counts[0].length;
    // compute row, column and total sums
    double[] rowSum = new double[nRows];
    double[] colSum = new double[nCols];
    double total = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            rowSum[row] += (double) counts[row][col];
            colSum[col] += (double) counts[row][col];
            total += (double) counts[row][col];
        }
    }
    // compute expected counts and chi-square
    double sumSq = 0.0d;
    double expected = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            expected = (rowSum[row] * colSum[col]) / total;
            sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected)) / expected;
        }
    }
    return sumSq;
}","public void test1718() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[6];
    longArray0[0] = 2768L;
    long[][] longArray1 = new long[8][9];
    longArray1[0] = longArray0;
    longArray1[1] = longArray0;
    longArray1[2] = longArray0;
    longArray1[3] = longArray0;
    longArray1[4] = longArray0;
    long[] longArray2 = new long[6];
    longArray2[1] = 2768L;
    longArray2[2] = 2454L;
    longArray2[3] = 2768L;
    longArray2[4] = 2454L;
    longArray2[5] = 2454L;
    longArray1[5] = longArray2;
    longArray1[6] = longArray0;
    longArray1[7] = longArray0;
    double double0 = chiSquareTestImpl0.chiSquare(longArray1);
    assertEquals(32274.000000000004, double0, 0.01);
}","/**
 * @param counts array representation of 2-way table
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
}","public void test1819() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[0] = 8977L;
    long[] longArray1 = new long[2];
    longArray1[1] = 32L;
    // Undeclared exception!
    chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1, 0.5);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
}","public void test1920() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquareTestDataSetsComparison((long[]) null, (long[]) null, 0.10231944551008393);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom((double) observed1.length - 1);
    return 1 - distribution.cumulativeProbability(chiSquareDataSetsComparison(observed1, observed2));
}","public void test2021() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[0] = 8977L;
    long[] longArray1 = new long[2];
    longArray1[1] = 32L;
    // Undeclared exception!
    chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom((double) observed1.length - 1);
    return 1 - distribution.cumulativeProbability(chiSquareDataSetsComparison(observed1, observed2));
}","public void test2122() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquareTestDataSetsComparison((long[]) null, (long[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(counts) < alpha);
}","public void test2223() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquareTest((long[][]) null, 1.580887032249125E-4);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {
    checkArray(counts);
    double df = ((double) counts.length - 1) * ((double) counts[0].length - 1);
    distribution.setDegreesOfFreedom(df);
    return 1 - distribution.cumulativeProbability(chiSquare(counts));
}","public void test2324() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[2][5];
    long[] longArray1 = new long[2];
    longArray1[1] = 8977L;
    longArray0[0] = longArray1;
    long[] longArray2 = new long[2];
    longArray2[0] = 8977L;
    longArray0[1] = longArray2;
    // Undeclared exception!
    chiSquareTestImpl0.chiSquareTest(longArray0);
}","/**
 * @param counts array representation of 2-way table
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {
    checkArray(counts);
    double df = ((double) counts.length - 1) * ((double) counts[0].length - 1);
    distribution.setDegreesOfFreedom(df);
    return 1 - distribution.cumulativeProbability(chiSquare(counts));
}","public void test2425() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquareTest((long[][]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(expected, observed) < alpha);
}","public void test2526() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 3086.612227273;
    doubleArray0[1] = 36.097;
    // Undeclared exception!
    chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, 0.5);
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(expected, observed) < alpha);
}","public void test2627() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[6];
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquareTest(doubleArray0, (long[]) null, 1.0E-14);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom(expected.length - 1.0);
    return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));
}","public void test2728() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 2184.7654358368245;
    doubleArray0[1] = 2184.7654358368245;
    long[] longArray0 = new long[2];
    // Undeclared exception!
    chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom(expected.length - 1.0);
    return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));
}","public void test2829() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[8];
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquareTest(doubleArray0, (long[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test2930() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquareDataSetsComparison((long[]) null, (long[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquare(long[][] counts) throws IllegalArgumentException {
    checkArray(counts);
    int nRows = counts.length;
    int nCols = counts[0].length;
    // compute row, column and total sums
    double[] rowSum = new double[nRows];
    double[] colSum = new double[nCols];
    double total = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            rowSum[row] += (double) counts[row][col];
            colSum[col] += (double) counts[row][col];
            total += (double) counts[row][col];
        }
    }
    // compute expected counts and chi-square
    double sumSq = 0.0d;
    double expected = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            expected = (rowSum[row] * colSum[col]) / total;
            sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected)) / expected;
        }
    }
    return sumSq;
}","public void test3031() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) null);
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquare((long[][]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {
    if ((expected.length < 2) || (expected.length != observed.length)) {
        throw new IllegalArgumentException(""observed, expected array lengths incorrect"");
    }
    if (!isPositive(expected) || !isNonNegative(observed)) {
        throw new IllegalArgumentException(""observed counts must be non-negative and expected counts must be postive"");
    }
    double sumSq = 0.0d;
    double dev = 0.0d;
    for (int i = 0; i < observed.length; i++) {
        dev = ((double) observed[i] - expected[i]);
        sumSq += dev * dev / expected[i];
    }
    return sumSq;
}","public void test3132() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[7];
    // Undeclared exception!
    try {
        chiSquareTestImpl0.chiSquare((double[]) null, longArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 * or length is less than 2
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test3233() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) null);
    long[] longArray0 = new long[9];
    longArray0[1] = (-2062L);
    try {
        chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts must be non-negative
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test3334() throws Throwable {
    GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(1686.38465643, 1686.38465643);
    ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(1686.38465643, gammaDistributionImpl0);
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl(chiSquaredDistributionImpl0);
    long[] longArray0 = new long[4];
    long[] longArray1 = new long[0];
    try {
        chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // oberved1, observed2 array lengths incorrect
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {
    if ((expected.length < 2) || (expected.length != observed.length)) {
        throw new IllegalArgumentException(""observed, expected array lengths incorrect"");
    }
    if (!isPositive(expected) || !isNonNegative(observed)) {
        throw new IllegalArgumentException(""observed counts must be non-negative and expected counts must be postive"");
    }
    double sumSq = 0.0d;
    double dev = 0.0d;
    for (int i = 0; i < observed.length; i++) {
        dev = ((double) observed[i] - expected[i]);
        sumSq += dev * dev / expected[i];
    }
    return sumSq;
}","public void test3435() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 3086.612227273;
    doubleArray0[1] = 36.097;
    double double0 = chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
    assertEquals(3122.709227273, double0, 0.01);
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 * or length is less than 2
 */"
"public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {
    if ((expected.length < 2) || (expected.length != observed.length)) {
        throw new IllegalArgumentException(""observed, expected array lengths incorrect"");
    }
    if (!isPositive(expected) || !isNonNegative(observed)) {
        throw new IllegalArgumentException(""observed counts must be non-negative and expected counts must be postive"");
    }
    double sumSq = 0.0d;
    double dev = 0.0d;
    for (int i = 0; i < observed.length; i++) {
        dev = ((double) observed[i] - expected[i]);
        sumSq += dev * dev / expected[i];
    }
    return sumSq;
}","public void test3536() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[2];
    long[] longArray0 = new long[2];
    try {
        chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts must be non-negative and expected counts must be postive
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 * or length is less than 2
 */"
"public void setDistribution(ChiSquaredDistribution value) {
    distribution = value;
}","public void test3637() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) null);
    chiSquareTestImpl0.setDistribution((ChiSquaredDistribution) null);
}","/**
 * Modify the distribution used to compute inference statistics.
 *
 * @param value
 *            the new distribution
 * @since 1.2
 */"
"public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {
    checkArray(counts);
    double df = ((double) counts.length - 1) * ((double) counts[0].length - 1);
    distribution.setDegreesOfFreedom(df);
    return 1 - distribution.cumulativeProbability(chiSquare(counts));
}","public void test3738() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[2][5];
    long[] longArray1 = new long[2];
    longArray0[0] = longArray1;
    long[] longArray2 = new long[2];
    longArray2[0] = (-1L);
    longArray0[1] = longArray2;
    try {
        chiSquareTestImpl0.chiSquareTest(longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // All entries in input 2-way table must be non-negative
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquare(long[][] counts) throws IllegalArgumentException {
    checkArray(counts);
    int nRows = counts.length;
    int nCols = counts[0].length;
    // compute row, column and total sums
    double[] rowSum = new double[nRows];
    double[] colSum = new double[nCols];
    double total = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            rowSum[row] += (double) counts[row][col];
            colSum[col] += (double) counts[row][col];
            total += (double) counts[row][col];
        }
    }
    // compute expected counts and chi-square
    double sumSq = 0.0d;
    double expected = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            expected = (rowSum[row] * colSum[col]) / total;
            sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected)) / expected;
        }
    }
    return sumSq;
}","public void test3839() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[11][4];
    long[] longArray1 = new long[19];
    longArray0[6] = longArray1;
    try {
        chiSquareTestImpl0.chiSquare(longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Input table must be rectangular
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquare(long[][] counts) throws IllegalArgumentException {
    checkArray(counts);
    int nRows = counts.length;
    int nCols = counts[0].length;
    // compute row, column and total sums
    double[] rowSum = new double[nRows];
    double[] colSum = new double[nCols];
    double total = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            rowSum[row] += (double) counts[row][col];
            colSum[col] += (double) counts[row][col];
            total += (double) counts[row][col];
        }
    }
    // compute expected counts and chi-square
    double sumSq = 0.0d;
    double expected = 0.0d;
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            expected = (rowSum[row] * colSum[col]) / total;
            sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected)) / expected;
        }
    }
    return sumSq;
}","public void test3940() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[1][3];
    try {
        chiSquareTestImpl0.chiSquare(longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Input table must have at least two rows
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
}","public void test4041() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[3];
    longArray0[0] = 9291L;
    longArray0[1] = 9291L;
    longArray0[2] = 9291L;
    boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, 0.5);
    assertFalse(boolean0);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
}","public void test4142() throws Throwable {
    long[] longArray0 = new long[6];
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    try {
        chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, (double) 6L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: 6.0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
}","public void test4243() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[3];
    try {
        chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, 0.5);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts cannot all be 0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
}","public void test4344() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[23];
    try {
        chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, (-1.0));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: -1.0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test4445() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[0] = 32L;
    longArray0[1] = 8977L;
    long[] longArray1 = new long[2];
    longArray1[1] = 32L;
    double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray1, longArray0);
    assertEquals(0.11406784899958394, double0, 0.01);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test4546() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[0] = 32L;
    long[] longArray1 = new long[2];
    longArray1[1] = 32L;
    double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray1, longArray0);
    assertEquals(64.0, double0, 0.01);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test4647() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[0] = 32L;
    longArray0[1] = 8977L;
    double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test4748() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    longArray0[1] = 8977L;
    long[] longArray1 = new long[2];
    longArray1[1] = 32L;
    try {
        chiSquareTestImpl0.chiSquareDataSetsComparison(longArray1, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts must not both be zero
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test4849() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    long[] longArray1 = new long[2];
    longArray1[0] = (-1L);
    try {
        chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts must be non-negative
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom((double) observed1.length - 1);
    return 1 - distribution.cumulativeProbability(chiSquareDataSetsComparison(observed1, observed2));
}","public void test4950() throws Throwable {
    ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(0.5);
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl(chiSquaredDistributionImpl0);
    long[] longArray0 = new long[9];
    longArray0[8] = (-1507L);
    try {
        chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts must be non-negative
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test5051() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    try {
        chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts cannot all be 0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {
    // Make sure lengths are same
    if ((observed1.length < 2) || (observed1.length != observed2.length)) {
        throw new IllegalArgumentException(""oberved1, observed2 array lengths incorrect"");
    }
    // Ensure non-negative counts
    if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
        throw new IllegalArgumentException(""observed counts must be non-negative"");
    }
    // Compute and compare count sums
    long countSum1 = 0;
    long countSum2 = 0;
    boolean unequalCounts = false;
    double weight = 0.0;
    for (int i = 0; i < observed1.length; i++) {
        countSum1 += observed1[i];
        countSum2 += observed2[i];
    }
    // Ensure neither sample is uniformly 0
    if (countSum1 * countSum2 == 0) {
        throw new IllegalArgumentException(""observed counts cannot all be 0"");
    }
    // Compare and compute weight only if different
    unequalCounts = (countSum1 != countSum2);
    if (unequalCounts) {
        weight = Math.sqrt((double) countSum1 / (double) countSum2);
    }
    // Compute ChiSquare statistic
    double sumSq = 0.0d;
    double dev = 0.0d;
    double obs1 = 0.0d;
    double obs2 = 0.0d;
    for (int i = 0; i < observed1.length; i++) {
        if (observed1[i] == 0 && observed2[i] == 0) {
            throw new IllegalArgumentException(""observed counts must not both be zero"");
        } else {
            obs1 = (double) observed1[i];
            obs2 = (double) observed2[i];
            if (unequalCounts) {
                // apply weights
                dev = obs1 / weight - obs2 * weight;
            } else {
                dev = obs1 - obs2;
            }
            sumSq += (dev * dev) / (obs1 + obs2);
        }
    }
    return sumSq;
}","public void test5152() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[0];
    try {
        chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // oberved1, observed2 array lengths incorrect
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 */"
"public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(counts) < alpha);
}","public void test5253() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[2][5];
    long[] longArray1 = new long[2];
    longArray1[0] = 32L;
    longArray0[0] = longArray1;
    long[] longArray2 = new long[2];
    longArray2[1] = 32L;
    longArray0[1] = longArray2;
    boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, 2.1743961811521265E-4);
    assertTrue(boolean0);
}","/**
 * @param counts array representation of 2-way table
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(counts) < alpha);
}","public void test5354() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    long[][] longArray1 = new long[5][0];
    longArray1[0] = longArray0;
    longArray1[1] = longArray0;
    longArray1[2] = longArray0;
    longArray1[3] = longArray0;
    longArray1[4] = longArray0;
    boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray1, 0.5);
    assertFalse(boolean0);
}","/**
 * @param counts array representation of 2-way table
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(counts) < alpha);
}","public void test5455() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[8][1];
    try {
        chiSquareTestImpl0.chiSquareTest(longArray0, (double) 737L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: 737.0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(counts) < alpha);
}","public void test5556() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[3][3];
    try {
        chiSquareTestImpl0.chiSquareTest(longArray0, (double) (-16L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: -16.0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {
    checkArray(counts);
    double df = ((double) counts.length - 1) * ((double) counts[0].length - 1);
    distribution.setDegreesOfFreedom(df);
    return 1 - distribution.cumulativeProbability(chiSquare(counts));
}","public void test5657() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[2][5];
    double double0 = chiSquareTestImpl0.chiSquareTest(longArray0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * @param counts array representation of 2-way table
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(expected, observed) < alpha);
}","public void test5758() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = Double.NaN;
    doubleArray0[1] = (double) 8977L;
    boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, Double.NaN);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(expected, observed) < alpha);
}","public void test5859() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[2];
    double[] doubleArray0 = new double[2];
    try {
        chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, 36.097);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: 36.097
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(expected, observed) < alpha);
}","public void test5960() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[1];
    long[] longArray0 = new long[7];
    try {
        chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, (-1.0));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // bad significance level: -1.0
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of exptected frequency counts
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
"public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {
    if ((expected.length < 2) || (expected.length != observed.length)) {
        throw new IllegalArgumentException(""observed, expected array lengths incorrect"");
    }
    if (!isPositive(expected) || !isNonNegative(observed)) {
        throw new IllegalArgumentException(""observed counts must be non-negative and expected counts must be postive"");
    }
    double sumSq = 0.0d;
    double dev = 0.0d;
    for (int i = 0; i < observed.length; i++) {
        dev = ((double) observed[i] - expected[i]);
        sumSq += dev * dev / expected[i];
    }
    return sumSq;
}","public void test6061() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 2184.765435837;
    doubleArray0[1] = 2184.765435837;
    long[] longArray0 = new long[2];
    longArray0[1] = (-630L);
    try {
        chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed counts must be non-negative and expected counts must be postive
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 * or length is less than 2
 */"
"public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {
    if ((expected.length < 2) || (expected.length != observed.length)) {
        throw new IllegalArgumentException(""observed, expected array lengths incorrect"");
    }
    if (!isPositive(expected) || !isNonNegative(observed)) {
        throw new IllegalArgumentException(""observed counts must be non-negative and expected counts must be postive"");
    }
    double sumSq = 0.0d;
    double dev = 0.0d;
    for (int i = 0; i < observed.length; i++) {
        dev = ((double) observed[i] - expected[i]);
        sumSq += dev * dev / expected[i];
    }
    return sumSq;
}","public void test6162() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[] longArray0 = new long[3];
    double[] doubleArray0 = new double[9];
    try {
        chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed, expected array lengths incorrect
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 * or length is less than 2
 */"
"public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {
    if ((expected.length < 2) || (expected.length != observed.length)) {
        throw new IllegalArgumentException(""observed, expected array lengths incorrect"");
    }
    if (!isPositive(expected) || !isNonNegative(observed)) {
        throw new IllegalArgumentException(""observed counts must be non-negative and expected counts must be postive"");
    }
    double sumSq = 0.0d;
    double dev = 0.0d;
    for (int i = 0; i < observed.length; i++) {
        dev = ((double) observed[i] - expected[i]);
        sumSq += dev * dev / expected[i];
    }
    return sumSq;
}","public void test6263() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    double[] doubleArray0 = new double[0];
    try {
        chiSquareTestImpl0.chiSquare(doubleArray0, (long[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // observed, expected array lengths incorrect
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * {@inheritDoc}
 * <p><strong>Note: </strong>This implementation rescales the
 * <code>expected</code> array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p>
 *
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 * @return chi-square test statistic
 * @throws IllegalArgumentException if preconditions are not met
 * or length is less than 2
 */"
"//---------------------  Protected methods ---------------------------------
/**
 * Gets a DistributionFactory to use in creating ChiSquaredDistribution instances.
 * @deprecated inject ChiSquaredDistribution instances directly instead of
 *             using a factory.
 */
protected DistributionFactory getDistributionFactory() {
    return DistributionFactory.newInstance();
}","public void test6364() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    DistributionFactory distributionFactory0 = chiSquareTestImpl0.getDistributionFactory();
    assertNotNull(distributionFactory0);
}",""
"public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException {
    distribution.setDegreesOfFreedom((double) observed1.length - 1);
    return 1 - distribution.cumulativeProbability(chiSquareDataSetsComparison(observed1, observed2));
}","public void test6465() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[2][5];
    long[] longArray1 = new long[2];
    try {
        chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray1, longArray0[0]);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // oberved1, observed2 array lengths incorrect
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param observed1 array of observed frequency counts of the first data set
 * @param observed2 array of observed frequency counts of the second data set
 * @return p-value
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs computing the p-value
 */"
"public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {
    if ((alpha <= 0) || (alpha > 0.5)) {
        throw new IllegalArgumentException(""bad significance level: "" + alpha);
    }
    return (chiSquareTest(counts) < alpha);
}","public void test6566() throws Throwable {
    ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
    long[][] longArray0 = new long[5][0];
    try {
        chiSquareTestImpl0.chiSquareTest(longArray0, 0.5);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Input table must have at least two columns
        //
        verifyException(""org.apache.commons.math.stat.inference.ChiSquareTestImpl"", e);
    }
}","/**
 * @param counts array representation of 2-way table
 * @param alpha significance level of the test
 * @return true iff null hypothesis can be rejected with confidence
 * 1 - alpha
 * @throws IllegalArgumentException if preconditions are not met
 * @throws MathException if an error occurs performing the test
 */"
