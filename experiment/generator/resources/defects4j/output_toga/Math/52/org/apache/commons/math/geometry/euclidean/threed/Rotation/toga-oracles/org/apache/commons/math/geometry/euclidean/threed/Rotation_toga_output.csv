project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals(0.0, rotation0.getQ0(), 0.01);
}",0,
project,0,test001,"public void test001() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01);
}",0,
project,0,test002,"public void test002() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals(0.7071067811865476, vector3D0.getY(), 0.01);
}",0,
project,0,test003,"public void test003() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals(-0.0, vector3D0.getX(), 0.01);
}",0,
project,0,test004,"public void test004() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals(0.7071067811865476, vector3D0.getZ(), 0.01);
}",0,
project,0,test015,"public void test015() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation1 = new Rotation(vector3D0, 1523.489803044979);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    Rotation rotation3 = rotation2.revert();
    assertEquals(0.0, rotation2.getQ2(), 0.01);
}",0,
project,0,test016,"public void test016() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation1 = new Rotation(vector3D0, 1523.489803044979);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    Rotation rotation3 = rotation2.revert();
    assertEquals(0.0, rotation2.getQ1(), 0.01);
}",0,
project,0,test017,"public void test017() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation1 = new Rotation(vector3D0, 1523.489803044979);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    Rotation rotation3 = rotation2.revert();
    assertEquals(-0.0, rotation1.getQ1(), 0.01);
}",0,
project,0,test018,"public void test018() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation1 = new Rotation(vector3D0, 1523.489803044979);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    Rotation rotation3 = rotation2.revert();
    assertEquals(0.9958335017214228, rotation3.getQ3(), 0.01);
}",0,
project,0,test019,"public void test019() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation1 = new Rotation(vector3D0, 1523.489803044979);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    Rotation rotation3 = rotation2.revert();
    assertEquals(0.0, rotation3.getQ1(), 0.01);
}",0,
project,0,test0110,"public void test0110() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation1 = new Rotation(vector3D0, 1523.489803044979);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    Rotation rotation3 = rotation2.revert();
    assertEquals(0.09119011376925146, rotation3.getQ0(), 0.01);
}",0,
project,0,test0211,"public void test0211() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    Rotation rotation1 = rotation0.revert();
    assertEquals((-0.5), rotation1.getQ3(), 0.01);
}",0,
project,0,test0212,"public void test0212() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    Rotation rotation1 = rotation0.revert();
    assertEquals((-0.5), rotation0.getQ2(), 0.01);
}",0,
project,0,test0213,"public void test0213() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    Rotation rotation1 = rotation0.revert();
    assertEquals((-0.5), rotation1.getQ2(), 0.01);
}",0,
project,0,test0214,"public void test0214() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    Rotation rotation1 = rotation0.revert();
    assertEquals(0.5, rotation1.getQ0(), 0.01);
}",0,
project,0,test0215,"public void test0215() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    Rotation rotation1 = rotation0.revert();
    assertEquals((-0.5), rotation0.getQ0(), 0.01);
}",0,
project,0,test0216,"public void test0216() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    Rotation rotation1 = rotation0.revert();
    assertEquals((-0.5), rotation1.getQ1(), 0.01);
}",0,
project,0,test0317,"public void test0317() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = rotation0.revert();
    assertEquals(519.975675, rotation0.getQ2(), 0.01);
}",0,
project,0,test0318,"public void test0318() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = rotation0.revert();
    assertEquals(0.0, rotation0.getQ3(), 0.01);
}",0,
project,0,test0319,"public void test0319() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = rotation0.revert();
    assertEquals(0.0, rotation1.getQ3(), 0.01);
}",0,
project,0,test0320,"public void test0320() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = rotation0.revert();
    assertEquals(0.0, rotation0.getQ0(), 0.01);
}",0,
project,0,test0321,"public void test0321() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = rotation0.revert();
    assertEquals(0.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test0322,"public void test0322() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = rotation0.revert();
    assertEquals(519.975675, rotation1.getQ2(), 0.01);
}",0,
project,0,test0323,"public void test0323() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = rotation0.revert();
    assertEquals(-0.0, rotation1.getQ0(), 0.01);
}",0,
project,0,test0324,"public void test0324() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = rotation0.revert();
    assertEquals(0.0, rotation1.getQ1(), 0.01);
}",0,
project,0,test0425,"public void test0425() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    double double0 = rotation0.getQ3();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test0526,"public void test0526() throws Throwable {
    Rotation rotation0 = new Rotation(321.383871488, 321.383871488, 321.383871488, 321.383871488, true);
    double double0 = rotation0.getQ3();
    assertEquals(0.5, rotation0.getQ1(), 0.01);
}",0,
project,0,test0527,"public void test0527() throws Throwable {
    Rotation rotation0 = new Rotation(321.383871488, 321.383871488, 321.383871488, 321.383871488, true);
    double double0 = rotation0.getQ3();
    assertEquals(0.5, rotation0.getQ0(), 0.01);
}",0,
project,0,test0528,"public void test0528() throws Throwable {
    Rotation rotation0 = new Rotation(321.383871488, 321.383871488, 321.383871488, 321.383871488, true);
    double double0 = rotation0.getQ3();
    assertEquals(0.5, rotation0.getQ2(), 0.01);
}",0,
project,0,test0529,"public void test0529() throws Throwable {
    Rotation rotation0 = new Rotation(321.383871488, 321.383871488, 321.383871488, 321.383871488, true);
    double double0 = rotation0.getQ3();
    assertEquals(0.5, double0, 0.01);
}",0,
project,0,test0630,"public void test0630() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, (-54.66491), true);
    double double0 = rotation0.getQ3();
    assertEquals(0.0, rotation0.getQ0(), 0.01);
}",0,
project,0,test0631,"public void test0631() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, (-54.66491), true);
    double double0 = rotation0.getQ3();
    assertEquals(0.0, rotation0.getQ2(), 0.01);
}",0,
project,0,test0632,"public void test0632() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, (-54.66491), true);
    double double0 = rotation0.getQ3();
    assertEquals(0.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test0633,"public void test0633() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, (-54.66491), true);
    double double0 = rotation0.getQ3();
    assertEquals((-0.9999999999999999), double0, 0.01);
}",0,
project,0,test0734,"public void test0734() throws Throwable {
    Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
    double double0 = rotation0.getQ2();
    assertEquals(0.5, rotation0.getQ1(), 0.01);
}",0,
project,0,test0735,"public void test0735() throws Throwable {
    Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
    double double0 = rotation0.getQ2();
    assertEquals((-2634.3122), rotation0.getQ0(), 0.01);
}",0,
project,0,test0736,"public void test0736() throws Throwable {
    Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
    double double0 = rotation0.getQ2();
    assertEquals(15.0, double0, 0.01);
}",0,
project,0,test0737,"public void test0737() throws Throwable {
    Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
    double double0 = rotation0.getQ2();
    assertEquals((-2634.3122), rotation0.getQ3(), 0.01);
}",0,
project,0,test0838,"public void test0838() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    double double0 = rotation0.getQ2();
    assertEquals(0.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test0839,"public void test0839() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    double double0 = rotation0.getQ2();
    assertEquals(0.0, rotation0.getQ0(), 0.01);
}",0,
project,0,test0840,"public void test0840() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    double double0 = rotation0.getQ2();
    assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01);
}",0,
project,0,test0841,"public void test0841() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
    double double0 = rotation0.getQ2();
    assertEquals((-0.7071067811865475), double0, 0.01);
}",0,
project,0,test0942,"public void test0942() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    Rotation rotation0 = new Rotation(rotationOrder0, 0.0, (-0.19), 0.0);
    double double0 = rotation0.getQ1();
    assertEquals(0.0948571686345573, double0, 0.01);
}",0,
project,0,test0943,"public void test0943() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    Rotation rotation0 = new Rotation(rotationOrder0, 0.0, (-0.19), 0.0);
    double double0 = rotation0.getQ1();
    assertEquals(0.0, rotation0.getQ2(), 0.01);
}",0,
project,0,test0944,"public void test0944() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    Rotation rotation0 = new Rotation(rotationOrder0, 0.0, (-0.19), 0.0);
    double double0 = rotation0.getQ1();
    assertEquals(0.0, rotation0.getQ3(), 0.01);
}",0,
project,0,test0945,"public void test0945() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    Rotation rotation0 = new Rotation(rotationOrder0, 0.0, (-0.19), 0.0);
    double double0 = rotation0.getQ1();
    assertEquals(0.9954908927552453, rotation0.getQ0(), 0.01);
}",0,
project,0,test1046,"public void test1046() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YXY;
    Rotation rotation0 = new Rotation(rotationOrder0, 1.0, (-1884.34179737), 0.5);
    double double0 = rotation0.getQ1();
    assertEquals((-0.29271082137490767), double0, 0.01);
}",0,
project,0,test1047,"public void test1047() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YXY;
    Rotation rotation0 = new Rotation(rotationOrder0, 1.0, (-1884.34179737), 0.5);
    double double0 = rotation0.getQ1();
    assertEquals((-0.6497895039397437), rotation0.getQ2(), 0.01);
}",0,
project,0,test1048,"public void test1048() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YXY;
    Rotation rotation0 = new Rotation(rotationOrder0, 1.0, (-1884.34179737), 0.5);
    double double0 = rotation0.getQ1();
    assertEquals(0.07474134349205648, rotation0.getQ3(), 0.01);
}",0,
project,0,test1049,"public void test1049() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YXY;
    Rotation rotation0 = new Rotation(rotationOrder0, 1.0, (-1884.34179737), 0.5);
    double double0 = rotation0.getQ1();
    assertEquals(0.6975010445818495, rotation0.getQ0(), 0.01);
}",0,
project,0,test1150,"public void test1150() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = new Vector3D((-1680.1648465), vector3D0, (-1680.1648465), vector3D0, (-1680.1648465), vector3D0);
    Rotation rotation0 = new Rotation(vector3D1, vector3D0);
    double double0 = rotation0.getQ0();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1151,"public void test1151() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = new Vector3D((-1680.1648465), vector3D0, (-1680.1648465), vector3D0, (-1680.1648465), vector3D0);
    Rotation rotation0 = new Rotation(vector3D1, vector3D0);
    double double0 = rotation0.getQ0();
    assertEquals(1.0, rotation0.getQ3(), 0.01);
}",0,
project,0,test1152,"public void test1152() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_I;
    Vector3D vector3D1 = new Vector3D((-1680.1648465), vector3D0, (-1680.1648465), vector3D0, (-1680.1648465), vector3D0);
    Rotation rotation0 = new Rotation(vector3D1, vector3D0);
    double double0 = rotation0.getQ0();
    assertEquals(0.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test1253,"public void test1253() throws Throwable {
    Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
    double double0 = rotation0.getQ0();
    assertEquals((-0.49635980445291794), rotation0.getQ2(), 0.01);
}",0,
project,0,test1254,"public void test1254() throws Throwable {
    Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
    double double0 = rotation0.getQ0();
    assertEquals((-0.2294572251344263), double0, 0.01);
}",0,
project,0,test1255,"public void test1255() throws Throwable {
    Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
    double double0 = rotation0.getQ0();
    assertEquals((-0.49635980445291794), rotation0.getQ3(), 0.01);
}",0,
project,0,test1256,"public void test1256() throws Throwable {
    Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
    double double0 = rotation0.getQ0();
    assertEquals(0.6742427388415329, rotation0.getQ1(), 0.01);
}",0,
project,0,test1357,"public void test1357() throws Throwable {
    Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals(0.6927255243237516, vector3D0.getX(), 0.01);
}",0,
project,0,test1358,"public void test1358() throws Throwable {
    Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals((-0.5099663459241128), vector3D0.getZ(), 0.01);
}",0,
project,0,test1359,"public void test1359() throws Throwable {
    Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals((-0.5099663459241128), vector3D0.getY(), 0.01);
}",0,
project,0,test1360,"public void test1360() throws Throwable {
    Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
    Vector3D vector3D0 = rotation0.getAxis();
    assertEquals((-0.2294572251344263), rotation0.getQ0(), 0.01);
}",0,
project,0,test1461,"public void test1461() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
    Vector3D vector3D1 = rotation0.applyTo(vector3D0);
    assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
}",0,
project,0,test1562,"public void test1562() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    Vector3D vector3D0 = new Vector3D(2.0, 2.0, (-246.8));
    Vector3D vector3D1 = rotation0.applyTo(vector3D0);
    assertTrue(vector3D1.equals((Object) vector3D0));
}",0,
project,0,test1663,"public void test1663() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Rotation rotation0 = new Rotation(rotationOrder0, (-823.349531201697), (-823.349531201697), (-3448.3189439421385));
    Rotation rotation1 = rotation0.revert();
    Vector3D vector3D0 = rotation1.getAxis();
    Vector3D vector3D1 = rotation1.IDENTITY.applyTo(vector3D0);
    assertEquals(1.3155065509244066, vector3D1.getNorm1(), 0.01);
}",0,
project,0,test1664,"public void test1664() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Rotation rotation0 = new Rotation(rotationOrder0, (-823.349531201697), (-823.349531201697), (-3448.3189439421385));
    Rotation rotation1 = rotation0.revert();
    Vector3D vector3D0 = rotation1.getAxis();
    Vector3D vector3D1 = rotation1.IDENTITY.applyTo(vector3D0);
    assertEquals(0.2995734943314427, vector3D1.getY(), 0.01);
}",0,
project,0,test1665,"public void test1665() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Rotation rotation0 = new Rotation(rotationOrder0, (-823.349531201697), (-823.349531201697), (-3448.3189439421385));
    Rotation rotation1 = rotation0.revert();
    Vector3D vector3D0 = rotation1.getAxis();
    Vector3D vector3D1 = rotation1.IDENTITY.applyTo(vector3D0);
    assertEquals((-0.9519235835140378), vector3D1.getX(), 0.01);
}",0,
project,0,test1666,"public void test1666() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Rotation rotation0 = new Rotation(rotationOrder0, (-823.349531201697), (-823.349531201697), (-3448.3189439421385));
    Rotation rotation1 = rotation0.revert();
    Vector3D vector3D0 = rotation1.getAxis();
    Vector3D vector3D1 = rotation1.IDENTITY.applyTo(vector3D0);
    assertEquals(0.06400947307892609, vector3D1.getZ(), 0.01);
}",0,
project,0,test1667,"public void test1667() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Rotation rotation0 = new Rotation(rotationOrder0, (-823.349531201697), (-823.349531201697), (-3448.3189439421385));
    Rotation rotation1 = rotation0.revert();
    Vector3D vector3D0 = rotation1.getAxis();
    Vector3D vector3D1 = rotation1.IDENTITY.applyTo(vector3D0);
    assertEquals(0.8173648305289856, rotation1.getQ0(), 0.01);
}",0,
project,0,test1768,"public void test1768() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-5460.4), (-1.0), false);
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1.0));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = rotation0.applyTo(vector3D1);
    assertEquals((-5460.4), rotation0.getQ2(), 0.01);
}",0,
project,0,test1769,"public void test1769() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-5460.4), (-1.0), false);
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1.0));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = rotation0.applyTo(vector3D1);
    assertEquals(0.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test1770,"public void test1770() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-5460.4), (-1.0), false);
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1.0));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = rotation0.applyTo(vector3D1);
    assertEquals(0.0, vector3D2.getNormInf(), 0.01);
}",0,
project,0,test1771,"public void test1771() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-5460.4), (-1.0), false);
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1.0));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = rotation0.applyTo(vector3D1);
    assertEquals(0.0, vector3D2.getY(), 0.01);
}",0,
project,0,test1772,"public void test1772() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-5460.4), (-1.0), false);
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1.0));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = rotation0.applyTo(vector3D1);
    assertEquals(0.0, vector3D2.getZ(), 0.01);
}",0,
project,0,test1773,"public void test1773() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, (-5460.4), (-1.0), false);
    Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1.0));
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = rotation0.applyTo(vector3D1);
    assertEquals((-1.0), rotation0.getQ3(), 0.01);
}",0,
project,0,test1874,"public void test1874() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Rotation rotation1 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    Rotation rotation2 = rotation1.applyTo(rotation0);
    assertEquals(Double.NaN, rotation2.getQ0(), 0.01);
}",0,
project,0,test1975,"public void test1975() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.XYZ;
    Rotation rotation1 = new Rotation(rotationOrder0, 4.0, 4.0, (-1979.694588318826));
    Rotation rotation2 = rotation0.applyTo(rotation1);
    assertEquals(0.7599009079542555, rotation2.getQ3(), 0.01);
}",0,
project,0,test1976,"public void test1976() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.XYZ;
    Rotation rotation1 = new Rotation(rotationOrder0, 4.0, 4.0, (-1979.694588318826));
    Rotation rotation2 = rotation0.applyTo(rotation1);
    assertEquals((-0.45905217497362333), rotation2.getQ2(), 0.01);
}",0,
project,0,test1977,"public void test1977() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.XYZ;
    Rotation rotation1 = new Rotation(rotationOrder0, 4.0, 4.0, (-1979.694588318826));
    Rotation rotation2 = rotation0.applyTo(rotation1);
    assertEquals((-0.36901978488713144), rotation2.getQ0(), 0.01);
}",0,
project,0,test1978,"public void test1978() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.XYZ;
    Rotation rotation1 = new Rotation(rotationOrder0, 4.0, 4.0, (-1979.694588318826));
    Rotation rotation2 = rotation0.applyTo(rotation1);
    assertEquals((-0.2750383775114654), rotation2.getQ1(), 0.01);
}",0,
project,0,test2079,"public void test2079() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.applyTo(rotation1);
    assertEquals(0.0, rotation2.getQ0(), 0.01);
}",0,
project,0,test2080,"public void test2080() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.applyTo(rotation1);
    assertEquals(0.0, rotation2.getQ2(), 0.01);
}",0,
project,0,test2081,"public void test2081() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.applyTo(rotation1);
    assertEquals(0.0, rotation2.getQ1(), 0.01);
}",0,
project,0,test2082,"public void test2082() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.applyTo(rotation1);
    assertEquals(519.975675, rotation2.getQ3(), 0.01);
}",0,
project,0,test2183,"public void test2183() throws Throwable {
    Rotation rotation0 = new Rotation(1.0, 1.0, 1.0, (-1485.899928), false);
    Vector3D vector3D0 = new Vector3D(1.0, (-1485.899928));
    Vector3D vector3D1 = rotation0.IDENTITY.applyInverseTo(vector3D0);
    assertEquals(1.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test2184,"public void test2184() throws Throwable {
    Rotation rotation0 = new Rotation(1.0, 1.0, 1.0, (-1485.899928), false);
    Vector3D vector3D0 = new Vector3D(1.0, (-1485.899928));
    Vector3D vector3D1 = rotation0.IDENTITY.applyInverseTo(vector3D0);
    assertTrue(vector3D1.equals((Object) vector3D0));
}",0,
project,0,test2285,"public void test2285() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    Vector3D vector3D0 = Vector3D.MINUS_K;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Vector3D vector3D2 = new Vector3D((-2138.7303097069434), vector3D1, (-2138.7303097069434), vector3D1, (-2138.7303097069434), vector3D1, (-2138.7303097069434), vector3D1);
    Vector3D vector3D3 = rotation0.IDENTITY.applyInverseTo(vector3D2);
    assertEquals(0.0, vector3D3.getNormInf(), 0.01);
}",0,
project,0,test2386,"public void test2386() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
    assertEquals(1.9868161777724352E-8, rotation0.getQ3(), 0.01);
}",0,
project,0,test2387,"public void test2387() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
    assertEquals((-1.9868161777724352E-8), rotation1.getQ0(), 0.01);
}",0,
project,0,test2388,"public void test2388() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
    assertEquals((-1.9868161777724352E-8), rotation1.getQ1(), 0.01);
}",0,
project,0,test2389,"public void test2389() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
    assertEquals((-1.9868161777724352E-8), rotation1.getQ2(), 0.01);
}",0,
project,0,test2390,"public void test2390() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
    assertEquals((-1.9868161777724352E-8), rotation1.getQ3(), 0.01);
}",0,
project,0,test2391,"public void test2391() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
    assertEquals(1.9868161777724352E-8, rotation0.getQ1(), 0.01);
}",0,
project,0,test2392,"public void test2392() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
    assertEquals(1.9868161777724352E-8, rotation0.getQ2(), 0.01);
}",0,
project,0,test2393,"public void test2393() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
    assertEquals(1.9868161777724352E-8, rotation0.getQ0(), 0.01);
}",0,
project,0,test2494,"public void test2494() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    double double0 = Rotation.distance(rotation0, rotation2);
    assertEquals(0.0, rotation1.getQ0(), 0.01);
}",0,
project,0,test2495,"public void test2495() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    double double0 = Rotation.distance(rotation0, rotation2);
    assertEquals((-1.0), rotation2.getQ1(), 0.01);
}",0,
project,0,test2496,"public void test2496() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    double double0 = Rotation.distance(rotation0, rotation2);
    assertEquals(0.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test2497,"public void test2497() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    double double0 = Rotation.distance(rotation0, rotation2);
    assertEquals(0.0, rotation1.getQ2(), 0.01);
}",0,
project,0,test2498,"public void test2498() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    double double0 = Rotation.distance(rotation0, rotation2);
    assertEquals(3.141592653589793, double0, 0.01);
}",0,
project,0,test2499,"public void test2499() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    double double0 = Rotation.distance(rotation0, rotation2);
    assertEquals(0.0, rotation2.getQ3(), 0.01);
}",0,
project,0,test24100,"public void test24100() throws Throwable {
    Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
    Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    double double0 = Rotation.distance(rotation0, rotation2);
    assertEquals(519.975675, rotation0.getQ2(), 0.01);
}",0,
project,0,test25101,"public void test25101() throws Throwable {
    // Undeclared exception!
    try {
        Rotation.distance((Rotation) null, (Rotation) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test26102,"public void test26102() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Rotation rotation0 = new Rotation(vector3D0, (-239.2149974796));
    // Undeclared exception!
    try {
        rotation0.IDENTITY.applyTo((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test27103,"public void test27103() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    // Undeclared exception!
    try {
        rotation0.applyTo((Rotation) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test28104,"public void test28104() throws Throwable {
    Rotation rotation0 = new Rotation((-2009.6), 3295.7944100348, 0.0, (-2009.6), false);
    // Undeclared exception!
    try {
        rotation0.IDENTITY.applyInverseTo((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test29105,"public void test29105() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    // Undeclared exception!
    try {
        rotation0.applyInverseTo((Rotation) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test30106,"public void test30106() throws Throwable {
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation((double[][]) null, 103.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test31107,"public void test31107() throws Throwable {
    double[][] doubleArray0 = new double[0][4];
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(doubleArray0, 0.09090909090909091);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test32108,"public void test32108() throws Throwable {
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test33109,"public void test33109() throws Throwable {
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation((Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test34110,"public void test34110() throws Throwable {
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation((Vector3D) null, 2657.56);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test35111,"public void test35111() throws Throwable {
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation((RotationOrder) null, 954.43669182405, (-1757.22622), 0.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test36112,"public void test36112() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    double double0 = rotation0.getAngle();
    assertEquals((-0.5), rotation0.getQ0(), 0.01);
}",0,
project,0,test36113,"public void test36113() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    double double0 = rotation0.getAngle();
    assertEquals((-0.5), rotation0.getQ1(), 0.01);
}",0,
project,0,test36114,"public void test36114() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    double double0 = rotation0.getAngle();
    assertEquals((-0.5), rotation0.getQ3(), 0.01);
}",0,
project,0,test36115,"public void test36115() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    double double0 = rotation0.getAngle();
    assertEquals(2.0943951023931953, double0, 0.01);
}",0,
project,0,test36116,"public void test36116() throws Throwable {
    Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
    double double0 = rotation0.getAngle();
    assertEquals((-0.5), rotation0.getQ2(), 0.01);
}",0,
project,0,test37117,"public void test37117() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.25, (-2279.098093399), 5748.6735217073);
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.IDENTITY.applyTo(vector3D0);
    assertTrue(vector3D1.equals((Object) vector3D0));
}",0,
project,0,test37118,"public void test37118() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.25, (-2279.098093399), 5748.6735217073);
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.IDENTITY.applyTo(vector3D0);
    assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
}",0,
project,0,test38119,"public void test38119() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
    assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
}",0,
project,0,test39120,"public void test39120() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    double[][] doubleArray0 = rotation0.getMatrix();
    Rotation rotation1 = null;
    try {
        rotation1 = new Rotation(doubleArray0, 0.0);
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // unable to orthogonalize matrix in 10 iterations
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test40121,"public void test40121() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.ZYZ;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test41122,"public void test41122() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.03492798088037815, 0.03492798088037815);
    Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    try {
        rotation0.IDENTITY.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test42123,"public void test42123() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    Rotation rotation0 = new Rotation(0.0, 0.16666666666745392, (-0.4714044926931317), 0.0, false);
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test43124,"public void test43124() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.ZYZ;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
}",1,
project,0,test44125,"public void test44125() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.YZY;
    try {
        rotation0.IDENTITY.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test45126,"public void test45126() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YZY;
    Vector3D vector3D0 = rotationOrder0.getA1();
    Vector3D vector3D1 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D0);
    Rotation rotation1 = new Rotation(vector3D0, vector3D1);
    Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
    try {
        rotation2.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test46127,"public void test46127() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.YZY;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertEquals(3, doubleArray0.length);
}",1,
project,0,test47128,"public void test47128() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YXY;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test48129,"public void test48129() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    RotationOrder rotationOrder0 = RotationOrder.YXY;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test49130,"public void test49130() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.YXY;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertEquals(3, doubleArray0.length);
}",1,
project,0,test50131,"public void test50131() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.XZX;
    Rotation rotation0 = Rotation.IDENTITY;
    Vector3D vector3D0 = rotation0.getAxis();
    Rotation rotation1 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    assertEquals(Double.NaN, rotation1.getQ0(), 0.01);
}",0,
project,0,test50132,"public void test50132() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.XZX;
    Rotation rotation0 = Rotation.IDENTITY;
    Vector3D vector3D0 = rotation0.getAxis();
    Rotation rotation1 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    rotation1.getAngles(rotationOrder0);
    assertEquals(0.0, vector3D0.getZ(), 0.01);
}",0,
project,0,test50133,"public void test50133() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.XZX;
    Rotation rotation0 = Rotation.IDENTITY;
    Vector3D vector3D0 = rotation0.getAxis();
    Rotation rotation1 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    rotation1.getAngles(rotationOrder0);
    assertEquals(1.0, vector3D0.getNorm1(), 0.01);
}",0,
project,0,test51134,"public void test51134() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.XZX;
    Rotation rotation0 = Rotation.IDENTITY;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test52135,"public void test52135() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.XYX;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
}",1,
project,0,test53136,"public void test53136() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    RotationOrder rotationOrder0 = RotationOrder.XYX;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test54137,"public void test54137() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Rotation rotation0 = new Rotation(vector3D0, (-834.3178));
    RotationOrder rotationOrder0 = RotationOrder.XYX;
    try {
        rotation0.IDENTITY.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Euler angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test55138,"public void test55138() throws Throwable {
    Rotation rotation0 = new Rotation(521.84415, (-0.5), 1119.201639707, 0.1, false);
    RotationOrder rotationOrder0 = RotationOrder.ZYX;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test56139,"public void test56139() throws Throwable {
    Rotation rotation0 = new Rotation((-1634.076), (-1634.076), 282.659391833, 747.6433037848643, false);
    RotationOrder rotationOrder0 = RotationOrder.ZYX;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test57140,"public void test57140() throws Throwable {
    Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.ZYX;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
}",1,
project,0,test58141,"public void test58141() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    Rotation rotation0 = new Rotation((-1.7825557603452563E-4), 0.2298510942896171, 2038.4502715, 0.027521523592243975, false);
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test59142,"public void test59142() throws Throwable {
    Rotation rotation0 = new Rotation(0.02244492401198233, 0.02244492401198233, (-0.7820032231927776), 5334.0, false);
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test60143,"public void test60143() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-0.1), (-2491.731326436284));
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
}",1,
project,0,test61144,"public void test61144() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Rotation rotation0 = new Rotation((-1.7825557603452563E-4), 0.2298510942896171, 2038.4502715, 0.027521523592243975, false);
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test62145,"public void test62145() throws Throwable {
    Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test63146,"public void test63146() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { -0.0, 0.0, -0.0 }, doubleArray0, 0.01);
}",1,
project,0,test64147,"public void test64147() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YXZ;
    Rotation rotation0 = new Rotation((-1.7825557603452563E-4), 0.2298510942896171, 2038.4502715, 0.027521523592243975, false);
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test65148,"public void test65148() throws Throwable {
    Rotation rotation0 = new Rotation(0.8022124572060929, 0.8022124572060929, (-0.7820032231927776), 5334.0, false);
    RotationOrder rotationOrder0 = RotationOrder.YXZ;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test66149,"public void test66149() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.YXZ;
    double[] doubleArray0 = rotation0.IDENTITY.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { 0.0, -0.0, 0.0 }, doubleArray0, 0.01);
}",1,
project,0,test66150,"public void test66150() throws Throwable {
    Vector3D vector3D0 = Vector3D.PLUS_K;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.YXZ;
    double[] doubleArray0 = rotation0.IDENTITY.getAngles(rotationOrder0);
    assertEquals(1.0, rotation0.getQ0(), 0.01);
}",0,
project,0,test67151,"public void test67151() throws Throwable {
    Rotation rotation0 = new Rotation(0.25, 0.25, 0.25, 1829.5243766, false);
    RotationOrder rotationOrder0 = RotationOrder.XZY;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test68152,"public void test68152() throws Throwable {
    Rotation rotation0 = new Rotation((-1499.4005), (-1499.4005), 0.0, 0.11764700710773468, false);
    RotationOrder rotationOrder0 = RotationOrder.XZY;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test69153,"public void test69153() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-0.1), (-2491.731326436284));
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    RotationOrder rotationOrder0 = RotationOrder.XZY;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
}",1,
project,0,test70154,"public void test70154() throws Throwable {
    Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
    RotationOrder rotationOrder0 = RotationOrder.XYZ;
    try {
        rotation0.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test71155,"public void test71155() throws Throwable {
    Rotation rotation0 = new Rotation((-1099.4598898379), (-1099.4598898379), (-1099.4598898379), (-1099.4598898379), false);
    RotationOrder rotationOrder0 = RotationOrder.XYZ;
    Rotation rotation1 = new Rotation(rotationOrder0, 3155.8, 0.5, 1814.7467);
    Rotation rotation2 = rotation0.applyInverseTo(rotation1);
    try {
        rotation2.getAngles(rotationOrder0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Cardan angles singularity
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test72156,"public void test72156() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.3333333134651184, 0.3333333134651184);
    Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertEquals(0.4083655420666395, rotation0.getQ2(), 0.01);
}",0,
project,0,test72157,"public void test72157() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.3333333134651184, 0.3333333134651184);
    Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
    RotationOrder rotationOrder0 = RotationOrder.ZXZ;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { 2.0346162820319744, 0.8413255633379556, (-1.1069763715578187) }, doubleArray0, 0.01);
}",0,
project,0,test73158,"public void test73158() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
    Rotation rotation2 = rotation1.applyInverseTo(rotation0);
    Rotation rotation3 = rotation2.applyTo(rotation0);
    double double0 = rotation3.getAngle();
    assertEquals(3.0288856122966332, double0, 0.01);
}",0,
project,0,test73159,"public void test73159() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
    Rotation rotation2 = rotation1.applyInverseTo(rotation0);
    Rotation rotation3 = rotation2.applyTo(rotation0);
    double double0 = rotation3.getAngle();
    assertEquals(0.0, rotation2.getQ2(), 0.01);
}",0,
project,0,test73160,"public void test73160() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
    Rotation rotation2 = rotation1.applyInverseTo(rotation0);
    Rotation rotation3 = rotation2.applyTo(rotation0);
    double double0 = rotation3.getAngle();
    assertEquals(0.0, rotation3.getQ1(), 0.01);
}",0,
project,0,test73161,"public void test73161() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
    Rotation rotation2 = rotation1.applyInverseTo(rotation0);
    Rotation rotation3 = rotation2.applyTo(rotation0);
    double double0 = rotation3.getAngle();
    assertEquals(0.0, rotation3.getQ2(), 0.01);
}",0,
project,0,test73162,"public void test73162() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
    Rotation rotation2 = rotation1.applyInverseTo(rotation0);
    Rotation rotation3 = rotation2.applyTo(rotation0);
    double double0 = rotation3.getAngle();
    assertEquals((-0.056323698221933796), rotation3.getQ0(), 0.01);
}",0,
project,0,test73163,"public void test73163() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
    Rotation rotation2 = rotation1.applyInverseTo(rotation0);
    Rotation rotation3 = rotation2.applyTo(rotation0);
    double double0 = rotation3.getAngle();
    assertEquals((-0.9984125605272625), rotation3.getQ3(), 0.01);
}",0,
project,0,test73164,"public void test73164() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
    Rotation rotation2 = rotation1.applyInverseTo(rotation0);
    Rotation rotation3 = rotation2.applyTo(rotation0);
    double double0 = rotation3.getAngle();
    assertEquals((-0.9984125605272625), rotation2.getQ3(), 0.01);
}",0,
project,0,test73165,"public void test73165() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    RotationOrder rotationOrder0 = RotationOrder.YZX;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
    Rotation rotation2 = rotation1.applyInverseTo(rotation0);
    Rotation rotation3 = rotation2.applyTo(rotation0);
    double double0 = rotation3.getAngle();
    assertEquals(-0.0, rotation1.getQ1(), 0.01);
}",0,
project,0,test74166,"public void test74166() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    double double0 = rotation0.IDENTITY.getAngle();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test74167,"public void test74167() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZXY;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    double double0 = rotation0.IDENTITY.getAngle();
    assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
}",0,
project,0,test75168,"public void test75168() throws Throwable {
    Vector3D vector3D0 = new Vector3D((-0.1), (-2491.731326436284));
    Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.getAxis();
    assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
}",0,
project,0,test76169,"public void test76169() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.YXZ;
    Vector3D vector3D0 = rotationOrder0.getA2();
    Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(vector3D1, vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // zero norm for rotation defining vector
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test77170,"public void test77170() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.XYX;
    Vector3D vector3D0 = rotationOrder0.getA3();
    Vector3D vector3D1 = vector3D0.orthogonal();
    Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D1);
    assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01);
}",0,
project,0,test78171,"public void test78171() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.getAxis();
    Rotation rotation1 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D1);
    assertEquals(0.0, rotation0.getQ2(), 0.01);
}",0,
project,0,test78172,"public void test78172() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.getAxis();
    Rotation rotation1 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D1);
    assertEquals(1.0, rotation0.getQ0(), 0.01);
}",0,
project,0,test78173,"public void test78173() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.getAxis();
    Rotation rotation1 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D1);
    assertEquals(0.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test78174,"public void test78174() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.getAxis();
    Rotation rotation1 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D1);
    assertEquals(0.0, rotation1.getQ3(), 0.01);
}",0,
project,0,test78175,"public void test78175() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Vector3D vector3D1 = rotation0.getAxis();
    Rotation rotation1 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D1);
    assertEquals(1.0, vector3D1.getNormSq(), 0.01);
}",0,
project,0,test79176,"public void test79176() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.3333333134651184, 0.3333333134651184);
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // zero norm for rotation defining vector
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test80177,"public void test80177() throws Throwable {
    RotationOrder rotationOrder0 = RotationOrder.ZYX;
    Vector3D vector3D0 = rotationOrder0.getA1();
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // zero norm for rotation defining vector
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test81178,"public void test81178() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_I;
    Vector3D vector3D1 = vector3D0.subtract((Vector<Euclidean3D>) vector3D0);
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // zero norm for rotation defining vector
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test82179,"public void test82179() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // zero norm for rotation defining vector
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",0,
project,0,test83180,"public void test83180() throws Throwable {
    double[][] doubleArray0 = new double[3][5];
    double[] doubleArray1 = new double[3];
    doubleArray0[0] = doubleArray1;
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(doubleArray0, (-0.18084726264509002));
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // a 3x3 matrix cannot be a rotation matrix
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",1,
project,0,test84181,"public void test84181() throws Throwable {
    double[][] doubleArray0 = new double[3][4];
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(doubleArray0, (-1091.2336470071473));
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // a 3x4 matrix cannot be a rotation matrix
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test85182,"public void test85182() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.03492798088037815, 0.03492798088037815);
    Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
    double[][] doubleArray0 = rotation0.getMatrix();
    Rotation rotation1 = new Rotation(doubleArray0, 0.0);
    assertEquals(0.4083655420666395, rotation0.getQ3(), 0.01);
}",0,
project,0,test85183,"public void test85183() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.03492798088037815, 0.03492798088037815);
    Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
    double[][] doubleArray0 = rotation0.getMatrix();
    Rotation rotation1 = new Rotation(doubleArray0, 0.0);
    assertEquals((-0.40836554206663955), rotation1.getQ3(), 0.01);
}",0,
project,0,test85184,"public void test85184() throws Throwable {
    Vector3D vector3D0 = new Vector3D(0.0, 0.03492798088037815, 0.03492798088037815);
    Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
    double[][] doubleArray0 = rotation0.getMatrix();
    Rotation rotation1 = new Rotation(doubleArray0, 0.0);
    assertEquals(0.4083655420666395, rotation0.getQ2(), 0.01);
}",0,
project,0,test86185,"public void test86185() throws Throwable {
    Vector3D vector3D0 = Vector3D.ZERO;
    Rotation rotation0 = null;
    try {
        rotation0 = new Rotation(vector3D0, 0.0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // zero norm for rotation axis
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}",1,
project,0,test87186,"public void test87186() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Rotation rotation1 = rotation0.applyTo(rotation0);
    assertEquals(0.0, rotation1.getQ3(), 0.01);
}",0,
project,0,test87187,"public void test87187() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Rotation rotation1 = rotation0.applyTo(rotation0);
    assertEquals(0.0, rotation0.getQ2(), 0.01);
}",0,
project,0,test87188,"public void test87188() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Rotation rotation1 = rotation0.applyTo(rotation0);
    assertEquals(0.0, rotation1.getQ1(), 0.01);
}",0,
project,0,test87189,"public void test87189() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Rotation rotation1 = rotation0.applyTo(rotation0);
    assertEquals(0.0, rotation1.getQ2(), 0.01);
}",0,
project,0,test87190,"public void test87190() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    Rotation rotation1 = rotation0.applyTo(rotation0);
    assertEquals(1.0, rotation1.getQ0(), 0.01);
}",0,
project,0,test88191,"public void test88191() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    double[][] doubleArray0 = rotation0.getMatrix();
    Rotation rotation1 = null;
    try {
        rotation1 = new Rotation(doubleArray0, 1.9868161777724352E-8);
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // the closest orthogonal matrix has a negative determinant -1
        //
        verifyException(""org.apache.commons.math.geometry.euclidean.threed.Rotation"", e);
    }
}",0,
project,0,test89192,"public void test89192() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Rotation rotation0 = new Rotation(vector3D0, (-239.2149974796));
    RotationOrder rotationOrder0 = RotationOrder.XYZ;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertArrayEquals(new double[] { Double.NaN, Double.NaN, Double.NaN }, doubleArray0, 0.01);
}",1,
project,0,test89193,"public void test89193() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Rotation rotation0 = new Rotation(vector3D0, (-239.2149974796));
    RotationOrder rotationOrder0 = RotationOrder.XYZ;
    double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
    assertEquals(0.9743509177808812, rotation0.getQ0(), 0.01);
}",0,
project,0,test90194,"public void test90194() throws Throwable {
    Vector3D vector3D0 = Vector3D.NaN;
    Rotation rotation0 = new Rotation(vector3D0, (-239.2149974796));
    double double0 = rotation0.getQ0();
    assertEquals(0.9743509177808812, double0, 0.01);
}",0,
project,0,test91195,"public void test91195() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    double double0 = rotation0.getQ2();
    assertEquals(0.0, rotation0.getQ1(), 0.01);
}",0,
project,0,test91196,"public void test91196() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    double double0 = rotation0.getQ2();
    assertEquals(1.0, rotation0.getQ0(), 0.01);
}",0,
project,0,test91197,"public void test91197() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    double double0 = rotation0.getQ2();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test92198,"public void test92198() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    double double0 = rotation0.getQ1();
    assertEquals(1.0, rotation0.getQ0(), 0.01);
}",0,
project,0,test92199,"public void test92199() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    double double0 = rotation0.getQ1();
    assertEquals(0.0, rotation0.getQ2(), 0.01);
}",0,
project,0,test92200,"public void test92200() throws Throwable {
    Vector3D vector3D0 = Vector3D.MINUS_J;
    Rotation rotation0 = new Rotation(vector3D0, vector3D0);
    double double0 = rotation0.getQ1();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test93201,"public void test93201() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.revert();
    assertEquals(0.0, rotation1.getQ3(), 0.01);
}",0,
project,0,test93202,"public void test93202() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.revert();
    assertEquals(1.9868161777724352E-8, rotation0.getQ3(), 0.01);
}",0,
project,0,test93203,"public void test93203() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.revert();
    assertEquals((-1.0), rotation1.getQ0(), 0.01);
}",0,
project,0,test93204,"public void test93204() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.revert();
    assertEquals(0.0, rotation1.getQ1(), 0.01);
}",0,
project,0,test93205,"public void test93205() throws Throwable {
    Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
    Rotation rotation1 = rotation0.IDENTITY.revert();
    assertEquals(0.0, rotation1.getQ2(), 0.01);
}",0,
project,0,test94206,"public void test94206() throws Throwable {
    Rotation rotation0 = Rotation.IDENTITY;
    Rotation.distance(rotation0, rotation0);
}",0,
