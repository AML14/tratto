org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,@Test(timeout = 4000)
public void test099() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    int int0 = (-1158);
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((double[][]) null).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[5];
    doubleArray1[0] = (double) 100;
    doubleArray1[1] = (double) (-1158);
    doubleArray1[2] = (double) (-1158);
    doubleArray1[3] = 0.0;
    doubleArray1[4] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    double[] doubleArray2 = new double[5];
    doubleArray2[0] = (double) 100;
    doubleArray2[1] = (double) (-1158);
    doubleArray2[2] = (double) 100;
    doubleArray2[3] = (double) (-1158);
    doubleArray2[4] = (double) (-1158);
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray2, doubleArray2, doubleArray2);
    double[] doubleArray3 = new double[0];
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,@Test(timeout = 4000)
public void test1212() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    levenbergMarquardtOptimizer0.setMaxIterations(2);
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.incrementIterationsCounter();
    double[] doubleArray2 = new double[0];
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray2;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,@Test(timeout = 4000)
public void test1818() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    doubleArray1[1] = Double.NEGATIVE_INFINITY;
    doubleArray2[1] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
