project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    levenbergMarquardtOptimizer0.setMaxIterations(2145241826);
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance((-0.0023295157986838455));
    doubleArray2[0] = Double.NEGATIVE_INFINITY;
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test011,"public void test011() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setMaxIterations(100);
    levenbergMarquardtOptimizer0.cols = 100;
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test022,"public void test022() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) 100;
    doubleArray0[1] = (double) 100;
    levenbergMarquardtOptimizer0.targetValues = doubleArray0;
    double[][] doubleArray1 = new double[2][9];
    levenbergMarquardtOptimizer0.setOrthoTolerance((-366.832791744));
    double[][] doubleArray2 = new double[9][5];
    doubleArray2[0] = levenbergMarquardtOptimizer0.targetValues;
    doubleArray2[1] = doubleArray0;
    double[] doubleArray3 = new double[9];
    doubleArray3[0] = (double) 100;
    doubleArray3[1] = (double) 100;
    doubleArray3[2] = (double) 100;
    doubleArray3[3] = (-366.832791744);
    doubleArray3[4] = (-366.832791744);
    doubleArray3[5] = (-366.832791744);
    doubleArray3[6] = (-366.832791744);
    doubleArray3[7] = (double) 100;
    doubleArray3[8] = (double) 100;
    doubleArray2[2] = doubleArray3;
    doubleArray2[3] = doubleArray0;
    doubleArray2[4] = doubleArray0;
    doubleArray2[5] = levenbergMarquardtOptimizer0.targetValues;
    doubleArray2[6] = levenbergMarquardtOptimizer0.targetValues;
    doubleArray2[7] = doubleArray0;
    doubleArray2[8] = levenbergMarquardtOptimizer0.targetValues;
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2).when(multivariateMatrixFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.incrementIterationsCounter();
    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2133.2388509050966);
    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(304.0775);
    double[] doubleArray4 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray4, (Object) doubleArray4, (Object) doubleArray0, (Object) doubleArray4, (Object) doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray4, doubleArray4, doubleArray4);
    levenbergMarquardtOptimizer0.setMaxIterations(120);
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test033,"public void test033() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);
    doubleArray2[0] = Double.NEGATIVE_INFINITY;
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test044,"public void test044() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.doOptimize();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(2028.36210992623);
    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(2028.36210992623);
    double double0 = 722.4;
    levenbergMarquardtOptimizer0.setParRelativeTolerance(722.4);
    SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker((-1721.36667), (-3471.442816367518));
    levenbergMarquardtOptimizer0.setConvergenceChecker(simpleVectorialValueChecker0);
    levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0);
    levenbergMarquardtOptimizer0.setCostRelativeTolerance(0.0);
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.setParRelativeTolerance(double0);
}",0,
project,0,test066,"public void test066() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.setOrthoTolerance(0.0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = (-2562);
    levenbergMarquardtOptimizer0.checker = null;
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.doOptimize();
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.rows = 1910;
    levenbergMarquardtOptimizer0.doOptimize();
    // Undeclared exception!
    try {
        levenbergMarquardtOptimizer0.doOptimize();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.incrementIterationsCounter();
    double[] doubleArray2 = new double[0];
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray2;
    double[] doubleArray3 = new double[4];
    doubleArray3[0] = (double) 100;
    doubleArray3[1] = (double) 100;
    doubleArray3[2] = (double) 100;
    doubleArray3[3] = (double) 100;
    doubleArray0[1] = doubleArray3;
    levenbergMarquardtOptimizer0.jacobian = doubleArray0;
    levenbergMarquardtOptimizer0.rows = 100;
    levenbergMarquardtOptimizer0.rows = 100;
    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2992.683);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.incrementIterationsCounter();
    double[] doubleArray2 = new double[0];
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray2;
    double[] doubleArray3 = new double[4];
    doubleArray3[0] = (double) 100;
    doubleArray3[1] = (double) 100;
    doubleArray3[3] = (double) 100;
    doubleArray0[1] = doubleArray3;
    levenbergMarquardtOptimizer0.jacobian = doubleArray0;
    levenbergMarquardtOptimizer0.rows = 100;
    levenbergMarquardtOptimizer0.rows = 100;
    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2992.683);
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.incrementIterationsCounter();
    double[] doubleArray2 = new double[0];
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray2;
    double[] doubleArray3 = new double[4];
    doubleArray3[0] = (double) 100;
    doubleArray3[1] = (double) 100;
    doubleArray3[3] = (double) 100;
    doubleArray0[1] = doubleArray3;
    levenbergMarquardtOptimizer0.jacobian = doubleArray0;
    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2992.683);
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) null, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    doubleArray1[0] = (double) 100;
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    doubleArray2[0] = Double.NEGATIVE_INFINITY;
    doubleArray2[1] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) 100;
    doubleArray0[1] = (double) 100;
    levenbergMarquardtOptimizer0.targetValues = doubleArray0;
    double[][] doubleArray1 = new double[2][9];
    levenbergMarquardtOptimizer0.setOrthoTolerance((-366.832791744));
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.incrementIterationsCounter();
    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2133.2388509050966);
    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(304.0775);
    double[] doubleArray2 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray2, (Object) doubleArray2, (Object) doubleArray0, (Object) doubleArray2, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray2, doubleArray2, doubleArray2);
    levenbergMarquardtOptimizer0.setMaxIterations(120);
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.cols = 0;
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);
    doubleArray2[0] = Double.NEGATIVE_INFINITY;
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.setInitialStepBoundFactor((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
    try {
        levenbergMarquardtOptimizer0.doOptimize();
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // orthogonality tolerance is too small (-869.927), solution is orthogonal to the jacobian
        //
        verifyException(""org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer"", e);
    }
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);
    doubleArray2[0] = Double.NEGATIVE_INFINITY;
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair(doubleArray1, doubleArray2);
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);
    doubleArray2[0] = Double.NEGATIVE_INFINITY;
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[1] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    levenbergMarquardtOptimizer0.setMaxIterations(2145241826);
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance((-0.0023295157986838455));
    doubleArray2[0] = Double.NEGATIVE_INFINITY;
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);
    doubleArray2[0] = 0.25;
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    double[][] doubleArray0 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray1 = new double[2];
    double[] doubleArray2 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);
    doubleArray2[0] = 0.25;
    doubleArray1[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray0[0] = doubleArray1;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
    levenbergMarquardtOptimizer0.checker = null;
    levenbergMarquardtOptimizer0.setMaxIterations(2145241826);
    double[] doubleArray0 = new double[7];
    doubleArray0[0] = (double) 2145241826;
    doubleArray0[1] = (double) 2145241826;
    doubleArray0[2] = (double) 100;
    doubleArray0[3] = (double) 2145241826;
    doubleArray0[4] = (double) 100;
    doubleArray0[5] = (double) 2145241826;
    doubleArray0[6] = (double) 100;
    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;
    double[][] doubleArray1 = new double[2][9];
    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
    double[] doubleArray2 = new double[2];
    double[] doubleArray3 = new double[2];
    levenbergMarquardtOptimizer0.setOrthoTolerance((-0.0023295157986838455));
    doubleArray3[0] = (double) 2145241826;
    levenbergMarquardtOptimizer0.setMaxIterations(2145241826);
    doubleArray2[0] = (double) 100;
    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
    doReturn((Object) doubleArray2, (Object) doubleArray2, (Object) doubleArray3, (Object) doubleArray3, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray2, doubleArray2, doubleArray2);
    levenbergMarquardtOptimizer0.doOptimize();
    doubleArray1[0] = doubleArray2;
    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));
    levenbergMarquardtOptimizer0.doOptimize();
}",0,
