{
  "test2323" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);\n    doubleArray2[0] = Double.NEGATIVE_INFINITY;\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[1] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.incrementIterationsCounter();\n    double[] doubleArray2 = new double[0];\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray2;\n    double[] doubleArray3 = new double[4];\n    doubleArray3[0] = (double) 100;\n    doubleArray3[1] = (double) 100;\n    doubleArray3[3] = (double) 100;\n    doubleArray0[1] = doubleArray3;\n    levenbergMarquardtOptimizer0.jacobian = doubleArray0;\n    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2992.683);\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    levenbergMarquardtOptimizer0.setMaxIterations(2145241826);\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-0.0023295157986838455));\n    doubleArray2[0] = Double.NEGATIVE_INFINITY;\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public void setCostRelativeTolerance(double costRelativeTolerance)",
    "methodName" : "setCostRelativeTolerance",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.incrementIterationsCounter();\n    double[] doubleArray2 = new double[0];\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray2;\n    double[] doubleArray3 = new double[4];\n    doubleArray3[0] = (double) 100;\n    doubleArray3[1] = (double) 100;\n    doubleArray3[2] = (double) 100;\n    doubleArray3[3] = (double) 100;\n    doubleArray0[1] = doubleArray3;\n    levenbergMarquardtOptimizer0.jacobian = doubleArray0;\n    levenbergMarquardtOptimizer0.rows = 100;\n    levenbergMarquardtOptimizer0.rows = 100;\n    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2992.683);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.setInitialStepBoundFactor((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.incrementIterationsCounter();\n    double[] doubleArray2 = new double[0];\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray2;\n    double[] doubleArray3 = new double[4];\n    doubleArray3[0] = (double) 100;\n    doubleArray3[1] = (double) 100;\n    doubleArray3[3] = (double) 100;\n    doubleArray0[1] = doubleArray3;\n    levenbergMarquardtOptimizer0.jacobian = doubleArray0;\n    levenbergMarquardtOptimizer0.rows = 100;\n    levenbergMarquardtOptimizer0.rows = 100;\n    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2992.683);\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);\n    doubleArray2[0] = Double.NEGATIVE_INFINITY;\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair(doubleArray1, doubleArray2);\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setMaxIterations(100);\n    levenbergMarquardtOptimizer0.cols = 100;\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);\n    doubleArray2[0] = Double.NEGATIVE_INFINITY;\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public void setParRelativeTolerance(double parRelativeTolerance)",
    "methodName" : "setParRelativeTolerance",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(2028.36210992623);\n    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(2028.36210992623);\n    double double0 = 722.4;\n    levenbergMarquardtOptimizer0.setParRelativeTolerance(722.4);\n    SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker((-1721.36667), (-3471.442816367518));\n    levenbergMarquardtOptimizer0.setConvergenceChecker(simpleVectorialValueChecker0);\n    levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0);\n    levenbergMarquardtOptimizer0.setCostRelativeTolerance(0.0);\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.setParRelativeTolerance(double0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = (-2562);\n    levenbergMarquardtOptimizer0.checker = null;\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    doubleArray2[0] = Double.NEGATIVE_INFINITY;\n    doubleArray2[1] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    levenbergMarquardtOptimizer0.setMaxIterations(2145241826);\n    double[] doubleArray0 = new double[7];\n    doubleArray0[0] = (double) 2145241826;\n    doubleArray0[1] = (double) 2145241826;\n    doubleArray0[2] = (double) 100;\n    doubleArray0[3] = (double) 2145241826;\n    doubleArray0[4] = (double) 100;\n    doubleArray0[5] = (double) 2145241826;\n    doubleArray0[6] = (double) 100;\n    levenbergMarquardtOptimizer0.residualsWeights = doubleArray0;\n    double[][] doubleArray1 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray2 = new double[2];\n    double[] doubleArray3 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-0.0023295157986838455));\n    doubleArray3[0] = (double) 2145241826;\n    levenbergMarquardtOptimizer0.setMaxIterations(2145241826);\n    doubleArray2[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray2, (Object) doubleArray2, (Object) doubleArray3, (Object) doubleArray3, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray2, doubleArray2, doubleArray2);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray1[0] = doubleArray2;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = (double) 100;\n    doubleArray0[1] = (double) 100;\n    levenbergMarquardtOptimizer0.targetValues = doubleArray0;\n    double[][] doubleArray1 = new double[2][9];\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-366.832791744));\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.incrementIterationsCounter();\n    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2133.2388509050966);\n    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(304.0775);\n    double[] doubleArray2 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray2, (Object) doubleArray2, (Object) doubleArray0, (Object) doubleArray2, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray2, doubleArray2, doubleArray2);\n    levenbergMarquardtOptimizer0.setMaxIterations(120);\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) null, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    doubleArray1[0] = (double) 100;\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);\n    doubleArray2[0] = 0.25;\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) null, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);\n    doubleArray2[0] = 0.25;\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test2626"
  },
  "test2020" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance(0.25);\n    doubleArray2[0] = Double.NEGATIVE_INFINITY;\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    levenbergMarquardtOptimizer0.setMaxIterations(2145241826);\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    double[] doubleArray2 = new double[2];\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-0.0023295157986838455));\n    doubleArray2[0] = Double.NEGATIVE_INFINITY;\n    doubleArray1[0] = (double) 100;\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2, (Object) doubleArray2, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    double[] doubleArray0 = new double[2];\n    doubleArray0[0] = (double) 100;\n    doubleArray0[1] = (double) 100;\n    levenbergMarquardtOptimizer0.targetValues = doubleArray0;\n    double[][] doubleArray1 = new double[2][9];\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-366.832791744));\n    double[][] doubleArray2 = new double[9][5];\n    doubleArray2[0] = levenbergMarquardtOptimizer0.targetValues;\n    doubleArray2[1] = doubleArray0;\n    double[] doubleArray3 = new double[9];\n    doubleArray3[0] = (double) 100;\n    doubleArray3[1] = (double) 100;\n    doubleArray3[2] = (double) 100;\n    doubleArray3[3] = (-366.832791744);\n    doubleArray3[4] = (-366.832791744);\n    doubleArray3[5] = (-366.832791744);\n    doubleArray3[6] = (-366.832791744);\n    doubleArray3[7] = (double) 100;\n    doubleArray3[8] = (double) 100;\n    doubleArray2[2] = doubleArray3;\n    doubleArray2[3] = doubleArray0;\n    doubleArray2[4] = doubleArray0;\n    doubleArray2[5] = levenbergMarquardtOptimizer0.targetValues;\n    doubleArray2[6] = levenbergMarquardtOptimizer0.targetValues;\n    doubleArray2[7] = doubleArray0;\n    doubleArray2[8] = levenbergMarquardtOptimizer0.targetValues;\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray2).when(multivariateMatrixFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.incrementIterationsCounter();\n    levenbergMarquardtOptimizer0.setCostRelativeTolerance(2133.2388509050966);\n    levenbergMarquardtOptimizer0.setInitialStepBoundFactor(304.0775);\n    double[] doubleArray4 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray4, (Object) doubleArray4, (Object) doubleArray0, (Object) doubleArray4, (Object) doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray4, doubleArray4, doubleArray4);\n    levenbergMarquardtOptimizer0.setMaxIterations(120);\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public void setOrthoTolerance(double orthoTolerance)",
    "methodName" : "setOrthoTolerance",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.setOrthoTolerance(0.0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.rows = 1910;\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test088"
  },
  "test1919" : {
    "methodSignature" : "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "doOptimize",
    "className" : "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();\n    levenbergMarquardtOptimizer0.checker = null;\n    double[][] doubleArray0 = new double[2][9];\n    MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class));\n    double[] doubleArray1 = new double[2];\n    DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();\n    doReturn((Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));\n    levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.cols = 0;\n    doubleArray0[0] = doubleArray1;\n    levenbergMarquardtOptimizer0.setOrthoTolerance((-869.9265));\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n    levenbergMarquardtOptimizer0.doOptimize();\n}",
    "testName" : "test1919"
  }
}