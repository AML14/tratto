focal_method,test_prefix,docstring
"public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
    if (sampleSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
    for (int i = 0; i < sampleSize; i++) {
        out[i] = sample();
    }
    return out;
}","public void test000() throws Throwable {
    int[] intArray0 = new int[2];
    Well512a well512a0 = new Well512a(intArray0);
    LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
    Double double0 = new Double(1);
    Pair<Object, Double> pair0 = new Pair<Object, Double>("""", double0);
    linkedList0.add(pair0);
    DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
    try {
        discreteDistribution0.sample(0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // number of samples (0)
        //
        verifyException(""org.apache.commons.math3.distribution.DiscreteDistribution"", e);
    }
}","/**
 * Generate a random sample from the distribution.
 *
 * @param sampleSize the number of random values to generate.
 * @return an array representing the random sample.
 * @throws NotStrictlyPositiveException if {@code sampleSize} is not
 * positive.
 */"
"public T sample() {
    final double randomValue = random.nextDouble();
    double sum = 0;
    for (int i = 0; i < probabilities.length; i++) {
        sum += probabilities[i];
        if (randomValue < sum) {
            return singletons.get(i);
        }
    }
    /* This should never happen, but it ensures we will return a correct
         * object in case the loop above has some floating point inequality
         * problem on the final iteration. */
    return singletons.get(singletons.size() - 1);
}","public void test022() throws Throwable {
    LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
    Double double0 = Double.valueOf(1639.442144482485);
    Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
    linkedList0.add(pair0);
    DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
    Short short0 = discreteDistribution0.sample();
    assertNull(short0);
}","/**
 * Generate a random value sampled from this distribution.
 *
 * @return a random value.
 */"
"public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
    if (sampleSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
    for (int i = 0; i < sampleSize; i++) {
        out[i] = sample();
    }
    return out;
}","public void test033() throws Throwable {
    LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
    Double double0 = new Double(3039L);
    Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
    linkedList0.add(pair0);
    DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
    // Undeclared exception!
    try {
        discreteDistribution0.sample(389);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Generate a random sample from the distribution.
 *
 * @param sampleSize the number of random values to generate.
 * @return an array representing the random sample.
 * @throws NotStrictlyPositiveException if {@code sampleSize} is not
 * positive.
 */"
"public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
    if (sampleSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
    for (int i = 0; i < sampleSize; i++) {
        out[i] = sample();
    }
    return out;
}","public void test044() throws Throwable {
    int[] intArray0 = new int[2];
    Well512a well512a0 = new Well512a(intArray0);
    LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
    Double double0 = new Double(1015.9618516734);
    Pair<Object, Double> pair0 = new Pair<Object, Double>(intArray0[1], double0);
    linkedList0.add(pair0);
    Pair<Object, Double> pair1 = new Pair<Object, Double>("""", double0);
    linkedList0.add(pair1);
    DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
    // Undeclared exception!
    try {
        discreteDistribution0.sample(2382);
        fail(""Expecting exception: ArrayStoreException"");
    } catch (ArrayStoreException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Generate a random sample from the distribution.
 *
 * @param sampleSize the number of random values to generate.
 * @return an array representing the random sample.
 * @throws NotStrictlyPositiveException if {@code sampleSize} is not
 * positive.
 */"
"public void reseedRandomGenerator(long seed) {
    random.setSeed(seed);
}","public void test055() throws Throwable {
    LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
    Short short0 = new Short((short) 18681);
    Double double0 = new Double((short) 18681);
    Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
    linkedList0.add(pair0);
    DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) null, linkedList0);
    // Undeclared exception!
    try {
        discreteDistribution0.reseedRandomGenerator((-972714661));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.distribution.DiscreteDistribution"", e);
    }
}","/**
 * Reseed the random generator used to generate samples.
 *
 * @param seed the new seed
 */"
"public T sample() {
    final double randomValue = random.nextDouble();
    double sum = 0;
    for (int i = 0; i < probabilities.length; i++) {
        sum += probabilities[i];
        if (randomValue < sum) {
            return singletons.get(i);
        }
    }
    /* This should never happen, but it ensures we will return a correct
         * object in case the loop above has some floating point inequality
         * problem on the final iteration. */
    return singletons.get(singletons.size() - 1);
}","public void test088() throws Throwable {
    int[] intArray0 = new int[2];
    intArray0[1] = 1;
    Well512a well512a0 = new Well512a(intArray0);
    LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
    Double double0 = new Double(1);
    Pair<Object, Double> pair0 = new Pair<Object, Double>("""", double0);
    linkedList0.add(pair0);
    linkedList0.add(pair0);
    DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
    Object object0 = discreteDistribution0.sample();
    assertEquals("""", object0);
}","/**
 * Generate a random value sampled from this distribution.
 *
 * @return a random value.
 */"
"public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
    if (sampleSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
    for (int i = 0; i < sampleSize; i++) {
        out[i] = sample();
    }
    return out;
}","public void test1010() throws Throwable {
    int[] intArray0 = new int[2];
    Well512a well512a0 = new Well512a(intArray0);
    LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
    Double double0 = new Double(1);
    Pair<Object, Double> pair0 = new Pair<Object, Double>("""", double0);
    linkedList0.add(pair0);
    DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
    try {
        discreteDistribution0.sample((-2454));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // number of samples (-2,454)
        //
        verifyException(""org.apache.commons.math3.distribution.DiscreteDistribution"", e);
    }
}","/**
 * Generate a random sample from the distribution.
 *
 * @param sampleSize the number of random values to generate.
 * @return an array representing the random sample.
 * @throws NotStrictlyPositiveException if {@code sampleSize} is not
 * positive.
 */"
"public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
    if (sampleSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
    for (int i = 0; i < sampleSize; i++) {
        out[i] = sample();
    }
    return out;
}","public void test1111() throws Throwable {
    int[] intArray0 = new int[2];
    Well512a well512a0 = new Well512a(intArray0);
    LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
    Double double0 = new Double(1015.9618516734);
    Pair<Object, Double> pair0 = new Pair<Object, Double>(intArray0[1], double0);
    linkedList0.add(pair0);
    linkedList0.add(pair0);
    DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
    Object[] objectArray0 = discreteDistribution0.sample(2382);
    assertEquals(2382, objectArray0.length);
}","/**
 * Generate a random sample from the distribution.
 *
 * @param sampleSize the number of random values to generate.
 * @return an array representing the random sample.
 * @throws NotStrictlyPositiveException if {@code sampleSize} is not
 * positive.
 */"
"public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
    if (sampleSize <= 0) {
        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
    }
    final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
    for (int i = 0; i < sampleSize; i++) {
        out[i] = sample();
    }
    return out;
}","public void test1212() throws Throwable {
    int[] intArray0 = new int[7];
    Well1024a well1024a0 = new Well1024a(intArray0);
    LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
    Double double0 = new Double(2743.928701244215);
    Pair<String, Double> pair0 = new Pair<String, Double>(""s,$A$Zh?;NOno~"", double0);
    linkedList0.add(pair0);
    DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
    // Undeclared exception!
    discreteDistribution0.sample(168507691);
}","/**
 * Generate a random sample from the distribution.
 *
 * @param sampleSize the number of random values to generate.
 * @return an array representing the random sample.
 * @throws NotStrictlyPositiveException if {@code sampleSize} is not
 * positive.
 */"
"double probability(final T x) {
    double probability = 0;
    for (int i = 0; i < probabilities.length; i++) {
        if ((x == null && singletons.get(i) == null) || (x != null && x.equals(singletons.get(i)))) {
            probability += probabilities[i];
        }
    }
    return probability;
}","public void test1414() throws Throwable {
    int[] intArray0 = new int[7];
    Well1024a well1024a0 = new Well1024a(intArray0);
    LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
    Double double0 = new Double(2743.928701244215);
    Pair<String, Double> pair0 = new Pair<String, Double>(""s,$A$Zh?;NOno~"", double0);
    linkedList0.add(pair0);
    DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
    double double1 = discreteDistribution0.probability(""s,$A$Zh?;NOno~"");
    assertEquals(1.0, double1, 0.01);
}","/**
 * For a random variable {@code X} whose values are distributed according to
 * this distribution, this method returns {@code P(X = x)}. In other words,
 * this method represents the probability mass function (PMF) for the
 * distribution.
 *
 * @param x the point at which the PMF is evaluated
 * @return the value of the probability mass function at {@code x}
 */"
"double probability(final T x) {
    double probability = 0;
    for (int i = 0; i < probabilities.length; i++) {
        if ((x == null && singletons.get(i) == null) || (x != null && x.equals(singletons.get(i)))) {
            probability += probabilities[i];
        }
    }
    return probability;
}","public void test1515() throws Throwable {
    int[] intArray0 = new int[7];
    Well1024a well1024a0 = new Well1024a(intArray0);
    LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
    Double double0 = new Double(1019.075);
    Pair<String, Double> pair0 = new Pair<String, Double>(""s,$A$Zh?;NOno~"", double0);
    linkedList0.add(pair0);
    DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
    double double1 = discreteDistribution0.probability((String) null);
    assertEquals(0.0, double1, 0.01);
}","/**
 * For a random variable {@code X} whose values are distributed according to
 * this distribution, this method returns {@code P(X = x)}. In other words,
 * this method represents the probability mass function (PMF) for the
 * distribution.
 *
 * @param x the point at which the PMF is evaluated
 * @return the value of the probability mass function at {@code x}
 */"
"double probability(final T x) {
    double probability = 0;
    for (int i = 0; i < probabilities.length; i++) {
        if ((x == null && singletons.get(i) == null) || (x != null && x.equals(singletons.get(i)))) {
            probability += probabilities[i];
        }
    }
    return probability;
}","public void test1616() throws Throwable {
    int[] intArray0 = new int[7];
    Well1024a well1024a0 = new Well1024a(intArray0);
    LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
    Double double0 = new Double(1019.075);
    Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
    linkedList0.add(pair0);
    DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
    double double1 = discreteDistribution0.probability((String) null);
    assertEquals(1.0, double1, 0.01);
}","/**
 * For a random variable {@code X} whose values are distributed according to
 * this distribution, this method returns {@code P(X = x)}. In other words,
 * this method represents the probability mass function (PMF) for the
 * distribution.
 *
 * @param x the point at which the PMF is evaluated
 * @return the value of the probability mass function at {@code x}
 */"
"double probability(final T x) {
    double probability = 0;
    for (int i = 0; i < probabilities.length; i++) {
        if ((x == null && singletons.get(i) == null) || (x != null && x.equals(singletons.get(i)))) {
            probability += probabilities[i];
        }
    }
    return probability;
}","public void test1717() throws Throwable {
    int[] intArray0 = new int[4];
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
    Double double0 = new Double(1702);
    Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) intArray0[1], double0);
    linkedList0.add(pair0);
    DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList0);
    LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
    Pair<Object, Double> pair1 = new Pair<Object, Double>(discreteDistribution0, double0);
    linkedList1.add(pair1);
    DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
    Byte byte0 = new Byte((byte) (-27));
    double double1 = discreteDistribution1.probability(byte0);
    assertEquals(0.0, double1, 0.01);
}","/**
 * For a random variable {@code X} whose values are distributed according to
 * this distribution, this method returns {@code P(X = x)}. In other words,
 * this method represents the probability mass function (PMF) for the
 * distribution.
 *
 * @param x the point at which the PMF is evaluated
 * @return the value of the probability mass function at {@code x}
 */"
"public void reseedRandomGenerator(long seed) {
    random.setSeed(seed);
}","public void test1919() throws Throwable {
    int[] intArray0 = new int[4];
    MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
    Double double0 = new Double(1702);
    Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) intArray0[0], double0);
    linkedList0.add(pair0);
    DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList0);
    discreteDistribution0.reseedRandomGenerator(0L);
}","/**
 * Reseed the random generator used to generate samples.
 *
 * @param seed the new seed
 */"
