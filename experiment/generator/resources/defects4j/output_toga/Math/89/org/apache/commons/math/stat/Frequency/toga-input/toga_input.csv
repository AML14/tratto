focal_method,test_prefix,docstring
"//-------------------------------------------------------------
/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */
public double getPct(Object v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCount(v) / (double) sumFreq;
}","public void test000() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(1670L);
    Long long0 = new Long(48L);
    double double0 = frequency0.getPct((Object) long0);
    assertEquals(0.0, double0, 0.01);
}",""
"public double getPct(long v) {
    return getPct(Long.valueOf(v));
}","public void test011() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(585L);
    double double0 = frequency0.getPct((-1577L));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(long v) {
    return getPct(Long.valueOf(v));
}","public void test022() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Comparable<?>) 0L);
    double double0 = frequency0.getPct(0L);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(int v) {
    return getPct(Long.valueOf(v));
}","public void test033() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    frequency0.addValue((Object) ""BoC)8pkBvutvuVq7c"");
    double double0 = frequency0.getPct((-257));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(int v) {
    return getPct(Long.valueOf(v));
}","public void test044() throws Throwable {
    Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyLong(), anyLong());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-1553));
    double double0 = frequency0.getPct((-1553));
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getPct(char v) {
    return getPct(Character.valueOf(v));
}","public void test055() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('?');
    double double0 = frequency0.getPct('?');
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"//----------------------------------------------------------------------------------------------
/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */
public double getCumPct(Object v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCumFreq(v) / (double) sumFreq;
}","public void test066() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('?');
    Integer integer0 = new Integer(0);
    double double0 = frequency0.getCumPct((Object) integer0);
    assertEquals(0.0, double0, 0.01);
}",""
"public double getCumPct(long v) {
    return getCumPct(Long.valueOf(v));
}","public void test077() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    frequency0.addValue(comparable0);
    double double0 = frequency0.getCumPct(0L);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(int v) {
    return getCumPct(Long.valueOf(v));
}","public void test088() throws Throwable {
    Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(3975, (-1359), 1, (-40), 1).when(comparator0).compare(anyLong(), anyLong());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(0);
    double double0 = frequency0.getCumPct((-1));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(int v) {
    return getCumPct(Long.valueOf(v));
}","public void test099() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((-399L));
    double double0 = frequency0.getCumPct(0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(char v) {
    return getCumPct(Character.valueOf(v));
}","public void test1010() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('h');
    double double0 = frequency0.getCumPct('@');
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public double getCumPct(char v) {
    return getCumPct(Character.valueOf(v));
}","public void test1111() throws Throwable {
    Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyLong(), anyLong());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-1553));
    double double0 = frequency0.getCumPct('');
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"public long getCumFreq(long v) {
    return getCumFreq(Long.valueOf(v));
}","public void test1212() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((-2039));
    long long0 = frequency0.getCumFreq((-376L));
    assertEquals(1L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public long getCumFreq(int v) {
    return getCumFreq(Long.valueOf(v));
}","public void test1313() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCumFreq((-1));
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public long getCumFreq(char v) {
    return getCumFreq(Character.valueOf(v));
}","public void test1414() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('C');
    long long0 = frequency0.getCumFreq('C');
    assertEquals(1L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */
public long getCumFreq(Object v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator c = freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = (Long) freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator values = valuesIterator();
    while (values.hasNext()) {
        Object nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test1515() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1567, 1567, 1567, 1567, 0).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Iterator iterator0 = frequency0.valuesIterator();
    frequency0.addValue((-1));
    long long0 = frequency0.getCumFreq((Object) iterator0);
    assertEquals(1L, long0);
}",""
"public long getCount(long v) {
    return getCount(Long.valueOf(v));
}","public void test1516() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1567, 1567, 1567, 1567, 0).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Iterator iterator0 = frequency0.valuesIterator();
    frequency0.addValue((-1));
    long long0 = frequency0.getCumFreq((Object) iterator0);
    long long1 = frequency0.getCount((-1L));
    assertEquals(1L, long1);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public long getCount(int v) {
    return getCount(Long.valueOf(v));
}","public void test1617() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((-408));
    long long0 = frequency0.getCount((-408));
    assertEquals(1L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public long getCount(char v) {
    return getCount(Character.valueOf(v));
}","public void test1718() throws Throwable {
    Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(anyLong(), anyLong());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-1553));
    long long0 = frequency0.getCount('W');
    assertEquals(1L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"@Override
public String toString() {
    NumberFormat nf = NumberFormat.getPercentInstance();
    StringBuffer outBuffer = new StringBuffer();
    outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    Iterator iter = freqTable.keySet().iterator();
    while (iter.hasNext()) {
        Object value = iter.next();
        outBuffer.append(value);
        outBuffer.append('\t');
        outBuffer.append(getCount(value));
        outBuffer.append('\t');
        outBuffer.append(nf.format(getPct(value)));
        outBuffer.append('\t');
        outBuffer.append(nf.format(getCumPct(value)));
        outBuffer.append('\n');
    }
    return outBuffer.toString();
}","public void test1819() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(56, (-218), 0, 0, 0).when(comparable0).compareTo(any());
    doReturn((String) null).when(comparable0).toString();
    frequency0.addValue((-399L));
    frequency0.addValue(comparable0);
    // Undeclared exception!
    try {
        frequency0.toString();
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Return a string representation of this frequency
 * distribution.
 *
 * @return a string representation.
 */"
"//-------------------------------------------------------------
/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */
public double getPct(Object v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCount(v) / (double) sumFreq;
}","public void test1920() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    // Undeclared exception!
    try {
        frequency0.getPct((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",""
"//----------------------------------------------------------------------------------------------
/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */
public double getCumPct(Object v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCumFreq(v) / (double) sumFreq;
}","public void test2021() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    frequency0.addValue((Object) ""BoC)8pkBvutvuVq7c"");
    // Undeclared exception!
    try {
        frequency0.getCumPct((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",""
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */
public long getCumFreq(Object v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator c = freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = (Long) freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator values = valuesIterator();
    while (values.hasNext()) {
        Object nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test2122() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer(1);
    frequency0.addValue(integer0);
    // Undeclared exception!
    try {
        frequency0.getCumFreq((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}",""
"public long getCount(Object v) {
    if (v instanceof Integer) {
        return getCount(((Integer) v).longValue());
    }
    long result = 0;
    try {
        Long count = (Long) freqTable.get(v);
        if (count != null) {
            result = count.longValue();
        }
    } catch (ClassCastException ex) {
        // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
    }
    return result;
}","public void test2223() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.getCount((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"@Deprecated
public void addValue(Object v) {
    addValue((Comparable<?>) v);
}","public void test2324() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.addValue((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not Comparable,
 *         or is not comparable with previous entries
 * @deprecated use {@link #addValue(Comparable)} instead
 */"
"@Deprecated
public void addValue(Object v) {
    addValue((Comparable<?>) v);
}","public void test2425() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((long) 0);
    // Undeclared exception!
    try {
        frequency0.addValue((Object) """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not Comparable,
 *         or is not comparable with previous entries
 * @deprecated use {@link #addValue(Comparable)} instead
 */"
"@Deprecated
public void addValue(Object v) {
    addValue((Comparable<?>) v);
}","public void test2526() throws Throwable {
    Frequency frequency0 = new Frequency();
    Object object0 = new Object();
    // Undeclared exception!
    try {
        frequency0.addValue(object0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Object cannot be cast to java.lang.Comparable
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not Comparable,
 *         or is not comparable with previous entries
 * @deprecated use {@link #addValue(Comparable)} instead
 */"
"public void addValue(Integer v) {
    addValue(Long.valueOf(v.longValue()));
}","public void test2627() throws Throwable {
    Frequency frequency0 = new Frequency();
    // Undeclared exception!
    try {
        frequency0.addValue((Integer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 */"
"public void addValue(Integer v) {
    addValue(Long.valueOf(v.longValue()));
}","public void test2728() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    Integer integer0 = new Integer(0);
    // Undeclared exception!
    try {
        frequency0.addValue(integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 */"
"public void addValue(Comparable<?> v) {
    Object obj = v;
    if (v instanceof Integer) {
        obj = Long.valueOf(((Integer) v).longValue());
    }
    try {
        Long count = (Long) freqTable.get(obj);
        if (count == null) {
            freqTable.put(obj, Long.valueOf(1));
        } else {
            freqTable.put(obj, Long.valueOf(count.longValue() + 1));
        }
    } catch (ClassCastException ex) {
        //TreeMap will throw ClassCastException if v is not comparable
        throw new IllegalArgumentException(""Value not comparable to existing values."");
    }
}","public void test2829() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    // Undeclared exception!
    try {
        frequency0.addValue((Comparable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.TreeMap"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
 */"
"public void addValue(Comparable<?> v) {
    Object obj = v;
    if (v instanceof Integer) {
        obj = Long.valueOf(((Integer) v).longValue());
    }
    try {
        Long count = (Long) freqTable.get(obj);
        if (count == null) {
            freqTable.put(obj, Long.valueOf(1));
        } else {
            freqTable.put(obj, Long.valueOf(count.longValue() + 1));
        }
    } catch (ClassCastException ex) {
        //TreeMap will throw ClassCastException if v is not comparable
        throw new IllegalArgumentException(""Value not comparable to existing values."");
    }
}","public void test2930() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((-399L));
    // Undeclared exception!
    try {
        frequency0.addValue((Comparable<?>) ""Value \t Freq. \t Pct. \t Cum Pct. \n-399\t2\t100%\t100%\n"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
 */"
"public void addValue(long v) {
    addValue(Long.valueOf(v));
}","public void test3031() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue('v');
    // Undeclared exception!
    try {
        frequency0.addValue((long) (-2362));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 */"
"public void addValue(int v) {
    addValue(Long.valueOf(v));
}","public void test3132() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(comparable0).compareTo(any());
    frequency0.addValue(comparable0);
    // Undeclared exception!
    try {
        frequency0.addValue(0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 */"
"public void addValue(char v) {
    addValue(Character.valueOf(v));
}","public void test3233() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue(0L);
    // Undeclared exception!
    try {
        frequency0.addValue('S');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value not comparable to existing values.
        //
        verifyException(""org.apache.commons.math.stat.Frequency"", e);
    }
}","/**
 * Adds 1 to the frequency count for v.
 *
 * @param v the value to add.
 */"
"//----------------------------------------------------------------------------------------------
/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */
public double getCumPct(Object v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCumFreq(v) / (double) sumFreq;
}","public void test3334() throws Throwable {
    Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyLong(), anyLong());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-1553));
    double double0 = frequency0.getCumPct((Object) """");
    assertEquals(1.0, double0, 0.01);
}",""
"//----------------------------------------------------------------------------------------------
/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */
public double getCumPct(Object v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCumFreq(v) / (double) sumFreq;
}","public void test3435() throws Throwable {
    Frequency frequency0 = new Frequency();
    double double0 = frequency0.getCumPct((Object) """");
    assertEquals(Double.NaN, double0, 0.01);
}",""
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */
public long getCumFreq(Object v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator c = freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = (Long) freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator values = valuesIterator();
    while (values.hasNext()) {
        Object nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test3536() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(4445, (-40), 1, (-40), 4445).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    frequency0.addValue(comparable0);
    long long0 = frequency0.getCumFreq((Object) ""org.apache.commons.math.stat.Frequency"");
    assertEquals(0L, long0);
}",""
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */
public long getCumFreq(Object v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator c = freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = (Long) freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator values = valuesIterator();
    while (values.hasNext()) {
        Object nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test3637() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn((-3759), (-40), 1, (-40), (-3759)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    frequency0.addValue(comparable0);
    long long0 = frequency0.getCumFreq((Object) ""org.apache.commons.math.stat.Frequency"");
    assertEquals(0L, long0);
}",""
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */
public long getCumFreq(Object v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator c = freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = (Long) freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator values = valuesIterator();
    while (values.hasNext()) {
        Object nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test3738() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn((-2645), (-2645), (-2645)).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Object object0 = new Object();
    frequency0.addValue(2531);
    long long0 = frequency0.getCumFreq(object0);
    assertEquals(0L, long0);
}",""
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */
public long getCumFreq(Object v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator c = freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = (Long) freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator values = valuesIterator();
    while (values.hasNext()) {
        Object nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test3839() throws Throwable {
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt(), anyInt());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue(278L);
    Object object0 = new Object();
    long long0 = frequency0.getCumFreq(object0);
    assertEquals(1L, long0);
}",""
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */
public long getCumFreq(Object v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator c = freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = (Long) freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator values = valuesIterator();
    while (values.hasNext()) {
        Object nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test3940() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCumFreq((Object) """");
    assertEquals(0L, long0);
}",""
"//-------------------------------------------------------------
/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */
public double getPct(Object v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCount(v) / (double) sumFreq;
}","public void test4041() throws Throwable {
    Frequency frequency0 = new Frequency();
    Long long0 = new Long(316L);
    double double0 = frequency0.getPct((Object) long0);
    assertEquals(Double.NaN, double0, 0.01);
}",""
"public long getCount(Object v) {
    if (v instanceof Integer) {
        return getCount(((Integer) v).longValue());
    }
    long result = 0;
    try {
        Long count = (Long) freqTable.get(v);
        if (count != null) {
            result = count.longValue();
        }
    } catch (ClassCastException ex) {
        // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
    }
    return result;
}","public void test4142() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    frequency0.addValue(comparable0);
    long long0 = frequency0.getCount((Object) ""Value \t Freq. \t Pct. \t Cum Pct. \nMock for Comparable, hashCode: 1184670510\t1\t100%\t100%\n"");
    assertEquals(1L, long0);
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public long getCount(Object v) {
    if (v instanceof Integer) {
        return getCount(((Integer) v).longValue());
    }
    long result = 0;
    try {
        Long count = (Long) freqTable.get(v);
        if (count != null) {
            result = count.longValue();
        }
    } catch (ClassCastException ex) {
        // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
    }
    return result;
}","public void test4243() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount((Object) ""O_j{lD'oz@"");
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public long getCount(Object v) {
    if (v instanceof Integer) {
        return getCount(((Integer) v).longValue());
    }
    long result = 0;
    try {
        Long count = (Long) freqTable.get(v);
        if (count != null) {
            result = count.longValue();
        }
    } catch (ClassCastException ex) {
        // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
    }
    return result;
}","public void test4344() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-1728));
    long long0 = frequency0.getCount((Object) integer0);
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 * Returns 0 if the value is not comparable.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"//-------------------------------------------------------------------------
/**
 * Returns the sum of all frequencies.
 *
 * @return the total frequency count.
 */
public long getSumFreq() {
    long result = 0;
    Iterator iterator = freqTable.values().iterator();
    while (iterator.hasNext()) {
        result += ((Long) iterator.next()).longValue();
    }
    return result;
}","public void test4445() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((-399L));
    long long0 = frequency0.getSumFreq();
    assertEquals(1L, long0);
}",""
"//-------------------------------------------------------------------------
/**
 * Returns the sum of all frequencies.
 *
 * @return the total frequency count.
 */
public long getSumFreq() {
    long result = 0;
    Iterator iterator = freqTable.values().iterator();
    while (iterator.hasNext()) {
        result += ((Long) iterator.next()).longValue();
    }
    return result;
}","public void test4546() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getSumFreq();
    assertEquals(0L, long0);
}",""
"public void addValue(Comparable<?> v) {
    Object obj = v;
    if (v instanceof Integer) {
        obj = Long.valueOf(((Integer) v).longValue());
    }
    try {
        Long count = (Long) freqTable.get(obj);
        if (count == null) {
            freqTable.put(obj, Long.valueOf(1));
        } else {
            freqTable.put(obj, Long.valueOf(count.longValue() + 1));
        }
    } catch (ClassCastException ex) {
        //TreeMap will throw ClassCastException if v is not comparable
        throw new IllegalArgumentException(""Value not comparable to existing values."");
    }
}","public void test4647() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer(1);
    frequency0.addValue((Comparable<?>) integer0);
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
 */"
"public long getCumFreq(long v) {
    return getCumFreq(Long.valueOf(v));
}","public void test4748() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq(791L);
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public double getCumPct(long v) {
    return getCumPct(Long.valueOf(v));
}","public void test4849() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1610612736, (-1), 1610612736, (-1), 1610612736).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((long) (-1));
    double double0 = frequency0.getCumPct((long) 1610612736);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values less than or equal to v
 */"
"//-------------------------------------------------------------
/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */
public double getPct(Object v) {
    final long sumFreq = getSumFreq();
    if (sumFreq == 0) {
        return Double.NaN;
    }
    return (double) getCount(v) / (double) sumFreq;
}","public void test4950() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer(0);
    frequency0.addValue((Object) integer0);
    double double0 = frequency0.getPct((Object) integer0);
    assertEquals(1.0, double0, 0.01);
}",""
"public void addValue(Comparable<?> v) {
    Object obj = v;
    if (v instanceof Integer) {
        obj = Long.valueOf(((Integer) v).longValue());
    }
    try {
        Long count = (Long) freqTable.get(obj);
        if (count == null) {
            freqTable.put(obj, Long.valueOf(1));
        } else {
            freqTable.put(obj, Long.valueOf(count.longValue() + 1));
        }
    } catch (ClassCastException ex) {
        //TreeMap will throw ClassCastException if v is not comparable
        throw new IllegalArgumentException(""Value not comparable to existing values."");
    }
}","public void test5051() throws Throwable {
    Frequency frequency0 = new Frequency();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(comparable0).compareTo(any());
    frequency0.addValue((-399L));
    frequency0.addValue(comparable0);
}","/**
 * Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p>
 *
 * @param v the value to add.
 * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
 */"
"@Override
public String toString() {
    NumberFormat nf = NumberFormat.getPercentInstance();
    StringBuffer outBuffer = new StringBuffer();
    outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");
    Iterator iter = freqTable.keySet().iterator();
    while (iter.hasNext()) {
        Object value = iter.next();
        outBuffer.append(value);
        outBuffer.append('\t');
        outBuffer.append(getCount(value));
        outBuffer.append('\t');
        outBuffer.append(nf.format(getPct(value)));
        outBuffer.append('\t');
        outBuffer.append(nf.format(getCumPct(value)));
        outBuffer.append('\n');
    }
    return outBuffer.toString();
}","public void test5152() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    doReturn(1567, 1567, 1567, 1567, 0).when(comparator0).compare(any(), any());
    Frequency frequency0 = new Frequency(comparator0);
    frequency0.addValue((-1));
    String string0 = frequency0.toString();
    assertEquals(""Value \t Freq. \t Pct. \t Cum Pct. \n-1\t0\t0%\t100%\n"", string0);
}","/**
 * Return a string representation of this frequency
 * distribution.
 *
 * @return a string representation.
 */"
"public long getCount(long v) {
    return getCount(Long.valueOf(v));
}","public void test5253() throws Throwable {
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    Frequency frequency0 = new Frequency(comparator0);
    long long0 = frequency0.getCount((-1L));
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public long getCount(int v) {
    return getCount(Long.valueOf(v));
}","public void test5354() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount((int) 'w');
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"//-----------------------------------------------------------------------------------------
/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup.
 * @return the proportion of values equal to v
 */
public long getCumFreq(Object v) {
    if (getSumFreq() == 0) {
        return 0;
    }
    if (v instanceof Integer) {
        return getCumFreq(((Integer) v).longValue());
    }
    Comparator c = freqTable.comparator();
    if (c == null) {
        c = new NaturalComparator();
    }
    long result = 0;
    try {
        Long value = (Long) freqTable.get(v);
        if (value != null) {
            result = value.longValue();
        }
    } catch (ClassCastException ex) {
        // v is not comparable
        return result;
    }
    if (c.compare(v, freqTable.firstKey()) < 0) {
        // v is comparable, but less than first value
        return 0;
    }
    if (c.compare(v, freqTable.lastKey()) >= 0) {
        // v is comparable, but greater than the last value
        return getSumFreq();
    }
    Iterator values = valuesIterator();
    while (values.hasNext()) {
        Object nextValue = values.next();
        if (c.compare(v, nextValue) > 0) {
            result += getCount(nextValue);
        } else {
            return result;
        }
    }
    return result;
}","public void test5455() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer((-721));
    frequency0.addValue((-66));
    frequency0.addValue(integer0);
    long long0 = frequency0.getCumFreq((Object) integer0);
    assertEquals(1L, long0);
}",""
"public long getCumFreq(char v) {
    return getCumFreq(Character.valueOf(v));
}","public void test5556() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCumFreq('E');
    assertEquals(0L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public long getCount(char v) {
    return getCount(Character.valueOf(v));
}","public void test5657() throws Throwable {
    Frequency frequency0 = new Frequency();
    long long0 = frequency0.getCount('~');
    assertEquals(0L, long0);
}","/**
 * Returns the number of values = v.
 *
 * @param v the value to lookup.
 * @return the frequency of v.
 */"
"public double getPct(char v) {
    return getPct(Character.valueOf(v));
}","public void test5758() throws Throwable {
    Frequency frequency0 = new Frequency();
    Integer integer0 = new Integer(1);
    frequency0.addValue((Object) integer0);
    double double0 = frequency0.getPct('f');
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
"public void clear() {
    freqTable.clear();
}","public void test5859() throws Throwable {
    Frequency frequency0 = new Frequency((Comparator) null);
    frequency0.clear();
}","/**
 * Clears the frequency table
 */"
"public long getCumFreq(int v) {
    return getCumFreq(Long.valueOf(v));
}","public void test5960() throws Throwable {
    Frequency frequency0 = new Frequency();
    frequency0.addValue((-399L));
    long long0 = frequency0.getCumFreq(0);
    assertEquals(1L, long0);
}","/**
 * Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p>
 *
 * @param v the value to lookup
 * @return the proportion of values equal to v
 */"
