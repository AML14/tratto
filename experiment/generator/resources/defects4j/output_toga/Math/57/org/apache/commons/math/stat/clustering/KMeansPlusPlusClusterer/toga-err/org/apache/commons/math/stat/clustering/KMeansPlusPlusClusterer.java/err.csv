org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,@Test(timeout = 4000)
public void test22() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    int[] intArray0 = new int[0];
    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
    cluster0.addPoint(euclideanIntegerPoint0);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    cluster0.addPoint(euclideanIntegerPoint0);
    List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(list0, 2, 0);
    list1.size();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Math_57b/src/main/java/java/util/List.java
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,@Test(timeout = 4000)
public void test66() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    int[] intArray0 = new int[4];
    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    cluster0.addPoint(euclideanIntegerPoint0);
    List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(list0, 0, (-2568));
    list1.contains(cluster0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Math_57b/src/main/java/java/util/List.java
