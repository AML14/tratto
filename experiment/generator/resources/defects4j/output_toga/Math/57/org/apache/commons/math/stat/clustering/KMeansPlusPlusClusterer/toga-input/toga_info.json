{
  "test00" : {
    "methodSignature" : "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
    "methodName" : "cluster",
    "className" : "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    MockRandom mockRandom0 = new MockRandom();\n    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);\n    int[] intArray0 = new int[4];\n    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);\n    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);\n    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();\n    EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);\n    cluster0.addPoint(euclideanIntegerPoint1);\n    cluster0.addPoint(euclideanIntegerPoint0);\n    kMeansPlusPlusClusterer0.cluster(list0, 1001, (-149));\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
    "methodName" : "cluster",
    "className" : "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    MockRandom mockRandom0 = new MockRandom();\n    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);\n    int[] intArray0 = new int[0];\n    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);\n    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);\n    cluster0.addPoint(euclideanIntegerPoint0);\n    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();\n    cluster0.addPoint(euclideanIntegerPoint0);\n    cluster0.addPoint(euclideanIntegerPoint0);\n    kMeansPlusPlusClusterer0.cluster(list0, 1312, 2);\n}",
    "testName" : "test11"
  },
  "test33" : {
    "methodSignature" : "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
    "methodName" : "cluster",
    "className" : "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    MockRandom mockRandom0 = new MockRandom();\n    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);\n    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>((EuclideanIntegerPoint) null);\n    cluster0.addPoint((EuclideanIntegerPoint) null);\n    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();\n    kMeansPlusPlusClusterer0.cluster(list0, 0, 0);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
    "methodName" : "cluster",
    "className" : "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    MockRandom mockRandom0 = new MockRandom();\n    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);\n    int[] intArray0 = new int[4];\n    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);\n    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);\n    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();\n    int[] intArray1 = new int[7];\n    EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray1);\n    cluster0.addPoint(euclideanIntegerPoint1);\n    cluster0.addPoint(euclideanIntegerPoint0);\n    kMeansPlusPlusClusterer0.cluster(list0, 0, (-2568));\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
    "methodName" : "cluster",
    "className" : "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    MockRandom mockRandom0 = new MockRandom();\n    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);\n    int[] intArray0 = new int[4];\n    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);\n    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);\n    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();\n    cluster0.addPoint(euclideanIntegerPoint0);\n    // Undeclared exception!\n    kMeansPlusPlusClusterer0.cluster(list0, 1796, (-149));\n}",
    "testName" : "test55"
  },
  "test77" : {
    "methodSignature" : "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
    "methodName" : "cluster",
    "className" : "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test77() throws Throwable {\n    MockRandom mockRandom0 = new MockRandom();\n    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);\n    int[] intArray0 = new int[0];\n    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);\n    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);\n    cluster0.addPoint(euclideanIntegerPoint0);\n    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();\n    cluster0.addPoint(euclideanIntegerPoint0);\n    kMeansPlusPlusClusterer0.cluster(list0, 2, 2);\n}",
    "testName" : "test77"
  },
  "test88" : {
    "methodSignature" : "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
    "methodName" : "cluster",
    "className" : "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88() throws Throwable {\n    MockRandom mockRandom0 = new MockRandom((-546L));\n    KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.ERROR;\n    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);\n    int[] intArray0 = new int[6];\n    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);\n    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);\n    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();\n    kMeansPlusPlusClusterer0.cluster(list0, (-850), 0);\n}",
    "testName" : "test88"
  }
}