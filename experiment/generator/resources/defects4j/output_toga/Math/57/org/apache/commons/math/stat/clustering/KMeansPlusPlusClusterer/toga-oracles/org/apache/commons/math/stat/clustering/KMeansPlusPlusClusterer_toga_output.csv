project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    int[] intArray0 = new int[4];
    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
    cluster0.addPoint(euclideanIntegerPoint1);
    cluster0.addPoint(euclideanIntegerPoint0);
    // Undeclared exception!
    try {
        kMeansPlusPlusClusterer0.cluster(list0, 1001, (-149));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test11,"public void test11() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    int[] intArray0 = new int[0];
    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
    cluster0.addPoint(euclideanIntegerPoint0);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    cluster0.addPoint(euclideanIntegerPoint0);
    cluster0.addPoint(euclideanIntegerPoint0);
    // Undeclared exception!
    try {
        kMeansPlusPlusClusterer0.cluster(list0, 1312, 2);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test33,"public void test33() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>((EuclideanIntegerPoint) null);
    cluster0.addPoint((EuclideanIntegerPoint) null);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    // Undeclared exception!
    try {
        kMeansPlusPlusClusterer0.cluster(list0, 0, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer"", e);
    }
}",0,
project,0,test44,"public void test44() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    int[] intArray0 = new int[4];
    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    int[] intArray1 = new int[7];
    EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray1);
    cluster0.addPoint(euclideanIntegerPoint1);
    cluster0.addPoint(euclideanIntegerPoint0);
    // Undeclared exception!
    try {
        kMeansPlusPlusClusterer0.cluster(list0, 0, (-2568));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test55,"public void test55() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    int[] intArray0 = new int[4];
    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    cluster0.addPoint(euclideanIntegerPoint0);
    // Undeclared exception!
    kMeansPlusPlusClusterer0.cluster(list0, 1796, (-149));
}",0,
project,0,test77,"public void test77() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
    int[] intArray0 = new int[0];
    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
    cluster0.addPoint(euclideanIntegerPoint0);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    cluster0.addPoint(euclideanIntegerPoint0);
    kMeansPlusPlusClusterer0.cluster(list0, 2, 2);
}",0,
project,0,test88,"public void test88() throws Throwable {
    MockRandom mockRandom0 = new MockRandom((-546L));
    KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.ERROR;
    KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
    int[] intArray0 = new int[6];
    EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
    Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
    List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
    // Undeclared exception!
    try {
        kMeansPlusPlusClusterer0.cluster(list0, (-850), 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
