focal_method,test_prefix,docstring
"@Override
public int hashCode() {
    return Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables ^ numSlackVariables ^ numArtificialVariables ^ Double.valueOf(epsilon).hashCode() ^ f.hashCode() ^ constraints.hashCode() ^ tableau.hashCode();
}","public void test000() throws Throwable {
    Double[] doubleArray0 = new Double[3];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    doubleArray0[1] = double0;
    doubleArray0[2] = doubleArray0[0];
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-3133.86376687968));
    simplexTableau0.numArtificialVariables = (-76);
    simplexTableau0.hashCode();
}","/**
 * {@inheritDoc}
 */"
"@Override
public int hashCode() {
    return Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables ^ numSlackVariables ^ numArtificialVariables ^ Double.valueOf(epsilon).hashCode() ^ f.hashCode() ^ constraints.hashCode() ^ tableau.hashCode();
}","public void test011() throws Throwable {
    Double[] doubleArray0 = new Double[3];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    doubleArray0[1] = double0;
    doubleArray0[2] = double0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    double[] doubleArray1 = new double[5];
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, 269.7);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-3133.86376687968));
    simplexTableau0.hashCode();
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test022() throws Throwable {
    double[] doubleArray0 = new double[4];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 1.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2138.39));
    simplexTableau0.equals(simplexTableau1);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test033() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-12.247700000000123));
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 597.47170576792);
    simplexTableau1.numArtificialVariables = 3;
    simplexTableau0.equals(simplexTableau1);
}","/**
 * {@inheritDoc}
 */"
"protected RealPointValuePair getSolution() {
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
    for (int i = 0; i < coefficients.length; i++) {
        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
        // if multiple variables can take a given value
        // then we choose the first and set the rest equal to 0
        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        if (basicRow != null) {
            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                if (tableau.getEntry(basicRow, j) == 1) {
                    coefficients[i] = 0;
                }
            }
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test044() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = (-194.0);
    doubleArray0[2] = 3123.5268003220604;
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.5);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-3842.0992));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.5);
    simplexTableau0.getSolution();
}","/**
 * Get the current solution.
 * <p>
 * {@link #solve} should be called first for this to be the optimal solution.
 * </p>
 * @return current solution
 */"
"protected RealPointValuePair getSolution() {
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
    for (int i = 0; i < coefficients.length; i++) {
        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
        // if multiple variables can take a given value
        // then we choose the first and set the rest equal to 0
        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        if (basicRow != null) {
            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                if (tableau.getEntry(basicRow, j) == 1) {
                    coefficients[i] = 0;
                }
            }
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test055() throws Throwable {
    double[] doubleArray0 = new double[8];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1018.446063554));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, Double.NaN);
    simplexTableau0.numArtificialVariables = 2;
    simplexTableau0.getSolution();
}","/**
 * Get the current solution.
 * <p>
 * {@link #solve} should be called first for this to be the optimal solution.
 * </p>
 * @return current solution
 */"
"protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - multiple * tableau.getEntry(subtrahendRow, j));
    }
}","public void test066() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, (-1.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.subtractRow(0, 0, (-1564.3082268));
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param minuendRow row index
 * @param subtrahendRow row index
 * @param multiple multiplication factor
 */"
"protected final void setEntry(final int row, final int column, final double value) {
    tableau.setEntry(row, column, value);
}","public void test077() throws Throwable {
    Double[] doubleArray0 = new Double[2];
    Double double0 = new Double(1.0);
    doubleArray0[0] = double0;
    doubleArray0[1] = double0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray0[0]);
    simplexTableau0.setEntry(0, 0, 657.54855);
}","/**
 * Set an entry of the tableau.
 * @param row row index
 * @param column column index
 * @param value for the entry
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test088() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4168);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-837.8517546));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 4168);
    simplexTableau0.equals(goalType0);
}","/**
 * {@inheritDoc}
 */"
"protected final int getWidth() {
    return tableau.getColumnDimension();
}","public void test099() throws Throwable {
    double[] doubleArray0 = new double[1];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-0.06985575287115274));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-0.06985575287115274));
    simplexTableau0.getWidth();
}","/**
 * Get the width of the tableau.
 * @return width of the tableau
 */"
"protected final int getSlackVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables;
}","public void test1010() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1376, 795, 1.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
    simplexTableau0.getSlackVariableOffset();
}","/**
 * Get the offset of the first slack variable.
 * @return offset of the first slack variable
 */"
"protected final int getOriginalNumDecisionVariables() {
    return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
}","public void test1111() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3274.953659960202));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
    simplexTableau0.getOriginalNumDecisionVariables();
}","/**
 * Get the original number of decision variables.
 * @return original number of decision variables
 * @see #getNumDecisionVariables()
 */"
"protected final int getOriginalNumDecisionVariables() {
    return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
}","public void test1212() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(11, 11);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(11, 40, 40);
    RealVector realVector0 = openMapRealMatrix0.preMultiply((RealVector) openMapRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, Double.NaN);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1249.5626846370565);
    simplexTableau0.getOriginalNumDecisionVariables();
}","/**
 * Get the original number of decision variables.
 * @return original number of decision variables
 * @see #getNumDecisionVariables()
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test1313() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(0, 2199.834661);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 2199.834661);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    simplexTableau0.getNumVariables();
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"protected final int getNumSlackVariables() {
    return numSlackVariables;
}","public void test1414() throws Throwable {
    double[] doubleArray0 = new double[9];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.0, relationship0, doubleArray0, 1.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2861.0));
    simplexTableau0.getNumSlackVariables();
}","/**
 * Get the number of slack variables.
 * @return number of slack variables
 */"
"protected final int getNumObjectiveFunctions() {
    return this.numArtificialVariables > 0 ? 2 : 1;
}","public void test1515() throws Throwable {
    Double[] doubleArray0 = new Double[3];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    doubleArray0[1] = double0;
    doubleArray0[2] = double0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-3133.86376687968));
    simplexTableau0.getNumObjectiveFunctions();
}","/**
 * Get the number of objective functions in this tableau.
 * @return 2 for Phase 1.  1 for Phase 2.
 */"
"protected final int getNumDecisionVariables() {
    return numDecisionVariables;
}","public void test1616() throws Throwable {
    Double[] doubleArray0 = new Double[2];
    Double double0 = new Double(1.0);
    doubleArray0[0] = double0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray0[0]);
    simplexTableau0.getNumDecisionVariables();
}","/**
 * Get the number of decision variables.
 * <p>
 * If variables are not restricted to positive values, this will include 1
 * extra decision variable to represent the absolute value of the most
 * negative variable.
 * </p>
 * @return number of decision variables
 * @see #getOriginalNumDecisionVariables()
 */"
"protected final int getNumArtificialVariables() {
    return numArtificialVariables;
}","public void test1717() throws Throwable {
    double[] doubleArray0 = new double[1];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-0.06985575287115274));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-3842.09919628));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-0.06985575287115274));
    simplexTableau0.getNumArtificialVariables();
}","/**
 * Get the number of artificial variables.
 * @return number of artificial variables
 */"
"public List<LinearConstraint> getNormalizedConstraints() {
    List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();
    for (LinearConstraint constraint : constraints) {
        normalized.add(normalize(constraint));
    }
    return normalized;
}","public void test1818() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(4183);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 5416.317680548);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1630.19976589));
    simplexTableau0.getNormalizedConstraints();
}","/**
 * Get new versions of the constraints which have positive right hand sides.
 * @return new versions of the constraints
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test1919() throws Throwable {
    Double[] doubleArray0 = new Double[3];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    doubleArray0[1] = double0;
    doubleArray0[2] = doubleArray0[1];
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    SimplexTableau.getInvertedCoeffiecientSum(openMapRealVector0);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test2020() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(3111, (-2825.5792749552156));
    SimplexTableau.getInvertedCoeffiecientSum(realVectorImpl0);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test2121() throws Throwable {
    Double[] doubleArray0 = new Double[3];
    Double double0 = new Double((-1.0));
    doubleArray0[0] = double0;
    Double double1 = new Double(2358.0);
    doubleArray0[1] = double1;
    doubleArray0[2] = double1;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, Double.NaN);
    SimplexTableau.getInvertedCoeffiecientSum(openMapRealVector0);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected final int getHeight() {
    return tableau.getRowDimension();
}","public void test2222() throws Throwable {
    double[] doubleArray0 = new double[7];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 956.6877);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1080.595));
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
    simplexTableau0.tableau = (RealMatrix) realMatrixImpl0;
    simplexTableau0.getHeight();
}","/**
 * Get the height of the tableau.
 * @return height of the tableau
 */"
"protected final int getHeight() {
    return tableau.getRowDimension();
}","public void test2323() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(4183);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 5416.317680548);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1630.19976589));
    simplexTableau0.getHeight();
}","/**
 * Get the height of the tableau.
 * @return height of the tableau
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test2424() throws Throwable {
    double[] doubleArray0 = new double[1];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-3842.09919628));
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 4.9E-324);
    simplexTableau0.getEntry(2, 2);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test2525() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3770.941893308484));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3087.04427599);
    simplexTableau0.getEntry(0, 0);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test2626() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3791.389667581878));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3087.04427599);
    simplexTableau0.getEntry(0, 0);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected final int getArtificialVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;
}","public void test2727() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(0, (-1353.912426));
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1353.912426));
    simplexTableau0.getArtificialVariableOffset();
}","/**
 * Get the offset of the first artificial variable.
 * @return offset of the first artificial variable
 */"
"protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - multiple * tableau.getEntry(subtrahendRow, j));
    }
}","public void test2828() throws Throwable {
    double[] doubleArray0 = new double[3];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    // Undeclared exception!
    try {
        simplexTableau0.subtractRow((-91), 3, 1.0E-12);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (-91, 0) in a 1x5 matrix
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param minuendRow row index
 * @param subtrahendRow row index
 * @param multiple multiplication factor
 */"
"protected RealPointValuePair getSolution() {
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
    for (int i = 0; i < coefficients.length; i++) {
        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
        // if multiple variables can take a given value
        // then we choose the first and set the rest equal to 0
        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        if (basicRow != null) {
            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                if (tableau.getEntry(basicRow, j) == 1) {
                    coefficients[i] = 0;
                }
            }
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test2929() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(2096);
    RealVectorImpl realVectorImpl1 = new RealVectorImpl(realVectorImpl0, realVectorImpl0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl1, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3159.691);
    simplexTableau0.getSolution();
    // Undeclared exception!
    simplexTableau0.getSolution();
}","/**
 * Get the current solution.
 * <p>
 * {@link #solve} should be called first for this to be the optimal solution.
 * </p>
 * @return current solution
 */"
"protected RealPointValuePair getSolution() {
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
    for (int i = 0; i < coefficients.length; i++) {
        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
        // if multiple variables can take a given value
        // then we choose the first and set the rest equal to 0
        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        if (basicRow != null) {
            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                if (tableau.getEntry(basicRow, j) == 1) {
                    coefficients[i] = 0;
                }
            }
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test3030() throws Throwable {
    Double[] doubleArray0 = new Double[2];
    Double double0 = new Double(1.0);
    doubleArray0[0] = double0;
    doubleArray0[1] = double0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray0[0]);
    // Undeclared exception!
    try {
        simplexTableau0.getSolution();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // iterator exhausted
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Get the current solution.
 * <p>
 * {@link #solve} should be called first for this to be the optimal solution.
 * </p>
 * @return current solution
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test3131() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1376, 795, 1.0);
    openMapRealVector0.mapLog1pToSelf();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
    // Undeclared exception!
    SimplexTableau.getInvertedCoeffiecientSum(openMapRealVector0);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test3232() throws Throwable {
    // Undeclared exception!
    try {
        SimplexTableau.getInvertedCoeffiecientSum((RealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test3333() throws Throwable {
    Double[] doubleArray0 = new Double[0];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, (-2288.929830948728));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2288.929830948728));
    // Undeclared exception!
    try {
        simplexTableau0.getEntry(189, 189);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (189, 189) in a 1x2 matrix
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test3434() throws Throwable {
    Double[] doubleArray0 = new Double[3];
    Double double0 = new Double(0.0);
    doubleArray0[0] = double0;
    doubleArray0[1] = doubleArray0[0];
    doubleArray0[2] = double0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-3133.86376687968));
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(1953, 0.0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (1,953, 0) in a 1x6 matrix
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected void discardArtificialVariables() {
    if (numArtificialVariables == 0) {
        return;
    }
    int width = getWidth() - numArtificialVariables - 1;
    int height = getHeight() - 1;
    double[][] matrix = new double[height][width];
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width - 1; j++) {
            matrix[i][j] = getEntry(i + 1, j + 1);
        }
        matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());
    }
    this.tableau = new RealMatrixImpl(matrix);
    this.numArtificialVariables = 0;
}","public void test3535() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(2096);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3159.691);
    simplexTableau0.numArtificialVariables = (-2655);
    // Undeclared exception!
    try {
        simplexTableau0.discardArtificialVariables();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // matrix must have at least one row
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Removes the phase 1 objective function and artificial variables from this tableau.
 */"
"protected void discardArtificialVariables() {
    if (numArtificialVariables == 0) {
        return;
    }
    int width = getWidth() - numArtificialVariables - 1;
    int height = getHeight() - 1;
    double[][] matrix = new double[height][width];
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width - 1; j++) {
            matrix[i][j] = getEntry(i + 1, j + 1);
        }
        matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());
    }
    this.tableau = new RealMatrixImpl(matrix);
    this.numArtificialVariables = 0;
}","public void test3636() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-12.247700000000123));
    simplexTableau0.numArtificialVariables = 4164;
    // Undeclared exception!
    try {
        simplexTableau0.discardArtificialVariables();
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Removes the phase 1 objective function and artificial variables from this tableau.
 */"
"protected double[][] createTableau(final boolean maximize) {
    // create a matrix of the correct size
    List<LinearConstraint> constraints = getNormalizedConstraints();
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    double[][] matrix = new double[height][width];
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix[0][0] = -1;
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix[zIndex][zIndex] = maximize ? 1 : -1;
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
    matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
    if (!restrictToNonNegative) {
        matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
        // x-
        if (!restrictToNonNegative) {
            matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
        }
        // RHS
        matrix[row][width - 1] = constraint.getValue();
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix[row][getSlackVariableOffset() + slackVar++] = 1;
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix[row][getSlackVariableOffset() + slackVar++] = -1;
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
            matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
        }
    }
    return matrix;
}","public void test3737() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(4183);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 5416.317680548);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1630.19976589));
    simplexTableau0.createTableau(true);
    // Undeclared exception!
    simplexTableau0.createTableau(false);
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"protected double[][] createTableau(final boolean maximize) {
    // create a matrix of the correct size
    List<LinearConstraint> constraints = getNormalizedConstraints();
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    double[][] matrix = new double[height][width];
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix[0][0] = -1;
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix[zIndex][zIndex] = maximize ? 1 : -1;
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
    matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
    if (!restrictToNonNegative) {
        matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
        // x-
        if (!restrictToNonNegative) {
            matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
        }
        // RHS
        matrix[row][width - 1] = constraint.getValue();
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix[row][getSlackVariableOffset() + slackVar++] = 1;
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix[row][getSlackVariableOffset() + slackVar++] = -1;
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
            matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
        }
    }
    return matrix;
}","public void test3838() throws Throwable {
    double[] doubleArray0 = new double[7];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 956.6877);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1080.595));
    linkedList0.offerFirst((LinearConstraint) null);
    // Undeclared exception!
    try {
        simplexTableau0.createTableau(false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"protected double[][] createTableau(final boolean maximize) {
    // create a matrix of the correct size
    List<LinearConstraint> constraints = getNormalizedConstraints();
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    double[][] matrix = new double[height][width];
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix[0][0] = -1;
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix[zIndex][zIndex] = maximize ? 1 : -1;
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
    matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
    if (!restrictToNonNegative) {
        matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
        // x-
        if (!restrictToNonNegative) {
            matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
        }
        // RHS
        matrix[row][width - 1] = constraint.getValue();
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix[row][getSlackVariableOffset() + slackVar++] = 1;
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix[row][getSlackVariableOffset() + slackVar++] = -1;
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
            matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
        }
    }
    return matrix;
}","public void test3939() throws Throwable {
    double[] doubleArray0 = new double[7];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 237.48833006081085);
    simplexTableau0.numArtificialVariables = (-1228);
    // Undeclared exception!
    try {
        simplexTableau0.createTableau(true);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"protected double[][] createTableau(final boolean maximize) {
    // create a matrix of the correct size
    List<LinearConstraint> constraints = getNormalizedConstraints();
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    double[][] matrix = new double[height][width];
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix[0][0] = -1;
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix[zIndex][zIndex] = maximize ? 1 : -1;
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
    matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
    if (!restrictToNonNegative) {
        matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
        // x-
        if (!restrictToNonNegative) {
            matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
        }
        // RHS
        matrix[row][width - 1] = constraint.getValue();
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix[row][getSlackVariableOffset() + slackVar++] = 1;
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix[row][getSlackVariableOffset() + slackVar++] = -1;
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
            matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
        }
    }
    return matrix;
}","public void test4040() throws Throwable {
    double[] doubleArray0 = new double[0];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1026.0403267349266);
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(realVectorImpl0, 1, relationship0, realVectorImpl0, 0.0);
    linkedList0.add(linearConstraint0);
    linkedList0.add(linearConstraint0);
    // Undeclared exception!
    try {
        simplexTableau0.createTableau(true);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this.f = f;
    this.constraints = constraints;
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
    initialize();
}","public void test4141() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(5, 4158, (-2754.0899799999997));
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 235.7901);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 4158);
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept in floating point comparisons
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this.f = f;
    this.constraints = constraints;
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
    initialize();
}","public void test4242() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, true, 0.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept in floating point comparisons
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this.f = f;
    this.constraints = constraints;
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
    initialize();
}","public void test4343() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3466), (-3466), (-3466));
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-3466));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept in floating point comparisons
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this.f = f;
    this.constraints = constraints;
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
    initialize();
}","public void test4444() throws Throwable {
    double[] doubleArray0 = new double[2];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2420);
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.0, relationship0, openMapRealVector0, 0.0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-4682.0));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept in floating point comparisons
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test4646() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    double[] doubleArray0 = new double[8];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1241.8646);
    int int0 = simplexTableau0.getNumVariables();
    assertEquals(8, int0);
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test4747() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    double[][] doubleArray1 = new double[1][2];
    RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, true);
    simplexTableau0.tableau = (RealMatrix) realMatrixImpl0;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test4848() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, Double.POSITIVE_INFINITY);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test4949() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    simplexTableau0.numArtificialVariables = 1;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test4950() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    simplexTableau0.numArtificialVariables = 1;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(simplexTableau1.equals((Object) simplexTableau0));
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test5051() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertTrue(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test5152() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test5253() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(4183);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 5416.317680548);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1630.19976589));
    boolean boolean0 = simplexTableau0.equals((Object) null);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test5354() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, (-12.247700000000123));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau0);
    assertTrue(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test5455() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(realVectorImpl0, relationship0, 2029.8031074786102);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test5556() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(2096);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3159.691);
    simplexTableau0.divideRow(0, (-2892.48812));
    assertEquals(2096, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"public double getValue() {
    return value;
}","public void test5657() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[2] = 1.0;
    doubleArray0[3] = (-1316.0582);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1563.0709777);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 * @return the stored value of the objective function
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test5758() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(2096);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3159.691);
    simplexTableau0.discardArtificialVariables();
    assertEquals(2096, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"public double getValue() {
    return value;
}","public void test5859() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[0] = (-0.06985575287115274);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-0.06985575287115274));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-3842.09919628));
    linkedList0.add(linearConstraint0);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-0.06985575287115274));
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    assertEquals((-0.06985575287115274), realPointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 * @return the stored value of the objective function
 */"
"protected final int getNumArtificialVariables() {
    return numArtificialVariables;
}","public void test5960() throws Throwable {
    Double[] doubleArray0 = new Double[2];
    Double double0 = new Double(1.0);
    doubleArray0[0] = double0;
    doubleArray0[1] = double0;
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray0[0]);
    int int0 = simplexTableau0.getNumArtificialVariables();
    assertEquals(0, int0);
}","/**
 * Get the number of artificial variables.
 * @return number of artificial variables
 */"
"protected final int getNumSlackVariables() {
    return numSlackVariables;
}","public void test6061() throws Throwable {
    double[] doubleArray0 = new double[5];
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, 1, 1);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 691.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    int int0 = simplexTableau0.getNumSlackVariables();
    assertEquals(0, int0);
}","/**
 * Get the number of slack variables.
 * @return number of slack variables
 */"
"protected final int getNumDecisionVariables() {
    return numDecisionVariables;
}","public void test6162() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(2096);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3159.691);
    int int0 = simplexTableau0.getNumDecisionVariables();
    assertEquals(2096, int0);
}","/**
 * Get the number of decision variables.
 * <p>
 * If variables are not restricted to positive values, this will include 1
 * extra decision variable to represent the absolute value of the most
 * negative variable.
 * </p>
 * @return number of decision variables
 * @see #getOriginalNumDecisionVariables()
 */"
"protected final int getRhsOffset() {
    return getWidth() - 1;
}","public void test6263() throws Throwable {
    double[] doubleArray0 = new double[5];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-0.06985575287115274));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-0.06985575287115274));
    int int0 = simplexTableau0.getRhsOffset();
    assertEquals(7, int0);
}","/**
 * Get the offset of the right hand side.
 * @return offset of the right hand side
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test6364() throws Throwable {
    double[] doubleArray0 = new double[5];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-0.06985575287115274));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-3842.09919628));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-0.06985575287115274));
    simplexTableau0.discardArtificialVariables();
    assertEquals(5, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"protected final void setEntry(final int row, final int column, final double value) {
    tableau.setEntry(row, column, value);
}","public void test6465() throws Throwable {
    double[] doubleArray0 = new double[5];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-0.06985575287115274));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-0.06985575287115274));
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(2, (-16), 0.0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (2, -16) in a 1x8 matrix
        //
        verifyException(""org.apache.commons.math.linear.RealMatrixImpl"", e);
    }
}","/**
 * Set an entry of the tableau.
 * @param row row index
 * @param column column index
 * @param value for the entry
 */"
"protected final double[][] getData() {
    return tableau.getData();
}","public void test6566() throws Throwable {
    RealVectorImpl realVectorImpl0 = new RealVectorImpl(4183);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVectorImpl0, 5416.317680548);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1630.19976589));
    double[][] doubleArray0 = simplexTableau0.getData();
    assertEquals(1, doubleArray0.length);
}","/**
 * Get the tableau data.
 * @return tableau data
 */"
