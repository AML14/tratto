{
  "test00" : {
    "methodSignature" : "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "iterateSimplex",
    "className" : "org.apache.commons.math.optimization.direct.MultiDirectional",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    MultiDirectional multiDirectional0 = new MultiDirectional(0.0, 1.1102230246251565E-14);\n    multiDirectional0.setMaxIterations((-2143));\n    multiDirectional0.iterateSimplex((Comparator<RealPointValuePair>) null);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "iterateSimplex",
    "className" : "org.apache.commons.math.optimization.direct.MultiDirectional",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    MultiDirectional multiDirectional0 = new MultiDirectional();\n    RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[1];\n    double[] doubleArray0 = new double[2];\n    RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, (-4225.05309));\n    realPointValuePairArray0[0] = realPointValuePair0;\n    multiDirectional0.simplex = realPointValuePairArray0;\n    Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    multiDirectional0.iterateSimplex(comparator0);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public RealPointValuePair optimize(final MultivariateRealFunction f, final GoalType goalType, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.direct.MultiDirectional",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    MultiDirectional multiDirectional0 = new MultiDirectional();\n    double[] doubleArray0 = new double[5];\n    doubleArray0[0] = (double) 306;\n    MultivariateVectorialFunction multivariateVectorialFunction0 = mock(MultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateVectorialFunction0).value(any(double[].class));\n    LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorialFunction0, doubleArray0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    // Undeclared exception!\n    multiDirectional0.optimize(leastSquaresConverter0, goalType0, doubleArray0);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "iterateSimplex",
    "className" : "org.apache.commons.math.optimization.direct.MultiDirectional",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    MultiDirectional multiDirectional0 = new MultiDirectional((-163.956534124), (-163.956534124));\n    Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    multiDirectional0.iterateSimplex(comparator0);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public RealPointValuePair optimize(final MultivariateRealFunction f, final GoalType goalType, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
    "methodName" : "optimize",
    "className" : "org.apache.commons.math.optimization.direct.MultiDirectional",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    MultiDirectional multiDirectional0 = new MultiDirectional();\n    double[] doubleArray0 = new double[5];\n    MultivariateVectorialFunction multivariateVectorialFunction0 = mock(MultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateVectorialFunction0).value(any(double[].class));\n    LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorialFunction0, doubleArray0);\n    GoalType goalType0 = GoalType.MAXIMIZE;\n    // Undeclared exception!\n    multiDirectional0.optimize(leastSquaresConverter0, goalType0, doubleArray0);\n}",
    "testName" : "test44"
  }
}