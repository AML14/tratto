focal_method,test_prefix,docstring
"public static float copySign(float magnitude, float sign) {
    int m = Float.floatToIntBits(magnitude);
    int s = Float.floatToIntBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test0000() throws Throwable {
    float float0 = FastMath.copySign((-0.99999994F), (float) 2864);
    assertEquals(0.99999994F, float0, 0.01F);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static float copySign(float magnitude, float sign) {
    int m = Float.floatToIntBits(magnitude);
    int s = Float.floatToIntBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test0011() throws Throwable {
    float float0 = FastMath.copySign(0.0F, (-1262.3472F));
    assertEquals(-0.0F, float0, 0.01F);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double copySign(double magnitude, double sign) {
    long m = Double.doubleToLongBits(magnitude);
    long s = Double.doubleToLongBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test0022() throws Throwable {
    double double0 = FastMath.copySign((double) (-213L), 175.9);
    assertEquals(213.0, double0, 0.01);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double copySign(double magnitude, double sign) {
    long m = Double.doubleToLongBits(magnitude);
    long s = Double.doubleToLongBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test0033() throws Throwable {
    double double0 = FastMath.copySign(0.0, (-1447.1435378000042));
    assertEquals(-0.0, double0, 0.01);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double copySign(double magnitude, double sign) {
    long m = Double.doubleToLongBits(magnitude);
    long s = Double.doubleToLongBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test0044() throws Throwable {
    double double0 = FastMath.copySign(796.5, (double) 383.5332F);
    assertEquals(796.5, double0, 0.01);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static long max(final long a, final long b) {
    return (a <= b) ? b : a;
}","public void test0055() throws Throwable {
    long long0 = FastMath.max((-2182L), (-2182L));
    assertEquals((-2182L), long0);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static long min(final long a, final long b) {
    return (a <= b) ? a : b;
}","public void test0066() throws Throwable {
    long long0 = FastMath.min((long) (-1023), (long) (-807));
    assertEquals((-1023L), long0);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static int min(final int a, final int b) {
    return (a <= b) ? a : b;
}","public void test0077() throws Throwable {
    int int0 = FastMath.min((-2365), 2855);
    assertEquals((-2365), int0);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static double rint(double x) {
    double y = floor(x);
    double d = x - y;
    if (d > 0.5) {
        if (y == -1.0) {
            // Preserve sign of operand
            return -0.0;
        }
        return y + 1.0;
    }
    if (d < 0.5) {
        return y;
    }
    /* half way, round to even */
    long z = (long) y;
    return (z & 1) == 0 ? y : y + 1.0;
}","public void test0088() throws Throwable {
    double double0 = FastMath.rint(0.8109631538391113);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.
 * @param x number from which nearest whole number is requested
 * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
 */"
"public static double rint(double x) {
    double y = floor(x);
    double d = x - y;
    if (d > 0.5) {
        if (y == -1.0) {
            // Preserve sign of operand
            return -0.0;
        }
        return y + 1.0;
    }
    if (d < 0.5) {
        return y;
    }
    /* half way, round to even */
    long z = (long) y;
    return (z & 1) == 0 ? y : y + 1.0;
}","public void test0099() throws Throwable {
    double double0 = FastMath.rint(3370.5);
    assertEquals(3370.0, double0, 0.01);
}","/**
 * Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.
 * @param x number from which nearest whole number is requested
 * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test01010() throws Throwable {
    double double0 = FastMath.scalb(1117.076, 1024);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static float ulp(float x) {
    if (Float.isInfinite(x)) {
        return Float.POSITIVE_INFINITY;
    }
    return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
}","public void test01111() throws Throwable {
    float float0 = FastMath.ulp(740.9073F);
    assertEquals(6.1035156E-5F, float0, 0.01F);
}","/**
 * Compute least significant bit (Unit in Last Position) for a number.
 * @param x number from which ulp is requested
 * @return ulp(x)
 */"
"public static double ulp(double x) {
    if (Double.isInfinite(x)) {
        return Double.POSITIVE_INFINITY;
    }
    return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
}","public void test01212() throws Throwable {
    double double0 = FastMath.ulp(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute least significant bit (Unit in Last Position) for a number.
 * @param x number from which ulp is requested
 * @return ulp(x)
 */"
"public static float abs(final float x) {
    // -0.0 => +0.0
    return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;
}","public void test01313() throws Throwable {
    float float0 = FastMath.abs(Float.NaN);
    assertEquals(Float.NaN, float0, 0.01F);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static int abs(final int x) {
    return (x < 0) ? -x : x;
}","public void test01414() throws Throwable {
    int int0 = FastMath.abs(1500);
    assertEquals(1500, int0);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static double toDegrees(double x) {
    if (Double.isInfinite(x) || x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    // These are 180/PI split into high and low order bits
    final double facta = 57.2957763671875;
    final double factb = 3.145894820876798E-6;
    double xa = doubleHighPart(x);
    double xb = x - xa;
    return xb * factb + xb * facta + xa * factb + xa * facta;
}","public void test01515() throws Throwable {
    double double0 = FastMath.toDegrees((-6.480706118857055E-9));
    assertEquals((-3.713171088751173E-7), double0, 0.01);
}","/**
 *  Convert radians to degrees, with error of less than 0.5 ULP
 *  @param x angle in radians
 *  @return x converted into degrees
 */"
"public static double asin(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == 1.0) {
        return Math.PI / 2.0;
    }
    if (x == -1.0) {
        return -Math.PI / 2.0;
    }
    if (x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    /* Compute asin(x) = atan(x/sqrt(1-x*x)) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y;
    y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    double dx = zb / (2.0 * y);
    // Compute ratio r = x/y
    double r = x / y;
    temp = r * HEX_40000000;
    double ra = r + temp - temp;
    double rb = r - ra;
    // Correct for rounding in division
    rb += (x - ra * ya - ra * yb - rb * ya - rb * yb) / y;
    // Add in effect additional bits of sqrt.
    rb += -x * dx / y / y;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, false);
}","public void test01616() throws Throwable {
    double double0 = FastMath.asin((-2.2250738585072014E-308));
    assertEquals((-2.2250738585072014E-308), double0, 0.01);
}","/**
 * Compute the arc sine of a number.
 * @param x number on which evaluation is done
 * @return arc sine of x
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test01717() throws Throwable {
    double double0 = FastMath.atan2(0.0F, 2.9676011119845104E-8);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test01818() throws Throwable {
    double double0 = FastMath.atan2(3983.0, 3983.0);
    assertEquals(0.7853981633974483, double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double tan(double x) {
    boolean negative = false;
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (xa > 1.5) {
        // Accuracy suffers between 1.5 and PI/2
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -(a - pi2a + xa);
        b += pi2b - xb;
        xa = a + b;
        xb = -(xa - a - b);
        quadrant ^= 1;
        negative ^= true;
    }
    double result;
    if ((quadrant & 1) == 0) {
        result = tanQ(xa, xb, false);
    } else {
        result = -tanQ(xa, xb, true);
    }
    if (negative) {
        result = -result;
    }
    return result;
}","public void test01919() throws Throwable {
    double double0 = FastMath.tan(1.5707963267948966);
    assertEquals(1.633123935319537E16, double0, 0.01);
}","/**
 * Tangent function.
 *
 * @param x Argument.
 * @return tan(x)
 */"
"public static double cos(double x) {
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        xa = -xa;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    //if (negative)
    //  quadrant = (quadrant + 2) % 4;
    switch(quadrant) {
        case 0:
            return cosQ(xa, xb);
        case 1:
            return -sinQ(xa, xb);
        case 2:
            return -cosQ(xa, xb);
        case 3:
            return sinQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test02020() throws Throwable {
    double double0 = FastMath.cos(3294198.0);
    assertEquals(0.7910146852024715, double0, 0.01);
}","/**
 * Cosine function.
 *
 * @param x Argument.
 * @return cos(x)
 */"
"public static double expm1(double x) {
    return expm1(x, null);
}","public void test02121() throws Throwable {
    double double0 = FastMath.expm1(1.0F);
    assertEquals(1.7182818284590453, double0, 0.01);
}","/**
 * Compute exp(x) - 1
 * @param x number to compute shifted exponential
 * @return exp(x) - 1
 */"
"public static double expm1(double x) {
    return expm1(x, null);
}","public void test02222() throws Throwable {
    double double0 = FastMath.expm1((-1.0F));
    assertEquals((-0.6321205588285577), double0, 0.01);
}","/**
 * Compute exp(x) - 1
 * @param x number to compute shifted exponential
 * @return exp(x) - 1
 */"
"public static float signum(final float a) {
    // return +0.0/-0.0/NaN depending on a
    return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);
}","public void test02323() throws Throwable {
    float float0 = FastMath.signum(Float.NaN);
    assertEquals(Float.NaN, float0, 0.01F);
}","/**
 * Compute the signum of a number.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise
 * @param a number on which evaluation is done
 * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
 */"
"public static double signum(final double a) {
    // return +0.0/-0.0/NaN depending on a
    return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);
}","public void test02424() throws Throwable {
    double double0 = FastMath.signum(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the signum of a number.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise
 * @param a number on which evaluation is done
 * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
 */"
"public static double cosh(double x) {
    if (x != x) {
        return x;
    }
    // cosh[z] = (exp(z) + exp(-z))/2
    // for numbers with magnitude 20 or so,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(-x);
    }
    final double[] hiPrec = new double[2];
    if (x < 0.0) {
        x = -x;
    }
    exp(x, 0.0, hiPrec);
    double ya = hiPrec[0] + hiPrec[1];
    double yb = -(ya - hiPrec[0] - hiPrec[1]);
    double temp = ya * HEX_40000000;
    double yaa = ya + temp - temp;
    double yab = ya - yaa;
    // recip = 1/y
    double recip = 1.0 / ya;
    temp = recip * HEX_40000000;
    double recipa = recip + temp - temp;
    double recipb = recip - recipa;
    // Correct for rounding in division
    recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
    // Account for yb
    recipb += -yb * recip * recip;
    // y = y + 1/y
    temp = ya + recipa;
    yb += -(temp - ya - recipa);
    ya = temp;
    temp = ya + recipb;
    yb += -(temp - ya - recipb);
    ya = temp;
    double result = ya + yb;
    result *= 0.5;
    return result;
}","public void test02525() throws Throwable {
    double double0 = FastMath.cosh(1.570628990785749);
    assertEquals(2.5087934236122713, double0, 0.01);
}","/**
 * Compute the hyperbolic cosine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic cosine of x
 */"
"public static double toDegrees(double x) {
    if (Double.isInfinite(x) || x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    // These are 180/PI split into high and low order bits
    final double facta = 57.2957763671875;
    final double factb = 3.145894820876798E-6;
    double xa = doubleHighPart(x);
    double xb = x - xa;
    return xb * factb + xb * facta + xa * factb + xa * facta;
}","public void test02626() throws Throwable {
    double double0 = FastMath.toDegrees(2.2250738585072014E-308);
    assertEquals(1.2748734119735194E-306, double0, 0.01);
}","/**
 *  Convert radians to degrees, with error of less than 0.5 ULP
 *  @param x angle in radians
 *  @return x converted into degrees
 */"
"public static double toRadians(double x) {
    if (Double.isInfinite(x) || x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    // These are PI/180 split into high and low order bits
    final double facta = 0.01745329052209854;
    final double factb = 1.997844754509471E-9;
    double xa = doubleHighPart(x);
    double xb = x - xa;
    double result = xb * factb + xb * facta + xa * factb + xa * facta;
    if (result == 0) {
        // ensure correct sign if calculation underflows
        result = result * x;
    }
    return result;
}","public void test02727() throws Throwable {
    double double0 = FastMath.toRadians((-2.2250738585072014E-308));
    assertEquals((-3.8834864931005E-310), double0, 0.01);
}","/**
 *  Convert degrees to radians, with error of less than 0.5 ULP
 *  @param x angle in degrees
 *  @return x converted into radians
 */"
"public static double sqrt(final double a) {
    return Math.sqrt(a);
}","public void test02828() throws Throwable {
    double double0 = FastMath.sqrt(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the square root of a number.
 * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}
 * @param a number on which evaluation is done
 * @return square root of a
 */"
"public static double sqrt(final double a) {
    return Math.sqrt(a);
}","public void test02929() throws Throwable {
    double double0 = FastMath.sqrt(81.76);
    assertEquals(9.042123644365853, double0, 0.01);
}","/**
 * Compute the square root of a number.
 * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}
 * @param a number on which evaluation is done
 * @return square root of a
 */"
"public static int round(final float x) {
    return (int) floor(x + 0.5f);
}","public void test03030() throws Throwable {
    int int0 = FastMath.round((float) 0L);
    assertEquals(0, int0);
}","/**
 * Get the closest int to x.
 * @param x number from which closest int is requested
 * @return closest int to x
 */"
"public static int round(final float x) {
    return (int) floor(x + 0.5f);
}","public void test03131() throws Throwable {
    int int0 = FastMath.round(1.0F);
    assertEquals(1, int0);
}","/**
 * Get the closest int to x.
 * @param x number from which closest int is requested
 * @return closest int to x
 */"
"public static long round(double x) {
    return (long) floor(x + 0.5);
}","public void test03232() throws Throwable {
    long long0 = FastMath.round(0.0);
    assertEquals(0L, long0);
}","/**
 * Get the closest long to x.
 * @param x number from which closest long is requested
 * @return closest long to x
 */"
"public static long round(double x) {
    return (long) floor(x + 0.5);
}","public void test03333() throws Throwable {
    long long0 = FastMath.round((-738.81948056557));
    assertEquals((-739L), long0);
}","/**
 * Get the closest long to x.
 * @param x number from which closest long is requested
 * @return closest long to x
 */"
"public static double pow(double d, int e) {
    if (e == 0) {
        return 1.0;
    } else if (e < 0) {
        e = -e;
        d = 1.0 / d;
    }
    // split d as two 26 bits numbers
    // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
    final int splitFactor = 0x8000001;
    final double cd = splitFactor * d;
    final double d1High = cd - (cd - d);
    final double d1Low = d - d1High;
    // prepare result
    double resultHigh = 1;
    double resultLow = 0;
    // d^(2p)
    double d2p = d;
    double d2pHigh = d1High;
    double d2pLow = d1Low;
    while (e != 0) {
        if ((e & 0x1) != 0) {
            // accurate multiplication result = result * d^(2p) using Veltkamp TwoProduct algorithm
            // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
            final double tmpHigh = resultHigh * d2p;
            final double cRH = splitFactor * resultHigh;
            final double rHH = cRH - (cRH - resultHigh);
            final double rHL = resultHigh - rHH;
            final double tmpLow = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);
            resultHigh = tmpHigh;
            resultLow = resultLow * d2p + tmpLow;
        }
        // accurate squaring d^(2(p+1)) = d^(2p) * d^(2p) using Veltkamp TwoProduct algorithm
        // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
        final double tmpHigh = d2pHigh * d2p;
        final double cD2pH = splitFactor * d2pHigh;
        final double d2pHH = cD2pH - (cD2pH - d2pHigh);
        final double d2pHL = d2pHigh - d2pHH;
        final double tmpLow = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);
        final double cTmpH = splitFactor * tmpHigh;
        d2pHigh = cTmpH - (cTmpH - tmpHigh);
        d2pLow = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);
        d2p = d2pHigh + d2pLow;
        e = e >> 1;
    }
    return resultHigh + resultLow;
}","public void test03434() throws Throwable {
    double double0 = FastMath.pow((double) 989.485F, (-1023));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Raise a double to an int power.
 *
 * @param d Number to raise.
 * @param e Exponent.
 * @return d<sup>e</sup>
 */"
"public static double pow(double d, int e) {
    if (e == 0) {
        return 1.0;
    } else if (e < 0) {
        e = -e;
        d = 1.0 / d;
    }
    // split d as two 26 bits numbers
    // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
    final int splitFactor = 0x8000001;
    final double cd = splitFactor * d;
    final double d1High = cd - (cd - d);
    final double d1Low = d - d1High;
    // prepare result
    double resultHigh = 1;
    double resultLow = 0;
    // d^(2p)
    double d2p = d;
    double d2pHigh = d1High;
    double d2pLow = d1Low;
    while (e != 0) {
        if ((e & 0x1) != 0) {
            // accurate multiplication result = result * d^(2p) using Veltkamp TwoProduct algorithm
            // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
            final double tmpHigh = resultHigh * d2p;
            final double cRH = splitFactor * resultHigh;
            final double rHH = cRH - (cRH - resultHigh);
            final double rHL = resultHigh - rHH;
            final double tmpLow = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);
            resultHigh = tmpHigh;
            resultLow = resultLow * d2p + tmpLow;
        }
        // accurate squaring d^(2(p+1)) = d^(2p) * d^(2p) using Veltkamp TwoProduct algorithm
        // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
        final double tmpHigh = d2pHigh * d2p;
        final double cD2pH = splitFactor * d2pHigh;
        final double d2pHH = cD2pH - (cD2pH - d2pHigh);
        final double d2pHL = d2pHigh - d2pHH;
        final double tmpLow = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);
        final double cTmpH = splitFactor * tmpHigh;
        d2pHigh = cTmpH - (cTmpH - tmpHigh);
        d2pLow = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);
        d2p = d2pHigh + d2pLow;
        e = e >> 1;
    }
    return resultHigh + resultLow;
}","public void test03535() throws Throwable {
    double double0 = FastMath.pow((-1.5707963267948966), 355);
    assertEquals((-4.193303974077488E69), double0, 0.01);
}","/**
 * Raise a double to an int power.
 *
 * @param d Number to raise.
 * @param e Exponent.
 * @return d<sup>e</sup>
 */"
"public static float nextUp(final float a) {
    return nextAfter(a, Float.POSITIVE_INFINITY);
}","public void test03636() throws Throwable {
    float float0 = FastMath.nextUp((-1.4E-45F));
    assertEquals(-0.0F, float0, 0.01F);
}","/**
 * Compute next number towards positive infinity.
 * @param a number to which neighbor should be computed
 * @return neighbor of a towards positive infinity
 */"
"public static float nextUp(final float a) {
    return nextAfter(a, Float.POSITIVE_INFINITY);
}","public void test03737() throws Throwable {
    float float0 = FastMath.nextUp((-1.0F));
    assertEquals((-0.99999994F), float0, 0.01F);
}","/**
 * Compute next number towards positive infinity.
 * @param a number to which neighbor should be computed
 * @return neighbor of a towards positive infinity
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test03838() throws Throwable {
    double double0 = FastMath.nextAfter((double) 0.0F, 0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static long min(final long a, final long b) {
    return (a <= b) ? a : b;
}","public void test03939() throws Throwable {
    long long0 = FastMath.min(1167L, 1167L);
    assertEquals(1167L, long0);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static int min(final int a, final int b) {
    return (a <= b) ? a : b;
}","public void test04040() throws Throwable {
    int int0 = FastMath.min(5, 0);
    assertEquals(0, int0);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static float min(final float a, final float b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return a;
    }
    return b;
}","public void test04141() throws Throwable {
    float float0 = FastMath.min(616.4F, (float) 2146963613);
    assertEquals(616.4F, float0, 0.01F);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static double min(final double a, final double b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return a;
    }
    return b;
}","public void test04242() throws Throwable {
    double double0 = FastMath.min(1.0, 0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static double min(final double a, final double b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return a;
    }
    return b;
}","public void test04343() throws Throwable {
    double double0 = FastMath.min(2086.4, 2078.111);
    assertEquals(2078.111, double0, 0.01);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static long max(final long a, final long b) {
    return (a <= b) ? b : a;
}","public void test04444() throws Throwable {
    long long0 = FastMath.max(0L, 1023L);
    assertEquals(1023L, long0);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static int max(final int a, final int b) {
    return (a <= b) ? b : a;
}","public void test04545() throws Throwable {
    int int0 = FastMath.max(0, 0);
    assertEquals(0, int0);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static int max(final int a, final int b) {
    return (a <= b) ? b : a;
}","public void test04646() throws Throwable {
    int int0 = FastMath.max((-53), (-807));
    assertEquals((-53), int0);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static float max(final float a, final float b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return b;
    }
    return a;
}","public void test04747() throws Throwable {
    float float0 = FastMath.max(0.0F, 0.0F);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static double max(final double a, final double b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return b;
    }
    return a;
}","public void test04848() throws Throwable {
    double double0 = FastMath.max((-1.5705903795298828), (double) Float.NEGATIVE_INFINITY);
    assertEquals((-1.5705903795298828), double0, 0.01);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static double log10(final double x) {
    final double[] hiPrec = new double[2];
    final double lores = log(x, hiPrec);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    final double tmp = hiPrec[0] * HEX_40000000;
    final double lna = hiPrec[0] + tmp - tmp;
    final double lnb = hiPrec[0] - lna + hiPrec[1];
    final double rln10a = 0.4342944622039795;
    final double rln10b = 1.9699272335463627E-8;
    return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
}","public void test04949() throws Throwable {
    double double0 = FastMath.log10(1.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the base 10 logarithm.
 * @param x a number
 * @return log10(x)
 */"
"public static double log10(final double x) {
    final double[] hiPrec = new double[2];
    final double lores = log(x, hiPrec);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    final double tmp = hiPrec[0] * HEX_40000000;
    final double lna = hiPrec[0] + tmp - tmp;
    final double lnb = hiPrec[0] - lna + hiPrec[1];
    final double rln10a = 0.4342944622039795;
    final double rln10b = 1.9699272335463627E-8;
    return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
}","public void test05050() throws Throwable {
    double double0 = FastMath.log10(1142.019);
    assertEquals(3.0576733294146576, double0, 0.01);
}","/**
 * Compute the base 10 logarithm.
 * @param x a number
 * @return log10(x)
 */"
"public static double log(double base, double x) {
    return log(x) / log(base);
}","public void test05151() throws Throwable {
    double double0 = FastMath.log(2046.745277684, 660.2065754);
    assertEquals(0.8515933301968481, double0, 0.01);
}","/**
 * Computes the <a href=""http://mathworld.wolfram.com/Logarithm.html"">
 * logarithm</a> in a given base.
 *
 * Returns {@code NaN} if either argument is negative.
 * If {@code base} is 0 and {@code x} is positive, 0 is returned.
 * If {@code base} is positive and {@code x} is 0,
 * {@code Double.NEGATIVE_INFINITY} is returned.
 * If both arguments are 0, the result is {@code NaN}.
 *
 * @param base Base of the logarithm, must be greater than 0.
 * @param x Argument, must be greater than 0.
 * @return the value of the logarithm, i.e. the number {@code y} such that
 * <code>base<sup>y</sup> = x</code>.
 * @since 1.2 (previously in {@code MathUtils}, moved as of version 3.0)
 */"
"public static double log(final double x) {
    return log(x, null);
}","public void test05252() throws Throwable {
    double double0 = FastMath.log((double) 1.0F);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Natural logarithm.
 *
 * @param x   a double
 * @return log(x)
 */"
"public static double log(final double x) {
    return log(x, null);
}","public void test05353() throws Throwable {
    double double0 = FastMath.log(1746.64);
    assertEquals(7.465449221354861, double0, 0.01);
}","/**
 * Natural logarithm.
 *
 * @param x   a double
 * @return log(x)
 */"
"public static int getExponent(final float f) {
    return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
}","public void test05454() throws Throwable {
    int int0 = FastMath.getExponent((-1.0F));
    assertEquals(0, int0);
}","/**
 * Return the exponent of a float number, removing the bias.
 * <p>
 * For float numbers of the form 2<sup>x</sup>, the unbiased
 * exponent is exactly x.
 * </p>
 * @param f number from which exponent is requested
 * @return exponent for d in IEEE754 representation, without bias
 */"
"public static int getExponent(final float f) {
    return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
}","public void test05555() throws Throwable {
    int int0 = FastMath.getExponent(2147.0F);
    assertEquals(11, int0);
}","/**
 * Return the exponent of a float number, removing the bias.
 * <p>
 * For float numbers of the form 2<sup>x</sup>, the unbiased
 * exponent is exactly x.
 * </p>
 * @param f number from which exponent is requested
 * @return exponent for d in IEEE754 representation, without bias
 */"
"public static int getExponent(final double d) {
    return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
}","public void test05656() throws Throwable {
    int int0 = FastMath.getExponent((double) 1.0F);
    assertEquals(0, int0);
}","/**
 * Return the exponent of a double number, removing the bias.
 * <p>
 * For double numbers of the form 2<sup>x</sup>, the unbiased
 * exponent is exactly x.
 * </p>
 * @param d number from which exponent is requested
 * @return exponent for d in IEEE754 representation, without bias
 */"
"public static int getExponent(final double d) {
    return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
}","public void test05757() throws Throwable {
    int int0 = FastMath.getExponent(0.0);
    assertEquals((-1023), int0);
}","/**
 * Return the exponent of a double number, removing the bias.
 * <p>
 * For double numbers of the form 2<sup>x</sup>, the unbiased
 * exponent is exactly x.
 * </p>
 * @param d number from which exponent is requested
 * @return exponent for d in IEEE754 representation, without bias
 */"
"public static double exp(double x) {
    return exp(x, 0.0, null);
}","public void test05858() throws Throwable {
    double double0 = FastMath.exp((-1958.0));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Exponential function.
 *
 * Computes exp(x), function result is nearly rounded.   It will be correctly
 * rounded to the theoretical value for 99.9% of input values, otherwise it will
 * have a 1 UPL error.
 *
 * Method:
 *    Lookup intVal = exp(int(x))
 *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );
 *    Compute z as the exponential of the remaining bits by a polynomial minus one
 *    exp(x) = intVal * fracVal * (1 + z)
 *
 * Accuracy:
 *    Calculation is done with 63 bits of precision, so result should be correctly
 *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.
 *
 * @param x   a double
 * @return double e<sup>x</sup>
 */"
"public static float copySign(float magnitude, float sign) {
    int m = Float.floatToIntBits(magnitude);
    int s = Float.floatToIntBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test05959() throws Throwable {
    float float0 = FastMath.copySign(0.0F, 760.49F);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double ceil(double x) {
    double y;
    if (x != x) {
        // NaN
        return x;
    }
    y = floor(x);
    if (y == x) {
        return y;
    }
    y += 1.0;
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test06060() throws Throwable {
    double double0 = FastMath.ceil((-2420.1741085807));
    assertEquals((-2420.0), double0, 0.01);
}","/**
 * Get the smallest whole number larger than x.
 * @param x number from which ceil is requested
 * @return a double number c such that c is an integer c - 1.0 < x <= c
 */"
"public static double cbrt(double x) {
    /* Convert input double to bits */
    long inbits = Double.doubleToLongBits(x);
    int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
    boolean subnormal = false;
    if (exponent == -1023) {
        if (x == 0) {
            return x;
        }
        /* Subnormal, so normalize */
        subnormal = true;
        // 2^54
        x *= 1.8014398509481984E16;
        inbits = Double.doubleToLongBits(x);
        exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
    }
    if (exponent == 1024) {
        // Nan or infinity.  Don't care which.
        return x;
    }
    /* Divide the exponent by 3 */
    int exp3 = exponent / 3;
    /* p2 will be the nearest power of 2 to x with its exponent divided by 3 */
    double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | (long) (((exp3 + 1023) & 0x7ff)) << 52);
    /* This will be a number between 1 and 2 */
    final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
    /* Estimate the cube root of mant by polynomial */
    double est = -0.010714690733195933;
    est = est * mant + 0.0875862700108075;
    est = est * mant + -0.3058015757857271;
    est = est * mant + 0.7249995199969751;
    est = est * mant + 0.5039018405998233;
    est *= CBRTTWO[exponent % 3 + 2];
    // est should now be good to about 15 bits of precision.   Do 2 rounds of
    // Newton's method to get closer,  this should get us full double precision
    // Scale down x for the purpose of doing newtons method.  This avoids over/under flows.
    final double xs = x / (p2 * p2 * p2);
    est += (xs - est * est * est) / (3 * est * est);
    est += (xs - est * est * est) / (3 * est * est);
    // Do one round of Newton's method in extended precision to get the last bit right.
    double temp = est * HEX_40000000;
    double ya = est + temp - temp;
    double yb = est - ya;
    double za = ya * ya;
    double zb = ya * yb * 2.0 + yb * yb;
    temp = za * HEX_40000000;
    double temp2 = za + temp - temp;
    zb += za - temp2;
    za = temp2;
    zb = za * yb + ya * zb + zb * yb;
    za = za * ya;
    double na = xs - za;
    double nb = -(na - xs + za);
    nb -= zb;
    est += (na + nb) / (3 * est * est);
    /* Scale by a power of two, so this is exact. */
    est *= p2;
    if (subnormal) {
        // 2^-18
        est *= 3.814697265625E-6;
    }
    return est;
}","public void test06161() throws Throwable {
    double double0 = FastMath.cbrt((-6.480706118857055E-9));
    assertEquals((-0.0018644072194913017), double0, 0.01);
}","/**
 * Compute the cubic root of a number.
 * @param x number on which evaluation is done
 * @return cubic root of x
 */"
"public static double atanh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAtanh;
    if (a > 0.15) {
        absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
    } else {
        final double a2 = a * a;
        if (a > 0.087) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
        } else if (a > 0.031) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
        } else if (a > 0.003) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
        } else {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
        }
    }
    return negative ? -absAtanh : absAtanh;
}","public void test06262() throws Throwable {
    double double0 = FastMath.atanh((-7.877917738262007E-9));
    assertEquals((-7.877917738262007E-9), double0, 0.01);
}","/**
 * Compute the inverse hyperbolic tangent of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic tangent of a
 */"
"public static double atan(double x) {
    return atan(x, 0.0, false);
}","public void test06363() throws Throwable {
    double double0 = FastMath.atan(1.5574076175689697);
    assertEquals(0.9999999687387683, double0, 0.01);
}","/**
 * Arctangent function
 *  @param x a number
 *  @return atan(x)
 */"
"public static double acosh(final double a) {
    return FastMath.log(a + FastMath.sqrt(a * a - 1));
}","public void test06464() throws Throwable {
    double double0 = FastMath.acosh(1.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic cosine of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic cosine of a
 */"
"public static double acosh(final double a) {
    return FastMath.log(a + FastMath.sqrt(a * a - 1));
}","public void test06565() throws Throwable {
    double double0 = FastMath.acosh(2146.2150000000006);
    assertEquals(8.364608230851337, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic cosine of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic cosine of a
 */"
"public static long abs(final long x) {
    return (x < 0l) ? -x : x;
}","public void test06666() throws Throwable {
    long long0 = FastMath.abs(0L);
    assertEquals(0L, long0);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static int abs(final int x) {
    return (x < 0) ? -x : x;
}","public void test06767() throws Throwable {
    int int0 = FastMath.abs(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, int0);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static double IEEEremainder(double dividend, double divisor) {
    // TODO provide our own implementation
    return StrictMath.IEEEremainder(dividend, divisor);
}","public void test06868() throws Throwable {
    double double0 = FastMath.IEEEremainder(4.392983574030969E-147, 4.392983574030969E-147);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Computes the remainder as prescribed by the IEEE 754 standard.
 * The remainder value is mathematically equal to {@code x - y*n}
 * where {@code n} is the mathematical integer closest to the exact mathematical value
 * of the quotient {@code x/y}.
 * If two mathematical integers are equally close to {@code x/y} then
 * {@code n} is the integer that is even.
 * <p>
 * <ul>
 * <li>If either operand is NaN, the result is NaN.</li>
 * <li>If the result is not NaN, the sign of the result equals the sign of the dividend.</li>
 * <li>If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.</li>
 * <li>If the dividend is finite and the divisor is an infinity, the result equals the dividend.</li>
 * <li>If the dividend is a zero and the divisor is finite, the result equals the dividend.</li>
 * </ul>
 * <p><b>Note:</b> this implementation currently delegates to {@link StrictMath#IEEEremainder}
 * @param dividend the number to be divided
 * @param divisor the number by which to divide
 * @return the remainder, rounded
 */"
"public static double IEEEremainder(double dividend, double divisor) {
    // TODO provide our own implementation
    return StrictMath.IEEEremainder(dividend, divisor);
}","public void test06969() throws Throwable {
    double double0 = FastMath.IEEEremainder(1.0, 506.971);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Computes the remainder as prescribed by the IEEE 754 standard.
 * The remainder value is mathematically equal to {@code x - y*n}
 * where {@code n} is the mathematical integer closest to the exact mathematical value
 * of the quotient {@code x/y}.
 * If two mathematical integers are equally close to {@code x/y} then
 * {@code n} is the integer that is even.
 * <p>
 * <ul>
 * <li>If either operand is NaN, the result is NaN.</li>
 * <li>If the result is not NaN, the sign of the result equals the sign of the dividend.</li>
 * <li>If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.</li>
 * <li>If the dividend is finite and the divisor is an infinity, the result equals the dividend.</li>
 * <li>If the dividend is a zero and the divisor is finite, the result equals the dividend.</li>
 * </ul>
 * <p><b>Note:</b> this implementation currently delegates to {@link StrictMath#IEEEremainder}
 * @param dividend the number to be divided
 * @param divisor the number by which to divide
 * @return the remainder, rounded
 */"
"public static double IEEEremainder(double dividend, double divisor) {
    // TODO provide our own implementation
    return StrictMath.IEEEremainder(dividend, divisor);
}","public void test07070() throws Throwable {
    double double0 = FastMath.IEEEremainder((-5.555080534042001E-8), (-668.81043863254));
    assertEquals((-5.555080534042001E-8), double0, 0.01);
}","/**
 * Computes the remainder as prescribed by the IEEE 754 standard.
 * The remainder value is mathematically equal to {@code x - y*n}
 * where {@code n} is the mathematical integer closest to the exact mathematical value
 * of the quotient {@code x/y}.
 * If two mathematical integers are equally close to {@code x/y} then
 * {@code n} is the integer that is even.
 * <p>
 * <ul>
 * <li>If either operand is NaN, the result is NaN.</li>
 * <li>If the result is not NaN, the sign of the result equals the sign of the dividend.</li>
 * <li>If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.</li>
 * <li>If the dividend is finite and the divisor is an infinity, the result equals the dividend.</li>
 * <li>If the dividend is a zero and the divisor is finite, the result equals the dividend.</li>
 * </ul>
 * <p><b>Note:</b> this implementation currently delegates to {@link StrictMath#IEEEremainder}
 * @param dividend the number to be divided
 * @param divisor the number by which to divide
 * @return the remainder, rounded
 */"
"public static double floor(double x) {
    long y;
    if (x != x) {
        // NaN
        return x;
    }
    if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
        return x;
    }
    y = (long) x;
    if (x < 0 && y != x) {
        y--;
    }
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test07171() throws Throwable {
    double double0 = FastMath.floor(0.0F);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the largest whole number smaller than x.
 * @param x number from which floor is requested
 * @return a double number f such that f is an integer f <= x < f + 1.0
 */"
"public static double floor(double x) {
    long y;
    if (x != x) {
        // NaN
        return x;
    }
    if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
        return x;
    }
    y = (long) x;
    if (x < 0 && y != x) {
        y--;
    }
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test07272() throws Throwable {
    double double0 = FastMath.floor((-1.9589778310104216E-74));
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Get the largest whole number smaller than x.
 * @param x number from which floor is requested
 * @return a double number f such that f is an integer f <= x < f + 1.0
 */"
"public static double floor(double x) {
    long y;
    if (x != x) {
        // NaN
        return x;
    }
    if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
        return x;
    }
    y = (long) x;
    if (x < 0 && y != x) {
        y--;
    }
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test07373() throws Throwable {
    double double0 = FastMath.floor(740.9073F);
    assertEquals(740.0, double0, 0.01);
}","/**
 * Get the largest whole number smaller than x.
 * @param x number from which floor is requested
 * @return a double number f such that f is an integer f <= x < f + 1.0
 */"
"public static double floor(double x) {
    long y;
    if (x != x) {
        // NaN
        return x;
    }
    if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
        return x;
    }
    y = (long) x;
    if (x < 0 && y != x) {
        y--;
    }
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test07474() throws Throwable {
    double double0 = FastMath.floor(1.5645672698520312E274);
    assertEquals(1.5645672698520312E274, double0, 0.01);
}","/**
 * Get the largest whole number smaller than x.
 * @param x number from which floor is requested
 * @return a double number f such that f is an integer f <= x < f + 1.0
 */"
"public static float nextAfter(final float f, final double direction) {
    // handling of some important special cases
    if (Double.isNaN(f) || Double.isNaN(direction)) {
        return Float.NaN;
    } else if (f == direction) {
        return (float) direction;
    } else if (Float.isInfinite(f)) {
        return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
    } else if (f == 0f) {
        return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    if ((direction < f) ^ (sign == 0)) {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
    } else {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
    }
}","public void test07575() throws Throwable {
    float float0 = FastMath.nextAfter(1.0F, 79.5621440568152);
    assertEquals(1.0000001F, float0, 0.01F);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code f},
 * the smallest machine representable number strictly greater than
 * {@code f} is returned; if less, then the largest representable number
 * strictly less than {@code f} is returned.</p>
 * <p>
 * If {@code f} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param f base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code f})
 * @return the next machine representable number in the specified direction
 */"
"public static float nextAfter(final float f, final double direction) {
    // handling of some important special cases
    if (Double.isNaN(f) || Double.isNaN(direction)) {
        return Float.NaN;
    } else if (f == direction) {
        return (float) direction;
    } else if (Float.isInfinite(f)) {
        return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
    } else if (f == 0f) {
        return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    if ((direction < f) ^ (sign == 0)) {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
    } else {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
    }
}","public void test07676() throws Throwable {
    float float0 = FastMath.nextAfter((float) 0, 3425.0);
    assertEquals(1.4E-45F, float0, 0.01F);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code f},
 * the smallest machine representable number strictly greater than
 * {@code f} is returned; if less, then the largest representable number
 * strictly less than {@code f} is returned.</p>
 * <p>
 * If {@code f} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param f base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code f})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test07777() throws Throwable {
    double double0 = FastMath.nextAfter((double) (-0.99999994F), 570.4046388);
    assertEquals((-0.9999999403953551), double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test07878() throws Throwable {
    double double0 = FastMath.nextAfter((double) 0.0F, 1084.917224401101);
    assertEquals(4.9E-324, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test07979() throws Throwable {
    double double0 = FastMath.scalb(0.0, (-2829));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double abs(double x) {
    // -0.0 => +0.0
    return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x;
}","public void test08080() throws Throwable {
    double double0 = FastMath.abs((-1524.0));
    assertEquals(1524.0, double0, 0.01);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static double abs(double x) {
    // -0.0 => +0.0
    return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x;
}","public void test08181() throws Throwable {
    double double0 = FastMath.abs(1.5574076175689697);
    assertEquals(1.5574076175689697, double0, 0.01);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static float abs(final float x) {
    // -0.0 => +0.0
    return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;
}","public void test08282() throws Throwable {
    float float0 = FastMath.abs(302.0F);
    assertEquals(302.0F, float0, 0.01F);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static double exp(double x) {
    return exp(x, 0.0, null);
}","public void test08383() throws Throwable {
    double double0 = FastMath.exp(0.0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Exponential function.
 *
 * Computes exp(x), function result is nearly rounded.   It will be correctly
 * rounded to the theoretical value for 99.9% of input values, otherwise it will
 * have a 1 UPL error.
 *
 * Method:
 *    Lookup intVal = exp(int(x))
 *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );
 *    Compute z as the exponential of the remaining bits by a polynomial minus one
 *    exp(x) = intVal * fracVal * (1 + z)
 *
 * Accuracy:
 *    Calculation is done with 63 bits of precision, so result should be correctly
 *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.
 *
 * @param x   a double
 * @return double e<sup>x</sup>
 */"
"public static float copySign(float magnitude, float sign) {
    int m = Float.floatToIntBits(magnitude);
    int s = Float.floatToIntBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test08484() throws Throwable {
    float float0 = FastMath.copySign((-1649.2449F), (-1649.2449F));
    assertEquals((-1649.2449F), float0, 0.01F);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static float copySign(float magnitude, float sign) {
    int m = Float.floatToIntBits(magnitude);
    int s = Float.floatToIntBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test08585() throws Throwable {
    float float0 = FastMath.copySign(1.4E-45F, (-1382.2856F));
    assertEquals((-1.4E-45F), float0, 0.01F);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static float copySign(float magnitude, float sign) {
    int m = Float.floatToIntBits(magnitude);
    int s = Float.floatToIntBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test08686() throws Throwable {
    float float0 = FastMath.copySign((float) 838, 0.0F);
    assertEquals(838.0F, float0, 0.01F);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static float copySign(float magnitude, float sign) {
    int m = Float.floatToIntBits(magnitude);
    int s = Float.floatToIntBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test08787() throws Throwable {
    float float0 = FastMath.copySign((float) (-9223372036854775808L), 0.0F);
    assertEquals(9.223372E18F, float0, 0.01F);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double copySign(double magnitude, double sign) {
    long m = Double.doubleToLongBits(magnitude);
    long s = Double.doubleToLongBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test08888() throws Throwable {
    double double0 = FastMath.copySign((-1.2522542401353875E-9), (-1107.142));
    assertEquals((-1.2522542401353875E-9), double0, 0.01);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double copySign(double magnitude, double sign) {
    long m = Double.doubleToLongBits(magnitude);
    long s = Double.doubleToLongBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test08989() throws Throwable {
    double double0 = FastMath.copySign(0.0, 0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double copySign(double magnitude, double sign) {
    long m = Double.doubleToLongBits(magnitude);
    long s = Double.doubleToLongBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test09090() throws Throwable {
    double double0 = FastMath.copySign(Double.NaN, (-807.0767907506947));
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double copySign(double magnitude, double sign) {
    long m = Double.doubleToLongBits(magnitude);
    long s = Double.doubleToLongBits(sign);
    if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
        // Sign is currently OK
        return magnitude;
    }
    // flip sign
    return -magnitude;
}","public void test09191() throws Throwable {
    double double0 = FastMath.copySign((-1885.017243997116), 0.0);
    assertEquals(1885.017243997116, double0, 0.01);
}","/**
 * Returns the first argument with the sign of the second argument.
 * A NaN {@code sign} argument is treated as positive.
 *
 * @param magnitude the value to return
 * @param sign the sign for the returned value
 * @return the magnitude with the same sign as the {@code sign} argument
 */"
"public static double hypot(final double x, final double y) {
    if (Double.isInfinite(x) || Double.isInfinite(y)) {
        return Double.POSITIVE_INFINITY;
    } else if (Double.isNaN(x) || Double.isNaN(y)) {
        return Double.NaN;
    } else {
        final int expX = getExponent(x);
        final int expY = getExponent(y);
        if (expX > expY + 27) {
            // y is neglectible with respect to x
            return abs(x);
        } else if (expY > expX + 27) {
            // x is neglectible with respect to y
            return abs(y);
        } else {
            // find an intermediate scale to avoid both overflow and underflow
            final int middleExp = (expX + expY) / 2;
            // scale parameters without losing precision
            final double scaledX = scalb(x, -middleExp);
            final double scaledY = scalb(y, -middleExp);
            // compute scaled hypotenuse
            final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
            // remove scaling
            return scalb(scaledH, middleExp);
        }
    }
}","public void test09292() throws Throwable {
    double double0 = FastMath.hypot(1202.0, 9.313225746154785E-10);
    assertEquals(1202.0, double0, 0.01);
}","/**
 * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
 * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 *
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul>
 *
 * @param x a value
 * @param y a value
 * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
 */"
"public static double hypot(final double x, final double y) {
    if (Double.isInfinite(x) || Double.isInfinite(y)) {
        return Double.POSITIVE_INFINITY;
    } else if (Double.isNaN(x) || Double.isNaN(y)) {
        return Double.NaN;
    } else {
        final int expX = getExponent(x);
        final int expY = getExponent(y);
        if (expX > expY + 27) {
            // y is neglectible with respect to x
            return abs(x);
        } else if (expY > expX + 27) {
            // x is neglectible with respect to y
            return abs(y);
        } else {
            // find an intermediate scale to avoid both overflow and underflow
            final int middleExp = (expX + expY) / 2;
            // scale parameters without losing precision
            final double scaledX = scalb(x, -middleExp);
            final double scaledY = scalb(y, -middleExp);
            // compute scaled hypotenuse
            final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
            // remove scaling
            return scalb(scaledH, middleExp);
        }
    }
}","public void test09393() throws Throwable {
    double double0 = FastMath.hypot(0.0, Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
 * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 *
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul>
 *
 * @param x a value
 * @param y a value
 * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
 */"
"public static double hypot(final double x, final double y) {
    if (Double.isInfinite(x) || Double.isInfinite(y)) {
        return Double.POSITIVE_INFINITY;
    } else if (Double.isNaN(x) || Double.isNaN(y)) {
        return Double.NaN;
    } else {
        final int expX = getExponent(x);
        final int expY = getExponent(y);
        if (expX > expY + 27) {
            // y is neglectible with respect to x
            return abs(x);
        } else if (expY > expX + 27) {
            // x is neglectible with respect to y
            return abs(y);
        } else {
            // find an intermediate scale to avoid both overflow and underflow
            final int middleExp = (expX + expY) / 2;
            // scale parameters without losing precision
            final double scaledX = scalb(x, -middleExp);
            final double scaledY = scalb(y, -middleExp);
            // compute scaled hypotenuse
            final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
            // remove scaling
            return scalb(scaledH, middleExp);
        }
    }
}","public void test09494() throws Throwable {
    double double0 = FastMath.hypot(Double.NaN, 0.1246747374534607);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
 * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 *
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul>
 *
 * @param x a value
 * @param y a value
 * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
 */"
"public static double hypot(final double x, final double y) {
    if (Double.isInfinite(x) || Double.isInfinite(y)) {
        return Double.POSITIVE_INFINITY;
    } else if (Double.isNaN(x) || Double.isNaN(y)) {
        return Double.NaN;
    } else {
        final int expX = getExponent(x);
        final int expY = getExponent(y);
        if (expX > expY + 27) {
            // y is neglectible with respect to x
            return abs(x);
        } else if (expY > expX + 27) {
            // x is neglectible with respect to y
            return abs(y);
        } else {
            // find an intermediate scale to avoid both overflow and underflow
            final int middleExp = (expX + expY) / 2;
            // scale parameters without losing precision
            final double scaledX = scalb(x, -middleExp);
            final double scaledY = scalb(y, -middleExp);
            // compute scaled hypotenuse
            final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
            // remove scaling
            return scalb(scaledH, middleExp);
        }
    }
}","public void test09595() throws Throwable {
    double double0 = FastMath.hypot(0.0, Double.NEGATIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
 * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 *
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul>
 *
 * @param x a value
 * @param y a value
 * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
 */"
"public static double hypot(final double x, final double y) {
    if (Double.isInfinite(x) || Double.isInfinite(y)) {
        return Double.POSITIVE_INFINITY;
    } else if (Double.isNaN(x) || Double.isNaN(y)) {
        return Double.NaN;
    } else {
        final int expX = getExponent(x);
        final int expY = getExponent(y);
        if (expX > expY + 27) {
            // y is neglectible with respect to x
            return abs(x);
        } else if (expY > expX + 27) {
            // x is neglectible with respect to y
            return abs(y);
        } else {
            // find an intermediate scale to avoid both overflow and underflow
            final int middleExp = (expX + expY) / 2;
            // scale parameters without losing precision
            final double scaledX = scalb(x, -middleExp);
            final double scaledY = scalb(y, -middleExp);
            // compute scaled hypotenuse
            final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
            // remove scaling
            return scalb(scaledH, middleExp);
        }
    }
}","public void test09696() throws Throwable {
    double double0 = FastMath.hypot(Double.POSITIVE_INFINITY, (-727.2654689509806));
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
 * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 *
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul>
 *
 * @param x a value
 * @param y a value
 * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
 */"
"public static double max(final double a, final double b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return b;
    }
    return a;
}","public void test09797() throws Throwable {
    double double0 = FastMath.max(0.0, Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static double max(final double a, final double b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return b;
    }
    return a;
}","public void test09898() throws Throwable {
    double double0 = FastMath.max(0.0, 0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static double max(final double a, final double b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return b;
    }
    return a;
}","public void test09999() throws Throwable {
    double double0 = FastMath.max(1.9464664459228516, 0.5239553360940171);
    assertEquals(1.9464664459228516, double0, 0.01);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static double max(final double a, final double b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return b;
    }
    return a;
}","public void test100100() throws Throwable {
    double double0 = FastMath.max(9.755392680573412E-9, 2.7553817452272217E-6);
    assertEquals(2.7553817452272217E-6, double0, 0.01);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static float max(final float a, final float b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return b;
    }
    return a;
}","public void test101101() throws Throwable {
    float float0 = FastMath.max((float) 0, Float.NaN);
    assertEquals(Float.NaN, float0, 0.01F);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static float max(final float a, final float b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return b;
    }
    return a;
}","public void test102102() throws Throwable {
    float float0 = FastMath.max((-3.4028235E38F), (-3.4028235E38F));
    assertEquals((-3.4028235E38F), float0, 0.01F);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static float max(final float a, final float b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return b;
    }
    return a;
}","public void test103103() throws Throwable {
    float float0 = FastMath.max((float) 1466, (float) 361);
    assertEquals(1466.0F, float0, 0.01F);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static float max(final float a, final float b) {
    if (a > b) {
        return a;
    }
    if (a < b) {
        return b;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return b;
    }
    return a;
}","public void test104104() throws Throwable {
    float float0 = FastMath.max((float) (-3020), 1221.148F);
    assertEquals(1221.148F, float0, 0.01F);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static long max(final long a, final long b) {
    return (a <= b) ? b : a;
}","public void test105105() throws Throwable {
    long long0 = FastMath.max(0L, (-1514L));
    assertEquals(0L, long0);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static int max(final int a, final int b) {
    return (a <= b) ? b : a;
}","public void test106106() throws Throwable {
    int int0 = FastMath.max(67, 4296);
    assertEquals(4296, int0);
}","/**
 * Compute the maximum of two values
 * @param a first value
 * @param b second value
 * @return b if a is lesser or equal to b, a otherwise
 */"
"public static double min(final double a, final double b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return a;
    }
    return b;
}","public void test107107() throws Throwable {
    double double0 = FastMath.min(Double.NaN, (-3.609949022969024E295));
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static double min(final double a, final double b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return a;
    }
    return b;
}","public void test108108() throws Throwable {
    double double0 = FastMath.min((-1136.1), (-1136.1));
    assertEquals((-1136.1), double0, 0.01);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static double min(final double a, final double b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Double.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */
    long bits = Double.doubleToRawLongBits(a);
    if (bits == 0x8000000000000000L) {
        return a;
    }
    return b;
}","public void test109109() throws Throwable {
    double double0 = FastMath.min((-1030.128), (-3.390456646038825E-19));
    assertEquals((-1030.128), double0, 0.01);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static float min(final float a, final float b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return a;
    }
    return b;
}","public void test110110() throws Throwable {
    float float0 = FastMath.min(Float.NaN, 1483.65F);
    assertEquals(Float.NaN, float0, 0.01F);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static float min(final float a, final float b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return a;
    }
    return b;
}","public void test111111() throws Throwable {
    float float0 = FastMath.min(0.0F, 0.0F);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static float min(final float a, final float b) {
    if (a > b) {
        return b;
    }
    if (a < b) {
        return a;
    }
    /* if either arg is NaN, return NaN */
    if (a != b) {
        return Float.NaN;
    }
    /* min(+0.0,-0.0) == -0.0 */
    /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */
    int bits = Float.floatToRawIntBits(a);
    if (bits == 0x80000000) {
        return a;
    }
    return b;
}","public void test112112() throws Throwable {
    float float0 = FastMath.min((-1243.1228F), (-3.4028235E38F));
    assertEquals((-3.4028235E38F), float0, 0.01F);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static long min(final long a, final long b) {
    return (a <= b) ? a : b;
}","public void test113113() throws Throwable {
    long long0 = FastMath.min(0L, 0L);
    assertEquals(0L, long0);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static long min(final long a, final long b) {
    return (a <= b) ? a : b;
}","public void test114114() throws Throwable {
    long long0 = FastMath.min(3064L, (-2251L));
    assertEquals((-2251L), long0);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static int min(final int a, final int b) {
    return (a <= b) ? a : b;
}","public void test115115() throws Throwable {
    int int0 = FastMath.min(67, 67);
    assertEquals(67, int0);
}","/**
 * Compute the minimum of two values
 * @param a first value
 * @param b second value
 * @return a if a is lesser or equal to b, b otherwise
 */"
"public static double rint(double x) {
    double y = floor(x);
    double d = x - y;
    if (d > 0.5) {
        if (y == -1.0) {
            // Preserve sign of operand
            return -0.0;
        }
        return y + 1.0;
    }
    if (d < 0.5) {
        return y;
    }
    /* half way, round to even */
    long z = (long) y;
    return (z & 1) == 0 ? y : y + 1.0;
}","public void test116116() throws Throwable {
    double double0 = FastMath.rint(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.
 * @param x number from which nearest whole number is requested
 * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
 */"
"public static double rint(double x) {
    double y = floor(x);
    double d = x - y;
    if (d > 0.5) {
        if (y == -1.0) {
            // Preserve sign of operand
            return -0.0;
        }
        return y + 1.0;
    }
    if (d < 0.5) {
        return y;
    }
    /* half way, round to even */
    long z = (long) y;
    return (z & 1) == 0 ? y : y + 1.0;
}","public void test117117() throws Throwable {
    double double0 = FastMath.rint(2L);
    assertEquals(2.0, double0, 0.01);
}","/**
 * Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.
 * @param x number from which nearest whole number is requested
 * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
 */"
"public static double rint(double x) {
    double y = floor(x);
    double d = x - y;
    if (d > 0.5) {
        if (y == -1.0) {
            // Preserve sign of operand
            return -0.0;
        }
        return y + 1.0;
    }
    if (d < 0.5) {
        return y;
    }
    /* half way, round to even */
    long z = (long) y;
    return (z & 1) == 0 ? y : y + 1.0;
}","public void test118118() throws Throwable {
    double double0 = FastMath.rint((-4.926470933588261E-8));
    assertEquals(-0.0, double0, 0.01);
}","/**
 * Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.
 * @param x number from which nearest whole number is requested
 * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
 */"
"public static double rint(double x) {
    double y = floor(x);
    double d = x - y;
    if (d > 0.5) {
        if (y == -1.0) {
            // Preserve sign of operand
            return -0.0;
        }
        return y + 1.0;
    }
    if (d < 0.5) {
        return y;
    }
    /* half way, round to even */
    long z = (long) y;
    return (z & 1) == 0 ? y : y + 1.0;
}","public void test119119() throws Throwable {
    double double0 = FastMath.rint((-709.04313048574));
    assertEquals((-709.0), double0, 0.01);
}","/**
 * Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.
 * @param x number from which nearest whole number is requested
 * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
 */"
"public static double ceil(double x) {
    double y;
    if (x != x) {
        // NaN
        return x;
    }
    y = floor(x);
    if (y == x) {
        return y;
    }
    y += 1.0;
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test120120() throws Throwable {
    double double0 = FastMath.ceil((-7.877917738262007E-9));
    assertEquals(-0.0, double0, 0.01);
}","/**
 * Get the smallest whole number larger than x.
 * @param x number from which ceil is requested
 * @return a double number c such that c is an integer c - 1.0 < x <= c
 */"
"public static double ceil(double x) {
    double y;
    if (x != x) {
        // NaN
        return x;
    }
    y = floor(x);
    if (y == x) {
        return y;
    }
    y += 1.0;
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test121121() throws Throwable {
    double double0 = FastMath.ceil(0.0F);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the smallest whole number larger than x.
 * @param x number from which ceil is requested
 * @return a double number c such that c is an integer c - 1.0 < x <= c
 */"
"public static double ceil(double x) {
    double y;
    if (x != x) {
        // NaN
        return x;
    }
    y = floor(x);
    if (y == x) {
        return y;
    }
    y += 1.0;
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test122122() throws Throwable {
    double double0 = FastMath.ceil(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Get the smallest whole number larger than x.
 * @param x number from which ceil is requested
 * @return a double number c such that c is an integer c - 1.0 < x <= c
 */"
"public static double ceil(double x) {
    double y;
    if (x != x) {
        // NaN
        return x;
    }
    y = floor(x);
    if (y == x) {
        return y;
    }
    y += 1.0;
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test123123() throws Throwable {
    double double0 = FastMath.ceil(1.2206286252567737E-4);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Get the smallest whole number larger than x.
 * @param x number from which ceil is requested
 * @return a double number c such that c is an integer c - 1.0 < x <= c
 */"
"public static double floor(double x) {
    long y;
    if (x != x) {
        // NaN
        return x;
    }
    if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
        return x;
    }
    y = (long) x;
    if (x < 0 && y != x) {
        y--;
    }
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test124124() throws Throwable {
    double double0 = FastMath.floor((-1.0));
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Get the largest whole number smaller than x.
 * @param x number from which floor is requested
 * @return a double number f such that f is an integer f <= x < f + 1.0
 */"
"public static double floor(double x) {
    long y;
    if (x != x) {
        // NaN
        return x;
    }
    if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
        return x;
    }
    y = (long) x;
    if (x < 0 && y != x) {
        y--;
    }
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test125125() throws Throwable {
    double double0 = FastMath.floor((-1.4561530066010593E152));
    assertEquals((-1.4561530066010593E152), double0, 0.01);
}","/**
 * Get the largest whole number smaller than x.
 * @param x number from which floor is requested
 * @return a double number f such that f is an integer f <= x < f + 1.0
 */"
"public static double rint(double x) {
    double y = floor(x);
    double d = x - y;
    if (d > 0.5) {
        if (y == -1.0) {
            // Preserve sign of operand
            return -0.0;
        }
        return y + 1.0;
    }
    if (d < 0.5) {
        return y;
    }
    /* half way, round to even */
    long z = (long) y;
    return (z & 1) == 0 ? y : y + 1.0;
}","public void test126126() throws Throwable {
    double double0 = FastMath.rint(Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.
 * @param x number from which nearest whole number is requested
 * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
 */"
"public static double floor(double x) {
    long y;
    if (x != x) {
        // NaN
        return x;
    }
    if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
        return x;
    }
    y = (long) x;
    if (x < 0 && y != x) {
        y--;
    }
    if (y == 0) {
        return x * y;
    }
    return y;
}","public void test127127() throws Throwable {
    double double0 = FastMath.floor(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Get the largest whole number smaller than x.
 * @param x number from which floor is requested
 * @return a double number f such that f is an integer f <= x < f + 1.0
 */"
"public static float nextUp(final float a) {
    return nextAfter(a, Float.POSITIVE_INFINITY);
}","public void test128128() throws Throwable {
    float float0 = FastMath.nextUp(793.25757F);
    assertEquals(793.2576F, float0, 0.01F);
}","/**
 * Compute next number towards positive infinity.
 * @param a number to which neighbor should be computed
 * @return neighbor of a towards positive infinity
 */"
"public static float nextAfter(final float f, final double direction) {
    // handling of some important special cases
    if (Double.isNaN(f) || Double.isNaN(direction)) {
        return Float.NaN;
    } else if (f == direction) {
        return (float) direction;
    } else if (Float.isInfinite(f)) {
        return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
    } else if (f == 0f) {
        return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    if ((direction < f) ^ (sign == 0)) {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
    } else {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
    }
}","public void test129129() throws Throwable {
    float float0 = FastMath.nextAfter((-2820.6963F), 667.7311);
    assertEquals((-2820.696F), float0, 0.01F);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code f},
 * the smallest machine representable number strictly greater than
 * {@code f} is returned; if less, then the largest representable number
 * strictly less than {@code f} is returned.</p>
 * <p>
 * If {@code f} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param f base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code f})
 * @return the next machine representable number in the specified direction
 */"
"public static float nextAfter(final float f, final double direction) {
    // handling of some important special cases
    if (Double.isNaN(f) || Double.isNaN(direction)) {
        return Float.NaN;
    } else if (f == direction) {
        return (float) direction;
    } else if (Float.isInfinite(f)) {
        return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
    } else if (f == 0f) {
        return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    if ((direction < f) ^ (sign == 0)) {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
    } else {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
    }
}","public void test130130() throws Throwable {
    float float0 = FastMath.nextAfter(0.0F, Double.NEGATIVE_INFINITY);
    assertEquals((-1.4E-45F), float0, 0.01F);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code f},
 * the smallest machine representable number strictly greater than
 * {@code f} is returned; if less, then the largest representable number
 * strictly less than {@code f} is returned.</p>
 * <p>
 * If {@code f} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param f base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code f})
 * @return the next machine representable number in the specified direction
 */"
"public static float nextAfter(final float f, final double direction) {
    // handling of some important special cases
    if (Double.isNaN(f) || Double.isNaN(direction)) {
        return Float.NaN;
    } else if (f == direction) {
        return (float) direction;
    } else if (Float.isInfinite(f)) {
        return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
    } else if (f == 0f) {
        return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    if ((direction < f) ^ (sign == 0)) {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
    } else {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
    }
}","public void test131131() throws Throwable {
    float float0 = FastMath.nextAfter(345.0F, 204.32979200218);
    assertEquals(344.99997F, float0, 0.01F);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code f},
 * the smallest machine representable number strictly greater than
 * {@code f} is returned; if less, then the largest representable number
 * strictly less than {@code f} is returned.</p>
 * <p>
 * If {@code f} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param f base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code f})
 * @return the next machine representable number in the specified direction
 */"
"public static float nextAfter(final float f, final double direction) {
    // handling of some important special cases
    if (Double.isNaN(f) || Double.isNaN(direction)) {
        return Float.NaN;
    } else if (f == direction) {
        return (float) direction;
    } else if (Float.isInfinite(f)) {
        return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
    } else if (f == 0f) {
        return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    if ((direction < f) ^ (sign == 0)) {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
    } else {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
    }
}","public void test132132() throws Throwable {
    float float0 = FastMath.nextAfter(Float.POSITIVE_INFINITY, (-870.0));
    assertEquals(3.4028235E38F, float0, 0.01F);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code f},
 * the smallest machine representable number strictly greater than
 * {@code f} is returned; if less, then the largest representable number
 * strictly less than {@code f} is returned.</p>
 * <p>
 * If {@code f} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param f base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code f})
 * @return the next machine representable number in the specified direction
 */"
"public static float nextAfter(final float f, final double direction) {
    // handling of some important special cases
    if (Double.isNaN(f) || Double.isNaN(direction)) {
        return Float.NaN;
    } else if (f == direction) {
        return (float) direction;
    } else if (Float.isInfinite(f)) {
        return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
    } else if (f == 0f) {
        return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    if ((direction < f) ^ (sign == 0)) {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
    } else {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
    }
}","public void test133133() throws Throwable {
    float float0 = FastMath.nextAfter(0.0F, (double) 0);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code f},
 * the smallest machine representable number strictly greater than
 * {@code f} is returned; if less, then the largest representable number
 * strictly less than {@code f} is returned.</p>
 * <p>
 * If {@code f} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param f base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code f})
 * @return the next machine representable number in the specified direction
 */"
"public static float nextAfter(final float f, final double direction) {
    // handling of some important special cases
    if (Double.isNaN(f) || Double.isNaN(direction)) {
        return Float.NaN;
    } else if (f == direction) {
        return (float) direction;
    } else if (Float.isInfinite(f)) {
        return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
    } else if (f == 0f) {
        return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    if ((direction < f) ^ (sign == 0)) {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
    } else {
        return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
    }
}","public void test134134() throws Throwable {
    float float0 = FastMath.nextAfter((-224.69F), Double.NaN);
    assertEquals(Float.NaN, float0, 0.01F);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code f},
 * the smallest machine representable number strictly greater than
 * {@code f} is returned; if less, then the largest representable number
 * strictly less than {@code f} is returned.</p>
 * <p>
 * If {@code f} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param f base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code f})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test135135() throws Throwable {
    double double0 = FastMath.nextAfter(705.48, 1281.0);
    assertEquals(705.4800000000001, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test136136() throws Throwable {
    double double0 = FastMath.nextAfter(7.156176637480615, (-1.0));
    assertEquals(7.156176637480614, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test137137() throws Throwable {
    double double0 = FastMath.nextAfter(0.0, (-674.9495796028052));
    assertEquals((-4.9E-324), double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextUp(final double a) {
    return nextAfter(a, Double.POSITIVE_INFINITY);
}","public void test138138() throws Throwable {
    double double0 = FastMath.nextUp((double) (-4015.5F));
    assertEquals((-4015.4999999999995), double0, 0.01);
}","/**
 * Compute next number towards positive infinity.
 * @param a number to which neighbor should be computed
 * @return neighbor of a towards positive infinity
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test139139() throws Throwable {
    double double0 = FastMath.nextAfter(Double.POSITIVE_INFINITY, (-2.6157563728873715E-8));
    assertEquals(1.7976931348623157E308, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test140140() throws Throwable {
    double double0 = FastMath.nextAfter(Double.NEGATIVE_INFINITY, 1.0);
    assertEquals((-1.7976931348623157E308), double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test141141() throws Throwable {
    double double0 = FastMath.nextAfter((-1452.4435), Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isNaN(direction)) {
        return Double.NaN;
    } else if (d == direction) {
        return direction;
    } else if (Double.isInfinite(d)) {
        return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    if ((direction < d) ^ (sign == 0L)) {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
    } else {
        return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
    }
}","public void test142142() throws Throwable {
    double double0 = FastMath.nextAfter(Double.NaN, (-311.087));
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * The ordering is as follows (increasing):
 * <ul>
 * <li>-INFINITY</li>
 * <li>-MAX_VALUE</li>
 * <li>-MIN_VALUE</li>
 * <li>-0.0</li>
 * <li>+0.0</li>
 * <li>+MIN_VALUE</li>
 * <li>+MAX_VALUE</li>
 * <li>+INFINITY</li>
 * <li></li>
 * <p>
 * If arguments compare equal, then the second argument is returned.
 * <p>
 * If {@code direction} is greater than {@code d},
 * the smallest machine representable number strictly greater than
 * {@code d} is returned; if less, then the largest representable number
 * strictly less than {@code d} is returned.</p>
 * <p>
 * If {@code d} is infinite and direction does not
 * bring it back to finite numbers, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * {@code direction} is greater or smaller than {@code d})
 * @return the next machine representable number in the specified direction
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test143143() throws Throwable {
    float float0 = FastMath.scalb((-202.9254F), 154);
    assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test144144() throws Throwable {
    float float0 = FastMath.scalb((-857.3F), (-202));
    assertEquals(-0.0F, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test145145() throws Throwable {
    float float0 = FastMath.scalb(731.53F, (-156));
    assertEquals(8.4E-45F, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test146146() throws Throwable {
    float float0 = FastMath.scalb(1513.7031F, 141);
    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test147147() throws Throwable {
    float float0 = FastMath.scalb((float) 8, 551);
    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test148148() throws Throwable {
    float float0 = FastMath.scalb(135.7F, (-5176));
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test149149() throws Throwable {
    float float0 = FastMath.scalb((-975.8F), (-2145698541));
    assertEquals(-0.0F, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test150150() throws Throwable {
    float float0 = FastMath.scalb((float) 0L, 716);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test151151() throws Throwable {
    float float0 = FastMath.scalb(Float.POSITIVE_INFINITY, 631);
    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test152152() throws Throwable {
    float float0 = FastMath.scalb(0.0F, (-97));
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test153153() throws Throwable {
    float float0 = FastMath.scalb((float) (-982), 982);
    assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static float scalb(final float f, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -127) && (n < 128)) {
        return f * Float.intBitsToFloat((n + 127) << 23);
    }
    // handle special cases
    if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
        return f;
    }
    if (n < -277) {
        return (f > 0) ? 0.0f : -0.0f;
    }
    if (n > 276) {
        return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
    }
    // decompose f
    final int bits = Float.floatToIntBits(f);
    final int sign = bits & 0x80000000;
    int exponent = (bits >>> 23) & 0xff;
    int mantissa = bits & 0x007fffff;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -127
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else if (scaledExponent > -24) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1 << 23);
            // scales down complete mantissa, hence losing least significant bits
            final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Float.intBitsToFloat(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0) ? 0.0f : -0.0f;
        }
    } else {
        // we are really in the case n >= 128
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 23) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x007fffff;
            if (scaledExponent < 255) {
                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
            } else {
                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 255) {
            return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
        } else {
            return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
        }
    }
}","public void test154154() throws Throwable {
    float float0 = FastMath.scalb(2201.0F, (-177));
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Multiply a float number by a power of 2.
 * @param f number to multiply
 * @param n power of 2
 * @return f &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test155155() throws Throwable {
    double double0 = FastMath.scalb((double) 1.4E-45F, 1500);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test156156() throws Throwable {
    double double0 = FastMath.scalb(477.782103668, (-1720));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test157157() throws Throwable {
    double double0 = FastMath.scalb((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test158158() throws Throwable {
    double double0 = FastMath.scalb((-0.0018644072194913017), Integer.MAX_VALUE);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test159159() throws Throwable {
    double double0 = FastMath.scalb((-1136.1), (-2145392195));
    assertEquals(-0.0, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test160160() throws Throwable {
    double double0 = FastMath.scalb(0.9641857332345813, (-3020));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double hypot(final double x, final double y) {
    if (Double.isInfinite(x) || Double.isInfinite(y)) {
        return Double.POSITIVE_INFINITY;
    } else if (Double.isNaN(x) || Double.isNaN(y)) {
        return Double.NaN;
    } else {
        final int expX = getExponent(x);
        final int expY = getExponent(y);
        if (expX > expY + 27) {
            // y is neglectible with respect to x
            return abs(x);
        } else if (expY > expX + 27) {
            // x is neglectible with respect to y
            return abs(y);
        } else {
            // find an intermediate scale to avoid both overflow and underflow
            final int middleExp = (expX + expY) / 2;
            // scale parameters without losing precision
            final double scaledX = scalb(x, -middleExp);
            final double scaledY = scalb(y, -middleExp);
            // compute scaled hypotenuse
            final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
            // remove scaling
            return scalb(scaledH, middleExp);
        }
    }
}","public void test161161() throws Throwable {
    double double0 = FastMath.hypot(0.0, 0L);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
 * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 *
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul>
 *
 * @param x a value
 * @param y a value
 * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test162162() throws Throwable {
    double double0 = FastMath.scalb(Double.POSITIVE_INFINITY, 1018576403);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test163163() throws Throwable {
    double double0 = FastMath.scalb((-1042.4957893689516), 1466);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test164164() throws Throwable {
    double double0 = FastMath.scalb((-1394.856718940496), (-765));
    assertEquals((-7.187583711174296E-228), double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static double scalb(final double d, final int n) {
    // first simple and fast handling when 2^n can be represented using normal numbers
    if ((n > -1023) && (n < 1024)) {
        return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
    }
    // handle special cases
    if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
        return d;
    }
    if (n < -2098) {
        return (d > 0) ? 0.0 : -0.0;
    }
    if (n > 2097) {
        return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    // decompose d
    final long bits = Double.doubleToLongBits(d);
    final long sign = bits & 0x8000000000000000L;
    int exponent = ((int) (bits >>> 52)) & 0x7ff;
    long mantissa = bits & 0x000fffffffffffffL;
    // compute scaled exponent
    int scaledExponent = exponent + n;
    if (n < 0) {
        // we are really in the case n <= -1023
        if (scaledExponent > 0) {
            // both the input and the result are normal numbers, we only adjust the exponent
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else if (scaledExponent > -53) {
            // the input is a normal number and the result is a subnormal number
            // recover the hidden mantissa bit
            mantissa = mantissa | (1L << 52);
            // scales down complete mantissa, hence losing least significant bits
            final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
            mantissa = mantissa >>> (1 - scaledExponent);
            if (mostSignificantLostBit != 0) {
                // we need to add 1 bit to round up the result
                mantissa++;
            }
            return Double.longBitsToDouble(sign | mantissa);
        } else {
            // no need to compute the mantissa, the number scales down to 0
            return (sign == 0L) ? 0.0 : -0.0;
        }
    } else {
        // we are really in the case n >= 1024
        if (exponent == 0) {
            // the input number is subnormal, normalize it
            while ((mantissa >>> 52) != 1) {
                mantissa = mantissa << 1;
                --scaledExponent;
            }
            ++scaledExponent;
            mantissa = mantissa & 0x000fffffffffffffL;
            if (scaledExponent < 2047) {
                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
            } else {
                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            }
        } else if (scaledExponent < 2047) {
            return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
        } else {
            return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        }
    }
}","public void test165165() throws Throwable {
    double double0 = FastMath.scalb(Double.NaN, (-1284));
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Multiply a double number by a power of 2.
 * @param d number to multiply
 * @param n power of 2
 * @return d &times; 2<sup>n</sup>
 */"
"public static float ulp(float x) {
    if (Float.isInfinite(x)) {
        return Float.POSITIVE_INFINITY;
    }
    return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
}","public void test166166() throws Throwable {
    float float0 = FastMath.ulp(Float.NEGATIVE_INFINITY);
    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
}","/**
 * Compute least significant bit (Unit in Last Position) for a number.
 * @param x number from which ulp is requested
 * @return ulp(x)
 */"
"public static double ulp(double x) {
    if (Double.isInfinite(x)) {
        return Double.POSITIVE_INFINITY;
    }
    return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
}","public void test167167() throws Throwable {
    double double0 = FastMath.ulp(Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Compute least significant bit (Unit in Last Position) for a number.
 * @param x number from which ulp is requested
 * @return ulp(x)
 */"
"public static double abs(double x) {
    // -0.0 => +0.0
    return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x;
}","public void test168168() throws Throwable {
    double double0 = FastMath.abs(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static double ulp(double x) {
    if (Double.isInfinite(x)) {
        return Double.POSITIVE_INFINITY;
    }
    return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
}","public void test169169() throws Throwable {
    double double0 = FastMath.ulp((-161.784094525014));
    assertEquals(2.8421709430404007E-14, double0, 0.01);
}","/**
 * Compute least significant bit (Unit in Last Position) for a number.
 * @param x number from which ulp is requested
 * @return ulp(x)
 */"
"public static double hypot(final double x, final double y) {
    if (Double.isInfinite(x) || Double.isInfinite(y)) {
        return Double.POSITIVE_INFINITY;
    } else if (Double.isNaN(x) || Double.isNaN(y)) {
        return Double.NaN;
    } else {
        final int expX = getExponent(x);
        final int expY = getExponent(y);
        if (expX > expY + 27) {
            // y is neglectible with respect to x
            return abs(x);
        } else if (expY > expX + 27) {
            // x is neglectible with respect to y
            return abs(y);
        } else {
            // find an intermediate scale to avoid both overflow and underflow
            final int middleExp = (expX + expY) / 2;
            // scale parameters without losing precision
            final double scaledX = scalb(x, -middleExp);
            final double scaledY = scalb(y, -middleExp);
            // compute scaled hypotenuse
            final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
            // remove scaling
            return scalb(scaledH, middleExp);
        }
    }
}","public void test170170() throws Throwable {
    double double0 = FastMath.hypot(0.0, 2.7553817452272217E-6);
    assertEquals(2.7553817452272217E-6, double0, 0.01);
}","/**
 * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
 * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 *
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul>
 *
 * @param x a value
 * @param y a value
 * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
 */"
"public static float abs(final float x) {
    // -0.0 => +0.0
    return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;
}","public void test171171() throws Throwable {
    float float0 = FastMath.abs(0.0F);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static float abs(final float x) {
    // -0.0 => +0.0
    return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;
}","public void test172172() throws Throwable {
    float float0 = FastMath.abs((float) (-5034868814120038111L));
    assertEquals(5.0348688E18F, float0, 0.01F);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static long abs(final long x) {
    return (x < 0l) ? -x : x;
}","public void test173173() throws Throwable {
    long long0 = FastMath.abs((-5034868814120038111L));
    assertEquals(5034868814120038111L, long0);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static long abs(final long x) {
    return (x < 0l) ? -x : x;
}","public void test174174() throws Throwable {
    long long0 = FastMath.abs(4652218415073722368L);
    assertEquals(4652218415073722368L, long0);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static int abs(final int x) {
    return (x < 0) ? -x : x;
}","public void test175175() throws Throwable {
    int int0 = FastMath.abs(0);
    assertEquals(0, int0);
}","/**
 * Absolute value.
 * @param x number from which absolute value is requested
 * @return abs(x)
 */"
"public static double toDegrees(double x) {
    if (Double.isInfinite(x) || x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    // These are 180/PI split into high and low order bits
    final double facta = 57.2957763671875;
    final double factb = 3.145894820876798E-6;
    double xa = doubleHighPart(x);
    double xb = x - xa;
    return xb * factb + xb * facta + xa * factb + xa * facta;
}","public void test176176() throws Throwable {
    double double0 = FastMath.toDegrees(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 *  Convert radians to degrees, with error of less than 0.5 ULP
 *  @param x angle in radians
 *  @return x converted into degrees
 */"
"public static double toDegrees(double x) {
    if (Double.isInfinite(x) || x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    // These are 180/PI split into high and low order bits
    final double facta = 57.2957763671875;
    final double factb = 3.145894820876798E-6;
    double xa = doubleHighPart(x);
    double xb = x - xa;
    return xb * factb + xb * facta + xa * factb + xa * facta;
}","public void test177177() throws Throwable {
    double double0 = FastMath.toDegrees(Float.NEGATIVE_INFINITY);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 *  Convert radians to degrees, with error of less than 0.5 ULP
 *  @param x angle in radians
 *  @return x converted into degrees
 */"
"public static double toRadians(double x) {
    if (Double.isInfinite(x) || x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    // These are PI/180 split into high and low order bits
    final double facta = 0.01745329052209854;
    final double factb = 1.997844754509471E-9;
    double xa = doubleHighPart(x);
    double xb = x - xa;
    double result = xb * factb + xb * facta + xa * factb + xa * facta;
    if (result == 0) {
        // ensure correct sign if calculation underflows
        result = result * x;
    }
    return result;
}","public void test178178() throws Throwable {
    double double0 = FastMath.toRadians(0.0F);
    assertEquals(0.0, double0, 0.01);
}","/**
 *  Convert degrees to radians, with error of less than 0.5 ULP
 *  @param x angle in degrees
 *  @return x converted into radians
 */"
"public static double toRadians(double x) {
    if (Double.isInfinite(x) || x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    // These are PI/180 split into high and low order bits
    final double facta = 0.01745329052209854;
    final double factb = 1.997844754509471E-9;
    double xa = doubleHighPart(x);
    double xb = x - xa;
    double result = xb * factb + xb * facta + xa * factb + xa * facta;
    if (result == 0) {
        // ensure correct sign if calculation underflows
        result = result * x;
    }
    return result;
}","public void test179179() throws Throwable {
    double double0 = FastMath.toRadians(Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 *  Convert degrees to radians, with error of less than 0.5 ULP
 *  @param x angle in degrees
 *  @return x converted into radians
 */"
"public static double cbrt(double x) {
    /* Convert input double to bits */
    long inbits = Double.doubleToLongBits(x);
    int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
    boolean subnormal = false;
    if (exponent == -1023) {
        if (x == 0) {
            return x;
        }
        /* Subnormal, so normalize */
        subnormal = true;
        // 2^54
        x *= 1.8014398509481984E16;
        inbits = Double.doubleToLongBits(x);
        exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
    }
    if (exponent == 1024) {
        // Nan or infinity.  Don't care which.
        return x;
    }
    /* Divide the exponent by 3 */
    int exp3 = exponent / 3;
    /* p2 will be the nearest power of 2 to x with its exponent divided by 3 */
    double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | (long) (((exp3 + 1023) & 0x7ff)) << 52);
    /* This will be a number between 1 and 2 */
    final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
    /* Estimate the cube root of mant by polynomial */
    double est = -0.010714690733195933;
    est = est * mant + 0.0875862700108075;
    est = est * mant + -0.3058015757857271;
    est = est * mant + 0.7249995199969751;
    est = est * mant + 0.5039018405998233;
    est *= CBRTTWO[exponent % 3 + 2];
    // est should now be good to about 15 bits of precision.   Do 2 rounds of
    // Newton's method to get closer,  this should get us full double precision
    // Scale down x for the purpose of doing newtons method.  This avoids over/under flows.
    final double xs = x / (p2 * p2 * p2);
    est += (xs - est * est * est) / (3 * est * est);
    est += (xs - est * est * est) / (3 * est * est);
    // Do one round of Newton's method in extended precision to get the last bit right.
    double temp = est * HEX_40000000;
    double ya = est + temp - temp;
    double yb = est - ya;
    double za = ya * ya;
    double zb = ya * yb * 2.0 + yb * yb;
    temp = za * HEX_40000000;
    double temp2 = za + temp - temp;
    zb += za - temp2;
    za = temp2;
    zb = za * yb + ya * zb + zb * yb;
    za = za * ya;
    double na = xs - za;
    double nb = -(na - xs + za);
    nb -= zb;
    est += (na + nb) / (3 * est * est);
    /* Scale by a power of two, so this is exact. */
    est *= p2;
    if (subnormal) {
        // 2^-18
        est *= 3.814697265625E-6;
    }
    return est;
}","public void test180180() throws Throwable {
    double double0 = FastMath.cbrt(0.14384103622589045);
    assertEquals(0.5239553360940171, double0, 0.01);
}","/**
 * Compute the cubic root of a number.
 * @param x number on which evaluation is done
 * @return cubic root of x
 */"
"public static double cbrt(double x) {
    /* Convert input double to bits */
    long inbits = Double.doubleToLongBits(x);
    int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
    boolean subnormal = false;
    if (exponent == -1023) {
        if (x == 0) {
            return x;
        }
        /* Subnormal, so normalize */
        subnormal = true;
        // 2^54
        x *= 1.8014398509481984E16;
        inbits = Double.doubleToLongBits(x);
        exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
    }
    if (exponent == 1024) {
        // Nan or infinity.  Don't care which.
        return x;
    }
    /* Divide the exponent by 3 */
    int exp3 = exponent / 3;
    /* p2 will be the nearest power of 2 to x with its exponent divided by 3 */
    double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | (long) (((exp3 + 1023) & 0x7ff)) << 52);
    /* This will be a number between 1 and 2 */
    final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
    /* Estimate the cube root of mant by polynomial */
    double est = -0.010714690733195933;
    est = est * mant + 0.0875862700108075;
    est = est * mant + -0.3058015757857271;
    est = est * mant + 0.7249995199969751;
    est = est * mant + 0.5039018405998233;
    est *= CBRTTWO[exponent % 3 + 2];
    // est should now be good to about 15 bits of precision.   Do 2 rounds of
    // Newton's method to get closer,  this should get us full double precision
    // Scale down x for the purpose of doing newtons method.  This avoids over/under flows.
    final double xs = x / (p2 * p2 * p2);
    est += (xs - est * est * est) / (3 * est * est);
    est += (xs - est * est * est) / (3 * est * est);
    // Do one round of Newton's method in extended precision to get the last bit right.
    double temp = est * HEX_40000000;
    double ya = est + temp - temp;
    double yb = est - ya;
    double za = ya * ya;
    double zb = ya * yb * 2.0 + yb * yb;
    temp = za * HEX_40000000;
    double temp2 = za + temp - temp;
    zb += za - temp2;
    za = temp2;
    zb = za * yb + ya * zb + zb * yb;
    za = za * ya;
    double na = xs - za;
    double nb = -(na - xs + za);
    nb -= zb;
    est += (na + nb) / (3 * est * est);
    /* Scale by a power of two, so this is exact. */
    est *= p2;
    if (subnormal) {
        // 2^-18
        est *= 3.814697265625E-6;
    }
    return est;
}","public void test181181() throws Throwable {
    double double0 = FastMath.cbrt(0.0F);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the cubic root of a number.
 * @param x number on which evaluation is done
 * @return cubic root of x
 */"
"public static double cbrt(double x) {
    /* Convert input double to bits */
    long inbits = Double.doubleToLongBits(x);
    int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
    boolean subnormal = false;
    if (exponent == -1023) {
        if (x == 0) {
            return x;
        }
        /* Subnormal, so normalize */
        subnormal = true;
        // 2^54
        x *= 1.8014398509481984E16;
        inbits = Double.doubleToLongBits(x);
        exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
    }
    if (exponent == 1024) {
        // Nan or infinity.  Don't care which.
        return x;
    }
    /* Divide the exponent by 3 */
    int exp3 = exponent / 3;
    /* p2 will be the nearest power of 2 to x with its exponent divided by 3 */
    double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | (long) (((exp3 + 1023) & 0x7ff)) << 52);
    /* This will be a number between 1 and 2 */
    final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
    /* Estimate the cube root of mant by polynomial */
    double est = -0.010714690733195933;
    est = est * mant + 0.0875862700108075;
    est = est * mant + -0.3058015757857271;
    est = est * mant + 0.7249995199969751;
    est = est * mant + 0.5039018405998233;
    est *= CBRTTWO[exponent % 3 + 2];
    // est should now be good to about 15 bits of precision.   Do 2 rounds of
    // Newton's method to get closer,  this should get us full double precision
    // Scale down x for the purpose of doing newtons method.  This avoids over/under flows.
    final double xs = x / (p2 * p2 * p2);
    est += (xs - est * est * est) / (3 * est * est);
    est += (xs - est * est * est) / (3 * est * est);
    // Do one round of Newton's method in extended precision to get the last bit right.
    double temp = est * HEX_40000000;
    double ya = est + temp - temp;
    double yb = est - ya;
    double za = ya * ya;
    double zb = ya * yb * 2.0 + yb * yb;
    temp = za * HEX_40000000;
    double temp2 = za + temp - temp;
    zb += za - temp2;
    za = temp2;
    zb = za * yb + ya * zb + zb * yb;
    za = za * ya;
    double na = xs - za;
    double nb = -(na - xs + za);
    nb -= zb;
    est += (na + nb) / (3 * est * est);
    /* Scale by a power of two, so this is exact. */
    est *= p2;
    if (subnormal) {
        // 2^-18
        est *= 3.814697265625E-6;
    }
    return est;
}","public void test182182() throws Throwable {
    double double0 = FastMath.cbrt(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the cubic root of a number.
 * @param x number on which evaluation is done
 * @return cubic root of x
 */"
"public static double acos(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == -1.0) {
        return Math.PI;
    }
    if (x == 1.0) {
        return 0.0;
    }
    if (x == 0) {
        return Math.PI / 2.0;
    }
    /* Compute acos(x) = atan(sqrt(1-x*x)/x) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    yb += zb / (2.0 * y);
    y = ya + yb;
    yb = -(y - ya - yb);
    // Compute ratio r = y/x
    double r = y / x;
    // Did r overflow?
    if (Double.isInfinite(r)) {
        // x is effectively zero
        // so return the appropriate value
        return Math.PI / 2;
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Correct for rounding in division
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    // Add in effect additional bits of sqrt.
    rb += yb / x;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, x < 0);
}","public void test183183() throws Throwable {
    double double0 = FastMath.acos((-0.5753052208739643));
    assertEquals(2.1837735844595634, double0, 0.01);
}","/**
 * Compute the arc cosine of a number.
 * @param x number on which evaluation is done
 * @return arc cosine of x
 */"
"public static double acos(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == -1.0) {
        return Math.PI;
    }
    if (x == 1.0) {
        return 0.0;
    }
    if (x == 0) {
        return Math.PI / 2.0;
    }
    /* Compute acos(x) = atan(sqrt(1-x*x)/x) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    yb += zb / (2.0 * y);
    y = ya + yb;
    yb = -(y - ya - yb);
    // Compute ratio r = y/x
    double r = y / x;
    // Did r overflow?
    if (Double.isInfinite(r)) {
        // x is effectively zero
        // so return the appropriate value
        return Math.PI / 2;
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Correct for rounding in division
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    // Add in effect additional bits of sqrt.
    rb += yb / x;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, x < 0);
}","public void test184184() throws Throwable {
    double double0 = FastMath.acos(4.9E-324);
    assertEquals(1.5707963267948966, double0, 0.01);
}","/**
 * Compute the arc cosine of a number.
 * @param x number on which evaluation is done
 * @return arc cosine of x
 */"
"public static double acos(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == -1.0) {
        return Math.PI;
    }
    if (x == 1.0) {
        return 0.0;
    }
    if (x == 0) {
        return Math.PI / 2.0;
    }
    /* Compute acos(x) = atan(sqrt(1-x*x)/x) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    yb += zb / (2.0 * y);
    y = ya + yb;
    yb = -(y - ya - yb);
    // Compute ratio r = y/x
    double r = y / x;
    // Did r overflow?
    if (Double.isInfinite(r)) {
        // x is effectively zero
        // so return the appropriate value
        return Math.PI / 2;
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Correct for rounding in division
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    // Add in effect additional bits of sqrt.
    rb += yb / x;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, x < 0);
}","public void test185185() throws Throwable {
    double double0 = FastMath.acos(0.35334908962249756);
    assertEquals(1.209647600800611, double0, 0.01);
}","/**
 * Compute the arc cosine of a number.
 * @param x number on which evaluation is done
 * @return arc cosine of x
 */"
"public static double acos(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == -1.0) {
        return Math.PI;
    }
    if (x == 1.0) {
        return 0.0;
    }
    if (x == 0) {
        return Math.PI / 2.0;
    }
    /* Compute acos(x) = atan(sqrt(1-x*x)/x) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    yb += zb / (2.0 * y);
    y = ya + yb;
    yb = -(y - ya - yb);
    // Compute ratio r = y/x
    double r = y / x;
    // Did r overflow?
    if (Double.isInfinite(r)) {
        // x is effectively zero
        // so return the appropriate value
        return Math.PI / 2;
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Correct for rounding in division
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    // Add in effect additional bits of sqrt.
    rb += yb / x;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, x < 0);
}","public void test186186() throws Throwable {
    double double0 = FastMath.acos(0L);
    assertEquals(1.5707963267948966, double0, 0.01);
}","/**
 * Compute the arc cosine of a number.
 * @param x number on which evaluation is done
 * @return arc cosine of x
 */"
"public static double acos(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == -1.0) {
        return Math.PI;
    }
    if (x == 1.0) {
        return 0.0;
    }
    if (x == 0) {
        return Math.PI / 2.0;
    }
    /* Compute acos(x) = atan(sqrt(1-x*x)/x) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    yb += zb / (2.0 * y);
    y = ya + yb;
    yb = -(y - ya - yb);
    // Compute ratio r = y/x
    double r = y / x;
    // Did r overflow?
    if (Double.isInfinite(r)) {
        // x is effectively zero
        // so return the appropriate value
        return Math.PI / 2;
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Correct for rounding in division
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    // Add in effect additional bits of sqrt.
    rb += yb / x;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, x < 0);
}","public void test187187() throws Throwable {
    double double0 = FastMath.acos((-1024.7907));
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the arc cosine of a number.
 * @param x number on which evaluation is done
 * @return arc cosine of x
 */"
"public static double acos(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == -1.0) {
        return Math.PI;
    }
    if (x == 1.0) {
        return 0.0;
    }
    if (x == 0) {
        return Math.PI / 2.0;
    }
    /* Compute acos(x) = atan(sqrt(1-x*x)/x) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    yb += zb / (2.0 * y);
    y = ya + yb;
    yb = -(y - ya - yb);
    // Compute ratio r = y/x
    double r = y / x;
    // Did r overflow?
    if (Double.isInfinite(r)) {
        // x is effectively zero
        // so return the appropriate value
        return Math.PI / 2;
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Correct for rounding in division
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    // Add in effect additional bits of sqrt.
    rb += yb / x;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, x < 0);
}","public void test188188() throws Throwable {
    double double0 = FastMath.acos((-1.0));
    assertEquals(3.141592653589793, double0, 0.01);
}","/**
 * Compute the arc cosine of a number.
 * @param x number on which evaluation is done
 * @return arc cosine of x
 */"
"public static double acos(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == -1.0) {
        return Math.PI;
    }
    if (x == 1.0) {
        return 0.0;
    }
    if (x == 0) {
        return Math.PI / 2.0;
    }
    /* Compute acos(x) = atan(sqrt(1-x*x)/x) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    yb += zb / (2.0 * y);
    y = ya + yb;
    yb = -(y - ya - yb);
    // Compute ratio r = y/x
    double r = y / x;
    // Did r overflow?
    if (Double.isInfinite(r)) {
        // x is effectively zero
        // so return the appropriate value
        return Math.PI / 2;
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Correct for rounding in division
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    // Add in effect additional bits of sqrt.
    rb += yb / x;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, x < 0);
}","public void test189189() throws Throwable {
    double double0 = FastMath.acos(3410.0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the arc cosine of a number.
 * @param x number on which evaluation is done
 * @return arc cosine of x
 */"
"public static double asin(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == 1.0) {
        return Math.PI / 2.0;
    }
    if (x == -1.0) {
        return -Math.PI / 2.0;
    }
    if (x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    /* Compute asin(x) = atan(x/sqrt(1-x*x)) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y;
    y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    double dx = zb / (2.0 * y);
    // Compute ratio r = x/y
    double r = x / y;
    temp = r * HEX_40000000;
    double ra = r + temp - temp;
    double rb = r - ra;
    // Correct for rounding in division
    rb += (x - ra * ya - ra * yb - rb * ya - rb * yb) / y;
    // Add in effect additional bits of sqrt.
    rb += -x * dx / y / y;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, false);
}","public void test190190() throws Throwable {
    double double0 = FastMath.asin(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the arc sine of a number.
 * @param x number on which evaluation is done
 * @return arc sine of x
 */"
"public static double asin(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == 1.0) {
        return Math.PI / 2.0;
    }
    if (x == -1.0) {
        return -Math.PI / 2.0;
    }
    if (x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    /* Compute asin(x) = atan(x/sqrt(1-x*x)) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y;
    y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    double dx = zb / (2.0 * y);
    // Compute ratio r = x/y
    double r = x / y;
    temp = r * HEX_40000000;
    double ra = r + temp - temp;
    double rb = r - ra;
    // Correct for rounding in division
    rb += (x - ra * ya - ra * yb - rb * ya - rb * yb) / y;
    // Add in effect additional bits of sqrt.
    rb += -x * dx / y / y;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, false);
}","public void test191191() throws Throwable {
    double double0 = FastMath.asin((-1.0F));
    assertEquals((-1.5707963267948966), double0, 0.01);
}","/**
 * Compute the arc sine of a number.
 * @param x number on which evaluation is done
 * @return arc sine of x
 */"
"public static double asin(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == 1.0) {
        return Math.PI / 2.0;
    }
    if (x == -1.0) {
        return -Math.PI / 2.0;
    }
    if (x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    /* Compute asin(x) = atan(x/sqrt(1-x*x)) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y;
    y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    double dx = zb / (2.0 * y);
    // Compute ratio r = x/y
    double r = x / y;
    temp = r * HEX_40000000;
    double ra = r + temp - temp;
    double rb = r - ra;
    // Correct for rounding in division
    rb += (x - ra * ya - ra * yb - rb * ya - rb * yb) / y;
    // Add in effect additional bits of sqrt.
    rb += -x * dx / y / y;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, false);
}","public void test192192() throws Throwable {
    double double0 = FastMath.asin(1.0);
    assertEquals(1.5707963267948966, double0, 0.01);
}","/**
 * Compute the arc sine of a number.
 * @param x number on which evaluation is done
 * @return arc sine of x
 */"
"public static double asin(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == 1.0) {
        return Math.PI / 2.0;
    }
    if (x == -1.0) {
        return -Math.PI / 2.0;
    }
    if (x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    /* Compute asin(x) = atan(x/sqrt(1-x*x)) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y;
    y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    double dx = zb / (2.0 * y);
    // Compute ratio r = x/y
    double r = x / y;
    temp = r * HEX_40000000;
    double ra = r + temp - temp;
    double rb = r - ra;
    // Correct for rounding in division
    rb += (x - ra * ya - ra * yb - rb * ya - rb * yb) / y;
    // Add in effect additional bits of sqrt.
    rb += -x * dx / y / y;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, false);
}","public void test193193() throws Throwable {
    double double0 = FastMath.asin(7.724278756071081E-9);
    assertEquals(7.724278756071081E-9, double0, 0.01);
}","/**
 * Compute the arc sine of a number.
 * @param x number on which evaluation is done
 * @return arc sine of x
 */"
"public static double asin(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == 1.0) {
        return Math.PI / 2.0;
    }
    if (x == -1.0) {
        return -Math.PI / 2.0;
    }
    if (x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    /* Compute asin(x) = atan(x/sqrt(1-x*x)) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y;
    y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    double dx = zb / (2.0 * y);
    // Compute ratio r = x/y
    double r = x / y;
    temp = r * HEX_40000000;
    double ra = r + temp - temp;
    double rb = r - ra;
    // Correct for rounding in division
    rb += (x - ra * ya - ra * yb - rb * ya - rb * yb) / y;
    // Add in effect additional bits of sqrt.
    rb += -x * dx / y / y;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, false);
}","public void test194194() throws Throwable {
    double double0 = FastMath.asin((-1757.5065213391974));
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the arc sine of a number.
 * @param x number on which evaluation is done
 * @return arc sine of x
 */"
"public static double asin(double x) {
    if (x != x) {
        return Double.NaN;
    }
    if (x > 1.0 || x < -1.0) {
        return Double.NaN;
    }
    if (x == 1.0) {
        return Math.PI / 2.0;
    }
    if (x == -1.0) {
        return -Math.PI / 2.0;
    }
    if (x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    /* Compute asin(x) = atan(x/sqrt(1-x*x)) */
    /* Split x */
    double temp = x * HEX_40000000;
    final double xa = x + temp - temp;
    final double xb = x - xa;
    /* Square it */
    double ya = xa * xa;
    double yb = xa * xb * 2.0 + xb * xb;
    /* Subtract from 1 */
    ya = -ya;
    yb = -yb;
    double za = 1.0 + ya;
    double zb = -(za - 1.0 - ya);
    temp = za + yb;
    zb += -(temp - za - yb);
    za = temp;
    /* Square root */
    double y;
    y = sqrt(za);
    temp = y * HEX_40000000;
    ya = y + temp - temp;
    yb = y - ya;
    /* Extend precision of sqrt */
    yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
    /* Contribution of zb to sqrt */
    double dx = zb / (2.0 * y);
    // Compute ratio r = x/y
    double r = x / y;
    temp = r * HEX_40000000;
    double ra = r + temp - temp;
    double rb = r - ra;
    // Correct for rounding in division
    rb += (x - ra * ya - ra * yb - rb * ya - rb * yb) / y;
    // Add in effect additional bits of sqrt.
    rb += -x * dx / y / y;
    temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    return atan(ra, rb, false);
}","public void test195195() throws Throwable {
    double double0 = FastMath.asin(5117.0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the arc sine of a number.
 * @param x number on which evaluation is done
 * @return arc sine of x
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test196196() throws Throwable {
    double double0 = FastMath.atan2((-920.35809), 0.0);
    assertEquals((-1.5707963267948966), double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test197197() throws Throwable {
    double double0 = FastMath.atan2(6.123233995736766E-17, 0.0);
    assertEquals(1.5707963267948966, double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test198198() throws Throwable {
    double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, 0.0);
    assertEquals((-1.5707963267948966), double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test199199() throws Throwable {
    double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, (-1055.487029));
    assertEquals(1.5707963267948966, double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test200200() throws Throwable {
    double double0 = FastMath.atan2(0.0, (-5.718749537552229E-8));
    assertEquals(3.141592653589793, double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test201201() throws Throwable {
    double double0 = FastMath.atan2(0.0, 0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test202202() throws Throwable {
    double double0 = FastMath.atan2(7.2759576E-12F, Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test203203() throws Throwable {
    double double0 = FastMath.atan2((-1634.57178), (-9.374695893307895E158));
    assertEquals((-3.141592653589793), double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test204204() throws Throwable {
    double double0 = FastMath.atan2((-1.4561530066010593E152), 1123.6401454900758);
    assertEquals((-1.5707963267948966), double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan2(double y, double x) {
    if (x != x || y != y) {
        return Double.NaN;
    }
    if (y == 0) {
        final double result = x * y;
        final double invx = 1d / x;
        final double invy = 1d / y;
        if (invx == 0) {
            // X is infinite
            if (x > 0) {
                // return +/- 0.0
                return y;
            } else {
                return copySign(Math.PI, y);
            }
        }
        if (x < 0 || invx < 0) {
            if (y < 0 || invy < 0) {
                return -Math.PI;
            } else {
                return Math.PI;
            }
        } else {
            return result;
        }
    }
    // y cannot now be zero
    if (y == Double.POSITIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return Math.PI * F_3_4;
        }
        return Math.PI * F_1_2;
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x == Double.POSITIVE_INFINITY) {
            return -Math.PI * F_1_4;
        }
        if (x == Double.NEGATIVE_INFINITY) {
            return -Math.PI * F_3_4;
        }
        return -Math.PI * F_1_2;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y > 0 || 1 / y > 0) {
            return 0d;
        }
        if (y < 0 || 1 / y < 0) {
            return -0d;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y > 0.0 || 1 / y > 0.0) {
            return Math.PI;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI;
        }
    }
    // Neither y nor x can be infinite or NAN here
    if (x == 0) {
        if (y > 0 || 1 / y > 0) {
            return Math.PI * F_1_2;
        }
        if (y < 0 || 1 / y < 0) {
            return -Math.PI * F_1_2;
        }
    }
    // Compute ratio r = y/x
    final double r = y / x;
    if (Double.isInfinite(r)) {
        // bypass calculations that can create NaN
        return atan(r, 0, x < 0);
    }
    double ra = doubleHighPart(r);
    double rb = r - ra;
    // Split x
    final double xa = doubleHighPart(x);
    final double xb = x - xa;
    rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
    final double temp = ra + rb;
    rb = -(temp - ra - rb);
    ra = temp;
    if (ra == 0) {
        // Fix up the sign so atan works correctly
        ra = copySign(0d, y);
    }
    // Call atan
    final double result = atan(ra, rb, x < 0);
    return result;
}","public void test205205() throws Throwable {
    double double0 = FastMath.atan2(4.039437286589528E271, (-1987.922166242));
    assertEquals(1.5707963267948966, double0, 0.01);
}","/**
 * Two arguments arctangent function
 * @param y ordinate
 * @param x abscissa
 * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
 */"
"public static double atan(double x) {
    return atan(x, 0.0, false);
}","public void test206206() throws Throwable {
    double double0 = FastMath.atan(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Arctangent function
 *  @param x a number
 *  @return atan(x)
 */"
"public static double tan(double x) {
    boolean negative = false;
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (xa > 1.5) {
        // Accuracy suffers between 1.5 and PI/2
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -(a - pi2a + xa);
        b += pi2b - xb;
        xa = a + b;
        xb = -(xa - a - b);
        quadrant ^= 1;
        negative ^= true;
    }
    double result;
    if ((quadrant & 1) == 0) {
        result = tanQ(xa, xb, false);
    } else {
        result = -tanQ(xa, xb, true);
    }
    if (negative) {
        result = -result;
    }
    return result;
}","public void test207207() throws Throwable {
    double double0 = FastMath.tan((-1559.78246239));
    assertEquals((-54.668238037265894), double0, 0.01);
}","/**
 * Tangent function.
 *
 * @param x Argument.
 * @return tan(x)
 */"
"public static double tan(double x) {
    boolean negative = false;
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (xa > 1.5) {
        // Accuracy suffers between 1.5 and PI/2
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -(a - pi2a + xa);
        b += pi2b - xb;
        xa = a + b;
        xb = -(xa - a - b);
        quadrant ^= 1;
        negative ^= true;
    }
    double result;
    if ((quadrant & 1) == 0) {
        result = tanQ(xa, xb, false);
    } else {
        result = -tanQ(xa, xb, true);
    }
    if (negative) {
        result = -result;
    }
    return result;
}","public void test208208() throws Throwable {
    double double0 = FastMath.tan(Double.POSITIVE_INFINITY);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Tangent function.
 *
 * @param x Argument.
 * @return tan(x)
 */"
"public static double tan(double x) {
    boolean negative = false;
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (xa > 1.5) {
        // Accuracy suffers between 1.5 and PI/2
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -(a - pi2a + xa);
        b += pi2b - xb;
        xa = a + b;
        xb = -(xa - a - b);
        quadrant ^= 1;
        negative ^= true;
    }
    double result;
    if ((quadrant & 1) == 0) {
        result = tanQ(xa, xb, false);
    } else {
        result = -tanQ(xa, xb, true);
    }
    if (negative) {
        result = -result;
    }
    return result;
}","public void test209209() throws Throwable {
    double double0 = FastMath.tan(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Tangent function.
 *
 * @param x Argument.
 * @return tan(x)
 */"
"public static double tan(double x) {
    boolean negative = false;
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (xa > 1.5) {
        // Accuracy suffers between 1.5 and PI/2
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -(a - pi2a + xa);
        b += pi2b - xb;
        xa = a + b;
        xb = -(xa - a - b);
        quadrant ^= 1;
        negative ^= true;
    }
    double result;
    if ((quadrant & 1) == 0) {
        result = tanQ(xa, xb, false);
    } else {
        result = -tanQ(xa, xb, true);
    }
    if (negative) {
        result = -result;
    }
    return result;
}","public void test210210() throws Throwable {
    double double0 = FastMath.tan(0.0F);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Tangent function.
 *
 * @param x Argument.
 * @return tan(x)
 */"
"public static double cos(double x) {
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        xa = -xa;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    //if (negative)
    //  quadrant = (quadrant + 2) % 4;
    switch(quadrant) {
        case 0:
            return cosQ(xa, xb);
        case 1:
            return -sinQ(xa, xb);
        case 2:
            return -cosQ(xa, xb);
        case 3:
            return sinQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test211211() throws Throwable {
    double double0 = FastMath.cos(375.5);
    assertEquals(0.07959361603194907, double0, 0.01);
}","/**
 * Cosine function.
 *
 * @param x Argument.
 * @return cos(x)
 */"
"public static double cos(double x) {
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        xa = -xa;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    //if (negative)
    //  quadrant = (quadrant + 2) % 4;
    switch(quadrant) {
        case 0:
            return cosQ(xa, xb);
        case 1:
            return -sinQ(xa, xb);
        case 2:
            return -cosQ(xa, xb);
        case 3:
            return sinQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test212212() throws Throwable {
    double double0 = FastMath.cos(Float.NEGATIVE_INFINITY);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Cosine function.
 *
 * @param x Argument.
 * @return cos(x)
 */"
"public static double cos(double x) {
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        xa = -xa;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    //if (negative)
    //  quadrant = (quadrant + 2) % 4;
    switch(quadrant) {
        case 0:
            return cosQ(xa, xb);
        case 1:
            return -sinQ(xa, xb);
        case 2:
            return -cosQ(xa, xb);
        case 3:
            return sinQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test213213() throws Throwable {
    double double0 = FastMath.cos(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Cosine function.
 *
 * @param x Argument.
 * @return cos(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test214214() throws Throwable {
    double double0 = FastMath.sin((-819L));
    assertEquals((-0.8167078184368716), double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test215215() throws Throwable {
    double double0 = FastMath.sin((-514.183449678365));
    assertEquals(0.8612607682049728, double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test216216() throws Throwable {
    double double0 = FastMath.sin(Double.POSITIVE_INFINITY);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test217217() throws Throwable {
    double double0 = FastMath.sin(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test218218() throws Throwable {
    double double0 = FastMath.sin(-0.0F);
    assertEquals(-0.0, double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test219219() throws Throwable {
    double double0 = FastMath.sin(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double tan(double x) {
    boolean negative = false;
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (xa > 1.5) {
        // Accuracy suffers between 1.5 and PI/2
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -(a - pi2a + xa);
        b += pi2b - xb;
        xa = a + b;
        xb = -(xa - a - b);
        quadrant ^= 1;
        negative ^= true;
    }
    double result;
    if ((quadrant & 1) == 0) {
        result = tanQ(xa, xb, false);
    } else {
        result = -tanQ(xa, xb, true);
    }
    if (negative) {
        result = -result;
    }
    return result;
}","public void test220220() throws Throwable {
    double double0 = FastMath.tan(5.540622484676759E34);
    assertEquals(2.5474754259432455, double0, 0.01);
}","/**
 * Tangent function.
 *
 * @param x Argument.
 * @return tan(x)
 */"
"public static double cos(double x) {
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        xa = -xa;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    //if (negative)
    //  quadrant = (quadrant + 2) % 4;
    switch(quadrant) {
        case 0:
            return cosQ(xa, xb);
        case 1:
            return -sinQ(xa, xb);
        case 2:
            return -cosQ(xa, xb);
        case 3:
            return sinQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test221221() throws Throwable {
    double double0 = FastMath.cos(6.837671137556327E30);
    assertEquals(0.8244504956321281, double0, 0.01);
}","/**
 * Cosine function.
 *
 * @param x Argument.
 * @return cos(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test222222() throws Throwable {
    double double0 = FastMath.sin((-2145698541));
    assertEquals((-0.9182973807881414), double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test223223() throws Throwable {
    double double0 = FastMath.sin(1.8445514681108982E150);
    assertEquals(0.9641857332345813, double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double cos(double x) {
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        xa = -xa;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    //if (negative)
    //  quadrant = (quadrant + 2) % 4;
    switch(quadrant) {
        case 0:
            return cosQ(xa, xb);
        case 1:
            return -sinQ(xa, xb);
        case 2:
            return -cosQ(xa, xb);
        case 3:
            return sinQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test224224() throws Throwable {
    double double0 = FastMath.cos((-9.374695893307895E158));
    assertEquals((-0.9996342055756253), double0, 0.01);
}","/**
 * Cosine function.
 *
 * @param x Argument.
 * @return cos(x)
 */"
"public static double cos(double x) {
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        xa = -xa;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    //if (negative)
    //  quadrant = (quadrant + 2) % 4;
    switch(quadrant) {
        case 0:
            return cosQ(xa, xb);
        case 1:
            return -sinQ(xa, xb);
        case 2:
            return -cosQ(xa, xb);
        case 3:
            return sinQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test225225() throws Throwable {
    double double0 = FastMath.cos((-1.642361029990822E65));
    assertEquals((-0.7658017397527423), double0, 0.01);
}","/**
 * Cosine function.
 *
 * @param x Argument.
 * @return cos(x)
 */"
"public static double tan(double x) {
    boolean negative = false;
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (xa > 1.5) {
        // Accuracy suffers between 1.5 and PI/2
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -(a - pi2a + xa);
        b += pi2b - xb;
        xa = a + b;
        xb = -(xa - a - b);
        quadrant ^= 1;
        negative ^= true;
    }
    double result;
    if ((quadrant & 1) == 0) {
        result = tanQ(xa, xb, false);
    } else {
        result = -tanQ(xa, xb, true);
    }
    if (negative) {
        result = -result;
    }
    return result;
}","public void test226226() throws Throwable {
    double double0 = FastMath.tan((-3.390456646038825E-19));
    assertEquals((-3.390456646038825E-19), double0, 0.01);
}","/**
 * Tangent function.
 *
 * @param x Argument.
 * @return tan(x)
 */"
"public static double sin(double x) {
    boolean negative = false;
    int quadrant = 0;
    double xa;
    double xb = 0.0;
    /* Take absolute value of the input */
    xa = x;
    if (x < 0) {
        negative = true;
        xa = -xa;
    }
    /* Check for zero and negative zero */
    if (xa == 0.0) {
        long bits = Double.doubleToLongBits(x);
        if (bits < 0) {
            return -0.0;
        }
        return 0.0;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    if (negative) {
        // Flip bit 1
        quadrant ^= 2;
    }
    switch(quadrant) {
        case 0:
            return sinQ(xa, xb);
        case 1:
            return cosQ(xa, xb);
        case 2:
            return -sinQ(xa, xb);
        case 3:
            return -cosQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test227227() throws Throwable {
    double double0 = FastMath.sin((-4.9E-324));
    assertEquals((-4.9E-324), double0, 0.01);
}","/**
 * Sine function.
 *
 * @param x Argument.
 * @return sin(x)
 */"
"public static double pow(double d, int e) {
    if (e == 0) {
        return 1.0;
    } else if (e < 0) {
        e = -e;
        d = 1.0 / d;
    }
    // split d as two 26 bits numbers
    // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
    final int splitFactor = 0x8000001;
    final double cd = splitFactor * d;
    final double d1High = cd - (cd - d);
    final double d1Low = d - d1High;
    // prepare result
    double resultHigh = 1;
    double resultLow = 0;
    // d^(2p)
    double d2p = d;
    double d2pHigh = d1High;
    double d2pLow = d1Low;
    while (e != 0) {
        if ((e & 0x1) != 0) {
            // accurate multiplication result = result * d^(2p) using Veltkamp TwoProduct algorithm
            // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
            final double tmpHigh = resultHigh * d2p;
            final double cRH = splitFactor * resultHigh;
            final double rHH = cRH - (cRH - resultHigh);
            final double rHL = resultHigh - rHH;
            final double tmpLow = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);
            resultHigh = tmpHigh;
            resultLow = resultLow * d2p + tmpLow;
        }
        // accurate squaring d^(2(p+1)) = d^(2p) * d^(2p) using Veltkamp TwoProduct algorithm
        // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties
        final double tmpHigh = d2pHigh * d2p;
        final double cD2pH = splitFactor * d2pHigh;
        final double d2pHH = cD2pH - (cD2pH - d2pHigh);
        final double d2pHL = d2pHigh - d2pHH;
        final double tmpLow = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);
        final double cTmpH = splitFactor * tmpHigh;
        d2pHigh = cTmpH - (cTmpH - tmpHigh);
        d2pLow = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);
        d2p = d2pHigh + d2pLow;
        e = e >> 1;
    }
    return resultHigh + resultLow;
}","public void test228228() throws Throwable {
    double double0 = FastMath.pow(0.0, 0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Raise a double to an int power.
 *
 * @param d Number to raise.
 * @param e Exponent.
 * @return d<sup>e</sup>
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test229229() throws Throwable {
    double double0 = FastMath.pow(2.6197411946856397E-8, Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test230230() throws Throwable {
    double double0 = FastMath.pow((-8.331653664515525), (double) (-3218.0F));
    assertEquals(0.0, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test231231() throws Throwable {
    double double0 = FastMath.pow((-525.0), 1.0);
    assertEquals((-525.0), double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test232232() throws Throwable {
    double double0 = FastMath.pow((-2662.4290799), 0.4300335485332658);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test233233() throws Throwable {
    double double0 = FastMath.pow((double) (-740.9073F), 1.4946725808524086E235);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test234234() throws Throwable {
    double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 2.7553817452272217E-6);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test235235() throws Throwable {
    double double0 = FastMath.pow((-4324.92153849), (double) Float.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test236236() throws Throwable {
    double double0 = FastMath.pow(0.14384103622589045, Double.POSITIVE_INFINITY);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test237237() throws Throwable {
    double double0 = FastMath.pow((double) 0.0F, 1.2312228679656982);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test238238() throws Throwable {
    double double0 = FastMath.pow(0.0, (-3491.35));
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test239239() throws Throwable {
    double double0 = FastMath.pow(Double.NaN, 3.203391672602453E-8);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test240240() throws Throwable {
    double double0 = FastMath.pow((-2068.6856), (double) 0.0F);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double log10(final double x) {
    final double[] hiPrec = new double[2];
    final double lores = log(x, hiPrec);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    final double tmp = hiPrec[0] * HEX_40000000;
    final double lna = hiPrec[0] + tmp - tmp;
    final double lnb = hiPrec[0] - lna + hiPrec[1];
    final double rln10a = 0.4342944622039795;
    final double rln10b = 1.9699272335463627E-8;
    return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
}","public void test241241() throws Throwable {
    double double0 = FastMath.log10(0.0);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Compute the base 10 logarithm.
 * @param x a number
 * @return log10(x)
 */"
"public static double log1p(final double x) {
    if (x == -1) {
        return Double.NEGATIVE_INFINITY;
    }
    if (x == Double.POSITIVE_INFINITY) {
        return Double.POSITIVE_INFINITY;
    }
    if (x > 1e-6 || x < -1e-6) {
        final double xpa = 1 + x;
        final double xpb = -(xpa - 1 - x);
        final double[] hiPrec = new double[2];
        final double lores = log(xpa, hiPrec);
        if (Double.isInfinite(lores)) {
            // Don't allow this to be converted to NaN
            return lores;
        }
        // Do a taylor series expansion around xpa:
        //   f(x+y) = f(x) + f'(x) y + f''(x)/2 y^2
        final double fx1 = xpb / xpa;
        final double epsilon = 0.5 * fx1 + 1;
        return epsilon * fx1 + hiPrec[1] + hiPrec[0];
    } else {
        // Value is small |x| < 1e6, do a Taylor series centered on 1.
        final double y = (x * F_1_3 - F_1_2) * x + 1;
        return y * x;
    }
}","public void test242242() throws Throwable {
    double double0 = FastMath.log1p(0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Computes log(1 + x).
 *
 * @param x Number.
 * @return {@code log(1 + x)}.
 */"
"public static double log1p(final double x) {
    if (x == -1) {
        return Double.NEGATIVE_INFINITY;
    }
    if (x == Double.POSITIVE_INFINITY) {
        return Double.POSITIVE_INFINITY;
    }
    if (x > 1e-6 || x < -1e-6) {
        final double xpa = 1 + x;
        final double xpb = -(xpa - 1 - x);
        final double[] hiPrec = new double[2];
        final double lores = log(xpa, hiPrec);
        if (Double.isInfinite(lores)) {
            // Don't allow this to be converted to NaN
            return lores;
        }
        // Do a taylor series expansion around xpa:
        //   f(x+y) = f(x) + f'(x) y + f''(x)/2 y^2
        final double fx1 = xpb / xpa;
        final double epsilon = 0.5 * fx1 + 1;
        return epsilon * fx1 + hiPrec[1] + hiPrec[0];
    } else {
        // Value is small |x| < 1e6, do a Taylor series centered on 1.
        final double y = (x * F_1_3 - F_1_2) * x + 1;
        return y * x;
    }
}","public void test243243() throws Throwable {
    double double0 = FastMath.log1p(Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Computes log(1 + x).
 *
 * @param x Number.
 * @return {@code log(1 + x)}.
 */"
"public static double log1p(final double x) {
    if (x == -1) {
        return Double.NEGATIVE_INFINITY;
    }
    if (x == Double.POSITIVE_INFINITY) {
        return Double.POSITIVE_INFINITY;
    }
    if (x > 1e-6 || x < -1e-6) {
        final double xpa = 1 + x;
        final double xpb = -(xpa - 1 - x);
        final double[] hiPrec = new double[2];
        final double lores = log(xpa, hiPrec);
        if (Double.isInfinite(lores)) {
            // Don't allow this to be converted to NaN
            return lores;
        }
        // Do a taylor series expansion around xpa:
        //   f(x+y) = f(x) + f'(x) y + f''(x)/2 y^2
        final double fx1 = xpb / xpa;
        final double epsilon = 0.5 * fx1 + 1;
        return epsilon * fx1 + hiPrec[1] + hiPrec[0];
    } else {
        // Value is small |x| < 1e6, do a Taylor series centered on 1.
        final double y = (x * F_1_3 - F_1_2) * x + 1;
        return y * x;
    }
}","public void test244244() throws Throwable {
    double double0 = FastMath.log1p((-1.0));
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Computes log(1 + x).
 *
 * @param x Number.
 * @return {@code log(1 + x)}.
 */"
"public static double log(double base, double x) {
    return log(x) / log(base);
}","public void test245245() throws Throwable {
    double double0 = FastMath.log(1.4582863136475673E-187, 1.0);
    assertEquals(-0.0, double0, 0.01);
}","/**
 * Computes the <a href=""http://mathworld.wolfram.com/Logarithm.html"">
 * logarithm</a> in a given base.
 *
 * Returns {@code NaN} if either argument is negative.
 * If {@code base} is 0 and {@code x} is positive, 0 is returned.
 * If {@code base} is positive and {@code x} is 0,
 * {@code Double.NEGATIVE_INFINITY} is returned.
 * If both arguments are 0, the result is {@code NaN}.
 *
 * @param base Base of the logarithm, must be greater than 0.
 * @param x Argument, must be greater than 0.
 * @return the value of the logarithm, i.e. the number {@code y} such that
 * <code>base<sup>y</sup> = x</code>.
 * @since 1.2 (previously in {@code MathUtils}, moved as of version 3.0)
 */"
"public static double atanh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAtanh;
    if (a > 0.15) {
        absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
    } else {
        final double a2 = a * a;
        if (a > 0.087) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
        } else if (a > 0.031) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
        } else if (a > 0.003) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
        } else {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
        }
    }
    return negative ? -absAtanh : absAtanh;
}","public void test246246() throws Throwable {
    double double0 = FastMath.atanh(0.1532618864787106);
    assertEquals(0.1544790877460057, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic tangent of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic tangent of a
 */"
"public static double log1p(final double x) {
    if (x == -1) {
        return Double.NEGATIVE_INFINITY;
    }
    if (x == Double.POSITIVE_INFINITY) {
        return Double.POSITIVE_INFINITY;
    }
    if (x > 1e-6 || x < -1e-6) {
        final double xpa = 1 + x;
        final double xpb = -(xpa - 1 - x);
        final double[] hiPrec = new double[2];
        final double lores = log(xpa, hiPrec);
        if (Double.isInfinite(lores)) {
            // Don't allow this to be converted to NaN
            return lores;
        }
        // Do a taylor series expansion around xpa:
        //   f(x+y) = f(x) + f'(x) y + f''(x)/2 y^2
        final double fx1 = xpb / xpa;
        final double epsilon = 0.5 * fx1 + 1;
        return epsilon * fx1 + hiPrec[1] + hiPrec[0];
    } else {
        // Value is small |x| < 1e6, do a Taylor series centered on 1.
        final double y = (x * F_1_3 - F_1_2) * x + 1;
        return y * x;
    }
}","public void test247247() throws Throwable {
    double double0 = FastMath.log1p(1.220703125E-4);
    assertEquals(1.2206286252567737E-4, double0, 0.01);
}","/**
 * Computes log(1 + x).
 *
 * @param x Number.
 * @return {@code log(1 + x)}.
 */"
"public static double pow(double x, double y) {
    final double[] lns = new double[2];
    if (y == 0.0) {
        return 1.0;
    }
    if (x != x) {
        // X is NaN
        return x;
    }
    if (x == 0) {
        long bits = Double.doubleToLongBits(x);
        if ((bits & 0x8000000000000000L) != 0) {
            // -zero
            long yi = (long) y;
            if (y < 0 && y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            if (y > 0 && y == yi && (yi & 1) == 1) {
                return -0.0;
            }
        }
        if (y < 0) {
            return Double.POSITIVE_INFINITY;
        }
        if (y > 0) {
            return 0.0;
        }
        return Double.NaN;
    }
    if (x == Double.POSITIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0.0) {
            return 0.0;
        } else {
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.POSITIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x > 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    if (x == Double.NEGATIVE_INFINITY) {
        if (y != y) {
            // y is NaN
            return y;
        }
        if (y < 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return -0.0;
            }
            return 0.0;
        }
        if (y > 0) {
            long yi = (long) y;
            if (y == yi && (yi & 1) == 1) {
                return Double.NEGATIVE_INFINITY;
            }
            return Double.POSITIVE_INFINITY;
        }
    }
    if (y == Double.NEGATIVE_INFINITY) {
        if (x * x == 1.0) {
            return Double.NaN;
        }
        if (x * x < 1.0) {
            return Double.POSITIVE_INFINITY;
        } else {
            return 0.0;
        }
    }
    /* Handle special case x<0 */
    if (x < 0) {
        // y is an even integer in this case
        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
            return pow(-x, y);
        }
        if (y == (long) y) {
            // If y is an integer
            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
        } else {
            return Double.NaN;
        }
    }
    /* Split y into ya and yb such that y = ya+yb */
    double ya;
    double yb;
    if (y < 8e298 && y > -8e298) {
        double tmp1 = y * HEX_40000000;
        ya = y + tmp1 - tmp1;
        yb = y - ya;
    } else {
        double tmp1 = y * 9.31322574615478515625E-10;
        double tmp2 = tmp1 * 9.31322574615478515625E-10;
        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
        yb = y - ya;
    }
    /* Compute ln(x) */
    final double lores = log(x, lns);
    if (Double.isInfinite(lores)) {
        // don't allow this to be converted to NaN
        return lores;
    }
    double lna = lns[0];
    double lnb = lns[1];
    /* resplit lns */
    double tmp1 = lna * HEX_40000000;
    double tmp2 = lna + tmp1 - tmp1;
    lnb += lna - tmp2;
    lna = tmp2;
    // y*ln(x) = (aa+ab)
    final double aa = lna * ya;
    final double ab = lna * yb + lnb * ya + lnb * yb;
    lna = aa + ab;
    lnb = -(lna - aa - ab);
    double z = 1.0 / 120.0;
    z = z * lnb + (1.0 / 24.0);
    z = z * lnb + (1.0 / 6.0);
    z = z * lnb + 0.5;
    z = z * lnb + 1.0;
    z = z * lnb;
    final double result = exp(lna, z, null);
    //result = result + result * z;
    return result;
}","public void test248248() throws Throwable {
    double double0 = FastMath.pow(0.9171523104767141, 0.9171523104767141);
    assertEquals(0.9237471305678375, double0, 0.01);
}","/**
 * Power function.  Compute x^y.
 *
 * @param x   a double
 * @param y   a double
 * @return double
 */"
"public static double log1p(final double x) {
    if (x == -1) {
        return Double.NEGATIVE_INFINITY;
    }
    if (x == Double.POSITIVE_INFINITY) {
        return Double.POSITIVE_INFINITY;
    }
    if (x > 1e-6 || x < -1e-6) {
        final double xpa = 1 + x;
        final double xpb = -(xpa - 1 - x);
        final double[] hiPrec = new double[2];
        final double lores = log(xpa, hiPrec);
        if (Double.isInfinite(lores)) {
            // Don't allow this to be converted to NaN
            return lores;
        }
        // Do a taylor series expansion around xpa:
        //   f(x+y) = f(x) + f'(x) y + f''(x)/2 y^2
        final double fx1 = xpb / xpa;
        final double epsilon = 0.5 * fx1 + 1;
        return epsilon * fx1 + hiPrec[1] + hiPrec[0];
    } else {
        // Value is small |x| < 1e6, do a Taylor series centered on 1.
        final double y = (x * F_1_3 - F_1_2) * x + 1;
        return y * x;
    }
}","public void test249249() throws Throwable {
    double double0 = FastMath.log1p((-1708.66615));
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Computes log(1 + x).
 *
 * @param x Number.
 * @return {@code log(1 + x)}.
 */"
"public static double log(final double x) {
    return log(x, null);
}","public void test250250() throws Throwable {
    double double0 = FastMath.log(0.0);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Natural logarithm.
 *
 * @param x   a double
 * @return log(x)
 */"
"public static double expm1(double x) {
    return expm1(x, null);
}","public void test251251() throws Throwable {
    double double0 = FastMath.expm1(4.9E-324);
    assertEquals(4.9E-324, double0, 0.01);
}","/**
 * Compute exp(x) - 1
 * @param x number to compute shifted exponential
 * @return exp(x) - 1
 */"
"public static double expm1(double x) {
    return expm1(x, null);
}","public void test252252() throws Throwable {
    double double0 = FastMath.expm1(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute exp(x) - 1
 * @param x number to compute shifted exponential
 * @return exp(x) - 1
 */"
"public static double expm1(double x) {
    return expm1(x, null);
}","public void test253253() throws Throwable {
    double double0 = FastMath.expm1(2.860915548426704E251);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Compute exp(x) - 1
 * @param x number to compute shifted exponential
 * @return exp(x) - 1
 */"
"public static double expm1(double x) {
    return expm1(x, null);
}","public void test254254() throws Throwable {
    double double0 = FastMath.expm1((-9223372036854775808L));
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Compute exp(x) - 1
 * @param x number to compute shifted exponential
 * @return exp(x) - 1
 */"
"public static float signum(final float a) {
    // return +0.0/-0.0/NaN depending on a
    return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);
}","public void test255255() throws Throwable {
    float float0 = FastMath.signum(0.0F);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Compute the signum of a number.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise
 * @param a number on which evaluation is done
 * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
 */"
"public static float signum(final float a) {
    // return +0.0/-0.0/NaN depending on a
    return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);
}","public void test256256() throws Throwable {
    float float0 = FastMath.signum((-1.4E-45F));
    assertEquals((-1.0F), float0, 0.01F);
}","/**
 * Compute the signum of a number.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise
 * @param a number on which evaluation is done
 * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
 */"
"public static float signum(final float a) {
    // return +0.0/-0.0/NaN depending on a
    return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);
}","public void test257257() throws Throwable {
    float float0 = FastMath.signum(77.0F);
    assertEquals(1.0F, float0, 0.01F);
}","/**
 * Compute the signum of a number.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise
 * @param a number on which evaluation is done
 * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
 */"
"public static double signum(final double a) {
    // return +0.0/-0.0/NaN depending on a
    return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);
}","public void test258258() throws Throwable {
    double double0 = FastMath.signum(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the signum of a number.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise
 * @param a number on which evaluation is done
 * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
 */"
"public static double signum(final double a) {
    // return +0.0/-0.0/NaN depending on a
    return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);
}","public void test259259() throws Throwable {
    double double0 = FastMath.signum((-1.5707963267948966));
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Compute the signum of a number.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise
 * @param a number on which evaluation is done
 * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
 */"
"public static double signum(final double a) {
    // return +0.0/-0.0/NaN depending on a
    return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);
}","public void test260260() throws Throwable {
    double double0 = FastMath.signum(952.592);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Compute the signum of a number.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise
 * @param a number on which evaluation is done
 * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
 */"
"public static double atanh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAtanh;
    if (a > 0.15) {
        absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
    } else {
        final double a2 = a * a;
        if (a > 0.087) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
        } else if (a > 0.031) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
        } else if (a > 0.003) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
        } else {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
        }
    }
    return negative ? -absAtanh : absAtanh;
}","public void test261261() throws Throwable {
    double double0 = FastMath.atanh(0.036);
    assertEquals(0.03601556410444137, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic tangent of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic tangent of a
 */"
"public static double atanh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAtanh;
    if (a > 0.15) {
        absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
    } else {
        final double a2 = a * a;
        if (a > 0.087) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
        } else if (a > 0.031) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
        } else if (a > 0.003) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
        } else {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
        }
    }
    return negative ? -absAtanh : absAtanh;
}","public void test262262() throws Throwable {
    double double0 = FastMath.atanh(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic tangent of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic tangent of a
 */"
"public static double atanh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAtanh;
    if (a > 0.15) {
        absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
    } else {
        final double a2 = a * a;
        if (a > 0.087) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
        } else if (a > 0.031) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
        } else if (a > 0.003) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
        } else {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
        }
    }
    return negative ? -absAtanh : absAtanh;
}","public void test263263() throws Throwable {
    double double0 = FastMath.atanh((-1413.2458));
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic tangent of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic tangent of a
 */"
"public static double atanh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAtanh;
    if (a > 0.15) {
        absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
    } else {
        final double a2 = a * a;
        if (a > 0.087) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
        } else if (a > 0.031) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
        } else if (a > 0.003) {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
        } else {
            absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
        }
    }
    return negative ? -absAtanh : absAtanh;
}","public void test264264() throws Throwable {
    double double0 = FastMath.atanh(0.14285714285714285);
    assertEquals(0.14384103622589045, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic tangent of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic tangent of a
 */"
"public static double asinh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAsinh;
    if (a > 0.167) {
        absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
    } else {
        final double a2 = a * a;
        if (a > 0.097) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else if (a > 0.036) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else if (a > 0.0036) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
        }
    }
    return negative ? -absAsinh : absAsinh;
}","public void test265265() throws Throwable {
    double double0 = FastMath.asinh(0.036);
    assertEquals(0.035992228531467885, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic sine of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic sine of a
 */"
"public static double asinh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAsinh;
    if (a > 0.167) {
        absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
    } else {
        final double a2 = a * a;
        if (a > 0.097) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else if (a > 0.036) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else if (a > 0.0036) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
        }
    }
    return negative ? -absAsinh : absAsinh;
}","public void test266266() throws Throwable {
    double double0 = FastMath.asinh(0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic sine of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic sine of a
 */"
"public static double asinh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAsinh;
    if (a > 0.167) {
        absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
    } else {
        final double a2 = a * a;
        if (a > 0.097) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else if (a > 0.036) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else if (a > 0.0036) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
        }
    }
    return negative ? -absAsinh : absAsinh;
}","public void test267267() throws Throwable {
    double double0 = FastMath.asinh(Double.NEGATIVE_INFINITY);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic sine of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic sine of a
 */"
"public static double asinh(double a) {
    boolean negative = false;
    if (a < 0) {
        negative = true;
        a = -a;
    }
    double absAsinh;
    if (a > 0.167) {
        absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
    } else {
        final double a2 = a * a;
        if (a > 0.097) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else if (a > 0.036) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else if (a > 0.0036) {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
        } else {
            absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
        }
    }
    return negative ? -absAsinh : absAsinh;
}","public void test268268() throws Throwable {
    double double0 = FastMath.asinh(0.14384103622589045);
    assertEquals(0.14334958068311862, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic sine of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic sine of a
 */"
"public static double tanh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // tanh[z] = sinh[z] / cosh[z]
    // = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
    // = (exp(2x) - 1) / (exp(2x) + 1)
    // for magnitude > 20, sinh[z] == cosh[z] in double precision
    if (x > 20.0) {
        return 1.0;
    }
    if (x < -20) {
        return -1.0;
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x >= 0.5) {
        double[] hiPrec = new double[2];
        // tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)
        exp(x * 2.0, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = -1.0 + ya;
        double nb = -(na + 1.0 - ya);
        double temp = na + yb;
        nb += -(temp - na - yb);
        na = temp;
        /* Denominator */
        double da = 1.0 + ya;
        double db = -(da - 1.0 - ya);
        temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    } else {
        double[] hiPrec = new double[2];
        // tanh(x) = expm1(2x) / (expm1(2x) + 2)
        expm1(x * 2.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = ya;
        double nb = yb;
        /* Denominator */
        double da = 2.0 + ya;
        double db = -(da - 2.0 - ya);
        double temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test269269() throws Throwable {
    double double0 = FastMath.tanh((-5.301386276260592E-111));
    assertEquals((-5.301386276260592E-111), double0, 0.01);
}","/**
 * Compute the hyperbolic tangent of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic tangent of x
 */"
"public static double tanh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // tanh[z] = sinh[z] / cosh[z]
    // = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
    // = (exp(2x) - 1) / (exp(2x) + 1)
    // for magnitude > 20, sinh[z] == cosh[z] in double precision
    if (x > 20.0) {
        return 1.0;
    }
    if (x < -20) {
        return -1.0;
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x >= 0.5) {
        double[] hiPrec = new double[2];
        // tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)
        exp(x * 2.0, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = -1.0 + ya;
        double nb = -(na + 1.0 - ya);
        double temp = na + yb;
        nb += -(temp - na - yb);
        na = temp;
        /* Denominator */
        double da = 1.0 + ya;
        double db = -(da - 1.0 - ya);
        temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    } else {
        double[] hiPrec = new double[2];
        // tanh(x) = expm1(2x) / (expm1(2x) + 2)
        expm1(x * 2.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = ya;
        double nb = yb;
        /* Denominator */
        double da = 2.0 + ya;
        double db = -(da - 2.0 - ya);
        double temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test270270() throws Throwable {
    double double0 = FastMath.tanh(2.1837735844595634);
    assertEquals(0.9749530333705595, double0, 0.01);
}","/**
 * Compute the hyperbolic tangent of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic tangent of x
 */"
"public static double tanh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // tanh[z] = sinh[z] / cosh[z]
    // = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
    // = (exp(2x) - 1) / (exp(2x) + 1)
    // for magnitude > 20, sinh[z] == cosh[z] in double precision
    if (x > 20.0) {
        return 1.0;
    }
    if (x < -20) {
        return -1.0;
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x >= 0.5) {
        double[] hiPrec = new double[2];
        // tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)
        exp(x * 2.0, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = -1.0 + ya;
        double nb = -(na + 1.0 - ya);
        double temp = na + yb;
        nb += -(temp - na - yb);
        na = temp;
        /* Denominator */
        double da = 1.0 + ya;
        double db = -(da - 1.0 - ya);
        temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    } else {
        double[] hiPrec = new double[2];
        // tanh(x) = expm1(2x) / (expm1(2x) + 2)
        expm1(x * 2.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = ya;
        double nb = yb;
        /* Denominator */
        double da = 2.0 + ya;
        double db = -(da - 2.0 - ya);
        double temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test271271() throws Throwable {
    double double0 = FastMath.tanh(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the hyperbolic tangent of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic tangent of x
 */"
"public static double tanh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // tanh[z] = sinh[z] / cosh[z]
    // = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
    // = (exp(2x) - 1) / (exp(2x) + 1)
    // for magnitude > 20, sinh[z] == cosh[z] in double precision
    if (x > 20.0) {
        return 1.0;
    }
    if (x < -20) {
        return -1.0;
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x >= 0.5) {
        double[] hiPrec = new double[2];
        // tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)
        exp(x * 2.0, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = -1.0 + ya;
        double nb = -(na + 1.0 - ya);
        double temp = na + yb;
        nb += -(temp - na - yb);
        na = temp;
        /* Denominator */
        double da = 1.0 + ya;
        double db = -(da - 1.0 - ya);
        temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    } else {
        double[] hiPrec = new double[2];
        // tanh(x) = expm1(2x) / (expm1(2x) + 2)
        expm1(x * 2.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = ya;
        double nb = yb;
        /* Denominator */
        double da = 2.0 + ya;
        double db = -(da - 2.0 - ya);
        double temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test272272() throws Throwable {
    double double0 = FastMath.tanh(870.010546069);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Compute the hyperbolic tangent of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic tangent of x
 */"
"public static double tanh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // tanh[z] = sinh[z] / cosh[z]
    // = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
    // = (exp(2x) - 1) / (exp(2x) + 1)
    // for magnitude > 20, sinh[z] == cosh[z] in double precision
    if (x > 20.0) {
        return 1.0;
    }
    if (x < -20) {
        return -1.0;
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x >= 0.5) {
        double[] hiPrec = new double[2];
        // tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)
        exp(x * 2.0, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = -1.0 + ya;
        double nb = -(na + 1.0 - ya);
        double temp = na + yb;
        nb += -(temp - na - yb);
        na = temp;
        /* Denominator */
        double da = 1.0 + ya;
        double db = -(da - 1.0 - ya);
        temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    } else {
        double[] hiPrec = new double[2];
        // tanh(x) = expm1(2x) / (expm1(2x) + 2)
        expm1(x * 2.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = ya;
        double nb = yb;
        /* Denominator */
        double da = 2.0 + ya;
        double db = -(da - 2.0 - ya);
        double temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test273273() throws Throwable {
    double double0 = FastMath.tanh(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the hyperbolic tangent of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic tangent of x
 */"
"public static double tanh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // tanh[z] = sinh[z] / cosh[z]
    // = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
    // = (exp(2x) - 1) / (exp(2x) + 1)
    // for magnitude > 20, sinh[z] == cosh[z] in double precision
    if (x > 20.0) {
        return 1.0;
    }
    if (x < -20) {
        return -1.0;
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x >= 0.5) {
        double[] hiPrec = new double[2];
        // tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)
        exp(x * 2.0, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = -1.0 + ya;
        double nb = -(na + 1.0 - ya);
        double temp = na + yb;
        nb += -(temp - na - yb);
        na = temp;
        /* Denominator */
        double da = 1.0 + ya;
        double db = -(da - 1.0 - ya);
        temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    } else {
        double[] hiPrec = new double[2];
        // tanh(x) = expm1(2x) / (expm1(2x) + 2)
        expm1(x * 2.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Numerator */
        double na = ya;
        double nb = yb;
        /* Denominator */
        double da = 2.0 + ya;
        double db = -(da - 2.0 - ya);
        double temp = da + yb;
        db += -(temp - da - yb);
        da = temp;
        temp = da * HEX_40000000;
        double daa = da + temp - temp;
        double dab = da - daa;
        // ratio = na/da
        double ratio = na / da;
        temp = ratio * HEX_40000000;
        double ratioa = ratio + temp - temp;
        double ratiob = ratio - ratioa;
        // Correct for rounding in division
        ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
        // Account for nb
        ratiob += nb / da;
        // Account for db
        ratiob += -db * na / da / da;
        result = ratioa + ratiob;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test274274() throws Throwable {
    double double0 = FastMath.tanh((-694.1540916770182));
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Compute the hyperbolic tangent of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic tangent of x
 */"
"public static double sinh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // sinh[z] = (exp(z) - exp(-z) / 2
    // for values of z larger than about 20,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return -0.5 * exp(-x);
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x > 0.25) {
        double[] hiPrec = new double[2];
        exp(x, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        double temp = ya * HEX_40000000;
        double yaa = ya + temp - temp;
        double yab = ya - yaa;
        // recip = 1/y
        double recip = 1.0 / ya;
        temp = recip * HEX_40000000;
        double recipa = recip + temp - temp;
        double recipb = recip - recipa;
        // Correct for rounding in division
        recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
        // Account for yb
        recipb += -yb * recip * recip;
        recipa = -recipa;
        recipb = -recipb;
        // y = y + 1/y
        temp = ya + recipa;
        yb += -(temp - ya - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -(temp - ya - recipb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    } else {
        double[] hiPrec = new double[2];
        expm1(x, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */
        double denom = 1.0 + ya;
        double denomr = 1.0 / denom;
        double denomb = -(denom - 1.0 - ya) + yb;
        double ratio = ya * denomr;
        double temp = ratio * HEX_40000000;
        double ra = ratio + temp - temp;
        double rb = ratio - ra;
        temp = denom * HEX_40000000;
        double za = denom + temp - temp;
        double zb = denom - za;
        rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
        // Adjust for yb
        // numerator
        rb += yb * denomr;
        // denominator
        rb += -ya * denomb * denomr * denomr;
        // y = y - 1/y
        temp = ya + ra;
        yb += -(temp - ya - ra);
        ya = temp;
        temp = ya + rb;
        yb += -(temp - ya - rb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test275275() throws Throwable {
    double double0 = FastMath.sinh(0.14384103622589045);
    assertEquals(0.14433756729740643, double0, 0.01);
}","/**
 * Compute the hyperbolic sine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic sine of x
 */"
"public static double sinh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // sinh[z] = (exp(z) - exp(-z) / 2
    // for values of z larger than about 20,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return -0.5 * exp(-x);
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x > 0.25) {
        double[] hiPrec = new double[2];
        exp(x, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        double temp = ya * HEX_40000000;
        double yaa = ya + temp - temp;
        double yab = ya - yaa;
        // recip = 1/y
        double recip = 1.0 / ya;
        temp = recip * HEX_40000000;
        double recipa = recip + temp - temp;
        double recipb = recip - recipa;
        // Correct for rounding in division
        recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
        // Account for yb
        recipb += -yb * recip * recip;
        recipa = -recipa;
        recipb = -recipb;
        // y = y + 1/y
        temp = ya + recipa;
        yb += -(temp - ya - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -(temp - ya - recipb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    } else {
        double[] hiPrec = new double[2];
        expm1(x, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */
        double denom = 1.0 + ya;
        double denomr = 1.0 / denom;
        double denomb = -(denom - 1.0 - ya) + yb;
        double ratio = ya * denomr;
        double temp = ratio * HEX_40000000;
        double ra = ratio + temp - temp;
        double rb = ratio - ra;
        temp = denom * HEX_40000000;
        double za = denom + temp - temp;
        double zb = denom - za;
        rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
        // Adjust for yb
        // numerator
        rb += yb * denomr;
        // denominator
        rb += -ya * denomb * denomr * denomr;
        // y = y - 1/y
        temp = ya + ra;
        yb += -(temp - ya - ra);
        ya = temp;
        temp = ya + rb;
        yb += -(temp - ya - rb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test276276() throws Throwable {
    double double0 = FastMath.sinh((-1.0F));
    assertEquals((-1.1752011936438014), double0, 0.01);
}","/**
 * Compute the hyperbolic sine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic sine of x
 */"
"public static double sinh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // sinh[z] = (exp(z) - exp(-z) / 2
    // for values of z larger than about 20,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return -0.5 * exp(-x);
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x > 0.25) {
        double[] hiPrec = new double[2];
        exp(x, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        double temp = ya * HEX_40000000;
        double yaa = ya + temp - temp;
        double yab = ya - yaa;
        // recip = 1/y
        double recip = 1.0 / ya;
        temp = recip * HEX_40000000;
        double recipa = recip + temp - temp;
        double recipb = recip - recipa;
        // Correct for rounding in division
        recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
        // Account for yb
        recipb += -yb * recip * recip;
        recipa = -recipa;
        recipb = -recipb;
        // y = y + 1/y
        temp = ya + recipa;
        yb += -(temp - ya - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -(temp - ya - recipb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    } else {
        double[] hiPrec = new double[2];
        expm1(x, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */
        double denom = 1.0 + ya;
        double denomr = 1.0 / denom;
        double denomb = -(denom - 1.0 - ya) + yb;
        double ratio = ya * denomr;
        double temp = ratio * HEX_40000000;
        double ra = ratio + temp - temp;
        double rb = ratio - ra;
        temp = denom * HEX_40000000;
        double za = denom + temp - temp;
        double zb = denom - za;
        rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
        // Adjust for yb
        // numerator
        rb += yb * denomr;
        // denominator
        rb += -ya * denomb * denomr * denomr;
        // y = y - 1/y
        temp = ya + ra;
        yb += -(temp - ya - ra);
        ya = temp;
        temp = ya + rb;
        yb += -(temp - ya - rb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test277277() throws Throwable {
    double double0 = FastMath.sinh(0.0F);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute the hyperbolic sine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic sine of x
 */"
"public static double sinh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // sinh[z] = (exp(z) - exp(-z) / 2
    // for values of z larger than about 20,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return -0.5 * exp(-x);
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x > 0.25) {
        double[] hiPrec = new double[2];
        exp(x, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        double temp = ya * HEX_40000000;
        double yaa = ya + temp - temp;
        double yab = ya - yaa;
        // recip = 1/y
        double recip = 1.0 / ya;
        temp = recip * HEX_40000000;
        double recipa = recip + temp - temp;
        double recipb = recip - recipa;
        // Correct for rounding in division
        recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
        // Account for yb
        recipb += -yb * recip * recip;
        recipa = -recipa;
        recipb = -recipb;
        // y = y + 1/y
        temp = ya + recipa;
        yb += -(temp - ya - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -(temp - ya - recipb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    } else {
        double[] hiPrec = new double[2];
        expm1(x, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */
        double denom = 1.0 + ya;
        double denomr = 1.0 / denom;
        double denomb = -(denom - 1.0 - ya) + yb;
        double ratio = ya * denomr;
        double temp = ratio * HEX_40000000;
        double ra = ratio + temp - temp;
        double rb = ratio - ra;
        temp = denom * HEX_40000000;
        double za = denom + temp - temp;
        double zb = denom - za;
        rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
        // Adjust for yb
        // numerator
        rb += yb * denomr;
        // denominator
        rb += -ya * denomb * denomr * denomr;
        // y = y - 1/y
        temp = ya + ra;
        yb += -(temp - ya - ra);
        ya = temp;
        temp = ya + rb;
        yb += -(temp - ya - rb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test278278() throws Throwable {
    double double0 = FastMath.sinh((-1853.0));
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Compute the hyperbolic sine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic sine of x
 */"
"public static double sinh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // sinh[z] = (exp(z) - exp(-z) / 2
    // for values of z larger than about 20,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return -0.5 * exp(-x);
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x > 0.25) {
        double[] hiPrec = new double[2];
        exp(x, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        double temp = ya * HEX_40000000;
        double yaa = ya + temp - temp;
        double yab = ya - yaa;
        // recip = 1/y
        double recip = 1.0 / ya;
        temp = recip * HEX_40000000;
        double recipa = recip + temp - temp;
        double recipb = recip - recipa;
        // Correct for rounding in division
        recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
        // Account for yb
        recipb += -yb * recip * recip;
        recipa = -recipa;
        recipb = -recipb;
        // y = y + 1/y
        temp = ya + recipa;
        yb += -(temp - ya - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -(temp - ya - recipb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    } else {
        double[] hiPrec = new double[2];
        expm1(x, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */
        double denom = 1.0 + ya;
        double denomr = 1.0 / denom;
        double denomb = -(denom - 1.0 - ya) + yb;
        double ratio = ya * denomr;
        double temp = ratio * HEX_40000000;
        double ra = ratio + temp - temp;
        double rb = ratio - ra;
        temp = denom * HEX_40000000;
        double za = denom + temp - temp;
        double zb = denom - za;
        rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
        // Adjust for yb
        // numerator
        rb += yb * denomr;
        // denominator
        rb += -ya * denomb * denomr * denomr;
        // y = y - 1/y
        temp = ya + ra;
        yb += -(temp - ya - ra);
        ya = temp;
        temp = ya + rb;
        yb += -(temp - ya - rb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test279279() throws Throwable {
    double double0 = FastMath.sinh(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the hyperbolic sine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic sine of x
 */"
"public static double cosh(double x) {
    if (x != x) {
        return x;
    }
    // cosh[z] = (exp(z) + exp(-z))/2
    // for numbers with magnitude 20 or so,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(-x);
    }
    final double[] hiPrec = new double[2];
    if (x < 0.0) {
        x = -x;
    }
    exp(x, 0.0, hiPrec);
    double ya = hiPrec[0] + hiPrec[1];
    double yb = -(ya - hiPrec[0] - hiPrec[1]);
    double temp = ya * HEX_40000000;
    double yaa = ya + temp - temp;
    double yab = ya - yaa;
    // recip = 1/y
    double recip = 1.0 / ya;
    temp = recip * HEX_40000000;
    double recipa = recip + temp - temp;
    double recipb = recip - recipa;
    // Correct for rounding in division
    recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
    // Account for yb
    recipb += -yb * recip * recip;
    // y = y + 1/y
    temp = ya + recipa;
    yb += -(temp - ya - recipa);
    ya = temp;
    temp = ya + recipb;
    yb += -(temp - ya - recipb);
    ya = temp;
    double result = ya + yb;
    result *= 0.5;
    return result;
}","public void test280280() throws Throwable {
    double double0 = FastMath.cosh((-5.71041540961));
    assertEquals(150.99990288603493, double0, 0.01);
}","/**
 * Compute the hyperbolic cosine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic cosine of x
 */"
"public static double cosh(double x) {
    if (x != x) {
        return x;
    }
    // cosh[z] = (exp(z) + exp(-z))/2
    // for numbers with magnitude 20 or so,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(-x);
    }
    final double[] hiPrec = new double[2];
    if (x < 0.0) {
        x = -x;
    }
    exp(x, 0.0, hiPrec);
    double ya = hiPrec[0] + hiPrec[1];
    double yb = -(ya - hiPrec[0] - hiPrec[1]);
    double temp = ya * HEX_40000000;
    double yaa = ya + temp - temp;
    double yab = ya - yaa;
    // recip = 1/y
    double recip = 1.0 / ya;
    temp = recip * HEX_40000000;
    double recipa = recip + temp - temp;
    double recipb = recip - recipa;
    // Correct for rounding in division
    recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
    // Account for yb
    recipb += -yb * recip * recip;
    // y = y + 1/y
    temp = ya + recipa;
    yb += -(temp - ya - recipa);
    ya = temp;
    temp = ya + recipb;
    yb += -(temp - ya - recipb);
    ya = temp;
    double result = ya + yb;
    result *= 0.5;
    return result;
}","public void test281281() throws Throwable {
    double double0 = FastMath.cosh(0.0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Compute the hyperbolic cosine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic cosine of x
 */"
"public static double cosh(double x) {
    if (x != x) {
        return x;
    }
    // cosh[z] = (exp(z) + exp(-z))/2
    // for numbers with magnitude 20 or so,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(-x);
    }
    final double[] hiPrec = new double[2];
    if (x < 0.0) {
        x = -x;
    }
    exp(x, 0.0, hiPrec);
    double ya = hiPrec[0] + hiPrec[1];
    double yb = -(ya - hiPrec[0] - hiPrec[1]);
    double temp = ya * HEX_40000000;
    double yaa = ya + temp - temp;
    double yab = ya - yaa;
    // recip = 1/y
    double recip = 1.0 / ya;
    temp = recip * HEX_40000000;
    double recipa = recip + temp - temp;
    double recipb = recip - recipa;
    // Correct for rounding in division
    recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
    // Account for yb
    recipb += -yb * recip * recip;
    // y = y + 1/y
    temp = ya + recipa;
    yb += -(temp - ya - recipa);
    ya = temp;
    temp = ya + recipb;
    yb += -(temp - ya - recipb);
    ya = temp;
    double result = ya + yb;
    result *= 0.5;
    return result;
}","public void test282282() throws Throwable {
    double double0 = FastMath.cosh((-2222.9998F));
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Compute the hyperbolic cosine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic cosine of x
 */"
"public static double cosh(double x) {
    if (x != x) {
        return x;
    }
    // cosh[z] = (exp(z) + exp(-z))/2
    // for numbers with magnitude 20 or so,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(-x);
    }
    final double[] hiPrec = new double[2];
    if (x < 0.0) {
        x = -x;
    }
    exp(x, 0.0, hiPrec);
    double ya = hiPrec[0] + hiPrec[1];
    double yb = -(ya - hiPrec[0] - hiPrec[1]);
    double temp = ya * HEX_40000000;
    double yaa = ya + temp - temp;
    double yab = ya - yaa;
    // recip = 1/y
    double recip = 1.0 / ya;
    temp = recip * HEX_40000000;
    double recipa = recip + temp - temp;
    double recipb = recip - recipa;
    // Correct for rounding in division
    recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
    // Account for yb
    recipb += -yb * recip * recip;
    // y = y + 1/y
    temp = ya + recipa;
    yb += -(temp - ya - recipa);
    ya = temp;
    temp = ya + recipb;
    yb += -(temp - ya - recipb);
    ya = temp;
    double result = ya + yb;
    result *= 0.5;
    return result;
}","public void test283283() throws Throwable {
    double double0 = FastMath.cosh(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the hyperbolic cosine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic cosine of x
 */"
"public static double cosh(double x) {
    if (x != x) {
        return x;
    }
    // cosh[z] = (exp(z) + exp(-z))/2
    // for numbers with magnitude 20 or so,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(-x);
    }
    final double[] hiPrec = new double[2];
    if (x < 0.0) {
        x = -x;
    }
    exp(x, 0.0, hiPrec);
    double ya = hiPrec[0] + hiPrec[1];
    double yb = -(ya - hiPrec[0] - hiPrec[1]);
    double temp = ya * HEX_40000000;
    double yaa = ya + temp - temp;
    double yab = ya - yaa;
    // recip = 1/y
    double recip = 1.0 / ya;
    temp = recip * HEX_40000000;
    double recipa = recip + temp - temp;
    double recipb = recip - recipa;
    // Correct for rounding in division
    recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
    // Account for yb
    recipb += -yb * recip * recip;
    // y = y + 1/y
    temp = ya + recipa;
    yb += -(temp - ya - recipa);
    ya = temp;
    temp = ya + recipb;
    yb += -(temp - ya - recipb);
    ya = temp;
    double result = ya + yb;
    result *= 0.5;
    return result;
}","public void test284284() throws Throwable {
    double double0 = FastMath.cosh(2.113946677051906E252);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Compute the hyperbolic cosine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic cosine of x
 */"
"public static double toRadians(double x) {
    if (Double.isInfinite(x) || x == 0.0) {
        // Matches +/- 0.0; return correct sign
        return x;
    }
    // These are PI/180 split into high and low order bits
    final double facta = 0.01745329052209854;
    final double factb = 1.997844754509471E-9;
    double xa = doubleHighPart(x);
    double xb = x - xa;
    double result = xb * factb + xb * facta + xa * factb + xa * facta;
    if (result == 0) {
        // ensure correct sign if calculation underflows
        result = result * x;
    }
    return result;
}","public void test285285() throws Throwable {
    double double0 = FastMath.toRadians(0.9553693136063989);
    assertEquals(0.016674340094949922, double0, 0.01);
}","/**
 *  Convert degrees to radians, with error of less than 0.5 ULP
 *  @param x angle in degrees
 *  @return x converted into radians
 */"
"public static double random() {
    return Math.random();
}","public void test286286() throws Throwable {
    double double0 = FastMath.random();
    double double1 = FastMath.random();
    assertNotEquals(double1, double0, 0.01);
}","/**
 * Returns a pseudo-random number between 0.0 and 1.0.
 * <p><b>Note:</b> this implementation currently delegates to {@link Math#random}
 * @return a random number between 0.0 and 1.0
 */"
"public static int getExponent(final double d) {
    return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
}","public void test287287() throws Throwable {
    int int0 = FastMath.getExponent((-473.29));
    assertEquals(8, int0);
}","/**
 * Return the exponent of a double number, removing the bias.
 * <p>
 * For double numbers of the form 2<sup>x</sup>, the unbiased
 * exponent is exactly x.
 * </p>
 * @param d number from which exponent is requested
 * @return exponent for d in IEEE754 representation, without bias
 */"
"public static double cos(double x) {
    int quadrant = 0;
    /* Take absolute value of the input */
    double xa = x;
    if (x < 0) {
        xa = -xa;
    }
    if (xa != xa || xa == Double.POSITIVE_INFINITY) {
        return Double.NaN;
    }
    /* Perform any argument reduction */
    double xb = 0;
    if (xa > 3294198.0) {
        // PI * (2**20)
        // Argument too big for CodyWaite reduction.  Must use
        // PayneHanek.
        double[] reduceResults = new double[3];
        reducePayneHanek(xa, reduceResults);
        quadrant = ((int) reduceResults[0]) & 3;
        xa = reduceResults[1];
        xb = reduceResults[2];
    } else if (xa > 1.5707963267948966) {
        final CodyWaite cw = new CodyWaite(xa, xb);
        quadrant = cw.getK() & 3;
        xa = cw.getRemA();
        xb = cw.getRemB();
    }
    //if (negative)
    //  quadrant = (quadrant + 2) % 4;
    switch(quadrant) {
        case 0:
            return cosQ(xa, xb);
        case 1:
            return -sinQ(xa, xb);
        case 2:
            return -cosQ(xa, xb);
        case 3:
            return sinQ(xa, xb);
        default:
            return Double.NaN;
    }
}","public void test288288() throws Throwable {
    double double0 = FastMath.cos(0L);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Cosine function.
 *
 * @param x Argument.
 * @return cos(x)
 */"
"public static double log(double base, double x) {
    return log(x) / log(base);
}","public void test289289() throws Throwable {
    double double0 = FastMath.log(592.5416056, 3.683043641790553E-251);
    assertEquals((-90.32065877837496), double0, 0.01);
}","/**
 * Computes the <a href=""http://mathworld.wolfram.com/Logarithm.html"">
 * logarithm</a> in a given base.
 *
 * Returns {@code NaN} if either argument is negative.
 * If {@code base} is 0 and {@code x} is positive, 0 is returned.
 * If {@code base} is positive and {@code x} is 0,
 * {@code Double.NEGATIVE_INFINITY} is returned.
 * If both arguments are 0, the result is {@code NaN}.
 *
 * @param base Base of the logarithm, must be greater than 0.
 * @param x Argument, must be greater than 0.
 * @return the value of the logarithm, i.e. the number {@code y} such that
 * <code>base<sup>y</sup> = x</code>.
 * @since 1.2 (previously in {@code MathUtils}, moved as of version 3.0)
 */"
"public static int getExponent(final float f) {
    return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
}","public void test290290() throws Throwable {
    int int0 = FastMath.getExponent(0.0F);
    assertEquals((-127), int0);
}","/**
 * Return the exponent of a float number, removing the bias.
 * <p>
 * For float numbers of the form 2<sup>x</sup>, the unbiased
 * exponent is exactly x.
 * </p>
 * @param f number from which exponent is requested
 * @return exponent for d in IEEE754 representation, without bias
 */"
"public static void main(String[] a) {
    PrintStream out = System.out;
    FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);
    FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);
    FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);
    FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);
    FastMathCalc.printarray(out, ""LN_MANT"", LN_MANT_LEN, lnMant.LN_MANT);
    FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);
    FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);
    FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);
    FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);
    FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);
    FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);
}","public void test291291() throws Throwable {
    String[] stringArray0 = new String[2];
    FastMath.main(stringArray0);
    // Undeclared exception!
    FastMath.main(stringArray0);
}","/**
 * Print out contents of arrays, and check the length.
 * <p>used to generate the preset arrays originally.</p>
 * @param a unused
 */"
"public static double sinh(double x) {
    boolean negate = false;
    if (x != x) {
        return x;
    }
    // sinh[z] = (exp(z) - exp(-z) / 2
    // for values of z larger than about 20,
    // exp(-z) can be ignored in comparison with exp(z)
    if (x > 20) {
        // Avoid overflow (MATH-905).
        return 0.5 * exp(x);
    }
    if (x < -20) {
        // Avoid overflow (MATH-905).
        return -0.5 * exp(-x);
    }
    if (x == 0) {
        return x;
    }
    if (x < 0.0) {
        x = -x;
        negate = true;
    }
    double result;
    if (x > 0.25) {
        double[] hiPrec = new double[2];
        exp(x, 0.0, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        double temp = ya * HEX_40000000;
        double yaa = ya + temp - temp;
        double yab = ya - yaa;
        // recip = 1/y
        double recip = 1.0 / ya;
        temp = recip * HEX_40000000;
        double recipa = recip + temp - temp;
        double recipb = recip - recipa;
        // Correct for rounding in division
        recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
        // Account for yb
        recipb += -yb * recip * recip;
        recipa = -recipa;
        recipb = -recipb;
        // y = y + 1/y
        temp = ya + recipa;
        yb += -(temp - ya - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -(temp - ya - recipb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    } else {
        double[] hiPrec = new double[2];
        expm1(x, hiPrec);
        double ya = hiPrec[0] + hiPrec[1];
        double yb = -(ya - hiPrec[0] - hiPrec[1]);
        /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */
        double denom = 1.0 + ya;
        double denomr = 1.0 / denom;
        double denomb = -(denom - 1.0 - ya) + yb;
        double ratio = ya * denomr;
        double temp = ratio * HEX_40000000;
        double ra = ratio + temp - temp;
        double rb = ratio - ra;
        temp = denom * HEX_40000000;
        double za = denom + temp - temp;
        double zb = denom - za;
        rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
        // Adjust for yb
        // numerator
        rb += yb * denomr;
        // denominator
        rb += -ya * denomb * denomr * denomr;
        // y = y - 1/y
        temp = ya + ra;
        yb += -(temp - ya - ra);
        ya = temp;
        temp = ya + rb;
        yb += -(temp - ya - rb);
        ya = temp;
        result = ya + yb;
        result *= 0.5;
    }
    if (negate) {
        result = -result;
    }
    return result;
}","public void test292292() throws Throwable {
    double double0 = FastMath.sinh(273L);
    assertEquals(1.8254231919310378E118, double0, 0.01);
}","/**
 * Compute the hyperbolic sine of a number.
 * @param x number on which evaluation is done
 * @return hyperbolic sine of x
 */"
"public static double nextUp(final double a) {
    return nextAfter(a, Double.POSITIVE_INFINITY);
}","public void test293293() throws Throwable {
    double double0 = FastMath.nextUp((double) 0.0F);
    assertEquals(4.9E-324, double0, 0.01);
}","/**
 * Compute next number towards positive infinity.
 * @param a number to which neighbor should be computed
 * @return neighbor of a towards positive infinity
 */"
"public static double atan(double x) {
    return atan(x, 0.0, false);
}","public void test294294() throws Throwable {
    double double0 = FastMath.atan((-1205.0));
    assertEquals((-1.5699664514667342), double0, 0.01);
}","/**
 * Arctangent function
 *  @param x a number
 *  @return atan(x)
 */"
"public static double acosh(final double a) {
    return FastMath.log(a + FastMath.sqrt(a * a - 1));
}","public void test295295() throws Throwable {
    double double0 = FastMath.acosh(0.036);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Compute the inverse hyperbolic cosine of a number.
 * @param a number on which evaluation is done
 * @return inverse hyperbolic cosine of a
 */"
"public static double expm1(double x) {
    return expm1(x, null);
}","public void test296296() throws Throwable {
    double double0 = FastMath.expm1(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Compute exp(x) - 1
 * @param x number to compute shifted exponential
 * @return exp(x) - 1
 */"
"public static int round(final float x) {
    return (int) floor(x + 0.5f);
}","public void test297297() throws Throwable {
    int int0 = FastMath.round((-1.0F));
    assertEquals((-1), int0);
}","/**
 * Get the closest int to x.
 * @param x number from which closest int is requested
 * @return closest int to x
 */"
"public static long round(double x) {
    return (long) floor(x + 0.5);
}","public void test298298() throws Throwable {
    long long0 = FastMath.round(849.5716377);
    assertEquals(850L, long0);
}","/**
 * Get the closest long to x.
 * @param x number from which closest long is requested
 * @return closest long to x
 */"
