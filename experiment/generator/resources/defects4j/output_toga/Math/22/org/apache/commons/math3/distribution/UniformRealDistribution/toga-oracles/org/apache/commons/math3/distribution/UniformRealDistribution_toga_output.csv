project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-675.9794592268), 0.0, 0.0);
    double double0 = uniformRealDistribution0.sample();
    assertEquals((-65.82027761917747), double0, 0.01);
}",0,
project,0,test01,"public void test01() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-675.9794592268), 0.0, 0.0);
    double double0 = uniformRealDistribution0.sample();
    assertEquals(0.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
}",0,
project,0,test12,"public void test12() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
    assertTrue(uniformRealDistribution0.isSupportConnected());
}",0,assertTrue(uniformRealDistribution0.isSupportConnected())
project,0,test13,"public void test13() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
    assertEquals(1.0E-6, double0, 0.01);
}",0,
project,0,test14,"public void test14() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
    assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test15,"public void test15() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
    assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
}",0,
project,0,test16,"public void test16() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
    assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01);
}",0,
project,0,test17,"public void test17() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
    assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
}",0,
project,0,test28,"public void test28() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
    assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
}",0,
project,0,test29,"public void test29() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
    assertFalse(boolean0);
}",0,
project,0,test210,"public void test210() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
    assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test311,"public void test311() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
    assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01);
}",0,
project,0,test312,"public void test312() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test313,"public void test313() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
    assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
}",0,
project,0,test414,"public void test414() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = null;
    try {
        uniformRealDistribution0 = new UniformRealDistribution(223.0646342768073, 223.0646342768073);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // lower bound (223.065) must be strictly less than upper bound (223.065)
        //
        verifyException(""org.apache.commons.math3.distribution.UniformRealDistribution"", e);
    }
}",0,
project,0,test515,"public void test515() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.density((-1442.257006783594));
    assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test516,"public void test516() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.density((-1442.257006783594));
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test517,"public void test517() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.density((-1442.257006783594));
    assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
}",0,
project,0,test618,"public void test618() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.density(0.0);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test619,"public void test619() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
    double double0 = uniformRealDistribution0.density(0.0);
    assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
}",0,
project,0,test720,"public void test720() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-1442.257006783594), 0.08333333333333333, 121.928);
    double double0 = uniformRealDistribution0.density(1.0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test721,"public void test721() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-1442.257006783594), 0.08333333333333333, 121.928);
    double double0 = uniformRealDistribution0.density(1.0);
    assertEquals((-721.0868367251304), uniformRealDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test822,"public void test822() throws Throwable {
    UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-675.9794592268), 0.0, 0.0);
    uniformRealDistribution0.probability(2687.229247, 2687.229247);
    assertEquals((-337.9897296134), uniformRealDistribution0.getNumericalMean(), 0.01);
}",0,
