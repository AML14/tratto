project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 0.0);
    assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test001,"public void test001() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 0.0);
    double double0 = fDistribution0.sample();
    assertEquals(4.181308446960345, double0, 0.01);
}",0,
project,0,test002,"public void test002() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 0.0);
    double double0 = fDistribution0.sample();
    assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01);
}",1,
project,0,test013,"public void test013() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4670.7025729, 4670.7025729, 4670.7025729);
    double double0 = fDistribution0.probability((-1534.45348030732), (-1534.45348030732));
    assertEquals(4670.7025729, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test014,"public void test014() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4670.7025729, 4670.7025729, 4670.7025729);
    double double0 = fDistribution0.probability((-1534.45348030732), (-1534.45348030732));
    assertEquals(0.0, double0, 0.01);
}",1,
project,0,test015,"public void test015() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4670.7025729, 4670.7025729, 4670.7025729);
    double double0 = fDistribution0.probability((-1534.45348030732), (-1534.45348030732));
    assertEquals(1.0004283845391242, fDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test026,"public void test026() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2163.44333240904, 8.319947089683576E-278);
    double double0 = fDistribution0.density(1.681278956582695E-9);
    assertEquals(2.4742910916531735E-269, double0, 0.01);
}",0,
project,0,test037,"public void test037() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.7534012237555307E-252, 1136.7353534, 0.0);
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals(1.7534012237555307E-252, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test038,"public void test038() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.7534012237555307E-252, 1136.7353534, 0.0);
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test039,"public void test039() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.7534012237555307E-252, 1136.7353534, 0.0);
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals(1.0017625255034202, fDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test0410,"public void test0410() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.5, 0.5, Double.POSITIVE_INFINITY);
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test0411,"public void test0411() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.5, 0.5, Double.POSITIVE_INFINITY);
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test0412,"public void test0412() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.5, 0.5, Double.POSITIVE_INFINITY);
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}",0,
project,0,test0513,"public void test0513() throws Throwable {
    Well512a well512a0 = new Well512a();
    FDistribution fDistribution0 = new FDistribution(well512a0, 1.6455042362213135, 1.6455042362213135, (-1774.0));
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals(1.6455042362213135, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test0514,"public void test0514() throws Throwable {
    Well512a well512a0 = new Well512a();
    FDistribution fDistribution0 = new FDistribution(well512a0, 1.6455042362213135, 1.6455042362213135, (-1774.0));
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals(1.6455042362213135, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test0515,"public void test0515() throws Throwable {
    Well512a well512a0 = new Well512a();
    FDistribution fDistribution0 = new FDistribution(well512a0, 1.6455042362213135, 1.6455042362213135, (-1774.0));
    double double0 = fDistribution0.getSolverAbsoluteAccuracy();
    assertEquals((-1774.0), double0, 0.01);
}",0,
project,0,test0616,"public void test0616() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(3614.0, 3614.0, 3614.0);
    double double0 = fDistribution0.getNumericalVariance();
    assertEquals(0.0011089537042452693, double0, 0.01);
}",0,
project,0,test0717,"public void test0717() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(3614.0, 3614.0, 3614.0);
    double double0 = fDistribution0.density(3614.0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test0818,"public void test0818() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2163.44333240904, 8.319947089683576E-278);
    double double0 = fDistribution0.cumulativeProbability(8.319947089683576E-278);
    assertEquals((-7.038813976123492E-14), double0, 0.01);
}",0,
project,0,test0919,"public void test0919() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.71390848833098E-15, 1592.049052891426, 3158.098);
    double double0 = fDistribution0.calculateNumericalVariance();
    assertEquals(1.1713341893901908E15, double0, 0.01);
}",0,
project,0,test1020,"public void test1020() throws Throwable {
    Well44497a well44497a0 = new Well44497a(0);
    FDistribution fDistribution0 = new FDistribution(well44497a0, 2602.553, 9.994400500679653E270, 0);
    // Undeclared exception!
    try {
        fDistribution0.cumulativeProbability(2602.553);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // illegal state: Continued fraction diverged to NaN for value 1
        //
        verifyException(""org.apache.commons.math3.util.ContinuedFraction"", e);
    }
}",0,
project,0,test1121,"public void test1121() throws Throwable {
    FDistribution fDistribution0 = null;
    try {
        fDistribution0 = new FDistribution((-368), (-368), (-368));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // degrees of freedom (-368)
        //
        verifyException(""org.apache.commons.math3.distribution.FDistribution"", e);
    }
}",0,
project,0,test1222,"public void test1222() throws Throwable {
    int[] intArray0 = new int[9];
    Well512a well512a0 = new Well512a(intArray0);
    FDistribution fDistribution0 = new FDistribution(well512a0, 920, 1.0, 880.9);
    double double0 = fDistribution0.getNumericalMean();
    assertEquals(920.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1223,"public void test1223() throws Throwable {
    int[] intArray0 = new int[9];
    Well512a well512a0 = new Well512a(intArray0);
    FDistribution fDistribution0 = new FDistribution(well512a0, 920, 1.0, 880.9);
    double double0 = fDistribution0.getNumericalMean();
    assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1224,"public void test1224() throws Throwable {
    int[] intArray0 = new int[9];
    Well512a well512a0 = new Well512a(intArray0);
    FDistribution fDistribution0 = new FDistribution(well512a0, 920, 1.0, 880.9);
    double double0 = fDistribution0.getNumericalMean();
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test1325,"public void test1325() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.71390848833098E-15, 1592.049052891426, 3158.098);
    double double0 = fDistribution0.getNumericalMean();
    assertEquals(1.001257822830285, double0, 0.01);
}",0,
project,0,test1326,"public void test1326() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.71390848833098E-15, 1592.049052891426, 3158.098);
    double double0 = fDistribution0.getNumericalMean();
    assertEquals(1.71390848833098E-15, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1427,"public void test1427() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9, 3.8445667684706366E98);
    double double0 = fDistribution0.cumulativeProbability((double) 0L);
    assertEquals(1.0E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1428,"public void test1428() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9, 3.8445667684706366E98);
    double double0 = fDistribution0.cumulativeProbability((double) 0L);
    assertEquals(1.0E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1429,"public void test1429() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9, 3.8445667684706366E98);
    double double0 = fDistribution0.cumulativeProbability((double) 0L);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test1530,"public void test1530() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9, 3.8445667684706366E98);
    double double0 = fDistribution0.cumulativeProbability(3.8445667684706366E98);
    assertEquals(1.0E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1531,"public void test1531() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9, 3.8445667684706366E98);
    double double0 = fDistribution0.cumulativeProbability(3.8445667684706366E98);
    assertEquals(1.0E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1532,"public void test1532() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9, 3.8445667684706366E98);
    double double0 = fDistribution0.cumulativeProbability(3.8445667684706366E98);
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test1633,"public void test1633() throws Throwable {
    Well512a well512a0 = new Well512a(1446L);
    FDistribution fDistribution0 = null;
    try {
        fDistribution0 = new FDistribution(well512a0, 1446L, 0.0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // degrees of freedom (0)
        //
        verifyException(""org.apache.commons.math3.distribution.FDistribution"", e);
    }
}",0,
project,0,test1734,"public void test1734() throws Throwable {
    Well44497a well44497a0 = new Well44497a(2030L);
    FDistribution fDistribution0 = null;
    try {
        fDistribution0 = new FDistribution(well44497a0, (-692.1503867), 809.6254254765303, 2030L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // degrees of freedom (-692.15)
        //
        verifyException(""org.apache.commons.math3.distribution.FDistribution"", e);
    }
}",0,
project,0,test1835,"public void test1835() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.5, 0.5, Double.POSITIVE_INFINITY);
    boolean boolean0 = fDistribution0.isSupportConnected();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1836,"public void test1836() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.5, 0.5, Double.POSITIVE_INFINITY);
    boolean boolean0 = fDistribution0.isSupportConnected();
    assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1837,"public void test1837() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.5, 0.5, Double.POSITIVE_INFINITY);
    boolean boolean0 = fDistribution0.isSupportConnected();
    assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1938,"public void test1938() throws Throwable {
    Well19937a well19937a0 = new Well19937a();
    FDistribution fDistribution0 = new FDistribution(well19937a0, 703.131, 0.03360854089260101, 0.0);
    double double0 = fDistribution0.getSupportUpperBound();
    assertEquals(0.03360854089260101, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test1939,"public void test1939() throws Throwable {
    Well19937a well19937a0 = new Well19937a();
    FDistribution fDistribution0 = new FDistribution(well19937a0, 703.131, 0.03360854089260101, 0.0);
    double double0 = fDistribution0.getSupportUpperBound();
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}",0,
project,0,test1940,"public void test1940() throws Throwable {
    Well19937a well19937a0 = new Well19937a();
    FDistribution fDistribution0 = new FDistribution(well19937a0, 703.131, 0.03360854089260101, 0.0);
    double double0 = fDistribution0.getSupportUpperBound();
    assertEquals(703.131, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2041,"public void test2041() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2163.44333240904, 8.319947089683576E-278);
    double double0 = fDistribution0.getDenominatorDegreesOfFreedom();
    assertEquals(2163.44333240904, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2042,"public void test2042() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2163.44333240904, 8.319947089683576E-278);
    double double0 = fDistribution0.getDenominatorDegreesOfFreedom();
    assertEquals(8.319947089683576E-278, double0, 0.01);
}",0,
project,0,test2143,"public void test2143() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.71390848833098E-15, 1592.049052891426, 3158.098);
    double double0 = fDistribution0.getSupportLowerBound();
    assertEquals(1.71390848833098E-15, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2144,"public void test2144() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.71390848833098E-15, 1592.049052891426, 3158.098);
    double double0 = fDistribution0.getSupportLowerBound();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test2145,"public void test2145() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(1.71390848833098E-15, 1592.049052891426, 3158.098);
    double double0 = fDistribution0.getSupportLowerBound();
    assertEquals(1.001257822830285, fDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test2246,"public void test2246() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    double double0 = fDistribution0.getNumericalVariance();
    assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
}",0,
project,0,test2247,"public void test2247() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    double double0 = fDistribution0.getNumericalVariance();
    assertEquals(Double.NaN, double0, 0.01);
}",0,
project,0,test2248,"public void test2248() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    double double0 = fDistribution0.getNumericalVariance();
    double double1 = fDistribution0.inverseCumulativeProbability(0.17516371060289526);
    assertEquals(0.680370569229126, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2249,"public void test2249() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    double double0 = fDistribution0.getNumericalVariance();
    double double1 = fDistribution0.inverseCumulativeProbability(0.17516371060289526);
    assertEquals(0.0, double1, 0.01);
}",0,
project,0,test2250,"public void test2250() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    double double0 = fDistribution0.getNumericalVariance();
    double double1 = fDistribution0.inverseCumulativeProbability(0.17516371060289526);
    assertTrue(fDistribution0.isSupportConnected());
}",0,assertTrue(fDistribution0.isSupportConnected())
project,0,test2251,"public void test2251() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    double double0 = fDistribution0.getNumericalVariance();
    double double1 = fDistribution0.inverseCumulativeProbability(0.17516371060289526);
    assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test2352,"public void test2352() throws Throwable {
    FDistribution fDistribution0 = null;
    try {
        fDistribution0 = new FDistribution((-138.06673922534), (-138.06673922534));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // degrees of freedom (-138.067)
        //
        verifyException(""org.apache.commons.math3.distribution.FDistribution"", e);
    }
}",1,
project,0,test2453,"public void test2453() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4649.4633058815025, 4649.4633058815025, 4649.4633058815025);
    boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
    assertEquals(4649.4633058815025, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2454,"public void test2454() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4649.4633058815025, 4649.4633058815025, 4649.4633058815025);
    boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
    assertEquals(1.0004303422896248, fDistribution0.getNumericalMean(), 0.01);
}",0,
project,0,test2455,"public void test2455() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(4649.4633058815025, 4649.4633058815025, 4649.4633058815025);
    boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2556,"public void test2556() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
    assertEquals(0.680370569229126, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2557,"public void test2557() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
    assertEquals(0.680370569229126, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2558,"public void test2558() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(0.680370569229126, 0.680370569229126, 414.35759550097157);
    boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2659,"public void test2659() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
}",0,
project,0,test2660,"public void test2660() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    double double0 = fDistribution0.sample();
    assertEquals(10.10235431228486, double0, 0.01);
}",0,
project,0,test2661,"public void test2661() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    double double0 = fDistribution0.sample();
    double double1 = fDistribution0.getNumericalVariance();
    assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
}",1,
project,0,test2662,"public void test2662() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    double double0 = fDistribution0.sample();
    double double1 = fDistribution0.getNumericalVariance();
    assertEquals(Double.NaN, double1, 0.01);
}",0,
project,0,test2663,"public void test2663() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    double double0 = fDistribution0.sample();
    double double1 = fDistribution0.getNumericalVariance();
    assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2664,"public void test2664() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    double double0 = fDistribution0.sample();
    double double1 = fDistribution0.getNumericalVariance();
    assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
project,0,test2665,"public void test2665() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    double double0 = fDistribution0.sample();
    double double1 = fDistribution0.getNumericalVariance();
    assertTrue(fDistribution0.isSupportConnected());
}",0,assertTrue(fDistribution0.isSupportConnected())
project,0,test2766,"public void test2766() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    double double0 = fDistribution0.getNumeratorDegreesOfFreedom();
    assertEquals(2.0, double0, 0.01);
}",0,
project,0,test2767,"public void test2767() throws Throwable {
    FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 2.0);
    double double0 = fDistribution0.getNumeratorDegreesOfFreedom();
    assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
}",0,
