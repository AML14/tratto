focal_method,test_prefix,docstring
"public double density(final double[] vals) throws DimensionMismatchException {
    final int dim = getDimension();
    if (vals.length != dim) {
        throw new DimensionMismatchException(vals.length, dim);
    }
    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals);
}","public void test00() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 2.6197411946856397E-8;
    double[][] doubleArray1 = new double[1][1];
    doubleArray1[0] = doubleArray0;
    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
    double double0 = multivariateNormalDistribution0.density(doubleArray0);
    assertArrayEquals(new double[] { 2.6197411946856397E-8 }, doubleArray0, 0.01);
}","/**
 * {@inheritDoc}
 */"
"int getColumnDimension();","public void test12() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 2.6197411946856397E-8;
    double[][] doubleArray1 = new double[1][1];
    doubleArray1[0] = doubleArray0;
    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
    RealMatrix realMatrix0 = multivariateNormalDistribution0.getCovariances();
    assertEquals(1, realMatrix0.getColumnDimension());
}","/**
 * Returns the number of columns in the matrix.
 *
 * @return columnDimension
 */"
"public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException {
    this(new Well19937c(), means, covariances);
}","public void test23() throws Throwable {
    double[][] doubleArray0 = new double[6][7];
    MultivariateNormalDistribution multivariateNormalDistribution0 = null;
    try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0[0], doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 6 != 7
        //
        verifyException(""org.apache.commons.math3.distribution.MultivariateNormalDistribution"", e);
    }
}","/**
 * Creates a multivariate normal distribution with the given mean vector and
 * covariance matrix.
 * <br/>
 * The number of dimensions is equal to the length of the mean vector
 * and to the number of rows and columns of the covariance matrix.
 * It is frequently written as ""p"" in formulae.
 *
 * @param means Vector of means.
 * @param covariances Covariance matrix.
 * @throws DimensionMismatchException if the arrays length are
 * inconsistent.
 * @throws SingularMatrixException if the eigenvalue decomposition cannot
 * be performed on the provided covariance matrix.
 * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is
 * negative.
 */"
"public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException {
    this(new Well19937c(), means, covariances);
}","public void test34() throws Throwable {
    double[][] doubleArray0 = new double[1][7];
    double[] doubleArray1 = new double[1];
    MultivariateNormalDistribution multivariateNormalDistribution0 = null;
    try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 7 != 1
        //
        verifyException(""org.apache.commons.math3.distribution.MultivariateNormalDistribution"", e);
    }
}","/**
 * Creates a multivariate normal distribution with the given mean vector and
 * covariance matrix.
 * <br/>
 * The number of dimensions is equal to the length of the mean vector
 * and to the number of rows and columns of the covariance matrix.
 * It is frequently written as ""p"" in formulae.
 *
 * @param means Vector of means.
 * @param covariances Covariance matrix.
 * @throws DimensionMismatchException if the arrays length are
 * inconsistent.
 * @throws SingularMatrixException if the eigenvalue decomposition cannot
 * be performed on the provided covariance matrix.
 * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is
 * negative.
 */"
"public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException {
    this(new Well19937c(), means, covariances);
}","public void test45() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-2073.87779897508);
    double[][] doubleArray1 = new double[1][9];
    doubleArray1[0] = doubleArray0;
    MultivariateNormalDistribution multivariateNormalDistribution0 = null;
    try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // -2,073.878 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -2,073.878 at index 0
        //
        verifyException(""org.apache.commons.math3.distribution.MultivariateNormalDistribution"", e);
    }
}","/**
 * Creates a multivariate normal distribution with the given mean vector and
 * covariance matrix.
 * <br/>
 * The number of dimensions is equal to the length of the mean vector
 * and to the number of rows and columns of the covariance matrix.
 * It is frequently written as ""p"" in formulae.
 *
 * @param means Vector of means.
 * @param covariances Covariance matrix.
 * @throws DimensionMismatchException if the arrays length are
 * inconsistent.
 * @throws SingularMatrixException if the eigenvalue decomposition cannot
 * be performed on the provided covariance matrix.
 * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is
 * negative.
 */"
"public double density(final double[] vals) throws DimensionMismatchException {
    final int dim = getDimension();
    if (vals.length != dim) {
        throw new DimensionMismatchException(vals.length, dim);
    }
    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals);
}","public void test56() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 2.6197411946856397E-8;
    double[][] doubleArray1 = new double[1][1];
    doubleArray1[0] = doubleArray0;
    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
    double[] doubleArray2 = new double[2];
    try {
        multivariateNormalDistribution0.density(doubleArray2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 2 != 1
        //
        verifyException(""org.apache.commons.math3.distribution.MultivariateNormalDistribution"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"public double[] getStandardDeviations() {
    final int dim = getDimension();
    final double[] std = new double[dim];
    final double[][] s = covarianceMatrix.getData();
    for (int i = 0; i < dim; i++) {
        std[i] = FastMath.sqrt(s[i][i]);
    }
    return std;
}","public void test67() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 2.6197411946856397E-8;
    double[][] doubleArray1 = new double[1][1];
    doubleArray1[0] = doubleArray0;
    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
    double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();
    assertArrayEquals(new double[] { 1.618561458420915E-4 }, doubleArray2, 0.01);
}","/**
 * Gets the square root of each element on the diagonal of the covariance
 * matrix.
 *
 * @return the standard deviations.
 */"
"public double[] sample() {
    final int dim = getDimension();
    final double[] normalVals = new double[dim];
    for (int i = 0; i < dim; i++) {
        normalVals[i] = random.nextGaussian();
    }
    final double[] vals = samplingMatrix.operate(normalVals);
    for (int i = 0; i < dim; i++) {
        vals[i] += means[i];
    }
    return vals;
}","public void test78() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 2.6197411946856397E-8;
    double[][] doubleArray1 = new double[1][1];
    doubleArray1[0] = doubleArray0;
    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
    double[] doubleArray2 = multivariateNormalDistribution0.sample();
    assertArrayEquals(new double[] { 1.277162837685977E-4 }, doubleArray2, 0.01);
}","/**
 * {@inheritDoc}
 */"
