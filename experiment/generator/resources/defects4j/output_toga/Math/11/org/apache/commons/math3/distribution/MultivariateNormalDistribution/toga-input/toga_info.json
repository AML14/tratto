{
  "test12" : {
    "methodSignature" : "int getColumnDimension()",
    "methodName" : "getColumnDimension",
    "className" : "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 2.6197411946856397E-8;\n    double[][] doubleArray1 = new double[1][1];\n    doubleArray1[0] = doubleArray0;\n    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);\n    RealMatrix realMatrix0 = multivariateNormalDistribution0.getCovariances();\n    realMatrix0.getColumnDimension();\n}",
    "testName" : "test12"
  },
  "test23" : {
    "methodSignature" : "public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException",
    "methodName" : "MultivariateNormalDistribution",
    "className" : "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    double[][] doubleArray0 = new double[6][7];\n    MultivariateNormalDistribution multivariateNormalDistribution0 = null;\n    multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0[0], doubleArray0);\n}",
    "testName" : "test23"
  },
  "test34" : {
    "methodSignature" : "public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException",
    "methodName" : "MultivariateNormalDistribution",
    "className" : "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    double[][] doubleArray0 = new double[1][7];\n    double[] doubleArray1 = new double[1];\n    MultivariateNormalDistribution multivariateNormalDistribution0 = null;\n    multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1, doubleArray0);\n}",
    "testName" : "test34"
  },
  "test45" : {
    "methodSignature" : "public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException",
    "methodName" : "MultivariateNormalDistribution",
    "className" : "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = (-2073.87779897508);\n    double[][] doubleArray1 = new double[1][9];\n    doubleArray1[0] = doubleArray0;\n    MultivariateNormalDistribution multivariateNormalDistribution0 = null;\n    multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);\n}",
    "testName" : "test45"
  },
  "test56" : {
    "methodSignature" : "public double density(final double[] vals) throws DimensionMismatchException",
    "methodName" : "density",
    "className" : "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 2.6197411946856397E-8;\n    double[][] doubleArray1 = new double[1][1];\n    doubleArray1[0] = doubleArray0;\n    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);\n    double[] doubleArray2 = new double[2];\n    multivariateNormalDistribution0.density(doubleArray2);\n}",
    "testName" : "test56"
  },
  "test67" : {
    "methodSignature" : "public double[] getStandardDeviations()",
    "methodName" : "getStandardDeviations",
    "className" : "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 2.6197411946856397E-8;\n    double[][] doubleArray1 = new double[1][1];\n    doubleArray1[0] = doubleArray0;\n    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);\n    double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();\n}",
    "testName" : "test67"
  },
  "test78" : {
    "methodSignature" : "public double[] sample()",
    "methodName" : "sample",
    "className" : "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test78() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 2.6197411946856397E-8;\n    double[][] doubleArray1 = new double[1][1];\n    doubleArray1[0] = doubleArray0;\n    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);\n    double[] doubleArray2 = multivariateNormalDistribution0.sample();\n}",
    "testName" : "test78"
  },
  "test00" : {
    "methodSignature" : "public double density(final double[] vals) throws DimensionMismatchException",
    "methodName" : "density",
    "className" : "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    double[] doubleArray0 = new double[1];\n    doubleArray0[0] = 2.6197411946856397E-8;\n    double[][] doubleArray1 = new double[1][1];\n    doubleArray1[0] = doubleArray0;\n    MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);\n    double double0 = multivariateNormalDistribution0.density(doubleArray0);\n}",
    "testName" : "test00"
  }
}