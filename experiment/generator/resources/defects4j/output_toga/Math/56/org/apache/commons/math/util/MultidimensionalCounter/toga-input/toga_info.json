{
  "test1212" : {
    "methodSignature" : "public int[] getCounts(int index)",
    "methodName" : "getCounts",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 1;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.getCounts(1);\n}",
    "testName" : "test1212"
  },
  "test3237" : {
    "methodSignature" : "public MultidimensionalCounter(int... size)",
    "methodName" : "MultidimensionalCounter",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3237() throws Throwable {\n    int[] intArray0 = new int[5];\n    intArray0[0] = 0;\n    intArray0[1] = 2128;\n    intArray0[2] = 565;\n    intArray0[3] = (-1505);\n    intArray0[4] = 874;\n    MultidimensionalCounter multidimensionalCounter0 = null;\n    multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n}",
    "testName" : "test3237"
  },
  "test1313" : {
    "methodSignature" : "public int getCount(int... c) throws OutOfRangeException",
    "methodName" : "getCount",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 3047;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    int[] intArray1 = new int[3];\n    intArray1[0] = 3047;\n    intArray1[1] = 3047;\n    intArray1[2] = 3047;\n    multidimensionalCounter0.getCount(intArray1);\n}",
    "testName" : "test1313"
  },
  "test3338" : {
    "methodSignature" : "public int getCount(int... c) throws OutOfRangeException",
    "methodName" : "getCount",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3338() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 3064;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    int[] intArray1 = new int[5];\n    intArray1[0] = 3064;\n    multidimensionalCounter0.getSizes();\n    intArray1[1] = 3064;\n    int int0 = 0;\n    multidimensionalCounter0.getCount(intArray0);\n}",
    "testName" : "test3338"
  },
  "test2424" : {
    "methodSignature" : "public MultidimensionalCounter(int... size)",
    "methodName" : "MultidimensionalCounter",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    int[] intArray0 = new int[0];\n    MultidimensionalCounter multidimensionalCounter0 = null;\n    multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public int[] getCounts(int index)",
    "methodName" : "getCounts",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    int[] intArray0 = new int[3];\n    intArray0[0] = (-924);\n    int int0 = 1189;\n    intArray0[1] = 1189;\n    intArray0[2] = (-1743);\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.getSizes();\n    multidimensionalCounter0.spliterator();\n    // Undeclared exception!\n    multidimensionalCounter0.getCounts(1189);\n}",
    "testName" : "test1010"
  },
  "test3035" : {
    "methodSignature" : "public MultidimensionalCounter(int... size)",
    "methodName" : "MultidimensionalCounter",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3035() throws Throwable {\n    int[] intArray0 = new int[5];\n    int int0 = 2083;\n    intArray0[0] = 2083;\n    intArray0[1] = 879;\n    intArray0[2] = 0;\n    intArray0[3] = 0;\n    intArray0[4] = 2047;\n    MultidimensionalCounter multidimensionalCounter0 = null;\n    multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n}",
    "testName" : "test3035"
  },
  "test1111" : {
    "methodSignature" : "public int[] getCounts(int index)",
    "methodName" : "getCounts",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 1;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.toString();\n    multidimensionalCounter0.getCounts(1);\n}",
    "testName" : "test1111"
  },
  "test3136" : {
    "methodSignature" : "public MultidimensionalCounter(int... size)",
    "methodName" : "MultidimensionalCounter",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3136() throws Throwable {\n    int[] intArray0 = new int[5];\n    intArray0[0] = 0;\n    intArray0[1] = 0;\n    intArray0[2] = (-1464);\n    intArray0[3] = 1495;\n    intArray0[4] = (-1);\n    MultidimensionalCounter multidimensionalCounter0 = null;\n    multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n}",
    "testName" : "test3136"
  },
  "test033" : {
    "methodSignature" : "public int getCount(int... c) throws OutOfRangeException",
    "methodName" : "getCount",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    int[] intArray0 = new int[2];\n    intArray0[0] = (-672);\n    intArray0[1] = (-672);\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.spliterator();\n    MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();\n    int[] intArray1 = multidimensionalCounter_Iterator0.getCounts();\n    multidimensionalCounter_Iterator0.hasNext();\n    multidimensionalCounter0.getCount(intArray1);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public int getCount(int... c) throws OutOfRangeException",
    "methodName" : "getCount",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    int[] intArray0 = new int[6];\n    intArray0[1] = (-529);\n    intArray0[1] = 12;\n    intArray0[2] = 787;\n    intArray0[3] = 0;\n    intArray0[4] = (-291);\n    int int0 = 0;\n    intArray0[5] = (-291);\n    int[] intArray1 = null;\n    int[] intArray2 = new int[4];\n    intArray2[0] = (-291);\n    intArray2[1] = (-291);\n    intArray2[2] = 787;\n    intArray2[3] = 787;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray2);\n    multidimensionalCounter0.getCount((int[]) null);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public int[] getCounts(int index)",
    "methodName" : "getCounts",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    int[] intArray0 = new int[1];\n    int int0 = 1860;\n    intArray0[0] = 1860;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    multidimensionalCounter0.forEach(consumer0);\n    multidimensionalCounter0.spliterator();\n    multidimensionalCounter0.spliterator();\n    Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    multidimensionalCounter0.toString();\n    multidimensionalCounter0.forEach(consumer1);\n    multidimensionalCounter0.getCounts(2690);\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public int getCount(int... c) throws OutOfRangeException",
    "methodName" : "getCount",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    int[] intArray0 = new int[7];\n    intArray0[0] = (-2014);\n    intArray0[1] = (-817);\n    intArray0[2] = 276;\n    intArray0[3] = (-1);\n    intArray0[4] = 840;\n    intArray0[5] = 1873;\n    intArray0[6] = (-3518);\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.iterator();\n    multidimensionalCounter0.spliterator();\n    multidimensionalCounter0.getCount(intArray0);\n}",
    "testName" : "test1616"
  },
  "test2728" : {
    "methodSignature" : "public int getSize()",
    "methodName" : "getSize",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    int[] intArray0 = new int[4];\n    intArray0[0] = 2454;\n    intArray0[1] = 113;\n    intArray0[2] = 3051;\n    intArray0[3] = 173;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();\n    boolean boolean0 = multidimensionalCounter_Iterator0.hasNext();\n    multidimensionalCounter0.getSize();\n}",
    "testName" : "test2728"
  },
  "test1717" : {
    "methodSignature" : "public int getCount(int... c) throws OutOfRangeException",
    "methodName" : "getCount",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    int[] intArray0 = new int[3];\n    intArray0[0] = (-4460);\n    intArray0[1] = (-1677);\n    intArray0[2] = 1900;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.getCount(intArray0);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    int[] intArray0 = new int[2];\n    intArray0[0] = (-483);\n    intArray0[1] = (-2744);\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.toString();\n}",
    "testName" : "test1414"
  },
  "test3439" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3439() throws Throwable {\n    int[] intArray0 = new int[2];\n    intArray0[0] = 1215;\n    intArray0[1] = 8388607;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.spliterator();\n    multidimensionalCounter0.getSize();\n    multidimensionalCounter0.getCounts(8388607);\n    multidimensionalCounter0.getDimension();\n    MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();\n    Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    multidimensionalCounter_Iterator0.getCounts();\n    multidimensionalCounter_Iterator0.getCounts();\n    multidimensionalCounter0.toString();\n}",
    "testName" : "test3439"
  },
  "test2525" : {
    "methodSignature" : "public MultidimensionalCounter(int... size)",
    "methodName" : "MultidimensionalCounter",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    int[] intArray0 = new int[6];\n    intArray0[0] = 0;\n    intArray0[1] = 750;\n    intArray0[2] = (-1);\n    intArray0[3] = 1;\n    intArray0[4] = 507;\n    intArray0[5] = 0;\n    MultidimensionalCounter multidimensionalCounter0 = null;\n    multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    int[] intArray0 = new int[3];\n    intArray0[0] = 35;\n    intArray0[1] = 1;\n    intArray0[2] = 1;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.getDimension();\n    multidimensionalCounter0.toString();\n}",
    "testName" : "test1515"
  },
  "test2627" : {
    "methodSignature" : "public int getSize()",
    "methodName" : "getSize",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2627() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 567;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    multidimensionalCounter0.forEach(consumer0);\n    multidimensionalCounter0.toString();\n    String string0 = multidimensionalCounter0.toString();\n    multidimensionalCounter0.getSize();\n}",
    "testName" : "test2627"
  },
  "test2626" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 567;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    multidimensionalCounter0.forEach(consumer0);\n    multidimensionalCounter0.toString();\n    String string0 = multidimensionalCounter0.toString();\n}",
    "testName" : "test2626"
  },
  "test2020" : {
    "methodSignature" : "public MultidimensionalCounter(int... size)",
    "methodName" : "MultidimensionalCounter",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    MultidimensionalCounter multidimensionalCounter0 = null;\n    multidimensionalCounter0 = new MultidimensionalCounter((int[]) null);\n}",
    "testName" : "test2020"
  },
  "test2832" : {
    "methodSignature" : "public int getSize()",
    "methodName" : "getSize",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2832() throws Throwable {\n    int[] intArray0 = new int[8];\n    intArray0[0] = (-322);\n    intArray0[1] = 127;\n    intArray0[2] = 412;\n    intArray0[3] = 1362;\n    intArray0[4] = (-1799);\n    intArray0[5] = (-1462);\n    intArray0[6] = 9958;\n    intArray0[7] = 1099;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    Integer integer0 = new Integer(127);\n    MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();\n    multidimensionalCounter_Iterator0.hasNext();\n    int[] intArray1 = multidimensionalCounter0.getCounts(182);\n    multidimensionalCounter0.getSize();\n}",
    "testName" : "test2832"
  },
  "test022" : {
    "methodSignature" : "public int getCount(int... c) throws OutOfRangeException",
    "methodName" : "getCount",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    int[] intArray0 = new int[2];\n    intArray0[0] = 2097;\n    intArray0[1] = 1383;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();\n    multidimensionalCounter0.getSize();\n    multidimensionalCounter0.getSizes();\n    MultidimensionalCounter.Iterator multidimensionalCounter_Iterator1 = multidimensionalCounter0.iterator();\n    multidimensionalCounter0.spliterator();\n    int[] intArray1 = multidimensionalCounter_Iterator1.getCounts();\n    int int0 = new Integer(1383);\n    multidimensionalCounter_Iterator0.hasNext();\n    multidimensionalCounter0.getCount(intArray1);\n}",
    "testName" : "test022"
  },
  "test2833" : {
    "methodSignature" : "public int[] getCounts(int index)",
    "methodName" : "getCounts",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2833() throws Throwable {\n    int[] intArray0 = new int[8];\n    intArray0[0] = (-322);\n    intArray0[1] = 127;\n    intArray0[2] = 412;\n    intArray0[3] = 1362;\n    intArray0[4] = (-1799);\n    intArray0[5] = (-1462);\n    intArray0[6] = 9958;\n    intArray0[7] = 1099;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    Integer integer0 = new Integer(127);\n    MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();\n    multidimensionalCounter_Iterator0.hasNext();\n    int[] intArray1 = multidimensionalCounter0.getCounts(182);\n}",
    "testName" : "test2833"
  },
  "test2934" : {
    "methodSignature" : "public int[] getCounts(int index)",
    "methodName" : "getCounts",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2934() throws Throwable {\n    int[] intArray0 = new int[2];\n    intArray0[0] = 2504;\n    intArray0[1] = 8;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.spliterator();\n    multidimensionalCounter0.getCounts((-4029));\n}",
    "testName" : "test2934"
  },
  "test1818" : {
    "methodSignature" : "public int getCount(int... c) throws OutOfRangeException",
    "methodName" : "getCount",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    int[] intArray0 = new int[1];\n    intArray0[0] = 188;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.getCount(intArray0);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public int getSize()",
    "methodName" : "getSize",
    "className" : "org.apache.commons.math.util.MultidimensionalCounter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    int[] intArray0 = new int[3];\n    intArray0[0] = (-757);\n    intArray0[1] = (-900);\n    intArray0[2] = 367;\n    MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);\n    multidimensionalCounter0.getSize();\n}",
    "testName" : "test1919"
  }
}