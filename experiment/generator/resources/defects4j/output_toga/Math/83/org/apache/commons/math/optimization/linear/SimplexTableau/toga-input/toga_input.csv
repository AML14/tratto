focal_method,test_prefix,docstring
"@Override
public int hashCode() {
    return Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables ^ numSlackVariables ^ numArtificialVariables ^ Double.valueOf(epsilon).hashCode() ^ f.hashCode() ^ constraints.hashCode() ^ tableau.hashCode();
}","public void test000() throws Throwable {
    Double[] doubleArray0 = new Double[2];
    Double double0 = new Double(513.0750256410704);
    doubleArray0[0] = double0;
    doubleArray0[1] = doubleArray0[0];
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, (double) doubleArray0[0]);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-759.7));
    simplexTableau0.hashCode();
}","/**
 * {@inheritDoc}
 */"
"@Override
public int hashCode() {
    return Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables ^ numSlackVariables ^ numArtificialVariables ^ Double.valueOf(epsilon).hashCode() ^ f.hashCode() ^ constraints.hashCode() ^ tableau.hashCode();
}","public void test011() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-863.928));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-863.928));
    simplexTableau0.numArtificialVariables = 599;
    simplexTableau0.hashCode();
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test022() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
    simplexTableau0.numArtificialVariables = 709;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test033() throws Throwable {
    double[] doubleArray0 = new double[8];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-4.9E-324));
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test044() throws Throwable {
    double[] doubleArray0 = new double[6];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-419.082772964));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-6090.2416236001));
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-419.082772964));
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test045() throws Throwable {
    double[] doubleArray0 = new double[6];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-419.082772964));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-6090.2416236001));
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-419.082772964));
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(simplexTableau1.equals((Object) simplexTableau0));
}","/**
 * {@inheritDoc}
 */"
"protected final void setEntry(final int row, final int column, final double value) {
    tableau.setEntry(row, column, value);
}","public void test056() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(0, 41, 0.0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (0, 41) in a 1x3 matrix
        //
        verifyException(""org.apache.commons.math.linear.Array2DRowRealMatrix"", e);
    }
}","/**
 * Set an entry of the tableau.
 * @param row row index
 * @param column column index
 * @param value for the entry
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test067() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-98.2341719));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
    simplexTableau0.divideRow(0, 1.0E-12);
    assertEquals(0, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"public double getValue() {
    return value;
}","public void test078() throws Throwable {
    double[] doubleArray0 = new double[7];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    GoalType goalType0 = GoalType.MAXIMIZE;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-1.0), relationship0, doubleArray0, 283.757928);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3.141592653589793);
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 * @return the stored value of the objective function
 */"
"public double getValue() {
    return value;
}","public void test089() throws Throwable {
    double[] doubleArray0 = new double[14];
    doubleArray0[6] = (-1.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    assertEquals((-1.0), realPointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 * @return the stored value of the objective function
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test0910() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(136);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, Double.NEGATIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    double[] doubleArray0 = new double[4];
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
    linkedList0.add(linearConstraint0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-780.8941922216237));
    assertEquals(136, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"public double getValue() {
    return value;
}","public void test1011() throws Throwable {
    double[] doubleArray0 = new double[8];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 338.4851419966);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
    RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
    assertEquals(338.4851419966, realPointValuePair0.getValue(), 0.01);
}","/**
 * Get the value of the objective function.
 * @return the stored value of the objective function
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test1112() throws Throwable {
    double[] doubleArray0 = new double[5];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, Double.NaN);
    simplexTableau0.subtractRow(0, 0, 0);
    assertEquals(5, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test1213() throws Throwable {
    double[] doubleArray0 = new double[5];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-597.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2388.3);
    simplexTableau0.setEntry(0, 0, (-262.66186058));
    assertEquals(5, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"protected final int getWidth() {
    return tableau.getColumnDimension();
}","public void test1314() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(31, 31);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
    RealVector realVector0 = openMapRealMatrix0.preMultiply((RealVector) openMapRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    int int0 = simplexTableau0.getWidth();
    assertEquals(33, int0);
}","/**
 * Get the width of the tableau.
 * @return width of the tableau
 */"
"protected final int getSlackVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables;
}","public void test1415() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1);
    RealVector realVector0 = openMapRealMatrix0.operate((RealVector) openMapRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, 1);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1);
    int int0 = simplexTableau0.getSlackVariableOffset();
    assertEquals(3, int0);
}","/**
 * Get the offset of the first slack variable.
 * @return offset of the first slack variable
 */"
"protected final int getRhsOffset() {
    return getWidth() - 1;
}","public void test1516() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(136);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, Double.NEGATIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    double[] doubleArray0 = new double[4];
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-780.8941922216237));
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
    int int0 = simplexTableau0.getRhsOffset();
    assertEquals(0, int0);
}","/**
 * Get the offset of the right hand side.
 * @return offset of the right hand side
 */"
"protected final int getRhsOffset() {
    return getWidth() - 1;
}","public void test1617() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
    int int0 = simplexTableau0.getRhsOffset();
    assertEquals((-1), int0);
}","/**
 * Get the offset of the right hand side.
 * @return offset of the right hand side
 */"
"protected final int getOriginalNumDecisionVariables() {
    return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
}","public void test1718() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2030.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2030.0);
    int int0 = simplexTableau0.getOriginalNumDecisionVariables();
    assertEquals(0, int0);
}","/**
 * Get the original number of decision variables.
 * @return original number of decision variables
 * @see #getNumDecisionVariables()
 */"
"protected final int getOriginalNumDecisionVariables() {
    return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
}","public void test1819() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(31, 31);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
    RealVector realVector0 = openMapRealMatrix0.preMultiply((RealVector) openMapRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    int int0 = simplexTableau0.getOriginalNumDecisionVariables();
    assertEquals(31, int0);
}","/**
 * Get the original number of decision variables.
 * @return original number of decision variables
 * @see #getNumDecisionVariables()
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test1920() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 800.08);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    int int0 = simplexTableau0.getNumVariables();
    assertEquals(0, int0);
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"protected final int getNumSlackVariables() {
    return numSlackVariables;
}","public void test2021() throws Throwable {
    double[] doubleArray0 = new double[14];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.0));
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    int int0 = simplexTableau0.getNumSlackVariables();
    assertEquals(1, int0);
}","/**
 * Get the number of slack variables.
 * @return number of slack variables
 */"
"protected final int getNumObjectiveFunctions() {
    return this.numArtificialVariables > 0 ? 2 : 1;
}","public void test2122() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1230.631363));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    int int0 = simplexTableau0.getNumObjectiveFunctions();
    assertEquals(1, int0);
}","/**
 * Get the number of objective functions in this tableau.
 * @return 2 for Phase 1.  1 for Phase 2.
 */"
"protected final int getNumDecisionVariables() {
    return numDecisionVariables;
}","public void test2223() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(136);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, Double.NEGATIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-780.8941922216237));
    int int0 = simplexTableau0.getNumDecisionVariables();
    assertEquals(137, int0);
}","/**
 * Get the number of decision variables.
 * <p>
 * If variables are not restricted to positive values, this will include 1
 * extra decision variable to represent the absolute value of the most
 * negative variable.
 * </p>
 * @return number of decision variables
 * @see #getOriginalNumDecisionVariables()
 */"
"protected final int getNumArtificialVariables() {
    return numArtificialVariables;
}","public void test2324() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2030.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 2030.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2030.0);
    int int0 = simplexTableau0.getNumArtificialVariables();
    assertEquals(1, int0);
}","/**
 * Get the number of artificial variables.
 * @return number of artificial variables
 */"
"protected final int getNumArtificialVariables() {
    return numArtificialVariables;
}","public void test2425() throws Throwable {
    GoalType goalType0 = GoalType.MAXIMIZE;
    double[] doubleArray0 = new double[6];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2168.447114332));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1435.0));
    simplexTableau0.numArtificialVariables = (-530);
    int int0 = simplexTableau0.getNumArtificialVariables();
    assertEquals((-530), int0);
}","/**
 * Get the number of artificial variables.
 * @return number of artificial variables
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test2627() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    double double0 = SimplexTableau.getInvertedCoeffiecientSum(arrayRealVector0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test2728() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = (-25.45853608588);
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(4);
    ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
    double double0 = SimplexTableau.getInvertedCoeffiecientSum(arrayRealVector1);
    assertEquals(25.45853608588, double0, 0.01);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test2829() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (-1173.760325);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
    OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
    RealVector realVector0 = openMapRealMatrix0.getRowVector(0);
    double double0 = SimplexTableau.getInvertedCoeffiecientSum(realVector0);
    assertEquals((-1377713.3005441055), double0, 0.01);
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected final int getHeight() {
    return tableau.getRowDimension();
}","public void test2930() throws Throwable {
    double[] doubleArray0 = new double[8];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 338.4851419966);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
    int int0 = simplexTableau0.getHeight();
    assertEquals(0, int0);
}","/**
 * Get the height of the tableau.
 * @return height of the tableau
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test3031() throws Throwable {
    double[] doubleArray0 = new double[3];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 10.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    double double0 = simplexTableau0.getEntry(0, 1);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test3132() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1.0E-12);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    double double0 = simplexTableau0.getEntry(1, 1);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test3233() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2030.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 2030.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2030.0);
    double double0 = simplexTableau0.getEntry(0, 0);
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected final double[][] getData() {
    return tableau.getData();
}","public void test3334() throws Throwable {
    double[] doubleArray0 = new double[8];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 338.4851419966);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
    simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
    double[][] doubleArray1 = simplexTableau0.getData();
    assertEquals(0, doubleArray1.length);
}","/**
 * Get the tableau data.
 * @return tableau data
 */"
"protected final int getArtificialVariableOffset() {
    return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;
}","public void test3435() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    int int0 = simplexTableau0.getArtificialVariableOffset();
    assertEquals(1, int0);
}","/**
 * Get the offset of the first artificial variable.
 * @return offset of the first artificial variable
 */"
"protected double[][] createTableau(final boolean maximize) {
    // create a matrix of the correct size
    List<LinearConstraint> constraints = getNormalizedConstraints();
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    double[][] matrix = new double[height][width];
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix[0][0] = -1;
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix[zIndex][zIndex] = maximize ? 1 : -1;
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
    matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
    if (!restrictToNonNegative) {
        matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
        // x-
        if (!restrictToNonNegative) {
            matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
        }
        // RHS
        matrix[row][width - 1] = constraint.getValue();
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix[row][getSlackVariableOffset() + slackVar++] = 1;
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix[row][getSlackVariableOffset() + slackVar++] = -1;
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
            matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
        }
    }
    return matrix;
}","public void test3536() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(31, 31);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
    RealVector realVector0 = openMapRealMatrix0.preMultiply((RealVector) openMapRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    double[][] doubleArray0 = simplexTableau0.createTableau(false);
    assertEquals(1, doubleArray0.length);
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - multiple * tableau.getEntry(subtrahendRow, j));
    }
}","public void test3637() throws Throwable {
    double[] doubleArray0 = new double[1];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    // Undeclared exception!
    try {
        simplexTableau0.subtractRow(4, 4, 0.0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (4, 0) in a 1x4 matrix
        //
        verifyException(""org.apache.commons.math.linear.Array2DRowRealMatrix"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param minuendRow row index
 * @param subtrahendRow row index
 * @param multiple multiplication factor
 */"
"protected final int getWidth() {
    return tableau.getColumnDimension();
}","public void test3738() throws Throwable {
    double[] doubleArray0 = new double[7];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 338.4851419966);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 90.1480714283102);
    simplexTableau0.tableau = null;
    // Undeclared exception!
    try {
        simplexTableau0.getWidth();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Get the width of the tableau.
 * @return width of the tableau
 */"
"protected RealPointValuePair getSolution() {
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    for (int i = 0; i < coefficients.length; i++) {
        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0;
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test3839() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(5484);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 5484);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 15.987083133390552);
    // Undeclared exception!
    simplexTableau0.getSolution();
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"protected RealPointValuePair getSolution() {
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    for (int i = 0; i < coefficients.length; i++) {
        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0;
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test3940() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(8, 123);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 638.013267436);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    openMapRealVector0.mapCoshToSelf();
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
    // Undeclared exception!
    try {
        simplexTableau0.getSolution();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // iterator exhausted
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"protected RealPointValuePair getSolution() {
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
    Set<Integer> basicRows = new HashSet<Integer>();
    for (int i = 0; i < coefficients.length; i++) {
        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
        if (basicRows.contains(basicRow)) {
            // if multiple variables can take a given value
            // then we choose the first and set the rest equal to 0
            coefficients[i] = 0;
        } else {
            basicRows.add(basicRow);
            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
}","public void test4041() throws Throwable {
    double[] doubleArray0 = new double[8];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
    // Undeclared exception!
    try {
        simplexTableau0.getSolution();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (1, 9) in a 8x1 matrix
        //
        verifyException(""org.apache.commons.math.linear.Array2DRowRealMatrix"", e);
    }
}","/**
 * Get the current solution.
 *
 * @return current solution
 */"
"protected final int getRhsOffset() {
    return getWidth() - 1;
}","public void test4142() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.1102230246251565E-16);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
    // Undeclared exception!
    try {
        simplexTableau0.getRhsOffset();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Get the offset of the right hand side.
 * @return offset of the right hand side
 */"
"public List<LinearConstraint> getNormalizedConstraints() {
    List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();
    for (LinearConstraint constraint : constraints) {
        normalized.add(normalize(constraint));
    }
    return normalized;
}","public void test4243() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2378.0);
    linkedList0.add((LinearConstraint) null);
    // Undeclared exception!
    try {
        simplexTableau0.getNormalizedConstraints();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Get new versions of the constraints which have positive right hand sides.
 * @return new versions of the constraints
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test4344() throws Throwable {
    // Undeclared exception!
    try {
        SimplexTableau.getInvertedCoeffiecientSum((RealVector) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
    double sum = 0;
    for (double coefficient : coefficients.getData()) {
        sum -= coefficient;
    }
    return sum;
}","public void test4445() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
    // Undeclared exception!
    try {
        SimplexTableau.getInvertedCoeffiecientSum(openMapRealVector0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealVector"", e);
    }
}","/**
 * Get the -1 times the sum of all coefficients in the given array.
 * @param coefficients coefficients to sum
 * @return the -1 times the sum of all coefficients in the given array.
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test4546() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    // Undeclared exception!
    try {
        simplexTableau0.getEntry(2918, 1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (2,918, 1) in a 1x2 matrix
        //
        verifyException(""org.apache.commons.math.linear.Array2DRowRealMatrix"", e);
    }
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected final double getEntry(final int row, final int column) {
    return tableau.getEntry(row, column);
}","public void test4647() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    simplexTableau0.tableau = null;
    // Undeclared exception!
    try {
        simplexTableau0.getEntry((-1), 2);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Get an entry of the tableau.
 * @param row row index
 * @param column column index
 * @return entry at (row, column)
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test4748() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(276, (-3061.847972));
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-3061.847972));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, Double.POSITIVE_INFINITY);
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(32, 0.0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (32, 0) in a 1x278 matrix
        //
        verifyException(""org.apache.commons.math.linear.Array2DRowRealMatrix"", e);
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected void divideRow(final int dividendRow, final double divisor) {
    for (int j = 0; j < getWidth(); j++) {
        tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
    }
}","public void test4849() throws Throwable {
    double[] doubleArray0 = new double[5];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.tableau = null;
    // Undeclared exception!
    try {
        simplexTableau0.divideRow(0, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 *   minuendRow = minuendRow - multiple * subtrahendRow
 * </p>
 * @param dividendRow index of the row
 * @param divisor value of the divisor
 */"
"protected void discardArtificialVariables() {
    if (numArtificialVariables == 0) {
        return;
    }
    int width = getWidth() - numArtificialVariables - 1;
    int height = getHeight() - 1;
    double[][] matrix = new double[height][width];
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width - 1; j++) {
            matrix[i][j] = getEntry(i + 1, j + 1);
        }
        matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test4950() throws Throwable {
    double[] doubleArray0 = new double[9];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    simplexTableau0.numArtificialVariables = (-1);
    // Undeclared exception!
    try {
        simplexTableau0.discardArtificialVariables();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // matrix must have at least one row
        //
        verifyException(""org.apache.commons.math.MathRuntimeException"", e);
    }
}","/**
 * Removes the phase 1 objective function and artificial variables from this tableau.
 */"
"protected void discardArtificialVariables() {
    if (numArtificialVariables == 0) {
        return;
    }
    int width = getWidth() - numArtificialVariables - 1;
    int height = getHeight() - 1;
    double[][] matrix = new double[height][width];
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width - 1; j++) {
            matrix[i][j] = getEntry(i + 1, j + 1);
        }
        matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test5051() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(136);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, Double.NEGATIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    double[] doubleArray0 = new double[4];
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-780.8941922216237));
    Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
    simplexTableau0.tableau = (RealMatrix) array2DRowRealMatrix0;
    // Undeclared exception!
    try {
        simplexTableau0.discardArtificialVariables();
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Removes the phase 1 objective function and artificial variables from this tableau.
 */"
"protected void discardArtificialVariables() {
    if (numArtificialVariables == 0) {
        return;
    }
    int width = getWidth() - numArtificialVariables - 1;
    int height = getHeight() - 1;
    double[][] matrix = new double[height][width];
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width - 1; j++) {
            matrix[i][j] = getEntry(i + 1, j + 1);
        }
        matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());
    }
    this.tableau = new Array2DRowRealMatrix(matrix);
    this.numArtificialVariables = 0;
}","public void test5152() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(136);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, Double.NEGATIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    double[] doubleArray0 = new double[4];
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-780.8941922216237));
    simplexTableau0.numArtificialVariables = 140;
    // Undeclared exception!
    try {
        simplexTableau0.discardArtificialVariables();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Removes the phase 1 objective function and artificial variables from this tableau.
 */"
"protected double[][] createTableau(final boolean maximize) {
    // create a matrix of the correct size
    List<LinearConstraint> constraints = getNormalizedConstraints();
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    double[][] matrix = new double[height][width];
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix[0][0] = -1;
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix[zIndex][zIndex] = maximize ? 1 : -1;
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
    matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
    if (!restrictToNonNegative) {
        matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
        // x-
        if (!restrictToNonNegative) {
            matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
        }
        // RHS
        matrix[row][width - 1] = constraint.getValue();
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix[row][getSlackVariableOffset() + slackVar++] = 1;
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix[row][getSlackVariableOffset() + slackVar++] = -1;
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
            matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
        }
    }
    return matrix;
}","public void test5253() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2378.0);
    linkedList0.push((LinearConstraint) null);
    // Undeclared exception!
    try {
        simplexTableau0.createTableau(true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"protected double[][] createTableau(final boolean maximize) {
    // create a matrix of the correct size
    List<LinearConstraint> constraints = getNormalizedConstraints();
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    double[][] matrix = new double[height][width];
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix[0][0] = -1;
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix[zIndex][zIndex] = maximize ? 1 : -1;
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
    matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
    if (!restrictToNonNegative) {
        matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
        // x-
        if (!restrictToNonNegative) {
            matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
        }
        // RHS
        matrix[row][width - 1] = constraint.getValue();
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix[row][getSlackVariableOffset() + slackVar++] = 1;
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix[row][getSlackVariableOffset() + slackVar++] = -1;
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
            matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
        }
    }
    return matrix;
}","public void test5354() throws Throwable {
    double[] doubleArray0 = new double[7];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    simplexTableau0.numArtificialVariables = (-770);
    // Undeclared exception!
    try {
        simplexTableau0.createTableau(true);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"protected double[][] createTableau(final boolean maximize) {
    // create a matrix of the correct size
    List<LinearConstraint> constraints = getNormalizedConstraints();
    int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
    1;
    int height = constraints.size() + getNumObjectiveFunctions();
    double[][] matrix = new double[height][width];
    // initialize the objective function rows
    if (getNumObjectiveFunctions() == 2) {
        matrix[0][0] = -1;
    }
    int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
    matrix[zIndex][zIndex] = maximize ? 1 : -1;
    RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
    copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
    matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
    if (!restrictToNonNegative) {
        matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
    }
    // initialize the constraint rows
    int slackVar = 0;
    int artificialVar = 0;
    for (int i = 0; i < constraints.size(); i++) {
        LinearConstraint constraint = constraints.get(i);
        int row = getNumObjectiveFunctions() + i;
        // decision variable coefficients
        copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
        // x-
        if (!restrictToNonNegative) {
            matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
        }
        // RHS
        matrix[row][width - 1] = constraint.getValue();
        // slack variables
        if (constraint.getRelationship() == Relationship.LEQ) {
            // slack
            matrix[row][getSlackVariableOffset() + slackVar++] = 1;
        } else if (constraint.getRelationship() == Relationship.GEQ) {
            // excess
            matrix[row][getSlackVariableOffset() + slackVar++] = -1;
        }
        // artificial variables
        if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
            matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
            matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
        }
    }
    return matrix;
}","public void test5455() throws Throwable {
    double[] doubleArray0 = new double[7];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1372.60464505472));
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    Relationship relationship0 = Relationship.LEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-352.28));
    linkedList0.add(linearConstraint0);
    // Undeclared exception!
    try {
        simplexTableau0.createTableau(true);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Create the tableau by itself.
 * @param maximize if true, goal is to maximize the objective function
 * @return created tableau
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this.f = f;
    this.constraints = constraints;
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));
    initialize();
}","public void test5556() throws Throwable {
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, false, 1368.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept in floating point comparisons
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this.f = f;
    this.constraints = constraints;
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));
    initialize();
}","public void test5657() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), 0.0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-3913.0504839));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.linear.OpenMapRealVector"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept in floating point comparisons
 */"
"SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
    this.f = f;
    this.constraints = constraints;
    this.restrictToNonNegative = restrictToNonNegative;
    this.epsilon = epsilon;
    this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
    this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
    this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));
    initialize();
}","public void test5758() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, Double.NEGATIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    double[] doubleArray0 = new double[4];
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = null;
    try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-780.8941922216237));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math.optimization.linear.SimplexTableau"", e);
    }
}","/**
 * Build a tableau for a linear problem.
 * @param f linear objective function
 * @param constraints linear constraints
 * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
 * or {@link GoalType#MINIMIZE}
 * @param restrictToNonNegative whether to restrict the variables to non-negative values
 * @param epsilon amount of error to accept in floating point comparisons
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test5859() throws Throwable {
    double[] doubleArray0 = new double[3];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, (-3061.9698237205184));
    linkedList0.add(linearConstraint0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 124);
    assertEquals(3, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test6061() throws Throwable {
    OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(31, 31);
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
    RealVector realVector0 = openMapRealMatrix0.preMultiply((RealVector) openMapRealVector0);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
    int int0 = simplexTableau0.getNumVariables();
    assertEquals(31, int0);
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test6162() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
    GoalType goalType1 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, true, 1.0);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test6263() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
    simplexTableau0.numArtificialVariables = (-1715);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test6364() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    Relationship relationship0 = Relationship.GEQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1.0E-12);
    linkedList0.add(linearConstraint0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test6465() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertTrue(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test6566() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
    SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3038.557409));
    boolean boolean0 = simplexTableau0.equals(simplexTableau1);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test6667() throws Throwable {
    GoalType goalType0 = GoalType.MAXIMIZE;
    double[] doubleArray0 = new double[6];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    boolean boolean0 = simplexTableau0.equals((Object) null);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test6768() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    boolean boolean0 = simplexTableau0.equals(simplexTableau0);
    assertTrue(boolean0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public boolean equals(Object other) {
    if (this == other) {
        return true;
    }
    if (other == null) {
        return false;
    }
    try {
        SimplexTableau rhs = (SimplexTableau) other;
        return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
    } catch (ClassCastException ex) {
        // ignore exception
        return false;
    }
}","public void test6869() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 455.831949415);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 136.0);
    boolean boolean0 = simplexTableau0.equals(linearObjectiveFunction0);
    assertFalse(boolean0);
}","/**
 * {@inheritDoc}
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test6970() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
    simplexTableau0.discardArtificialVariables();
    assertEquals(0, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"public int getNumVariables() {
    return f.getCoefficients().getDimension();
}","public void test7071() throws Throwable {
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(136);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, Double.NEGATIVE_INFINITY);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    double[] doubleArray0 = new double[4];
    Relationship relationship0 = Relationship.EQ;
    LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
    linkedList0.add(linearConstraint0);
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 136.0);
    simplexTableau0.discardArtificialVariables();
    assertEquals(136, simplexTableau0.getNumVariables());
}","/**
 * Get the number of variables.
 * @return number of variables
 */"
"protected final int getNumArtificialVariables() {
    return numArtificialVariables;
}","public void test7172() throws Throwable {
    GoalType goalType0 = GoalType.MAXIMIZE;
    double[] doubleArray0 = new double[6];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
    int int0 = simplexTableau0.getNumArtificialVariables();
    assertEquals(0, int0);
}","/**
 * Get the number of artificial variables.
 * @return number of artificial variables
 */"
"protected final int getNumSlackVariables() {
    return numSlackVariables;
}","public void test7273() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
    int int0 = simplexTableau0.getNumSlackVariables();
    assertEquals(0, int0);
}","/**
 * Get the number of slack variables.
 * @return number of slack variables
 */"
"protected final int getNumDecisionVariables() {
    return numDecisionVariables;
}","public void test7374() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
    int int0 = simplexTableau0.getNumDecisionVariables();
    assertEquals(0, int0);
}","/**
 * Get the number of decision variables.
 * <p>
 * If variables are not restricted to positive values, this will include 1
 * extra decision variable to represent the absolute value of the most
 * negative variable.
 * </p>
 * @return number of decision variables
 * @see #getOriginalNumDecisionVariables()
 */"
"protected final int getRhsOffset() {
    return getWidth() - 1;
}","public void test7475() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    int int0 = simplexTableau0.getRhsOffset();
    assertEquals(1, int0);
}","/**
 * Get the offset of the right hand side.
 * @return offset of the right hand side
 */"
"protected final int getHeight() {
    return tableau.getRowDimension();
}","public void test7576() throws Throwable {
    double[] doubleArray0 = new double[0];
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 455.831949415);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 136.0);
    int int0 = simplexTableau0.getHeight();
    assertEquals(1, int0);
}","/**
 * Get the height of the tableau.
 * @return height of the tableau
 */"
"protected final int getNegativeDecisionVariableOffset() {
    return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();
}","public void test7677() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    int int0 = simplexTableau0.getNegativeDecisionVariableOffset();
    assertEquals(1, int0);
}","/**
 * Returns the offset of the extra decision variable added when there is a
 * negative decision variable in the original problem.
 * @return the offset of x-
 */"
"protected final void setEntry(final int row, final int column, final double value) {
    tableau.setEntry(row, column, value);
}","public void test7778() throws Throwable {
    double[] doubleArray0 = new double[3];
    ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MAXIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-3060.8355189058507));
    // Undeclared exception!
    try {
        simplexTableau0.setEntry(5, 5, (-3060.8355189058507));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // no entry at indices (5, 5) in a 1x6 matrix
        //
        verifyException(""org.apache.commons.math.linear.Array2DRowRealMatrix"", e);
    }
}","/**
 * Set an entry of the tableau.
 * @param row row index
 * @param column column index
 * @param value for the entry
 */"
"protected final double[][] getData() {
    return tableau.getData();
}","public void test7879() throws Throwable {
    OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
    LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
    LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
    GoalType goalType0 = GoalType.MINIMIZE;
    SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
    double[][] doubleArray0 = simplexTableau0.getData();
    assertEquals(1, doubleArray0.length);
}","/**
 * Get the tableau data.
 * @return tableau data
 */"
