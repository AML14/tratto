focal_method,test_prefix,docstring
"public static float round(float x, int scale, int roundingMethod) {
    float sign = indicator(x);
    float factor = (float) Math.pow(10.0f, scale) * sign;
    return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
}","public void test0000() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.round(Float.NaN, 1354, 13);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding method.
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    // split the double in raw components
    long bits = Double.doubleToLongBits(d);
    long sign = bits & 0x8000000000000000L;
    long exponent = bits & 0x7ff0000000000000L;
    long mantissa = bits & 0x000fffffffffffffL;
    if (d * (direction - d) >= 0) {
        // we should increase the mantissa
        if (mantissa == 0x000fffffffffffffL) {
            return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa + 1));
        }
    } else {
        // we should decrease the mantissa
        if (mantissa == 0L) {
            return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa - 1));
        }
    }
}","public void test0011() throws Throwable {
    MathUtils.nextAfter(0.0, 0.0);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * If <code>direction</code> is greater than or equal to<code>d</code>,
 * the smallest machine representable number strictly greater than
 * <code>d</code> is returned; otherwise the largest representable number
 * strictly less than <code>d</code> is returned.</p>
 * <p>
 * If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * direction is greater or smaller than d)
 * @return the next machine representable number in the specified direction
 * @since 1.2
 */"
"public static short indicator(final short x) {
    return (x >= ZS) ? PS : NS;
}","public void test0022() throws Throwable {
    MathUtils.indicator((short) (byte) 0);
}","/**
 * For a short value x, this method returns (short)(+1) if x >= 0 and
 * (short)(-1) if x < 0.
 *
 * @param x the value, a short
 * @return (short)(+1) or (short)(-1), depending on the sign of x
 */"
"public static long indicator(final long x) {
    return (x >= 0L) ? 1L : -1L;
}","public void test0033() throws Throwable {
    MathUtils.indicator(0L);
}","/**
 * For a long value x, this method returns +1L if x >= 0 and -1L if x < 0.
 *
 * @param x the value, a long
 * @return +1L or -1L, depending on the sign of x
 */"
"public static int indicator(final int x) {
    return (x >= 0) ? 1 : -1;
}","public void test0044() throws Throwable {
    MathUtils.indicator(1);
}","/**
 * For an int value x, this method returns +1 if x >= 0 and -1 if x < 0.
 *
 * @param x the value, an int
 * @return +1 or -1, depending on the sign of x
 */"
"public static double indicator(final double x) {
    if (Double.isNaN(x)) {
        return Double.NaN;
    }
    return (x >= 0.0) ? 1.0 : -1.0;
}","public void test0055() throws Throwable {
    MathUtils.indicator(1.0);
}","/**
 * For a double precision value x, this method returns +1.0 if x >= 0 and
 * -1.0 if x < 0. Returns <code>NaN</code> if <code>x</code> is
 * <code>NaN</code>.
 *
 * @param x the value, a double
 * @return +1.0 or -1.0, depending on the sign of x
 */"
"public static byte indicator(final byte x) {
    return (x >= ZB) ? PB : NB;
}","public void test0066() throws Throwable {
    MathUtils.indicator((byte) 107);
}","/**
 * For a byte value x, this method returns (byte)(+1) if x >= 0 and
 * (byte)(-1) if x < 0.
 *
 * @param x the value, a byte
 * @return (byte)(+1) or (byte)(-1), depending on the sign of x
 */"
"public static boolean equals(double[] x, double[] y) {
    if ((x == null) || (y == null)) {
        return !((x == null) ^ (y == null));
    }
    if (x.length != y.length) {
        return false;
    }
    for (int i = 0; i < x.length; ++i) {
        if (!equals(x[i], y[i])) {
            return false;
        }
    }
    return true;
}","public void test0077() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[9];
    MathUtils.equals(doubleArray0, doubleArray1);
}","/**
 * Returns true iff both arguments are null or have same dimensions
 * and all their elements are {@link #equals(double,double) equals}
 *
 * @param x first array
 * @param y second array
 * @return true if the values are both null or have same dimension
 * and equal elements
 * @since 1.2
 */"
"public static double cosh(double x) {
    return (Math.exp(x) + Math.exp(-x)) / 2.0;
}","public void test0088() throws Throwable {
    MathUtils.cosh((-1.0));
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/HyperbolicCosine.html"">
 * hyperbolic cosine</a> of x.
 *
 * @param x double value for which to find the hyperbolic cosine
 * @return hyperbolic cosine of x
 */"
"public static double binomialCoefficientLog(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 0;
    }
    if ((k == 1) || (k == n - 1)) {
        return Math.log((double) n);
    }
    double logSum = 0;
    // n!/k!
    for (int i = k + 1; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    // divide by (n-k)!
    for (int i = 2; i <= n - k; i++) {
        logSum -= Math.log((double) i);
    }
    return logSum;
}","public void test0099() throws Throwable {
    MathUtils.binomialCoefficientLog(0, 0);
}","/**
 * Returns the natural <code>log</code> of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static long addAndCheck(long a, long b) {
    return addAndCheck(a, b, ""overflow: add"");
}","public void test01010() throws Throwable {
    MathUtils.addAndCheck(0L, (-2067L));
}","/**
 * Add two long integers, checking for overflow.
 *
 * @param a an addend
 * @param b an addend
 * @return the sum <code>a+b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long subAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: subtract"";
    if (b == Long.MIN_VALUE) {
        if (a < 0) {
            ret = a - b;
        } else {
            throw new ArithmeticException(msg);
        }
    } else {
        // use additive inverse
        ret = addAndCheck(a, -b, msg);
    }
    return ret;
}","public void test01111() throws Throwable {
    MathUtils.subAndCheck(720L, 1L);
}","/**
 * Subtract two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the difference <code>a-b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static int subAndCheck(int x, int y) {
    long s = (long) x - (long) y;
    if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: subtract"");
    }
    return (int) s;
}","public void test01212() throws Throwable {
    MathUtils.subAndCheck(4718, 4718);
}","/**
 * Subtract two integers, checking for overflow.
 *
 * @param x the minuend
 * @param y the subtrahend
 * @return the difference <code>x-y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static int subAndCheck(int x, int y) {
    long s = (long) x - (long) y;
    if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: subtract"");
    }
    return (int) s;
}","public void test01313() throws Throwable {
    MathUtils.subAndCheck(1892, 16);
}","/**
 * Subtract two integers, checking for overflow.
 *
 * @param x the minuend
 * @param y the subtrahend
 * @return the difference <code>x-y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static double sinh(double x) {
    return (Math.exp(x) - Math.exp(-x)) / 2.0;
}","public void test01414() throws Throwable {
    MathUtils.sinh(0.0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"">
 * hyperbolic sine</a> of x.
 *
 * @param x double value for which to find the hyperbolic sine
 * @return hyperbolic sine of x
 */"
"public static double sinh(double x) {
    return (Math.exp(x) - Math.exp(-x)) / 2.0;
}","public void test01515() throws Throwable {
    MathUtils.sinh((-1.0));
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"">
 * hyperbolic sine</a> of x.
 *
 * @param x double value for which to find the hyperbolic sine
 * @return hyperbolic sine of x
 */"
"public static double scalb(final double d, final int scaleFactor) {
    // handling of some important special cases
    if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    }
    // split the double in raw components
    final long bits = Double.doubleToLongBits(d);
    final long exponent = bits & 0x7ff0000000000000L;
    final long rest = bits & 0x800fffffffffffffL;
    // shift the exponent
    final long newBits = rest | (exponent + (((long) scaleFactor) << 52));
    return Double.longBitsToDouble(newBits);
}","public void test01616() throws Throwable {
    MathUtils.scalb((-1.0), (-1614));
}","/**
 * Scale a number by 2<sup>scaleFactor</sup>.
 * <p>If <code>d</code> is 0 or NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param scaleFactor power of two by which d sould be multiplied
 * @return d &times; 2<sup>scaleFactor</sup>
 * @since 2.0
 */"
"public static float round(float x, int scale) {
    return round(x, scale, BigDecimal.ROUND_HALF_UP);
}","public void test01717() throws Throwable {
    MathUtils.round((float) 0, 0);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounding using the {@link BigDecimal#ROUND_HALF_UP} method.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double round(double x, int scale, int roundingMethod) {
    try {
        return (new BigDecimal(Double.toString(x)).setScale(scale, roundingMethod)).doubleValue();
    } catch (NumberFormatException ex) {
        if (Double.isInfinite(x)) {
            return x;
        } else {
            return Double.NaN;
        }
    }
}","public void test01818() throws Throwable {
    MathUtils.round(0.0, 0, 0);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double round(double x, int scale, int roundingMethod) {
    try {
        return (new BigDecimal(Double.toString(x)).setScale(scale, roundingMethod)).doubleValue();
    } catch (NumberFormatException ex) {
        if (Double.isInfinite(x)) {
            return x;
        } else {
            return Double.NaN;
        }
    }
}","public void test01919() throws Throwable {
    MathUtils.round(1588.09, (int) (short) 1, (int) (byte) 0);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double round(double x, int scale) {
    return round(x, scale, BigDecimal.ROUND_HALF_UP);
}","public void test02020() throws Throwable {
    MathUtils.round((double) 1L, (int) (short) 1);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double round(double x, int scale) {
    return round(x, scale, BigDecimal.ROUND_HALF_UP);
}","public void test02121() throws Throwable {
    MathUtils.round((-180.6522257959), (int) (byte) (-1));
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double normalizeAngle(double a, double center) {
    return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);
}","public void test02222() throws Throwable {
    MathUtils.normalizeAngle(113.58579447, 1);
}","/**
 * Normalize an angle in a 2&pi wide interval around a center value.
 * <p>This method has three main uses:</p>
 * <ul>
 *   <li>normalize an angle between 0 and 2&pi;:<br/>
 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
 *   <li>normalize an angle between -&pi; and +&pi;<br/>
 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
 *   <li>compute the angle between two defining angular positions:<br>
 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
 * </ul>
 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
 * exactly, the result interval is <em>closed</em>, it cannot be half-closed
 * as would be more satisfactory in a purely mathematical view.</p>
 * @param a angle to normalize
 * @param center center of the desired 2&pi; interval for the result
 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
 * @since 1.2
 */"
"public static double normalizeAngle(double a, double center) {
    return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);
}","public void test02323() throws Throwable {
    MathUtils.normalizeAngle((-2161.79362456336), 0);
}","/**
 * Normalize an angle in a 2&pi wide interval around a center value.
 * <p>This method has three main uses:</p>
 * <ul>
 *   <li>normalize an angle between 0 and 2&pi;:<br/>
 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
 *   <li>normalize an angle between -&pi; and +&pi;<br/>
 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
 *   <li>compute the angle between two defining angular positions:<br>
 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
 * </ul>
 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
 * exactly, the result interval is <em>closed</em>, it cannot be half-closed
 * as would be more satisfactory in a purely mathematical view.</p>
 * @param a angle to normalize
 * @param center center of the desired 2&pi; interval for the result
 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
 * @since 1.2
 */"
"public static int mulAndCheck(int x, int y) {
    long m = ((long) x) * ((long) y);
    if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: mul"");
    }
    return (int) m;
}","public void test02424() throws Throwable {
    MathUtils.mulAndCheck(0, 0);
}","/**
 * Multiply two integers, checking for overflow.
 *
 * @param x a factor
 * @param y a factor
 * @return the product <code>x*y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static int mulAndCheck(int x, int y) {
    long m = ((long) x) * ((long) y);
    if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: mul"");
    }
    return (int) m;
}","public void test02525() throws Throwable {
    MathUtils.mulAndCheck(1639, (-1057));
}","/**
 * Multiply two integers, checking for overflow.
 *
 * @param x a factor
 * @param y a factor
 * @return the product <code>x*y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static double log(double base, double x) {
    return Math.log(x) / Math.log(base);
}","public void test02626() throws Throwable {
    MathUtils.log(544, 544);
}","/**
 * <p>Returns the
 * <a href=""http://mathworld.wolfram.com/Logarithm.html"">logarithm</a>
 * for base <code>b</code> of <code>x</code>.
 * </p>
 * <p>Returns <code>NaN<code> if either argument is negative.  If
 * <code>base</code> is 0 and <code>x</code> is positive, 0 is returned.
 * If <code>base</code> is positive and <code>x</code> is 0,
 * <code>Double.NEGATIVE_INFINITY</code> is returned.  If both arguments
 * are 0, the result is <code>NaN</code>.</p>
 *
 * @param base the base of the logarithm, must be greater than 0
 * @param x argument, must be greater than 0
 * @return the value of the logarithm - the number y such that base^y = x.
 * @since 1.2
 */"
"public static double log(double base, double x) {
    return Math.log(x) / Math.log(base);
}","public void test02727() throws Throwable {
    MathUtils.log(244.86671, 0.0);
}","/**
 * <p>Returns the
 * <a href=""http://mathworld.wolfram.com/Logarithm.html"">logarithm</a>
 * for base <code>b</code> of <code>x</code>.
 * </p>
 * <p>Returns <code>NaN<code> if either argument is negative.  If
 * <code>base</code> is 0 and <code>x</code> is positive, 0 is returned.
 * If <code>base</code> is positive and <code>x</code> is 0,
 * <code>Double.NEGATIVE_INFINITY</code> is returned.  If both arguments
 * are 0, the result is <code>NaN</code>.</p>
 *
 * @param base the base of the logarithm, must be greater than 0
 * @param x argument, must be greater than 0
 * @return the value of the logarithm - the number y such that base^y = x.
 * @since 1.2
 */"
"public static int lcm(int a, int b) {
    return Math.abs(mulAndCheck(a / gcd(a, b), b));
}","public void test02828() throws Throwable {
    MathUtils.lcm(0, (-1477));
}","/**
 * Returns the least common multiple between two integer values.
 *
 * @param a the first integer value.
 * @param b the second integer value.
 * @return the least common multiple between a and b.
 * @throws ArithmeticException if the lcm is too large to store as an int
 * @since 1.1
 */"
"public static int hash(double[] value) {
    return Arrays.hashCode(value);
}","public void test02929() throws Throwable {
    MathUtils.hash((double[]) null);
}","/**
 * Returns an integer hash code representing the given double array.
 *
 * @param value the value to be hashed (may be null)
 * @return the hash code
 * @since 1.2
 */"
"public static int hash(double[] value) {
    return Arrays.hashCode(value);
}","public void test03030() throws Throwable {
    double[] doubleArray0 = new double[9];
    doubleArray0[1] = (double) (-1L);
    doubleArray0[6] = (double) (-1L);
    MathUtils.hash(doubleArray0);
}","/**
 * Returns an integer hash code representing the given double array.
 *
 * @param value the value to be hashed (may be null)
 * @return the hash code
 * @since 1.2
 */"
"public static int hash(double value) {
    return new Double(value).hashCode();
}","public void test03131() throws Throwable {
    MathUtils.hash((double) 0);
}","/**
 * Returns an integer hash code representing the given double value.
 *
 * @param value the value to be hashed
 * @return the hash code
 */"
"public static int hash(double value) {
    return new Double(value).hashCode();
}","public void test03232() throws Throwable {
    MathUtils.hash((double) 1);
}","/**
 * Returns an integer hash code representing the given double value.
 *
 * @param value the value to be hashed
 * @return the hash code
 */"
"public static double factorialLog(final int n) {
    if (n < 0) {
        throw new IllegalArgumentException(""must have n > 0 for n!"");
    }
    double logSum = 0;
    for (int i = 2; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    return logSum;
}","public void test03333() throws Throwable {
    MathUtils.factorialLog(0);
}","/**
 * Returns the natural logarithm of n!.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double binomialCoefficientLog(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 0;
    }
    if ((k == 1) || (k == n - 1)) {
        return Math.log((double) n);
    }
    double logSum = 0;
    // n!/k!
    for (int i = k + 1; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    // divide by (n-k)!
    for (int i = 2; i <= n - k; i++) {
        logSum -= Math.log((double) i);
    }
    return logSum;
}","public void test03434() throws Throwable {
    MathUtils.binomialCoefficientLog(351, (-1));
}","/**
 * Returns the natural <code>log</code> of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double binomialCoefficientDouble(final int n, final int k) {
    return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
}","public void test03535() throws Throwable {
    MathUtils.binomialCoefficientDouble((short) 739, (-1));
}","/**
 * Returns a <code>double</code> representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>double</code>. The
 * largest value of <code>n</code> for which all coefficients are <
 * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,
 * Double.POSITIVE_INFINITY is returned</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static long addAndCheck(long a, long b) {
    return addAndCheck(a, b, ""overflow: add"");
}","public void test03636() throws Throwable {
    MathUtils.addAndCheck(0L, 0L);
}","/**
 * Add two long integers, checking for overflow.
 *
 * @param a an addend
 * @param b an addend
 * @return the sum <code>a+b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long addAndCheck(long a, long b) {
    return addAndCheck(a, b, ""overflow: add"");
}","public void test03737() throws Throwable {
    MathUtils.addAndCheck((long) 0, 1999L);
}","/**
 * Add two long integers, checking for overflow.
 *
 * @param a an addend
 * @param b an addend
 * @return the sum <code>a+b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static int addAndCheck(int x, int y) {
    long s = (long) x + (long) y;
    if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: add"");
    }
    return (int) s;
}","public void test03838() throws Throwable {
    MathUtils.addAndCheck(0, 0);
}","/**
 * Add two integers, checking for overflow.
 *
 * @param x an addend
 * @param y an addend
 * @return the sum <code>x+y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static int addAndCheck(int x, int y) {
    long s = (long) x + (long) y;
    if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: add"");
    }
    return (int) s;
}","public void test03939() throws Throwable {
    MathUtils.addAndCheck((-1), 0);
}","/**
 * Add two integers, checking for overflow.
 *
 * @param x an addend
 * @param y an addend
 * @return the sum <code>x+y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static double round(double x, int scale, int roundingMethod) {
    try {
        return (new BigDecimal(Double.toString(x)).setScale(scale, roundingMethod)).doubleValue();
    } catch (NumberFormatException ex) {
        if (Double.isInfinite(x)) {
            return x;
        } else {
            return Double.NaN;
        }
    }
}","public void test04040() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.round((double) (-1), 0, 3677);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid rounding mode
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static int lcm(int a, int b) {
    return Math.abs(mulAndCheck(a / gcd(a, b), b));
}","public void test04141() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.lcm(0, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // / by zero
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns the least common multiple between two integer values.
 *
 * @param a the first integer value.
 * @param b the second integer value.
 * @return the least common multiple between a and b.
 * @throws ArithmeticException if the lcm is too large to store as an int
 * @since 1.1
 */"
"public static int lcm(int a, int b) {
    return Math.abs(mulAndCheck(a / gcd(a, b), b));
}","public void test04242() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.lcm(1972, 2146517618);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns the least common multiple between two integer values.
 *
 * @param a the first integer value.
 * @param b the second integer value.
 * @return the least common multiple between a and b.
 * @throws ArithmeticException if the lcm is too large to store as an int
 * @since 1.1
 */"
"public static double factorialLog(final int n) {
    if (n < 0) {
        throw new IllegalArgumentException(""must have n > 0 for n!"");
    }
    double logSum = 0;
    for (int i = 2; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    return logSum;
}","public void test04343() throws Throwable {
    // Undeclared exception!
    MathUtils.factorialLog((short) 10008);
}","/**
 * Returns the natural logarithm of n!.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static long factorial(final int n) {
    long result = Math.round(factorialDouble(n));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""factorial value is too large to fit in a long"");
    }
    return factorials[n];
}","public void test04444() throws Throwable {
    // Undeclared exception!
    MathUtils.factorial(2144874311);
}","/**
 * Returns n!. Shorthand for <code>n</code> <a
 * href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the
 * product of the numbers <code>1,...,n</code>.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which <code>n!</code> <
 * Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>
 * an <code>ArithMeticException </code> is thrown.</li>
 * </ul>
 * </p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 * @throws IllegalArgumentException if n < 0
 */"
"public static double binomialCoefficientLog(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 0;
    }
    if ((k == 1) || (k == n - 1)) {
        return Math.log((double) n);
    }
    double logSum = 0;
    // n!/k!
    for (int i = k + 1; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    // divide by (n-k)!
    for (int i = 2; i <= n - k; i++) {
        logSum -= Math.log((double) i);
    }
    return logSum;
}","public void test04545() throws Throwable {
    // Undeclared exception!
    MathUtils.binomialCoefficientLog(131810, 19);
}","/**
 * Returns the natural <code>log</code> of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double binomialCoefficientDouble(final int n, final int k) {
    return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
}","public void test04646() throws Throwable {
    // Undeclared exception!
    MathUtils.binomialCoefficientDouble(1696258207, 14);
}","/**
 * Returns a <code>double</code> representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>double</code>. The
 * largest value of <code>n</code> for which all coefficients are <
 * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,
 * Double.POSITIVE_INFINITY is returned</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static long binomialCoefficient(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 1;
    }
    if ((k == 1) || (k == n - 1)) {
        return n;
    }
    long result = Math.round(binomialCoefficientDouble(n, k));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""result too large to represent in a long integer"");
    }
    return result;
}","public void test04747() throws Throwable {
    // Undeclared exception!
    MathUtils.binomialCoefficient(846855, (-405));
}","/**
 * Returns an exact representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which all coefficients are
 * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
 * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is
 * thrown.</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    // split the double in raw components
    long bits = Double.doubleToLongBits(d);
    long sign = bits & 0x8000000000000000L;
    long exponent = bits & 0x7ff0000000000000L;
    long mantissa = bits & 0x000fffffffffffffL;
    if (d * (direction - d) >= 0) {
        // we should increase the mantissa
        if (mantissa == 0x000fffffffffffffL) {
            return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa + 1));
        }
    } else {
        // we should decrease the mantissa
        if (mantissa == 0L) {
            return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa - 1));
        }
    }
}","public void test04848() throws Throwable {
    double double0 = MathUtils.nextAfter((-249.9531578), 0);
    assertEquals((-249.95315779999999), double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * If <code>direction</code> is greater than or equal to<code>d</code>,
 * the smallest machine representable number strictly greater than
 * <code>d</code> is returned; otherwise the largest representable number
 * strictly less than <code>d</code> is returned.</p>
 * <p>
 * If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * direction is greater or smaller than d)
 * @return the next machine representable number in the specified direction
 * @since 1.2
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    // split the double in raw components
    long bits = Double.doubleToLongBits(d);
    long sign = bits & 0x8000000000000000L;
    long exponent = bits & 0x7ff0000000000000L;
    long mantissa = bits & 0x000fffffffffffffL;
    if (d * (direction - d) >= 0) {
        // we should increase the mantissa
        if (mantissa == 0x000fffffffffffffL) {
            return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa + 1));
        }
    } else {
        // we should decrease the mantissa
        if (mantissa == 0L) {
            return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa - 1));
        }
    }
}","public void test04949() throws Throwable {
    double double0 = MathUtils.nextAfter((-1.0), (-1.0));
    assertEquals((-1.0000000000000002), double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * If <code>direction</code> is greater than or equal to<code>d</code>,
 * the smallest machine representable number strictly greater than
 * <code>d</code> is returned; otherwise the largest representable number
 * strictly less than <code>d</code> is returned.</p>
 * <p>
 * If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * direction is greater or smaller than d)
 * @return the next machine representable number in the specified direction
 * @since 1.2
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    // split the double in raw components
    long bits = Double.doubleToLongBits(d);
    long sign = bits & 0x8000000000000000L;
    long exponent = bits & 0x7ff0000000000000L;
    long mantissa = bits & 0x000fffffffffffffL;
    if (d * (direction - d) >= 0) {
        // we should increase the mantissa
        if (mantissa == 0x000fffffffffffffL) {
            return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa + 1));
        }
    } else {
        // we should decrease the mantissa
        if (mantissa == 0L) {
            return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa - 1));
        }
    }
}","public void test05050() throws Throwable {
    double double0 = MathUtils.nextAfter(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * If <code>direction</code> is greater than or equal to<code>d</code>,
 * the smallest machine representable number strictly greater than
 * <code>d</code> is returned; otherwise the largest representable number
 * strictly less than <code>d</code> is returned.</p>
 * <p>
 * If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * direction is greater or smaller than d)
 * @return the next machine representable number in the specified direction
 * @since 1.2
 */"
"public static long mulAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: multiply"";
    if (a > b) {
        // use symmetry to reduce boundry cases
        ret = mulAndCheck(b, a);
    } else {
        if (a < 0) {
            if (b < 0) {
                // check for positive overflow with negative a, negative b
                if (a >= Long.MAX_VALUE / b) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else if (b > 0) {
                // check for negative overflow with negative a, positive b
                if (Long.MIN_VALUE / b <= a) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else {
                // assert b == 0
                ret = 0;
            }
        } else if (a > 0) {
            // assert a > 0
            // assert b > 0
            // check for positive overflow with positive a, positive b
            if (a <= Long.MAX_VALUE / b) {
                ret = a * b;
            } else {
                throw new ArithmeticException(msg);
            }
        } else {
            // assert a == 0
            ret = 0;
        }
    }
    return ret;
}","public void test05151() throws Throwable {
    long long0 = MathUtils.mulAndCheck((-873L), (long) (short) 1);
    assertEquals((-873L), long0);
}","/**
 * Multiply two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the product <code>a * b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long mulAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: multiply"";
    if (a > b) {
        // use symmetry to reduce boundry cases
        ret = mulAndCheck(b, a);
    } else {
        if (a < 0) {
            if (b < 0) {
                // check for positive overflow with negative a, negative b
                if (a >= Long.MAX_VALUE / b) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else if (b > 0) {
                // check for negative overflow with negative a, positive b
                if (Long.MIN_VALUE / b <= a) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else {
                // assert b == 0
                ret = 0;
            }
        } else if (a > 0) {
            // assert a > 0
            // assert b > 0
            // check for positive overflow with positive a, positive b
            if (a <= Long.MAX_VALUE / b) {
                ret = a * b;
            } else {
                throw new ArithmeticException(msg);
            }
        } else {
            // assert a == 0
            ret = 0;
        }
    }
    return ret;
}","public void test05252() throws Throwable {
    long long0 = MathUtils.mulAndCheck((-2696L), (-2696L));
    assertEquals(7268416L, long0);
}","/**
 * Multiply two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the product <code>a * b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static int mulAndCheck(int x, int y) {
    long m = ((long) x) * ((long) y);
    if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: mul"");
    }
    return (int) m;
}","public void test05353() throws Throwable {
    int int0 = MathUtils.mulAndCheck(731142, 1359);
    assertEquals(993621978, int0);
}","/**
 * Multiply two integers, checking for overflow.
 *
 * @param x a factor
 * @param y a factor
 * @return the product <code>x*y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static float indicator(final float x) {
    if (Float.isNaN(x)) {
        return Float.NaN;
    }
    return (x >= 0.0F) ? 1.0F : -1.0F;
}","public void test05454() throws Throwable {
    float float0 = MathUtils.indicator((float) (-1630L));
    assertEquals((-1.0F), float0, 0.01F);
}","/**
 * For a float value x, this method returns +1.0F if x >= 0 and -1.0F if x <
 * 0. Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.
 *
 * @param x the value, a float
 * @return +1.0F or -1.0F, depending on the sign of x
 */"
"public static float indicator(final float x) {
    if (Float.isNaN(x)) {
        return Float.NaN;
    }
    return (x >= 0.0F) ? 1.0F : -1.0F;
}","public void test05555() throws Throwable {
    float float0 = MathUtils.indicator((float) (short) 1);
    assertEquals(1.0F, float0, 0.01F);
}","/**
 * For a float value x, this method returns +1.0F if x >= 0 and -1.0F if x <
 * 0. Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.
 *
 * @param x the value, a float
 * @return +1.0F or -1.0F, depending on the sign of x
 */"
"public static int gcd(int u, int v) {
    if ((u == 0) || (v == 0)) {
        return (Math.abs(u) + Math.abs(v));
    }
    // keep u and v negative, as negative integers range down to
    // -2^31, while positive numbers can only be as large as 2^31-1
    // (i.e. we can't necessarily negate a negative number without
    // overflow)
    /* assert u!=0 && v!=0; */
    if (u > 0) {
        u = -u;
    }
    // make u negative
    if (v > 0) {
        v = -v;
    }
    // make v negative
    // B1. [Find power of 2]
    int k = 0;
    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
        // while u and v are
        // both even...
        u /= 2;
        v /= 2;
        // cast out twos.
        k++;
    }
    if (k == 31) {
        throw new ArithmeticException(""overflow: gcd is 2^31"");
    }
    // B2. Initialize: u and v have been divided by 2^k and at least
    // one is odd.
    int t = ((u & 1) == 1) ? v : -(u / 2);
    // t negative: u was odd, v may be even (t replaces v)
    // t positive: u was even, v is odd (t replaces u)
    do {
        /* assert u<0 && v<0; */
        // B4/B3: cast out twos from t.
        while ((t & 1) == 0) {
            // while t is even..
            // cast out twos
            t /= 2;
        }
        // B5 [reset max(u,v)]
        if (t > 0) {
            u = -t;
        } else {
            v = t;
        }
        // B6/B3. at this point both u and v should be odd.
        t = (v - u) / 2;
        // |u| larger: t positive (replace u)
        // |v| larger: t negative (replace v)
    } while (t != 0);
    // gcd is u*2^k
    return -u * (1 << k);
}","public void test05656() throws Throwable {
    int int0 = MathUtils.gcd((-1956), (-1956));
    assertEquals(1956, int0);
}","/**
 * <p>
 * Gets the greatest common divisor of the absolute value of two numbers,
 * using the ""binary gcd"" method which avoids division and modulo
 * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
 * Stein (1961).
 * </p>
 *
 * @param u a non-zero number
 * @param v a non-zero number
 * @return the greatest common divisor, never zero
 * @since 1.1
 */"
"public static double factorialLog(final int n) {
    if (n < 0) {
        throw new IllegalArgumentException(""must have n > 0 for n!"");
    }
    double logSum = 0;
    for (int i = 2; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    return logSum;
}","public void test05757() throws Throwable {
    double double0 = MathUtils.factorialLog(1359);
    assertEquals(8450.037750891279, double0, 0.01);
}","/**
 * Returns the natural logarithm of n!.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double factorialDouble(final int n) {
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for n!"");
    }
    return Math.floor(Math.exp(factorialLog(n)) + 0.5);
}","public void test05858() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.factorialDouble((-3253));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= 0 for n!
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns n!. Shorthand for <code>n</code> <a
 * href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the
 * product of the numbers <code>1,...,n</code> as a <code>double</code>.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>double</code>. The
 * largest value of <code>n</code> for which <code>n!</code> <
 * Double.MAX_VALUE</code> is 170. If the computed value exceeds
 * Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>
 * </ul>
 * </p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws IllegalArgumentException if n < 0
 */"
"public static double factorialDouble(final int n) {
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for n!"");
    }
    return Math.floor(Math.exp(factorialLog(n)) + 0.5);
}","public void test05959() throws Throwable {
    double double0 = MathUtils.factorialDouble(3297);
    assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
}","/**
 * Returns n!. Shorthand for <code>n</code> <a
 * href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the
 * product of the numbers <code>1,...,n</code> as a <code>double</code>.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>double</code>. The
 * largest value of <code>n</code> for which <code>n!</code> <
 * Double.MAX_VALUE</code> is 170. If the computed value exceeds
 * Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>
 * </ul>
 * </p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws IllegalArgumentException if n < 0
 */"
"public static boolean equals(double x, double y) {
    return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);
}","public void test06060() throws Throwable {
    boolean boolean0 = MathUtils.equals(0.464843750003638, 0.464843750003638);
    assertTrue(boolean0);
}","/**
 * Returns true iff both arguments are NaN or neither is NaN and they are
 * equal
 *
 * @param x first value
 * @param y second value
 * @return true if the values are equal or both are NaN
 */"
"public static double binomialCoefficientLog(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 0;
    }
    if ((k == 1) || (k == n - 1)) {
        return Math.log((double) n);
    }
    double logSum = 0;
    // n!/k!
    for (int i = k + 1; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    // divide by (n-k)!
    for (int i = 2; i <= n - k; i++) {
        logSum -= Math.log((double) i);
    }
    return logSum;
}","public void test06161() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(1535, 15);
    assertEquals(82.07639319888865, double0, 0.01);
}","/**
 * Returns the natural <code>log</code> of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double binomialCoefficientLog(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 0;
    }
    if ((k == 1) || (k == n - 1)) {
        return Math.log((double) n);
    }
    double logSum = 0;
    // n!/k!
    for (int i = k + 1; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    // divide by (n-k)!
    for (int i = 2; i <= n - k; i++) {
        logSum -= Math.log((double) i);
    }
    return logSum;
}","public void test06262() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(1, 0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the natural <code>log</code> of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double binomialCoefficientLog(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 0;
    }
    if ((k == 1) || (k == n - 1)) {
        return Math.log((double) n);
    }
    double logSum = 0;
    // n!/k!
    for (int i = k + 1; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    // divide by (n-k)!
    for (int i = 2; i <= n - k; i++) {
        logSum -= Math.log((double) i);
    }
    return logSum;
}","public void test06363() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficientLog((-1800), 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= k for binomial coefficient (n,k)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns the natural <code>log</code> of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static int subAndCheck(int x, int y) {
    long s = (long) x - (long) y;
    if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: subtract"");
    }
    return (int) s;
}","public void test06464() throws Throwable {
    int int0 = MathUtils.subAndCheck(0, 1);
    assertEquals((-1), int0);
}","/**
 * Subtract two integers, checking for overflow.
 *
 * @param x the minuend
 * @param y the subtrahend
 * @return the difference <code>x-y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static short sign(final short x) {
    return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
}","public void test06565() throws Throwable {
    short short0 = MathUtils.sign((short) (-1));
    assertEquals((short) (-1), short0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for short value <code>x</code>.
 * <p>
 * For a short value x, this method returns (short)(+1) if x > 0, (short)(0)
 * if x = 0, and (short)(-1) if x < 0.</p>
 *
 * @param x the value, a short
 * @return (short)(+1), (short)(0), or (short)(-1), depending on the sign of
 *         x
 */"
"public static short sign(final short x) {
    return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
}","public void test06666() throws Throwable {
    short short0 = MathUtils.sign((short) 0);
    assertEquals((short) 0, short0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for short value <code>x</code>.
 * <p>
 * For a short value x, this method returns (short)(+1) if x > 0, (short)(0)
 * if x = 0, and (short)(-1) if x < 0.</p>
 *
 * @param x the value, a short
 * @return (short)(+1), (short)(0), or (short)(-1), depending on the sign of
 *         x
 */"
"public static short sign(final short x) {
    return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
}","public void test06767() throws Throwable {
    short short0 = MathUtils.sign((short) 899);
    assertEquals((short) 1, short0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for short value <code>x</code>.
 * <p>
 * For a short value x, this method returns (short)(+1) if x > 0, (short)(0)
 * if x = 0, and (short)(-1) if x < 0.</p>
 *
 * @param x the value, a short
 * @return (short)(+1), (short)(0), or (short)(-1), depending on the sign of
 *         x
 */"
"public static long sign(final long x) {
    return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
}","public void test06868() throws Throwable {
    long long0 = MathUtils.sign((-1L));
    assertEquals((-1L), long0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for long value <code>x</code>.
 * <p>
 * For a long value x, this method returns +1L if x > 0, 0L if x = 0, and
 * -1L if x < 0.</p>
 *
 * @param x the value, a long
 * @return +1L, 0L, or -1L, depending on the sign of x
 */"
"public static long sign(final long x) {
    return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
}","public void test06969() throws Throwable {
    long long0 = MathUtils.sign(0L);
    assertEquals(0L, long0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for long value <code>x</code>.
 * <p>
 * For a long value x, this method returns +1L if x > 0, 0L if x = 0, and
 * -1L if x < 0.</p>
 *
 * @param x the value, a long
 * @return +1L, 0L, or -1L, depending on the sign of x
 */"
"public static long sign(final long x) {
    return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
}","public void test07070() throws Throwable {
    long long0 = MathUtils.sign((long) (short) 1);
    assertEquals(1L, long0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for long value <code>x</code>.
 * <p>
 * For a long value x, this method returns +1L if x > 0, 0L if x = 0, and
 * -1L if x < 0.</p>
 *
 * @param x the value, a long
 * @return +1L, 0L, or -1L, depending on the sign of x
 */"
"public static int sign(final int x) {
    return (x == 0) ? 0 : (x > 0) ? 1 : -1;
}","public void test07171() throws Throwable {
    int int0 = MathUtils.sign((-1593));
    assertEquals((-1), int0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for int value <code>x</code>.
 * <p>
 * For an int value x, this method returns +1 if x > 0, 0 if x = 0, and -1
 * if x < 0.</p>
 *
 * @param x the value, an int
 * @return +1, 0, or -1, depending on the sign of x
 */"
"public static int sign(final int x) {
    return (x == 0) ? 0 : (x > 0) ? 1 : -1;
}","public void test07272() throws Throwable {
    int int0 = MathUtils.sign(0);
    assertEquals(0, int0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for int value <code>x</code>.
 * <p>
 * For an int value x, this method returns +1 if x > 0, 0 if x = 0, and -1
 * if x < 0.</p>
 *
 * @param x the value, an int
 * @return +1, 0, or -1, depending on the sign of x
 */"
"public static int sign(final int x) {
    return (x == 0) ? 0 : (x > 0) ? 1 : -1;
}","public void test07373() throws Throwable {
    int int0 = MathUtils.sign(2);
    assertEquals(1, int0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for int value <code>x</code>.
 * <p>
 * For an int value x, this method returns +1 if x > 0, 0 if x = 0, and -1
 * if x < 0.</p>
 *
 * @param x the value, an int
 * @return +1, 0, or -1, depending on the sign of x
 */"
"public static float sign(final float x) {
    if (Float.isNaN(x)) {
        return Float.NaN;
    }
    return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
}","public void test07474() throws Throwable {
    float float0 = MathUtils.sign((-1138.658F));
    assertEquals((-1.0F), float0, 0.01F);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for float value <code>x</code>.
 * <p>
 * For a float value x, this method returns +1.0F if x > 0, 0.0F if x =
 * 0.0F, and -1.0F if x < 0. Returns <code>NaN</code> if <code>x</code>
 * is <code>NaN</code>.</p>
 *
 * @param x the value, a float
 * @return +1.0F, 0.0F, or -1.0F, depending on the sign of x
 */"
"public static float sign(final float x) {
    if (Float.isNaN(x)) {
        return Float.NaN;
    }
    return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
}","public void test07575() throws Throwable {
    float float0 = MathUtils.sign(0.0F);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for float value <code>x</code>.
 * <p>
 * For a float value x, this method returns +1.0F if x > 0, 0.0F if x =
 * 0.0F, and -1.0F if x < 0. Returns <code>NaN</code> if <code>x</code>
 * is <code>NaN</code>.</p>
 *
 * @param x the value, a float
 * @return +1.0F, 0.0F, or -1.0F, depending on the sign of x
 */"
"public static float sign(final float x) {
    if (Float.isNaN(x)) {
        return Float.NaN;
    }
    return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
}","public void test07676() throws Throwable {
    float float0 = MathUtils.sign((float) (short) 1);
    assertEquals(1.0F, float0, 0.01F);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for float value <code>x</code>.
 * <p>
 * For a float value x, this method returns +1.0F if x > 0, 0.0F if x =
 * 0.0F, and -1.0F if x < 0. Returns <code>NaN</code> if <code>x</code>
 * is <code>NaN</code>.</p>
 *
 * @param x the value, a float
 * @return +1.0F, 0.0F, or -1.0F, depending on the sign of x
 */"
"public static double sign(final double x) {
    if (Double.isNaN(x)) {
        return Double.NaN;
    }
    return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
}","public void test07777() throws Throwable {
    double double0 = MathUtils.sign((-759.6439791));
    assertEquals((-1.0), double0, 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for double precision <code>x</code>.
 * <p>
 * For a double value <code>x</code>, this method returns
 * <code>+1.0</code> if <code>x > 0</code>, <code>0.0</code> if
 * <code>x = 0.0</code>, and <code>-1.0</code> if <code>x < 0</code>.
 * Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.</p>
 *
 * @param x the value, a double
 * @return +1.0, 0.0, or -1.0, depending on the sign of x
 */"
"public static double sign(final double x) {
    if (Double.isNaN(x)) {
        return Double.NaN;
    }
    return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
}","public void test07878() throws Throwable {
    double double0 = MathUtils.sign(0.0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for double precision <code>x</code>.
 * <p>
 * For a double value <code>x</code>, this method returns
 * <code>+1.0</code> if <code>x > 0</code>, <code>0.0</code> if
 * <code>x = 0.0</code>, and <code>-1.0</code> if <code>x < 0</code>.
 * Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.</p>
 *
 * @param x the value, a double
 * @return +1.0, 0.0, or -1.0, depending on the sign of x
 */"
"public static double sign(final double x) {
    if (Double.isNaN(x)) {
        return Double.NaN;
    }
    return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
}","public void test07979() throws Throwable {
    double double0 = MathUtils.sign(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for double precision <code>x</code>.
 * <p>
 * For a double value <code>x</code>, this method returns
 * <code>+1.0</code> if <code>x > 0</code>, <code>0.0</code> if
 * <code>x = 0.0</code>, and <code>-1.0</code> if <code>x < 0</code>.
 * Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.</p>
 *
 * @param x the value, a double
 * @return +1.0, 0.0, or -1.0, depending on the sign of x
 */"
"public static double sign(final double x) {
    if (Double.isNaN(x)) {
        return Double.NaN;
    }
    return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
}","public void test08080() throws Throwable {
    double double0 = MathUtils.sign((double) 38);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for double precision <code>x</code>.
 * <p>
 * For a double value <code>x</code>, this method returns
 * <code>+1.0</code> if <code>x > 0</code>, <code>0.0</code> if
 * <code>x = 0.0</code>, and <code>-1.0</code> if <code>x < 0</code>.
 * Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.</p>
 *
 * @param x the value, a double
 * @return +1.0, 0.0, or -1.0, depending on the sign of x
 */"
"public static byte sign(final byte x) {
    return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
}","public void test08181() throws Throwable {
    byte byte0 = MathUtils.sign((byte) 31);
    assertEquals((byte) 1, byte0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for byte value <code>x</code>.
 * <p>
 * For a byte value x, this method returns (byte)(+1) if x > 0, (byte)(0) if
 * x = 0, and (byte)(-1) if x < 0.</p>
 *
 * @param x the value, a byte
 * @return (byte)(+1), (byte)(0), or (byte)(-1), depending on the sign of x
 */"
"public static byte sign(final byte x) {
    return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
}","public void test08282() throws Throwable {
    byte byte0 = MathUtils.sign((byte) 0);
    assertEquals((byte) 0, byte0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for byte value <code>x</code>.
 * <p>
 * For a byte value x, this method returns (byte)(+1) if x > 0, (byte)(0) if
 * x = 0, and (byte)(-1) if x < 0.</p>
 *
 * @param x the value, a byte
 * @return (byte)(+1), (byte)(0), or (byte)(-1), depending on the sign of x
 */"
"public static byte sign(final byte x) {
    return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
}","public void test08383() throws Throwable {
    byte byte0 = MathUtils.sign((byte) (-41));
    assertEquals((byte) (-1), byte0);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>
 * for byte value <code>x</code>.
 * <p>
 * For a byte value x, this method returns (byte)(+1) if x > 0, (byte)(0) if
 * x = 0, and (byte)(-1) if x < 0.</p>
 *
 * @param x the value, a byte
 * @return (byte)(+1), (byte)(0), or (byte)(-1), depending on the sign of x
 */"
"public static float round(float x, int scale, int roundingMethod) {
    float sign = indicator(x);
    float factor = (float) Math.pow(10.0f, scale) * sign;
    return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
}","public void test08484() throws Throwable {
    float float0 = MathUtils.round((float) 120, (int) (short) (-1), 5);
    assertEquals(120.0F, float0, 0.01F);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static float round(float x, int scale, int roundingMethod) {
    float sign = indicator(x);
    float factor = (float) Math.pow(10.0f, scale) * sign;
    return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
}","public void test08585() throws Throwable {
    float float0 = MathUtils.round(1.0F, 0, 0);
    assertEquals(2.0F, float0, 0.01F);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double round(double x, int scale, int roundingMethod) {
    try {
        return (new BigDecimal(Double.toString(x)).setScale(scale, roundingMethod)).doubleValue();
    } catch (NumberFormatException ex) {
        if (Double.isInfinite(x)) {
            return x;
        } else {
            return Double.NaN;
        }
    }
}","public void test08686() throws Throwable {
    double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 1, 570);
    assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double round(double x, int scale, int roundingMethod) {
    try {
        return (new BigDecimal(Double.toString(x)).setScale(scale, roundingMethod)).doubleValue();
    } catch (NumberFormatException ex) {
        if (Double.isInfinite(x)) {
            return x;
        } else {
            return Double.NaN;
        }
    }
}","public void test08787() throws Throwable {
    double double0 = MathUtils.round(Double.NaN, (-2742), 356);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double scalb(final double d, final int scaleFactor) {
    // handling of some important special cases
    if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    }
    // split the double in raw components
    final long bits = Double.doubleToLongBits(d);
    final long exponent = bits & 0x7ff0000000000000L;
    final long rest = bits & 0x800fffffffffffffL;
    // shift the exponent
    final long newBits = rest | (exponent + (((long) scaleFactor) << 52));
    return Double.longBitsToDouble(newBits);
}","public void test08888() throws Throwable {
    double double0 = MathUtils.scalb(1186.58, 0);
    assertEquals(1186.58, double0, 0.01);
}","/**
 * Scale a number by 2<sup>scaleFactor</sup>.
 * <p>If <code>d</code> is 0 or NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param scaleFactor power of two by which d sould be multiplied
 * @return d &times; 2<sup>scaleFactor</sup>
 * @since 2.0
 */"
"public static double scalb(final double d, final int scaleFactor) {
    // handling of some important special cases
    if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    }
    // split the double in raw components
    final long bits = Double.doubleToLongBits(d);
    final long exponent = bits & 0x7ff0000000000000L;
    final long rest = bits & 0x800fffffffffffffL;
    // shift the exponent
    final long newBits = rest | (exponent + (((long) scaleFactor) << 52));
    return Double.longBitsToDouble(newBits);
}","public void test08989() throws Throwable {
    double double0 = MathUtils.scalb(0.0, 0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Scale a number by 2<sup>scaleFactor</sup>.
 * <p>If <code>d</code> is 0 or NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param scaleFactor power of two by which d sould be multiplied
 * @return d &times; 2<sup>scaleFactor</sup>
 * @since 2.0
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    // split the double in raw components
    long bits = Double.doubleToLongBits(d);
    long sign = bits & 0x8000000000000000L;
    long exponent = bits & 0x7ff0000000000000L;
    long mantissa = bits & 0x000fffffffffffffL;
    if (d * (direction - d) >= 0) {
        // we should increase the mantissa
        if (mantissa == 0x000fffffffffffffL) {
            return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa + 1));
        }
    } else {
        // we should decrease the mantissa
        if (mantissa == 0L) {
            return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa - 1));
        }
    }
}","public void test09090() throws Throwable {
    double double0 = MathUtils.nextAfter(1.0, 0.0);
    assertEquals(0.9999999999999999, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * If <code>direction</code> is greater than or equal to<code>d</code>,
 * the smallest machine representable number strictly greater than
 * <code>d</code> is returned; otherwise the largest representable number
 * strictly less than <code>d</code> is returned.</p>
 * <p>
 * If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * direction is greater or smaller than d)
 * @return the next machine representable number in the specified direction
 * @since 1.2
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    // split the double in raw components
    long bits = Double.doubleToLongBits(d);
    long sign = bits & 0x8000000000000000L;
    long exponent = bits & 0x7ff0000000000000L;
    long mantissa = bits & 0x000fffffffffffffL;
    if (d * (direction - d) >= 0) {
        // we should increase the mantissa
        if (mantissa == 0x000fffffffffffffL) {
            return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa + 1));
        }
    } else {
        // we should decrease the mantissa
        if (mantissa == 0L) {
            return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa - 1));
        }
    }
}","public void test09191() throws Throwable {
    double double0 = MathUtils.nextAfter(0L, (-1386));
    assertEquals((-4.9E-324), double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * If <code>direction</code> is greater than or equal to<code>d</code>,
 * the smallest machine representable number strictly greater than
 * <code>d</code> is returned; otherwise the largest representable number
 * strictly less than <code>d</code> is returned.</p>
 * <p>
 * If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * direction is greater or smaller than d)
 * @return the next machine representable number in the specified direction
 * @since 1.2
 */"
"public static double nextAfter(double d, double direction) {
    // handling of some important special cases
    if (Double.isNaN(d) || Double.isInfinite(d)) {
        return d;
    } else if (d == 0) {
        return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
    }
    // special cases MAX_VALUE to infinity and  MIN_VALUE to 0
    // are handled just as normal numbers
    // split the double in raw components
    long bits = Double.doubleToLongBits(d);
    long sign = bits & 0x8000000000000000L;
    long exponent = bits & 0x7ff0000000000000L;
    long mantissa = bits & 0x000fffffffffffffL;
    if (d * (direction - d) >= 0) {
        // we should increase the mantissa
        if (mantissa == 0x000fffffffffffffL) {
            return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa + 1));
        }
    } else {
        // we should decrease the mantissa
        if (mantissa == 0L) {
            return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);
        } else {
            return Double.longBitsToDouble(sign | exponent | (mantissa - 1));
        }
    }
}","public void test09292() throws Throwable {
    double double0 = MathUtils.nextAfter(Double.NaN, 0.0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * Get the next machine representable number after a number, moving
 * in the direction of another number.
 * <p>
 * If <code>direction</code> is greater than or equal to<code>d</code>,
 * the smallest machine representable number strictly greater than
 * <code>d</code> is returned; otherwise the largest representable number
 * strictly less than <code>d</code> is returned.</p>
 * <p>
 * If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>
 *
 * @param d base number
 * @param direction (the only important thing is whether
 * direction is greater or smaller than d)
 * @return the next machine representable number in the specified direction
 * @since 1.2
 */"
"public static long mulAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: multiply"";
    if (a > b) {
        // use symmetry to reduce boundry cases
        ret = mulAndCheck(b, a);
    } else {
        if (a < 0) {
            if (b < 0) {
                // check for positive overflow with negative a, negative b
                if (a >= Long.MAX_VALUE / b) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else if (b > 0) {
                // check for negative overflow with negative a, positive b
                if (Long.MIN_VALUE / b <= a) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else {
                // assert b == 0
                ret = 0;
            }
        } else if (a > 0) {
            // assert a > 0
            // assert b > 0
            // check for positive overflow with positive a, positive b
            if (a <= Long.MAX_VALUE / b) {
                ret = a * b;
            } else {
                throw new ArithmeticException(msg);
            }
        } else {
            // assert a == 0
            ret = 0;
        }
    }
    return ret;
}","public void test09393() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.mulAndCheck(4503599627370495L, 2969L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: multiply
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Multiply two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the product <code>a * b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long mulAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: multiply"";
    if (a > b) {
        // use symmetry to reduce boundry cases
        ret = mulAndCheck(b, a);
    } else {
        if (a < 0) {
            if (b < 0) {
                // check for positive overflow with negative a, negative b
                if (a >= Long.MAX_VALUE / b) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else if (b > 0) {
                // check for negative overflow with negative a, positive b
                if (Long.MIN_VALUE / b <= a) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else {
                // assert b == 0
                ret = 0;
            }
        } else if (a > 0) {
            // assert a > 0
            // assert b > 0
            // check for positive overflow with positive a, positive b
            if (a <= Long.MAX_VALUE / b) {
                ret = a * b;
            } else {
                throw new ArithmeticException(msg);
            }
        } else {
            // assert a == 0
            ret = 0;
        }
    }
    return ret;
}","public void test09494() throws Throwable {
    long long0 = MathUtils.mulAndCheck(0L, 0L);
    assertEquals(0L, long0);
}","/**
 * Multiply two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the product <code>a * b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long mulAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: multiply"";
    if (a > b) {
        // use symmetry to reduce boundry cases
        ret = mulAndCheck(b, a);
    } else {
        if (a < 0) {
            if (b < 0) {
                // check for positive overflow with negative a, negative b
                if (a >= Long.MAX_VALUE / b) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else if (b > 0) {
                // check for negative overflow with negative a, positive b
                if (Long.MIN_VALUE / b <= a) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else {
                // assert b == 0
                ret = 0;
            }
        } else if (a > 0) {
            // assert a > 0
            // assert b > 0
            // check for positive overflow with positive a, positive b
            if (a <= Long.MAX_VALUE / b) {
                ret = a * b;
            } else {
                throw new ArithmeticException(msg);
            }
        } else {
            // assert a == 0
            ret = 0;
        }
    }
    return ret;
}","public void test09595() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.mulAndCheck(2432902008176640000L, (long) (-1337364193));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: multiply
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Multiply two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the product <code>a * b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long mulAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: multiply"";
    if (a > b) {
        // use symmetry to reduce boundry cases
        ret = mulAndCheck(b, a);
    } else {
        if (a < 0) {
            if (b < 0) {
                // check for positive overflow with negative a, negative b
                if (a >= Long.MAX_VALUE / b) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else if (b > 0) {
                // check for negative overflow with negative a, positive b
                if (Long.MIN_VALUE / b <= a) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else {
                // assert b == 0
                ret = 0;
            }
        } else if (a > 0) {
            // assert a > 0
            // assert b > 0
            // check for positive overflow with positive a, positive b
            if (a <= Long.MAX_VALUE / b) {
                ret = a * b;
            } else {
                throw new ArithmeticException(msg);
            }
        } else {
            // assert a == 0
            ret = 0;
        }
    }
    return ret;
}","public void test09696() throws Throwable {
    long long0 = MathUtils.mulAndCheck((-1L), (long) 0);
    assertEquals(0L, long0);
}","/**
 * Multiply two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the product <code>a * b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long mulAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: multiply"";
    if (a > b) {
        // use symmetry to reduce boundry cases
        ret = mulAndCheck(b, a);
    } else {
        if (a < 0) {
            if (b < 0) {
                // check for positive overflow with negative a, negative b
                if (a >= Long.MAX_VALUE / b) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else if (b > 0) {
                // check for negative overflow with negative a, positive b
                if (Long.MIN_VALUE / b <= a) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else {
                // assert b == 0
                ret = 0;
            }
        } else if (a > 0) {
            // assert a > 0
            // assert b > 0
            // check for positive overflow with positive a, positive b
            if (a <= Long.MAX_VALUE / b) {
                ret = a * b;
            } else {
                throw new ArithmeticException(msg);
            }
        } else {
            // assert a == 0
            ret = 0;
        }
    }
    return ret;
}","public void test09797() throws Throwable {
    long long0 = MathUtils.mulAndCheck((long) 21, (-2588L));
    assertEquals((-54348L), long0);
}","/**
 * Multiply two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the product <code>a * b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long mulAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: multiply"";
    if (a > b) {
        // use symmetry to reduce boundry cases
        ret = mulAndCheck(b, a);
    } else {
        if (a < 0) {
            if (b < 0) {
                // check for positive overflow with negative a, negative b
                if (a >= Long.MAX_VALUE / b) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else if (b > 0) {
                // check for negative overflow with negative a, positive b
                if (Long.MIN_VALUE / b <= a) {
                    ret = a * b;
                } else {
                    throw new ArithmeticException(msg);
                }
            } else {
                // assert b == 0
                ret = 0;
            }
        } else if (a > 0) {
            // assert a > 0
            // assert b > 0
            // check for positive overflow with positive a, positive b
            if (a <= Long.MAX_VALUE / b) {
                ret = a * b;
            } else {
                throw new ArithmeticException(msg);
            }
        } else {
            // assert a == 0
            ret = 0;
        }
    }
    return ret;
}","public void test09898() throws Throwable {
    long long0 = MathUtils.mulAndCheck((long) 19, (long) 19);
    assertEquals(361L, long0);
}","/**
 * Multiply two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the product <code>a * b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static int mulAndCheck(int x, int y) {
    long m = ((long) x) * ((long) y);
    if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: mul"");
    }
    return (int) m;
}","public void test09999() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.mulAndCheck((-150), (-1046936661));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Multiply two integers, checking for overflow.
 *
 * @param x a factor
 * @param y a factor
 * @return the product <code>x*y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static short indicator(final short x) {
    return (x >= ZS) ? PS : NS;
}","public void test100100() throws Throwable {
    short short0 = MathUtils.indicator((short) 899);
    assertEquals((short) 1, short0);
}","/**
 * For a short value x, this method returns (short)(+1) if x >= 0 and
 * (short)(-1) if x < 0.
 *
 * @param x the value, a short
 * @return (short)(+1) or (short)(-1), depending on the sign of x
 */"
"public static short indicator(final short x) {
    return (x >= ZS) ? PS : NS;
}","public void test101101() throws Throwable {
    short short0 = MathUtils.indicator((short) (-1));
    assertEquals((short) (-1), short0);
}","/**
 * For a short value x, this method returns (short)(+1) if x >= 0 and
 * (short)(-1) if x < 0.
 *
 * @param x the value, a short
 * @return (short)(+1) or (short)(-1), depending on the sign of x
 */"
"public static long indicator(final long x) {
    return (x >= 0L) ? 1L : -1L;
}","public void test102102() throws Throwable {
    long long0 = MathUtils.indicator(517L);
    assertEquals(1L, long0);
}","/**
 * For a long value x, this method returns +1L if x >= 0 and -1L if x < 0.
 *
 * @param x the value, a long
 * @return +1L or -1L, depending on the sign of x
 */"
"public static long indicator(final long x) {
    return (x >= 0L) ? 1L : -1L;
}","public void test103103() throws Throwable {
    long long0 = MathUtils.indicator((-455L));
    assertEquals((-1L), long0);
}","/**
 * For a long value x, this method returns +1L if x >= 0 and -1L if x < 0.
 *
 * @param x the value, a long
 * @return +1L or -1L, depending on the sign of x
 */"
"public static int indicator(final int x) {
    return (x >= 0) ? 1 : -1;
}","public void test104104() throws Throwable {
    int int0 = MathUtils.indicator((int) (byte) 0);
    assertEquals(1, int0);
}","/**
 * For an int value x, this method returns +1 if x >= 0 and -1 if x < 0.
 *
 * @param x the value, an int
 * @return +1 or -1, depending on the sign of x
 */"
"public static int indicator(final int x) {
    return (x >= 0) ? 1 : -1;
}","public void test105105() throws Throwable {
    int int0 = MathUtils.indicator((-5480));
    assertEquals((-1), int0);
}","/**
 * For an int value x, this method returns +1 if x >= 0 and -1 if x < 0.
 *
 * @param x the value, an int
 * @return +1 or -1, depending on the sign of x
 */"
"public static float round(float x, int scale) {
    return round(x, scale, BigDecimal.ROUND_HALF_UP);
}","public void test106106() throws Throwable {
    float float0 = MathUtils.round(784.95306F, (int) (short) 1);
    assertEquals(785.0F, float0, 0.01F);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounding using the {@link BigDecimal#ROUND_HALF_UP} method.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @return the rounded value.
 * @since 1.1
 */"
"public static float indicator(final float x) {
    if (Float.isNaN(x)) {
        return Float.NaN;
    }
    return (x >= 0.0F) ? 1.0F : -1.0F;
}","public void test107107() throws Throwable {
    float float0 = MathUtils.indicator(Float.NaN);
    assertEquals(Float.NaN, float0, 0.01F);
}","/**
 * For a float value x, this method returns +1.0F if x >= 0 and -1.0F if x <
 * 0. Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.
 *
 * @param x the value, a float
 * @return +1.0F or -1.0F, depending on the sign of x
 */"
"public static double indicator(final double x) {
    if (Double.isNaN(x)) {
        return Double.NaN;
    }
    return (x >= 0.0) ? 1.0 : -1.0;
}","public void test108108() throws Throwable {
    double double0 = MathUtils.indicator((-5235.0));
    assertEquals((-1.0), double0, 0.01);
}","/**
 * For a double precision value x, this method returns +1.0 if x >= 0 and
 * -1.0 if x < 0. Returns <code>NaN</code> if <code>x</code> is
 * <code>NaN</code>.
 *
 * @param x the value, a double
 * @return +1.0 or -1.0, depending on the sign of x
 */"
"public static double indicator(final double x) {
    if (Double.isNaN(x)) {
        return Double.NaN;
    }
    return (x >= 0.0) ? 1.0 : -1.0;
}","public void test109109() throws Throwable {
    double double0 = MathUtils.indicator(Double.NaN);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * For a double precision value x, this method returns +1.0 if x >= 0 and
 * -1.0 if x < 0. Returns <code>NaN</code> if <code>x</code> is
 * <code>NaN</code>.
 *
 * @param x the value, a double
 * @return +1.0 or -1.0, depending on the sign of x
 */"
"public static double indicator(final double x) {
    if (Double.isNaN(x)) {
        return Double.NaN;
    }
    return (x >= 0.0) ? 1.0 : -1.0;
}","public void test110110() throws Throwable {
    double double0 = MathUtils.indicator((double) 0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * For a double precision value x, this method returns +1.0 if x >= 0 and
 * -1.0 if x < 0. Returns <code>NaN</code> if <code>x</code> is
 * <code>NaN</code>.
 *
 * @param x the value, a double
 * @return +1.0 or -1.0, depending on the sign of x
 */"
"public static byte indicator(final byte x) {
    return (x >= ZB) ? PB : NB;
}","public void test111111() throws Throwable {
    byte byte0 = MathUtils.indicator((byte) 0);
    assertEquals((byte) 1, byte0);
}","/**
 * For a byte value x, this method returns (byte)(+1) if x >= 0 and
 * (byte)(-1) if x < 0.
 *
 * @param x the value, a byte
 * @return (byte)(+1) or (byte)(-1), depending on the sign of x
 */"
"public static byte indicator(final byte x) {
    return (x >= ZB) ? PB : NB;
}","public void test112112() throws Throwable {
    byte byte0 = MathUtils.indicator((byte) (-1));
    assertEquals((byte) (-1), byte0);
}","/**
 * For a byte value x, this method returns (byte)(+1) if x >= 0 and
 * (byte)(-1) if x < 0.
 *
 * @param x the value, a byte
 * @return (byte)(+1) or (byte)(-1), depending on the sign of x
 */"
"public static int gcd(int u, int v) {
    if ((u == 0) || (v == 0)) {
        return (Math.abs(u) + Math.abs(v));
    }
    // keep u and v negative, as negative integers range down to
    // -2^31, while positive numbers can only be as large as 2^31-1
    // (i.e. we can't necessarily negate a negative number without
    // overflow)
    /* assert u!=0 && v!=0; */
    if (u > 0) {
        u = -u;
    }
    // make u negative
    if (v > 0) {
        v = -v;
    }
    // make v negative
    // B1. [Find power of 2]
    int k = 0;
    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
        // while u and v are
        // both even...
        u /= 2;
        v /= 2;
        // cast out twos.
        k++;
    }
    if (k == 31) {
        throw new ArithmeticException(""overflow: gcd is 2^31"");
    }
    // B2. Initialize: u and v have been divided by 2^k and at least
    // one is odd.
    int t = ((u & 1) == 1) ? v : -(u / 2);
    // t negative: u was odd, v may be even (t replaces v)
    // t positive: u was even, v is odd (t replaces u)
    do {
        /* assert u<0 && v<0; */
        // B4/B3: cast out twos from t.
        while ((t & 1) == 0) {
            // while t is even..
            // cast out twos
            t /= 2;
        }
        // B5 [reset max(u,v)]
        if (t > 0) {
            u = -t;
        } else {
            v = t;
        }
        // B6/B3. at this point both u and v should be odd.
        t = (v - u) / 2;
        // |u| larger: t positive (replace u)
        // |v| larger: t negative (replace v)
    } while (t != 0);
    // gcd is u*2^k
    return -u * (1 << k);
}","public void test113113() throws Throwable {
    int int0 = MathUtils.gcd(2, 21);
    assertEquals(1, int0);
}","/**
 * <p>
 * Gets the greatest common divisor of the absolute value of two numbers,
 * using the ""binary gcd"" method which avoids division and modulo
 * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
 * Stein (1961).
 * </p>
 *
 * @param u a non-zero number
 * @param v a non-zero number
 * @return the greatest common divisor, never zero
 * @since 1.1
 */"
"public static int lcm(int a, int b) {
    return Math.abs(mulAndCheck(a / gcd(a, b), b));
}","public void test114114() throws Throwable {
    int int0 = MathUtils.lcm(840, 840);
    assertEquals(840, int0);
}","/**
 * Returns the least common multiple between two integer values.
 *
 * @param a the first integer value.
 * @param b the second integer value.
 * @return the least common multiple between a and b.
 * @throws ArithmeticException if the lcm is too large to store as an int
 * @since 1.1
 */"
"public static int gcd(int u, int v) {
    if ((u == 0) || (v == 0)) {
        return (Math.abs(u) + Math.abs(v));
    }
    // keep u and v negative, as negative integers range down to
    // -2^31, while positive numbers can only be as large as 2^31-1
    // (i.e. we can't necessarily negate a negative number without
    // overflow)
    /* assert u!=0 && v!=0; */
    if (u > 0) {
        u = -u;
    }
    // make u negative
    if (v > 0) {
        v = -v;
    }
    // make v negative
    // B1. [Find power of 2]
    int k = 0;
    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
        // while u and v are
        // both even...
        u /= 2;
        v /= 2;
        // cast out twos.
        k++;
    }
    if (k == 31) {
        throw new ArithmeticException(""overflow: gcd is 2^31"");
    }
    // B2. Initialize: u and v have been divided by 2^k and at least
    // one is odd.
    int t = ((u & 1) == 1) ? v : -(u / 2);
    // t negative: u was odd, v may be even (t replaces v)
    // t positive: u was even, v is odd (t replaces u)
    do {
        /* assert u<0 && v<0; */
        // B4/B3: cast out twos from t.
        while ((t & 1) == 0) {
            // while t is even..
            // cast out twos
            t /= 2;
        }
        // B5 [reset max(u,v)]
        if (t > 0) {
            u = -t;
        } else {
            v = t;
        }
        // B6/B3. at this point both u and v should be odd.
        t = (v - u) / 2;
        // |u| larger: t positive (replace u)
        // |v| larger: t negative (replace v)
    } while (t != 0);
    // gcd is u*2^k
    return -u * (1 << k);
}","public void test115115() throws Throwable {
    int int0 = MathUtils.gcd((-405), 0);
    assertEquals(405, int0);
}","/**
 * <p>
 * Gets the greatest common divisor of the absolute value of two numbers,
 * using the ""binary gcd"" method which avoids division and modulo
 * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
 * Stein (1961).
 * </p>
 *
 * @param u a non-zero number
 * @param v a non-zero number
 * @return the greatest common divisor, never zero
 * @since 1.1
 */"
"public static int gcd(int u, int v) {
    if ((u == 0) || (v == 0)) {
        return (Math.abs(u) + Math.abs(v));
    }
    // keep u and v negative, as negative integers range down to
    // -2^31, while positive numbers can only be as large as 2^31-1
    // (i.e. we can't necessarily negate a negative number without
    // overflow)
    /* assert u!=0 && v!=0; */
    if (u > 0) {
        u = -u;
    }
    // make u negative
    if (v > 0) {
        v = -v;
    }
    // make v negative
    // B1. [Find power of 2]
    int k = 0;
    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
        // while u and v are
        // both even...
        u /= 2;
        v /= 2;
        // cast out twos.
        k++;
    }
    if (k == 31) {
        throw new ArithmeticException(""overflow: gcd is 2^31"");
    }
    // B2. Initialize: u and v have been divided by 2^k and at least
    // one is odd.
    int t = ((u & 1) == 1) ? v : -(u / 2);
    // t negative: u was odd, v may be even (t replaces v)
    // t positive: u was even, v is odd (t replaces u)
    do {
        /* assert u<0 && v<0; */
        // B4/B3: cast out twos from t.
        while ((t & 1) == 0) {
            // while t is even..
            // cast out twos
            t /= 2;
        }
        // B5 [reset max(u,v)]
        if (t > 0) {
            u = -t;
        } else {
            v = t;
        }
        // B6/B3. at this point both u and v should be odd.
        t = (v - u) / 2;
        // |u| larger: t positive (replace u)
        // |v| larger: t negative (replace v)
    } while (t != 0);
    // gcd is u*2^k
    return -u * (1 << k);
}","public void test116116() throws Throwable {
    int int0 = MathUtils.gcd(0, 0);
    assertEquals(0, int0);
}","/**
 * <p>
 * Gets the greatest common divisor of the absolute value of two numbers,
 * using the ""binary gcd"" method which avoids division and modulo
 * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
 * Stein (1961).
 * </p>
 *
 * @param u a non-zero number
 * @param v a non-zero number
 * @return the greatest common divisor, never zero
 * @since 1.1
 */"
"public static double factorialLog(final int n) {
    if (n < 0) {
        throw new IllegalArgumentException(""must have n > 0 for n!"");
    }
    double logSum = 0;
    for (int i = 2; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    return logSum;
}","public void test117117() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.factorialLog((-2545));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n > 0 for n!
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns the natural logarithm of n!.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static long factorial(final int n) {
    long result = Math.round(factorialDouble(n));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""factorial value is too large to fit in a long"");
    }
    return factorials[n];
}","public void test118118() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.factorial((short) (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= 0 for n!
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns n!. Shorthand for <code>n</code> <a
 * href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the
 * product of the numbers <code>1,...,n</code>.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which <code>n!</code> <
 * Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>
 * an <code>ArithMeticException </code> is thrown.</li>
 * </ul>
 * </p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 * @throws IllegalArgumentException if n < 0
 */"
"public static long factorial(final int n) {
    long result = Math.round(factorialDouble(n));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""factorial value is too large to fit in a long"");
    }
    return factorials[n];
}","public void test119119() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.factorial(570);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // factorial value is too large to fit in a long
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns n!. Shorthand for <code>n</code> <a
 * href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the
 * product of the numbers <code>1,...,n</code>.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which <code>n!</code> <
 * Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>
 * an <code>ArithMeticException </code> is thrown.</li>
 * </ul>
 * </p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 * @throws IllegalArgumentException if n < 0
 */"
"public static long factorial(final int n) {
    long result = Math.round(factorialDouble(n));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""factorial value is too large to fit in a long"");
    }
    return factorials[n];
}","public void test120120() throws Throwable {
    long long0 = MathUtils.factorial(0);
    assertEquals(1L, long0);
}","/**
 * Returns n!. Shorthand for <code>n</code> <a
 * href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the
 * product of the numbers <code>1,...,n</code>.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>n >= 0</code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which <code>n!</code> <
 * Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>
 * an <code>ArithMeticException </code> is thrown.</li>
 * </ul>
 * </p>
 *
 * @param n argument
 * @return <code>n!</code>
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 * @throws IllegalArgumentException if n < 0
 */"
"public static boolean equals(double[] x, double[] y) {
    if ((x == null) || (y == null)) {
        return !((x == null) ^ (y == null));
    }
    if (x.length != y.length) {
        return false;
    }
    for (int i = 0; i < x.length; ++i) {
        if (!equals(x[i], y[i])) {
            return false;
        }
    }
    return true;
}","public void test121121() throws Throwable {
    double[] doubleArray0 = new double[6];
    double[] doubleArray1 = new double[0];
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    assertFalse(boolean0);
}","/**
 * Returns true iff both arguments are null or have same dimensions
 * and all their elements are {@link #equals(double,double) equals}
 *
 * @param x first array
 * @param y second array
 * @return true if the values are both null or have same dimension
 * and equal elements
 * @since 1.2
 */"
"public static boolean equals(double[] x, double[] y) {
    if ((x == null) || (y == null)) {
        return !((x == null) ^ (y == null));
    }
    if (x.length != y.length) {
        return false;
    }
    for (int i = 0; i < x.length; ++i) {
        if (!equals(x[i], y[i])) {
            return false;
        }
    }
    return true;
}","public void test122122() throws Throwable {
    boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
    assertTrue(boolean0);
}","/**
 * Returns true iff both arguments are null or have same dimensions
 * and all their elements are {@link #equals(double,double) equals}
 *
 * @param x first array
 * @param y second array
 * @return true if the values are both null or have same dimension
 * and equal elements
 * @since 1.2
 */"
"public static boolean equals(double[] x, double[] y) {
    if ((x == null) || (y == null)) {
        return !((x == null) ^ (y == null));
    }
    if (x.length != y.length) {
        return false;
    }
    for (int i = 0; i < x.length; ++i) {
        if (!equals(x[i], y[i])) {
            return false;
        }
    }
    return true;
}","public void test123123() throws Throwable {
    double[] doubleArray0 = new double[3];
    boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    assertFalse(boolean0);
}","/**
 * Returns true iff both arguments are null or have same dimensions
 * and all their elements are {@link #equals(double,double) equals}
 *
 * @param x first array
 * @param y second array
 * @return true if the values are both null or have same dimension
 * and equal elements
 * @since 1.2
 */"
"public static boolean equals(double[] x, double[] y) {
    if ((x == null) || (y == null)) {
        return !((x == null) ^ (y == null));
    }
    if (x.length != y.length) {
        return false;
    }
    for (int i = 0; i < x.length; ++i) {
        if (!equals(x[i], y[i])) {
            return false;
        }
    }
    return true;
}","public void test124124() throws Throwable {
    double[] doubleArray0 = new double[6];
    boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    assertFalse(boolean0);
}","/**
 * Returns true iff both arguments are null or have same dimensions
 * and all their elements are {@link #equals(double,double) equals}
 *
 * @param x first array
 * @param y second array
 * @return true if the values are both null or have same dimension
 * and equal elements
 * @since 1.2
 */"
"public static boolean equals(double x, double y) {
    return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);
}","public void test125125() throws Throwable {
    boolean boolean0 = MathUtils.equals(Double.NaN, 738.67692);
    assertFalse(boolean0);
}","/**
 * Returns true iff both arguments are NaN or neither is NaN and they are
 * equal
 *
 * @param x first value
 * @param y second value
 * @return true if the values are equal or both are NaN
 */"
"public static boolean equals(double[] x, double[] y) {
    if ((x == null) || (y == null)) {
        return !((x == null) ^ (y == null));
    }
    if (x.length != y.length) {
        return false;
    }
    for (int i = 0; i < x.length; ++i) {
        if (!equals(x[i], y[i])) {
            return false;
        }
    }
    return true;
}","public void test126126() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[2] = Double.NaN;
    boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    assertTrue(boolean0);
}","/**
 * Returns true iff both arguments are null or have same dimensions
 * and all their elements are {@link #equals(double,double) equals}
 *
 * @param x first array
 * @param y second array
 * @return true if the values are both null or have same dimension
 * and equal elements
 * @since 1.2
 */"
"public static boolean equals(double x, double y) {
    return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);
}","public void test127127() throws Throwable {
    boolean boolean0 = MathUtils.equals(379.65915000474, 0.0);
    assertFalse(boolean0);
}","/**
 * Returns true iff both arguments are NaN or neither is NaN and they are
 * equal
 *
 * @param x first value
 * @param y second value
 * @return true if the values are equal or both are NaN
 */"
"public static double binomialCoefficientLog(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 0;
    }
    if ((k == 1) || (k == n - 1)) {
        return Math.log((double) n);
    }
    double logSum = 0;
    // n!/k!
    for (int i = k + 1; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    // divide by (n-k)!
    for (int i = 2; i <= n - k; i++) {
        logSum -= Math.log((double) i);
    }
    return logSum;
}","public void test128128() throws Throwable {
    double double0 = MathUtils.binomialCoefficientLog(1638, (byte) 1);
    assertEquals(7.401231264413015, double0, 0.01);
}","/**
 * Returns the natural <code>log</code> of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double binomialCoefficientDouble(final int n, final int k) {
    return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
}","public void test129129() throws Throwable {
    double double0 = MathUtils.binomialCoefficientDouble(17, 0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * Returns a <code>double</code> representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>double</code>. The
 * largest value of <code>n</code> for which all coefficients are <
 * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,
 * Double.POSITIVE_INFINITY is returned</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double binomialCoefficientLog(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 0;
    }
    if ((k == 1) || (k == n - 1)) {
        return Math.log((double) n);
    }
    double logSum = 0;
    // n!/k!
    for (int i = k + 1; i <= n; i++) {
        logSum += Math.log((double) i);
    }
    // divide by (n-k)!
    for (int i = 2; i <= n - k; i++) {
        logSum -= Math.log((double) i);
    }
    return logSum;
}","public void test130130() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficientLog((-1109), (-1109));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= 0 for binomial coefficient (n,k)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns the natural <code>log</code> of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static double binomialCoefficientDouble(final int n, final int k) {
    return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
}","public void test131131() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficientDouble(0, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= k for binomial coefficient (n,k)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns a <code>double</code> representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>double</code>. The
 * largest value of <code>n</code> for which all coefficients are <
 * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,
 * Double.POSITIVE_INFINITY is returned</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 */"
"public static long binomialCoefficient(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 1;
    }
    if ((k == 1) || (k == n - 1)) {
        return n;
    }
    long result = Math.round(binomialCoefficientDouble(n, k));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""result too large to represent in a long integer"");
    }
    return result;
}","public void test132132() throws Throwable {
    long long0 = MathUtils.binomialCoefficient(1, (-1));
    assertEquals(0L, long0);
}","/**
 * Returns an exact representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which all coefficients are
 * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
 * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is
 * thrown.</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 */"
"public static long binomialCoefficient(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 1;
    }
    if ((k == 1) || (k == n - 1)) {
        return n;
    }
    long result = Math.round(binomialCoefficientDouble(n, k));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""result too large to represent in a long integer"");
    }
    return result;
}","public void test133133() throws Throwable {
    long long0 = MathUtils.binomialCoefficient(0, (-1));
    assertEquals(0L, long0);
}","/**
 * Returns an exact representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which all coefficients are
 * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
 * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is
 * thrown.</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 */"
"public static long binomialCoefficient(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 1;
    }
    if ((k == 1) || (k == n - 1)) {
        return n;
    }
    long result = Math.round(binomialCoefficientDouble(n, k));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""result too large to represent in a long integer"");
    }
    return result;
}","public void test134134() throws Throwable {
    long long0 = MathUtils.binomialCoefficient(19, 0);
    assertEquals(1L, long0);
}","/**
 * Returns an exact representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which all coefficients are
 * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
 * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is
 * thrown.</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 */"
"public static long binomialCoefficient(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 1;
    }
    if ((k == 1) || (k == n - 1)) {
        return n;
    }
    long result = Math.round(binomialCoefficientDouble(n, k));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""result too large to represent in a long integer"");
    }
    return result;
}","public void test135135() throws Throwable {
    long long0 = MathUtils.binomialCoefficient(31, 31);
    assertEquals(1L, long0);
}","/**
 * Returns an exact representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which all coefficients are
 * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
 * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is
 * thrown.</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 */"
"public static long binomialCoefficient(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 1;
    }
    if ((k == 1) || (k == n - 1)) {
        return n;
    }
    long result = Math.round(binomialCoefficientDouble(n, k));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""result too large to represent in a long integer"");
    }
    return result;
}","public void test136136() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficient((-176), (-1207));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= 0 for binomial coefficient (n,k)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns an exact representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which all coefficients are
 * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
 * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is
 * thrown.</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 */"
"public static long binomialCoefficient(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 1;
    }
    if ((k == 1) || (k == n - 1)) {
        return n;
    }
    long result = Math.round(binomialCoefficientDouble(n, k));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""result too large to represent in a long integer"");
    }
    return result;
}","public void test137137() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficient(7, 2826);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // must have n >= k for binomial coefficient (n,k)
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns an exact representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which all coefficients are
 * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
 * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is
 * thrown.</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 */"
"public static long binomialCoefficient(final int n, final int k) {
    if (n < k) {
        throw new IllegalArgumentException(""must have n >= k for binomial coefficient (n,k)"");
    }
    if (n < 0) {
        throw new IllegalArgumentException(""must have n >= 0 for binomial coefficient (n,k)"");
    }
    if ((n == k) || (k == 0)) {
        return 1;
    }
    if ((k == 1) || (k == n - 1)) {
        return n;
    }
    long result = Math.round(binomialCoefficientDouble(n, k));
    if (result == Long.MAX_VALUE) {
        throw new ArithmeticException(""result too large to represent in a long integer"");
    }
    return result;
}","public void test138138() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.binomialCoefficient(974, 840);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // result too large to represent in a long integer
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Returns an exact representation of the <a
 * href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial
 * Coefficient</a>, ""<code>n choose k</code>"", the number of
 * <code>k</code>-element subsets that can be selected from an
 * <code>n</code>-element set.
 * <p>
 * <Strong>Preconditions</strong>:
 * <ul>
 * <li> <code>0 <= k <= n </code> (otherwise
 * <code>IllegalArgumentException</code> is thrown)</li>
 * <li> The result is small enough to fit into a <code>long</code>. The
 * largest value of <code>n</code> for which all coefficients are
 * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
 * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is
 * thrown.</li>
 * </ul></p>
 *
 * @param n the size of the set
 * @param k the size of the subsets to be counted
 * @return <code>n choose k</code>
 * @throws IllegalArgumentException if preconditions are not met.
 * @throws ArithmeticException if the result is too large to be represented
 *         by a long integer.
 */"
"public static long addAndCheck(long a, long b) {
    return addAndCheck(a, b, ""overflow: add"");
}","public void test139139() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.addAndCheck(9223372036854775807L, 9223372036854775807L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: add
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Add two long integers, checking for overflow.
 *
 * @param a an addend
 * @param b an addend
 * @return the sum <code>a+b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long subAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: subtract"";
    if (b == Long.MIN_VALUE) {
        if (a < 0) {
            ret = a - b;
        } else {
            throw new ArithmeticException(msg);
        }
    } else {
        // use additive inverse
        ret = addAndCheck(a, -b, msg);
    }
    return ret;
}","public void test140140() throws Throwable {
    long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
    assertEquals(0L, long0);
}","/**
 * Subtract two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the difference <code>a-b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static long subAndCheck(long a, long b) {
    long ret;
    String msg = ""overflow: subtract"";
    if (b == Long.MIN_VALUE) {
        if (a < 0) {
            ret = a - b;
        } else {
            throw new ArithmeticException(msg);
        }
    } else {
        // use additive inverse
        ret = addAndCheck(a, -b, msg);
    }
    return ret;
}","public void test141141() throws Throwable {
    long long0 = MathUtils.subAndCheck((long) 1, 517L);
    assertEquals((-516L), long0);
}","/**
 * Subtract two long integers, checking for overflow.
 *
 * @param a first value
 * @param b second value
 * @return the difference <code>a-b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static int addAndCheck(int x, int y) {
    long s = (long) x + (long) y;
    if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: add"");
    }
    return (int) s;
}","public void test142142() throws Throwable {
    // Undeclared exception!
    try {
        MathUtils.addAndCheck(2147390916, 2147390916);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: add
        //
        verifyException(""org.apache.commons.math.util.MathUtils"", e);
    }
}","/**
 * Add two integers, checking for overflow.
 *
 * @param x an addend
 * @param y an addend
 * @return the sum <code>x+y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static int addAndCheck(int x, int y) {
    long s = (long) x + (long) y;
    if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
        throw new ArithmeticException(""overflow: add"");
    }
    return (int) s;
}","public void test143143() throws Throwable {
    int int0 = MathUtils.addAndCheck((int) (byte) 1, 0);
    assertEquals(1, int0);
}","/**
 * Add two integers, checking for overflow.
 *
 * @param x an addend
 * @param y an addend
 * @return the sum <code>x+y</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         int
 * @since 1.1
 */"
"public static double log(double base, double x) {
    return Math.log(x) / Math.log(base);
}","public void test144144() throws Throwable {
    double double0 = MathUtils.log(0.9999999999999999, 1.0);
    assertEquals(-0.0, double0, 0.01);
}","/**
 * <p>Returns the
 * <a href=""http://mathworld.wolfram.com/Logarithm.html"">logarithm</a>
 * for base <code>b</code> of <code>x</code>.
 * </p>
 * <p>Returns <code>NaN<code> if either argument is negative.  If
 * <code>base</code> is 0 and <code>x</code> is positive, 0 is returned.
 * If <code>base</code> is positive and <code>x</code> is 0,
 * <code>Double.NEGATIVE_INFINITY</code> is returned.  If both arguments
 * are 0, the result is <code>NaN</code>.</p>
 *
 * @param base the base of the logarithm, must be greater than 0
 * @param x argument, must be greater than 0
 * @return the value of the logarithm - the number y such that base^y = x.
 * @since 1.2
 */"
"public static double round(double x, int scale) {
    return round(x, scale, BigDecimal.ROUND_HALF_UP);
}","public void test145145() throws Throwable {
    double double0 = MathUtils.round((double) 0, 6);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @return the rounded value.
 * @since 1.1
 */"
"public static float round(float x, int scale) {
    return round(x, scale, BigDecimal.ROUND_HALF_UP);
}","public void test146146() throws Throwable {
    float float0 = MathUtils.round((-717.957F), 11);
    assertEquals((-717.957F), float0, 0.01F);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounding using the {@link BigDecimal#ROUND_HALF_UP} method.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @return the rounded value.
 * @since 1.1
 */"
"public static double normalizeAngle(double a, double center) {
    return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);
}","public void test147147() throws Throwable {
    double double0 = MathUtils.normalizeAngle(0L, 2.2909552562);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Normalize an angle in a 2&pi wide interval around a center value.
 * <p>This method has three main uses:</p>
 * <ul>
 *   <li>normalize an angle between 0 and 2&pi;:<br/>
 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
 *   <li>normalize an angle between -&pi; and +&pi;<br/>
 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
 *   <li>compute the angle between two defining angular positions:<br>
 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
 * </ul>
 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
 * exactly, the result interval is <em>closed</em>, it cannot be half-closed
 * as would be more satisfactory in a purely mathematical view.</p>
 * @param a angle to normalize
 * @param center center of the desired 2&pi; interval for the result
 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
 * @since 1.2
 */"
"public static double sinh(double x) {
    return (Math.exp(x) - Math.exp(-x)) / 2.0;
}","public void test148148() throws Throwable {
    double double0 = MathUtils.sinh(6);
    assertEquals(201.71315737027922, double0, 0.01);
}","/**
 * Returns the <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"">
 * hyperbolic sine</a> of x.
 *
 * @param x double value for which to find the hyperbolic sine
 * @return hyperbolic sine of x
 */"
"public static long addAndCheck(long a, long b) {
    return addAndCheck(a, b, ""overflow: add"");
}","public void test149149() throws Throwable {
    long long0 = MathUtils.addAndCheck((-1528L), (-1528L));
    assertEquals((-3056L), long0);
}","/**
 * Add two long integers, checking for overflow.
 *
 * @param a an addend
 * @param b an addend
 * @return the sum <code>a+b</code>
 * @throws ArithmeticException if the result can not be represented as an
 *         long
 * @since 1.2
 */"
"public static float round(float x, int scale, int roundingMethod) {
    float sign = indicator(x);
    float factor = (float) Math.pow(10.0f, scale) * sign;
    return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
}","public void test150150() throws Throwable {
    float float0 = MathUtils.round((float) (-1528L), (int) (short) 1, (int) (short) 1);
    assertEquals((-1527.9F), float0, 0.01F);
}","/**
 * Round the given value to the specified number of decimal places. The
 * value is rounded using the given method which is any method defined in
 * {@link BigDecimal}.
 *
 * @param x the value to round.
 * @param scale the number of digits to the right of the decimal point.
 * @param roundingMethod the rounding method as defined in
 *        {@link BigDecimal}.
 * @return the rounded value.
 * @since 1.1
 */"
"public static int hash(double[] value) {
    return Arrays.hashCode(value);
}","public void test151151() throws Throwable {
    double[] doubleArray0 = new double[2];
    int int0 = MathUtils.hash(doubleArray0);
    assertEquals(961, int0);
}","/**
 * Returns an integer hash code representing the given double array.
 *
 * @param value the value to be hashed (may be null)
 * @return the hash code
 * @since 1.2
 */"
"public static int hash(double value) {
    return new Double(value).hashCode();
}","public void test152152() throws Throwable {
    int int0 = MathUtils.hash((double) (-1528L));
    assertEquals((-1063788544), int0);
}","/**
 * Returns an integer hash code representing the given double value.
 *
 * @param value the value to be hashed
 * @return the hash code
 */"
