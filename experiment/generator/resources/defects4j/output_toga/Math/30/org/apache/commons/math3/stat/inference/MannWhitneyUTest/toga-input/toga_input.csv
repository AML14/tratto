focal_method,test_prefix,docstring
"public double mannWhitneyUTest(final double[] x, final double[] y) throws NullArgumentException, NoDataException, ConvergenceException, MaxCountExceededException {
    ensureDataConformance(x, y);
    final double Umax = mannWhitneyU(x, y);
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double Umin = x.length * y.length - Umax;
    return calculateAsymptoticPValue(Umin, x.length, y.length);
}","public void test000() throws Throwable {
    NaNStrategy naNStrategy0 = NaNStrategy.REMOVED;
    TiesStrategy tiesStrategy0 = TiesStrategy.MINIMUM;
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest(naNStrategy0, tiesStrategy0);
    double[] doubleArray0 = new double[12];
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
    double[] doubleArray1 = new double[0];
    try {
        mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no data
        //
        verifyException(""org.apache.commons.math3.stat.inference.MannWhitneyUTest"", e);
    }
}","/**
 * Returns the asymptotic <i>observed significance level</i>, or <a href=
 * ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">
 * p-value</a>, associated with a <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples.
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p><p>
 * Ties give rise to biased variance at the moment. See e.g. <a
 * href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf""
 * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return asymptotic p-value
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 * @throws ConvergenceException if the p-value can not be computed due to a
 * convergence error
 * @throws MaxCountExceededException if the maximum number of iterations
 * is exceeded
 */"
"public double mannWhitneyU(final double[] x, final double[] y) throws NullArgumentException, NoDataException {
    ensureDataConformance(x, y);
    final double[] z = concatenateSamples(x, y);
    final double[] ranks = naturalRanking.rank(z);
    double sumRankX = 0;
    /*
         * The ranks for x is in the first x.length entries in ranks because x
         * is in the first x.length entries in z
         */
    for (int i = 0; i < x.length; ++i) {
        sumRankX += ranks[i];
    }
    /*
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n1 is the number of observations in sample 1.
         */
    final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double U2 = x.length * y.length - U1;
    return FastMath.max(U1, U2);
}","public void test011() throws Throwable {
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest();
    mannWhitneyUTest0.mannWhitneyU((double[]) null, (double[]) null);
}","/**
 * Computes the <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples possibly of
 * different length.
 * <p>
 * This statistic can be used to perform a Mann-Whitney U test evaluating
 * the null hypothesis that the two independent samples has equal mean.
 * </p>
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 */"
"public double mannWhitneyU(final double[] x, final double[] y) throws NullArgumentException, NoDataException {
    ensureDataConformance(x, y);
    final double[] z = concatenateSamples(x, y);
    final double[] ranks = naturalRanking.rank(z);
    double sumRankX = 0;
    /*
         * The ranks for x is in the first x.length entries in ranks because x
         * is in the first x.length entries in z
         */
    for (int i = 0; i < x.length; ++i) {
        sumRankX += ranks[i];
    }
    /*
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n1 is the number of observations in sample 1.
         */
    final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double U2 = x.length * y.length - U1;
    return FastMath.max(U1, U2);
}","public void test022() throws Throwable {
    double[] doubleArray0 = new double[2];
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest();
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, (double[]) null);
}","/**
 * Computes the <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples possibly of
 * different length.
 * <p>
 * This statistic can be used to perform a Mann-Whitney U test evaluating
 * the null hypothesis that the two independent samples has equal mean.
 * </p>
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 */"
"public double mannWhitneyUTest(final double[] x, final double[] y) throws NullArgumentException, NoDataException, ConvergenceException, MaxCountExceededException {
    ensureDataConformance(x, y);
    final double Umax = mannWhitneyU(x, y);
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double Umin = x.length * y.length - Umax;
    return calculateAsymptoticPValue(Umin, x.length, y.length);
}","public void test033() throws Throwable {
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest();
    double[] doubleArray0 = new double[0];
    try {
        mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no data
        //
        verifyException(""org.apache.commons.math3.stat.inference.MannWhitneyUTest"", e);
    }
}","/**
 * Returns the asymptotic <i>observed significance level</i>, or <a href=
 * ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">
 * p-value</a>, associated with a <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples.
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p><p>
 * Ties give rise to biased variance at the moment. See e.g. <a
 * href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf""
 * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return asymptotic p-value
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 * @throws ConvergenceException if the p-value can not be computed due to a
 * convergence error
 * @throws MaxCountExceededException if the maximum number of iterations
 * is exceeded
 */"
"public MannWhitneyUTest(final NaNStrategy nanStrategy, final TiesStrategy tiesStrategy) {
    naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);
}","public void test044() throws Throwable {
    NaNStrategy naNStrategy0 = NaNStrategy.REMOVED;
    TiesStrategy tiesStrategy0 = TiesStrategy.SEQUENTIAL;
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest(naNStrategy0, tiesStrategy0);
}","/**
 * Create a test instance using the given strategies for NaN's and ties.
 * Only use this if you are sure of what you are doing.
 *
 * @param nanStrategy
 *            specifies the strategy that should be used for Double.NaN's
 * @param tiesStrategy
 *            specifies the strategy that should be used for ties
 */"
"public double mannWhitneyU(final double[] x, final double[] y) throws NullArgumentException, NoDataException {
    ensureDataConformance(x, y);
    final double[] z = concatenateSamples(x, y);
    final double[] ranks = naturalRanking.rank(z);
    double sumRankX = 0;
    /*
         * The ranks for x is in the first x.length entries in ranks because x
         * is in the first x.length entries in z
         */
    for (int i = 0; i < x.length; ++i) {
        sumRankX += ranks[i];
    }
    /*
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n1 is the number of observations in sample 1.
         */
    final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double U2 = x.length * y.length - U1;
    return FastMath.max(U1, U2);
}","public void test055() throws Throwable {
    NaNStrategy naNStrategy0 = NaNStrategy.FIXED;
    TiesStrategy tiesStrategy0 = TiesStrategy.AVERAGE;
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest(naNStrategy0, tiesStrategy0);
    double[] doubleArray0 = new double[0];
    try {
        mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no data
        //
        verifyException(""org.apache.commons.math3.stat.inference.MannWhitneyUTest"", e);
    }
}","/**
 * Computes the <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples possibly of
 * different length.
 * <p>
 * This statistic can be used to perform a Mann-Whitney U test evaluating
 * the null hypothesis that the two independent samples has equal mean.
 * </p>
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 */"
"public double mannWhitneyUTest(final double[] x, final double[] y) throws NullArgumentException, NoDataException, ConvergenceException, MaxCountExceededException {
    ensureDataConformance(x, y);
    final double Umax = mannWhitneyU(x, y);
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double Umin = x.length * y.length - Umax;
    return calculateAsymptoticPValue(Umin, x.length, y.length);
}","public void test066() throws Throwable {
    NaNStrategy naNStrategy0 = NaNStrategy.MINIMAL;
    TiesStrategy tiesStrategy0 = TiesStrategy.MAXIMUM;
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest(naNStrategy0, tiesStrategy0);
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = Double.NaN;
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
}","/**
 * Returns the asymptotic <i>observed significance level</i>, or <a href=
 * ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">
 * p-value</a>, associated with a <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples.
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p><p>
 * Ties give rise to biased variance at the moment. See e.g. <a
 * href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf""
 * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return asymptotic p-value
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 * @throws ConvergenceException if the p-value can not be computed due to a
 * convergence error
 * @throws MaxCountExceededException if the maximum number of iterations
 * is exceeded
 */"
"public double mannWhitneyU(final double[] x, final double[] y) throws NullArgumentException, NoDataException {
    ensureDataConformance(x, y);
    final double[] z = concatenateSamples(x, y);
    final double[] ranks = naturalRanking.rank(z);
    double sumRankX = 0;
    /*
         * The ranks for x is in the first x.length entries in ranks because x
         * is in the first x.length entries in z
         */
    for (int i = 0; i < x.length; ++i) {
        sumRankX += ranks[i];
    }
    /*
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n1 is the number of observations in sample 1.
         */
    final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double U2 = x.length * y.length - U1;
    return FastMath.max(U1, U2);
}","public void test077() throws Throwable {
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest();
    double[] doubleArray0 = new double[1];
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray0);
    double[] doubleArray1 = new double[3];
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray1);
    doubleArray1[0] = Double.NaN;
    doubleArray1[1] = Double.NaN;
    doubleArray1[2] = Double.NaN;
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray1);
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray1, doubleArray0);
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray1, doubleArray0);
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray0);
    doubleArray0[0] = Double.NaN;
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray1);
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray1, doubleArray0);
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray0);
    mannWhitneyUTest0.mannWhitneyU((double[]) null, doubleArray1);
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
    try {
        mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math3.stat.inference.MannWhitneyUTest"", e);
    }
}","/**
 * Computes the <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples possibly of
 * different length.
 * <p>
 * This statistic can be used to perform a Mann-Whitney U test evaluating
 * the null hypothesis that the two independent samples has equal mean.
 * </p>
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 */"
"public double mannWhitneyUTest(final double[] x, final double[] y) throws NullArgumentException, NoDataException, ConvergenceException, MaxCountExceededException {
    ensureDataConformance(x, y);
    final double Umax = mannWhitneyU(x, y);
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double Umin = x.length * y.length - Umax;
    return calculateAsymptoticPValue(Umin, x.length, y.length);
}","public void test088() throws Throwable {
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest();
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 0.0;
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray0);
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
}","/**
 * Returns the asymptotic <i>observed significance level</i>, or <a href=
 * ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">
 * p-value</a>, associated with a <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples.
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p><p>
 * Ties give rise to biased variance at the moment. See e.g. <a
 * href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf""
 * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return asymptotic p-value
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 * @throws ConvergenceException if the p-value can not be computed due to a
 * convergence error
 * @throws MaxCountExceededException if the maximum number of iterations
 * is exceeded
 */"
"public double mannWhitneyU(final double[] x, final double[] y) throws NullArgumentException, NoDataException {
    ensureDataConformance(x, y);
    final double[] z = concatenateSamples(x, y);
    final double[] ranks = naturalRanking.rank(z);
    double sumRankX = 0;
    /*
         * The ranks for x is in the first x.length entries in ranks because x
         * is in the first x.length entries in z
         */
    for (int i = 0; i < x.length; ++i) {
        sumRankX += ranks[i];
    }
    /*
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n1 is the number of observations in sample 1.
         */
    final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double U2 = x.length * y.length - U1;
    return FastMath.max(U1, U2);
}","public void test099() throws Throwable {
    NaNStrategy naNStrategy0 = NaNStrategy.MAXIMAL;
    TiesStrategy tiesStrategy0 = TiesStrategy.MAXIMUM;
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest(naNStrategy0, tiesStrategy0);
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (-2031.392814);
    doubleArray0[1] = 215.098246;
    doubleArray0[2] = 0.0;
    doubleArray0[3] = 66.7604712;
    doubleArray0[4] = (-49.803165123);
    doubleArray0[5] = 0.0;
    doubleArray0[6] = 0.0;
    doubleArray0[7] = 12.0;
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
    double[] doubleArray1 = new double[4];
    mannWhitneyUTest0.mannWhitneyU(doubleArray1, doubleArray1);
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray1, doubleArray1);
    double double0 = Double.POSITIVE_INFINITY;
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray1, (double[]) null);
    doubleArray1[0] = double0;
    double double1 = (-6266.0);
    doubleArray1[1] = double1;
    double double2 = (-4279.3534738841);
    doubleArray1[2] = double2;
    double double3 = 1.0;
    doubleArray1[3] = double3;
    mannWhitneyUTest0.mannWhitneyU(doubleArray1, doubleArray1);
    try {
        mannWhitneyUTest0.mannWhitneyU(doubleArray1, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // null is not allowed
        //
        verifyException(""org.apache.commons.math3.stat.inference.MannWhitneyUTest"", e);
    }
}","/**
 * Computes the <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples possibly of
 * different length.
 * <p>
 * This statistic can be used to perform a Mann-Whitney U test evaluating
 * the null hypothesis that the two independent samples has equal mean.
 * </p>
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 */"
"public double mannWhitneyUTest(final double[] x, final double[] y) throws NullArgumentException, NoDataException, ConvergenceException, MaxCountExceededException {
    ensureDataConformance(x, y);
    final double Umax = mannWhitneyU(x, y);
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double Umin = x.length * y.length - Umax;
    return calculateAsymptoticPValue(Umin, x.length, y.length);
}","public void test1111() throws Throwable {
    TiesStrategy tiesStrategy0 = TiesStrategy.MINIMUM;
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest((NaNStrategy) null, tiesStrategy0);
    double[] doubleArray0 = new double[2];
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray0);
    mannWhitneyUTest0.mannWhitneyU(doubleArray0, doubleArray0);
    // Undeclared exception!
    try {
        mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.math3.stat.ranking.NaturalRanking"", e);
    }
}","/**
 * Returns the asymptotic <i>observed significance level</i>, or <a href=
 * ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">
 * p-value</a>, associated with a <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples.
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p><p>
 * Ties give rise to biased variance at the moment. See e.g. <a
 * href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf""
 * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return asymptotic p-value
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 * @throws ConvergenceException if the p-value can not be computed due to a
 * convergence error
 * @throws MaxCountExceededException if the maximum number of iterations
 * is exceeded
 */"
"public double mannWhitneyUTest(final double[] x, final double[] y) throws NullArgumentException, NoDataException, ConvergenceException, MaxCountExceededException {
    ensureDataConformance(x, y);
    final double Umax = mannWhitneyU(x, y);
    /*
         * It can be shown that U1 + U2 = n1 * n2
         */
    final double Umin = x.length * y.length - Umax;
    return calculateAsymptoticPValue(Umin, x.length, y.length);
}","public void test1313() throws Throwable {
    TiesStrategy tiesStrategy0 = TiesStrategy.MINIMUM;
    MannWhitneyUTest mannWhitneyUTest0 = new MannWhitneyUTest((NaNStrategy) null, tiesStrategy0);
    double[] doubleArray0 = new double[1];
    mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray0);
    double[] doubleArray1 = new double[1];
    // Undeclared exception!
    try {
        mannWhitneyUTest0.mannWhitneyUTest(doubleArray0, doubleArray1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the asymptotic <i>observed significance level</i>, or <a href=
 * ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">
 * p-value</a>, associated with a <a
 * href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney
 * U statistic</a> comparing mean for two independent samples.
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>j</sub> the j'th individual in the second sample. Note that the
 * samples would often have different length.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>All observations in the two samples are independent.</li>
 * <li>The observations are at least ordinal (continuous are also ordinal).</li>
 * </ul>
 * </p><p>
 * Ties give rise to biased variance at the moment. See e.g. <a
 * href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf""
 * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>
 *
 * @param x the first sample
 * @param y the second sample
 * @return asymptotic p-value
 * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
 * @throws NoDataException if {@code x} or {@code y} are zero-length.
 * @throws ConvergenceException if the p-value can not be computed due to a
 * convergence error
 * @throws MaxCountExceededException if the maximum number of iterations
 * is exceeded
 */"
