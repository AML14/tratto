focal_method,test_prefix,docstring
"@Override
public void clearAst() {
    root = null;
    // While we're at it, clear out any saved text in the source file on
    // the assumption that if we're dumping the parse tree, then we probably
    // assume regenerating everything else is a smart idea also.
    sourceFile.clearCachedSource();
}","public void test00() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""com.google.javascript.rhino.head.ast.ParenthesizedExpression"");
    SourceFile sourceFile0 = syntheticAst0.getSourceFile();
    JsAst jsAst0 = new JsAst(sourceFile0);
    jsAst0.clearAst();
}",""
"public String getOriginalPath() {
    return originalPath != null ? originalPath : fileName;
}","public void test11() throws Throwable {
    SourceFile sourceFile0 = SourceFile.fromFile(""^,Pl%K"");
    JsAst jsAst0 = new JsAst(sourceFile0);
    jsAst0.setSourceFile(sourceFile0);
    assertEquals(""^,Pl%K"", sourceFile0.getOriginalPath());
}",""
"@Override
public Node getAstRoot(AbstractCompiler compiler) {
    if (root == null) {
        parse(compiler);
        root.setInputId(inputId);
    }
    return root;
}","public void test22() throws Throwable {
    SourceFile sourceFile0 = SourceFile.fromCode(""|XB12`zHog09(#(_"", """");
    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
    Compiler compiler0 = new Compiler();
    ImmutableList.of(sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0);
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    jsAst0.getAstRoot(compiler0);
    Node node0 = jsAst0.getAstRoot(compiler0);
    assertNotNull(node0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test23() throws Throwable {
    SourceFile sourceFile0 = SourceFile.fromCode(""|XB12`zHog09(#(_"", """");
    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
    Compiler compiler0 = new Compiler();
    ImmutableList.of(sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0);
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    jsAst0.getAstRoot(compiler0);
    Node node0 = jsAst0.getAstRoot(compiler0);
    assertEquals(4096, node0.getSourcePosition());
}",""
"@Override
Node parseTestCode(String js) {
    initCompilerOptionsIfTesting();
    CompilerInput input = new CompilerInput(SourceFile.fromCode(""[testcode]"", js));
    if (inputsById == null) {
        inputsById = Maps.newHashMap();
    }
    putCompilerInput(input.getInputId(), input);
    return input.getAstRoot(this);
}","public void test34() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""|XB12`zHog09(#(_"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // duplicate key: desc
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test45() throws Throwable {
    SourceFile sourceFile0 = SourceFile.fromCode(""|XB12`zHog09(#(_"", """");
    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Compiler compiler0 = new Compiler();
    SourceFile sourceFile1 = SourceFile.fromCode(""|XB12`zHog09(#(_"", (String) null);
    ImmutableList<SourceFile> immutableList0 = ImmutableList.of(sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile1);
    compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) immutableList0, compilerOptions0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    Node node0 = jsAst0.getAstRoot(compiler0);
    assertEquals((-1), node0.getSourcePosition());
}",""
"@Override
public Node getAstRoot(AbstractCompiler compiler) {
    if (root == null) {
        parse(compiler);
        root.setInputId(inputId);
    }
    return root;
}","public void test46() throws Throwable {
    SourceFile sourceFile0 = SourceFile.fromCode(""|XB12`zHog09(#(_"", """");
    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Compiler compiler0 = new Compiler();
    SourceFile sourceFile1 = SourceFile.fromCode(""|XB12`zHog09(#(_"", (String) null);
    ImmutableList<SourceFile> immutableList0 = ImmutableList.of(sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile0, sourceFile1);
    compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) immutableList0, compilerOptions0);
    JsAst jsAst0 = new JsAst(sourceFile0);
    Node node0 = jsAst0.getAstRoot(compiler0);
    assertNotNull(node0);
}",""
