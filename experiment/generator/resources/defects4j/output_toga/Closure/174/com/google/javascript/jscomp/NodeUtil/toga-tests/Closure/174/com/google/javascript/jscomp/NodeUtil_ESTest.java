/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 00:24:19 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.DataInputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.List;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.getStringNumberValue("+infGnity");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        NodeUtil.getStringNumberValue("?@{%;&56t6i");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Integer integer0 = new Integer(1799);
        nodeUtil_MatchDeclaration0.equals(integer0);
        Node.newNumber(Double.NEGATIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = Node.newString(1318, "[#K.lmr7[", 1318, 0);
        Node node1 = node0.cloneTree();
        NodeUtil.isStatementParent(node1);
        Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) null, "[#K.lmr7[", node0, "[#K.lmr7[");
        NodeUtil.getFunctionBody(node1);
        String string0 = null;
        SourceMap.DetailLevel.valueOf(string0);
        NodeUtil.isStatement(node2);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newNumber((-794.181), 0, (-454));
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "G@H!&{`(r6rw", node0, "");
        NodeUtil.isStatement(node1);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Node node0 = null;
        NodeUtil.functionCallHasSideEffects((Node) null);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        boolean boolean0 = true;
        PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
        Compiler compiler0 = new Compiler((PrintStream) null);
        compiler0.initCompilerOptionsIfTesting();
        compiler0.getRoot();
        peepholeMinimizeConditions0.getExceptionHandler((Node) null);
        int int0 = 14;
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        NodeUtil.precedence(14);
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        NodeUtil.isValidSimpleName("Ljava/lang/Object;D");
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        NodeUtil.isSimpleOperatorType((-471));
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Integer integer0 = new Integer(1801);
        nodeUtil_MatchDeclaration0.equals(integer0);
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        node0.setDouble(Double.NEGATIVE_INFINITY);
        NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
        Compiler compiler0 = new Compiler();
        NodeUtil.mayEffectMutableState(node0, compiler0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeSyntheticCode(compiler0, "6^2aU(8*wN9L|W@", "6^2aU(8*wN9L|W@");
        NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
        Node node0 = new Node(32);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        NodeUtil.isPrototypeProperty(node1);
        peepholeFoldConstants0.mayHaveSideEffects(node1);
        MockPrintStream mockPrintStream0 = new MockPrintStream((File) null);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        node0.checkTreeEquals(node1);
        VerboseMessageFormatter verboseMessageFormatter0 = null;
        verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(43, node0, node0, node0, node0);
        NodeUtil.isPrototypeProperty(node0);
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        nodeUtil_NumbericResultPredicate0.apply(node1);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3832));
        NodeUtil.has(node1, nodeUtil_NumbericResultPredicate0, nodeUtil_MatchShallowStatement0);
        NodeUtil.mayEffectMutableState(node1, compiler0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.booleanNode(true);
        Node.newNumber(1257.8548, 2, 12);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        NodeUtil.isValidSimpleName("Ljava/lang/Object;D");
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        NodeUtil.getNearestFunctionName(node0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(43, node0, node0, node0, node0);
        NodeUtil.isPrototypeProperty(node0);
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
        NodeUtil.precedence(42);
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = Node.newNumber(1257.8548, 2, 12);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        NodeUtil.isValidSimpleName("Ljava/lang/Object;D");
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        Node node0 = null;
        NodeUtil.getSourceName((Node) null);
        NodeUtil.mayBeString((Node) null, false);
        JqueryCodingConvention jqueryCodingConvention0 = null;
        jqueryCodingConvention0 = new JqueryCodingConvention();
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        NodeUtil.getSourceName((Node) null);
        NodeUtil.isSwitchCase((Node) null);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node0 = null;
        NodeUtil.isRelationalOperation((Node) null);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "3bL7)9C|)EX9==:");
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.getLoopCodeBlock(node0);
        NodeUtil.isBleedingFunctionName((Node) null);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        Node node0 = new Node(17);
        boolean boolean0 = NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.opToStrNoFail(4);
        StatementFusion statementFusion0 = null;
        statementFusion0 = new StatementFusion(boolean0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        Node node0 = Node.newString("cRm.google.javascript.jscomp.Compiler");
        node0.isQuotedString();
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceName(node0);
        StatementFusion statementFusion0 = new StatementFusion(false);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
        NodeUtil.getNodeTypeReferenceCount(node0, 12, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.containsType(node0, 1, nodeUtil_MatchShallowStatement0);
        NodeUtil.opToStrNoFail(678);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        String string0 = "\\EiU8m/,~q.CIvWC";
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        int int0 = 12;
        NodeUtil.precedence(12);
        Node node0 = Node.newNumber(0.0, (-9), 40);
        node0.getDouble();
        Node node1 = NodeUtil.numberNode(0.0, node0);
        Node node2 = ControlFlowAnalysis.getExceptionHandler(node1);
        int int1 = 190;
        Node node3 = new Node(int0, node2, node1, node0, node1, int1, node2.FLAG_ARGUMENTS_UNMODIFIED);
        node3.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        double double0 = (-1197.0);
        Node node0 = null;
        Node node1 = NodeUtil.numberNode((-1197.0), (Node) null);
        node1.addChildrenToBack((Node) null);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        NodeUtil.precedence(42);
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        NodeUtil.getStringValue(Double.POSITIVE_INFINITY);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        exploitAssigns0.getCodingConvention();
        String string0 = "w";
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        Node node0 = Node.newNumber(0.7, 12, 0);
        Node node1 = NodeUtil.newName((CodingConvention) null, "", node0, "_}OLcxW09Vw<b:K~`|");
        Node node2 = NodeUtil.getArgumentForFunction(node0, node0.LENGTH);
        Node node3 = StatementFusion.fuseExpressionIntoExpression(node1, node2);
        Node node4 = NodeUtil.getLoopCodeBlock(node3);
        Node node5 = NodeUtil.getBestLValueOwner(node4);
        int int0 = 2256;
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = null;
        nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(node5.SYNTHETIC_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        Node node0 = Node.newString(1318, "[#K.lmr7[", 1318, 1318);
        Node node1 = node0.cloneTree();
        NodeUtil.mayBeString(node1, true);
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        NodeUtil.newName(jqueryCodingConvention0, "RKS'7na6KJ", node0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        Node node0 = Node.newString((-2753), "", (-2753), (-2753));
        NodeUtil.getStringValue(node0);
        node0.setChangeTime(18);
        node0.removeProp((-2753));
        Node node1 = NodeUtil.getRValueOfLValue(node0);
        node1.copyInformationFromForTree(node0);
        node0.getString();
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        Node node0 = Node.newString(113, "");
        NodeUtil.newExpr(node0);
        Node node1 = null;
        NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        Node node0 = Node.newNumber((-2540.3154012789), 5, 5);
        Node node1 = new Node(107, node0, node0, 107, 1116);
        node1.isVarArgs();
        node0.addChildToBack(node1);
        NodeUtil.isExprCall(node1);
        NodeUtil.allArgsUnescapedLocal(node0);
        NodeUtil.getArrayElementStringValue(node1);
        NodeUtil.isObjectCallMethod(node1, " vj2m]0\"#[1w");
        NodeUtil.Visitor nodeUtil_Visitor0 = null;
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.valueOf(" vj2m]0\"#[1w");
        Object object0 = new Object();
        sourceMap_DetailLevel0.equals(object0);
        NodeUtil.visitPreOrder(node0, nodeUtil_Visitor0, sourceMap_DetailLevel0);
        NodeUtil.isObjectLitKey(node1);
        NodeUtil.isSimpleOperatorType(node0.SIDE_EFFECT_FLAGS);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        Node node0 = Node.newString(1318, "Mbj", 1318, 1318);
        Node node1 = node0.cloneTree();
        NodeUtil.mayBeString(node1, true);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.isForIn(node0);
        NodeUtil.isFunctionObjectCall(node0);
        NodeUtil.getNumberValue(node0);
        NodeUtil.getBestLValue(node0);
        String string0 = " Calls: ";
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isForIn(node0);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        NodeUtil.isForIn(node0);
        NodeUtil.getSourceFile(node0);
        NodeUtil.isExprCall(node0);
        NodeUtil.getNumberValue(node0);
        Node node1 = new Node(107);
        Node node2 = NodeUtil.getBestLValue(node1);
        String string0 = " Calls: ";
        node2.toStringTree();
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceName(node0);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        nodeUtil_NumbericResultPredicate0.apply(node0);
        NodeUtil.isCommutative(29);
        byte[] byteArray0 = new byte[0];
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        NodeUtil.isLatin((String) null);
        NodeUtil.isEmptyBlock(node0);
        NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceName(node0);
        Node node1 = NodeUtil.numberNode(0.0, node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isGetOrSetKey(node1);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
        nodeUtil_NumbericResultPredicate0.equals(exploitAssigns0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate1 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
        Node node3 = peepholeMinimizeConditions0.skipFinallyNodes(node2);
        nodeUtil_NumbericResultPredicate1.apply(node3);
        nodeUtil_NumbericResultPredicate0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        Compiler compiler0 = new Compiler();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        Node node0 = compiler0.parseInputs();
        Node[] nodeArray0 = new Node[3];
        nodeArray0[0] = node0;
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node((-360), node0, node0, node0, node0);
        NodeUtil.isPrototypeProperty(node1);
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
        NodeUtil.precedence(1073741823);
        NodeUtil.hasCatchHandler(node1);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        NodeUtil.getStringNumberValue("yO!");
        Compiler compiler0 = new Compiler();
        compiler0.getRoot();
        NodeUtil.newUndefinedNode((Node) null);
        Node node0 = compiler0.externAndJsRoot;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        Node.newString(141, "6~,MtbYhd");
        NodeUtil.isStrWhiteSpaceChar(43);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("u");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Integer integer0 = new Integer(21);
        nodeUtil_MatchDeclaration0.equals(double0);
        Node node0 = new Node(21);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        Node node0 = Node.newString(313, "");
        NodeUtil.getLoopCodeBlock(node0);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        NodeUtil.isGetOrSetKey(node0);
        NodeUtil.containsType(node1, node1.IS_DISPATCHER);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        NodeUtil.getStringNumberValue("6^2aU(8*wN9L|W@");
        Compiler compiler0 = new Compiler();
        Scope.Var scope_Var0 = null;
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        Node node0 = null;
        String string0 = "y9&eGH/n:";
        Node node1 = Node.newString(1091, "y9&eGH/n:", 1091, 1630);
        referenceCollectingCallback0.hotSwapScript((Node) null, node1);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferences(scope_Var0);
        ImmutableMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> immutableMap0 = ImmutableMap.of(scope_Var0, referenceCollectingCallback_ReferenceCollection0);
        compiler0.updateGlobalVarReferences(immutableMap0, node1);
        compiler0.getPropertyMap();
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.isForIn(node0);
        NodeUtil.getSourceFile(node0);
        NodeUtil.isFunctionObjectCall(node0);
        NodeUtil.getNumberValue(node0);
        NodeUtil.getBestLValue(node0);
        String string0 = " Calls: ";
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        NodeUtil.getBestLValueName(node0);
        NodeUtil.getPrototypeClassName(node0);
        NodeUtil.constructorCallHasSideEffects(node0);
        ClosureCodingConvention closureCodingConvention0 = null;
        closureCodingConvention0 = new ClosureCodingConvention();
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        Node node0 = new Node(17);
        NodeUtil.isHoistedFunctionDeclaration(node0);
        NodeUtil.opToStrNoFail(4);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = null;
        nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceName(node0);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        Node node0 = Node.newString(1318, "[#K.lmr7[", 1318, 0);
        node0.cloneTree();
        String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
        Node node1 = NodeUtil.getBestLValue(node0);
        NodeUtil.isStatementBlock(node1);
        NodeUtil.mayEffectMutableState(node1);
        NodeUtil.isBooleanResult(node1);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        Node node0 = new Node(104, (-1082), 21);
        NodeUtil.getSourceName(node0);
        NodeUtil.isSwitchCase(node0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node0 = null;
        NodeUtil.isImmutableResult((Node) null);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = Node.newNumber(1257.8548, 2, 12);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.isEmptyBlock(node1);
        NodeUtil.isForIn(node1);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.getLoopCodeBlock(node0);
        peepholeRemoveDeadCode0.tryFoldWhile((Node) null);
        PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
        peepholeCollectPropertyAssignments0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceName(node0);
        StatementFusion statementFusion0 = new StatementFusion(true);
        Node node1 = statementFusion0.optimizeSubtree(node0);
        NodeUtil.isSwitchCase(node1);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        Node node0 = Node.newString(10, "_fZ+9+%");
        PeepholeFoldConstants.evaluateComparison((-1044), node0, node0);
        String string0 = "?@{%;&56t6i";
        MockPrintStream mockPrintStream0 = new MockPrintStream("?@{%;&56t6i", "?@{%;&56t6i");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Normalize.parseAndNormalizeTestCode(compiler0, string0);
        ControlFlowAnalysis.getCatchHandlerForBlock(node0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceFile(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isFunctionObjectApply(node0);
        PeepholeFoldConstants.evaluateComparison(12, node0, node0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("$a", "$a");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        String string0 = "?\"R@fy{";
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        NodeUtil.getStringNumberValue("+infinity");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Integer integer0 = new Integer((-6));
        nodeUtil_MatchDeclaration0.equals(integer0);
        Node node0 = new Node((-6));
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        NodeUtil.opToStrNoFail(21);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node.newString(5731, "+");
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+");
        int int0 = (-521);
        node0.setType(int0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.opToStr(32);
        NodeUtil.isEmptyBlock(node0);
        NodeUtil.isForIn(node0);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.mayBeString(node0, false);
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node1 = new Node(1466, node0);
        Node node2 = NodeUtil.newName(jqueryCodingConvention0, "Infinity", node1);
        NodeUtil.getBestJSDocInfo(node2);
        NodeUtil.getNameReferenceCount(node2, "typeof");
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        String string0 = "3I{%;&56t6i";
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        NodeUtil.newQualifiedNameNode((CodingConvention) jqueryCodingConvention0, "DEGENERATE", node0, "3I{%;&56t6i");
        NodeUtil.getFunctionBody(node0);
        SourceMap.DetailLevel.valueOf(string0);
        NodeUtil.isStatement(node0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        Node node0 = Node.newString(1318, "[#K.lmr7[", 1318, 1318);
        Node node1 = node0.cloneTree();
        NodeUtil.mayBeString(node1, true);
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        node1.removeProp(48);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        NodeUtil.mapMainToClone(node0, node0);
        NodeUtil.getBestLValueOwner(node1);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        Node node0 = Node.newString(313, "");
        Compiler compiler0 = new Compiler();
        Node node1 = compiler0.parseTestCode("");
        int int0 = (-1003);
        node0.setType(int0);
        node0.replaceChildAfter(node1, node1);
        Node node2 = NodeUtil.getLoopCodeBlock(node0);
        NodeUtil.getBestJSDocInfo(node2);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        node0.wasEmptyNode();
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = NodeUtil.getConditionExpression(node0);
        NodeUtil.isPrototypeProperty(node1);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Integer integer0 = new Integer(1799);
        nodeUtil_MatchDeclaration0.equals(integer0);
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        node0.getDouble();
        node0.setDouble(Double.NEGATIVE_INFINITY);
        NodeUtil.isStrWhiteSpaceChar(15);
        NodeUtil.isImmutableValue(node0);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        Node node0 = Node.newString(10, ".ZF");
        Node node1 = new Node(15, node0, node0, node0, 15, 16);
        NodeUtil.numberNode(4095, node1);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isGetOrSetKey(node1);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
        node2.toString(false, false, false);
        NodeUtil.isLiteralValue(node2, true);
        NodeUtil.canBeSideEffected(node0);
        NodeUtil.hasCatchHandler(node1);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        Node node0 = Node.newString(1318, "[#K.lmr7[", 1318, 1318);
        Node node1 = node0.cloneTree();
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        NodeUtil.newName(jqueryCodingConvention0, "RKS'7na6KJ", node0);
        Node node2 = NodeUtil.getArgumentForCallOrNew(node1, 1747);
        NodeUtil.isVarDeclaration(node2);
        int int0 = 404;
        NodeUtil.precedence(int0);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        Node[] nodeArray0 = new Node[5];
        Node node0 = Node.newString(10, "_fZ+9+%");
        Node node1 = new Node(232, node0, node0, node0, 98, 110);
        Node node2 = NodeUtil.numberNode((-750.88699464128), node1);
        nodeArray0[0] = node2;
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isGetOrSetKey(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node3 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
        nodeUtil_NumbericResultPredicate0.equals(node3);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-453));
        NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_MatchNodeType0);
        Compiler compiler0 = new Compiler();
        NodeUtil.mayEffectMutableState((Node) null, compiler0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "3bL7)9C|)EX9==:");
        NodeUtil.isCallOrNewTarget(node0);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "fX", node0, "fX");
        NodeUtil.getSourceName(node1);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        nodeUtil_NumbericResultPredicate0.apply(node1);
        NodeUtil.isCommutative(5);
        byte[] byteArray0 = new byte[0];
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        NodeUtil.isLatin(".'PFYaOwYg3'qp~Rj");
        NodeUtil.isEmptyBlock(node1);
        NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Node node2 = new Node(133, node0, node0, node1, node0);
        NodeUtil.isPrototypeProperty(node1);
        Compiler compiler0 = new Compiler();
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler1 = new Compiler(loggerErrorManager0);
        NodeUtil.nodeTypeMayHaveSideEffects(node2, compiler1);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        nodeUtil_NumbericResultPredicate0.apply(node2);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(147);
        NodeUtil.has(node2, nodeUtil_MatchShallowStatement0, nodeUtil_MatchNodeType0);
        NodeUtil.mayEffectMutableState(node1, compiler1);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        NodeUtil.getStringNumberValue("");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Integer integer0 = new Integer(1799);
        Object object0 = new Object();
        nodeUtil_MatchDeclaration0.equals(object0);
        Node node0 = Node.newNumber(0.0);
        node0.setDouble(0.0);
        NodeUtil.isStrWhiteSpaceChar(109);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getBestLValueName(node0);
        node0.setChangeTime(18);
        node0.removeProp((-1527));
        Node node1 = new Node(22, node0, node0, node0);
        node1.getChangeTime();
        NodeUtil.getSourceName(node0);
        StatementFusion statementFusion0 = new StatementFusion(true);
        statementFusion0.optimizeSubtree(node1);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = Node.newNumber(1257.8548, 2, 12);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        NodeUtil.isObjectCallMethod(node1, "y:3bctW");
        StatementFusion statementFusion0 = new StatementFusion(true);
        Node node2 = statementFusion0.tryFuseStatementsAggressively(node0);
        NodeUtil.mayEffectMutableState(node2);
        NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        node0.wasEmptyNode();
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        NodeUtil.precedence(42);
        NodeUtil.getStringNumberValue(" does not have a condition.");
        Node node1 = compiler0.externsRoot;
        Node node2 = NodeUtil.getAssignedValue((Node) null);
        NodeUtil.getAssignedValue(node2);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Node node0 = Node.newString("G@H!&{`(r6rw", 1799, 119);
        NodeUtil.mayHaveSideEffects(node0);
        PeepholeFoldConstants.evaluateComparison(536870912, node0, node0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("$a", "$a");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        String string0 = "com.google.javascript.jscomp.DefaultPassConfig$31";
        Normalize.parseAndNormalizeTestCode(compiler0, string0);
        ControlFlowAnalysis.getCatchHandlerForBlock(node0);
        NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        NodeUtil.precedence(42);
        NodeUtil.isNaN(node0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = Node.newString(23, "Mz,", (-2006), 1868);
        Node node2 = node1.cloneTree();
        Node node3 = new Node(2, node1, node1, 56, 115);
        NodeUtil.isGetOrSetKey(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        nodeUtil_NumbericResultPredicate0.apply(node2);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node4 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        nodeUtil_NumbericResultPredicate0.equals(node4);
        Node node5 = NodeUtil.getBestLValueOwner(node2);
        nodeUtil_NumbericResultPredicate0.apply((Node) null);
        nodeUtil_NumbericResultPredicate0.apply(node5);
        int int0 = 9;
        NodeUtil.isCommutative(int0);
        NodeUtil.isGetOrSetKey(node2);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.precedence(1318);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        Node node0 = Node.newString(10, "_fZ+9+%");
        Node node1 = new Node(232, node0, node0, node0, 98, 110);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.getLoopCodeBlock(node0);
        NodeUtil.isBleedingFunctionName(node1);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.isForIn(node0);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.mayBeString(node0, true);
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node1 = new Node((-248), node0);
        NodeUtil.newName(jqueryCodingConvention0, "==", node0);
        NodeUtil.getBestJSDocInfo(node1);
        NodeUtil.getNameReferenceCount(node1, "parseInt");
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        double double0 = (-473.0);
        NodeUtil.getStringValue((-473.0));
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        exploitAssigns0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Integer integer0 = new Integer(1799);
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        node0.addSuppression("gRt!+V");
        node0.setDouble(Double.NEGATIVE_INFINITY);
        NodeUtil.getNameReferenceCount(node0, "RegExp");
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(43, node0, node0, node0, node0);
        NodeUtil.isPrototypeProperty(node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        node1.setLineno(35);
        NodeUtil.getNumberValue(node1);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
        NodeUtil.getBestLValue((Node) null);
        String string0 = " Calls: ";
        String string1 = node1.toStringTree();
        SourceMap.DetailLevel.valueOf(string1);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.isPrototypeProperty(node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        node0.setLineno(35);
        NodeUtil.getNumberValue(node0);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
        NodeUtil.getBestLValue((Node) null);
        String string0 = " Calls: ";
        String string1 = node0.toStringTree();
        SourceMap.DetailLevel.valueOf(string1);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        Node[] nodeArray0 = new Node[5];
        Node node0 = Node.newString(10, "_fZ+9+%");
        Node node1 = new Node(232, node0, node0, node0, 98, 110);
        Node node2 = NodeUtil.numberNode((-750.88699464128), node1);
        nodeArray0[0] = node2;
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node2, compiler0);
        NodeUtil.precedence(55);
        NodeUtil.hasCatchHandler(node2);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        Node.newString(10, "_fZ+9+%");
        NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        Node node0 = Node.newString(1269, "", 1431655764, (-2516));
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
        Node node2 = node1.cloneTree();
        Node node3 = new Node(57, node2, node0, 15, 1066);
        NodeUtil.isGetOrSetKey(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate1 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        nodeUtil_NumbericResultPredicate1.apply(node3);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        peepholeRemoveDeadCode0.optimizeSubtree(node3);
        nodeUtil_NumbericResultPredicate1.equals("");
        NodeUtil.getBestLValueOwner(node0);
        nodeUtil_NumbericResultPredicate1.apply(node2);
        nodeUtil_NumbericResultPredicate0.apply(node3);
        NodeUtil.isCommutative(201);
        NodeUtil.isGetOrSetKey(node1);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = Node.newString(461845907, "_fZ+9+%");
        Node node1 = new Node(32, node0, node0, node0, 461845907, (-1082));
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.getLoopCodeBlock(node0);
        NodeUtil.isGet(node1);
        NodeUtil.getPureBooleanValue((Node) null);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(43, node0, node0, node0, node0);
        NodeUtil.isPrototypeProperty(node0);
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        nodeUtil_NumbericResultPredicate0.apply(node1);
        node1.removeProp(132);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate1 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate2 = new NodeUtil.NumbericResultPredicate();
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate2);
        NodeUtil.getFunctionName(node1);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "3bL7)9C|)EX9==:");
        NodeUtil.numberNode(30, node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isGetOrSetKey(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("3bL7)9C|)EX9==:");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Object object1 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
        node1.toString(true, true, true);
        NodeUtil.isLiteralValue(node1, true);
        NodeUtil.canBeSideEffected(node1);
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getSourceFile(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Integer integer0 = new Integer(37);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        nodeUtil_MatchDeclaration0.apply(node0);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
        nodeUtil_MatchDeclaration0.equals(integer0);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-171));
        NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
        Compiler compiler0 = new Compiler();
        NodeUtil.mayEffectMutableState(node0, compiler0);
        NodeUtil.isNameReferenced(node0, "XML");
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        Node node0 = new Node(107);
        NodeUtil.isCallOrNewTarget(node0);
        NodeUtil.getNearestFunctionName(node0);
        node0.setChangeTime(18);
        node0.removeProp((-1527));
        Node node1 = new Node(8, node0, node0, node0);
        int int0 = new Integer(38);
        NodeUtil.getSourceName(node0);
        NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        NodeUtil.precedence(44);
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Node node0 = Node.newString("B\"gJGS8A;", 15, 5);
        Node node1 = NodeUtil.getAssignedValue(node0);
        node0.clonePropsFrom(node1);
        node1.setDouble(node0.FREE_CALL);
        NodeUtil.isStrWhiteSpaceChar(node1.IS_DISPATCHER);
        NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        Node node0 = null;
        Node node1 = NodeUtil.getArgumentForFunction((Node) null, (-1609));
        NodeUtil.getCatchBlock(node1);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        NodeUtil.isValidQualifiedName("'PFYaOwYg3'qp~Rj");
        String string0 = "-infinity";
        SyntheticAst syntheticAst0 = new SyntheticAst("-infinity");
        Compiler compiler0 = new Compiler();
        compiler0.getSourceFileByName("-infinity");
        Charset.defaultCharset();
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        NodeUtil.getStringNumberValue("yO!");
        Compiler compiler0 = new Compiler();
        compiler0.getRoot();
        NodeUtil.newUndefinedNode((Node) null);
        Node node0 = compiler0.externAndJsRoot;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        Node.newString(141, "6~,MtbYhd");
        NodeUtil.getObjectLitKeyTypeFromValueType((Node) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        Node node0 = null;
        Node node1 = new Node(155);
        NodeUtil.isCallOrNewTarget(node1);
        NodeUtil.getSourceFile(node1);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isFunctionObjectApply(node1);
        PeepholeFoldConstants.evaluateComparison(2, node1, (Node) null);
        String string0 = "$a";
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.precedence(51);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        Integer integer0 = new Integer((-638));
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = new Node((-1217), (-1217), (-638));
        Node node1 = NodeUtil.newVarNode("Infinity", node0);
        node0.isEquivalentToTyped(node1);
        node0.getJSDocInfo();
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        Node[] nodeArray0 = new Node[5];
        Node node0 = Node.newString(10, "_fZ+9+%");
        Node node1 = new Node(232, node0, node0, node0, 98, 110);
        Node node2 = NodeUtil.numberNode((-750.88699464128), node1);
        nodeArray0[0] = node2;
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isGetOrSetKey(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Compiler compiler0 = new Compiler((PrintStream) null);
        peepholeRemoveDeadCode0.endTraversal(compiler0);
        Node node3 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
        nodeUtil_NumbericResultPredicate0.equals(node3);
        nodeUtil_NumbericResultPredicate0.apply(node3);
        NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "3bL7)9C|)EX9==:");
        Node node1 = new Node(51, node0, node0, node0, node0);
        NodeUtil.isPrototypeProperty(node1);
        Compiler compiler0 = new Compiler();
        NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        nodeUtil_NumbericResultPredicate0.apply(node1);
        node1.removeProp(38);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate1 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate2 = new NodeUtil.NumbericResultPredicate();
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate1);
        NodeUtil.getFunctionName(node1);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
        Node node0 = new Node(116);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        NodeUtil.isPrototypeProperty(node1);
        peepholeFoldConstants0.mayHaveSideEffects(node1);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate1 = new NodeUtil.NumbericResultPredicate();
        Object object1 = new Object();
        nodeUtil_NumbericResultPredicate1.equals(object1);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate2 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        nodeUtil_NumbericResultPredicate2.apply(node2);
        NodeUtil.isCommutative(15);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.getSourceName(node0);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "3bL7)9C|)EX9==:");
        Node node1 = NodeUtil.numberNode(30, node0);
        node0.checkTreeEquals(node1);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        NodeUtil.isGetOrSetKey(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Object object0 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("3bL7)9C|)EX9==:");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Object object1 = new Object();
        PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
        Compiler compiler1 = new Compiler((PrintStream) null);
        peepholeRemoveDeadCode1.endTraversal(compiler0);
        Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
        MockFile mockFile0 = new MockFile("this", "3bL7)9C|)EX9==:");
        File file0 = MockFile.createTempFile("this", "Ye^E", (File) mockFile0);
        SourceFile sourceFile0 = SourceFile.fromFile(file0);
        nodeUtil_NumbericResultPredicate0.equals(sourceFile0);
        nodeUtil_NumbericResultPredicate0.apply(node2);
        NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        Node node0 = Node.newString((-514), "_fZ+9+%");
        Node node1 = new Node((-863), node0, node0, node0, (-4426), 47);
        NodeUtil.numberNode(56, node1);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Node node2 = Node.newNumber((-473.4953857));
        node2.setDouble(55);
        NodeUtil.isStrWhiteSpaceChar(50);
        NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Integer integer0 = new Integer(1799);
        nodeUtil_MatchDeclaration0.equals(integer0);
        Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
        NodeUtil.precedence(17);
        NodeUtil.isNaN(node0);
        NodeUtil.isStrWhiteSpaceChar(115);
        NodeUtil.isNaN(node0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
        int int0 = (-522);
        Node[] nodeArray0 = new Node[1];
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        tightenTypes0.getTopScope();
        TightenTypes.ConcreteScope tightenTypes_ConcreteScope0 = tightenTypes0.new ConcreteScope((TightenTypes.ConcreteScope) null);
        tightenTypes_ConcreteScope0.getRootNode();
        Node node0 = NodeUtil.getFunctionParameters((Node) null);
        NodeUtil.getPrototypeClassName(node0);
    }
}
