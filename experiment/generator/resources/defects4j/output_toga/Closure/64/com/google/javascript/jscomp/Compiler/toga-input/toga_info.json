{
  "test07283" : {
    "methodSignature" : "boolean replaceIncrementalSourceAst(JsAst ast)",
    "methodName" : "replaceIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07283() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test07283"
  },
  "test088108" : {
    "methodSignature" : "public boolean acceptEcmaScript5()",
    "methodName" : "acceptEcmaScript5",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088108() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"f#;\", \"f#;\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    boolean boolean0 = compiler0.acceptEcmaScript5();\n}",
    "testName" : "test088108"
  },
  "test08098" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08098() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.parseTestCode(\"H|D\\\"^(%5>3q-\");\n    compiler0.getErrorCount();\n}",
    "testName" : "test08098"
  },
  "test088107" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088107() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"f#;\", \"f#;\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    boolean boolean0 = compiler0.acceptEcmaScript5();\n    compiler0.getErrorCount();\n}",
    "testName" : "test088107"
  },
  "test0000" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n}",
    "testName" : "test0000"
  },
  "test07282" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07282() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07282"
  },
  "test07689" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07689() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"p(LGM#\\\"#FgRE`M$K3G\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07689"
  },
  "test04850" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04850() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"KLv{ih+iw>:|$A@\");\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.options;\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    compiler0.getErrorCount();\n}",
    "testName" : "test04850"
  },
  "test05663" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05663() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);\n    Callable<OptimizeArgumentsArray> callable0 = (Callable<OptimizeArgumentsArray>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn(optimizeArgumentsArray0).when(callable0).call();\n    OptimizeArgumentsArray optimizeArgumentsArray1 = Compiler.runCallable(callable0, false, true);\n}",
    "testName" : "test05663"
  },
  "test101123" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"f#;\", \"f#;\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.getAstDotGraph();\n    compiler0.getErrorCount();\n}",
    "testName" : "test101123"
  },
  "test06473" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06473() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Can't negate non-numeric value: {0}\");\n    compiler0.areNodesEqualForInlining(node0, node0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test06473"
  },
  "test02424" : {
    "methodSignature" : "VariableMap getVariableMap()",
    "methodName" : "getVariableMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02424() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getVariableMap();\n}",
    "testName" : "test02424"
  },
  "test03637" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03637() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);\n}",
    "testName" : "test03637"
  },
  "test01212" : {
    "methodSignature" : "CompilerOptions getOptions()",
    "methodName" : "getOptions",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n}",
    "testName" : "test01212"
  },
  "test04849" : {
    "methodSignature" : "Node parseInputs()",
    "methodName" : "parseInputs",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04849() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"KLv{ih+iw>:|$A@\");\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.options;\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n}",
    "testName" : "test04849"
  },
  "test099121" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099121() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"@'`0Od|u.G9ftNKQ\");\n    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());\n    doReturn((String) null).when(sourceFile_Generator0).getCode();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(\"@'`0Od|u.G9ftNKQ\", sourceFile_Generator0);\n    jSModule0.addFirst(jSSourceFile0);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test099121"
  },
  "test02828" : {
    "methodSignature" : "String toSource(Node n)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02828() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource((Node) null);\n}",
    "testName" : "test02828"
  },
  "test01616" : {
    "methodSignature" : "ScopeCreator getTypedScopeCreator()",
    "methodName" : "getTypedScopeCreator",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01616() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();\n}",
    "testName" : "test01616"
  },
  "test094114" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"d8zVMy\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.getSourceRegion((String) null, 2148);\n    compiler0.getErrorCount();\n}",
    "testName" : "test094114"
  },
  "test07791" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07791() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.START_AND_END;\n    compilerOptions0.devMode = compilerOptions_DevMode0;\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.getErrorCount();\n}",
    "testName" : "test07791"
  },
  "test04041" : {
    "methodSignature" : "public Scope getTopScope()",
    "methodName" : "getTopScope",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04041() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Scope scope0 = compiler0.getTopScope();\n}",
    "testName" : "test04041"
  },
  "test0011" : {
    "methodSignature" : "public String toSource(final JSModule module)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    JSModule jSModule0 = new JSModule(\"stripCode\");\n    compiler0.toSource(jSModule0);\n}",
    "testName" : "test0011"
  },
  "test0099" : {
    "methodSignature" : "CssRenamingMap getCssRenamingMap()",
    "methodName" : "getCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getCssRenamingMap();\n}",
    "testName" : "test0099"
  },
  "test05257" : {
    "methodSignature" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options)",
    "methodName" : "init",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05257() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"p(LGM#\\\"#FgRE`M$K3G\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    jSSourceFileArray0[2] = jSSourceFile0;\n    jSSourceFileArray0[3] = jSSourceFile0;\n    jSSourceFileArray0[4] = jSSourceFile0;\n    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n}",
    "testName" : "test05257"
  },
  "test104127" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104127() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"3\");\n    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n}",
    "testName" : "test104127"
  },
  "test02020" : {
    "methodSignature" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
    "methodName" : "runCallableWithLargeStack",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02020() throws Throwable {\n    Compiler.runCallableWithLargeStack((Callable<TightenTypes>) null);\n}",
    "testName" : "test02020"
  },
  "test03233" : {
    "methodSignature" : "public Node getRoot()",
    "methodName" : "getRoot",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03233() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.getRoot();\n}",
    "testName" : "test03233"
  },
  "test05258" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05258() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"p(LGM#\\\"#FgRE`M$K3G\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    jSSourceFileArray0[2] = jSSourceFile0;\n    jSSourceFileArray0[3] = jSSourceFile0;\n    jSSourceFileArray0[4] = jSSourceFile0;\n    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05258"
  },
  "test06067" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06067() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.getPassConfig();\n    compiler0.setPassConfig(passConfig0);\n}",
    "testName" : "test06067"
  },
  "test02930" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02930() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"DWdf3\", \"DWdf3\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.ideMode = true;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.optimize();\n    compiler0.getErrorCount();\n}",
    "testName" : "test02930"
  },
  "test06978" : {
    "methodSignature" : "public CompilerInput newExternInput(String name)",
    "methodName" : "newExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06978() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"Invalid token: \");\n    compiler0.newExternInput(\" [testcode] \");\n}",
    "testName" : "test06978"
  },
  "test091111" : {
    "methodSignature" : "void throwInternalError(String message, Exception cause)",
    "methodName" : "throwInternalError",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.throwInternalError(\"JSC_EMPTY_MODULE_LIST_ERROR\", (Exception) null);\n}",
    "testName" : "test091111"
  },
  "test07385" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07385() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"DWdf3\", \"DWdf3\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.ideMode = true;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07385"
  },
  "test07384" : {
    "methodSignature" : "boolean replaceIncrementalSourceAst(JsAst ast)",
    "methodName" : "replaceIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07384() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"DWdf3\", \"DWdf3\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.ideMode = true;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test07384"
  },
  "test0022" : {
    "methodSignature" : "public String[] toSourceArray()",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray();\n}",
    "testName" : "test0022"
  },
  "test06170" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06170() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test06170"
  },
  "test04951" : {
    "methodSignature" : "public void initOptions(CompilerOptions options)",
    "methodName" : "initOptions",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04951() throws Throwable {\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(\";{XKm^MP3)|n`KzC\");\n    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    compiler0.initOptions((CompilerOptions) null);\n}",
    "testName" : "test04951"
  },
  "test05764" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05764() throws Throwable {\n    Compiler.runCallable((Callable<OptimizeArgumentsArray>) null, false, false);\n}",
    "testName" : "test05764"
  },
  "test06574" : {
    "methodSignature" : "protected void removeInput(String name)",
    "methodName" : "removeInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06574() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"f#;\", \"f#;\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.removeInput(\"f#;\");\n}",
    "testName" : "test06574"
  },
  "test01313" : {
    "methodSignature" : "public void rebuildInputsFromModules()",
    "methodName" : "rebuildInputsFromModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.rebuildInputsFromModules();\n}",
    "testName" : "test01313"
  },
  "test03738" : {
    "methodSignature" : "public JSError[] getMessages()",
    "methodName" : "getMessages",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03738() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getMessages();\n}",
    "testName" : "test03738"
  },
  "test05359" : {
    "methodSignature" : "public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05359() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    compiler0.compileModules(vector0, stack0, compilerOptions0);\n}",
    "testName" : "test05359"
  },
  "test02525" : {
    "methodSignature" : "FunctionInformationMap getFunctionalInformationMap()",
    "methodName" : "getFunctionalInformationMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02525() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();\n}",
    "testName" : "test02525"
  },
  "test01717" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01717() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.check();\n    compiler0.getErrorCount();\n}",
    "testName" : "test01717"
  },
  "test096118" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096118() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"!h8[tF![V[!{\");\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test096118"
  },
  "test02929" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02929() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"DWdf3\", \"DWdf3\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.ideMode = true;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.optimize();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test02929"
  },
  "test0033" : {
    "methodSignature" : "public String toSource()",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource();\n}",
    "testName" : "test0033"
  },
  "test102124" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102124() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"Can't negate non-numeric value: {0}\");\n    compiler0.getErrorManager();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test102124"
  },
  "test06169" : {
    "methodSignature" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
    "methodName" : "stripCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06169() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);\n}",
    "testName" : "test06169"
  },
  "test03334" : {
    "methodSignature" : "List<CompilerInput> getInputsForTesting()",
    "methodName" : "getInputsForTesting",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03334() throws Throwable {\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    List<CompilerInput> list0 = compiler0.getInputsForTesting();\n}",
    "testName" : "test03334"
  },
  "test07894" : {
    "methodSignature" : "public boolean isSyntheticBlock()",
    "methodName" : "isSyntheticBlock",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07894() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    node0.isSyntheticBlock();\n}",
    "testName" : "test07894"
  },
  "test04142" : {
    "methodSignature" : "void addToDebugLog(String str)",
    "methodName" : "addToDebugLog",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04142() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.addToDebugLog(\"?t-K@#<(?lUG\");\n}",
    "testName" : "test04142"
  },
  "test06168" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06168() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06168"
  },
  "test07892" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07892() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    node0.getType();\n}",
    "testName" : "test07892"
  },
  "test085103" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085103() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"'joe[O([q5\", \"'joe[O([q5\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.optimize();\n    compiler0.getErrorCount();\n}",
    "testName" : "test085103"
  },
  "test02121" : {
    "methodSignature" : "public LanguageMode languageMode()",
    "methodName" : "languageMode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02121() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.languageMode();\n}",
    "testName" : "test02121"
  },
  "test07893" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07893() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07893"
  },
  "test05865" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05865() throws Throwable {\n    Compiler.runCallable((Callable<OptimizeArgumentsArray>) null, false, true);\n}",
    "testName" : "test05865"
  },
  "test098120" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098120() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();\n    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);\n    compiler0.getNodeForCodeInsertion((JSModule) null);\n}",
    "testName" : "test098120"
  },
  "test093113" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Region region0 = compiler0.getSourceRegion((String) null, (-1108));\n}",
    "testName" : "test093113"
  },
  "test06271" : {
    "methodSignature" : "void endPass()",
    "methodName" : "endPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06271() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.endPass();\n}",
    "testName" : "test06271"
  },
  "test05460" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05460() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();\n    JSModule jSModule0 = new JSModule(\"\");\n    linkedList0.offer(jSModule0);\n    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test05460"
  },
  "test0044" : {
    "methodSignature" : "public void toSource(final CodeBuilder cb, final int inputSeqNum, final Node root)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();\n    compiler0.toSource(compiler_CodeBuilder0, (-2192), (Node) null);\n}",
    "testName" : "test0044"
  },
  "test105128" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105128() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    Node node0 = Node.newString(\"GETPROP\");\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n}",
    "testName" : "test105128"
  },
  "test06675" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06675() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"x0<D.~TXd;W\");\n    compiler0.removeInput(\"x0<D.~TXd;W\");\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test06675"
  },
  "test07486" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07486() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"J*dYUPT&tcqx\", \"com.google.javascript.jscomp.PeepholeFoldWithTypes\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream(\"$7\", (InputStream) sequenceInputStream0);\n    compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile1);\n    compiler0.replaceIncrementalSourceAst(jsAst0);\n    compiler0.hasErrors();\n}",
    "testName" : "test07486"
  },
  "test05461" : {
    "methodSignature" : "public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05461() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();\n    JSModule jSModule0 = new JSModule(\"\");\n    linkedList0.offer(jSModule0);\n    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);\n}",
    "testName" : "test05461"
  },
  "test02626" : {
    "methodSignature" : "Supplier<String> getUniqueNameIdSupplier()",
    "methodName" : "getUniqueNameIdSupplier",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02626() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n}",
    "testName" : "test02626"
  },
  "test03435" : {
    "methodSignature" : "void removeChangeHandler(CodeChangeHandler handler)",
    "methodName" : "removeChangeHandler",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03435() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CodeChangeHandler.ForbiddenChange codeChangeHandler_ForbiddenChange0 = new CodeChangeHandler.ForbiddenChange();\n    compiler0.removeChangeHandler(codeChangeHandler_ForbiddenChange0);\n}",
    "testName" : "test03435"
  },
  "test01414" : {
    "methodSignature" : "ControlFlowGraph<Node> computeCFG()",
    "methodName" : "computeCFG",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.computeCFG();\n}",
    "testName" : "test01414"
  },
  "test090110" : {
    "methodSignature" : "public void report(JSError error)",
    "methodName" : "report",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090110() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Compiler compiler0 = new Compiler();\n    String[] stringArray0 = new String[1];\n    JSError jSError0 = JSError.make((String) null, (-778), (-778), compilerOptions0.checkUnreachableCode, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);\n    compiler0.report(jSError0);\n}",
    "testName" : "test090110"
  },
  "test03839" : {
    "methodSignature" : "List<CompilerInput> getExternsForTesting()",
    "methodName" : "getExternsForTesting",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03839() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"1f :5WD-yg@*Yk8\");\n    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    List<CompilerInput> list0 = compiler0.getExternsForTesting();\n}",
    "testName" : "test03839"
  },
  "test01818" : {
    "methodSignature" : "Node parseSyntheticCode(String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01818() throws Throwable {\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    compiler0.parseSyntheticCode((String) null);\n}",
    "testName" : "test01818"
  },
  "test05053" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05053() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"5\", \"5\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    compilerOptions0.checkGlobalThisLevel = checkLevel0;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n}",
    "testName" : "test05053"
  },
  "test087106" : {
    "methodSignature" : "public void reportCodeChange()",
    "methodName" : "reportCodeChange",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087106() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.reportCodeChange();\n}",
    "testName" : "test087106"
  },
  "test05052" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05052() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"5\", \"5\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    compilerOptions0.checkGlobalThisLevel = checkLevel0;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05052"
  },
  "test0055" : {
    "methodSignature" : "public String[] toSourceArray(final JSModule module)",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray((JSModule) null);\n}",
    "testName" : "test0055"
  },
  "test07997" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07997() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"DWdf3\", \"DWdf3\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    compiler0.parseInputs();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07997"
  },
  "test07995" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07995() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"DWdf3\", \"DWdf3\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    compiler0.parseInputs();\n    compiler0.getWarningCount();\n}",
    "testName" : "test07995"
  },
  "test07996" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07996() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"DWdf3\", \"DWdf3\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    compiler0.parseInputs();\n    compiler0.getErrorCount();\n}",
    "testName" : "test07996"
  },
  "test100122" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100122() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test100122"
  },
  "test07079" : {
    "methodSignature" : "void addIncrementalSourceAst(JsAst ast)",
    "methodName" : "addIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07079() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"p(LGM#\\\"#FgRE`M$K3G\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test07079"
  },
  "test02222" : {
    "methodSignature" : "void setCssRenamingMap(CssRenamingMap map)",
    "methodName" : "setCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02222() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setCssRenamingMap((CssRenamingMap) null);\n}",
    "testName" : "test02222"
  },
  "test03031" : {
    "methodSignature" : "public SourceMap getSourceMap()",
    "methodName" : "getSourceMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03031() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SourceMap sourceMap0 = compiler0.getSourceMap();\n}",
    "testName" : "test03031"
  },
  "test01010" : {
    "methodSignature" : "boolean hasRegExpGlobalReferences()",
    "methodName" : "hasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.hasRegExpGlobalReferences();\n}",
    "testName" : "test01010"
  },
  "test04243" : {
    "methodSignature" : "ReferenceMap getGlobalVarReferences()",
    "methodName" : "getGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04243() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();\n}",
    "testName" : "test04243"
  },
  "test03940" : {
    "methodSignature" : "void removeTryCatchFinally()",
    "methodName" : "removeTryCatchFinally",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03940() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.removeTryCatchFinally();\n}",
    "testName" : "test03940"
  },
  "test05966" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05966() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);\n    compiler0.setPassConfig(defaultPassConfig0);\n}",
    "testName" : "test05966"
  },
  "test095117" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095117() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"D\", \"D\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.getSourceRegion(\"D\", 132);\n    compiler0.getErrorCount();\n}",
    "testName" : "test095117"
  },
  "test095116" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095116() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"D\", \"D\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.getSourceRegion(\"D\", 132);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test095116"
  },
  "test095115" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095115() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"D\", \"D\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.getSourceRegion(\"D\", 132);\n    compiler0.getWarningCount();\n}",
    "testName" : "test095115"
  },
  "test086104" : {
    "methodSignature" : "boolean isInliningForbidden()",
    "methodName" : "isInliningForbidden",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086104() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"6>%a$Ls>/r\");\n    boolean boolean0 = compiler0.isInliningForbidden();\n}",
    "testName" : "test086104"
  },
  "test086105" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086105() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"6>%a$Ls>/r\");\n    boolean boolean0 = compiler0.isInliningForbidden();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test086105"
  },
  "test06372" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06372() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"D\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    compiler0.parseInputs();\n    compiler0.getErrorCount();\n}",
    "testName" : "test06372"
  },
  "test07181" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07181() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"d8zVMy\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(\" [synthetic] \", (String) null);\n    JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07181"
  },
  "test07180" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07180() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"d8zVMy\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(\" [synthetic] \", (String) null);\n    JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07180"
  },
  "test0066" : {
    "methodSignature" : "public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "init",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test0066"
  },
  "test103125" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103125() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test103125"
  },
  "test07588" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07588() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"Mmo$/E+*\");\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07588"
  },
  "test103126" : {
    "methodSignature" : "public ErrorManager getErrorManager()",
    "methodName" : "getErrorManager",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103126() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n}",
    "testName" : "test103126"
  },
  "test06776" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06776() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"f#;\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.removeInput(\"f#;\");\n    compiler0.getErrorCount();\n}",
    "testName" : "test06776"
  },
  "test07587" : {
    "methodSignature" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
    "methodName" : "getReverseAbstractInterpreter",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07587() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"Mmo$/E+*\");\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n}",
    "testName" : "test07587"
  },
  "test05562" : {
    "methodSignature" : "void startPass(String passName)",
    "methodName" : "startPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05562() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n    compiler0.startPass((String) null);\n    compiler0.startPass((String) null);\n}",
    "testName" : "test05562"
  },
  "test02323" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02323() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getWarningCount();\n}",
    "testName" : "test02323"
  },
  "test01515" : {
    "methodSignature" : "VariableMap getPropertyMap()",
    "methodName" : "getPropertyMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01515() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getPropertyMap();\n}",
    "testName" : "test01515"
  },
  "test03536" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03536() throws Throwable {\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    compiler0.setHasRegExpGlobalReferences(false);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03536"
  },
  "test02727" : {
    "methodSignature" : "void recordFunctionInformation()",
    "methodName" : "recordFunctionInformation",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02727() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.recordFunctionInformation();\n}",
    "testName" : "test02727"
  },
  "test01919" : {
    "methodSignature" : "public void processDefines()",
    "methodName" : "processDefines",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01919() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.processDefines();\n}",
    "testName" : "test01919"
  },
  "test092112" : {
    "methodSignature" : "public void check()",
    "methodName" : "check",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"// Input %num%\");\n    compiler0.check();\n}",
    "testName" : "test092112"
  },
  "test07690" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07690() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"p(LGM#\\\"#FgRE`M$K3G\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07690"
  },
  "test089109" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089109() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.disableThreads();\n    CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;\n    compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n}",
    "testName" : "test089109"
  },
  "test0077" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    compiler0.resetUniqueNameId();\n    compiler0.getErrorCount();\n}",
    "testName" : "test0077"
  },
  "test05154" : {
    "methodSignature" : "Node parseInputs()",
    "methodName" : "parseInputs",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05154() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.sourceMapOutputPath = \"\";\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n}",
    "testName" : "test05154"
  },
  "test01111" : {
    "methodSignature" : "public void setState(IntermediateState state)",
    "methodName" : "setState",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    compiler0.setState(compiler_IntermediateState0);\n}",
    "testName" : "test01111"
  },
  "test05156" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05156() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.sourceMapOutputPath = \"\";\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    node0.getType();\n}",
    "testName" : "test05156"
  },
  "test03132" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03132() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test03132"
  },
  "test05155" : {
    "methodSignature" : "public boolean isSyntheticBlock()",
    "methodName" : "isSyntheticBlock",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05155() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.sourceMapOutputPath = \"\";\n    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    node0.isSyntheticBlock();\n}",
    "testName" : "test05155"
  },
  "test106129" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106129() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"RE7V4W1:olT8;)VZH\\\"\");\n    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n}",
    "testName" : "test106129"
  },
  "test06877" : {
    "methodSignature" : "public CompilerInput newExternInput(String name)",
    "methodName" : "newExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06877() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"x0<D./~TXd;W\");\n    compiler0.newExternInput(\"x0<D./~TXd;W\");\n}",
    "testName" : "test06877"
  },
  "test097119" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097119() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.getNodeForCodeInsertion((JSModule) null);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test097119"
  }
}