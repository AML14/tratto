project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    JSModule jSModule0 = new JSModule(""stripCode"");
    // Undeclared exception!
    try {
        compiler0.toSource(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    // Undeclared exception!
    try {
        compiler0.toSource(compiler_CodeBuilder0, (-2192), (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test0055,"public void test0055() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray((JSModule) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test0066,"public void test0066() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
    JSModule[] jSModuleArray0 = new JSModule[0];
    // Undeclared exception!
    try {
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.JsAst"", e);
    }
}",0,
project,0,test0077,"public void test0077() throws Throwable {
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    compiler0.resetUniqueNameId();
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test0099,"public void test0099() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01010,"public void test01010() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01111,"public void test01111() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
    compiler0.setState(compiler_IntermediateState0);
}",0,
project,0,test01212,"public void test01212() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    assertNull(compilerOptions0);
}",0,assertNotNull(compilerOptions0)
project,0,test01313,"public void test01313() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01414,"public void test01414() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test01515,"public void test01515() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test01616,"public void test01616() throws Throwable {
    Compiler compiler0 = new Compiler();
    ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
    assertNull(scopeCreator0);
}",0,assertNotNull(scopeCreator0)
project,0,test01717,"public void test01717() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.check();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test01818,"public void test01818() throws Throwable {
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test01919,"public void test01919() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}",0,
project,0,test02020,"public void test02020() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallableWithLargeStack((Callable<TightenTypes>) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02121,"public void test02121() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.languageMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02222,"public void test02222() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test02323,"public void test02323() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02424,"public void test02424() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",0,
project,0,test02525,"public void test02525() throws Throwable {
    Compiler compiler0 = new Compiler();
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",0,
project,0,test02626,"public void test02626() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",0,assertNotNull(supplier0)
project,0,test02727,"public void test02727() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02828,"public void test02828() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource((Node) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Cannot build without root node being specified
        //
        verifyException(""com.google.javascript.jscomp.CodePrinter$Builder"", e);
    }
}",0,
project,0,test02929,"public void test02929() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.ideMode = true;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.optimize();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test02930,"public void test02930() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.ideMode = true;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.optimize();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test03031,"public void test03031() throws Throwable {
    Compiler compiler0 = new Compiler();
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",0,
project,0,test03132,"public void test03132() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03233,"public void test03233() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}",0,assertNotNull(node0)
project,0,test03334,"public void test03334() throws Throwable {
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    List<CompilerInput> list0 = compiler0.getInputsForTesting();
    assertNull(list0);
}",0,
project,0,test03435,"public void test03435() throws Throwable {
    Compiler compiler0 = new Compiler();
    CodeChangeHandler.ForbiddenChange codeChangeHandler_ForbiddenChange0 = new CodeChangeHandler.ForbiddenChange();
    compiler0.removeChangeHandler(codeChangeHandler_ForbiddenChange0);
}",0,
project,0,test03536,"public void test03536() throws Throwable {
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    compiler0.setHasRegExpGlobalReferences(false);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test03637,"public void test03637() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test03738,"public void test03738() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test03839,"public void test03839() throws Throwable {
    MockFile mockFile0 = new MockFile(""1f :5WD-yg@*Yk8"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    List<CompilerInput> list0 = compiler0.getExternsForTesting();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test03940,"public void test03940() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.removeTryCatchFinally();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04041,"public void test04041() throws Throwable {
    Compiler compiler0 = new Compiler();
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",0,
project,0,test04142,"public void test04142() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.addToDebugLog(""?t-K@#<(?lUG"");
}",0,
project,0,test04243,"public void test04243() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    assertNull(referenceCollectingCallback_ReferenceMap0);
}",0,assertNotNull(referenceCollectingCallback_ReferenceMap0)
project,0,test04849,"public void test04849() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""KLv{ih+iw>:|$A@"");
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNull(node0);
}",0,
project,0,test04850,"public void test04850() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""KLv{ih+iw>:|$A@"");
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test04951,"public void test04951() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("";{XKm^MP3)|n`KzC"");
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    // Undeclared exception!
    try {
        compiler0.initOptions((CompilerOptions) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test05052,"public void test05052() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""5"", ""5"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    compilerOptions0.checkGlobalThisLevel = checkLevel0;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05053,"public void test05053() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""5"", ""5"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    compilerOptions0.checkGlobalThisLevel = checkLevel0;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05154,"public void test05154() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = """";
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNotNull(node0);
}",0,
project,0,test05155,"public void test05155() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = """";
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertTrue(node0.isSyntheticBlock());
}",0,assertFalse(node0.isSyntheticBlock())
project,0,test05156,"public void test05156() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = """";
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertEquals(125, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test05257,"public void test05257() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
    jSSourceFileArray0[0] = jSSourceFile0;
    jSSourceFileArray0[1] = jSSourceFile0;
    jSSourceFileArray0[2] = jSSourceFile0;
    jSSourceFileArray0[3] = jSSourceFile0;
    jSSourceFileArray0[4] = jSSourceFile0;
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05258,"public void test05258() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
    jSSourceFileArray0[0] = jSSourceFile0;
    jSSourceFileArray0[1] = jSSourceFile0;
    jSSourceFileArray0[2] = jSSourceFile0;
    jSSourceFileArray0[3] = jSSourceFile0;
    jSSourceFileArray0[4] = jSSourceFile0;
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test05359,"public void test05359() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Stack<JSModule> stack0 = new Stack<JSModule>();
    // Undeclared exception!
    try {
        compiler0.compileModules(vector0, stack0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test05460,"public void test05460() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
    JSModule jSModule0 = new JSModule("""");
    linkedList0.offer(jSModule0);
    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test05461,"public void test05461() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
    JSModule jSModule0 = new JSModule("""");
    linkedList0.offer(jSModule0);
    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test05562,"public void test05562() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    compiler0.startPass((String) null);
    // Undeclared exception!
    try {
        compiler0.startPass((String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test05663,"public void test05663() throws Throwable {
    Compiler compiler0 = new Compiler();
    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
    Callable<OptimizeArgumentsArray> callable0 = (Callable<OptimizeArgumentsArray>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn(optimizeArgumentsArray0).when(callable0).call();
    OptimizeArgumentsArray optimizeArgumentsArray1 = Compiler.runCallable(callable0, false, true);
    assertSame(optimizeArgumentsArray1, optimizeArgumentsArray0);
}",0,
project,0,test05764,"public void test05764() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<OptimizeArgumentsArray>) null, false, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test05865,"public void test05865() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<OptimizeArgumentsArray>) null, false, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test05966,"public void test05966() throws Throwable {
    Compiler compiler0 = new Compiler();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);
    compiler0.setPassConfig(defaultPassConfig0);
}",0,
project,0,test06067,"public void test06067() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test06168,"public void test06168() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test06169,"public void test06169() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test06170,"public void test06170() throws Throwable {
    Compiler compiler0 = new Compiler();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test06271,"public void test06271() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test06372,"public void test06372() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""D"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    compiler0.parseInputs();
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test06473,"public void test06473() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""Can't negate non-numeric value: {0}"");
    compiler0.areNodesEqualForInlining(node0, node0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test06574,"public void test06574() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""f#;"", ""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.removeInput(""f#;"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test06675,"public void test06675() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""x0<D.~TXd;W"");
    compiler0.removeInput(""x0<D.~TXd;W"");
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test06776,"public void test06776() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.removeInput(""f#;"");
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test06877,"public void test06877() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""x0<D./~TXd;W"");
    // Undeclared exception!
    try {
        compiler0.newExternInput(""x0<D./~TXd;W"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test06978,"public void test06978() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Invalid token: "");
    // Undeclared exception!
    try {
        compiler0.newExternInput("" [testcode] "");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name:  [testcode]
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test07079,"public void test07079() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name p(LGM#\""#FgRE`M$K3G
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test07180,"public void test07180() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""d8zVMy"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("" [synthetic] "", (String) null);
    JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test07181,"public void test07181() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""d8zVMy"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("" [synthetic] "", (String) null);
    JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07282,"public void test07282() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test07283,"public void test07283() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertFalse(boolean0);
}",1,
project,0,test07384,"public void test07384() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.ideMode = true;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07385,"public void test07385() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.ideMode = true;
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test07486,"public void test07486() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""J*dYUPT&tcqx"", ""com.google.javascript.jscomp.PeepholeFoldWithTypes"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    JSSourceFile jSSourceFile1 = JSSourceFile.fromInputStream(""$7"", (InputStream) sequenceInputStream0);
    compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile1);
    compiler0.replaceIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test07587,"public void test07587() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Mmo$/E+*"");
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertNotNull(reverseAbstractInterpreter0);
}",0,assertNotNull(reverseAbstractInterpreter0)
project,0,test07588,"public void test07588() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Mmo$/E+*"");
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07689,"public void test07689() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test07690,"public void test07690() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""p(LGM#\""#FgRE`M$K3G"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test07791,"public void test07791() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.START_AND_END;
    compilerOptions0.devMode = compilerOptions_DevMode0;
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test07892,"public void test07892() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertEquals(125, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test07893,"public void test07893() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertFalse(compiler0.isTypeCheckingEnabled())
project,0,test07894,"public void test07894() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertTrue(node0.isSyntheticBlock());
}",0,
project,0,test07995,"public void test07995() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    compiler0.parseInputs();
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test07996,"public void test07996() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    compiler0.parseInputs();
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test07997,"public void test07997() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""DWdf3"", ""DWdf3"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    compiler0.parseInputs();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test08098,"public void test08098() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.parseTestCode(""H|D\""^(%5>3q-"");
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test085103,"public void test085103() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""'joe[O([q5"", ""'joe[O([q5"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.optimize();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test086104,"public void test086104() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""6>%a$Ls>/r"");
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",0,
project,0,test086105,"public void test086105() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""6>%a$Ls>/r"");
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertFalse(compiler0.isTypeCheckingEnabled())
project,0,test087106,"public void test087106() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.reportCodeChange();
}",0,
project,0,test088107,"public void test088107() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""f#;"", ""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test088108,"public void test088108() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""f#;"", ""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test089109,"public void test089109() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.disableThreads();
    CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
    compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertTrue(result0.success);
}",0,
project,0,test090110,"public void test090110() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Compiler compiler0 = new Compiler();
    String[] stringArray0 = new String[1];
    JSError jSError0 = JSError.make((String) null, (-778), (-778), compilerOptions0.checkUnreachableCode, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertEquals((-778), jSError0.lineNumber);
}",0,
project,0,test091111,"public void test091111() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""JSC_EMPTY_MODULE_LIST_ERROR"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // JSC_EMPTY_MODULE_LIST_ERROR
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test092112,"public void test092112() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""// Input %num%"");
    // Undeclared exception!
    try {
        compiler0.check();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test093113,"public void test093113() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion((String) null, (-1108));
    assertNull(region0);
}",0,
project,0,test094114,"public void test094114() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""d8zVMy"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.getSourceRegion((String) null, 2148);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test095115,"public void test095115() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""D"", ""D"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.getSourceRegion(""D"", 132);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test095116,"public void test095116() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""D"", ""D"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.getSourceRegion(""D"", 132);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,
project,0,test095117,"public void test095117() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""D"", ""D"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.getSourceRegion(""D"", 132);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test096118,"public void test096118() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""!h8[tF![V[!{"");
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root module has no inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test097119,"public void test097119() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    compiler0.getNodeForCodeInsertion((JSModule) null);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test098120,"public void test098120() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    LinkedList<JSSourceFile> linkedList1 = new LinkedList<JSSourceFile>();
    compiler0.compileModules(linkedList1, linkedList0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test099121,"public void test099121() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""@'`0Od|u.G9ftNKQ"");
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(sourceFile_Generator0).getCode();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(""@'`0Od|u.G9ftNKQ"", sourceFile_Generator0);
    jSModule0.addFirst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test100122,"public void test100122() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}",0,
project,0,test101123,"public void test101123() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""f#;"", ""f#;"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.getAstDotGraph();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test102124,"public void test102124() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Can't negate non-numeric value: {0}"");
    compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test103125,"public void test103125() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertFalse(compiler0.isTypeCheckingEnabled())
project,0,test103126,"public void test103126() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertNotNull(errorManager0);
}",0,
project,0,test104127,"public void test104127() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""3"");
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
project,0,test105128,"public void test105128() throws Throwable {
    Compiler compiler0 = new Compiler();
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    Node node0 = Node.newString(""GETPROP"");
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test106129,"public void test106129() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""RE7V4W1:olT8;)VZH\"""");
    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
