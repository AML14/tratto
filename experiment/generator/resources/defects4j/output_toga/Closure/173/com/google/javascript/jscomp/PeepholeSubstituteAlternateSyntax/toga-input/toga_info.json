{
  "test1213" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    Node node0 = new Node(63);\n    node0.addChildToFront(node0);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);\n    Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test1213"
  },
  "test1314" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    Node node0 = new Node(63);\n    Node node1 = Node.newString(\"\");\n    node0.addChildToFront(node1);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);\n    Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test1314"
  },
  "test1011" : {
    "methodSignature" : "public boolean isCall()",
    "methodName" : "isCall",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    Node node0 = new Node(37, 37, 37);\n    Node node1 = new Node(4, node0, node0, node0, node0, 8, 15);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);\n    node2.isCall();\n}",
    "testName" : "test1011"
  },
  "test1112" : {
    "methodSignature" : "public int getCharno()",
    "methodName" : "getCharno",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    Node node0 = new Node(43, 43, 43);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n    node1.getCharno();\n}",
    "testName" : "test1112"
  },
  "test000" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);\n    Node node0 = new Node(47);\n    node0.setType(85);\n    Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Node node0 = Node.newString(4, \"miss&ng goog.getCssName around literal ''{0}''\");\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test011"
  },
  "test022" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Node node0 = new Node(43, 43, 43);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);\n    peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test022"
  },
  "test033" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Node node0 = new Node(44);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);\n    peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test033"
  },
  "test044" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Node node0 = Node.newNumber(0.0);\n    Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test044"
  },
  "test055" : {
    "methodSignature" : "public boolean isRegExp()",
    "methodName" : "isRegExp",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Node node0 = new Node(30);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Compiler compiler0 = new Compiler();\n    peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);\n    Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n    node1.isRegExp();\n}",
    "testName" : "test055"
  },
  "test066" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Node node0 = new Node(37);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);\n    Compiler compiler0 = new Compiler();\n    peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);\n    peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test066"
  },
  "test077" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Node node0 = new Node(37);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);\n    node0.addChildToFront(node0);\n    Compiler compiler0 = new Compiler();\n    peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);\n    peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test077"
  },
  "test088" : {
    "methodSignature" : "public boolean hasOneChild()",
    "methodName" : "hasOneChild",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Node node0 = new Node(47);\n    node0.setType(85);\n    Node node1 = new Node(29, node0, node0, node0, node0, 40, 30);\n    Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n    node2.hasOneChild();\n}",
    "testName" : "test088"
  },
  "test089" : {
    "methodSignature" : "public Node optimizeSubtree(Node node)",
    "methodName" : "optimizeSubtree",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Node node0 = new Node(47);\n    node0.setType(85);\n    Node node1 = new Node(29, node0, node0, node0, node0, 40, 30);\n    Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n}",
    "testName" : "test089"
  },
  "test1617" : {
    "methodSignature" : "static boolean containsUnicodeEscape(String s)",
    "methodName" : "containsUnicodeEscape",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    boolean boolean0 = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\"tT;(< ,vN9~{TwrG\");\n}",
    "testName" : "test1617"
  },
  "test1415" : {
    "methodSignature" : "public boolean isAdd()",
    "methodName" : "isAdd",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    Node node0 = new Node(63, 63, 63);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n    node1.isAdd();\n}",
    "testName" : "test1415"
  },
  "test0910" : {
    "methodSignature" : "public boolean isTypeOf()",
    "methodName" : "isTypeOf",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    Node node0 = new Node(38, 38, 38);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);\n    Compiler compiler0 = new Compiler();\n    peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);\n    Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);\n    node1.isTypeOf();\n}",
    "testName" : "test0910"
  },
  "test1516" : {
    "methodSignature" : "static boolean containsUnicodeEscape(String s)",
    "methodName" : "containsUnicodeEscape",
    "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    boolean boolean0 = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\"s1}hD8y_MOh}oR[|,\");\n}",
    "testName" : "test1516"
  }
}