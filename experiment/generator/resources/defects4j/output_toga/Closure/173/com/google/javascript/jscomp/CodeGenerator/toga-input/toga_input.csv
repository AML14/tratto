focal_method,test_prefix,docstring
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test000() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    String string0 = codeGenerator0.regexpEscape("" *k3(]>z;s<<qjWC<Af"");
    assertEquals(""/ *k3(]>z;s<<qjWC<Af/"", string0);
}",""
"public void tagAsStrict() {
    add(""'use strict';"");
}","public void test011() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.tagAsStrict();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}","/**
 * Insert a ECMASCRIPT 5 strict annotation.
 */"
"String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null, false, false);
}","public void test022() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(""\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000"");
    assertEquals(""\""\\u0001\\x00\\u00a0\\x00\\x00\\x00\\x00\\x00\\x00\\t\\n\\x0B\\f\\r\\x00\\x00\\u2028\\u2029\\x00\\x00\\x00\\x00\\x00\\u202f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00j\\x00\\x00\\x00\\x00\\x00\\x00\\u3000\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\u0085\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\x00\\x00\\x00\\x00\\x00\\u205f\\u1680\\x00\\x00\\u180e\\x00\\x00\\x00\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"void addCaseBody(Node caseBody) {
    cc.beginCaseBody();
    add(caseBody);
    cc.endCaseBody();
}","public void test033() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    Node node0 = new Node(105);
    // Undeclared exception!
    try {
        codeGenerator0.addCaseBody(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, boolean isArrayOrFunctionArgument) {
    addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);
}","public void test044() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    codeGenerator0.addList((Node) null, true);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test055() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
    String string0 = codeGenerator0.regexpEscape(""`&<!--"");
    assertEquals(""/`&\\x3c!--/"", string0);
}",""
"static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
        try {
            long l = Long.parseLong(s);
            if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                return l;
            }
        } catch (NumberFormatException e) {
            // The number was too long to parse. Fall through to NaN.
        }
    }
    return Double.NaN;
}","public void test066() throws Throwable {
    double double0 = CodeGenerator.getSimpleNumber(""42"");
    assertEquals(42.0, double0, 0.01);
}",""
"static boolean isSimpleNumber(String s) {
    int len = s.length();
    if (len == 0) {
        return false;
    }
    for (int index = 0; index < len; index++) {
        char c = s.charAt(index);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    return len == 1 || s.charAt(0) != '0';
}","public void test077() throws Throwable {
    boolean boolean0 = CodeGenerator.isSimpleNumber("""");
    assertFalse(boolean0);
}",""
"static boolean isSimpleNumber(String s) {
    int len = s.length();
    if (len == 0) {
        return false;
    }
    for (int index = 0; index < len; index++) {
        char c = s.charAt(index);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    return len == 1 || s.charAt(0) != '0';
}","public void test088() throws Throwable {
    boolean boolean0 = CodeGenerator.isSimpleNumber(""*S6@ruG+&Rz"");
    assertFalse(boolean0);
}",""
"static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
        try {
            long l = Long.parseLong(s);
            if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                return l;
            }
        } catch (NumberFormatException e) {
            // The number was too long to parse. Fall through to NaN.
        }
    }
    return Double.NaN;
}","public void test099() throws Throwable {
    double double0 = CodeGenerator.getSimpleNumber(""6"");
    assertEquals(6.0, double0, 0.01);
}",""
"static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
        try {
            long l = Long.parseLong(s);
            if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                return l;
            }
        } catch (NumberFormatException e) {
            // The number was too long to parse. Fall through to NaN.
        }
    }
    return Double.NaN;
}","public void test1010() throws Throwable {
    double double0 = CodeGenerator.getSimpleNumber(""agudmj*"");
    assertEquals(Double.NaN, double0, 0.01);
}",""
"void addArrayList(Node firstInList) {
    boolean lastWasEmpty = false;
    for (Node n = firstInList; n != null; n = n.getNext()) {
        if (n != firstInList) {
            cc.listSeparator();
        }
        addExpr(n, 1, Context.OTHER);
        lastWasEmpty = n.isEmpty();
    }
    if (lastWasEmpty) {
        cc.listSeparator();
    }
}","public void test1111() throws Throwable {
    Node node0 = new Node(85);
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addArrayList(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}","/**
 * This function adds a comma-separated list as is specified by an ARRAYLIT
 * node with the associated skipIndexes array.  This is a space optimization
 * since we avoid creating a whole Node object for each empty array literal
 * slot.
 * @param firstInList The first in the node list (chained through the next
 * property).
 */"
"void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) {
    for (Node n = firstInList; n != null; n = n.getNext()) {
        boolean isFirst = n == firstInList;
        if (isFirst) {
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
        } else {
            cc.listSeparator();
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0, getContextForNoInOperator(lhsContext));
        }
    }
}","public void test1212() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Node node0 = Node.newString("""");
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.STATEMENT;
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) {
    for (Node n = firstInList; n != null; n = n.getNext()) {
        boolean isFirst = n == firstInList;
        if (isFirst) {
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
        } else {
            cc.listSeparator();
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0, getContextForNoInOperator(lhsContext));
        }
    }
}","public void test1313() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    Node node0 = new Node(9);
    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) {
    for (Node n = firstInList; n != null; n = n.getNext()) {
        boolean isFirst = n == firstInList;
        if (isFirst) {
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
        } else {
            cc.listSeparator();
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0, getContextForNoInOperator(lhsContext));
        }
    }
}","public void test1414() throws Throwable {
    Node node0 = new Node(51, 31, 31);
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList) {
    addList(firstInList, true, Context.OTHER);
}","public void test1515() throws Throwable {
    Node node0 = new Node(110);
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for SWITCH (type 110)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"void addAllSiblings(Node n) {
    for (Node c = n; c != null; c = c.getNext()) {
        add(c);
    }
}","public void test1616() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    codeGenerator0.addAllSiblings((Node) null);
}",""
"void addAllSiblings(Node n) {
    for (Node c = n; c != null; c = c.getNext()) {
        add(c);
    }
}","public void test1717() throws Throwable {
    Node node0 = new Node(93);
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addAllSiblings(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null, false, false);
}","public void test1818() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(""e(X\""U<2BR4XIiz^P!"");
    assertEquals(""\""e(X\\\""U<2BR4XIiz^P!\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test1919() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    String string0 = codeGenerator0.regexpEscape(""<{GI'y|AhulvKHc'TE"");
    assertEquals(""/<{GI'y|AhulvKHc'TE\\u007f/"", string0);
}",""
"String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null, false, false);
}","public void test2020() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(""fPntNfatm|e=R"");
    assertEquals(""\""fPntNfatm|e\\x3dR\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null, false, false);
}","public void test2121() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(""lmmMyy)xT=->%lR"");
    assertEquals(""\""lmmMyy)xT=->%lR\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2222() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
    String string0 = codeGenerator0.regexpEscape(""=AGa+"");
    assertEquals(""/=AGa+/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2323() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    String string0 = codeGenerator0.regexpEscape(""`&<!--"");
    assertEquals(""/`&\\x3c!--/"", string0);
}",""
"String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null, false, false);
}","public void test2424() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(""5i30$do&</scriptz.u"");
    assertEquals(""\""5i30$do\\x26\\x3c/scriptz.u\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null, false, false);
}","public void test2525() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(""}K2Oq>y"");
    assertEquals(""\""}K2Oq\\x3ey\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2626() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
    String string0 = codeGenerator0.regexpEscape(""Of4}0{Q>"");
    assertEquals(""/Of4}0{Q>/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2727() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    String string0 = codeGenerator0.regexpEscape("">)4o@J)vS J"");
    assertEquals(""/>)4o@J)vS J/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2828() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    String string0 = codeGenerator0.regexpEscape(""CH[<!-->wSR;"");
    assertEquals(""/CH[\\x3c!--\\x3ewSR;/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2929() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
    String string0 = codeGenerator0.regexpEscape(""</script|?3r^0@"");
    assertEquals(""/\\x3c/script|?3r^0@/"", string0);
}",""
"String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) {
    return strEscape(s, '/', ""\"""", ""'"", ""\\"", outputCharsetEncoder, false, true);
}","public void test3030() throws Throwable {
    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    String string0 = codeGenerator0.regexpEscape(""!--b~vx"", charsetEncoder0);
    assertEquals(""/!--b~vx/"", string0);
}","/**
 * Escapes regular expression
 */"
"static String identifierEscape(String s) {
    // First check if escaping is needed at all -- in most cases it isn't.
    if (NodeUtil.isLatin(s)) {
        return s;
    }
    // Now going through the string to escape non-Latin characters if needed.
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        // Identifiers should always go to Latin1/ ASCII characters because
        // different browser's rules for valid identifier characters are
        // crazy.
        if (c > 0x1F && c < 0x7F) {
            sb.append(c);
        } else {
            appendHexJavaScriptRepresentation(sb, c);
        }
    }
    return sb.toString();
}","public void test3131() throws Throwable {
    String string0 = CodeGenerator.identifierEscape(""\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u202F=\u0000\u0000]\u0000\u0000 \u0000\u0000j\u0000\u0000\u0000\u0000\u0000?\u0000\u0000a\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2004\u2005\u2006\u2007\u2008\u2009,\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000CV"");
    assertEquals(""\\u0001\\u0000\\u00a0\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0009\\u000a\\u000b\\u000c\\u000d\\u0000\\u0000\\u2028\\u2029\\u0000\\u0000\\u0000\\u0000\\u202f=\\u0000\\u0000]\\u0000\\u0000 \\u0000\\u0000j\\u0000\\u0000\\u0000\\u0000\\u0000?\\u0000\\u0000a\\u0000\\u0000\\u0000\\u0000\\u0085\\u2000\\u2001\\u2002\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009,\\u0000\\u0000\\u0000\\u0000\\u0000\\u205f\\u1680\\u0000\\u0000\\u180e\\u0000CV"", string0);
}",""
"static String identifierEscape(String s) {
    // First check if escaping is needed at all -- in most cases it isn't.
    if (NodeUtil.isLatin(s)) {
        return s;
    }
    // Now going through the string to escape non-Latin characters if needed.
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        // Identifiers should always go to Latin1/ ASCII characters because
        // different browser's rules for valid identifier characters are
        // crazy.
        if (c > 0x1F && c < 0x7F) {
            sb.append(c);
        } else {
            appendHexJavaScriptRepresentation(sb, c);
        }
    }
    return sb.toString();
}","public void test3232() throws Throwable {
    String string0 = CodeGenerator.identifierEscape(""CE?zqfV.lLj"");
    assertEquals(""CE?zqfV.lLj"", string0);
}",""
