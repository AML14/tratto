{
  "test1212" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);\n    functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, true);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);\n    functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, true, true);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    JSModule jSModule0 = new JSModule(\"AFTER_PREPARATION\");\n    functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, linkedHashSet0, true, true);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    JSModule jSModule0 = new JSModule((String) null);\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    JSModule jSModule1 = new JSModule((String) null);\n    functionInjector0.inliningLowersCost(jSModule1, (Node) null, immutableList0, linkedHashSet0, true, true);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions)",
    "methodName" : "canInlineReferenceToFunction",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    Node node0 = Node.newString(\"VAR_DECL_SIMPLE_ASSIGNMENT\", 55, 39);\n    Node node1 = new Node(4095, node0, node0, node0, node0);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node1, (Node) null, linkedHashSet0, functionInjector_InliningMode0, false, true);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions)",
    "methodName" : "canInlineReferenceToFunction",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;\n    Node node0 = Node.newString(\"jvAUE<\", (-596), (-596));\n    Node node1 = new Node((-596), node0, node0, node0, node0, 48, 52);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, set0, functionInjector_InliningMode0, false, false);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "Node inline(Node callNode, String fnName, Node fnNode, InliningMode mode)",
    "methodName" : "inline",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;\n    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    functionInjector0.inline((Node) null, \"?bvr.2jH+#Ma\", (Node) null, functionInjector_InliningMode0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, true);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);\n    boolean boolean0 = functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, true, true);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    JSModule jSModule0 = new JSModule(\"\");\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);\n    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);\n    Set<String> set0 = inlineSimpleMethods0.externMethods;\n    functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);\n}",
    "testName" : "test099"
  },
  "test1414" : {
    "methodSignature" : "public void setKnownConstants(Set<String> knownConstants)",
    "methodName" : "setKnownConstants",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    functionInjector0.setKnownConstants(set0);\n    functionInjector0.setKnownConstants(set0);\n}",
    "testName" : "test1414"
  },
  "test000" : {
    "methodSignature" : "void maybePrepareCall(Node callNode)",
    "methodName" : "maybePrepareCall",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    functionInjector0.maybePrepareCall((Node) null);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions)",
    "methodName" : "canInlineReferenceToFunction",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, false);\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    Node node0 = Node.newString(\"$VALES\", (-525), (-525));\n    Node node1 = new Node(31, node0, node0, node0, node0);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, linkedHashSet0, functionInjector_InliningMode0, true, true);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "Node inline(Node callNode, String fnName, Node fnNode, InliningMode mode)",
    "methodName" : "inline",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;\n    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);\n    functionInjector0.inline((Node) null, \"g$ oP\", (Node) null, functionInjector_InliningMode0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions)",
    "methodName" : "canInlineReferenceToFunction",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    Node node0 = Node.newString(2929, \"; \");\n    Node node1 = new Node(4095, node0, node0, node0);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    Node node2 = new Node(4, node1);\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node1, node2, compilerOptions0.stripNamePrefixes, functionInjector_InliningMode0, false, false);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    JSModule jSModule0 = new JSModule(\":M=HTm<-9\\\",An%p\");\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of();\n    boolean boolean0 = functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, (Set<String>) null, true, true);\n}",
    "testName" : "test088"
  }
}