{
  "test23" : {
    "methodSignature" : "public int getChildCount()",
    "methodName" : "getChildCount",
    "className" : "com.google.javascript.jscomp.PeepholeOptimizationsPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.PreprocessorSymbolTable\", \"com.google.javascript.jscomp.PreprocessorSymbolTable\");\n    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();\n    AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[4];\n    abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) peepholeFoldConstants0;\n    abstractPeepholeOptimizationArray0[1] = (AbstractPeepholeOptimization) peepholeRemoveDeadCode0;\n    abstractPeepholeOptimizationArray0[2] = (AbstractPeepholeOptimization) peepholeFoldConstants0;\n    abstractPeepholeOptimizationArray0[3] = (AbstractPeepholeOptimization) peepholeSubstituteAlternateSyntax0;\n    node0.addChildToBack(node0);\n    PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);\n    peepholeOptimizationsPass0.process(node0, node0);\n    node0.getChildCount();\n}",
    "testName" : "test23"
  },
  "test34" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.PeepholeOptimizationsPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"3,Ydm\", \">i\");\n    AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[3];\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) peepholeSubstituteAlternateSyntax0;\n    PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);\n    abstractPeepholeOptimizationArray0[1] = (AbstractPeepholeOptimization) peepholeFoldConstants0;\n    StatementFusion statementFusion0 = new StatementFusion();\n    abstractPeepholeOptimizationArray0[2] = (AbstractPeepholeOptimization) statementFusion0;\n    PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);\n    peepholeOptimizationsPass0.process(node0, node0);\n}",
    "testName" : "test34"
  },
  "test00" : {
    "methodSignature" : "public AbstractCompiler getCompiler()",
    "methodName" : "getCompiler",
    "className" : "com.google.javascript.jscomp.PeepholeOptimizationsPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[3];\n    PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);\n    AbstractCompiler abstractCompiler0 = peepholeOptimizationsPass0.getCompiler();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public boolean isBreak()",
    "methodName" : "isBreak",
    "className" : "com.google.javascript.jscomp.PeepholeOptimizationsPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[0];\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"3OY>dm\", \"3OY>dm\");\n    PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);\n    peepholeOptimizationsPass0.process(node0, node0);\n    peepholeOptimizationsPass0.process(node0, node0);\n    node0.isBreak();\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public boolean hasMoreThanOneChild()",
    "methodName" : "hasMoreThanOneChild",
    "className" : "com.google.javascript.jscomp.PeepholeOptimizationsPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);\n    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.PreprocessorSymbolTable\", \"com.google.javascript.jscomp.PreprocessorSymbolTable\");\n    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();\n    AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[4];\n    abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) peepholeFoldConstants0;\n    abstractPeepholeOptimizationArray0[1] = (AbstractPeepholeOptimization) peepholeRemoveDeadCode0;\n    abstractPeepholeOptimizationArray0[2] = (AbstractPeepholeOptimization) peepholeFoldConstants0;\n    abstractPeepholeOptimizationArray0[3] = (AbstractPeepholeOptimization) peepholeSubstituteAlternateSyntax0;\n    node0.addChildToBack(node0);\n    PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);\n    peepholeOptimizationsPass0.process(node0, node0);\n    node0.hasMoreThanOneChild();\n}",
    "testName" : "test22"
  }
}