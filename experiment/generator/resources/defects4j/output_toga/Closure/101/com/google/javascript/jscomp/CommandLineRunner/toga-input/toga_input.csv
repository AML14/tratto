focal_method,test_prefix,docstring
"@Override
protected Compiler createCompiler() {
    return new Compiler(getErrorPrintStream());
}","public void test00() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    Compiler compiler0 = commandLineRunner0.createCompiler();
    assertNotNull(compiler0);
}",""
"protected CommandLineRunner(String[] args, PrintStream out, PrintStream err) throws CmdLineException {
    super(out, err);
    initConfigFromFlags(args, err);
}","public void test11() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
}",""
"public static void main(String[] args) {
    try {
        (new CommandLineRunner(args)).run();
    } catch (CmdLineException e) {
        System.exit(-1);
    }
}","public void test22() throws Throwable {
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
    } catch (System.SystemExitException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.System"", e);
    }
}","/**
 * Runs the Compiler. Exits cleanly in the event of an error.
 */"
"protected CommandLineRunner(String[] args) throws CmdLineException {
    super();
    initConfigFromFlags(args, System.err);
}","public void test33() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""com.google.javascript.jscomp.CommandLineRunner$FormattingOption"";
    CommandLineRunner commandLineRunner0 = null;
    try {
        commandLineRunner0 = new CommandLineRunner(stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // No argument is allowed: com.google.javascript.jscomp.CommandLineRunner$FormattingOption
        //
        verifyException(""org.kohsuke.args4j.CmdLineParser"", e);
    }
}","/**
 * Create a new command-line runner. You should only need to call
 * the constructor if you're extending this class. Otherwise, the main
 * method should instantiate it.
 */"
"protected CommandLineRunner(String[] args) throws CmdLineException {
    super();
    initConfigFromFlags(args, System.err);
}","public void test44() throws Throwable {
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""--A="";
    CommandLineRunner commandLineRunner0 = null;
    try {
        commandLineRunner0 = new CommandLineRunner(stringArray0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No match found
        //
        verifyException(""java.util.regex.Matcher"", e);
    }
}","/**
 * Create a new command-line runner. You should only need to call
 * the constructor if you're extending this class. Otherwise, the main
 * method should instantiate it.
 */"
"@Override
protected CompilerOptions createOptions() {
    CompilerOptions options = new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level = flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
        level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel = flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (FormattingOption formattingOption : flags.formatting) {
        formattingOption.applyToOptions(options);
    }
    if (flags.process_closure_primitives) {
        options.closurePass = true;
    }
    initOptionsFromFlags(options);
    return options;
}","public void test55() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    assertFalse(compilerOptions0.generatePseudoNames);
}",""
