project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 1, 1);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.defineProperty("""", noResolvedType0, true, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test001,"public void test001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 1, 1);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.defineProperty("""", noResolvedType0, true, node0);
    instanceObjectType0.getPropertyNode("""");
    assertFalse(instanceObjectType0.isFunctionPrototypeType());
}",0,assertTrue(instanceObjectType0.isFunctionPrototypeType())
project,0,test013,"public void test013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Named type with empty name component"", 1, 1);
    ObjectType.Property objectType_Property0 = new ObjectType.Property(""Not declared as a type name"", noResolvedType0, false, node0);
    ObjectType.Property objectType_Property1 = objectType_Property0.getSymbol();
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",0,assertTrue(noResolvedType0.isFunctionPrototypeType())
project,0,test024,"public void test024() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
    instanceObjectType0.getPropertyNode(""Not declared as a constructor"");
    noObjectType0.setSource((Node) null);
    assertFalse(noObjectType0.isFunctionPrototypeType());
}",0,assertTrue(noObjectType0.isFunctionPrototypeType())
project,0,test035,"public void test035() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = new Node(0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    instanceObjectType0.defineProperty(""Not declared as a type name"", noResolvedType0, true, node0);
    boolean boolean0 = instanceObjectType0.defineProperty(""Not declared as a type name"", noResolvedType0, true, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test036,"public void test036() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = new Node(0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    instanceObjectType0.defineProperty(""Not declared as a type name"", noResolvedType0, true, node0);
    boolean boolean0 = instanceObjectType0.defineProperty(""Not declared as a type name"", noResolvedType0, true, node0);
    assertFalse(instanceObjectType0.isFunctionPrototypeType());
}",0,assertTrue(instanceObjectType0.isFunctionPrototypeType())
project,0,test048,"public void test048() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Named type with empty name component"", 1, 1);
    ObjectType.Property objectType_Property0 = new ObjectType.Property(""Not declared as a type name"", noResolvedType0, true, node0);
    objectType_Property0.setNode(node0);
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",0,assertTrue(noResolvedType0.isFunctionPrototypeType())
project,0,test059,"public void test059() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""S4Qo"");
    JSType jSType0 = errorFunctionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
    assertFalse(jSType0.isFunctionPrototypeType());
}",0,assertFalse(jSType0.isFunctionPrototypeType())
project,0,test0610,"public void test0610() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Unknown class name"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    enumType0.getPossibleToBooleanOutcomes();
    assertFalse(enumType0.isFunctionPrototypeType());
}",0,assertTrue(enumType0.isFunctionPrototypeType())
project,0,test0711,"public void test0711() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
    parameterizedType0.getIndexType();
    assertFalse(parameterizedType0.isFunctionPrototypeType());
}",0,assertTrue(parameterizedType0.isFunctionPrototypeType())
project,0,test0812,"public void test0812() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    boolean boolean0 = enumType0.defineElement(""Named type with empty name component"", node0);
    assertFalse(enumType0.isFunctionPrototypeType());
}",0,assertTrue(enumType0.isFunctionPrototypeType())
project,0,test0813,"public void test0813() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    boolean boolean0 = enumType0.defineElement(""Named type with empty name component"", node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0914,"public void test0914() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""R\""ZUYVU>+?} "");
    boolean boolean0 = templateType0.isNativeObjectType();
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,
project,0,test0915,"public void test0915() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""R\""ZUYVU>+?} "");
    boolean boolean0 = templateType0.isNativeObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1016,"public void test1016() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    templateType0.setPropertyJSDocInfo(""Unknown class name"", jSDocInfo0);
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test1117,"public void test1117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isString();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1118,"public void test1118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isString();
    assertFalse(noObjectType0.isFunctionPrototypeType());
}",0,assertTrue(noObjectType0.isFunctionPrototypeType())
project,0,test1219,"public void test1219() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getPropertyNames();
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",0,assertTrue(noResolvedType0.isFunctionPrototypeType())
project,0,test1320,"public void test1320() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a constructor"", ""Not declared as a constructor"", 0, 5);
    namedType0.getOwnerFunction();
    assertFalse(namedType0.isFunctionPrototypeType());
}",0,
project,0,test1421,"public void test1421() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.hasReferenceName();
    assertFalse(boolean0);
}",0,
project,0,test1422,"public void test1422() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.hasReferenceName();
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test1523,"public void test1523() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    indexedType0.getRootNode();
    assertFalse(indexedType0.isFunctionPrototypeType());
}",0,assertTrue(indexedType0.isFunctionPrototypeType())
project,0,test1624,"public void test1624() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.removeProperty(""Not declared as a type name"");
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test1625,"public void test1625() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.removeProperty(""Not declared as a type name"");
    assertFalse(boolean0);
}",0,
project,0,test1726,"public void test1726() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "")kx^$"");
    templateType0.getOwnPropertyNames();
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,
project,0,test1827,"public void test1827() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""R\""ZUYVU>+?} "");
    templateType0.getParameterType();
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test1928,"public void test1928() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.setJSDocInfo((JSDocInfo) null);
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",0,assertTrue(noResolvedType0.isFunctionPrototypeType())
project,0,test2029,"public void test2029() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearCachedValues();
    assertFalse(noType0.isFunctionPrototypeType());
}",0,assertTrue(noType0.isFunctionPrototypeType())
project,0,test2030,"public void test2030() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearCachedValues();
    assertFalse(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test2131,"public void test2131() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    templateType0.getCtorImplementedInterfaces();
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test2232,"public void test2232() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
    unknownType0.getCtorExtendedInterfaces();
    assertFalse(unknownType0.isFunctionPrototypeType());
}",0,assertTrue(unknownType0.isFunctionPrototypeType())
project,0,test2333,"public void test2333() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""qY|g.T{Efmy Xyx%~"");
    templateType0.getOwnPropertyJSDocInfo(""qY|g.T{Efmy Xyx%~"");
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test2434,"public void test2434() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
    // Undeclared exception!
    try {
        instanceObjectType0.visit((Visitor<InstanceObjectType>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ObjectType"", e);
    }
}",0,
project,0,test2535,"public void test2535() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.ObjectType"");
    boolean boolean0 = templateType0.isPropertyInExterns(""com.google.javascript.rhino.jstype.ObjectType"");
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test2536,"public void test2536() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.ObjectType"");
    boolean boolean0 = templateType0.isPropertyInExterns(""com.google.javascript.rhino.jstype.ObjectType"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2637,"public void test2637() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasDisplayName();
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",0,assertTrue(noResolvedType0.isFunctionPrototypeType())
project,0,test2638,"public void test2638() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasDisplayName();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2739,"public void test2739() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""U|fE<TG0W4E>"");
    templateType0.getTypeOfThis();
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test2840,"public void test2840() throws Throwable {
    String string0 = ObjectType.createDelegateSuffix(""Z=.31,5wk"");
    assertEquals(""(Z=.31,5wk)"", string0);
}",1,
project,0,test2941,"public void test2941() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getParentScope();
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",0,assertTrue(noResolvedType0.isFunctionPrototypeType())
project,0,test3042,"public void test3042() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    enumType0.getOwnSlot(""Unknown class name"");
    assertFalse(enumType0.isFunctionPrototypeType());
}",0,
project,0,test3143,"public void test3143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""R\""ZUYVU>+?} "");
    templateType0.getOwnSlot(""R\""ZUYVU>+?} "");
    assertFalse(templateType0.isFunctionPrototypeType());
}",0,assertTrue(templateType0.isFunctionPrototypeType())
project,0,test3244,"public void test3244() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    objectType0.getJSDocInfo();
    assertFalse(objectType0.isFunctionPrototypeType());
}",0,
project,0,test3345,"public void test3345() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
    boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3346,"public void test3346() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
    boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    assertFalse(instanceObjectType0.isFunctionPrototypeType());
}",0,assertTrue(instanceObjectType0.isFunctionPrototypeType())
project,0,test3447,"public void test3447() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    Node node0 = new Node(47, 1, 1);
    noResolvedType0.setPrototype(instanceObjectType0, node0);
    boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    assertTrue(instanceObjectType0.isFunctionPrototypeType());
}",0,assertTrue(instanceObjectType0.isFunctionPrototypeType())
project,0,test3448,"public void test3448() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    Node node0 = new Node(47, 1, 1);
    noResolvedType0.setPrototype(instanceObjectType0, node0);
    boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3549,"public void test3549() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = new Node(1, 2541, 49);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""QA(p$g2ePQ1LAsPp6g"", node0, noResolvedType0);
    String string0 = enumType0.getDisplayName();
    assertEquals(""QA"", string0);
}",0,assertNotNull(string0)
project,0,test3550,"public void test3550() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = new Node(1, 2541, 49);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""QA(p$g2ePQ1LAsPp6g"", node0, noResolvedType0);
    String string0 = enumType0.getDisplayName();
    assertFalse(enumType0.isFunctionPrototypeType());
}",0,assertTrue(enumType0.isFunctionPrototypeType())
project,0,test3651,"public void test3651() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    String string0 = enumType0.getDisplayName();
    assertFalse(enumType0.isFunctionPrototypeType());
}",0,assertTrue(enumType0.isFunctionPrototypeType())
project,0,test3652,"public void test3652() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    String string0 = enumType0.getDisplayName();
    assertEquals(""Not declared as a constructor"", string0);
}",0,
project,0,test3753,"public void test3753() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    Node node0 = new Node(1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, instanceObjectType0);
    enumType0.testForEquality(enumType0);
}",0,
project,0,test3854,"public void test3854() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(objectType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test3955,"public void test3955() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, noResolvedType0);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    enumType0.getTypesUnderInequality(prototypeObjectType0);
    assertTrue(prototypeObjectType0.hasCachedValues());
}",0,assertTrue(prototypeObjectType0.hasCachedValues())
project,0,test3956,"public void test3956() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, noResolvedType0);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    enumType0.getTypesUnderInequality(prototypeObjectType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test4057,"public void test4057() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    enumType0.setPropertyJSDocInfo(""Unknown class name"", jSDocInfo0);
    assertFalse(enumType0.isInterface());
}",0,assertFalse(enumType0.isInterface())
project,0,test4158,"public void test4158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, noResolvedType0);
    boolean boolean0 = noResolvedType0.defineInferredProperty(""Not declared as a constructor"", enumType0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4259,"public void test4259() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
    indexedType0.findPropertyType(""Unknown class name"");
    assertTrue(objectType0.hasCachedValues());
}",0,assertFalse(objectType0.hasCachedValues())
project,0,test4360,"public void test4360() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isNullType());
}",0,assertTrue(jSType0.isNullType())
project,0,test4461,"public void test4461() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    boolean boolean0 = instanceObjectType0.defineProperty(""Unknown class name"", noResolvedType0, false, node0);
    boolean boolean1 = instanceObjectType0.defineProperty(""Unknown class name"", noResolvedType0, false, node0);
    assertFalse(boolean1 == boolean0);
}",0,
project,0,test4563,"public void test4563() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""/@H8<%"");
    boolean boolean0 = templateType0.isImplicitPrototype(templateType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4664,"public void test4664() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    String string0 = functionType0.toDebugHashCodeString();
    assertEquals(""function (this:{-1795692850}, {12}, {12}, {12}): {-1795692850}"", string0);
}",0,
project,0,test4765,"public void test4765() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.differsFrom(allType0);
    boolean boolean0 = noResolvedType0.hasCachedValues();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4866,"public void test4866() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    boolean boolean0 = instanceObjectType0.defineProperty(""Unknown class name"", noResolvedType0, false, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
