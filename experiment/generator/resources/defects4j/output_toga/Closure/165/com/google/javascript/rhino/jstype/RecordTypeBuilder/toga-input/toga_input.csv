focal_method,test_prefix,docstring
"public boolean isNoObjectType() {
    return false;
}","public void test00() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    RecordTypeBuilder recordTypeBuilder0 = new RecordTypeBuilder(jSTypeRegistry0);
    Node node0 = new Node(0);
    recordTypeBuilder0.addProperty("""", (JSType) null, node0);
    JSType jSType0 = recordTypeBuilder0.build();
    assertFalse(jSType0.isNoObjectType());
}",""
"/**
 * Adds a property with the given name and type to the record type.
 * @param name the name of the new property
 * @param type the JSType of the new property
 * @param propertyNode the node that holds this property definition
 * @return The builder itself for chaining purposes, or null if there's
 *          a duplicate.
 */
public RecordTypeBuilder addProperty(String name, JSType type, Node propertyNode) {
    isEmpty = false;
    if (properties.containsKey(name)) {
        return null;
    }
    properties.put(name, new RecordProperty(type, propertyNode));
    return this;
}","public void test11() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    RecordTypeBuilder recordTypeBuilder0 = new RecordTypeBuilder(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    RecordTypeBuilder recordTypeBuilder1 = recordTypeBuilder0.addProperty("""", errorFunctionType0, (Node) null);
    RecordTypeBuilder recordTypeBuilder2 = recordTypeBuilder1.addProperty("""", errorFunctionType0, (Node) null);
    assertNull(recordTypeBuilder2);
}","/**
 * See the comments on RecordType about synthetic types.
 */"
"public JSType build() {
    // If we have an empty record, simply return the object type.
    if (isEmpty) {
        return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
    }
    return new RecordType(registry, Collections.unmodifiableMap(properties));
}","public void test22() throws Throwable {
    RecordTypeBuilder recordTypeBuilder0 = new RecordTypeBuilder((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        recordTypeBuilder0.build();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.RecordTypeBuilder"", e);
    }
}","/**
 * Creates a record.
 * @return The record type.
 */"
