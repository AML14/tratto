focal_method,test_prefix,docstring
"@Override
boolean defineProperty(String name, JSType type, boolean inferred, Node propertyNode) {
    ObjectType proto = getImplicitPrototype();
    if (proto != null && proto.hasOwnDeclaredProperty(name)) {
        return false;
    }
    return super.defineProperty(name, type, inferred, propertyNode);
}","public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 1, 1);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.defineProperty("""", noResolvedType0, true, node0);
    assertTrue(boolean0);
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 1, 1);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.defineProperty("""", noResolvedType0, true, node0);
    instanceObjectType0.getPropertyNode("""");
    assertFalse(instanceObjectType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Named type with empty name component"", 1, 1);
    ObjectType.Property objectType_Property0 = new ObjectType.Property(""Not declared as a type name"", noResolvedType0, false, node0);
    ObjectType.Property objectType_Property1 = objectType_Property0.getSymbol();
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test024() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
    instanceObjectType0.getPropertyNode(""Not declared as a constructor"");
    noObjectType0.setSource((Node) null);
    assertFalse(noObjectType0.isFunctionPrototypeType());
}",""
"@Override
boolean defineProperty(String name, JSType type, boolean inferred, Node propertyNode) {
    ObjectType proto = getImplicitPrototype();
    if (proto != null && proto.hasOwnDeclaredProperty(name)) {
        return false;
    }
    return super.defineProperty(name, type, inferred, propertyNode);
}","public void test035() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = new Node(0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    instanceObjectType0.defineProperty(""Not declared as a type name"", noResolvedType0, true, node0);
    boolean boolean0 = instanceObjectType0.defineProperty(""Not declared as a type name"", noResolvedType0, true, node0);
    assertTrue(boolean0);
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test036() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = new Node(0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    instanceObjectType0.defineProperty(""Not declared as a type name"", noResolvedType0, true, node0);
    boolean boolean0 = instanceObjectType0.defineProperty(""Not declared as a type name"", noResolvedType0, true, node0);
    assertFalse(instanceObjectType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test048() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Named type with empty name component"", 1, 1);
    ObjectType.Property objectType_Property0 = new ObjectType.Property(""Not declared as a type name"", noResolvedType0, true, node0);
    objectType_Property0.setNode(node0);
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",""
"public boolean isFunctionPrototypeType() {
    return false;
}","public void test059() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""S4Qo"");
    JSType jSType0 = errorFunctionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
    assertFalse(jSType0.isFunctionPrototypeType());
}","/**
 * Whether this is the prototype of a function.
 */"
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test0610() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Unknown class name"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    enumType0.getPossibleToBooleanOutcomes();
    assertFalse(enumType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test0711() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
    parameterizedType0.getIndexType();
    assertFalse(parameterizedType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test0812() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    boolean boolean0 = enumType0.defineElement(""Named type with empty name component"", node0);
    assertFalse(enumType0.isFunctionPrototypeType());
}",""
"public boolean defineElement(String name, Node definingNode) {
    elements.add(name);
    return defineDeclaredProperty(name, elementsType, definingNode);
}","public void test0813() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    boolean boolean0 = enumType0.defineElement(""Named type with empty name component"", node0);
    assertTrue(boolean0);
}","/**
 * Defines a new element on this enum.
 * @param name the name of the new element
 * @param definingNode the {@code Node} that defines this new element
 * @return true iff the new element is added successfully
 */"
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test0914() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""R\""ZUYVU>+?} "");
    boolean boolean0 = templateType0.isNativeObjectType();
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public boolean isNativeObjectType() {
    return referencedObjType == null ? false : referencedObjType.isNativeObjectType();
}","public void test0915() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""R\""ZUYVU>+?} "");
    boolean boolean0 = templateType0.isNativeObjectType();
    assertFalse(boolean0);
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1016() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    templateType0.setPropertyJSDocInfo(""Unknown class name"", jSDocInfo0);
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"public final boolean isString() {
    return this.isSubtype(getNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));
}","public void test1117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isString();
    assertTrue(boolean0);
}","/**
 * Tests whether the type is a string (value or Object).
 * @return {@code this &lt;: (String, string)}
 */"
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isString();
    assertFalse(noObjectType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1219() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getPropertyNames();
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1320() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a constructor"", ""Not declared as a constructor"", 0, 5);
    namedType0.getOwnerFunction();
    assertFalse(namedType0.isFunctionPrototypeType());
}",""
"@Override
public boolean hasReferenceName() {
    return referencedObjType == null ? null : referencedObjType.hasReferenceName();
}","public void test1421() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.hasReferenceName();
    assertFalse(boolean0);
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1422() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.hasReferenceName();
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1523() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    indexedType0.getRootNode();
    assertFalse(indexedType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1624() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.removeProperty(""Not declared as a type name"");
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public boolean removeProperty(String name) {
    return referencedObjType == null ? false : referencedObjType.removeProperty(name);
}","public void test1625() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.removeProperty(""Not declared as a type name"");
    assertFalse(boolean0);
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1726() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "")kx^$"");
    templateType0.getOwnPropertyNames();
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1827() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""R\""ZUYVU>+?} "");
    templateType0.getParameterType();
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test1928() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.setJSDocInfo((JSDocInfo) null);
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test2029() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearCachedValues();
    assertFalse(noType0.isFunctionPrototypeType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototypeSlot != null || super.hasCachedValues();
}","public void test2030() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearCachedValues();
    assertFalse(noType0.hasCachedValues());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test2131() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    templateType0.getCtorImplementedInterfaces();
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test2232() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
    unknownType0.getCtorExtendedInterfaces();
    assertFalse(unknownType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test2333() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""qY|g.T{Efmy Xyx%~"");
    templateType0.getOwnPropertyJSDocInfo(""qY|g.T{Efmy Xyx%~"");
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public <T> T visit(Visitor<T> visitor) {
    return visitor.caseObjectType(this);
}","public void test2434() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
    // Undeclared exception!
    try {
        instanceObjectType0.visit((Visitor<InstanceObjectType>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ObjectType"", e);
    }
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test2535() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.ObjectType"");
    boolean boolean0 = templateType0.isPropertyInExterns(""com.google.javascript.rhino.jstype.ObjectType"");
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public boolean isPropertyInExterns(String propertyName) {
    return referencedObjType == null ? false : referencedObjType.isPropertyInExterns(propertyName);
}","public void test2536() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.ObjectType"");
    boolean boolean0 = templateType0.isPropertyInExterns(""com.google.javascript.rhino.jstype.ObjectType"");
    assertFalse(boolean0);
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test2637() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasDisplayName();
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",""
"public boolean hasDisplayName() {
    String displayName = getDisplayName();
    return displayName != null && !displayName.isEmpty();
}","public void test2638() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasDisplayName();
    assertFalse(boolean0);
}","/**
 * @return true if the JSType has a user meaningful label.
 */"
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test2739() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""U|fE<TG0W4E>"");
    templateType0.getTypeOfThis();
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"public static String createDelegateSuffix(String suffix) {
    return ""("" + suffix + "")"";
}","public void test2840() throws Throwable {
    String string0 = ObjectType.createDelegateSuffix(""Z=.31,5wk"");
    assertEquals(""(Z=.31,5wk)"", string0);
}","/**
 * Creates a suffix for a proxy delegate.
 * @see #getNormalizedReferenceName
 */"
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test2941() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getParentScope();
    assertFalse(noResolvedType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test3042() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    enumType0.getOwnSlot(""Unknown class name"");
    assertFalse(enumType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test3143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""R\""ZUYVU>+?} "");
    templateType0.getOwnSlot(""R\""ZUYVU>+?} "");
    assertFalse(templateType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test3244() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    objectType0.getJSDocInfo();
    assertFalse(objectType0.isFunctionPrototypeType());
}",""
"final boolean detectImplicitPrototypeCycle() {
    // detecting cycle
    this.visited = true;
    ObjectType p = getImplicitPrototype();
    while (p != null) {
        if (p.visited) {
            return true;
        } else {
            p.visited = true;
        }
        p = p.getImplicitPrototype();
    }
    // clean up
    p = this;
    do {
        p.visited = false;
        p = p.getImplicitPrototype();
    } while (p != null);
    return false;
}","public void test3345() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
    boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    assertFalse(boolean0);
}","/**
 * Detects a cycle in the implicit prototype chain. This method accesses
 * the {@link #getImplicitPrototype()} method and must therefore be
 * invoked only after the object is sufficiently initialized to respond to
 * calls to this method.<p>
 *
 * The method is not thread safe.<p>
 *
 * @return True iff an implicit prototype cycle was detected.
 */"
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test3346() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
    boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    assertFalse(instanceObjectType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test3447() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    Node node0 = new Node(47, 1, 1);
    noResolvedType0.setPrototype(instanceObjectType0, node0);
    boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    assertTrue(instanceObjectType0.isFunctionPrototypeType());
}",""
"final boolean detectImplicitPrototypeCycle() {
    // detecting cycle
    this.visited = true;
    ObjectType p = getImplicitPrototype();
    while (p != null) {
        if (p.visited) {
            return true;
        } else {
            p.visited = true;
        }
        p = p.getImplicitPrototype();
    }
    // clean up
    p = this;
    do {
        p.visited = false;
        p = p.getImplicitPrototype();
    } while (p != null);
    return false;
}","public void test3448() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    Node node0 = new Node(47, 1, 1);
    noResolvedType0.setPrototype(instanceObjectType0, node0);
    boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    assertTrue(boolean0);
}","/**
 * Detects a cycle in the implicit prototype chain. This method accesses
 * the {@link #getImplicitPrototype()} method and must therefore be
 * invoked only after the object is sufficiently initialized to respond to
 * calls to this method.<p>
 *
 * The method is not thread safe.<p>
 *
 * @return True iff an implicit prototype cycle was detected.
 */"
"@Override
public String getDisplayName() {
    return elementsType.getDisplayName();
}","public void test3549() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = new Node(1, 2541, 49);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""QA(p$g2ePQ1LAsPp6g"", node0, noResolvedType0);
    String string0 = enumType0.getDisplayName();
    assertEquals(""QA"", string0);
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test3550() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = new Node(1, 2541, 49);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""QA(p$g2ePQ1LAsPp6g"", node0, noResolvedType0);
    String string0 = enumType0.getDisplayName();
    assertFalse(enumType0.isFunctionPrototypeType());
}",""
"@Override
public final boolean isFunctionPrototypeType() {
    return getOwnerFunction() != null;
}","public void test3651() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    String string0 = enumType0.getDisplayName();
    assertFalse(enumType0.isFunctionPrototypeType());
}",""
"@Override
public String getDisplayName() {
    return elementsType.getDisplayName();
}","public void test3652() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    String string0 = enumType0.getDisplayName();
    assertEquals(""Not declared as a constructor"", string0);
}",""
"@Override
public TernaryValue testForEquality(JSType that) {
    TernaryValue result = super.testForEquality(that);
    if (result != null) {
        return result;
    }
    return this.isEquivalentTo(that) ? TRUE : FALSE;
}","public void test3753() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    Node node0 = new Node(1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, instanceObjectType0);
    enumType0.testForEquality(enumType0);
}",""
"@Override
public boolean hasCachedValues() {
    return prototypeSlot != null || super.hasCachedValues();
}","public void test3854() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(objectType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test3955() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, noResolvedType0);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    enumType0.getTypesUnderInequality(prototypeObjectType0);
    assertTrue(prototypeObjectType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return prototypeSlot != null || super.hasCachedValues();
}","public void test3956() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, noResolvedType0);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    enumType0.getTypesUnderInequality(prototypeObjectType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public boolean isInterface() {
    return false;
}","public void test4057() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, noResolvedType0);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    enumType0.setPropertyJSDocInfo(""Unknown class name"", jSDocInfo0);
    assertFalse(enumType0.isInterface());
}","/**
 * Whether this type is a {@link FunctionType} that is an interface or a named
 * type that points to such a type.
 */"
"/**
 * Defines a property whose type is inferred.
 * @param propertyName the property's name
 * @param type the type
 * @param propertyNode the node corresponding to the inferred definition of
 *        property that might later be accessed using {@code getPropertyNode}.
 */
public final boolean defineInferredProperty(String propertyName, JSType type, Node propertyNode) {
    if (hasProperty(propertyName)) {
        JSType originalType = getPropertyType(propertyName);
        type = originalType == null ? type : originalType.getLeastSupertype(type);
    }
    boolean result = defineProperty(propertyName, type, true, propertyNode);
    // All property definitions go through this method
    // or defineDeclaredProperty. Because the properties defined an an
    // object can affect subtyping, it's slightly more efficient
    // to register this after defining the property.
    registry.registerPropertyOnType(propertyName, this);
    return result;
}","public void test4158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"", 1, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, noResolvedType0);
    boolean boolean0 = noResolvedType0.defineInferredProperty(""Not declared as a constructor"", enumType0, node0);
    assertTrue(boolean0);
}","/**
 * Defines a property whose type is on a synthesized object. These objects
 * don't actually exist in the user's program. They're just used for
 * bookkeeping in the type system.
 */"
"public boolean hasCachedValues() {
    return !unknown;
}","public void test4259() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
    indexedType0.findPropertyType(""Unknown class name"");
    assertTrue(objectType0.hasCachedValues());
}","/**
 * Returns true if any cached values have been set for this type.  If true,
 * then the prototype chain should not be changed, as it might invalidate the
 * cached values.
 */"
"public boolean isNullType() {
    return false;
}","public void test4360() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isNullType());
}",""
"@Override
boolean defineProperty(String name, JSType type, boolean inferred, Node propertyNode) {
    ObjectType proto = getImplicitPrototype();
    if (proto != null && proto.hasOwnDeclaredProperty(name)) {
        return false;
    }
    return super.defineProperty(name, type, inferred, propertyNode);
}","public void test4461() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    boolean boolean0 = instanceObjectType0.defineProperty(""Unknown class name"", noResolvedType0, false, node0);
    boolean boolean1 = instanceObjectType0.defineProperty(""Unknown class name"", noResolvedType0, false, node0);
    assertFalse(boolean1 == boolean0);
}",""
"final boolean isImplicitPrototype(ObjectType prototype) {
    for (ObjectType current = this; current != null; current = current.getImplicitPrototype()) {
        if (current.isEquivalentTo(prototype)) {
            return true;
        }
    }
    return false;
}","public void test4563() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""/@H8<%"");
    boolean boolean0 = templateType0.isImplicitPrototype(templateType0);
    assertTrue(boolean0);
}","/**
 * Checks that the prototype is an implicit prototype of this object. Since
 * each object has an implicit prototype, an implicit prototype's
 * implicit prototype is also this implicit prototype's.
 *
 * @param prototype any prototype based object
 *
 * @return {@code true} if {@code prototype} is {@code equal} to any
 *         object in this object's implicit prototype chain.
 */"
"@Override
public String toDebugHashCodeString() {
    if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {
        return super.toDebugHashCodeString();
    }
    StringBuilder b = new StringBuilder(32);
    b.append(""function ("");
    int paramNum = call.parameters.getChildCount();
    boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();
    if (hasKnownTypeOfThis) {
        b.append(""this:"");
        b.append(getDebugHashCodeStringOf(typeOfThis));
    }
    if (paramNum > 0) {
        if (hasKnownTypeOfThis) {
            b.append("", "");
        }
        Node p = call.parameters.getFirstChild();
        b.append(getDebugHashCodeStringOf(p.getJSType()));
        p = p.getNext();
        while (p != null) {
            b.append("", "");
            b.append(getDebugHashCodeStringOf(p.getJSType()));
            p = p.getNext();
        }
    }
    b.append("")"");
    b.append("": "");
    b.append(getDebugHashCodeStringOf(call.returnType));
    return b.toString();
}","public void test4664() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    String string0 = functionType0.toDebugHashCodeString();
    assertEquals(""function (this:{-1795692850}, {12}, {12}, {12}): {-1795692850}"", string0);
}",""
"@Override
public boolean hasCachedValues() {
    return prototypeSlot != null || super.hasCachedValues();
}","public void test4765() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.differsFrom(allType0);
    boolean boolean0 = noResolvedType0.hasCachedValues();
    assertTrue(boolean0);
}",""
"@Override
boolean defineProperty(String name, JSType type, boolean inferred, Node propertyNode) {
    ObjectType proto = getImplicitPrototype();
    if (proto != null && proto.hasOwnDeclaredProperty(name)) {
        return false;
    }
    return super.defineProperty(name, type, inferred, propertyNode);
}","public void test4866() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
    boolean boolean0 = instanceObjectType0.defineProperty(""Unknown class name"", noResolvedType0, false, node0);
    assertTrue(boolean0);
}",""
