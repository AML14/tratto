{
  "test4448" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4448() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test4448"
  },
  "test1215" : {
    "methodSignature" : "CompilerOptions getOptions()",
    "methodName" : "getOptions",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1215() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n}",
    "testName" : "test1215"
  },
  "test4447" : {
    "methodSignature" : "public ErrorManager getErrorManager()",
    "methodName" : "getErrorManager",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4447() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n}",
    "testName" : "test4447"
  },
  "test82102" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test82102() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.acceptEcmaScript5();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test82102"
  },
  "test2023" : {
    "methodSignature" : "public LanguageMode languageMode()",
    "methodName" : "languageMode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2023() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.languageMode();\n}",
    "testName" : "test2023"
  },
  "test6986" : {
    "methodSignature" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
    "methodName" : "getReverseAbstractInterpreter",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6986() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n}",
    "testName" : "test6986"
  },
  "test6985" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6985() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test6985"
  },
  "test3235" : {
    "methodSignature" : "void removeChangeHandler(CodeChangeHandler handler)",
    "methodName" : "removeChangeHandler",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3235() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;\n    compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);\n}",
    "testName" : "test3235"
  },
  "test1619" : {
    "methodSignature" : "ScopeCreator getTypedScopeCreator()",
    "methodName" : "getTypedScopeCreator",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1619() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();\n}",
    "testName" : "test1619"
  },
  "test2427" : {
    "methodSignature" : "FunctionInformationMap getFunctionalInformationMap()",
    "methodName" : "getFunctionalInformationMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2427() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();\n}",
    "testName" : "test2427"
  },
  "test3639" : {
    "methodSignature" : "void removeTryCatchFinally()",
    "methodName" : "removeTryCatchFinally",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3639() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.removeTryCatchFinally();\n}",
    "testName" : "test3639"
  },
  "test7392" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7392() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.parseTestCode((String) null);\n}",
    "testName" : "test7392"
  },
  "test93114" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test93114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.getErrorManager();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test93114"
  },
  "test6580" : {
    "methodSignature" : "void addIncrementalSourceAst(JsAst ast)",
    "methodName" : "addIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6580() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    MockFile mockFile0 = new MockFile((File) null, \"[[singleton]]\");\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test6580"
  },
  "test4855" : {
    "methodSignature" : "public int getDepth()",
    "methodName" : "getDepth",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4855() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"j/5Qf`-G%KDV\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    JSModule[] jSModuleArray0 = new JSModule[2];\n    jSModuleArray0[0] = jSModule0;\n    jSModuleArray0[1] = jSModule0;\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n    jSModule0.getDepth();\n}",
    "testName" : "test4855"
  },
  "test2831" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2831() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test2831"
  },
  "test5665" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5665() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);\n    PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);\n    compiler0.setPassConfig(passConfig_PassConfigDelegate0);\n}",
    "testName" : "test5665"
  },
  "test6479" : {
    "methodSignature" : "public CompilerInput newExternInput(String name)",
    "methodName" : "newExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6479() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.newExternInput(\"[[singleton]]\");\n}",
    "testName" : "test6479"
  },
  "test0810" : {
    "methodSignature" : "boolean hasRegExpGlobalReferences()",
    "methodName" : "hasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0810() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.hasRegExpGlobalReferences();\n}",
    "testName" : "test0810"
  },
  "test87108" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test87108() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Region region0 = compiler0.getSourceRegion((String) null, (-708));\n}",
    "testName" : "test87108"
  },
  "test6072" : {
    "methodSignature" : "Node parseInputs()",
    "methodName" : "parseInputs",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6072() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    Node node0 = compiler0.parseInputs();\n}",
    "testName" : "test6072"
  },
  "test057" : {
    "methodSignature" : "void resetUniqueNameId()",
    "methodName" : "resetUniqueNameId",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.resetUniqueNameId();\n}",
    "testName" : "test057"
  },
  "test90111" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test90111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);\n}",
    "testName" : "test90111"
  },
  "test5261" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5261() throws Throwable {\n    Callable<NameAnalyzer> callable0 = (Callable<NameAnalyzer>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(callable0).call();\n    NameAnalyzer nameAnalyzer0 = Compiler.runCallable(callable0, false, true);\n}",
    "testName" : "test5261"
  },
  "test8099" : {
    "methodSignature" : "boolean isInliningForbidden()",
    "methodName" : "isInliningForbidden",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    boolean boolean0 = compiler0.isInliningForbidden();\n}",
    "testName" : "test8099"
  },
  "test6073" : {
    "methodSignature" : "public boolean isSyntheticBlock()",
    "methodName" : "isSyntheticBlock",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6073() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    Node node0 = compiler0.parseInputs();\n    node0.isSyntheticBlock();\n}",
    "testName" : "test6073"
  },
  "test6074" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6074() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    Node node0 = compiler0.parseInputs();\n    node0.getType();\n}",
    "testName" : "test6074"
  },
  "test1114" : {
    "methodSignature" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options)",
    "methodName" : "init",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, compilerOptions0);\n}",
    "testName" : "test1114"
  },
  "test2326" : {
    "methodSignature" : "VariableMap getVariableMap()",
    "methodName" : "getVariableMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2326() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getVariableMap();\n}",
    "testName" : "test2326"
  },
  "test84104" : {
    "methodSignature" : "void throwInternalError(String message, Exception cause)",
    "methodName" : "throwInternalError",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test84104() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.throwInternalError(\"com.google.javascript.jscomp.Compiler$9\", (Exception) null);\n}",
    "testName" : "test84104"
  },
  "test3134" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3134() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    File file0 = MockFile.createTempFile(\" in \", (String) null);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);\n    JSModule[] jSModuleArray0 = new JSModule[1];\n    compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test3134"
  },
  "test5159" : {
    "methodSignature" : "public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5159() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSModule jSModule0 = new JSModule((String) null);\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    Vector<JSModule> vector0 = new Vector<JSModule>();\n    vector0.add(jSModule0);\n    compiler0.compileModules(stack0, vector0, compilerOptions0);\n}",
    "testName" : "test5159"
  },
  "test4346" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4346() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"com.google.javascript.jscomp.Compiler$8\", \"com.google.javascript.jscomp.Compiler$8\");\n    CompilerOptions compilerOptions0 = compiler0.options;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parse();\n    compiler0.check();\n    compiler0.getErrorCount();\n}",
    "testName" : "test4346"
  },
  "test6884" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6884() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"Gqsz@:itDX9]k^Y)AJe\");\n    CompilerOptions compilerOptions0 = compiler0.options;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    compiler0.replaceIncrementalSourceAst(jsAst0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test6884"
  },
  "test011" : {
    "methodSignature" : "public String toSource(final JSModule module)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"9_<\");\n    compiler0.toSource(jSModule0);\n}",
    "testName" : "test011"
  },
  "test1518" : {
    "methodSignature" : "VariableMap getPropertyMap()",
    "methodName" : "getPropertyMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1518() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getPropertyMap();\n}",
    "testName" : "test1518"
  },
  "test3538" : {
    "methodSignature" : "List<CompilerInput> getExternsForTesting()",
    "methodName" : "getExternsForTesting",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3538() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    List<CompilerInput> list0 = compiler0.getExternsForTesting();\n}",
    "testName" : "test3538"
  },
  "test7291" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7291() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"xi|%*USa[\");\n    ArrayList<JSSourceFile> arrayList1 = new ArrayList<JSSourceFile>();\n    arrayList1.add(jSSourceFile0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList1, compilerOptions0);\n    compiler0.parse();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test7291"
  },
  "test7290" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7290() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"xi|%*USa[\");\n    ArrayList<JSSourceFile> arrayList1 = new ArrayList<JSSourceFile>();\n    arrayList1.add(jSSourceFile0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList1, compilerOptions0);\n    compiler0.parse();\n    compiler0.getErrorCount();\n}",
    "testName" : "test7290"
  },
  "test95116" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test95116() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    Node node0 = new Node(2643);\n    compiler0.updateGlobalVarReferences(treeMap0, node0);\n}",
    "testName" : "test95116"
  },
  "test2730" : {
    "methodSignature" : "public SourceMap getSourceMap()",
    "methodName" : "getSourceMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2730() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SourceMap sourceMap0 = compiler0.getSourceMap();\n}",
    "testName" : "test2730"
  },
  "test4754" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4754() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    compilerOptions0.checkSymbols = true;\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n}",
    "testName" : "test4754"
  },
  "test81101" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test81101() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    compilerOptions0.setCodingConvention(closureCodingConvention0);\n    compiler0.disableThreads();\n    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n}",
    "testName" : "test81101"
  },
  "test4753" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4753() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    compilerOptions0.checkSymbols = true;\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test4753"
  },
  "test5564" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5564() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);\n    compiler0.setPassConfig(defaultPassConfig0);\n}",
    "testName" : "test5564"
  },
  "test6378" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6378() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.removeInput((String) null);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test6378"
  },
  "test000" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    File file0 = MockFile.createTempFile(\" in \", (String) null);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);\n    JSModule[] jSModuleArray0 = new JSModule[1];\n    compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test000"
  },
  "test1922" : {
    "methodSignature" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
    "methodName" : "runCallableWithLargeStack",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1922() throws Throwable {\n    Callable<AstValidator> callable0 = (Callable<AstValidator>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(callable0).call();\n    AstValidator astValidator0 = Compiler.runCallableWithLargeStack(callable0);\n}",
    "testName" : "test1922"
  },
  "test079" : {
    "methodSignature" : "CssRenamingMap getCssRenamingMap()",
    "methodName" : "getCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"com.google.javascript.jscomp\");\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    compiler0.getCssRenamingMap();\n}",
    "testName" : "test079"
  },
  "test6377" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6377() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.removeInput((String) null);\n    compiler0.hasErrors();\n}",
    "testName" : "test6377"
  },
  "test7189" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7189() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    Node node0 = compiler0.parseInputs();\n    node0.getType();\n}",
    "testName" : "test7189"
  },
  "test89110" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test89110() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"com.google.javascript.jscomp.Compiler$CodeBuilder\");\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test89110"
  },
  "test92113" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test92113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test92113"
  },
  "test7188" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7188() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    Node node0 = compiler0.parseInputs();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test7188"
  },
  "test5160" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5160() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSModule jSModule0 = new JSModule((String) null);\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    Vector<JSModule> vector0 = new Vector<JSModule>();\n    vector0.add(jSModule0);\n    compiler0.compileModules(stack0, vector0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test5160"
  },
  "test2225" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2225() throws Throwable {\n    Logger logger0 = Logger.getLogger(\"w\");\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    int int0 = compiler0.getWarningCount();\n}",
    "testName" : "test2225"
  },
  "test86106" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test86106() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\".U<pVfLGD|nroI/\", \".U<pVfLGD|nroI/\");\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    arrayList0.add(jSSourceFile0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);\n}",
    "testName" : "test86106"
  },
  "test3437" : {
    "methodSignature" : "public JSError[] getMessages()",
    "methodName" : "getMessages",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3437() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getMessages();\n}",
    "testName" : "test3437"
  },
  "test7998" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7998() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"com.google.javascript.jscomp.Compiler$8\", \"com.google.javascript.jscomp.Compiler$8\");\n    CompilerOptions compilerOptions0 = compiler0.options;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parse();\n    compiler0.optimize();\n    compiler0.getErrorCount();\n}",
    "testName" : "test7998"
  },
  "test5058" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5058() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n}",
    "testName" : "test5058"
  },
  "test5971" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5971() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.reportCodeChange();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test5971"
  },
  "test1013" : {
    "methodSignature" : "public void setState(IntermediateState state)",
    "methodName" : "setState",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1013() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    compiler0.setState(compiler_IntermediateState0);\n}",
    "testName" : "test1013"
  },
  "test033" : {
    "methodSignature" : "public String toSource()",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.disableThreads();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    String string0 = compiler0.toSource();\n}",
    "testName" : "test033"
  },
  "test2629" : {
    "methodSignature" : "void recordFunctionInformation()",
    "methodName" : "recordFunctionInformation",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2629() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.recordFunctionInformation();\n}",
    "testName" : "test2629"
  },
  "test034" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.disableThreads();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    String string0 = compiler0.toSource();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test034"
  },
  "test1417" : {
    "methodSignature" : "ControlFlowGraph<Node> computeCFG()",
    "methodName" : "computeCFG",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1417() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.computeCFG();\n}",
    "testName" : "test1417"
  },
  "test5970" : {
    "methodSignature" : "public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5970() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.reportCodeChange();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n}",
    "testName" : "test5970"
  },
  "test6783" : {
    "methodSignature" : "boolean replaceIncrementalSourceAst(JsAst ast)",
    "methodName" : "replaceIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6783() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    char[] charArray0 = new char[7];\n    CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);\n    SourceFile sourceFile0 = SourceFile.fromReader(\"[[singleton]]\", charArrayReader0);\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test6783"
  },
  "test3033" : {
    "methodSignature" : "List<CompilerInput> getInputsForTesting()",
    "methodName" : "getInputsForTesting",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    List<CompilerInput> list0 = compiler0.getInputsForTesting();\n}",
    "testName" : "test3033"
  },
  "test6782" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6782() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test6782"
  },
  "test3841" : {
    "methodSignature" : "ReferenceMap getGlobalVarReferences()",
    "methodName" : "getGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3841() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();\n}",
    "testName" : "test3841"
  },
  "test83103" : {
    "methodSignature" : "public void report(JSError error)",
    "methodName" : "report",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test83103() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSError jSError0 = JSError.make(\"com.google.common.collect.Synchronized$SynchronizedSetMultimap\", (-984), (-1394), compilerOptions0.checkGlobalNamesLevel, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);\n    compiler0.report(jSError0);\n}",
    "testName" : "test83103"
  },
  "test4652" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4652() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"~?50iH,fu9(IIR\", \"~?50iH,fu9(IIR\");\n    CompilerOptions compilerOptions0 = compiler0.options;\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    compilerOptions0.checkGlobalThisLevel = checkLevel0;\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test4652"
  },
  "test022" : {
    "methodSignature" : "public String[] toSourceArray()",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray();\n}",
    "testName" : "test022"
  },
  "test1821" : {
    "methodSignature" : "public void processDefines()",
    "methodName" : "processDefines",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.processDefines();\n}",
    "testName" : "test1821"
  },
  "test5869" : {
    "methodSignature" : "void endPass()",
    "methodName" : "endPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5869() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.endPass();\n}",
    "testName" : "test5869"
  },
  "test5463" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5463() throws Throwable {\n    Compiler.runCallable((Callable<NameAnalyzer>) null, false, true);\n}",
    "testName" : "test5463"
  },
  "test6276" : {
    "methodSignature" : "public boolean acceptConstKeyword()",
    "methodName" : "acceptConstKeyword",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6276() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.newExternInput((String) null);\n    compiler0.removeInput((String) null);\n    compiler0.acceptConstKeyword();\n}",
    "testName" : "test6276"
  },
  "test94115" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test94115() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    Node node0 = compiler0.parseSyntheticCode(\"// Input %num%\");\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test94115"
  },
  "test7087" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7087() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);\n    defaultPassConfig0.makeTypeCheck(compiler0);\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test7087"
  },
  "test3336" : {
    "methodSignature" : "void setHasRegExpGlobalReferences(boolean references)",
    "methodName" : "setHasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3336() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setHasRegExpGlobalReferences(true);\n}",
    "testName" : "test3336"
  },
  "test80100" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test80100() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    boolean boolean0 = compiler0.isInliningForbidden();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test80100"
  },
  "test2124" : {
    "methodSignature" : "void setCssRenamingMap(CssRenamingMap map)",
    "methodName" : "setCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2124() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setCssRenamingMap((CssRenamingMap) null);\n}",
    "testName" : "test2124"
  },
  "test1316" : {
    "methodSignature" : "public void rebuildInputsFromModules()",
    "methodName" : "rebuildInputsFromModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1316() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.rebuildInputsFromModules();\n}",
    "testName" : "test1316"
  },
  "test2528" : {
    "methodSignature" : "Supplier<String> getUniqueNameIdSupplier()",
    "methodName" : "getUniqueNameIdSupplier",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2528() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n}",
    "testName" : "test2528"
  },
  "test4549" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4549() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(\"Root module has no inputs\", diagnosticGroupArray0);\n    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test4549"
  },
  "test88109" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88109() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.getSourceRegion(\"// Input %num%\", 65263);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test88109"
  },
  "test046" : {
    "methodSignature" : "public String[] toSourceArray(final JSModule module)",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule((String) null);\n    compiler0.toSourceArray(jSModule0);\n}",
    "testName" : "test046"
  },
  "test91112" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test91112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test91112"
  },
  "test6681" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6681() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"TYobZX?\");\n    MockFile mockFile0 = new MockFile(\"TYobZX?\");\n    SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test6681"
  },
  "test7493" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7493() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.disableThreads();\n    compiler0.toSource();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test7493"
  },
  "test5768" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5768() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);\n    compiler0.stripCode(compilerOptions0.stripNameSuffixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test5768"
  },
  "test1720" : {
    "methodSignature" : "Node parseSyntheticCode(String fileName, String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1720() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode((String) null, (String) null);\n}",
    "testName" : "test1720"
  },
  "test5766" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5766() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test5766"
  },
  "test85105" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test85105() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.parseTestCode(\"/&c@q0zh\");\n    Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n}",
    "testName" : "test85105"
  },
  "test5767" : {
    "methodSignature" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
    "methodName" : "stripCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5767() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) stack0, compilerOptions0);\n    compiler0.stripCode(compilerOptions0.stripNameSuffixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);\n}",
    "testName" : "test5767"
  },
  "test3740" : {
    "methodSignature" : "public Scope getTopScope()",
    "methodName" : "getTopScope",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3740() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Scope scope0 = compiler0.getTopScope();\n}",
    "testName" : "test3740"
  },
  "test0912" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0912() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"com.google.javascript.jscomp.ControlFlowGraph$Branch\");\n    compiler0.parse(jSSourceFile0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test0912"
  },
  "test2932" : {
    "methodSignature" : "public Node getRoot()",
    "methodName" : "getRoot",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.getRoot();\n}",
    "testName" : "test2932"
  },
  "test4956" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4956() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"{0} expressions are not callable\");\n    arrayList0.add(jSSourceFile0);\n    arrayList0.add(jSSourceFile0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test4956"
  },
  "test0911" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"com.google.javascript.jscomp.ControlFlowGraph$Branch\");\n    compiler0.parse(jSSourceFile0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test0911"
  },
  "test4957" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4957() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"{0} expressions are not callable\");\n    arrayList0.add(jSSourceFile0);\n    arrayList0.add(jSSourceFile0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n}",
    "testName" : "test4957"
  },
  "test035" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.disableThreads();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    String string0 = compiler0.toSource();\n    compiler0.hasErrors();\n}",
    "testName" : "test035"
  },
  "test4550" : {
    "methodSignature" : "public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4550() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(\"Root module has no inputs\", diagnosticGroupArray0);\n    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n}",
    "testName" : "test4550"
  },
  "test5362" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5362() throws Throwable {\n    Compiler.runCallable((Callable<NameAnalyzer>) null, false, false);\n}",
    "testName" : "test5362"
  },
  "test96117" : {
    "methodSignature" : "public boolean hasChildren()",
    "methodName" : "hasChildren",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test96117() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    Node node0 = compiler_IntermediateState0.externsRoot;\n    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n    node0.hasChildren();\n}",
    "testName" : "test96117"
  },
  "test6175" : {
    "methodSignature" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
    "methodName" : "areNodesEqualForInlining",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6175() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.areNodesEqualForInlining((Node) null, (Node) null);\n}",
    "testName" : "test6175"
  },
  "test96118" : {
    "methodSignature" : "public int getChildCount()",
    "methodName" : "getChildCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test96118() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    Node node0 = compiler_IntermediateState0.externsRoot;\n    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n    node0.getChildCount();\n}",
    "testName" : "test96118"
  }
}