project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""...["", (Node) null);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a type name"", functionType0);
    functionType0.getLeastSupertype(enumType0);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test011,"public void test011() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newNumber((double) 105);
    HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ObjectType objectType0 = recordType0.getImplicitPrototype();
    FunctionType functionType0 = null;
    try {
        functionType0 = new FunctionType(jSTypeRegistry0, ""kh"", node0, node0, objectType0, recordType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
    noObjectType0.getGreatestSubtype(functionType0);
    assertFalse(functionType0.hasInstanceType());
}",0,assertFalse(functionType0.hasInstanceType())
project,0,test023,"public void test023() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
    noObjectType0.getGreatestSubtype(functionType0);
    assertFalse(noObjectType0.isInterface());
}",0,assertTrue(noObjectType0.isInterface())
project,0,test034,"public void test034() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.hasEqualCallType(noType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test035,"public void test035() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.hasEqualCallType(noType0);
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test036,"public void test036() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.hasEqualCallType(noType0);
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test047,"public void test047() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.isInstanceType();
    assertFalse(noObjectType0.isInterface());
}",0,
project,0,test058,"public void test058() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
    boolean boolean0 = indexedType0.canBeCalled();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test059,"public void test059() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
    boolean boolean0 = indexedType0.canBeCalled();
    assertFalse(indexedType0.isInterface());
}",0,assertFalse(indexedType0.isInterface())
project,0,test0610,"public void test0610() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""kD\""{IAk[z3~.y6V@A"");
    Node node0 = errorFunctionType0.getSource();
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test0611,"public void test0611() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""kD\""{IAk[z3~.y6V@A"");
    Node node0 = errorFunctionType0.getSource();
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test0612,"public void test0612() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""kD\""{IAk[z3~.y6V@A"");
    Node node0 = errorFunctionType0.getSource();
    assertNull(node0);
}",0,
project,0,test0713,"public void test0713() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setSource((Node) null);
    assertFalse(noType0.isInterface());
}",0,
project,0,test0814,"public void test0814() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.getSubTypes();
    assertFalse(noObjectType0.isInterface());
}",0,assertFalse(noObjectType0.isInterface())
project,0,test0915,"public void test0915() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newNumber((double) 105);
    Node node1 = new Node(105, node0, node0, node0);
    HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ObjectType objectType0 = recordType0.getImplicitPrototype();
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""kh"", node1, node0, objectType0, recordType0);
    assertFalse(functionType0.hasInstanceType());
}",0,assertTrue(functionType0.hasInstanceType())
project,0,test0916,"public void test0916() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newNumber((double) 105);
    Node node1 = new Node(105, node0, node0, node0);
    HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ObjectType objectType0 = recordType0.getImplicitPrototype();
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""kh"", node1, node0, objectType0, recordType0);
    assertEquals(0, functionType0.getMaxArguments());
}",0,"assertEquals(0, functionType0.getMaxArguments())"
project,0,test1017,"public void test1017() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Rm(9:|z(q-Kyz1~J"", (Node) null);
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ""Rm(9:|z(q-Kyz1~J"", (Node) null, (Node) null, functionType0, functionType0, ""RANGE_ERROR_FUNCTION_TYPE"", true, true);
    assertEquals(""RANGE_ERROR_FUNCTION_TYPE"", functionType1.getTemplateTypeName());
}",0,assertNotNull(functionType1.getTemplateTypeName())
project,0,test1018,"public void test1018() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Rm(9:|z(q-Kyz1~J"", (Node) null);
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ""Rm(9:|z(q-Kyz1~J"", (Node) null, (Node) null, functionType0, functionType0, ""RANGE_ERROR_FUNCTION_TYPE"", true, true);
    assertFalse(functionType1.isInterface());
}",0,assertFalse(functionType1.isInterface())
project,0,test1119,"public void test1119() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = new Node(105);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""Not declared as a constructor"", node0);
    assertFalse(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test1220,"public void test1220() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = new Node(0);
    FunctionType functionType0 = null;
    try {
        functionType0 = new FunctionType(jSTypeRegistry0, ""Unknown class name"", node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1321,"public void test1321() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    // Undeclared exception!
    try {
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test1422,"public void test1422() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Z)=s,\""ts=aRi"", (Node) null);
    boolean boolean0 = functionType0.hasUnknownSupertype();
    assertFalse(boolean0);
}",1,
project,0,test1423,"public void test1423() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Z)=s,\""ts=aRi"", (Node) null);
    boolean boolean0 = functionType0.hasUnknownSupertype();
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test1524,"public void test1524() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isOrdinaryFunction();
    assertFalse(boolean0);
}",0,
project,0,test1525,"public void test1525() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isOrdinaryFunction();
    assertFalse(noType0.isInterface());
}",0,
project,0,test1626,"public void test1626() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[6];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
    FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "";$}Pr6#< H)~`3"", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, ""Not declared as a type name"", false, false);
    boolean boolean0 = functionType1.isOrdinaryFunction();
    assertEquals(6, functionType0.getMaxArguments());
}",0,"assertEquals(1, functionType0.getMaxArguments())"
project,0,test1627,"public void test1627() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[6];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
    FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "";$}Pr6#< H)~`3"", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, ""Not declared as a type name"", false, false);
    boolean boolean0 = functionType1.isOrdinaryFunction();
    assertFalse(functionType1.isInterface());
}",0,assertFalse(functionType1.isInterface())
project,0,test1628,"public void test1628() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[6];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
    FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "";$}Pr6#< H)~`3"", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, ""Not declared as a type name"", false, false);
    boolean boolean0 = functionType1.isOrdinaryFunction();
    assertEquals(""Not declared as a type name"", functionType1.getTemplateTypeName());
}",0,assertNotNull(functionType1.getTemplateTypeName())
project,0,test1629,"public void test1629() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[6];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
    FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "";$}Pr6#< H)~`3"", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, ""Not declared as a type name"", false, false);
    boolean boolean0 = functionType1.isOrdinaryFunction();
    assertTrue(boolean0);
}",0,
project,0,test1630,"public void test1630() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[6];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
    FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, "";$}Pr6#< H)~`3"", (Node) null, (Node) null, functionPrototypeType0, functionPrototypeType0, ""Not declared as a type name"", false, false);
    boolean boolean0 = functionType1.isOrdinaryFunction();
    assertTrue(functionType0.hasInstanceType());
}",0,
project,0,test1731,"public void test1731() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    int int0 = noType0.getMinArguments();
    assertFalse(noType0.isInterface());
}",0,
project,0,test1732,"public void test1732() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    int int0 = noType0.getMinArguments();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1833,"public void test1833() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    int int0 = errorFunctionType0.getMinArguments();
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test1834,"public void test1834() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    int int0 = errorFunctionType0.getMinArguments();
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test1835,"public void test1835() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    int int0 = errorFunctionType0.getMinArguments();
    assertEquals(0, int0);
}",0,
project,0,test1936,"public void test1936() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "")"", (Node) null);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
    assertFalse(functionType1.hasInstanceType());
}",0,assertFalse(functionType1.hasInstanceType())
project,0,test2037,"public void test2037() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    int int0 = functionType0.getMinArguments();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2038,"public void test2038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    int int0 = functionType0.getMinArguments();
    assertFalse(functionType0.hasInstanceType());
}",0,assertTrue(functionType0.hasInstanceType())
project,0,test2139,"public void test2139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
    JSType[] jSTypeArray0 = new JSType[4];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
    int int0 = functionType0.getMinArguments();
    assertEquals(4, int0);
}",0,"assertEquals(1, int0)"
project,0,test2140,"public void test2140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
    JSType[] jSTypeArray0 = new JSType[4];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
    int int0 = functionType0.getMinArguments();
    assertFalse(functionType0.hasInstanceType());
}",0,assertFalse(functionType0.hasInstanceType())
project,0,test2241,"public void test2241() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    int int0 = noType0.getMaxArguments();
    assertFalse(noType0.isInterface());
}",0,
project,0,test2242,"public void test2242() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    int int0 = noType0.getMaxArguments();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,"assertEquals(0, int0)"
project,0,test2343,"public void test2343() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    int int0 = functionType0.getMaxArguments();
    assertFalse(functionType0.hasInstanceType());
}",0,
project,0,test2344,"public void test2344() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    int int0 = functionType0.getMaxArguments();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,"assertEquals(0, int0)"
project,0,test2445,"public void test2445() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
    int int0 = functionType0.getMaxArguments();
    assertFalse(functionType0.hasInstanceType());
}",0,assertTrue(functionType0.hasInstanceType())
project,0,test2446,"public void test2446() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
    int int0 = functionType0.getMaxArguments();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test2547,"public void test2547() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""apply"");
    int int0 = errorFunctionType0.getMaxArguments();
    assertEquals(3, int0);
}",0,"assertEquals(0, int0)"
project,0,test2548,"public void test2548() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""apply"");
    int int0 = errorFunctionType0.getMaxArguments();
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test2649,"public void test2649() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
    // Undeclared exception!
    try {
        functionType0.hasUnknownSupertype();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test2750,"public void test2750() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.hasUnknownSupertype();
    assertFalse(boolean0);
}",1,
project,0,test2751,"public void test2751() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.hasUnknownSupertype();
    noType0.setPrototypeBasedOn(noType0);
    assertFalse(noType0.isInterface());
}",0,assertTrue(noType0.isInterface())
project,0,test2852,"public void test2852() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2853,"public void test2853() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
    assertFalse(noType0.isInterface());
}",0,assertTrue(noType0.isInterface())
project,0,test2954,"public void test2954() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionType0.getPrototype();
    assertFalse(functionType0.hasInstanceType());
}",0,
project,0,test3055,"public void test3055() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
    linkedList0.add((ObjectType) functionType0);
    functionType0.setImplementedInterfaces(linkedList0);
    Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
    assertNotNull(iterable0);
}",0,assertNotNull(iterable0)
project,0,test3156,"public void test3156() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
    linkedList0.add((ObjectType) functionType0);
    functionType0.setImplementedInterfaces(linkedList0);
    functionType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
    assertNotNull(iterable0);
}",0,assertNotNull(iterable0)
project,0,test3257,"public void test3257() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "")"", (Node) null);
    functionType0.getAllImplementedInterfaces();
    assertFalse(functionType0.hasCachedValues());
}",0,assertFalse(functionType0.hasCachedValues())
project,0,test3358,"public void test3358() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""J,1RStX!tR*&=H"");
    boolean boolean0 = errorFunctionType0.hasProperty(""prototype"");
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test3359,"public void test3359() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""J,1RStX!tR*&=H"");
    boolean boolean0 = errorFunctionType0.hasProperty(""prototype"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3360,"public void test3360() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""J,1RStX!tR*&=H"");
    boolean boolean0 = errorFunctionType0.hasProperty(""prototype"");
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test3461,"public void test3461() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    errorFunctionType0.defineInferredProperty(""valueOf"", noType0, true);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""valueOf"");
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test3462,"public void test3462() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    errorFunctionType0.defineInferredProperty(""valueOf"", noType0, true);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""valueOf"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3463,"public void test3463() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    errorFunctionType0.defineInferredProperty(""valueOf"", noType0, true);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""valueOf"");
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test3564,"public void test3564() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""apply"");
    errorFunctionType0.getPropertyType(""apply"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test3665,"public void test3665() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""prototype"");
    errorFunctionType0.getPropertyType(""prototype"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test3766,"public void test3766() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    errorFunctionType0.getPropertyType(""call"");
    errorFunctionType0.getPropertyType(""call"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test3867,"public void test3867() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
    FunctionType functionType1 = (FunctionType) functionType0.getPropertyType(""call"");
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test3868,"public void test3868() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
    FunctionType functionType1 = (FunctionType) functionType0.getPropertyType(""call"");
    assertFalse(functionType1.hasCachedValues());
}",0,assertFalse(functionType1.hasCachedValues())
project,0,test3869,"public void test3869() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
    FunctionType functionType1 = (FunctionType) functionType0.getPropertyType(""call"");
    assertFalse(functionType1.equals((Object) functionType0));
}",0,
project,0,test3870,"public void test3870() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
    FunctionType functionType1 = (FunctionType) functionType0.getPropertyType(""call"");
    assertFalse(functionType0.isOrdinaryFunction());
}",0,assertTrue(functionType0.isOrdinaryFunction())
project,0,test3971,"public void test3971() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType"");
    errorFunctionType0.getPropertyType(""eR&oR"");
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test3972,"public void test3972() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType"");
    errorFunctionType0.getPropertyType(""eR&oR"");
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test3973,"public void test3973() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType"");
    errorFunctionType0.getPropertyType(""eR&oR"");
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test4074,"public void test4074() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType"");
    boolean boolean0 = errorFunctionType0.defineProperty(""prototype"", numberType0, false, false);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4075,"public void test4075() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType"");
    boolean boolean0 = errorFunctionType0.defineProperty(""prototype"", numberType0, false, false);
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test4076,"public void test4076() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType"");
    boolean boolean0 = errorFunctionType0.defineProperty(""prototype"", numberType0, false, false);
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test4177,"public void test4177() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""prototype"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""prototype"");
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test4178,"public void test4178() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""prototype"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""prototype"");
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test4179,"public void test4179() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""prototype"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""prototype"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4280,"public void test4280() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""valueOf"");
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test4281,"public void test4281() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""valueOf"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4282,"public void test4282() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""valueOf"");
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test4383,"public void test4383() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""akG9UF"", (Node) null);
    functionType0.getLeastSupertype(functionType0);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test4484,"public void test4484() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""tGx/("", (Node) null);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getLeastSupertype(functionType0);
    assertEquals(0, functionType1.getMaxArguments());
}",0,"assertEquals(0, functionType1.getMaxArguments())"
project,0,test4485,"public void test4485() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""tGx/("", (Node) null);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getLeastSupertype(functionType0);
    assertFalse(functionType1.hasInstanceType());
}",0,
project,0,test4486,"public void test4486() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""tGx/("", (Node) null);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
    functionType1.getLeastSupertype(functionType0);
    assertFalse(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test4587,"public void test4587() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.getLeastSupertype(functionType0);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test4588,"public void test4588() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.getLeastSupertype(functionType0);
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test4589,"public void test4589() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.getLeastSupertype(functionType0);
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test4690,"public void test4690() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType0.getLeastSupertype(functionType1);
    assertEquals(0, functionType1.getMaxArguments());
}",0,"assertEquals(0, functionType1.getMaxArguments())"
project,0,test4691,"public void test4691() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType0.getLeastSupertype(functionType1);
    assertFalse(functionType1.hasInstanceType());
}",0,assertFalse(functionType1.hasInstanceType())
project,0,test4692,"public void test4692() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType0.getLeastSupertype(functionType1);
    assertFalse(functionType1.hasCachedValues());
}",0,assertFalse(functionType1.hasCachedValues())
project,0,test4693,"public void test4693() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    functionType0.getLeastSupertype(functionType1);
    assertFalse(functionType0.equals((Object) functionType1));
}",0,
project,0,test4794,"public void test4794() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType$Kind"", (Node) null);
    functionType0.getGreatestSubtype(functionType0);
    assertTrue(functionType0.hasCachedValues());
}",0,
project,0,test4895,"public void test4895() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
    assertFalse(functionType1.hasCachedValues());
}",0,
project,0,test4896,"public void test4896() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
    assertFalse(functionType1.hasInstanceType());
}",0,
project,0,test4897,"public void test4897() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test4898,"public void test4898() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test4999,"public void test4999() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    functionType0.getGreatestSubtype(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test49100,"public void test49100() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    functionType0.getGreatestSubtype(errorFunctionType0);
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test50101,"public void test50101() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    // Undeclared exception!
    try {
        functionType0.getSuperClassConstructor();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test51102,"public void test51102() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setPrototypeBasedOn((ObjectType) null);
    boolean boolean0 = noType0.hasUnknownSupertype();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test51103,"public void test51103() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setPrototypeBasedOn((ObjectType) null);
    boolean boolean0 = noType0.hasUnknownSupertype();
    assertFalse(noType0.isInterface());
}",0,
project,0,test52104,"public void test52104() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Unknown class name"", 0, 1);
    noType0.setPrototypeBasedOn(namedType0);
    boolean boolean0 = noType0.hasUnknownSupertype();
    assertFalse(noType0.isInterface());
}",0,assertTrue(noType0.isInterface())
project,0,test52105,"public void test52105() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Unknown class name"", 0, 1);
    noType0.setPrototypeBasedOn(namedType0);
    boolean boolean0 = noType0.hasUnknownSupertype();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test53106,"public void test53106() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""INTERFACE"", (Node) null);
    // Undeclared exception!
    try {
        functionType0.getTopMostDefiningType(""INTERFACE"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test54107,"public void test54107() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    // Undeclared exception!
    try {
        functionType0.getTopMostDefiningType(""Unknown class name"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test55108,"public void test55108() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setPrototypeBasedOn(noType0);
    JSType jSType0 = noType0.getTopMostDefiningType(""Unknown class name"");
    assertFalse(jSType0.isInterface());
}",0,assertFalse(jSType0.isInterface())
project,0,test56109,"public void test56109() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.isSubtype(noType0);
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test56110,"public void test56110() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.isSubtype(noType0);
    assertFalse(boolean0);
}",0,
project,0,test57111,"public void test57111() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""1|.Ip_5[-thB"", (Node) null);
    JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test57112,"public void test57112() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""1|.Ip_5[-thB"", (Node) null);
    JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test57113,"public void test57113() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""1|.Ip_5[-thB"", (Node) null);
    JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
    assertFalse(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test57114,"public void test57114() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""1|.Ip_5[-thB"", (Node) null);
    JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
    assertFalse(jSType0.isInterface());
}",0,assertFalse(jSType0.isInterface())
project,0,test57115,"public void test57115() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""1|.Ip_5[-thB"", (Node) null);
    JSType jSType0 = functionType0.getGreatestSubtype(errorFunctionType0);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test58116,"public void test58116() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(functionType0);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
    assertFalse(functionType1.hasInstanceType());
}",0,
project,0,test58117,"public void test58117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(functionType0);
    FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(jSType0);
    assertTrue(functionType0.isFunctionType());
}",0,assertTrue(functionType0.isFunctionType())
project,0,test59118,"public void test59118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""7k"");
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
    boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test59119,"public void test59119() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""7k"");
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
    boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    assertFalse(boolean0);
}",0,
project,0,test60120,"public void test60120() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    String string0 = functionType0.toString();
    assertEquals(""Function"", string0);
}",0,
project,0,test61121,"public void test61121() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""Not declared as a constructor"", (Node) null);
    functionType0.toString();
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test62122,"public void test62122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((String) null, (Node) null, (Node) null, (JSType) objectType0);
    functionType0.toString();
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test63123,"public void test63123() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionType0.toString();
    assertFalse(functionType0.hasInstanceType());
}",0,
project,0,test63124,"public void test63124() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionType0.toString();
    assertFalse(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test64125,"public void test64125() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    JSType[] jSTypeArray0 = new JSType[3];
    jSTypeArray0[0] = (JSType) errorFunctionType0;
    jSTypeArray0[1] = (JSType) errorFunctionType0;
    jSTypeArray0[2] = (JSType) errorFunctionType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
    functionType0.toString();
    assertFalse(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test64126,"public void test64126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    JSType[] jSTypeArray0 = new JSType[3];
    jSTypeArray0[0] = (JSType) errorFunctionType0;
    jSTypeArray0[1] = (JSType) errorFunctionType0;
    jSTypeArray0[2] = (JSType) errorFunctionType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
    functionType0.toString();
    assertFalse(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test64127,"public void test64127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    JSType[] jSTypeArray0 = new JSType[3];
    jSTypeArray0[0] = (JSType) errorFunctionType0;
    jSTypeArray0[1] = (JSType) errorFunctionType0;
    jSTypeArray0[2] = (JSType) errorFunctionType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
    functionType0.toString();
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test65128,"public void test65128() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[2];
    jSTypeArray0[0] = (JSType) unionType0;
    jSTypeArray0[1] = (JSType) noType0;
    FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs((JSType) null, jSTypeArray0);
    functionType0.toString();
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test66129,"public void test66129() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType$Kind"", (Node) null);
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ""-9kF"", (Node) null);
    boolean boolean0 = functionType1.canAssignTo(functionType0);
    assertFalse(functionType1.isConstructor());
}",0,assertTrue(functionType1.isConstructor())
project,0,test66130,"public void test66130() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType$Kind"", (Node) null);
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ""-9kF"", (Node) null);
    boolean boolean0 = functionType1.canAssignTo(functionType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test66131,"public void test66131() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.FunctionType$Kind"", (Node) null);
    FunctionType functionType1 = new FunctionType(jSTypeRegistry0, ""-9kF"", (Node) null);
    boolean boolean0 = functionType1.canAssignTo(functionType0);
    assertFalse(functionType1.equals((Object) functionType0));
}",0,
project,0,test67132,"public void test67132() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""tGx/("", (Node) null);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertEquals(0, functionType1.getMaxArguments());
}",0,"assertEquals(0, functionType1.getMaxArguments())"
project,0,test67133,"public void test67133() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""tGx/("", (Node) null);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertFalse(functionType1.hasInstanceType());
}",0,
project,0,test67134,"public void test67134() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""tGx/("", (Node) null);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertFalse(boolean0);
}",0,
project,0,test67135,"public void test67135() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""tGx/("", (Node) null);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertTrue(functionType1.isFunctionType());
}",0,assertTrue(functionType1.isFunctionType())
project,0,test68136,"public void test68136() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    JSType jSType0 = errorFunctionType0.getPropertyType(""call"");
    boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test68137,"public void test68137() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    JSType jSType0 = errorFunctionType0.getPropertyType(""call"");
    boolean boolean0 = errorFunctionType0.isSubtype(jSType0);
    assertTrue(boolean0);
}",0,
project,0,test69138,"public void test69138() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
    functionType1.setInstanceType(noType0);
    boolean boolean0 = functionType1.isSubtype(functionType0);
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test69139,"public void test69139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
    functionType1.setInstanceType(noType0);
    boolean boolean0 = functionType1.isSubtype(functionType0);
    assertTrue(boolean0);
}",0,
project,0,test70140,"public void test70140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertFalse(functionType1.hasInstanceType());
}",0,assertTrue(functionType1.hasInstanceType())
project,0,test70141,"public void test70141() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertTrue(boolean0);
}",0,
project,0,test70142,"public void test70142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertFalse(functionType1.equals((Object) functionType0));
}",0,
project,0,test70143,"public void test70143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test70144,"public void test70144() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
    boolean boolean0 = functionType0.isSubtype(functionType1);
    assertEquals(0, functionType1.getMaxArguments());
}",0,"assertEquals(0, functionType1.getMaxArguments())"
project,0,test71145,"public void test71145() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noType0);
    boolean boolean0 = functionType1.isSubtype(functionType0);
    assertTrue(noObjectType0.hasCachedValues());
}",0,assertTrue(noObjectType0.hasCachedValues())
project,0,test71146,"public void test71146() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noType0);
    boolean boolean0 = functionType1.isSubtype(functionType0);
    assertFalse(boolean0);
}",0,
project,0,test72147,"public void test72147() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    boolean boolean0 = errorFunctionType0.isNumber();
    assertEquals(3, errorFunctionType0.getMaxArguments());
}",0,"assertEquals(0, errorFunctionType0.getMaxArguments())"
project,0,test72148,"public void test72148() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    boolean boolean0 = errorFunctionType0.isNumber();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test72149,"public void test72149() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    boolean boolean0 = errorFunctionType0.isNumber();
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test73150,"public void test73150() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("""", (Node) null);
    boolean boolean0 = functionType0.hasInstanceType();
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test73151,"public void test73151() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("""", (Node) null);
    boolean boolean0 = functionType0.hasInstanceType();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test74152,"public void test74152() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    boolean boolean0 = functionType0.hasInstanceType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test75153,"public void test75153() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
    assertFalse(functionType1.hasInstanceType());
}",0,assertTrue(functionType1.hasInstanceType())
project,0,test76154,"public void test76154() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""rSU~(i;_P"");
    errorFunctionType0.getImplementedInterfaces();
    boolean boolean0 = errorFunctionType0.hasCachedValues();
    assertTrue(boolean0);
}",0,
project,0,test77155,"public void test77155() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
    functionPrototypeType0.differsFrom(noType0);
    // Undeclared exception!
    try {
        noType0.setImplicitPrototype(functionPrototypeType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test78156,"public void test78156() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
    linkedList0.add((ObjectType) errorFunctionType0);
    errorFunctionType0.setImplementedInterfaces(linkedList0);
    EmptyScope emptyScope0 = new EmptyScope();
    errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
    assertTrue(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test79157,"public void test79157() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ObjectType objectType0 = recordType0.getImplicitPrototype();
    EnumType enumType0 = new EnumType(jSTypeRegistry0, "")"", objectType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    FunctionType functionType0 = enumElementType0.getConstructor();
    assertNotNull(functionType0);
}",0,assertNotNull(functionType0)
project,0,test79158,"public void test79158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ObjectType objectType0 = recordType0.getImplicitPrototype();
    EnumType enumType0 = new EnumType(jSTypeRegistry0, "")"", objectType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    FunctionType functionType0 = enumElementType0.getConstructor();
    EmptyScope emptyScope0 = new EmptyScope();
    FunctionType functionType1 = (FunctionType) functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
    assertFalse(functionType1.isInterface());
}",0,
project,0,test79159,"public void test79159() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ObjectType objectType0 = recordType0.getImplicitPrototype();
    EnumType enumType0 = new EnumType(jSTypeRegistry0, "")"", objectType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    FunctionType functionType0 = enumElementType0.getConstructor();
    EmptyScope emptyScope0 = new EmptyScope();
    FunctionType functionType1 = (FunctionType) functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
    assertEquals(1, functionType1.getMaxArguments());
}",0,"assertEquals(0, functionType1.getMaxArguments())"
