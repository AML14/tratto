focal_method,test_prefix,docstring
"void addList(Node firstInList) {
    addList(firstInList, true, Context.OTHER);
}","public void test000() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, int[] skipIndexes) {
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = firstInList; n != null; n = n.getNext()) {
        while (skipIndexes != null && nextSkipSlot < skipIndexes.length) {
            if (nextSlot == skipIndexes[nextSkipSlot]) {
                cc.listSeparator();
                nextSlot++;
                nextSkipSlot++;
            } else {
                break;
            }
        }
        if (n != firstInList) {
            cc.listSeparator();
        }
        addExpr(n, 1);
        nextSlot++;
    }
}","public void test011() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    Node node0 = new Node((-1709), (-1709), (-1709));
    int[] intArray0 = new int[1];
    intArray0[0] = 13;
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, intArray0);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=-1709> (type -1709)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * This function adds a comma-separated list as is specified by an ARRAYLIT
 * node with the associated skipIndexes array.  This is a space optimization
 * since we avoid creating a whole Node object for each empty array literal
 * slot.
 * @param firstInList The first in the node list (chained through the next
 * property).
 * @param skipIndexes If not null, then the array of skipped entries in the
 * array.
 */"
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test022() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""W-^->7z^-"");
    assertEquals(""/W-^->7z^-/"", string0);
}",""
"static String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null);
}","public void test033() throws Throwable {
    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(""WrP]]>o,o"");
    assertEquals(""\""WrP]]\\>o,o\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"void addCaseBody(Node caseBody) {
    cc.beginCaseBody();
    add(caseBody);
    cc.endCaseBody();
}","public void test044() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addCaseBody((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addAllSiblings(Node n) {
    for (Node c = n; c != null; c = c.getNext()) {
        add(c);
    }
}","public void test055() throws Throwable {
    Node node0 = new Node(36);
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addAllSiblings(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, boolean isArrayOrFunctionArgument) {
    addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);
}","public void test066() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    codeGenerator0.addList((Node) null, false);
}",""
"CodeGenerator(CodeConsumer consumer, Charset outputCharset) {
    cc = consumer;
    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {
        // If we want our default (pretending to be UTF-8, but escaping anything
        // outside of straight ASCII), then don't use the encoder, but
        // just special-case the code.  This keeps the normal path through
        // the code identical to how it's been for years.
        this.outputCharsetEncoder = null;
    } else {
        this.outputCharsetEncoder = outputCharset.newEncoder();
    }
}","public void test077() throws Throwable {
    Charset charset0 = Charset.forName(""default"");
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
}",""
"CodeGenerator(CodeConsumer consumer, Charset outputCharset) {
    cc = consumer;
    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {
        // If we want our default (pretending to be UTF-8, but escaping anything
        // outside of straight ASCII), then don't use the encoder, but
        // just special-case the code.  This keeps the normal path through
        // the code identical to how it's been for years.
        this.outputCharsetEncoder = null;
    } else {
        this.outputCharsetEncoder = outputCharset.newEncoder();
    }
}","public void test088() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
}",""
"void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) {
    for (Node n = firstInList; n != null; n = n.getNext()) {
        boolean isFirst = n == firstInList;
        if (isFirst) {
            addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
        } else {
            cc.listSeparator();
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
        }
    }
}","public void test099() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
    Node node0 = Node.newNumber(0.0);
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList) {
    addList(firstInList, true, Context.OTHER);
}","public void test1010() throws Throwable {
    Node node0 = new Node(52, 52, 52);
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) {
    for (Node n = firstInList; n != null; n = n.getNext()) {
        boolean isFirst = n == firstInList;
        if (isFirst) {
            addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
        } else {
            cc.listSeparator();
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
        }
    }
}","public void test1111() throws Throwable {
    Node node0 = new Node(51);
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, int[] skipIndexes) {
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = firstInList; n != null; n = n.getNext()) {
        while (skipIndexes != null && nextSkipSlot < skipIndexes.length) {
            if (nextSlot == skipIndexes[nextSkipSlot]) {
                cc.listSeparator();
                nextSlot++;
                nextSkipSlot++;
            } else {
                break;
            }
        }
        if (n != firstInList) {
            cc.listSeparator();
        }
        addExpr(n, 1);
        nextSlot++;
    }
}","public void test1212() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    codeGenerator0.addList((Node) null, (int[]) null);
}","/**
 * This function adds a comma-separated list as is specified by an ARRAYLIT
 * node with the associated skipIndexes array.  This is a space optimization
 * since we avoid creating a whole Node object for each empty array literal
 * slot.
 * @param firstInList The first in the node list (chained through the next
 * property).
 * @param skipIndexes If not null, then the array of skipped entries in the
 * array.
 */"
"void addList(Node firstInList, int[] skipIndexes) {
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = firstInList; n != null; n = n.getNext()) {
        while (skipIndexes != null && nextSkipSlot < skipIndexes.length) {
            if (nextSlot == skipIndexes[nextSkipSlot]) {
                cc.listSeparator();
                nextSlot++;
                nextSkipSlot++;
            } else {
                break;
            }
        }
        if (n != firstInList) {
            cc.listSeparator();
        }
        addExpr(n, 1);
        nextSlot++;
    }
}","public void test1313() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    Node node0 = new Node((-2923));
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, (int[]) null);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=-2923> (type -2923)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * This function adds a comma-separated list as is specified by an ARRAYLIT
 * node with the associated skipIndexes array.  This is a space optimization
 * since we avoid creating a whole Node object for each empty array literal
 * slot.
 * @param firstInList The first in the node list (chained through the next
 * property).
 * @param skipIndexes If not null, then the array of skipped entries in the
 * array.
 */"
"void addList(Node firstInList, int[] skipIndexes) {
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = firstInList; n != null; n = n.getNext()) {
        while (skipIndexes != null && nextSkipSlot < skipIndexes.length) {
            if (nextSlot == skipIndexes[nextSkipSlot]) {
                cc.listSeparator();
                nextSlot++;
                nextSkipSlot++;
            } else {
                break;
            }
        }
        if (n != firstInList) {
            cc.listSeparator();
        }
        addExpr(n, 1);
        nextSlot++;
    }
}","public void test1414() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    Node node0 = new Node((-1709), (-1709), (-1709));
    int[] intArray0 = new int[0];
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, intArray0);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=-1709> (type -1709)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * This function adds a comma-separated list as is specified by an ARRAYLIT
 * node with the associated skipIndexes array.  This is a space optimization
 * since we avoid creating a whole Node object for each empty array literal
 * slot.
 * @param firstInList The first in the node list (chained through the next
 * property).
 * @param skipIndexes If not null, then the array of skipped entries in the
 * array.
 */"
"void addList(Node firstInList, int[] skipIndexes) {
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = firstInList; n != null; n = n.getNext()) {
        while (skipIndexes != null && nextSkipSlot < skipIndexes.length) {
            if (nextSlot == skipIndexes[nextSkipSlot]) {
                cc.listSeparator();
                nextSlot++;
                nextSkipSlot++;
            } else {
                break;
            }
        }
        if (n != firstInList) {
            cc.listSeparator();
        }
        addExpr(n, 1);
        nextSlot++;
    }
}","public void test1515() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    Node node0 = new Node((-1709));
    int[] intArray0 = new int[1];
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, intArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}","/**
 * This function adds a comma-separated list as is specified by an ARRAYLIT
 * node with the associated skipIndexes array.  This is a space optimization
 * since we avoid creating a whole Node object for each empty array literal
 * slot.
 * @param firstInList The first in the node list (chained through the next
 * property).
 * @param skipIndexes If not null, then the array of skipped entries in the
 * array.
 */"
"void addAllSiblings(Node n) {
    for (Node c = n; c != null; c = c.getNext()) {
        add(c);
    }
}","public void test1616() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    codeGenerator0.addAllSiblings((Node) null);
}",""
"static String jsString(String s, CharsetEncoder outputCharsetEncoder) {
    int singleq = 0, doubleq = 0;
    // could count the quotes and pick the optimal quote character
    for (int i = 0; i < s.length(); i++) {
        switch(s.charAt(i)) {
            case '""':
                doubleq++;
                break;
            case '\'':
                singleq++;
                break;
        }
    }
    String doublequote, singlequote;
    char quote;
    if (singleq < doubleq) {
        // more double quotes so escape the single quotes
        quote = '\'';
        doublequote = ""\"""";
        singlequote = ""\\\'"";
    } else {
        // more single quotes so escape the doubles
        quote = '\""';
        doublequote = ""\\\"""";
        singlequote = ""\'"";
    }
    return strEscape(s, quote, doublequote, singlequote, ""\\\\"", outputCharsetEncoder);
}","public void test1717() throws Throwable {
    String string0 = CodeGenerator.jsString(""e'9D:yQ.d;=o"", (CharsetEncoder) null);
    assertEquals(""\""e'9D:yQ.d;=o\"""", string0);
}","/**
 * Outputs a js string, using the optimal (single/double) quote character
 */"
"static String jsString(String s, CharsetEncoder outputCharsetEncoder) {
    int singleq = 0, doubleq = 0;
    // could count the quotes and pick the optimal quote character
    for (int i = 0; i < s.length(); i++) {
        switch(s.charAt(i)) {
            case '""':
                doubleq++;
                break;
            case '\'':
                singleq++;
                break;
        }
    }
    String doublequote, singlequote;
    char quote;
    if (singleq < doubleq) {
        // more double quotes so escape the single quotes
        quote = '\'';
        doublequote = ""\"""";
        singlequote = ""\\\'"";
    } else {
        // more single quotes so escape the doubles
        quote = '\""';
        doublequote = ""\\\"""";
        singlequote = ""\'"";
    }
    return strEscape(s, quote, doublequote, singlequote, ""\\\\"", outputCharsetEncoder);
}","public void test1818() throws Throwable {
    String string0 = CodeGenerator.jsString(""\"""", (CharsetEncoder) null);
    assertEquals(""'\""'"", string0);
}","/**
 * Outputs a js string, using the optimal (single/double) quote character
 */"
"static String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null);
}","public void test1919() throws Throwable {
    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(""\n\nSubtree2: "");
    assertEquals(""\""\\n\\nSubtree2: \"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2020() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""}2<V/`L'(*]$@J/@i(v"");
    assertEquals(""/}2<V/`L'(*]$@J/@i(v/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2121() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""u2%</scripta"");
    assertEquals(""/u2%<\\/scripta/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2222() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""]>$\"""");
    assertEquals(""/]>$\""/"", string0);
}",""
"static String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null);
}","public void test2323() throws Throwable {
    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(""-->7z^-"");
    assertEquals(""\""--\\>7z^-\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"static String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null);
}","public void test2424() throws Throwable {
    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(""L]>Ww"");
    assertEquals(""\""L]>Ww\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) {
    return strEscape(s, '/', ""\"""", ""'"", ""\\"", outputCharsetEncoder);
}","public void test2525() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    String string0 = CodeGenerator.regexpEscape(""L]e(y^RI+KJ"", charsetEncoder0);
    assertEquals(""/L]e(y^RI+KJ/"", string0);
}","/**
 * Escapes regular expression
 */"
"static String identifierEscape(String s) {
    // First check if escaping is needed at all -- in most cases it isn't.
    if (NodeUtil.isLatin(s)) {
        return s;
    }
    // Now going through the string to escape non-latin characters if needed.
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        // Identifiers should always go to Latin1/ ASCII characters because
        // different browser's rules for valid identifier characters are
        // crazy.
        if (c > 0x1F && c < 0x7F) {
            sb.append(c);
        } else {
            appendHexJavaScriptRepresentation(sb, c);
        }
    }
    return sb.toString();
}","public void test2626() throws Throwable {
    String string0 = CodeGenerator.identifierEscape(""continue"");
    assertEquals(""continue"", string0);
}",""
