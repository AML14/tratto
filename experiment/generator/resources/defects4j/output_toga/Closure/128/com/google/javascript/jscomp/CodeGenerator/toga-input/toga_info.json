{
  "test1212" : {
    "methodSignature" : "void addList(Node firstInList)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    Node node0 = new Node(85);\n    codeGenerator0.addList(node0);\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "String regexpEscape(String s)",
    "methodName" : "regexpEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    String string0 = codeGenerator0.regexpEscape(\"~>vnr|Tq33:!:{1T;\");\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Node node0 = Node.newNumber(0.0);\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;\n    codeGenerator0.addList(node0, true, codeGenerator_Context0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(\" -> \");\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "static boolean isSimpleNumber(String s)",
    "methodName" : "isSimpleNumber",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    boolean boolean0 = CodeGenerator.isSimpleNumber(\"\");\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(\"8&##;8H*nOd#c\");\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "static double getSimpleNumber(String s)",
    "methodName" : "getSimpleNumber",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    double double0 = CodeGenerator.getSimpleNumber(\"8\");\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "String regexpEscape(String s)",
    "methodName" : "regexpEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);\n    String string0 = codeGenerator0.regexpEscape(\"}VK:}M&/N%>-A\");\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "public void tagAsStrict()",
    "methodName" : "tagAsStrict",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    codeGenerator0.tagAsStrict();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "void addCaseBody(Node caseBody)",
    "methodName" : "addCaseBody",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    codeGenerator0.addCaseBody((Node) null);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    Node node0 = Node.newNumber((-1.0));\n    codeGenerator0.addList(node0, false);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "static double getSimpleNumber(String s)",
    "methodName" : "getSimpleNumber",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    double double0 = CodeGenerator.getSimpleNumber(\"01\");\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "static double getSimpleNumber(String s)",
    "methodName" : "getSimpleNumber",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    double double0 = CodeGenerator.getSimpleNumber(\"object\");\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "void addArrayList(Node firstInList)",
    "methodName" : "addArrayList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    Node node0 = Node.newNumber((double) 0);\n    codeGenerator0.addArrayList(node0);\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "String regexpEscape(String s)",
    "methodName" : "regexpEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);\n    String string0 = codeGenerator0.regexpEscape(\"</scriptlvyqv^vrplb\");\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "void addAllSiblings(Node n)",
    "methodName" : "addAllSiblings",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    codeGenerator0.addAllSiblings((Node) null);\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(\"<:X^k%K\\\"LVYQV^VRplB\");\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    Node node0 = Node.newString(51, \"S0-> \", 51, 51);\n    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;\n    codeGenerator0.addList(node0, true, codeGenerator_Context0);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(\"6]>=J0]S54Epx$\");\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "void addList(Node firstInList)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    codeGenerator0.addList((Node) null);\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);\n    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(\"pb2V?-P03D<M@\");\n}",
    "testName" : "test2626"
  },
  "test3030" : {
    "methodSignature" : "static String identifierEscape(String s)",
    "methodName" : "identifierEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    String string0 = CodeGenerator.identifierEscape(\"in\");\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "String regexpEscape(String s)",
    "methodName" : "regexpEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);\n    String string0 = codeGenerator0.regexpEscape(\"3]H9H76k'=VM\");\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "String regexpEscape(String s)",
    "methodName" : "regexpEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    String string0 = codeGenerator0.regexpEscape(\"<!-->\");\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(\"\\u0001\\u0000\\u00A0\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\t\\n\\u000B\\f\\r\\u0000\\u0000\\u2028\\u2029\\u0000\\u0000\\u0000\\u0000\\u0000\\u202F\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 \\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u3000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0085\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u0000\\u0000\\u0000\\u0000\\u0000\\u205F\\u1680\\u0000\\u0000\\u180E\\u0000\\u0000\\u0000\");\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "void addAllSiblings(Node n)",
    "methodName" : "addAllSiblings",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Node node0 = Node.newNumber(0.0);\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    codeGenerator0.addAllSiblings(node0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);\n    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(\"}\\\"K:Y&/N%>-A\");\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "static double getSimpleNumber(String s)",
    "methodName" : "getSimpleNumber",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    double double0 = CodeGenerator.getSimpleNumber(\"//fo 4?u;E%ICDC\");\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
    "methodName" : "regexpEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);\n    String string0 = codeGenerator0.regexpEscape(\"'/=\", charsetEncoder0);\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "static String identifierEscape(String s)",
    "methodName" : "identifierEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    String string0 = CodeGenerator.identifierEscape(\"\\u0000\\u05BE\\u05D0\\u05F3\\u0600\\u0750$\\u1E00\\u2100i\\uFE70\\uFF61\");\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);\n    String string0 = codeGenerator0.escapeToDoubleQuotedJsString(\"s=m-ihe\");\n}",
    "testName" : "test1919"
  }
}