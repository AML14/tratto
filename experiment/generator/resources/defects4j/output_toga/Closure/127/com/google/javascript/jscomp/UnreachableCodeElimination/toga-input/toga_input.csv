focal_method,test_prefix,docstring
"@Override
public void process(Node externs, Node toplevel) {
    NodeTraversal.traverseChangedFunctions(compiler, new FunctionCallback() {

        @Override
        public void visit(AbstractCompiler compiler, Node root) {
            // Computes the control flow graph.
            ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false);
            cfa.process(null, root);
            ControlFlowGraph<Node> cfg = cfa.getCfg();
            new GraphReachability<Node, ControlFlowGraph.Branch>(cfg).compute(cfg.getEntry().getValue());
            if (root.isFunction()) {
                root = root.getLastChild();
            }
            do {
                codeChanged = false;
                NodeTraversal.traverse(compiler, root, new EliminationPass(cfg));
            } while (codeChanged);
        }
    });
}","public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
    // Undeclared exception!
    try {
        unreachableCodeElimination0.process((Node) null, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.ControlFlowAnalysis"", e);
    }
}",""
