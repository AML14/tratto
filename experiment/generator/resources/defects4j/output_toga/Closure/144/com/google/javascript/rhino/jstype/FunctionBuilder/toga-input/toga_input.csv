focal_method,test_prefix,docstring
"public FunctionBuilder withTemplateName(String templateTypeName) {
    this.templateTypeName = templateTypeName;
    return this;
}","public void test00() throws Throwable {
    FunctionBuilder functionBuilder0 = new FunctionBuilder((JSTypeRegistry) null);
    FunctionBuilder functionBuilder1 = functionBuilder0.withTemplateName("""");
    assertSame(functionBuilder0, functionBuilder1);
}","/**
 * Set the template name.
 */"
"public FunctionBuilder withTypeOfThis(ObjectType typeOfThis) {
    this.typeOfThis = typeOfThis;
    return this;
}","public void test11() throws Throwable {
    FunctionBuilder functionBuilder0 = new FunctionBuilder((JSTypeRegistry) null);
    Node node0 = new Node((-2007), 0, 28);
    UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression((JSTypeRegistry) null, node0, ""for"", false);
    FunctionBuilder functionBuilder1 = functionBuilder0.withTypeOfThis(unresolvedTypeExpression0);
    assertSame(functionBuilder1, functionBuilder0);
}","/**
 * Set the ""this"" type.
 */"
"public FunctionBuilder withParams(FunctionParamBuilder params) {
    this.parametersNode = params.build();
    return this;
}","public void test22() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
    FunctionParamBuilder functionParamBuilder0 = new FunctionParamBuilder(jSTypeRegistry0);
    FunctionBuilder functionBuilder1 = functionBuilder0.withParams(functionParamBuilder0);
    assertSame(functionBuilder0, functionBuilder1);
}","/**
 * Set the parameters of the function type from a FunctionParamBuilder.
 */"
"public FunctionBuilder forConstructor() {
    this.isConstructor = true;
    return this;
}","public void test33() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
    FunctionBuilder functionBuilder1 = functionBuilder0.forConstructor();
    assertSame(functionBuilder0, functionBuilder1);
}","/**
 * Make this a constructor.
 */"
"public FunctionBuilder copyFromOtherFunction(FunctionType otherType) {
    this.name = otherType.getReferenceName();
    this.sourceNode = otherType.getSource();
    this.parametersNode = otherType.getParametersNode();
    this.returnType = otherType.getReturnType();
    this.typeOfThis = otherType.getTypeOfThis();
    this.templateTypeName = otherType.getTemplateTypeName();
    this.isConstructor = otherType.isConstructor();
    this.isNativeType = otherType.isNativeObjectType();
    return this;
}","public void test44() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
    // Undeclared exception!
    try {
        functionBuilder0.copyFromOtherFunction((FunctionType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.FunctionBuilder"", e);
    }
}","/**
 * Copies all the information from another function type.
 */"
"/**
 * Sets an inferred return type.
 */
public FunctionBuilder withInferredReturnType(JSType returnType) {
    this.returnType = returnType;
    this.inferredReturnType = true;
    return this;
}","public void test55() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    FunctionBuilder functionBuilder1 = functionBuilder0.withInferredReturnType(voidType0);
    assertSame(functionBuilder1, functionBuilder0);
}","/**
 * Set the return type and whether it's inferred.
 */"
"public FunctionBuilder withSourceNode(Node sourceNode) {
    this.sourceNode = sourceNode;
    return this;
}","public void test66() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
    Node node0 = Node.newNumber((-369.6053255252), (-291), (-1828));
    FunctionBuilder functionBuilder1 = functionBuilder0.withSourceNode(node0);
    assertSame(functionBuilder0, functionBuilder1);
}","/**
 * Set the source node of the function type.
 */"
"public FunctionBuilder withName(String name) {
    this.name = name;
    return this;
}","public void test77() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
    FunctionBuilder functionBuilder1 = functionBuilder0.withName(""x_X:ctZ;Lq\""1%Yo"");
    assertSame(functionBuilder1, functionBuilder0);
}","/**
 * Set the name of the function type.
 */"
"FunctionBuilder forNativeType() {
    this.isNativeType = true;
    return this;
}","public void test88() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
    FunctionBuilder functionBuilder1 = functionBuilder0.forNativeType();
    assertSame(functionBuilder1, functionBuilder0);
}","/**
 * Make this a native type.
 */"
