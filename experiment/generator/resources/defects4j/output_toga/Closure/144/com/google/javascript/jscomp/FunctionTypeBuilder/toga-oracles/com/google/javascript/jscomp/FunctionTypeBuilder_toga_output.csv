project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("" m UlQ"", "" m UlQ"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("" m UlQ"", compiler0, node0, "" m UlQ"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("""");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, """", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSType jSType0 = jSTypeRegistry0.createNamedType(""// Input %num%"", (String) null, 8, 23);
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test022,"public void test022() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""v"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""v"", compiler0, node0, ""v"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
    // Undeclared exception!
    try {
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // EXPR_RESULT 1 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""a! ;C/!o"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""a! ;C/!o"", compiler0, node0, ""a! ;C/!o"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
    functionTypeBuilder1.inferFromOverriddenFunction(functionType0, (Node) null);
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""JSC_INEXISTANT_PARAM"", ""JSC_INEXISTANT_PARAM"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_INEXISTANT_PARAM"", compiler0, node0, ""JSC_INEXISTANT_PARAM"", (Scope) null);
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""H+T`LhD"", ""H+T`LhD"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""H+T`LhD"", compiler0, node0, ""H+T`LhD"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test066,"public void test066() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""+T`LhD"");
    Scope scope0 = new Scope(node0, compiler0);
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""+T`LhD"", compiler0, node0, ""+T`LhD"", scope0);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
    // Undeclared exception!
    try {
        functionTypeBuilder1.buildAndRegister();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // All Function types must have params and a return type
        //
        verifyException(""com.google.javascript.jscomp.FunctionTypeBuilder"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""+T`LhD"");
    Scope scope0 = new Scope(node0, compiler0);
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""+T`LhD"", compiler0, node0, ""+T`LhD"", scope0);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""+T`LhD"");
    Scope scope0 = new Scope(node0, compiler0);
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""+T`LhD"", compiler0, node0, ""+T`LhD"", scope0);
    functionTypeBuilder0.inferInheritance(jSDocInfo0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test099,"public void test099() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""AggregateValue"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""AggregateValue"", compiler0, node0, ""AggregateValue"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""6! ;C/!o"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""6! ;C/!o"", compiler0, node0, ""6! ;C/!o"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
    functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" j C"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("" j C"", compiler0, node0, "" j C"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
    functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""0b(TV"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""0b(TV"", compiler0, node0, ""0b(TV"", (Scope) null);
    // Undeclared exception!
    try {
        functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSTypeRegistry"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""+T`LhD"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""+T`LhD"", compiler0, node0, ""+T`LhD"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode("""", """");
    Node node0 = Node.newString(42, """", 33, 14);
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("""", compiler0, node0, """", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node0);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""+T`LhD"");
    Scope scope0 = new Scope(node0, compiler0);
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""+T`LhD"", compiler0, node0, ""+T`LhD"", scope0);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""+T`LhD"");
    Scope scope0 = new Scope(node0, compiler0);
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""+T`LhD"", compiler0, node0, ""+T`LhD"", scope0);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("""", """");
    Node node1 = Node.newString(42, """", 33, 14);
    node0.addChildToFront(node1);
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("""", compiler0, node1, """", (Scope) null);
    functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""H+T`LhD"", ""H+T`LhD"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""H+T`LhD"", compiler0, node0, ""H+T`LhD"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""+T`LhD"");
    Scope scope0 = new Scope(node0, compiler0);
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""+T`LhD"", compiler0, node0, ""+T`LhD"", scope0);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
