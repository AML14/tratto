{
  "test1212" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0b(TV\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0b(TV\", compiler0, node0, \"0b(TV\", (Scope) null);\n    functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"+T`LhD\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"+T`LhD\", compiler0, node0, \"+T`LhD\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"6! ;C/!o\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"6! ;C/!o\", compiler0, node0, \"6! ;C/!o\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();\n    functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" j C\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\" j C\", compiler0, node0, \" j C\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);\n    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();\n    functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, \"\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSType jSType0 = jSTypeRegistry0.createNamedType(\"// Input %num%\", (String) null, 8, 23);\n    JSType[] jSTypeArray0 = new JSType[1];\n    jSTypeArray0[0] = jSType0;\n    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);\n    functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);\n    compiler0.getWarningCount();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"a! ;C/!o\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"a! ;C/!o\", compiler0, node0, \"a! ;C/!o\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    functionTypeBuilder1.inferFromOverriddenFunction(functionType0, (Node) null);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
    "methodName" : "inferReturnType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"H+T`LhD\", \"H+T`LhD\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"H+T`LhD\", compiler0, node0, \"H+T`LhD\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info)",
    "methodName" : "inferInheritance",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"+T`LhD\");\n    Scope scope0 = new Scope(node0, compiler0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"+T`LhD\", compiler0, node0, \"+T`LhD\", scope0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"AggregateValue\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"AggregateValue\", compiler0, node0, \"AggregateValue\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info)",
    "methodName" : "inferParameterTypes",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"+T`LhD\");\n    Scope scope0 = new Scope(node0, compiler0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"+T`LhD\", compiler0, node0, \"+T`LhD\", scope0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    Node node1 = Node.newString(42, \"\", 33, 14);\n    node0.addChildToFront(node1);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node1, \"\", (Scope) null);\n    functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"\", \"\");\n    Node node0 = Node.newString(42, \"\", 33, 14);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, \"\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node0);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info)",
    "methodName" : "inferParameterTypes",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"+T`LhD\");\n    Scope scope0 = new Scope(node0, compiler0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"+T`LhD\", compiler0, node0, \"+T`LhD\", scope0);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);\n}",
    "testName" : "test1515"
  },
  "test2020" : {
    "methodSignature" : "static boolean isFunctionTypeDeclaration(JSDocInfo info)",
    "methodName" : "isFunctionTypeDeclaration",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "FunctionTypeBuilder setSourceNode(@Nullable Node sourceNode)",
    "methodName" : "setSourceNode",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" m UlQ\", \" m UlQ\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\" m UlQ\", compiler0, node0, \" m UlQ\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent)",
    "methodName" : "inferFromOverriddenFunction",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"v\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"v\", compiler0, node0, \"v\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent)",
    "methodName" : "inferFromOverriddenFunction",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_INEXISTANT_PARAM\", \"JSC_INEXISTANT_PARAM\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_INEXISTANT_PARAM\", compiler0, node0, \"JSC_INEXISTANT_PARAM\", (Scope) null);\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "FunctionType buildAndRegister()",
    "methodName" : "buildAndRegister",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"+T`LhD\");\n    Scope scope0 = new Scope(node0, compiler0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"+T`LhD\", compiler0, node0, \"+T`LhD\", scope0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);\n    functionTypeBuilder1.buildAndRegister();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"+T`LhD\");\n    Scope scope0 = new Scope(node0, compiler0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"+T`LhD\", compiler0, node0, \"+T`LhD\", scope0);\n    functionTypeBuilder0.inferInheritance(jSDocInfo0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
    "methodName" : "inferTemplateTypeName",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"H+T`LhD\", \"H+T`LhD\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"H+T`LhD\", compiler0, node0, \"H+T`LhD\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
    "methodName" : "inferTemplateTypeName",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"+T`LhD\");\n    Scope scope0 = new Scope(node0, compiler0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"+T`LhD\", compiler0, node0, \"+T`LhD\", scope0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);\n}",
    "testName" : "test1919"
  }
}