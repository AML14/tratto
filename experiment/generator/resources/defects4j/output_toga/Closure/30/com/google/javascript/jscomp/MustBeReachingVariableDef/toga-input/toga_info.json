{
  "test1113" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"ar?D:1s=guients\");\n    Node node1 = new Node(106, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1113"
  },
  "test2224" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2224() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop2: \");\n    Node node1 = new Node(120, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2224"
  },
  "test1214" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1214() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"ar?D:1s=guients\");\n    Node node1 = new Node(107, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1214"
  },
  "test2325" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2325() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"ar?D:1s=oumentZ\");\n    Node node1 = new Node(121, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2325"
  },
  "test2022" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"ar?D:1s=guments\");\n    Node node1 = new Node(117, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2022"
  },
  "test3133" : {
    "methodSignature" : "boolean dependsOnOuterScopeVars(String name, Node useNode)",
    "methodName" : "dependsOnOuterScopeVars",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3133() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"1?xQ.Wk>C:W\", \"1?xQ.Wk>C:W\");\n    Scope scope0 = new Scope(node0, compiler0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    SyntheticAst syntheticAst0 = new SyntheticAst(\"1?xQ.Wk>C:W\");\n    InputId inputId0 = node0.getInputId();\n    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, inputId0, true);\n    scope0.declare(\"1?xQ.Wk>C:W\", node0, (JSType) null, compilerInput0);\n    mustBeReachingVariableDef0.analyze();\n    boolean boolean0 = mustBeReachingVariableDef0.dependsOnOuterScopeVars(\"1?xQ.Wk>C:W\", node0);\n}",
    "testName" : "test3133"
  },
  "test1012" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1012() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"checkDebuggerStatement\", \"checkDebuggerStatement\");\n    Node node1 = new Node(105, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1012"
  },
  "test2123" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"arHOguments\");\n    Node node1 = new Node(118, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, false);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2123"
  },
  "test1517" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop2: \");\n    Node node1 = new Node(111, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1517"
  },
  "test2628" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2628() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop: \");\n    Node node1 = new Node(124, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2628"
  },
  "test1618" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"gumpnts\");\n    Node node1 = new Node(112, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1618"
  },
  "test2729" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2729() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop2: \");\n    Node node1 = new Node(125, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2729"
  },
  "test1315" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1315() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop2: \");\n    Node node1 = new Node(109, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1315"
  },
  "test2426" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2426() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"mssin Hg\\\"App2: \");\n    Node node1 = new Node(122, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2426"
  },
  "test1416" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing prop: \");\n    Node node1 = new Node(110, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1416"
  },
  "test2527" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2527() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop: \");\n    Node node1 = new Node(123, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2527"
  },
  "test068" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"misnI pop2: \");\n    Node node1 = new Node(99, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test068"
  },
  "test3032" : {
    "methodSignature" : "public boolean isLabelName()",
    "methodName" : "isLabelName",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3032() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"1?xQ.Wk>C:W\", \"1?xQ.Wk>C:W\");\n    Scope scope0 = new Scope(node0, compiler0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    SyntheticAst syntheticAst0 = new SyntheticAst(\"1?xQ.Wk>C:W\");\n    InputId inputId0 = node0.getInputId();\n    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, inputId0, true);\n    scope0.declare(\"1?xQ.Wk>C:W\", node0, (JSType) null, compilerInput0);\n    mustBeReachingVariableDef0.analyze();\n    Node node1 = mustBeReachingVariableDef0.getDef(\"1?xQ.Wk>C:W\", node0);\n    node1.isLabelName();\n}",
    "testName" : "test3032"
  },
  "test2830" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2830() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"arHOguments\");\n    Node node1 = new Node(118, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    node0.removeChildren();\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2830"
  },
  "test2931" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2931() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop2: \");\n    Node node1 = new Node(96, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test2931"
  },
  "test1820" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1820() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop2: \");\n    Node node1 = new Node(115, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1820"
  },
  "test000" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"arguments\", \"arguments\");\n    Node node1 = new Node(54, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    SyntheticAst syntheticAst0 = new SyntheticAst(\"arguments\");\n    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);\n    scope0.declare(\"arguments\", node0, (JSType) null, compilerInput0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test000"
  },
  "test0810" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0810() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"missing pop2: \");\n    Node node1 = new Node(102, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test0810"
  },
  "test1921" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"ar?D:1s=guients\");\n    Node node1 = new Node(116, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1921"
  },
  "test0911" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.javascript.jscomp.CrossModuleMethodMotion\");\n    Node node1 = new Node(103, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test0911"
  },
  "test1719" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1719() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"arguments\", \"arguments\");\n    Node node0 = Node.newString(113, \"arguments\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test1719"
  },
  "test057" : {
    "methodSignature" : "Node getDef(String name, Node useNode)",
    "methodName" : "getDef",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"1?xQ.Wk>C:W\", \"1?xQ.Wk>C:W\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n    Node node1 = mustBeReachingVariableDef0.getDef(\"1?xQ.Wk>C:W\", node0);\n}",
    "testName" : "test057"
  },
  "test079" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MustBeReachingVariableDef",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"mssin pp2: \");\n    Node node1 = new Node(100, node0, node0, node0, node0);\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    Scope scope0 = new Scope(node1, compiler0);\n    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);\n    mustBeReachingVariableDef0.analyze();\n}",
    "testName" : "test079"
  }
}