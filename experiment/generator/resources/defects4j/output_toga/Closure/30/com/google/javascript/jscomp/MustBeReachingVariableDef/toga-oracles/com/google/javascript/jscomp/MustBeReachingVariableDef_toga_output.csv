project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""arguments"", ""arguments"");
    Node node1 = new Node(54, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    SyntheticAst syntheticAst0 = new SyntheticAst(""arguments"");
    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
    scope0.declare(""arguments"", node0, (JSType) null, compilerInput0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test057,"public void test057() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""1?xQ.Wk>C:W"", ""1?xQ.Wk>C:W"");
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
    Node node1 = mustBeReachingVariableDef0.getDef(""1?xQ.Wk>C:W"", node0);
    assertNull(node1);
}",0,
project,0,test068,"public void test068() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""misnI pop2: "");
    Node node1 = new Node(99, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test079,"public void test079() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""mssin pp2: "");
    Node node1 = new Node(100, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop2: "");
    Node node1 = new Node(102, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test0911,"public void test0911() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.CrossModuleMethodMotion"");
    Node node1 = new Node(103, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test1012,"public void test1012() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""checkDebuggerStatement"", ""checkDebuggerStatement"");
    Node node1 = new Node(105, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test1113,"public void test1113() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""ar?D:1s=guients"");
    Node node1 = new Node(106, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test1214,"public void test1214() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""ar?D:1s=guients"");
    Node node1 = new Node(107, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test1315,"public void test1315() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop2: "");
    Node node1 = new Node(109, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test1416,"public void test1416() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing prop: "");
    Node node1 = new Node(110, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test1517,"public void test1517() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop2: "");
    Node node1 = new Node(111, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test1618,"public void test1618() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""gumpnts"");
    Node node1 = new Node(112, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test1719,"public void test1719() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""arguments"", ""arguments"");
    Node node0 = Node.newString(113, ""arguments"");
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    // Undeclared exception!
    try {
        mustBeReachingVariableDef0.analyze();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.MustBeReachingVariableDef"", e);
    }
}",0,
project,0,test1820,"public void test1820() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop2: "");
    Node node1 = new Node(115, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    // Undeclared exception!
    try {
        mustBeReachingVariableDef0.analyze();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // malformed 'for' statement FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test1921,"public void test1921() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""ar?D:1s=guients"");
    Node node1 = new Node(116, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2022,"public void test2022() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""ar?D:1s=guments"");
    Node node1 = new Node(117, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2123,"public void test2123() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""arHOguments"");
    Node node1 = new Node(118, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, false);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    // Undeclared exception!
    try {
        mustBeReachingVariableDef0.analyze();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // SCRIPT 1 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000512] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000513] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000514] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test2224,"public void test2224() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop2: "");
    Node node1 = new Node(120, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2325,"public void test2325() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""ar?D:1s=oumentZ"");
    Node node1 = new Node(121, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2426,"public void test2426() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""mssin Hg\""App2: "");
    Node node1 = new Node(122, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2527,"public void test2527() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop: "");
    Node node1 = new Node(123, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2628,"public void test2628() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop: "");
    Node node1 = new Node(124, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2729,"public void test2729() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop2: "");
    Node node1 = new Node(125, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2830,"public void test2830() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""arHOguments"");
    Node node1 = new Node(118, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    node0.removeChildren();
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test2931,"public void test2931() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop2: "");
    Node node1 = new Node(96, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
}",0,
project,0,test3032,"public void test3032() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""1?xQ.Wk>C:W"", ""1?xQ.Wk>C:W"");
    Scope scope0 = new Scope(node0, compiler0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    SyntheticAst syntheticAst0 = new SyntheticAst(""1?xQ.Wk>C:W"");
    InputId inputId0 = node0.getInputId();
    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, inputId0, true);
    scope0.declare(""1?xQ.Wk>C:W"", node0, (JSType) null, compilerInput0);
    mustBeReachingVariableDef0.analyze();
    Node node1 = mustBeReachingVariableDef0.getDef(""1?xQ.Wk>C:W"", node0);
    assertFalse(node1.isLabelName());
}",0,assertTrue(node1.isLabelName())
project,0,test3133,"public void test3133() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""1?xQ.Wk>C:W"", ""1?xQ.Wk>C:W"");
    Scope scope0 = new Scope(node0, compiler0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    SyntheticAst syntheticAst0 = new SyntheticAst(""1?xQ.Wk>C:W"");
    InputId inputId0 = node0.getInputId();
    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, inputId0, true);
    scope0.declare(""1?xQ.Wk>C:W"", node0, (JSType) null, compilerInput0);
    mustBeReachingVariableDef0.analyze();
    boolean boolean0 = mustBeReachingVariableDef0.dependsOnOuterScopeVars(""1?xQ.Wk>C:W"", node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
