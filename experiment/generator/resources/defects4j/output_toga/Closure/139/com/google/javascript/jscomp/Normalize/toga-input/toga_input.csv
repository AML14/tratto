focal_method,test_prefix,docstring
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize normalize0 = new Normalize(compiler0, false);
    Node node0 = compiler0.parseSyntheticCode(""com.googlecommn.base.Predicates$InPredicate"", ""com.googlecommn.base.Predicates$InPredicate"");
    Node node1 = new Node(37, node0);
    normalize0.process(node0, node0);
    assertEquals(41, Node.BRACELESS_TYPE);
}",""
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    JSType[] jSTypeArray0 = new JSType[1];
    JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
    jSTypeArray0[0] = (JSType) objectType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) normalize_VerifyConstants0);
    assertEquals(4, Node.ENUM_PROP);
}","/**
 * Traverses a node recursively.
 */"
"public boolean isQuotedString() {
    return false;
}","public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
    Node node0 = compiler0.parseTestCode(""AITI"");
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) normalize_VerifyConstants0);
    assertFalse(node0.isQuotedString());
}","/**
 * This should only be called for STRING nodes created in object lits.
 */"
"protected void traverseInnerNode(Node node, Node parent, Scope refinedScope) {
    Preconditions.checkNotNull(parent);
    if (refinedScope != null && getScope() != refinedScope) {
        curNode = node;
        pushScope(refinedScope);
        traverseBranch(node, parent);
        popScope();
    } else {
        traverseBranch(node, parent);
    }
}","public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
    Node node0 = compiler0.parseTestCode(""ATI"");
    nodeTraversal0.traverseInnerNode(node0, node0, (Scope) null);
    nodeTraversal0.traverseInnerNode(node0, node0, (Scope) null);
    assertEquals(40, Node.ORIGINALNAME_PROP);
}","/**
 * Traverses an inner node recursively with a refined scope. An inner node may
 * be any node with a non {@code null} parent (i.e. all nodes except the
 * root).
 *
 * @param node the node to traverse
 * @param parent the node's parent, it may be not be {@code null}
 * @param refinedScope the refined scope of the scope currently at the top of
 *     the scope stack or in trivial cases that very scope or {@code null}
 */"
"public boolean isVarArgs() {
    return getBooleanProp(VAR_ARGS_NAME);
}","public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
    Node node0 = compiler0.parseTestCode(""I"");
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) normalize_VerifyConstants0);
    assertFalse(node0.isVarArgs());
}","/**
 * Returns whether this node is a variable length argument node. This
 * method's return value is meaningful only on {@link Token#NAME} nodes
 * used to define a {@link Token#FUNCTION}'s argument list.
 */"
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(126, ""AFR"");
    Node node1 = new Node(115, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(126, ""i5"");
    Node node1 = new Node(116, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Normalize constraints violated:
        // LABEL normalization
        //
        verifyException(""com.google.javascript.jscomp.Normalize$NormalizeStatements"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(113, ""C:`^req->R:MdF%SKX"");
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // The existing child node of the parent should not be null.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""=rbX{5<F.&x~sU"", ""JM"");
    Node node1 = new Node(105, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: java.lang.String@0000000456] [synthetic: 1] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(126, ""com.google.javascript.jscomp.RemoveConstantExpressions$1"");
    Node node1 = new Node(113, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node1, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1212() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(118, ""="");
    Node node1 = new Node(126, node0, node0);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node0, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Normalize constraints violated:
        // LABEL normalization
        //
        verifyException(""com.google.javascript.jscomp.Normalize$NormalizeStatements"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1313() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(126, ""`e>\""\""\""YV"");
    Node node1 = new Node(119, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1414() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(126, ""i["");
    Node node1 = new Node(120, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1515() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(126, ""i5"");
    Node node1 = new Node(122, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1616() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(126, ""4JG/@x7bNj}[FmJG^u"");
    Node node1 = new Node(124, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1717() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize normalize0 = new Normalize(compiler0, false);
    Node node0 = new Node(126);
    node0.addChildToFront(node0);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1818() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize normalize0 = new Normalize(compiler0, false);
    Node node0 = new Node(126);
    Node node1 = new Node(20, node0, node0, node0, node0);
    node0.addChildToFront(node1);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1919() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""=rbX{5<F&x~sU"", ""=rbX{5<F&x~sU"");
    Node node1 = new Node(118, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test2020() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""=rbX{5<F&x~sU"", ""=rbX{5<F&x~sU"");
    Node node1 = new Node(118, node0, node0);
    node1.removeChildren();
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Empty VAR node.
        //
        verifyException(""com.google.javascript.jscomp.Normalize$NormalizeStatements"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test2121() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("":&2/eh^ ^+p%q"", ""com.google.javascript.jscomp.mozilla.rhino.ast.Block"");
    Node node1 = compiler0.parseSyntheticCode("":&2/eh^ ^+p%q"", ""com.google.javascript.jscomp.mozilla.rhino.ast.Block"");
    Node node2 = new Node(118, node0, node1);
    node0.addChildToBack(node2);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node2, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, new NormalizeStatements(compiler, assertOnChange));
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    // It is important that removeDuplicateDeclarations runs after
    // MakeDeclaredNamesUnique in order for catch block exception names to be
    // handled properly. Specifically, catch block exception names are
    // only valid within the catch block, but our currect Scope logic
    // has no concept of this and includes it in the containing function
    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
    // names unique so that removeDuplicateDeclarations() will properly handle
    // cases where a function scope variable conflict with a exception name:
    //   function f() {
    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
    //      var e = 1; // f scope 'e'
    //   }
    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test2222() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""=rbX{5<F.&x~sU"", ""=rbX{5<F.&x~sU"");
    Node node1 = new Node(105, node0, node0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
