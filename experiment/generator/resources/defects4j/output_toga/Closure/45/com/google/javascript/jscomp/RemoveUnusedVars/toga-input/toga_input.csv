focal_method,test_prefix,docstring
"@Override
public void process(Node externs, Node root) {
    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
    SimpleDefinitionFinder defFinder = null;
    if (modifyCallSites) {
        // For testing, allow the SimpleDefinitionFinder to be build now.
        defFinder = new SimpleDefinitionFinder(compiler);
        defFinder.process(externs, root);
    }
    process(externs, root, defFinder);
}","public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""arguments"");
    RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, false, false, false);
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    removeUnusedVars0.process(node0, node0);
    assertEquals(49, Node.DIRECT_EVAL);
}","/**
 * Traverses the root, removing all unused variables. Multiple traversals
 * may occur to ensure all unused variables are removed.
 */"
"@Override
public void process(Node externs, Node root) {
    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
    SimpleDefinitionFinder defFinder = null;
    if (modifyCallSites) {
        // For testing, allow the SimpleDefinitionFinder to be build now.
        defFinder = new SimpleDefinitionFinder(compiler);
        defFinder.process(externs, root);
    }
    process(externs, root, defFinder);
}","public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""arguments"");
    RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, true, true, true);
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    // Undeclared exception!
    try {
        removeUnusedVars0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Unexpected lValue type NAME
        //   Node(NAME arguments):  [testcode] :1:0
        // arguments
        //   Parent(EXPR_RESULT):  [testcode] :1:0
        // arguments
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Traverses the root, removing all unused variables. Multiple traversals
 * may occur to ensure all unused variables are removed.
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""a=hrguments"");
    Node node1 = new Node(37, node0, node0, node0, node0, 2, 41);
    SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
    RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, true, true, true);
    removeUnusedVars0.process(node1, node1, simpleDefinitionFinder0);
    assertFalse(node1.isTrue());
}",""
"public boolean isSetterDef() {
    return this.getType() == Token.SETTER_DEF;
}","public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.jscompRemoveUnusedars$mn=lSiteOptimizer"", ""com.google.javascript.jscompRemoveUnusedars$mn=lSiteOptimizer"");
    RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, true, true, true);
    SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
    removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
    assertFalse(node0.isSetterDef());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test44() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""a=hrgument=es"");
    RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, true, true, true);
    SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
    removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
    assertEquals(0, node0.getCharno());
}",""
