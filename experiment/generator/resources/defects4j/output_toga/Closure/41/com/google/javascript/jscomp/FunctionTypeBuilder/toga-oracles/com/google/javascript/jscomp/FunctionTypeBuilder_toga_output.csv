project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator"", ""com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator"", compiler0, node0, ""com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSType[] jSTypeArray0 = new JSType[7];
    JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""JSC_OPTIONAL>ARG_AT_END"", ""JSC_OPTIONAL>ARG_AT_END"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_OPTIONAL>ARG_AT_END"", compiler0, node0, ""JSC_OPTIONAL>ARG_AT_END"", (Scope) null);
    FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents(functionTypeBuilder_AstFunctionContents0);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    functionTypeBuilder1.inferParameterTypes(jSDocInfo0);
    // Undeclared exception!
    try {
        functionTypeBuilder1.buildAndRegister();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test056,"public void test056() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""d"", ""d"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""d"", compiler0, node0, ""d"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test057,"public void test057() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""d"", ""d"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""d"", compiler0, node0, ""d"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    assertFalse(functionType0.isReturnTypeInferred());
}",0,assertTrue(functionType0.isReturnTypeInferred())
project,0,test068,"public void test068() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""ARRAY_FUNCTION_TYPE"", ""ARRAY_FUNCTION_TYPE"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, ""ARRAY_FUNCTION_TYPE"", (Scope) null);
}",0,
project,0,test079,"public void test079() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""q3\""5}\"""", ""q3\""5}\"""");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""q3\""5}\"""", compiler0, node0, ""q3\""5}\"""", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents((FunctionTypeBuilder.FunctionContents) null);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""@implemeots used without const:uctor or @intIrfce 4or `0}"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""@implemeots used without const:uctor or @intIrfce 4or `0}"", compiler0, node0, ""@implemeots used without const:uctor or @intIrfce 4or `0}"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test0911,"public void test0911() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""J;Cs9PINAjoARGYdEN_"", ""J;Cs9PINAjoARGYdEN_"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""J;Cs9PINAjoARGYdEN_"", compiler0, node0, ""J;Cs9PINAjoARGYdEN_"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""J;Cs9PINAjoARGYdEN_"", (Node) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test1012,"public void test1012() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""J;C_OPTIONAL_ARG_ATEND"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""J;C_OPTIONAL_ARG_ATEND"", compiler0, node0, ""J;C_OPTIONAL_ARG_ATEND"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test1113,"public void test1113() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"", compiler0, node0, ""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    JSType[] jSTypeArray0 = new JSType[9];
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
    assertEquals(1, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test1214,"public void test1214() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""J;C_OPTINAL_ARG_ATEND"", ""J;C_OPTINAL_ARG_ATEND"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""J;C_OPTINAL_ARG_ATEND"", compiler0, node0, ""J;C_OPTINAL_ARG_ATEND"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test1315,"public void test1315() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""J;C_OPTIONAL_ARG_ATEND"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""J;C_OPTIONAL_ARG_ATEND"", compiler0, node0, ""J;C_OPTIONAL_ARG_ATEND"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test1416,"public void test1416() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""SHRFu2Ur+qWU*w.9.~G"", ""SHRFu2Ur+qWU*w.9.~G"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""SHRFu2Ur+qWU*w.9.~G"", compiler0, node0, ""SHRFu2Ur+qWU*w.9.~G"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test1517,"public void test1517() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""SHRFu2Ur+qWU*w.9.~G"", ""SHRFu2Ur+qWU*w.9.~G"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""SHRFu2Ur+qWU*w.9.~G"", compiler0, node0, ""SHRFu2Ur+qWU*w.9.~G"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test1618,"public void test1618() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, """", """");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("""", compiler0, node0, """", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test1719,"public void test1719() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""d"", ""d"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""d"", compiler0, node0, ""d"", (Scope) null);
    functionTypeBuilder0.inferInheritance(jSDocInfo0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test1820,"public void test1820() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""JSC_OPTIONAL_ARG_AT_END"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_OPTIONAL_ARG_AT_END"", compiler0, node0, ""JSC_OPTIONAL_ARG_AT_END"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
    functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
    functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
    assertFalse(functionType0.isReturnTypeInferred());
}",0,assertTrue(functionType0.isReturnTypeInferred())
project,0,test1921,"public void test1921() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""SHRFu2Ur+qWU*w.9.~G"", ""SHRFu2Ur+qWU*w.9.~G"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""SHRFu2Ur+qWU*w.9.~G"", compiler0, node0, ""SHRFu2Ur+qWU*w.9.~G"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, (JSType) null);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test2022,"public void test2022() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""J;C_OPTINAL_ARG_AdEND"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""J;C_OPTINAL_ARG_AdEND"", compiler0, node0, ""J;C_OPTINAL_ARG_AdEND"", (Scope) null);
    GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
    JSType jSType0 = globalNamespace0.getTypeOfThis();
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, jSType0);
    assertSame(functionTypeBuilder1, functionTypeBuilder0);
}",0,
project,0,test2123,"public void test2123() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""JSC_OPTIONAL_ARG_AT_END"", ""JSC_OPTIONAL_ARG_AT_END"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_OPTIONAL_ARG_AT_END"", compiler0, node0, ""JSC_OPTIONAL_ARG_AT_END"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test2224,"public void test2224() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""JSC_OPTIONAL_ARG_AT_END"", ""JSC_OPTIONAL_ARG_AT_END"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_OPTIONAL_ARG_AT_END"", compiler0, node0, ""JSC_OPTIONAL_ARG_AT_END"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test2325,"public void test2325() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"", compiler0, node0, ""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSType[] jSTypeArray0 = new JSType[9];
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test2426,"public void test2426() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""JSC_OPTIONAL>ARG_AT_END"", ""JSC_OPTIONAL>ARG_AT_END"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_OPTIONAL>ARG_AT_END"", compiler0, node0, ""JSC_OPTIONAL>ARG_AT_END"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test2527,"public void test2527() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, """", """");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("""", compiler0, node0, """", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
    assertSame(functionTypeBuilder0, functionTypeBuilder1);
}",0,
project,0,test2628,"public void test2628() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""JSC_OPTIONjL_ARG_AT_END"", ""JSC_OPTIONjL_ARG_AT_END"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_OPTIONjL_ARG_AT_END"", compiler0, node0, ""JSC_OPTIONjL_ARG_AT_END"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    functionTypeBuilder1.buildAndRegister();
    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
    assertFalse(functionType0.isReturnTypeInferred());
}",0,assertTrue(functionType0.isReturnTypeInferred())
project,0,test2729,"public void test2729() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""q3\""5}\"""", ""q3\""5}\"""");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""q3\""5}\"""", compiler0, node0, ""q3\""5}\"""", (Scope) null);
    // Undeclared exception!
    try {
        functionTypeBuilder0.buildAndRegister();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // All Function types must have params and a return type
        //
        verifyException(""com.google.javascript.jscomp.FunctionTypeBuilder"", e);
    }
}",0,
project,0,test2830,"public void test2830() throws Throwable {
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
