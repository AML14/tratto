{
  "test1113" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator\", compiler0, node0, \"com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n    JSType[] jSTypeArray0 = new JSType[9];\n    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);\n    functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);\n    compiler0.getWarningCount();\n}",
    "testName" : "test1113"
  },
  "test2224" : {
    "methodSignature" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info)",
    "methodName" : "inferParameterTypes",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2224() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"JSC_OPTIONAL_ARG_AT_END\", \"JSC_OPTIONAL_ARG_AT_END\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_OPTIONAL_ARG_AT_END\", compiler0, node0, \"JSC_OPTIONAL_ARG_AT_END\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);\n}",
    "testName" : "test2224"
  },
  "test1214" : {
    "methodSignature" : "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent)",
    "methodName" : "inferFromOverriddenFunction",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1214() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"J;C_OPTINAL_ARG_ATEND\", \"J;C_OPTINAL_ARG_ATEND\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"J;C_OPTINAL_ARG_ATEND\", compiler0, node0, \"J;C_OPTINAL_ARG_ATEND\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n}",
    "testName" : "test1214"
  },
  "test2325" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2325() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator\", compiler0, node0, \"com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSType[] jSTypeArray0 = new JSType[9];\n    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);\n    functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);\n    compiler0.getWarningCount();\n}",
    "testName" : "test2325"
  },
  "test2022" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"J;C_OPTINAL_ARG_AdEND\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"J;C_OPTINAL_ARG_AdEND\", compiler0, node0, \"J;C_OPTINAL_ARG_AdEND\", (Scope) null);\n    GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);\n    JSType jSType0 = globalNamespace0.getTypeOfThis();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, jSType0);\n}",
    "testName" : "test2022"
  },
  "test1012" : {
    "methodSignature" : "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent)",
    "methodName" : "inferFromOverriddenFunction",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1012() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"J;C_OPTIONAL_ARG_ATEND\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"J;C_OPTIONAL_ARG_ATEND\", compiler0, node0, \"J;C_OPTIONAL_ARG_ATEND\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n}",
    "testName" : "test1012"
  },
  "test2123" : {
    "methodSignature" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info)",
    "methodName" : "inferParameterTypes",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"JSC_OPTIONAL_ARG_AT_END\", \"JSC_OPTIONAL_ARG_AT_END\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_OPTIONAL_ARG_AT_END\", compiler0, node0, \"JSC_OPTIONAL_ARG_AT_END\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);\n}",
    "testName" : "test2123"
  },
  "test011" : {
    "methodSignature" : "FunctionType buildAndRegister()",
    "methodName" : "buildAndRegister",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"JSC_OPTIONAL>ARG_AT_END\", \"JSC_OPTIONAL>ARG_AT_END\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_OPTIONAL>ARG_AT_END\", compiler0, node0, \"JSC_OPTIONAL>ARG_AT_END\", (Scope) null);\n    FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents(functionTypeBuilder_AstFunctionContents0);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    functionTypeBuilder1.inferParameterTypes(jSDocInfo0);\n    functionTypeBuilder1.buildAndRegister();\n}",
    "testName" : "test011"
  },
  "test1517" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
    "methodName" : "inferReturnType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"SHRFu2Ur+qWU*w.9.~G\", \"SHRFu2Ur+qWU*w.9.~G\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"SHRFu2Ur+qWU*w.9.~G\", compiler0, node0, \"SHRFu2Ur+qWU*w.9.~G\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);\n}",
    "testName" : "test1517"
  },
  "test056" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"d\", \"d\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"d\", compiler0, node0, \"d\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test056"
  },
  "test2628" : {
    "methodSignature" : "public boolean isReturnTypeInferred()",
    "methodName" : "isReturnTypeInferred",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2628() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"JSC_OPTIONjL_ARG_AT_END\", \"JSC_OPTIONjL_ARG_AT_END\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_OPTIONjL_ARG_AT_END\", compiler0, node0, \"JSC_OPTIONjL_ARG_AT_END\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    functionTypeBuilder1.buildAndRegister();\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    functionType0.isReturnTypeInferred();\n}",
    "testName" : "test2628"
  },
  "test1618" : {
    "methodSignature" : "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info)",
    "methodName" : "inferInheritance",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, \"\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);\n}",
    "testName" : "test1618"
  },
  "test2729" : {
    "methodSignature" : "FunctionType buildAndRegister()",
    "methodName" : "buildAndRegister",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2729() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"q3\\\"5}\\\"\", \"q3\\\"5}\\\"\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"q3\\\"5}\\\"\", compiler0, node0, \"q3\\\"5}\\\"\", (Scope) null);\n    functionTypeBuilder0.buildAndRegister();\n}",
    "testName" : "test2729"
  },
  "test1315" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1315() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"J;C_OPTIONAL_ARG_ATEND\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"J;C_OPTIONAL_ARG_ATEND\", compiler0, node0, \"J;C_OPTIONAL_ARG_ATEND\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test1315"
  },
  "test2426" : {
    "methodSignature" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
    "methodName" : "inferTemplateTypeName",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2426() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"JSC_OPTIONAL>ARG_AT_END\", \"JSC_OPTIONAL>ARG_AT_END\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_OPTIONAL>ARG_AT_END\", compiler0, node0, \"JSC_OPTIONAL>ARG_AT_END\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);\n}",
    "testName" : "test2426"
  },
  "test1416" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
    "methodName" : "inferReturnType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"SHRFu2Ur+qWU*w.9.~G\", \"SHRFu2Ur+qWU*w.9.~G\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"SHRFu2Ur+qWU*w.9.~G\", compiler0, node0, \"SHRFu2Ur+qWU*w.9.~G\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);\n}",
    "testName" : "test1416"
  },
  "test2527" : {
    "methodSignature" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
    "methodName" : "inferTemplateTypeName",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2527() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, \"\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);\n}",
    "testName" : "test2527"
  },
  "test068" : {
    "methodSignature" : "FunctionTypeBuilder(String fnName, AbstractCompiler compiler, Node errorRoot, String sourceName, Scope scope)",
    "methodName" : "FunctionTypeBuilder",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"ARRAY_FUNCTION_TYPE\", \"ARRAY_FUNCTION_TYPE\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, \"ARRAY_FUNCTION_TYPE\", (Scope) null);\n}",
    "testName" : "test068"
  },
  "test2830" : {
    "methodSignature" : "static boolean isFunctionTypeDeclaration(JSDocInfo info)",
    "methodName" : "isFunctionTypeDeclaration",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2830() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);\n}",
    "testName" : "test2830"
  },
  "test1820" : {
    "methodSignature" : "public boolean isReturnTypeInferred()",
    "methodName" : "isReturnTypeInferred",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1820() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_OPTIONAL_ARG_AT_END\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_OPTIONAL_ARG_AT_END\", compiler0, node0, \"JSC_OPTIONAL_ARG_AT_END\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();\n    functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);\n    functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);\n    functionType0.isReturnTypeInferred();\n}",
    "testName" : "test1820"
  },
  "test000" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator\", \"com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator\", compiler0, node0, \"com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSType[] jSTypeArray0 = new JSType[7];\n    JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);\n    functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test000"
  },
  "test0810" : {
    "methodSignature" : "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent)",
    "methodName" : "inferFromOverriddenFunction",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0810() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"@implemeots used without const:uctor or @intIrfce 4or `0}\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"@implemeots used without const:uctor or @intIrfce 4or `0}\", compiler0, node0, \"@implemeots used without const:uctor or @intIrfce 4or `0}\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);\n}",
    "testName" : "test0810"
  },
  "test1921" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"SHRFu2Ur+qWU*w.9.~G\", \"SHRFu2Ur+qWU*w.9.~G\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"SHRFu2Ur+qWU*w.9.~G\", compiler0, node0, \"SHRFu2Ur+qWU*w.9.~G\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, (JSType) null);\n}",
    "testName" : "test1921"
  },
  "test0911" : {
    "methodSignature" : "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent)",
    "methodName" : "inferFromOverriddenFunction",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"J;Cs9PINAjoARGYdEN_\", \"J;Cs9PINAjoARGYdEN_\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"J;Cs9PINAjoARGYdEN_\", compiler0, node0, \"J;Cs9PINAjoARGYdEN_\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(\"J;Cs9PINAjoARGYdEN_\", (Node) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);\n}",
    "testName" : "test0911"
  },
  "test1719" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1719() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"d\", \"d\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"d\", compiler0, node0, \"d\", (Scope) null);\n    functionTypeBuilder0.inferInheritance(jSDocInfo0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test1719"
  },
  "test057" : {
    "methodSignature" : "public boolean isReturnTypeInferred()",
    "methodName" : "isReturnTypeInferred",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"d\", \"d\");\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"d\", compiler0, node0, \"d\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n    functionType0.isReturnTypeInferred();\n}",
    "testName" : "test057"
  },
  "test079" : {
    "methodSignature" : "FunctionTypeBuilder setContents(@Nullable FunctionContents contents)",
    "methodName" : "setContents",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"q3\\\"5}\\\"\", \"q3\\\"5}\\\"\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"q3\\\"5}\\\"\", compiler0, node0, \"q3\\\"5}\\\"\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents((FunctionTypeBuilder.FunctionContents) null);\n}",
    "testName" : "test079"
  }
}