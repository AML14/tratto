com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator"", ""com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator"", compiler0, node0, ""com.google.javascript.jscomp.FunctionTypeBuilder$ImplementedTypeVXlidator"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSType[] jSTypeArray0 = new JSType[7];
    JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
    compiler0.getWarningCount();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""[d/"", ""[d/"");
    FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
    functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Closure_41b/src/com/google/javascript/jscomp/FunctionTypeBuilder/AstFunctionContents.java
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test023() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""[d/"", ""[d/"");
    FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
    functionTypeBuilder_AstFunctionContents0.recordNonEmptyReturn();
    functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Closure_41b/src/com/google/javascript/jscomp/FunctionTypeBuilder/AstFunctionContents.java
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test034() throws Throwable {
    FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
    Iterable<String> iterable0 = functionTypeBuilder_UnknownFunctionContents0.getEscapedVarNames();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Closure_41b/src/com/google/javascript/jscomp/FunctionTypeBuilder/UnknownFunctionContents.java
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test045() throws Throwable {
    FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
    boolean boolean0 = functionTypeBuilder_UnknownFunctionContents0.mayBeFromExterns();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Closure_41b/src/com/google/javascript/jscomp/FunctionTypeBuilder/UnknownFunctionContents.java
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test056() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""d"", ""d"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""d"", compiler0, node0, ""d"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    compiler0.getWarningCount();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test057() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""d"", ""d"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""d"", compiler0, node0, ""d"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    functionType0.isReturnTypeInferred();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test1113() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"", compiler0, node0, ""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    JSType[] jSTypeArray0 = new JSType[9];
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
    compiler0.getWarningCount();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test1315() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""J;C_OPTIONAL_ARG_ATEND"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""J;C_OPTIONAL_ARG_ATEND"", compiler0, node0, ""J;C_OPTIONAL_ARG_ATEND"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    compiler0.getWarningCount();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test1719() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""d"", ""d"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""d"", compiler0, node0, ""d"", (Scope) null);
    functionTypeBuilder0.inferInheritance(jSDocInfo0);
    compiler0.getWarningCount();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test1820() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""JSC_OPTIONAL_ARG_AT_END"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_OPTIONAL_ARG_AT_END"", compiler0, node0, ""JSC_OPTIONAL_ARG_AT_END"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
    functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
    functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
    functionType0.isReturnTypeInferred();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test2325() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"");
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"", compiler0, node0, ""com.google.javascript.jscomp.FunctinTypeBuilder$ImplementedTypeVXlidator"", (Scope) null);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSType[] jSTypeArray0 = new JSType[9];
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
    compiler0.getWarningCount();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test2628() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""JSC_OPTIONjL_ARG_AT_END"", ""JSC_OPTIONjL_ARG_AT_END"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(""JSC_OPTIONjL_ARG_AT_END"", compiler0, node0, ""JSC_OPTIONjL_ARG_AT_END"", (Scope) null);
    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
    functionTypeBuilder1.buildAndRegister();
    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
    functionType0.isReturnTypeInferred();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test2931() throws Throwable {
    FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents((Node) null);
    functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(""com.google.javascript.jscomp.FunctionTypeBuilder$ExtendedTypeValidator"");
    Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
    functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Closure_41b/src/com/google/javascript/jscomp/FunctionTypeBuilder/AstFunctionContents.java
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test3032() throws Throwable {
    FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents((Node) null);
    Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Closure_41b/src/com/google/javascript/jscomp/FunctionTypeBuilder/AstFunctionContents.java
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test3033() throws Throwable {
    FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents((Node) null);
    Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
    functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Closure_41b/src/com/google/javascript/jscomp/FunctionTypeBuilder/AstFunctionContents.java
com.google.javascript.jscomp.FunctionTypeBuilder,@Test(timeout = 4000)
public void test3134() throws Throwable {
    FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents((Node) null);
    functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(""B#p/>yftG\""8Q{AI"");
    functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(""B#p/>yftG\""8Q{AI"");
    functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Closure_41b/src/com/google/javascript/jscomp/FunctionTypeBuilder/AstFunctionContents.java
