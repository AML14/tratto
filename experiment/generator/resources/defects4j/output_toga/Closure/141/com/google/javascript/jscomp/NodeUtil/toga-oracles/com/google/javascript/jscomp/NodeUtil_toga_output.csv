project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertEquals(""msg.unterminated.re.lit"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test0001,"public void test0001() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertEquals(40, functionNode0.getCharno());
}",0,
project,0,test0002,"public void test0002() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0003,"public void test0003() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertEquals(122, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test0004,"public void test0004() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertEquals(40, functionNode0.getLineno());
}",0,
project,0,test0015,"public void test0015() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.getPrototypePropertyName(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test0026,"public void test0026() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0037,"public void test0037() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsCall(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0038,"public void test0038() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsCall(node0);
    assertEquals(122, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test0049,"public void test0049() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.containsFunctionDeclaration((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil$MatchNodeType"", e);
    }
}",0,
project,0,test00510,"public void test00510() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 10);
    assertEquals(122, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test00511,"public void test00511() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 10);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00612,"public void test00612() throws Throwable {
    Node node0 = new Node(106, 2546, 106);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test00713,"public void test00713() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 26);
    assertEquals(122, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test00714,"public void test00714() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 26);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00815,"public void test00815() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 7);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test00816,"public void test00816() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 7);
    assertEquals(122, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test00917,"public void test00917() throws Throwable {
    Node node0 = Node.newString(74, ""kjG`uQN$"");
    int int0 = NodeUtil.getNameReferenceCount(node0, ""kjG`uQN$"");
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test01018,"public void test01018() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.getFunctionBody((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test01119,"public void test01119() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertEquals(122, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test01120,"public void test01120() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01221,"public void test01221() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertEquals(122, node0.getType());
}",0,
project,0,test01222,"public void test01222() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01223,"public void test01223() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertEquals(130, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test01324,"public void test01324() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""undefined"", 90, 8292);
    assertEquals(38, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test01325,"public void test01325() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""undefined"", 90, 8292);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals(4095, node0.getCharno());
}",0,
project,0,test01326,"public void test01326() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""undefined"", 90, 8292);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test01327,"public void test01327() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""undefined"", 90, 8292);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals(90, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test01428,"public void test01428() throws Throwable {
    Node node0 = Node.newNumber(0.0, (-1374), (-1374));
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01529,"public void test01529() throws Throwable {
    Node node0 = Node.newString("";&i@aFpy"");
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test01630,"public void test01630() throws Throwable {
    Node node0 = Node.newString(41, ""$$constant"");
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test01731,"public void test01731() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01832,"public void test01832() throws Throwable {
    Node node0 = new Node(44);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01933,"public void test01933() throws Throwable {
    Node node0 = Node.newString(""?85"");
    Node node1 = new Node(47, node0, node0, node0, 1013, 9);
    boolean boolean0 = NodeUtil.getBooleanValue(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02034,"public void test02034() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02135,"public void test02135() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test02236,"public void test02236() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    assertEquals(122, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test02237,"public void test02237() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test02338,"public void test02338() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    // Undeclared exception!
    try {
        NodeUtil.getBooleanValue(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Non-literal value: GET_REF 65
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test02439,"public void test02439() throws Throwable {
    Node node0 = Node.newString("""");
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}",0,
project,0,test02540,"public void test02540() throws Throwable {
    Node node0 = Node.newNumber(2281.19352130022);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test02641,"public void test02641() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""NaN"", 65279, 99);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals(99, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test02642,"public void test02642() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""NaN"", 65279, 99);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}",1,
project,0,test02643,"public void test02643() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""NaN"", 65279, 99);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals(65279, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test02744,"public void test02744() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Infinity"", 26, (-3866));
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test02745,"public void test02745() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Infinity"", 26, (-3866));
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test02846,"public void test02846() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""UNKNOWN_TYPE"", 126, 126);
    // Undeclared exception!
    try {
        NodeUtil.getBooleanValue(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Non-literal value: NAME UNKNOWN_TYPE 126
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test02947,"public void test02947() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""<5Lec>rRW sIYTLuKR`"", (-4024), (-4024));
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""<5Lec>rRW sIYTLuKR`"", string0);
}",0,assertNotNull(string0)
project,0,test03048,"public void test03048() throws Throwable {
    Node node0 = new Node(44);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""true"", string0);
}",1,
project,0,test03149,"public void test03149() throws Throwable {
    Node node0 = Node.newNumber((double) 43);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""43"", string0);
}",0,assertNotNull(string0)
project,0,test03250,"public void test03250() throws Throwable {
    Node node0 = Node.newString(""iatH"");
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""iatH"", string0);
}",1,
project,0,test03351,"public void test03351() throws Throwable {
    Node node0 = new Node(15);
    Node node1 = new Node(41, node0);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(""null"", string0);
}",0,assertNotNull(string0)
project,0,test03452,"public void test03452() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""false"", string0);
}",1,
project,0,test03553,"public void test03553() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""undefined"", string0);
}",1,
project,0,test03654,"public void test03654() throws Throwable {
    Node node0 = new Node(108, 121, 125);
    String string0 = NodeUtil.getStringValue(node0);
    assertNull(string0);
}",1,
project,0,test03755,"public void test03755() throws Throwable {
    Node node0 = Node.newNumber(1312.17994775, 97, 97);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""1312.17994775"", string0);
}",1,
project,0,test03856,"public void test03856() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""REGEXP_TYPE"", 65500, 65500);
    Node node1 = new Node(1, node0, node0, node0, node0);
    NodeUtil.getFunctionName(node1, node0);
    assertEquals(65500, node0.getLineno());
}",0,
project,0,test03957,"public void test03957() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertEquals(115, node0.getLineno());
}",0,
project,0,test03958,"public void test03958() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertEquals(33, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test03959,"public void test03959() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertEquals(115, node0.getCharno());
}",0,
project,0,test03960,"public void test03960() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertTrue(node0.isUnscopedQualifiedName());
}",0,assertFalse(node0.isUnscopedQualifiedName())
project,0,test03961,"public void test03961() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test04062,"public void test04062() throws Throwable {
    Node node0 = Node.newNumber((-751.64));
    Node node1 = NodeUtil.newVarNode(""CwCrk$?)C&kUh&"", node0);
    String string0 = NodeUtil.getFunctionName(node1, node0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test04064,"public void test04064() throws Throwable {
    Node node0 = Node.newNumber((-751.64));
    Node node1 = NodeUtil.newVarNode(""CwCrk$?)C&kUh&"", node0);
    String string0 = NodeUtil.getFunctionName(node1, node0);
    assertEquals(118, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test04065,"public void test04065() throws Throwable {
    Node node0 = Node.newNumber((-751.64));
    Node node1 = NodeUtil.newVarNode(""CwCrk$?)C&kUh&"", node0);
    String string0 = NodeUtil.getFunctionName(node1, node0);
    assertFalse(node0.hasChildren());
}",0,assertTrue(node0.hasChildren())
project,0,test04166,"public void test04166() throws Throwable {
    Node node0 = new Node(29);
    // Undeclared exception!
    try {
        NodeUtil.isImmutableValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test04267,"public void test04267() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""th8"", linkedList0, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(1, functionNode0.getCharno());
}",0,"assertEquals(0, functionNode0.getCharno())"
project,0,test04268,"public void test04268() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""th8"", linkedList0, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(2, functionNode0.getLineno());
}",0,"assertEquals(0, functionNode0.getLineno())"
project,0,test04269,"public void test04269() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""th8"", linkedList0, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(""th8"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test04270,"public void test04270() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""th8"", linkedList0, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",1,
project,0,test04371,"public void test04371() throws Throwable {
    Node node0 = Node.newString(""stig"", (-60), (-1912371727));
    Node node1 = NodeUtil.newName(""NaN"", node0, ""O`J"");
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test04372,"public void test04372() throws Throwable {
    Node node0 = Node.newString(""stig"", (-60), (-1912371727));
    Node node1 = NodeUtil.newName(""NaN"", node0, ""O`J"");
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertEquals(38, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test04473,"public void test04473() throws Throwable {
    Node node0 = Node.newString(""-"");
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test04574,"public void test04574() throws Throwable {
    Node node0 = new Node(41, 41, 41);
    boolean boolean0 = NodeUtil.isImmutableValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test04675,"public void test04675() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.isLiteralValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test04776,"public void test04776() throws Throwable {
    Node node0 = new Node(111, 111, 111);
    Node node1 = new Node(44, node0, node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test04877,"public void test04877() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isImmutableValue(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test04978,"public void test04978() throws Throwable {
    Node node0 = new Node(665);
    Node node1 = NodeUtil.newName(""undefined"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test04979,"public void test04979() throws Throwable {
    Node node0 = new Node(665);
    Node node1 = NodeUtil.newName(""undefined"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(node1.isQualifiedName());
}",0,assertFalse(node1.isQualifiedName())
project,0,test05080,"public void test05080() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""Infinity"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test05081,"public void test05081() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""Infinity"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,
project,0,test05082,"public void test05082() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""Infinity"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertEquals(115, node1.getCharno());
}",0,
project,0,test05183,"public void test05183() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""-"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(96, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test05184,"public void test05184() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""-"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test05185,"public void test05185() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""-"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test05186,"public void test05186() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""-"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(96, node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test05287,"public void test05287() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = NodeUtil.isLiteralValue(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test05388,"public void test05388() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    assertEquals(""msg.unterminated.re.lit"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test05389,"public void test05389() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    assertEquals(25, functionNode0.getLineno());
}",0,"assertEquals(0, functionNode0.getLineno())"
project,0,test05390,"public void test05390() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    assertEquals(25, functionNode0.getCharno());
}",0,
project,0,test05391,"public void test05391() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isLiteralValue(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05492,"public void test05492() throws Throwable {
    Node node0 = Node.newNumber((double) 63);
    Node node1 = new Node(63, node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test05593,"public void test05593() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(9, 111, 49);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test05694,"public void test05694() throws Throwable {
    Node node0 = new Node(37);
    Locale locale0 = Locale.JAPANESE;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05795,"public void test05795() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(10, 10, 10);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test05896,"public void test05896() throws Throwable {
    Node node0 = new Node(11);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test05997,"public void test05997() throws Throwable {
    Node node0 = new Node(12, 12, 12);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test06098,"public void test06098() throws Throwable {
    Node node0 = new Node(13);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test06199,"public void test06199() throws Throwable {
    Node node0 = new Node(14);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test062100,"public void test062100() throws Throwable {
    Node node0 = new Node(15);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test063101,"public void test063101() throws Throwable {
    Node node0 = new Node(16);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test064102,"public void test064102() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(17);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test065103,"public void test065103() throws Throwable {
    Node node0 = new Node(18, 1923, 18);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test066104,"public void test066104() throws Throwable {
    Node node0 = new Node(19);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test067105,"public void test067105() throws Throwable {
    Node node0 = new Node(20);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test068106,"public void test068106() throws Throwable {
    Node node0 = new Node(21, 21, 21);
    Charset charset0 = Charset.defaultCharset();
    Set<String> set0 = charset0.aliases();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test069107,"public void test069107() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(22, 22, 22);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test070108,"public void test070108() throws Throwable {
    Node node0 = new Node(23);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test071109,"public void test071109() throws Throwable {
    Node node0 = new Node(72);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node1 = new Node(24, node0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test072110,"public void test072110() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(25, 25, 25);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test073111,"public void test073111() throws Throwable {
    Node node0 = new Node(26);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test074112,"public void test074112() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(27, 108, 27);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test075113,"public void test075113() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(28);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test076114,"public void test076114() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test077115,"public void test077115() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test078116,"public void test078116() throws Throwable {
    Node node0 = new Node(31);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test079117,"public void test079117() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test080118,"public void test080118() throws Throwable {
    Node node0 = new Node(34);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test081119,"public void test081119() throws Throwable {
    Node node0 = new Node(35);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test082120,"public void test082120() throws Throwable {
    Node node0 = new Node(36, 36, 36);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test083121,"public void test083121() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test083122,"public void test083122() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(96, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test083123,"public void test083123() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(96, node0.getCharno());
}",0,
project,0,test084124,"public void test084124() throws Throwable {
    Node node0 = Node.newNumber(2506.184938);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test085125,"public void test085125() throws Throwable {
    Node node0 = new Node(40, 40, 40);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test086126,"public void test086126() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(41, nodeArray0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test087127,"public void test087127() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test088128,"public void test088128() throws Throwable {
    Node node0 = new Node(43);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test089129,"public void test089129() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(44, 44, 80);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test090130,"public void test090130() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test091131,"public void test091131() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = Node.newString(33, ""j"", 13, 42);
    node1.addChildToBack(node0);
    Locale locale0 = Locale.JAPANESE;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test092132,"public void test092132() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""<e1K.gD2*cW$*"");
    Node node0 = NodeUtil.newQualifiedNameNode(""<e1K.gD2*cW$*"", 9, 2);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(2, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test092133,"public void test092133() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""<e1K.gD2*cW$*"");
    Node node0 = NodeUtil.newQualifiedNameNode(""<e1K.gD2*cW$*"", 9, 2);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(2, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test092134,"public void test092134() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""<e1K.gD2*cW$*"");
    Node node0 = NodeUtil.newQualifiedNameNode(""<e1K.gD2*cW$*"", 9, 2);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(9, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test092135,"public void test092135() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""<e1K.gD2*cW$*"");
    Node node0 = NodeUtil.newQualifiedNameNode(""<e1K.gD2*cW$*"", 9, 2);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test093136,"public void test093136() throws Throwable {
    Node node0 = new Node(125);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test094137,"public void test094137() throws Throwable {
    Node node0 = new Node(132, (-1412), 31);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test095138,"public void test095138() throws Throwable {
    Node node0 = new Node(125);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test096139,"public void test096139() throws Throwable {
    Node node0 = new Node(9);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test097140,"public void test097140() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test098141,"public void test098141() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test099142,"public void test099142() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test100143,"public void test100143() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test101144,"public void test101144() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test102145,"public void test102145() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test103146,"public void test103146() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test104147,"public void test104147() throws Throwable {
    Node node0 = new Node(17);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test105148,"public void test105148() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test106149,"public void test106149() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test107150,"public void test107150() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test108151,"public void test108151() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test109152,"public void test109152() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test110153,"public void test110153() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test111154,"public void test111154() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test112155,"public void test112155() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test113156,"public void test113156() throws Throwable {
    Node node0 = new Node(26);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test114157,"public void test114157() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test115158,"public void test115158() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test116159,"public void test116159() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test117160,"public void test117160() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test118161,"public void test118161() throws Throwable {
    Node node0 = new Node(31, 2, 2);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test119162,"public void test119162() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",1,
project,0,test120163,"public void test120163() throws Throwable {
    Node node0 = new Node(33);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test121164,"public void test121164() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test122165,"public void test122165() throws Throwable {
    Node node0 = new Node(35);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test123166,"public void test123166() throws Throwable {
    Node node0 = new Node(36);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test124167,"public void test124167() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test125168,"public void test125168() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test126169,"public void test126169() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(39);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test127170,"public void test127170() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(40);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test128171,"public void test128171() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test129172,"public void test129172() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test130173,"public void test130173() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test131174,"public void test131174() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test132175,"public void test132175() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test133176,"public void test133176() throws Throwable {
    Node node0 = new Node(46, 46, 46);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test134177,"public void test134177() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test135178,"public void test135178() throws Throwable {
    Node node0 = new Node(48);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test136179,"public void test136179() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test137180,"public void test137180() throws Throwable {
    Node node0 = new Node(50, 8198, 8198);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test138181,"public void test138181() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test139182,"public void test139182() throws Throwable {
    Node node0 = new Node(52);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test140183,"public void test140183() throws Throwable {
    Node node0 = new Node(53, 53, 53);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test141184,"public void test141184() throws Throwable {
    Node node0 = new Node(54);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test142185,"public void test142185() throws Throwable {
    Node node0 = new Node(55, 55, 55);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test143186,"public void test143186() throws Throwable {
    Node node0 = new Node(56);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test144187,"public void test144187() throws Throwable {
    Node node0 = new Node(57, 57, 57);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test145188,"public void test145188() throws Throwable {
    Node node0 = new Node(58);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test146189,"public void test146189() throws Throwable {
    Node node0 = new Node(59);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test147190,"public void test147190() throws Throwable {
    Node node0 = new Node(60, 60, 60);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test148191,"public void test148191() throws Throwable {
    Node node0 = new Node(61, 61, 61);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test149192,"public void test149192() throws Throwable {
    Node node0 = new Node(62);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test150193,"public void test150193() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test151194,"public void test151194() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test152195,"public void test152195() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test153196,"public void test153196() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test154197,"public void test154197() throws Throwable {
    Node node0 = Node.newString(67, ""(:X:|9=2_{3Nb, zov"", 77, 77);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test155198,"public void test155198() throws Throwable {
    Node node0 = new Node(68);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test156199,"public void test156199() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test157200,"public void test157200() throws Throwable {
    Node node0 = new Node(70);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test158201,"public void test158201() throws Throwable {
    Node node0 = new Node(71);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test159202,"public void test159202() throws Throwable {
    Node node0 = new Node(72, 72, 72);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test160203,"public void test160203() throws Throwable {
    Node node0 = new Node(73, 73, 73);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test161204,"public void test161204() throws Throwable {
    Node node0 = new Node(74, 74, 74);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test162205,"public void test162205() throws Throwable {
    Node node0 = new Node(75);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test163206,"public void test163206() throws Throwable {
    Node node0 = new Node(76);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test164207,"public void test164207() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test165208,"public void test165208() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test166209,"public void test166209() throws Throwable {
    Node node0 = new Node(79);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test167210,"public void test167210() throws Throwable {
    Node node0 = new Node(80);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test168211,"public void test168211() throws Throwable {
    Node node0 = new Node(81, 81, 81);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test169212,"public void test169212() throws Throwable {
    Node node0 = new Node(82);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test170213,"public void test170213() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(83);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test171214,"public void test171214() throws Throwable {
    Node node0 = new Node(84);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test172215,"public void test172215() throws Throwable {
    Node node0 = new Node(85);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test173216,"public void test173216() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test174217,"public void test174217() throws Throwable {
    Node node0 = new Node(87, 87, 87);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test175218,"public void test175218() throws Throwable {
    Node node0 = new Node(88);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test176219,"public void test176219() throws Throwable {
    Node node0 = new Node(89, 89, 89);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test177220,"public void test177220() throws Throwable {
    Node node0 = new Node(90, 90, 90);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test178221,"public void test178221() throws Throwable {
    Node node0 = new Node(91);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test179222,"public void test179222() throws Throwable {
    Node node0 = new Node(92);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test180223,"public void test180223() throws Throwable {
    Node node0 = new Node(94);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test181224,"public void test181224() throws Throwable {
    Node node0 = new Node(97, 97, 97);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test182225,"public void test182225() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test183226,"public void test183226() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test184227,"public void test184227() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test185228,"public void test185228() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test186229,"public void test186229() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test187230,"public void test187230() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test188231,"public void test188231() throws Throwable {
    Node node0 = new Node(104);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test189232,"public void test189232() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test190233,"public void test190233() throws Throwable {
    Node node0 = new Node(107);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test191234,"public void test191234() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test192235,"public void test192235() throws Throwable {
    Node node0 = new Node(109);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test193236,"public void test193236() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test194237,"public void test194237() throws Throwable {
    Node node0 = new Node(112);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test195238,"public void test195238() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test196239,"public void test196239() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test197240,"public void test197240() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}",1,
project,0,test198241,"public void test198241() throws Throwable {
    Node node0 = new Node(116);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test199242,"public void test199242() throws Throwable {
    Node node0 = new Node(117);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test200243,"public void test200243() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test201244,"public void test201244() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}",1,
project,0,test202245,"public void test202245() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test203246,"public void test203246() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test204247,"public void test204247() throws Throwable {
    Node node0 = new Node(128, 128, 128);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test205248,"public void test205248() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test206249,"public void test206249() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test207250,"public void test207250() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test208251,"public void test208251() throws Throwable {
    Node node0 = new Node(42);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test209252,"public void test209252() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test210253,"public void test210253() throws Throwable {
    Node node0 = new Node(44, 44, 44);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test211254,"public void test211254() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test212255,"public void test212255() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test213256,"public void test213256() throws Throwable {
    Node node0 = new Node(51, 51, (-1542));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test214257,"public void test214257() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test215258,"public void test215258() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test216259,"public void test216259() throws Throwable {
    Node node0 = new Node(83);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test217260,"public void test217260() throws Throwable {
    Node node0 = new Node(98);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",1,
project,0,test218261,"public void test218261() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test219262,"public void test219262() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}",1,
project,0,test220263,"public void test220263() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test221264,"public void test221264() throws Throwable {
    Node node0 = new Node(110);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test222265,"public void test222265() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test223266,"public void test223266() throws Throwable {
    Node node0 = new Node(123, 123, 123);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",1,
project,0,test224267,"public void test224267() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test225268,"public void test225268() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test226269,"public void test226269() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test227270,"public void test227270() throws Throwable {
    Node node0 = new Node(127, 127, 127);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test228271,"public void test228271() throws Throwable {
    Node node0 = new Node(129);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test229272,"public void test229272() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test229273,"public void test229273() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(130, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test230274,"public void test230274() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test231275,"public void test231275() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test231276,"public void test231276() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    assertEquals(46, functionNode0.getCharno());
}",0,"assertEquals(1, functionNode0.getCharno())"
project,0,test231277,"public void test231277() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    assertEquals(9, functionNode0.getLineno());
}",0,"assertEquals(0, functionNode0.getLineno())"
project,0,test231278,"public void test231278() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    assertEquals(""ak7@j&'.a"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test232279,"public void test232279() throws Throwable {
    Node node0 = new Node(37);
    node0.setIsNoSideEffectsCall();
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test233280,"public void test233280() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    Node node1 = new Node(95, node0, node0, 3161, 1);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test234281,"public void test234281() throws Throwable {
    Node node0 = new Node(72);
    // Undeclared exception!
    try {
        NodeUtil.constructorCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Expected NEW node, got ESCXMLTEXT
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test235282,"public void test235282() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    node0.setIsNoSideEffectsCall();
    boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test236283,"public void test236283() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test237284,"public void test237284() throws Throwable {
    Node node0 = new Node(30);
    Node node1 = NodeUtil.newName(""VIB7xvFE:N&2P;"", node0, ""VIB7xvFE:N&2P;"");
    node0.addChildToBack(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test237285,"public void test237285() throws Throwable {
    Node node0 = new Node(30);
    Node node1 = NodeUtil.newName(""VIB7xvFE:N&2P;"", node0, ""VIB7xvFE:N&2P;"");
    node0.addChildToBack(node1);
    boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test238286,"public void test238286() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.functionCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Expected CALL node, got VOID
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test239287,"public void test239287() throws Throwable {
    Node node0 = new Node(37);
    node0.setIsNoSideEffectsCall();
    boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test240288,"public void test240288() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newQualifiedNameNode(""5ryiY"", 1, 38);
    node0.addChildToFront(node1);
    assertEquals(38, node1.getCharno());
}",0,"assertEquals(0, node1.getCharno())"
project,0,test240289,"public void test240289() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newQualifiedNameNode(""5ryiY"", 1, 38);
    node0.addChildToFront(node1);
    assertEquals(1, node1.getLineno());
}",0,"assertEquals(0, node1.getLineno())"
project,0,test240290,"public void test240290() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newQualifiedNameNode(""5ryiY"", 1, 38);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test241291,"public void test241291() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node node1 = Node.newString(33, ""j"", 13, 42);
    node1.addChildToBack(node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    assertTrue(boolean0);
}",1,
project,0,test242292,"public void test242292() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test243293,"public void test243293() throws Throwable {
    Node node0 = new Node(97, 1718, 1718);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test244294,"public void test244294() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test245295,"public void test245295() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test246296,"public void test246296() throws Throwable {
    Node node0 = Node.newString(""ZbJUD]E?Xf2"");
    Node node1 = NodeUtil.newQualifiedNameNode(""ZbJUD]E?Xf2"", node0, ""ZbJUD]E?Xf2"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test246297,"public void test246297() throws Throwable {
    Node node0 = Node.newString(""ZbJUD]E?Xf2"");
    Node node1 = NodeUtil.newQualifiedNameNode(""ZbJUD]E?Xf2"", node0, ""ZbJUD]E?Xf2"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertTrue(node1.isQualifiedName());
}",0,
project,0,test247298,"public void test247298() throws Throwable {
    Node node0 = Node.newString(49, ""Unknown class name"", 31, 25);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test248299,"public void test248299() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test249300,"public void test249300() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test250301,"public void test250301() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test251302,"public void test251302() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test252303,"public void test252303() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test253304,"public void test253304() throws Throwable {
    Node node0 = new Node(32);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test254305,"public void test254305() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertEquals(33, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test254306,"public void test254306() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test254307,"public void test254307() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test255308,"public void test255308() throws Throwable {
    Node node0 = new Node(34);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test256309,"public void test256309() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test257310,"public void test257310() throws Throwable {
    Node node0 = new Node(36, 36, 36);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test258311,"public void test258311() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test259312,"public void test259312() throws Throwable {
    Node node0 = new Node(38);
    node0.putIntProp(43, 43);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test260313,"public void test260313() throws Throwable {
    Node node0 = new Node(36);
    Node node1 = NodeUtil.newName("""", node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add("""");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test260314,"public void test260314() throws Throwable {
    Node node0 = new Node(36);
    Node node1 = NodeUtil.newName("""", node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add("""");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertEquals(38, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test261315,"public void test261315() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test262316,"public void test262316() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""K"", node0);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test262317,"public void test262317() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""K"", node0);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertEquals(118, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test262318,"public void test262318() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""K"", node0);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertFalse(node0.hasMoreThanOneChild());
}",0,assertTrue(node0.hasMoreThanOneChild())
project,0,test263319,"public void test263319() throws Throwable {
    int int0 = NodeUtil.precedence(4);
    assertEquals(15, int0);
}",1,
project,0,test264320,"public void test264320() throws Throwable {
    int int0 = NodeUtil.precedence(10);
    assertEquals(6, int0);
}",0,
project,0,test265321,"public void test265321() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(5);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for goto (type 5)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test266322,"public void test266322() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(6);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ifeq (type 6)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test267323,"public void test267323() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(7);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ifne (type 7)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test268324,"public void test268324() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(8);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setname (type 8)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test269325,"public void test269325() throws Throwable {
    int int0 = NodeUtil.precedence(9);
    assertEquals(5, int0);
}",0,
project,0,test270326,"public void test270326() throws Throwable {
    int int0 = NodeUtil.precedence(11);
    assertEquals(7, int0);
}",0,
project,0,test271327,"public void test271327() throws Throwable {
    int int0 = NodeUtil.precedence(12);
    assertEquals(8, int0);
}",0,
project,0,test272328,"public void test272328() throws Throwable {
    int int0 = NodeUtil.precedence(13);
    assertEquals(8, int0);
}",0,
project,0,test273329,"public void test273329() throws Throwable {
    int int0 = NodeUtil.precedence(14);
    assertEquals(9, int0);
}",0,
project,0,test274330,"public void test274330() throws Throwable {
    int int0 = NodeUtil.precedence(15);
    assertEquals(9, int0);
}",0,
project,0,test275331,"public void test275331() throws Throwable {
    int int0 = NodeUtil.precedence(16);
    assertEquals(9, int0);
}",0,
project,0,test276332,"public void test276332() throws Throwable {
    int int0 = NodeUtil.precedence(17);
    assertEquals(9, int0);
}",0,
project,0,test277333,"public void test277333() throws Throwable {
    int int0 = NodeUtil.precedence(18);
    assertEquals(10, int0);
}",0,
project,0,test278334,"public void test278334() throws Throwable {
    int int0 = NodeUtil.precedence(19);
    assertEquals(10, int0);
}",0,
project,0,test279335,"public void test279335() throws Throwable {
    int int0 = NodeUtil.precedence(20);
    assertEquals(10, int0);
}",0,
project,0,test280336,"public void test280336() throws Throwable {
    int int0 = NodeUtil.precedence(21);
    assertEquals(11, int0);
}",0,
project,0,test281337,"public void test281337() throws Throwable {
    int int0 = NodeUtil.precedence(22);
    assertEquals(11, int0);
}",0,
project,0,test282338,"public void test282338() throws Throwable {
    int int0 = NodeUtil.precedence(23);
    assertEquals(12, int0);
}",0,
project,0,test283339,"public void test283339() throws Throwable {
    int int0 = NodeUtil.precedence(24);
    assertEquals(12, int0);
}",0,
project,0,test284340,"public void test284340() throws Throwable {
    int int0 = NodeUtil.precedence(25);
    assertEquals(12, int0);
}",0,
project,0,test285341,"public void test285341() throws Throwable {
    int int0 = NodeUtil.precedence(26);
    assertEquals(13, int0);
}",0,
project,0,test286342,"public void test286342() throws Throwable {
    int int0 = NodeUtil.precedence(27);
    assertEquals(13, int0);
}",0,
project,0,test287343,"public void test287343() throws Throwable {
    int int0 = NodeUtil.precedence(28);
    assertEquals(13, int0);
}",0,
project,0,test288344,"public void test288344() throws Throwable {
    int int0 = NodeUtil.precedence(29);
    assertEquals(13, int0);
}",0,
project,0,test289345,"public void test289345() throws Throwable {
    int int0 = NodeUtil.precedence(30);
    assertEquals(13, int0);
}",0,
project,0,test290346,"public void test290346() throws Throwable {
    int int0 = NodeUtil.precedence(31);
    assertEquals(13, int0);
}",0,
project,0,test291347,"public void test291347() throws Throwable {
    int int0 = NodeUtil.precedence(32);
    assertEquals(13, int0);
}",0,
project,0,test292348,"public void test292348() throws Throwable {
    int int0 = NodeUtil.precedence(33);
    assertEquals(15, int0);
}",0,
project,0,test293349,"public void test293349() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setprop (type 34)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test294350,"public void test294350() throws Throwable {
    int int0 = NodeUtil.precedence(35);
    assertEquals(15, int0);
}",0,
project,0,test295351,"public void test295351() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(36);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setelem (type 36)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test296352,"public void test296352() throws Throwable {
    int int0 = NodeUtil.precedence(37);
    assertEquals(15, int0);
}",0,
project,0,test297353,"public void test297353() throws Throwable {
    int int0 = NodeUtil.precedence(38);
    assertEquals(15, int0);
}",0,
project,0,test298354,"public void test298354() throws Throwable {
    int int0 = NodeUtil.precedence(39);
    assertEquals(15, int0);
}",0,
project,0,test299355,"public void test299355() throws Throwable {
    int int0 = NodeUtil.precedence(40);
    assertEquals(15, int0);
}",0,
project,0,test300356,"public void test300356() throws Throwable {
    int int0 = NodeUtil.precedence(41);
    assertEquals(15, int0);
}",0,
project,0,test301357,"public void test301357() throws Throwable {
    int int0 = NodeUtil.precedence(42);
    assertEquals(15, int0);
}",0,
project,0,test302358,"public void test302358() throws Throwable {
    int int0 = NodeUtil.precedence(43);
    assertEquals(15, int0);
}",0,
project,0,test303359,"public void test303359() throws Throwable {
    int int0 = NodeUtil.precedence(44);
    assertEquals(15, int0);
}",0,
project,0,test304360,"public void test304360() throws Throwable {
    int int0 = NodeUtil.precedence(45);
    assertEquals(8, int0);
}",0,
project,0,test305361,"public void test305361() throws Throwable {
    int int0 = NodeUtil.precedence(46);
    assertEquals(8, int0);
}",0,
project,0,test306362,"public void test306362() throws Throwable {
    int int0 = NodeUtil.precedence(47);
    assertEquals(15, int0);
}",0,
project,0,test307363,"public void test307363() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for bindname (type 48)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test308364,"public void test308364() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for throw (type 49)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test309365,"public void test309365() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=50> (type 50)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test310366,"public void test310366() throws Throwable {
    int int0 = NodeUtil.precedence(51);
    assertEquals(9, int0);
}",0,
project,0,test311367,"public void test311367() throws Throwable {
    int int0 = NodeUtil.precedence(52);
    assertEquals(9, int0);
}",0,
project,0,test312368,"public void test312368() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=53> (type 53)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test313369,"public void test313369() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(54);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for getvar (type 54)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test314370,"public void test314370() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(55);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setvar (type 55)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test315371,"public void test315371() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=56> (type 56)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test316372,"public void test316372() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(57);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=57> (type 57)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test317373,"public void test317373() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=58> (type 58)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test318374,"public void test318374() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=59> (type 59)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test319375,"public void test319375() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=60> (type 60)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test320376,"public void test320376() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(61);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for thisfn (type 61)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test321377,"public void test321377() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=62> (type 62)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test322378,"public void test322378() throws Throwable {
    int int0 = NodeUtil.precedence(63);
    assertEquals(15, int0);
}",0,
project,0,test323379,"public void test323379() throws Throwable {
    int int0 = NodeUtil.precedence(64);
    assertEquals(15, int0);
}",0,
project,0,test324380,"public void test324380() throws Throwable {
    int int0 = NodeUtil.precedence(65);
    assertEquals(15, int0);
}",0,
project,0,test325381,"public void test325381() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=66> (type 66)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test326382,"public void test326382() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=67> (type 67)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test327383,"public void test327383() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=68> (type 68)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test328384,"public void test328384() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(69);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ref_special (type 69)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test329385,"public void test329385() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=70> (type 70)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test330386,"public void test330386() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(71);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=71> (type 71)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test331387,"public void test331387() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=72> (type 72)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test332388,"public void test332388() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=73> (type 73)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test333389,"public void test333389() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(74);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=74> (type 74)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test334390,"public void test334390() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=75> (type 75)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test335391,"public void test335391() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 76);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=76> (type 76)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test336392,"public void test336392() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for try (type 77)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test337393,"public void test337393() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(78);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for semi (type 78)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test338394,"public void test338394() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lb (type 79)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test339395,"public void test339395() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(80);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rb (type 80)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test340396,"public void test340396() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lc (type 81)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test341397,"public void test341397() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rc (type 82)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test342398,"public void test342398() throws Throwable {
    int int0 = NodeUtil.precedence(83);
    assertEquals(15, int0);
}",0,
project,0,test343399,"public void test343399() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(84);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rp (type 84)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test344400,"public void test344400() throws Throwable {
    int int0 = NodeUtil.precedence(85);
    assertEquals(0, int0);
}",0,
project,0,test345401,"public void test345401() throws Throwable {
    int int0 = NodeUtil.precedence(86);
    assertEquals(1, int0);
}",0,
project,0,test346402,"public void test346402() throws Throwable {
    int int0 = NodeUtil.precedence(87);
    assertEquals(1, int0);
}",0,
project,0,test347403,"public void test347403() throws Throwable {
    int int0 = NodeUtil.precedence(88);
    assertEquals(1, int0);
}",0,
project,0,test348404,"public void test348404() throws Throwable {
    int int0 = NodeUtil.precedence(89);
    assertEquals(1, int0);
}",0,
project,0,test349405,"public void test349405() throws Throwable {
    int int0 = NodeUtil.precedence(90);
    assertEquals(1, int0);
}",0,
project,0,test350406,"public void test350406() throws Throwable {
    int int0 = NodeUtil.precedence(91);
    assertEquals(1, int0);
}",0,
project,0,test351407,"public void test351407() throws Throwable {
    int int0 = NodeUtil.precedence(92);
    assertEquals(1, int0);
}",0,
project,0,test352408,"public void test352408() throws Throwable {
    int int0 = NodeUtil.precedence(93);
    assertEquals(1, int0);
}",0,
project,0,test353409,"public void test353409() throws Throwable {
    int int0 = NodeUtil.precedence(94);
    assertEquals(1, int0);
}",0,
project,0,test354410,"public void test354410() throws Throwable {
    int int0 = NodeUtil.precedence(95);
    assertEquals(1, int0);
}",0,
project,0,test355411,"public void test355411() throws Throwable {
    int int0 = NodeUtil.precedence(96);
    assertEquals(1, int0);
}",0,
project,0,test356412,"public void test356412() throws Throwable {
    int int0 = NodeUtil.precedence(97);
    assertEquals(1, int0);
}",0,
project,0,test357413,"public void test357413() throws Throwable {
    int int0 = NodeUtil.precedence(98);
    assertEquals(2, int0);
}",0,
project,0,test358414,"public void test358414() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(99);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for colon (type 99)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test359415,"public void test359415() throws Throwable {
    int int0 = NodeUtil.precedence(100);
    assertEquals(3, int0);
}",0,
project,0,test360416,"public void test360416() throws Throwable {
    int int0 = NodeUtil.precedence(101);
    assertEquals(4, int0);
}",0,
project,0,test361417,"public void test361417() throws Throwable {
    int int0 = NodeUtil.precedence(102);
    assertEquals(13, int0);
}",0,
project,0,test362418,"public void test362418() throws Throwable {
    int int0 = NodeUtil.precedence(103);
    assertEquals(13, int0);
}",0,
project,0,test363419,"public void test363419() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for dot (type 104)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test364420,"public void test364420() throws Throwable {
    int int0 = NodeUtil.precedence(105);
    assertEquals(15, int0);
}",0,
project,0,test365421,"public void test365421() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for export (type 106)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test366422,"public void test366422() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for import (type 107)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test367423,"public void test367423() throws Throwable {
    int int0 = NodeUtil.precedence(108);
    assertEquals(15, int0);
}",0,
project,0,test368424,"public void test368424() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for else (type 109)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test369425,"public void test369425() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for switch (type 110)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test370426,"public void test370426() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for case (type 111)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test371427,"public void test371427() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(112);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for default (type 112)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test372428,"public void test372428() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for while (type 113)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test373429,"public void test373429() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for do (type 114)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test374430,"public void test374430() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for for (type 115)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test375431,"public void test375431() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for break (type 116)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test376432,"public void test376432() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for continue (type 117)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test377433,"public void test377433() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for var (type 118)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test378434,"public void test378434() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for with (type 119)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test379435,"public void test379435() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for catch (type 120)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test380436,"public void test380436() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for finally (type 121)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test381437,"public void test381437() throws Throwable {
    int int0 = NodeUtil.precedence(122);
    assertEquals(13, int0);
}",0,
project,0,test382438,"public void test382438() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(123);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for reserved (type 123)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test383439,"public void test383439() throws Throwable {
    int int0 = NodeUtil.precedence(124);
    assertEquals(15, int0);
}",0,
project,0,test384440,"public void test384440() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((-2093));
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=-2093> (type -2093)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test385441,"public void test385441() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(9);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test386442,"public void test386442() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(101);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test387443,"public void test387443() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(11);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test388444,"public void test388444() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(23);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test389445,"public void test389445() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(100);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test390446,"public void test390446() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(74);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test391447,"public void test391447() throws Throwable {
    Node node0 = new Node(87, 87, 87);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(9, int0);
}",0,"assertEquals(1, int0)"
project,0,test392448,"public void test392448() throws Throwable {
    Node node0 = new Node(77);
    // Undeclared exception!
    try {
        NodeUtil.getOpFromAssignmentOp(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Not an assiment op
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test393449,"public void test393449() throws Throwable {
    Node node0 = new Node(88);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(10, int0);
}",0,"assertEquals(1, int0)"
project,0,test394450,"public void test394450() throws Throwable {
    Node node0 = new Node(89);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(11, int0);
}",0,"assertEquals(1, int0)"
project,0,test395451,"public void test395451() throws Throwable {
    Node node0 = new Node(90);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(18, int0);
}",0,"assertEquals(1, int0)"
project,0,test396452,"public void test396452() throws Throwable {
    Node node0 = new Node(91, 91, 90);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(19, int0);
}",0,"assertEquals(1, int0)"
project,0,test397453,"public void test397453() throws Throwable {
    Node node0 = new Node(92);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(20, int0);
}",0,"assertEquals(1, int0)"
project,0,test398454,"public void test398454() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(21, int0);
}",0,"assertEquals(1, int0)"
project,0,test399455,"public void test399455() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(22, int0);
}",0,"assertEquals(1, int0)"
project,0,test400456,"public void test400456() throws Throwable {
    Node node0 = new Node(95);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(23, int0);
}",0,"assertEquals(1, int0)"
project,0,test401457,"public void test401457() throws Throwable {
    Node node0 = new Node(96);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(24, int0);
}",0,"assertEquals(1, int0)"
project,0,test402458,"public void test402458() throws Throwable {
    Node node0 = new Node(97, 1718, 1718);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(25, int0);
}",0,"assertEquals(1, int0)"
project,0,test403459,"public void test403459() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test404460,"public void test404460() throws Throwable {
    Node node0 = new Node(130);
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test405461,"public void test405461() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = Node.newString(33, ""j"", 13, 42);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test406462,"public void test406462() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test407463,"public void test407463() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    node0.addChildToFront(node0);
    boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test408464,"public void test408464() throws Throwable {
    Node node0 = new Node(77);
    Node node1 = NodeUtil.newQualifiedNameNode("".prototype"", node0, "".prototype"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertNotNull(node2);
}",0,
project,0,test408465,"public void test408465() throws Throwable {
    Node node0 = new Node(77);
    Node node1 = NodeUtil.newQualifiedNameNode("".prototype"", node0, "".prototype"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertTrue(node2.isUnscopedQualifiedName());
}",0,assertFalse(node2.isUnscopedQualifiedName())
project,0,test409466,"public void test409466() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test410467,"public void test410467() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isNew(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test411468,"public void test411468() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.isNew(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test412469,"public void test412469() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newName("">>=Oh38f3Z<hEGe<"", node0, "">>=Oh38f3Z<hEGe<"");
    Node node2 = new Node(30, node0, node1, node0, node1);
    Node node3 = NodeUtil.getAssignedValue(node1);
    assertNull(node3);
}",0,
project,0,test413470,"public void test413470() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""VDFq_J#>ulR_GA"", 89, 1221);
    Node node1 = new Node(118, node0);
    Node node2 = NodeUtil.getAssignedValue(node0);
    assertEquals(1221, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test413471,"public void test413471() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""VDFq_J#>ulR_GA"", 89, 1221);
    Node node1 = new Node(118, node0);
    Node node2 = NodeUtil.getAssignedValue(node0);
    assertNull(node2);
}",0,
project,0,test413472,"public void test413472() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""VDFq_J#>ulR_GA"", 89, 1221);
    Node node1 = new Node(118, node0);
    Node node2 = NodeUtil.getAssignedValue(node0);
    assertEquals(89, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test414473,"public void test414473() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isVarDeclaration(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test415474,"public void test415474() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isVarDeclaration(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test415475,"public void test415475() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isVarDeclaration(node1);
    assertEquals(1, node1.getCharno());
}",0,
project,0,test415476,"public void test415476() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isVarDeclaration(node1);
    assertEquals(12, node1.getLineno());
}",0,"assertEquals(0, node1.getLineno())"
project,0,test416477,"public void test416477() throws Throwable {
    Node node0 = Node.newString("""");
    Node node1 = NodeUtil.newVarNode("""", node0);
    Node node2 = NodeUtil.newQualifiedNameNode("""", node1, """");
    node1.addChildToFront(node2);
    boolean boolean0 = NodeUtil.isVarDeclaration(node2);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test416478,"public void test416478() throws Throwable {
    Node node0 = Node.newString("""");
    Node node1 = NodeUtil.newVarNode("""", node0);
    Node node2 = NodeUtil.newQualifiedNameNode("""", node1, """");
    node1.addChildToFront(node2);
    boolean boolean0 = NodeUtil.isVarDeclaration(node2);
    assertFalse(node0.hasOneChild());
}",0,assertFalse(node0.hasOneChild())
project,0,test417479,"public void test417479() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isString(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test418480,"public void test418480() throws Throwable {
    Node node0 = Node.newString(""undgfined"", 108, 34);
    boolean boolean0 = NodeUtil.isString(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test419481,"public void test419481() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    assertFalse(boolean0);
}",0,
project,0,test420482,"public void test420482() throws Throwable {
    Node node0 = Node.newString(86, ""}9 #'w!Aq|"", 95, 3165);
    Node node1 = NodeUtil.newExpr(node0);
    // Undeclared exception!
    try {
        NodeUtil.isPrototypePropertyDeclaration(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test421483,"public void test421483() throws Throwable {
    Node node0 = Node.newNumber((double) 43);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprAssign(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test421484,"public void test421484() throws Throwable {
    Node node0 = Node.newNumber((double) 43);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprAssign(node1);
    assertEquals(130, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test422485,"public void test422485() throws Throwable {
    Node node0 = new Node(86, 86, 86);
    boolean boolean0 = NodeUtil.isAssign(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test423486,"public void test423486() throws Throwable {
    Node node0 = Node.newString((-1830), ""!="", (-1830), (-1830));
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test424487,"public void test424487() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test425488,"public void test425488() throws Throwable {
    Node node0 = new Node(73, 73, 73);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test426489,"public void test426489() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test427490,"public void test427490() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""5Z~p\""!~"", node0, ""5Z~p\""!~"");
    node0.addChildrenToFront(node1);
    assertEquals(115, node1.getCharno());
}",0,
project,0,test427491,"public void test427491() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""5Z~p\""!~"", node0, ""5Z~p\""!~"");
    node0.addChildrenToFront(node1);
    Node node2 = Node.newString(""5Z~p\""!~"", 40, 29);
    node0.addChildToBack(node2);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test428492,"public void test428492() throws Throwable {
    Node node0 = new Node(121);
    node0.setType(113);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test429493,"public void test429493() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test430494,"public void test430494() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test431495,"public void test431495() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test432496,"public void test432496() throws Throwable {
    Node node0 = Node.newString(113, ""rzt~p0s"");
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}",0,
project,0,test433497,"public void test433497() throws Throwable {
    Node node0 = new Node(115);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}",0,
project,0,test434498,"public void test434498() throws Throwable {
    Node node0 = Node.newString(114, ""bM(~_-_iESpMr"", 114, 114);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}",0,
project,0,test435499,"public void test435499() throws Throwable {
    Node node0 = new Node(110);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}",0,
project,0,test436500,"public void test436500() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test437501,"public void test437501() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test438502,"public void test438502() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    Node node1 = new Node(108, node0, node0, node0, 1964, 85);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test439503,"public void test439503() throws Throwable {
    Node node0 = new Node(110);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test440504,"public void test440504() throws Throwable {
    Node node0 = Node.newString(111, ""bM(~_-_iESpMr"", 111, 111);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test441505,"public void test441505() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test442506,"public void test442506() throws Throwable {
    Node node0 = new Node(113, 113, 113);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test443507,"public void test443507() throws Throwable {
    Node node0 = Node.newString(114, ""bM(~_-_iESpMr"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test444508,"public void test444508() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = new Node(115, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test445509,"public void test445509() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test446510,"public void test446510() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Z"", 133, 133);
    Node node1 = new Node(120, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test446511,"public void test446511() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Z"", 133, 133);
    Node node1 = new Node(120, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertEquals(133, node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test446512,"public void test446512() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Z"", 133, 133);
    Node node1 = new Node(120, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertEquals(133, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test447513,"public void test447513() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = new Node(126, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test448514,"public void test448514() throws Throwable {
    Node node0 = new Node(106, 106, 106);
    node0.setType(77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test449515,"public void test449515() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = new Node(108, (-563), 47);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test450516,"public void test450516() throws Throwable {
    Node node0 = new Node(111);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test451517,"public void test451517() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test452518,"public void test452518() throws Throwable {
    Node node0 = new Node(113, 113, 113);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test453519,"public void test453519() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test454520,"public void test454520() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test455521,"public void test455521() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test456522,"public void test456522() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test457523,"public void test457523() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    Node node1 = new Node(119, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test458524,"public void test458524() throws Throwable {
    Node node0 = new Node((-2705), (byte) (-13), (-1600));
    Node node1 = new Node(114, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test459525,"public void test459525() throws Throwable {
    Node node0 = new Node(108, 108, 2734);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test460526,"public void test460526() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test461527,"public void test461527() throws Throwable {
    Node node0 = new Node(106, 106, 106);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""rztO~p0s"", node0, ""rztO~p0s"");
    node0.addChildrenToFront(node1);
    assertEquals(106, node1.getCharno());
}",0,
project,0,test461528,"public void test461528() throws Throwable {
    Node node0 = new Node(106, 106, 106);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""rztO~p0s"", node0, ""rztO~p0s"");
    node0.addChildrenToFront(node1);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test462529,"public void test462529() throws Throwable {
    Node node0 = new Node(120);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test463530,"public void test463530() throws Throwable {
    Node node0 = new Node(110);
    Node node1 = new Node(110, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test464531,"public void test464531() throws Throwable {
    Node node0 = new Node(108, 121, 125);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}",0,"assertEquals(node0, node1)"
project,0,test465532,"public void test465532() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // malformed 'for' statement FOR 5Z~p\""!~ 115
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test466533,"public void test466533() throws Throwable {
    Node node0 = new Node(109);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ELSE does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test467534,"public void test467534() throws Throwable {
    Node node0 = new Node(110);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // SWITCH does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test468535,"public void test468535() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}",0,"assertEquals(node0, node1)"
project,0,test469536,"public void test469536() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // DEFAULT 112 does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test470537,"public void test470537() throws Throwable {
    Node node0 = new Node(113, 37, 113);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}",0,
project,0,test471538,"public void test471538() throws Throwable {
    Node node0 = new Node(114);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}",0,"assertEquals(node0, node1)"
project,0,test472539,"public void test472539() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // VOID does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test473540,"public void test473540() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""5Z~p\""!~"", node0, ""5Z~p\""!~"");
    node0.addChildrenToFront(node1);
    Node node2 = Node.newString(""5Z~p\""!~"", 40, 29);
    node0.addChildToBack(node2);
    node0.addChildrenToBack(node0);
    Node node3 = NodeUtil.getConditionExpression(node0);
    assertNull(node3);
}",0,
project,0,test474541,"public void test474541() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = Node.newString((-554), ""C"");
    node0.addChildrenToFront(node1);
    Node node2 = NodeUtil.newName(""5Z~p\""!~"", node0, ""5Z~p\""!~"");
    node0.addChildrenToFront(node2);
    Node node3 = Node.newString(""5Z~p\""!~"", 40, 29);
    node0.addChildToBack(node3);
    node0.addChildrenToBack(node0);
    Node node4 = NodeUtil.getConditionExpression(node0);
    assertNotSame(node0, node4);
}",0,
project,0,test475542,"public void test475542() throws Throwable {
    Node node0 = Node.newString(132, ""undgfined"");
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test476543,"public void test476543() throws Throwable {
    Node node0 = new Node(111);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test477544,"public void test477544() throws Throwable {
    Node node0 = new Node(125);
    node0.addChildToBack(node0);
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test478545,"public void test478545() throws Throwable {
    Node node0 = new Node(105, 103, 103);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test479546,"public void test479546() throws Throwable {
    Node node0 = new Node(126);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.isFunctionAnonymous(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test480547,"public void test480547() throws Throwable {
    Node node0 = new Node(125);
    Node node1 = new Node(132, (-1412), 31);
    node1.addChildToBack(node0);
    boolean boolean0 = NodeUtil.isStatement(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test481548,"public void test481548() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test482549,"public void test482549() throws Throwable {
    Node node0 = Node.newNumber((double) 72);
    Node node1 = NodeUtil.newName("""", node0);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test483550,"public void test483550() throws Throwable {
    Node node0 = Node.newString(116, ""oS"", 116, 116);
    Node node1 = NodeUtil.newQualifiedNameNode(""oS"", node0, ""oS"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test483551,"public void test483551() throws Throwable {
    Node node0 = Node.newString(116, ""oS"", 116, 116);
    Node node1 = NodeUtil.newQualifiedNameNode(""oS"", node0, ""oS"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,
project,0,test483552,"public void test483552() throws Throwable {
    Node node0 = Node.newString(116, ""oS"", 116, 116);
    Node node1 = NodeUtil.newQualifiedNameNode(""oS"", node0, ""oS"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertEquals(116, node1.getCharno());
}",0,
project,0,test484553,"public void test484553() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""JSR"", node0, ""JSR"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test485554,"public void test485554() throws Throwable {
    boolean boolean0 = NodeUtil.isLabelName((Node) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test486555,"public void test486555() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isLabelName(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test487556,"public void test487556() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertEquals(12, node1.getLineno());
}",0,"assertEquals(0, node1.getLineno())"
project,0,test487557,"public void test487557() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertEquals(1, node1.getCharno());
}",0,
project,0,test487558,"public void test487558() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test488559,"public void test488559() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    node0.setType(77);
    boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test489560,"public void test489560() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""AiD,'e~S~8<Dk"", node0, ""AiD,'e~S~8<Dk"");
    node0.addChildrenToFront(node1);
    assertEquals(117, node1.getCharno());
}",0,
project,0,test489561,"public void test489561() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""AiD,'e~S~8<Dk"", node0, ""AiD,'e~S~8<Dk"");
    node0.addChildrenToFront(node1);
    Node node2 = new Node(7, 29, 24);
    node0.addChildToBack(node2);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
    assertTrue(boolean0);
}",0,
project,0,test490562,"public void test490562() throws Throwable {
    Node node0 = Node.newString(115, ""5B~p\""!s"", 115, 115);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""5B~p\""!s"", node0, ""5B~p\""!s"");
    node0.addChildrenToFront(node1);
    Node node2 = Node.newString(""5B~p\""!s"", 40, 29);
    node0.addChildToBack(node2);
    node0.addChildrenToBack(node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node2);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: STRING 5B~p\""!s 40 of TRY 5B~p\""!s 115
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test491563,"public void test491563() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""S{stFDph!"", node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // node is not a child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test492564,"public void test492564() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""S{stFDph!"", node0);
    node1.addChildToBack(node1);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // node is not a child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test493565,"public void test493565() throws Throwable {
    Node node0 = new Node(125);
    Node node1 = new Node(3220);
    NodeUtil.removeChild(node1, node0);
    assertEquals(125, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test494566,"public void test494566() throws Throwable {
    Node node0 = new Node(126);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: LABEL of LABEL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test495567,"public void test495567() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = new Node(126, node0, node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test496568,"public void test496568() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: FOR 115 of FOR 115
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test497569,"public void test497569() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test498570,"public void test498570() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    Node node1 = new Node(40, node0, node0, node0, 49, 45);
    boolean boolean0 = NodeUtil.tryMergeBlock(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test499571,"public void test499571() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isCall(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test500572,"public void test500572() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.isCall(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test501573,"public void test501573() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.isVarArgsFunction(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test502574,"public void test502574() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isThis(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test503575,"public void test503575() throws Throwable {
    Node node0 = new Node(42);
    boolean boolean0 = NodeUtil.isThis(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test504576,"public void test504576() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test505577,"public void test505577() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminEted.re.it"", linkedList0, node0, 34, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(""msg.unterminEted.re.it"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test505578,"public void test505578() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminEted.re.it"", linkedList0, node0, 34, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test505579,"public void test505579() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminEted.re.it"", linkedList0, node0, 34, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(40, functionNode0.getCharno());
}",0,"assertEquals(0, functionNode0.getCharno())"
project,0,test505580,"public void test505580() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminEted.re.it"", linkedList0, node0, 34, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(34, functionNode0.getLineno());
}",0,"assertEquals(1, functionNode0.getLineno())"
project,0,test506581,"public void test506581() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test506582,"public void test506582() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(""ak7@j&'.a"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test506583,"public void test506583() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(46, functionNode0.getCharno());
}",0,
project,0,test506584,"public void test506584() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(9, functionNode0.getLineno());
}",0,"assertEquals(0, functionNode0.getLineno())"
project,0,test507585,"public void test507585() throws Throwable {
    Node node0 = new Node(117);
    boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test508586,"public void test508586() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    // Undeclared exception!
    try {
        NodeUtil.isAnonymousFunction(functionNode0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test509587,"public void test509587() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(426, functionNode0.getCharno());
}",0,"assertEquals(1, functionNode0.getCharno())"
project,0,test509588,"public void test509588() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test509589,"public void test509589() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(""ak7@j&'.a"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test509590,"public void test509590() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(2056, functionNode0.getLineno());
}",0,"assertEquals(0, functionNode0.getLineno())"
project,0,test510591,"public void test510591() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(40, functionNode0.getLineno());
}",0,"assertEquals(0, functionNode0.getLineno())"
project,0,test510592,"public void test510592() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test510593,"public void test510593() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(""msg.unterminated.re.lit"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test510594,"public void test510594() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(40, functionNode0.getCharno());
}",0,
project,0,test511595,"public void test511595() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test512596,"public void test512596() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = Node.newString(33, ""j"", 13, 42);
    node1.addChildToBack(node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test513597,"public void test513597() throws Throwable {
    Node node0 = new Node(86);
    boolean boolean0 = NodeUtil.isLhs(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test514598,"public void test514598() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = NodeUtil.isLhs(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test515599,"public void test515599() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test516600,"public void test516600() throws Throwable {
    Node node0 = Node.newString(""MbtwtLoi"");
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test517604,"public void test517604() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    Node node1 = Node.newString(""msg.unterminated.re.lit"");
    boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test518605,"public void test518605() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(9);
    assertEquals(""|"", string0);
}",1,
project,0,test519606,"public void test519606() throws Throwable {
    String string0 = NodeUtil.opToStr(19);
    assertEquals("">>"", string0);
}",0,
project,0,test520607,"public void test520607() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(10);
    assertEquals(""^"", string0);
}",1,
project,0,test521608,"public void test521608() throws Throwable {
    String string0 = NodeUtil.opToStr(11);
    assertEquals(""&"", string0);
}",0,
project,0,test522609,"public void test522609() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(12);
    assertEquals(""=="", string0);
}",1,
project,0,test523610,"public void test523610() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(13);
    assertEquals(""!="", string0);
}",1,
project,0,test524611,"public void test524611() throws Throwable {
    String string0 = NodeUtil.opToStr(14);
    assertEquals(""<"", string0);
}",0,
project,0,test525612,"public void test525612() throws Throwable {
    String string0 = NodeUtil.opToStr(15);
    assertEquals(""<="", string0);
}",0,
project,0,test526613,"public void test526613() throws Throwable {
    String string0 = NodeUtil.opToStr(16);
    assertEquals("">"", string0);
}",0,
project,0,test527614,"public void test527614() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(17);
    assertEquals("">="", string0);
}",1,
project,0,test528615,"public void test528615() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(18);
    assertEquals(""<<"", string0);
}",1,
project,0,test529616,"public void test529616() throws Throwable {
    String string0 = NodeUtil.opToStr(20);
    assertEquals("">>>"", string0);
}",0,
project,0,test530617,"public void test530617() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(21);
    assertEquals(""+"", string0);
}",1,
project,0,test531618,"public void test531618() throws Throwable {
    String string0 = NodeUtil.opToStr(22);
    assertEquals(""-"", string0);
}",0,
project,0,test532619,"public void test532619() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(23);
    assertEquals(""*"", string0);
}",1,
project,0,test533620,"public void test533620() throws Throwable {
    String string0 = NodeUtil.opToStr(24);
    assertEquals(""/"", string0);
}",0,
project,0,test534621,"public void test534621() throws Throwable {
    String string0 = NodeUtil.opToStr(25);
    assertEquals(""%"", string0);
}",0,
project,0,test535622,"public void test535622() throws Throwable {
    String string0 = NodeUtil.opToStr(26);
    assertEquals(""!"", string0);
}",0,
project,0,test536623,"public void test536623() throws Throwable {
    String string0 = NodeUtil.opToStr(27);
    assertEquals(""~"", string0);
}",0,
project,0,test537624,"public void test537624() throws Throwable {
    String string0 = NodeUtil.opToStr(28);
    assertEquals(""+"", string0);
}",0,
project,0,test538625,"public void test538625() throws Throwable {
    String string0 = NodeUtil.opToStr(29);
    assertEquals(""-"", string0);
}",0,
project,0,test539627,"public void test539627() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(30);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 30: NEW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test540628,"public void test540628() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(31);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 31: DELPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test541629,"public void test541629() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(32);
    assertEquals(""typeof"", string0);
}",1,
project,0,test542630,"public void test542630() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(33);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 33: GETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test543631,"public void test543631() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 34: SETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test544632,"public void test544632() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(35);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 35: GETELEM
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test545633,"public void test545633() throws Throwable {
    String string0 = NodeUtil.opToStr(36);
    assertNull(string0);
}",0,
project,0,test546634,"public void test546634() throws Throwable {
    String string0 = NodeUtil.opToStr(37);
    assertNull(string0);
}",0,
project,0,test547635,"public void test547635() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(38);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 38: NAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test548636,"public void test548636() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(39);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 39: NUMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test549637,"public void test549637() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(40);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 40: STRING
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test550638,"public void test550638() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(41);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 41: NULL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test551639,"public void test551639() throws Throwable {
    String string0 = NodeUtil.opToStr(42);
    assertNull(string0);
}",0,
project,0,test552640,"public void test552640() throws Throwable {
    String string0 = NodeUtil.opToStr(43);
    assertNull(string0);
}",0,
project,0,test553641,"public void test553641() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(44);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 44: TRUE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test554642,"public void test554642() throws Throwable {
    String string0 = NodeUtil.opToStr(45);
    assertEquals(""==="", string0);
}",0,
project,0,test555643,"public void test555643() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(46);
    assertEquals(""!=="", string0);
}",1,
project,0,test556644,"public void test556644() throws Throwable {
    String string0 = NodeUtil.opToStr(47);
    assertNull(string0);
}",0,
project,0,test557645,"public void test557645() throws Throwable {
    String string0 = NodeUtil.opToStr(48);
    assertNull(string0);
}",0,
project,0,test558646,"public void test558646() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 49: THROW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test559647,"public void test559647() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 50: RETHROW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test560648,"public void test560648() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(51);
    assertEquals(""in"", string0);
}",1,
project,0,test561649,"public void test561649() throws Throwable {
    String string0 = NodeUtil.opToStr(52);
    assertEquals(""instanceof"", string0);
}",0,
project,0,test562650,"public void test562650() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 53: LOCAL_LOAD
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test563651,"public void test563651() throws Throwable {
    String string0 = NodeUtil.opToStr(54);
    assertNull(string0);
}",0,
project,0,test564652,"public void test564652() throws Throwable {
    String string0 = NodeUtil.opToStr(55);
    assertNull(string0);
}",0,
project,0,test565653,"public void test565653() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 56: CATCH_SCOPE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test566654,"public void test566654() throws Throwable {
    String string0 = NodeUtil.opToStr(57);
    assertNull(string0);
}",0,
project,0,test567655,"public void test567655() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 58: ENUM_INIT_VALUES
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test568656,"public void test568656() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 59: ENUM_NEXT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test569657,"public void test569657() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 60: ENUM_ID
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test570658,"public void test570658() throws Throwable {
    String string0 = NodeUtil.opToStr(61);
    assertNull(string0);
}",0,
project,0,test571659,"public void test571659() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 62: RETURN_RESULT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test572660,"public void test572660() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(63);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 63: ARRAYLIT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test573661,"public void test573661() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(64);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 64: OBJECTLIT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test574662,"public void test574662() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(65);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 65: GET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test575663,"public void test575663() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 66: SET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test576664,"public void test576664() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 67: DEL_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test577665,"public void test577665() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 68: REF_CALL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test578666,"public void test578666() throws Throwable {
    String string0 = NodeUtil.opToStr(69);
    assertNull(string0);
}",0,
project,0,test579667,"public void test579667() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 70: DEFAULTNAMESPACE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test580668,"public void test580668() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(71);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 71: ESCXMLATTR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test581669,"public void test581669() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 72: ESCXMLTEXT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test582670,"public void test582670() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 73: REF_MEMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test583671,"public void test583671() throws Throwable {
    String string0 = NodeUtil.opToStr(74);
    assertNull(string0);
}",0,
project,0,test584672,"public void test584672() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 75: REF_NAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test585673,"public void test585673() throws Throwable {
    String string0 = NodeUtil.opToStr(76);
    assertNull(string0);
}",0,
project,0,test586674,"public void test586674() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 77: TRY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test587675,"public void test587675() throws Throwable {
    String string0 = NodeUtil.opToStr(78);
    assertNull(string0);
}",0,
project,0,test588676,"public void test588676() throws Throwable {
    String string0 = NodeUtil.opToStr(79);
    assertNull(string0);
}",0,
project,0,test589677,"public void test589677() throws Throwable {
    String string0 = NodeUtil.opToStr(80);
    assertNull(string0);
}",0,
project,0,test590678,"public void test590678() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 81: LC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test591679,"public void test591679() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 82: RC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test592680,"public void test592680() throws Throwable {
    String string0 = NodeUtil.opToStr(83);
    assertNull(string0);
}",0,
project,0,test593681,"public void test593681() throws Throwable {
    String string0 = NodeUtil.opToStr(84);
    assertNull(string0);
}",0,
project,0,test594682,"public void test594682() throws Throwable {
    String string0 = NodeUtil.opToStr(85);
    assertNull(string0);
}",0,
project,0,test595683,"public void test595683() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(86);
    assertEquals(""="", string0);
}",1,
project,0,test596684,"public void test596684() throws Throwable {
    String string0 = NodeUtil.opToStr(87);
    assertEquals(""|="", string0);
}",0,
project,0,test597685,"public void test597685() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(88);
    assertEquals(""^="", string0);
}",1,
project,0,test598686,"public void test598686() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(89);
    assertEquals(""&="", string0);
}",1,
project,0,test599687,"public void test599687() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(90);
    assertEquals(""<<="", string0);
}",1,
project,0,test600688,"public void test600688() throws Throwable {
    String string0 = NodeUtil.opToStr(91);
    assertEquals("">>="", string0);
}",0,
project,0,test601689,"public void test601689() throws Throwable {
    String string0 = NodeUtil.opToStr(92);
    assertEquals("">>>="", string0);
}",0,
project,0,test602690,"public void test602690() throws Throwable {
    String string0 = NodeUtil.opToStr(93);
    assertEquals(""+="", string0);
}",0,
project,0,test603691,"public void test603691() throws Throwable {
    String string0 = NodeUtil.opToStr(94);
    assertEquals(""-="", string0);
}",0,
project,0,test604692,"public void test604692() throws Throwable {
    String string0 = NodeUtil.opToStr(95);
    assertEquals(""*="", string0);
}",0,
project,0,test605693,"public void test605693() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(96);
    assertEquals(""/="", string0);
}",1,
project,0,test606694,"public void test606694() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(97);
    assertEquals(""%="", string0);
}",1,
project,0,test607695,"public void test607695() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(98);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 98: HOOK
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test608696,"public void test608696() throws Throwable {
    String string0 = NodeUtil.opToStr(99);
    assertNull(string0);
}",0,
project,0,test609697,"public void test609697() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(100);
    assertEquals(""||"", string0);
}",1,
project,0,test610698,"public void test610698() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(101);
    assertEquals(""&&"", string0);
}",1,
project,0,test611699,"public void test611699() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(102);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 102: INC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test612700,"public void test612700() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(103);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 103: DEC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test613701,"public void test613701() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 104: DOT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test614702,"public void test614702() throws Throwable {
    String string0 = NodeUtil.opToStr(105);
    assertNull(string0);
}",0,
project,0,test615703,"public void test615703() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 106: EXPORT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test616704,"public void test616704() throws Throwable {
    String string0 = NodeUtil.opToStr(107);
    assertNull(string0);
}",0,
project,0,test617705,"public void test617705() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(108);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 108: IF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test618706,"public void test618706() throws Throwable {
    String string0 = NodeUtil.opToStr(109);
    assertNull(string0);
}",0,
project,0,test619707,"public void test619707() throws Throwable {
    String string0 = NodeUtil.opToStr(110);
    assertNull(string0);
}",0,
project,0,test620708,"public void test620708() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 111: CASE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test621709,"public void test621709() throws Throwable {
    String string0 = NodeUtil.opToStr(112);
    assertNull(string0);
}",0,
project,0,test622710,"public void test622710() throws Throwable {
    String string0 = NodeUtil.opToStr(113);
    assertNull(string0);
}",0,
project,0,test623711,"public void test623711() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 114: DO
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test624712,"public void test624712() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 115: FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test625713,"public void test625713() throws Throwable {
    String string0 = NodeUtil.opToStr(116);
    assertNull(string0);
}",0,
project,0,test626714,"public void test626714() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 117: CONTINUE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test627715,"public void test627715() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 118: VAR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test628716,"public void test628716() throws Throwable {
    String string0 = NodeUtil.opToStr((byte) 119);
    assertNull(string0);
}",0,
project,0,test629717,"public void test629717() throws Throwable {
    String string0 = NodeUtil.opToStr(120);
    assertNull(string0);
}",0,
project,0,test630718,"public void test630718() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 121: FINALLY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",1,
project,0,test631719,"public void test631719() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(122);
    assertEquals(""void"", string0);
}",1,
project,0,test632720,"public void test632720() throws Throwable {
    String string0 = NodeUtil.opToStr(764);
    assertNull(string0);
}",0,
project,0,test633721,"public void test633721() throws Throwable {
    Node node0 = NodeUtil.newVarNode("""", (Node) null);
    // Undeclared exception!
    try {
        NodeUtil.redeclareVarsInsideBranch(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test634722,"public void test634722() throws Throwable {
    Node node0 = new Node(77);
    NodeUtil.copyNameAnnotations(node0, (Node) null);
    assertEquals(4, Node.ENUM_PROP);
}",0,
project,0,test635723,"public void test635723() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    linkedList0.add(node0);
    // Undeclared exception!
    try {
        NodeUtil.newFunctionNode(""msg.unterminted.re.it"", linkedList0, node0, 34, 40);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test636724,"public void test636724() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""Math"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test637725,"public void test637725() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName("">>>="");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test638726,"public void test638726() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""interface"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test639727,"public void test639727() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Infinity"", 29, 29);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(29, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test639728,"public void test639728() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Infinity"", 29, 29);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(29, node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test640729,"public void test640729() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    NodeUtil.redeclareVarsInsideBranch(node1);
    assertEquals(96, node0.getCharno());
}",0,
project,0,test640730,"public void test640730() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    NodeUtil.redeclareVarsInsideBranch(node1);
    assertEquals(96, node0.getLineno());
}",0,
project,0,test641731,"public void test641731() throws Throwable {
    Node node0 = new Node(125);
    Node node1 = NodeUtil.newVarNode(""S{stFDph!"", node0);
    node0.addChildToBack(node1);
    // Undeclared exception!
    NodeUtil.redeclareVarsInsideBranch(node1);
}",0,
project,0,test642732,"public void test642732() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""9"", 56, 56);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test642733,"public void test642733() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""9"", 56, 56);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(56, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test642734,"public void test642734() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""9"", 56, 56);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(56, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test643735,"public void test643735() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test644736,"public void test644736() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".prototype."", 89, 33);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(33, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test644737,"public void test644737() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".prototype."", 89, 33);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(89, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test644738,"public void test644738() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".prototype."", 89, 33);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(2, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test644739,"public void test644739() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".prototype."", 89, 33);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test645740,"public void test645740() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test645741,"public void test645741() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertNull(node2);
}",0,
project,0,test645742,"public void test645742() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertEquals(2, node1.getChildCount());
}",0,
project,0,test645743,"public void test645743() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertTrue(node1.isQualifiedName());
}",0,assertTrue(node1.isQualifiedName())
project,0,test646744,"public void test646744() throws Throwable {
    Node node0 = new Node(3674, (-986), 3674);
    Node node1 = NodeUtil.newQualifiedNameNode(""cases"", node0, ""EoSBc8"");
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""EoSBc8"");
    assertTrue(node1.isUnscopedQualifiedName());
}",0,assertFalse(node1.isUnscopedQualifiedName())
project,0,test646745,"public void test646745() throws Throwable {
    Node node0 = new Node(3674, (-986), 3674);
    Node node1 = NodeUtil.newQualifiedNameNode(""cases"", node0, ""EoSBc8"");
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""EoSBc8"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test647746,"public void test647746() throws Throwable {
    Node node0 = new Node(105);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertFalse(node0.hasOneChild());
}",0,assertFalse(node0.hasOneChild())
project,0,test648747,"public void test648747() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(48);
    boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test649748,"public void test649748() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsType(node0, 39);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test650749,"public void test650749() throws Throwable {
    Node[] nodeArray0 = new Node[2];
    Node node0 = Node.newString((-5426), ""H:f"");
    Node node1 = NodeUtil.newName(""H:f"", node0);
    nodeArray0[1] = node1;
    int int0 = NodeUtil.getNameReferenceCount(nodeArray0[1], ""H:f"");
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test651750,"public void test651750() throws Throwable {
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(90);
    Node node0 = new Node(90, 90, 90);
    Node node1 = NodeUtil.newQualifiedNameNode(""Nf\""sYV"", 8192, 1);
    node0.addChildToFront(node1);
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test652751,"public void test652751() throws Throwable {
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(90);
    Node node0 = new Node(90, 90, 90);
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test653752,"public void test653752() throws Throwable {
    Node node0 = new Node(47);
    // Undeclared exception!
    try {
        NodeUtil.hasFinally(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test654753,"public void test654753() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.hasFinally(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test655754,"public void test655754() throws Throwable {
    Node node0 = new Node(77);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    node0.addChildrenToFront(node1);
    LinkedList<Node> linkedList1 = new LinkedList<Node>();
    Node node2 = new Node((-1), 2, (-1));
    node0.addChildToBack(node2);
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""C'Q)FG,hx*m2XE"", linkedList1, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(1, functionNode0.getCharno());
}",0,"assertEquals(1, functionNode0.getCharno())"
project,0,test655755,"public void test655755() throws Throwable {
    Node node0 = new Node(77);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    node0.addChildrenToFront(node1);
    LinkedList<Node> linkedList1 = new LinkedList<Node>();
    Node node2 = new Node((-1), 2, (-1));
    node0.addChildToBack(node2);
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""C'Q)FG,hx*m2XE"", linkedList1, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(""C'Q)FG,hx*m2XE"", functionNode0.getFunctionName());
}",0,
project,0,test655756,"public void test655756() throws Throwable {
    Node node0 = new Node(77);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    node0.addChildrenToFront(node1);
    LinkedList<Node> linkedList1 = new LinkedList<Node>();
    Node node2 = new Node((-1), 2, (-1));
    node0.addChildToBack(node2);
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""C'Q)FG,hx*m2XE"", linkedList1, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(2, functionNode0.getLineno());
}",0,
project,0,test655757,"public void test655757() throws Throwable {
    Node node0 = new Node(77);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    node0.addChildrenToFront(node1);
    LinkedList<Node> linkedList1 = new LinkedList<Node>();
    Node node2 = new Node((-1), 2, (-1));
    node0.addChildToBack(node2);
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""C'Q)FG,hx*m2XE"", linkedList1, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.hasFinally(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test656758,"public void test656758() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test657759,"public void test657759() throws Throwable {
    Node node0 = new Node(77);
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test658760,"public void test658760() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.hasCatchHandler(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test659761,"public void test659761() throws Throwable {
    Node node0 = new Node(125);
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test660762,"public void test660762() throws Throwable {
    Node node0 = new Node(125);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}",0,
project,0,test661763,"public void test661763() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.getFnParameters(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test662764,"public void test662764() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(""y"", functionNode0.getFunctionName());
}",0,assertNotNull(functionNode0.getFunctionName())
project,0,test662765,"public void test662765() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(83, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test662766,"public void test662766() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(27, functionNode0.getLineno());
}",0,"assertEquals(0, functionNode0.getLineno())"
project,0,test662767,"public void test662767() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(27, node1.getLineno());
}",0,
project,0,test662768,"public void test662768() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(46, node1.getCharno());
}",0,"assertEquals(0, node1.getCharno())"
project,0,test662769,"public void test662769() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(46, functionNode0.getCharno());
}",0,"assertEquals(0, functionNode0.getCharno())"
project,0,test663770,"public void test663770() throws Throwable {
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    assertNull(jSDocInfo0);
}",0,
project,0,test664771,"public void test664771() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}",0,
project,0,test665772,"public void test665772() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    JSDocInfo jSDocInfo1 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo1.getVisibility());
}",0,assertNotNull(jSDocInfo1.getVisibility())
project,0,test666773,"public void test666773() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    node0.addChildrenToBack(node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}",0,
project,0,test667774,"public void test667774() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    node0.addChildrenToBack(node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}",0,
project,0,test668775,"public void test668775() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    String string0 = NodeUtil.getSourceName(node0);
    assertNull(string0);
}",0,
