focal_method,test_prefix,docstring
"public String getFunctionName() {
    return functionName;
}","public void test0000() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertEquals(""msg.unterminated.re.lit"", functionNode0.getFunctionName());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test0001() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertEquals(40, functionNode0.getCharno());
}",""
"static boolean isVarArgsFunction(Node function) {
    Preconditions.checkArgument(isFunction(function));
    return NodeUtil.isNameReferenced(function.getLastChild(), ""arguments"", Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));
}","public void test0002() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertFalse(boolean0);
}","/**
 * Determines if a function takes a variable number of arguments by
 * looking for references to the ""arguments"" var_args object.
 */"
"public int getType() {
    return type;
}","public void test0003() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertEquals(122, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test0004() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    assertEquals(40, functionNode0.getLineno());
}",""
"static String getPrototypePropertyName(Node qName) {
    String qNameStr = qName.getQualifiedName();
    int prototypeIdx = qNameStr.lastIndexOf("".prototype."");
    int memberIndex = prototypeIdx + "".prototype"".length() + 1;
    return qNameStr.substring(memberIndex);
}","public void test0015() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.getPrototypePropertyName(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The string property name part of a qualified prototype name.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return checkForStateChangeHelper(n, false);
}","public void test0026() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean containsCall(Node n) {
    return containsType(n, Token.CALL);
}","public void test0037() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this node or any of its children a CALL?
 */"
"public int getType() {
    return type;
}","public void test0038() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsCall(node0);
    assertEquals(122, node0.getType());
}",""
"static boolean containsFunctionDeclaration(Node n) {
    return containsType(n, Token.FUNCTION);
}","public void test0049() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.containsFunctionDeclaration((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil$MatchNodeType"", e);
    }
}","/**
 * Determines if the given node contains a function declaration.
 */"
"public int getType() {
    return type;
}","public void test00510() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 10);
    assertEquals(122, node0.getType());
}",""
"static boolean containsTypeInOuterScope(Node node, int type) {
    return containsType(node, type, Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));
}","public void test00511() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 10);
    assertFalse(boolean0);
}","/**
 * @return true if n or any of its children are of the specified type.
 *     Does not traverse into functions.
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test00612() throws Throwable {
    Node node0 = new Node(106, 2546, 106);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getType() {
    return type;
}","public void test00713() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 26);
    assertEquals(122, node0.getType());
}",""
"static boolean isNodeTypeReferenced(Node node, int type) {
    return isNodeTypeReferenced(node, type, Predicates.<Node>alwaysTrue());
}","public void test00714() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 26);
    assertFalse(boolean0);
}","/**
 * Whether a Node type is within the node tree.
 */"
"static int getNodeTypeReferenceCount(Node node, int type) {
    return getCount(node, new MatchNodeType(type));
}","public void test00815() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 7);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a type is referenced within the node tree.
 */"
"public int getType() {
    return type;
}","public void test00816() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 7);
    assertEquals(122, node0.getType());
}",""
"static int getNameReferenceCount(Node node, String name) {
    return getCount(node, new MatchNameNode(name));
}","public void test00917() throws Throwable {
    Node node0 = Node.newString(74, ""kjG`uQN$"");
    int int0 = NodeUtil.getNameReferenceCount(node0, ""kjG`uQN$"");
    assertEquals(0, int0);
}","/**
 * Finds the number of times a simple name is referenced within the node tree.
 */"
"static Node getFunctionBody(Node fn) {
    Preconditions.checkArgument(isFunction(fn));
    return fn.getLastChild();
}","public void test01018() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.getFunctionBody((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Return a BLOCK node for the given FUNCTION node.
 */"
"public int getType() {
    return type;
}","public void test01119() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertEquals(122, node0.getType());
}",""
"static boolean referencesThis(Node n) {
    return containsType(n, Token.THIS);
}","public void test01120() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the subtree contains references to 'this' keyword
 */"
"public int getType() {
    return type;
}","public void test01221() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertEquals(122, node0.getType());
}",""
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test01222() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"public int getType() {
    return type;
}","public void test01223() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertEquals(130, node1.getType());
}",""
"public int getType() {
    return type;
}","public void test01324() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""undefined"", 90, 8292);
    assertEquals(38, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test01325() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""undefined"", 90, 8292);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals(4095, node0.getCharno());
}",""
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test01326() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""undefined"", 90, 8292);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test01327() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""undefined"", 90, 8292);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals(90, node0.getLineno());
}",""
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test01428() throws Throwable {
    Node node0 = Node.newNumber(0.0, (-1374), (-1374));
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test01529() throws Throwable {
    Node node0 = Node.newString("";&i@aFpy"");
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test01630() throws Throwable {
    Node node0 = Node.newString(41, ""$$constant"");
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test01731() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test01832() throws Throwable {
    Node node0 = new Node(44);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test01933() throws Throwable {
    Node node0 = Node.newString(""?85"");
    Node node1 = new Node(47, node0, node0, node0, 1013, 9);
    boolean boolean0 = NodeUtil.getBooleanValue(node1);
    assertTrue(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02034() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02135() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"public int getType() {
    return type;
}","public void test02236() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    assertEquals(122, node0.getType());
}",""
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02237() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02338() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    // Undeclared exception!
    try {
        NodeUtil.getBooleanValue(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Non-literal value: GET_REF 65
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02439() throws Throwable {
    Node node0 = Node.newString("""");
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02540() throws Throwable {
    Node node0 = Node.newNumber(2281.19352130022);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test02641() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""NaN"", 65279, 99);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals(99, node0.getCharno());
}",""
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02642() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""NaN"", 65279, 99);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertFalse(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test02643() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""NaN"", 65279, 99);
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals(65279, node0.getLineno());
}",""
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02744() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Infinity"", 26, (-3866));
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertTrue(boolean0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test02745() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Infinity"", 26, (-3866));
    boolean boolean0 = NodeUtil.getBooleanValue(node0);
    assertEquals((-1), node0.getLineno());
}",""
"static boolean getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return n.getString().length() > 0;
        case Token.NUMBER:
            return n.getDouble() != 0;
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return false;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return false;
            } else if (""Infinity"".equals(name)) {
                return true;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return true;
    }
    throw new IllegalArgumentException(""Non-literal value: "" + n);
}","public void test02846() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""UNKNOWN_TYPE"", 126, 126);
    // Undeclared exception!
    try {
        NodeUtil.getBooleanValue(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Non-literal value: NAME UNKNOWN_TYPE 126
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 *
 * @throws IllegalArgumentException If {@code n} is not a literal value
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test02947() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""<5Lec>rRW sIYTLuKR`"", (-4024), (-4024));
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""<5Lec>rRW sIYTLuKR`"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03048() throws Throwable {
    Node node0 = new Node(44);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""true"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03149() throws Throwable {
    Node node0 = Node.newNumber((double) 43);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""43"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03250() throws Throwable {
    Node node0 = Node.newString(""iatH"");
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""iatH"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03351() throws Throwable {
    Node node0 = new Node(15);
    Node node1 = new Node(41, node0);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(""null"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03452() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""false"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03553() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""undefined"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03654() throws Throwable {
    Node node0 = new Node(108, 121, 125);
    String string0 = NodeUtil.getStringValue(node0);
    assertNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.NAME:
        case Token.STRING:
            return n.getString();
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03755() throws Throwable {
    Node node0 = Node.newNumber(1312.17994775, 97, 97);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""1312.17994775"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test03856() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""REGEXP_TYPE"", 65500, 65500);
    Node node1 = new Node(1, node0, node0, node0, node0);
    NodeUtil.getFunctionName(node1, node0);
    assertEquals(65500, node0.getLineno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test03957() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertEquals(115, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test03958() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertEquals(33, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test03959() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertEquals(115, node0.getCharno());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test03960() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name
 * without a ""this"" reference, such as <code>a.b.c</code>, but not
 * <code>this.a</code>.
 */"
"static String getFunctionName(Node n, Node parent) {
    String name = n.getFirstChild().getString();
    switch(parent.getType()) {
        case Token.NAME:
            // var name = function() ...
            // var name2 = function name1() ...
            return parent.getString();
        case Token.ASSIGN:
            // qualified.name = function() ...
            // qualified.name2 = function name1() ...
            return parent.getFirstChild().getQualifiedName();
        default:
            // function name() ...
            return name != null && name.length() != 0 ? name : null;
    }
}","public void test03961() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".pro9Mtotype"", 115, 115);
    String string0 = NodeUtil.getFunctionName(node0, node0);
    assertNull(string0);
}","/**
 * Gets the function's name. This method recognizes five forms:
 * <ul>
 * <li>{@code function name() ...}</li>
 * <li>{@code var name = function() ...}</li>
 * <li>{@code qualified.name = function() ...}</li>
 * <li>{@code var name2 = function name1() ...}</li>
 * <li>{@code qualified.name2 = function name1() ...}</li>
 * </ul>
 * In two last cases with named anonymous functions, the second name is
 * returned (the variable of qualified name).
 *
 * @param n a node whose type is {@link Token#FUNCTION}
 * @param parent {@code n}'s parent (never {@code null})
 * @return the function's name, or {@code null} if it has no name
 */"
"static String getFunctionName(Node n, Node parent) {
    String name = n.getFirstChild().getString();
    switch(parent.getType()) {
        case Token.NAME:
            // var name = function() ...
            // var name2 = function name1() ...
            return parent.getString();
        case Token.ASSIGN:
            // qualified.name = function() ...
            // qualified.name2 = function name1() ...
            return parent.getFirstChild().getQualifiedName();
        default:
            // function name() ...
            return name != null && name.length() != 0 ? name : null;
    }
}","public void test04062() throws Throwable {
    Node node0 = Node.newNumber((-751.64));
    Node node1 = NodeUtil.newVarNode(""CwCrk$?)C&kUh&"", node0);
    String string0 = NodeUtil.getFunctionName(node1, node0);
    assertNotNull(string0);
}","/**
 * Gets the function's name. This method recognizes five forms:
 * <ul>
 * <li>{@code function name() ...}</li>
 * <li>{@code var name = function() ...}</li>
 * <li>{@code qualified.name = function() ...}</li>
 * <li>{@code var name2 = function name1() ...}</li>
 * <li>{@code qualified.name2 = function name1() ...}</li>
 * </ul>
 * In two last cases with named anonymous functions, the second name is
 * returned (the variable of qualified name).
 *
 * @param n a node whose type is {@link Token#FUNCTION}
 * @param parent {@code n}'s parent (never {@code null})
 * @return the function's name, or {@code null} if it has no name
 */"
"public int getType() {
    return type;
}","public void test04064() throws Throwable {
    Node node0 = Node.newNumber((-751.64));
    Node node1 = NodeUtil.newVarNode(""CwCrk$?)C&kUh&"", node0);
    String string0 = NodeUtil.getFunctionName(node1, node0);
    assertEquals(118, node1.getType());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test04065() throws Throwable {
    Node node0 = Node.newNumber((-751.64));
    Node node1 = NodeUtil.newVarNode(""CwCrk$?)C&kUh&"", node0);
    String string0 = NodeUtil.getFunctionName(node1, node0);
    assertFalse(node0.hasChildren());
}",""
"static boolean isImmutableValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.NULL:
        case Token.TRUE:
        case Token.FALSE:
        case Token.VOID:
            return true;
        case Token.NEG:
            return isImmutableValue(n.getFirstChild());
        case Token.NAME:
            String name = n.getString();
            // We assume here that programs don't change the value of the keyword
            // undefined to something other than the value undefined.
            return ""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name);
    }
    return false;
}","public void test04166() throws Throwable {
    Node node0 = new Node(29);
    // Undeclared exception!
    try {
        NodeUtil.isImmutableValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if this is an immutable value.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04267() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""th8"", linkedList0, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(1, functionNode0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04268() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""th8"", linkedList0, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(2, functionNode0.getLineno());
}",""
"public String getFunctionName() {
    return functionName;
}","public void test04269() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""th8"", linkedList0, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(""th8"", functionNode0.getFunctionName());
}",""
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test04270() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""th8"", linkedList0, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isLiteralValue(Node n) {
    // TODO(nicksantos): Refine this function to catch more literals.
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child)) {
                    return false;
                }
            }
            return true;
        default:
            return isImmutableValue(n);
    }
}","public void test04371() throws Throwable {
    Node node0 = Node.newString(""stig"", (-60), (-1912371727));
    Node node1 = NodeUtil.newName(""NaN"", node0, ""O`J"");
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * function() { return a; } is not.
 */"
"public int getType() {
    return type;
}","public void test04372() throws Throwable {
    Node node0 = Node.newString(""stig"", (-60), (-1912371727));
    Node node1 = NodeUtil.newName(""NaN"", node0, ""O`J"");
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertEquals(38, node1.getType());
}",""
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test04473() throws Throwable {
    Node node0 = Node.newString(""-"");
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isImmutableValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.NULL:
        case Token.TRUE:
        case Token.FALSE:
        case Token.VOID:
            return true;
        case Token.NEG:
            return isImmutableValue(n.getFirstChild());
        case Token.NAME:
            String name = n.getString();
            // We assume here that programs don't change the value of the keyword
            // undefined to something other than the value undefined.
            return ""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name);
    }
    return false;
}","public void test04574() throws Throwable {
    Node node0 = new Node(41, 41, 41);
    boolean boolean0 = NodeUtil.isImmutableValue(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if this is an immutable value.
 */"
"static boolean isLiteralValue(Node n) {
    // TODO(nicksantos): Refine this function to catch more literals.
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child)) {
                    return false;
                }
            }
            return true;
        default:
            return isImmutableValue(n);
    }
}","public void test04675() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.isLiteralValue(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * function() { return a; } is not.
 */"
"static boolean isLiteralValue(Node n) {
    // TODO(nicksantos): Refine this function to catch more literals.
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child)) {
                    return false;
                }
            }
            return true;
        default:
            return isImmutableValue(n);
    }
}","public void test04776() throws Throwable {
    Node node0 = new Node(111, 111, 111);
    Node node1 = new Node(44, node0, node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * function() { return a; } is not.
 */"
"static boolean isImmutableValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.NULL:
        case Token.TRUE:
        case Token.FALSE:
        case Token.VOID:
            return true;
        case Token.NEG:
            return isImmutableValue(n.getFirstChild());
        case Token.NAME:
            String name = n.getString();
            // We assume here that programs don't change the value of the keyword
            // undefined to something other than the value undefined.
            return ""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name);
    }
    return false;
}","public void test04877() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isImmutableValue(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if this is an immutable value.
 */"
"static boolean isLiteralValue(Node n) {
    // TODO(nicksantos): Refine this function to catch more literals.
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child)) {
                    return false;
                }
            }
            return true;
        default:
            return isImmutableValue(n);
    }
}","public void test04978() throws Throwable {
    Node node0 = new Node(665);
    Node node1 = NodeUtil.newName(""undefined"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * function() { return a; } is not.
 */"
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test04979() throws Throwable {
    Node node0 = new Node(665);
    Node node1 = NodeUtil.newName(""undefined"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(node1.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such
 * as <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"static boolean isLiteralValue(Node n) {
    // TODO(nicksantos): Refine this function to catch more literals.
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child)) {
                    return false;
                }
            }
            return true;
        default:
            return isImmutableValue(n);
    }
}","public void test05080() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""Infinity"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * function() { return a; } is not.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test05081() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""Infinity"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name
 * without a ""this"" reference, such as <code>a.b.c</code>, but not
 * <code>this.a</code>.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test05082() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""Infinity"", node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertEquals(115, node1.getCharno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test05183() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""-"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(96, node0.getCharno());
}",""
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test05184() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""-"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test05185() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""-"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(0, node0.getChildCount());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test05186() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""-"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(96, node0.getLineno());
}",""
"static boolean isLiteralValue(Node n) {
    // TODO(nicksantos): Refine this function to catch more literals.
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child)) {
                    return false;
                }
            }
            return true;
        default:
            return isImmutableValue(n);
    }
}","public void test05287() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = NodeUtil.isLiteralValue(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * function() { return a; } is not.
 */"
"public String getFunctionName() {
    return functionName;
}","public void test05388() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    assertEquals(""msg.unterminated.re.lit"", functionNode0.getFunctionName());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test05389() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    assertEquals(25, functionNode0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test05390() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    assertEquals(25, functionNode0.getCharno());
}",""
"static boolean isLiteralValue(Node n) {
    // TODO(nicksantos): Refine this function to catch more literals.
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child)) {
                    return false;
                }
            }
            return true;
        default:
            return isImmutableValue(n);
    }
}","public void test05391() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isLiteralValue(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * function() { return a; } is not.
 */"
"static boolean isLiteralValue(Node n) {
    // TODO(nicksantos): Refine this function to catch more literals.
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child)) {
                    return false;
                }
            }
            return true;
        default:
            return isImmutableValue(n);
    }
}","public void test05492() throws Throwable {
    Node node0 = Node.newNumber((double) 63);
    Node node1 = new Node(63, node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * function() { return a; } is not.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test05593() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(9, 111, 49);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test05694() throws Throwable {
    Node node0 = new Node(37);
    Locale locale0 = Locale.JAPANESE;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test05795() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(10, 10, 10);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test05896() throws Throwable {
    Node node0 = new Node(11);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test05997() throws Throwable {
    Node node0 = new Node(12, 12, 12);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test06098() throws Throwable {
    Node node0 = new Node(13);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test06199() throws Throwable {
    Node node0 = new Node(14);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test062100() throws Throwable {
    Node node0 = new Node(15);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test063101() throws Throwable {
    Node node0 = new Node(16);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test064102() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(17);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test065103() throws Throwable {
    Node node0 = new Node(18, 1923, 18);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test066104() throws Throwable {
    Node node0 = new Node(19);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test067105() throws Throwable {
    Node node0 = new Node(20);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test068106() throws Throwable {
    Node node0 = new Node(21, 21, 21);
    Charset charset0 = Charset.defaultCharset();
    Set<String> set0 = charset0.aliases();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test069107() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(22, 22, 22);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test070108() throws Throwable {
    Node node0 = new Node(23);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test071109() throws Throwable {
    Node node0 = new Node(72);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node1 = new Node(24, node0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test072110() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(25, 25, 25);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test073111() throws Throwable {
    Node node0 = new Node(26);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test074112() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(27, 108, 27);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test075113() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(28);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test076114() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test077115() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test078116() throws Throwable {
    Node node0 = new Node(31);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test079117() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test080118() throws Throwable {
    Node node0 = new Node(34);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test081119() throws Throwable {
    Node node0 = new Node(35);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test082120() throws Throwable {
    Node node0 = new Node(36, 36, 36);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test083121() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test083122() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(96, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test083123() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(96, node0.getCharno());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test084124() throws Throwable {
    Node node0 = Node.newNumber(2506.184938);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test085125() throws Throwable {
    Node node0 = new Node(40, 40, 40);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test086126() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(41, nodeArray0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test087127() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test088128() throws Throwable {
    Node node0 = new Node(43);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test089129() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = new Node(44, 44, 80);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test090130() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test091131() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = Node.newString(33, ""j"", 13, 42);
    node1.addChildToBack(node0);
    Locale locale0 = Locale.JAPANESE;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test092132() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""<e1K.gD2*cW$*"");
    Node node0 = NodeUtil.newQualifiedNameNode(""<e1K.gD2*cW$*"", 9, 2);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(2, node0.getCharno());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test092133() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""<e1K.gD2*cW$*"");
    Node node0 = NodeUtil.newQualifiedNameNode(""<e1K.gD2*cW$*"", 9, 2);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(2, node0.getChildCount());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test092134() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""<e1K.gD2*cW$*"");
    Node node0 = NodeUtil.newQualifiedNameNode(""<e1K.gD2*cW$*"", 9, 2);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(9, node0.getLineno());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Single operators are valid if the child is valid.
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.NOT:
        case Token.NEG:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test092135() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""<e1K.gD2*cW$*"");
    Node node0 = NodeUtil.newQualifiedNameNode(""<e1K.gD2*cW$*"", 9, 2);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test093136() throws Throwable {
    Node node0 = new Node(125);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertTrue(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test094137() throws Throwable {
    Node node0 = new Node(132, (-1412), 31);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test095138() throws Throwable {
    Node node0 = new Node(125);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test096139() throws Throwable {
    Node node0 = new Node(9);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test097140() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test098141() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test099142() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test100143() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test101144() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test102145() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test103146() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test104147() throws Throwable {
    Node node0 = new Node(17);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test105148() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test106149() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test107150() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test108151() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test109152() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test110153() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test111154() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test112155() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test113156() throws Throwable {
    Node node0 = new Node(26);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test114157() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test115158() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test116159() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test117160() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test118161() throws Throwable {
    Node node0 = new Node(31, 2, 2);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test119162() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test120163() throws Throwable {
    Node node0 = new Node(33);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test121164() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test122165() throws Throwable {
    Node node0 = new Node(35);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test123166() throws Throwable {
    Node node0 = new Node(36);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test124167() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test125168() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test126169() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(39);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test127170() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(40);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test128171() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test129172() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test130173() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test131174() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test132175() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test133176() throws Throwable {
    Node node0 = new Node(46, 46, 46);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test134177() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test135178() throws Throwable {
    Node node0 = new Node(48);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test136179() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test137180() throws Throwable {
    Node node0 = new Node(50, 8198, 8198);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test138181() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test139182() throws Throwable {
    Node node0 = new Node(52);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test140183() throws Throwable {
    Node node0 = new Node(53, 53, 53);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test141184() throws Throwable {
    Node node0 = new Node(54);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test142185() throws Throwable {
    Node node0 = new Node(55, 55, 55);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test143186() throws Throwable {
    Node node0 = new Node(56);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test144187() throws Throwable {
    Node node0 = new Node(57, 57, 57);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test145188() throws Throwable {
    Node node0 = new Node(58);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test146189() throws Throwable {
    Node node0 = new Node(59);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test147190() throws Throwable {
    Node node0 = new Node(60, 60, 60);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test148191() throws Throwable {
    Node node0 = new Node(61, 61, 61);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test149192() throws Throwable {
    Node node0 = new Node(62);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test150193() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test151194() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test152195() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test153196() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test154197() throws Throwable {
    Node node0 = Node.newString(67, ""(:X:|9=2_{3Nb, zov"", 77, 77);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test155198() throws Throwable {
    Node node0 = new Node(68);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test156199() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test157200() throws Throwable {
    Node node0 = new Node(70);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test158201() throws Throwable {
    Node node0 = new Node(71);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test159202() throws Throwable {
    Node node0 = new Node(72, 72, 72);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test160203() throws Throwable {
    Node node0 = new Node(73, 73, 73);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test161204() throws Throwable {
    Node node0 = new Node(74, 74, 74);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test162205() throws Throwable {
    Node node0 = new Node(75);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test163206() throws Throwable {
    Node node0 = new Node(76);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test164207() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test165208() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test166209() throws Throwable {
    Node node0 = new Node(79);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test167210() throws Throwable {
    Node node0 = new Node(80);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test168211() throws Throwable {
    Node node0 = new Node(81, 81, 81);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test169212() throws Throwable {
    Node node0 = new Node(82);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test170213() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(83);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test171214() throws Throwable {
    Node node0 = new Node(84);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test172215() throws Throwable {
    Node node0 = new Node(85);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test173216() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test174217() throws Throwable {
    Node node0 = new Node(87, 87, 87);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test175218() throws Throwable {
    Node node0 = new Node(88);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test176219() throws Throwable {
    Node node0 = new Node(89, 89, 89);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test177220() throws Throwable {
    Node node0 = new Node(90, 90, 90);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test178221() throws Throwable {
    Node node0 = new Node(91);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test179222() throws Throwable {
    Node node0 = new Node(92);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test180223() throws Throwable {
    Node node0 = new Node(94);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test181224() throws Throwable {
    Node node0 = new Node(97, 97, 97);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test182225() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test183226() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test184227() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test185228() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test186229() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test187230() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test188231() throws Throwable {
    Node node0 = new Node(104);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test189232() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test190233() throws Throwable {
    Node node0 = new Node(107);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test191234() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test192235() throws Throwable {
    Node node0 = new Node(109);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test193236() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test194237() throws Throwable {
    Node node0 = new Node(112);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test195238() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test196239() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return checkForStateChangeHelper(n, false);
}","public void test197240() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test198241() throws Throwable {
    Node node0 = new Node(116);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test199242() throws Throwable {
    Node node0 = new Node(117);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test200243() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return checkForStateChangeHelper(n, false);
}","public void test201244() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test202245() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test203246() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test204247() throws Throwable {
    Node node0 = new Node(128, 128, 128);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test205248() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test206249() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test207250() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test208251() throws Throwable {
    Node node0 = new Node(42);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test209252() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test210253() throws Throwable {
    Node node0 = new Node(44, 44, 44);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test211254() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test212255() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test213256() throws Throwable {
    Node node0 = new Node(51, 51, (-1542));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test214257() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test215258() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test216259() throws Throwable {
    Node node0 = new Node(83);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test217260() throws Throwable {
    Node node0 = new Node(98);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test218261() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return checkForStateChangeHelper(n, false);
}","public void test219262() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test220263() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test221264() throws Throwable {
    Node node0 = new Node(110);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test222265() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test223266() throws Throwable {
    Node node0 = new Node(123, 123, 123);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test224267() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test225268() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test226269() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test227270() throws Throwable {
    Node node0 = new Node(127, 127, 127);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test228271() throws Throwable {
    Node node0 = new Node(129);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test229272() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getType() {
    return type;
}","public void test229273() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test230274() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test231275() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test231276() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    assertEquals(46, functionNode0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test231277() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    assertEquals(9, functionNode0.getLineno());
}",""
"public String getFunctionName() {
    return functionName;
}","public void test231278() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    assertEquals(""ak7@j&'.a"", functionNode0.getFunctionName());
}",""
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test232279() throws Throwable {
    Node node0 = new Node(37);
    node0.setIsNoSideEffectsCall();
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test233280() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    Node node1 = new Node(95, node0, node0, 3161, 1);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean constructorCallHasSideEffects(Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.NEW, ""Expected NEW node, got "" + Token.name(callNode.getType()));
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    if (nameNode.getType() == Token.NAME && CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
        return false;
    }
    return true;
}","public void test234281() throws Throwable {
    Node node0 = new Node(72);
    // Undeclared exception!
    try {
        NodeUtil.constructorCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Expected NEW node, got ESCXMLTEXT
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Do calls to this constructor have side effects?
 *
 * @param callNode - construtor call node
 */"
"static boolean constructorCallHasSideEffects(Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.NEW, ""Expected NEW node, got "" + Token.name(callNode.getType()));
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    if (nameNode.getType() == Token.NAME && CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
        return false;
    }
    return true;
}","public void test235282() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    node0.setIsNoSideEffectsCall();
    boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Do calls to this constructor have side effects?
 *
 * @param callNode - construtor call node
 */"
"static boolean constructorCallHasSideEffects(Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.NEW, ""Expected NEW node, got "" + Token.name(callNode.getType()));
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    if (nameNode.getType() == Token.NAME && CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
        return false;
    }
    return true;
}","public void test236283() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Do calls to this constructor have side effects?
 *
 * @param callNode - construtor call node
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test237284() throws Throwable {
    Node node0 = new Node(30);
    Node node1 = NodeUtil.newName(""VIB7xvFE:N&2P;"", node0, ""VIB7xvFE:N&2P;"");
    node0.addChildToBack(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name
 * without a ""this"" reference, such as <code>a.b.c</code>, but not
 * <code>this.a</code>.
 */"
"static boolean constructorCallHasSideEffects(Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.NEW, ""Expected NEW node, got "" + Token.name(callNode.getType()));
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    if (nameNode.getType() == Token.NAME && CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
        return false;
    }
    return true;
}","public void test237285() throws Throwable {
    Node node0 = new Node(30);
    Node node1 = NodeUtil.newName(""VIB7xvFE:N&2P;"", node0, ""VIB7xvFE:N&2P;"");
    node0.addChildToBack(node1);
    boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Do calls to this constructor have side effects?
 *
 * @param callNode - construtor call node
 */"
"static boolean functionCallHasSideEffects(Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.CALL, ""Expected CALL node, got "" + Token.name(callNode.getType()));
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    // Built-in functions with no side effects.
    if (nameNode.getType() == Token.NAME) {
        String name = nameNode.getString();
        if (name.equals(""String"")) {
            return false;
        }
    }
    // Functions in the ""Math"" namespace have no side effects.
    if (nameNode.getType() == Token.GETPROP && nameNode.getFirstChild().getType() == Token.NAME) {
        String namespaceName = nameNode.getFirstChild().getString();
        if (namespaceName.equals(""Math"")) {
            return false;
        }
    }
    return true;
}","public void test238286() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.functionCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Expected CALL node, got VOID
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Returns true if calls to this function have side effects.
 *
 * @param callNode - function call node
 */"
"static boolean functionCallHasSideEffects(Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.CALL, ""Expected CALL node, got "" + Token.name(callNode.getType()));
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    // Built-in functions with no side effects.
    if (nameNode.getType() == Token.NAME) {
        String name = nameNode.getString();
        if (name.equals(""String"")) {
            return false;
        }
    }
    // Functions in the ""Math"" namespace have no side effects.
    if (nameNode.getType() == Token.GETPROP && nameNode.getFirstChild().getType() == Token.NAME) {
        String namespaceName = nameNode.getFirstChild().getString();
        if (namespaceName.equals(""Math"")) {
            return false;
        }
    }
    return true;
}","public void test239287() throws Throwable {
    Node node0 = new Node(37);
    node0.setIsNoSideEffectsCall();
    boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if calls to this function have side effects.
 *
 * @param callNode - function call node
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test240288() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newQualifiedNameNode(""5ryiY"", 1, 38);
    node0.addChildToFront(node1);
    assertEquals(38, node1.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test240289() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newQualifiedNameNode(""5ryiY"", 1, 38);
    node0.addChildToFront(node1);
    assertEquals(1, node1.getLineno());
}",""
"static boolean functionCallHasSideEffects(Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.CALL, ""Expected CALL node, got "" + Token.name(callNode.getType()));
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    // Built-in functions with no side effects.
    if (nameNode.getType() == Token.NAME) {
        String name = nameNode.getString();
        if (name.equals(""String"")) {
            return false;
        }
    }
    // Functions in the ""Math"" namespace have no side effects.
    if (nameNode.getType() == Token.GETPROP && nameNode.getFirstChild().getType() == Token.NAME) {
        String namespaceName = nameNode.getFirstChild().getString();
        if (namespaceName.equals(""Math"")) {
            return false;
        }
    }
    return true;
}","public void test240290() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newQualifiedNameNode(""5ryiY"", 1, 38);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if calls to this function have side effects.
 *
 * @param callNode - function call node
 */"
"static boolean functionCallHasSideEffects(Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.CALL, ""Expected CALL node, got "" + Token.name(callNode.getType()));
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    // Built-in functions with no side effects.
    if (nameNode.getType() == Token.NAME) {
        String name = nameNode.getString();
        if (name.equals(""String"")) {
            return false;
        }
    }
    // Functions in the ""Math"" namespace have no side effects.
    if (nameNode.getType() == Token.GETPROP && nameNode.getFirstChild().getType() == Token.NAME) {
        String namespaceName = nameNode.getFirstChild().getString();
        if (namespaceName.equals(""Math"")) {
            return false;
        }
    }
    return true;
}","public void test241291() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node node1 = Node.newString(33, ""j"", 13, 42);
    node1.addChildToBack(node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if calls to this function have side effects.
 *
 * @param callNode - function call node
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test242292() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test243293() throws Throwable {
    Node node0 = new Node(97, 1718, 1718);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test244294() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test245295() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test246296() throws Throwable {
    Node node0 = Node.newString(""ZbJUD]E?Xf2"");
    Node node1 = NodeUtil.newQualifiedNameNode(""ZbJUD]E?Xf2"", node0, ""ZbJUD]E?Xf2"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test246297() throws Throwable {
    Node node0 = Node.newString(""ZbJUD]E?Xf2"");
    Node node1 = NodeUtil.newQualifiedNameNode(""ZbJUD]E?Xf2"", node0, ""ZbJUD]E?Xf2"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertTrue(node1.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such
 * as <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test247298() throws Throwable {
    Node node0 = Node.newString(49, ""Unknown class name"", 31, 25);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test248299() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test249300() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    if (NodeUtil.isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.CALL:
        case Token.DELPROP:
        case Token.NEW:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test250301() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test251302() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test252303() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !NodeUtil.isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test253304() throws Throwable {
    Node node0 = new Node(32);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getType() {
    return type;
}","public void test254305() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertEquals(33, node1.getType());
}",""
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test254306() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test254307() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name
 * without a ""this"" reference, such as <code>a.b.c</code>, but not
 * <code>this.a</code>.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !NodeUtil.isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test255308() throws Throwable {
    Node node0 = new Node(34);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test256309() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !NodeUtil.isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test257310() throws Throwable {
    Node node0 = new Node(36, 36, 36);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test258311() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test259312() throws Throwable {
    Node node0 = new Node(38);
    node0.putIntProp(43, 43);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !NodeUtil.isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test260313() throws Throwable {
    Node node0 = new Node(36);
    Node node1 = NodeUtil.newName("""", node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add("""");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getType() {
    return type;
}","public void test260314() throws Throwable {
    Node node0 = new Node(36);
    Node node1 = NodeUtil.newName("""", node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add("""");
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertEquals(38, node1.getType());
}",""
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test261315() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !NodeUtil.isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test262316() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""K"", node0);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getType() {
    return type;
}","public void test262317() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""K"", node0);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertEquals(118, node1.getType());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test262318() throws Throwable {
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""K"", node0);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertFalse(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 * @return Whether the node more than one child.
 */"
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test263319() throws Throwable {
    int int0 = NodeUtil.precedence(4);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test264320() throws Throwable {
    int int0 = NodeUtil.precedence(10);
    assertEquals(6, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test265321() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(5);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for goto (type 5)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test266322() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(6);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ifeq (type 6)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test267323() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(7);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ifne (type 7)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test268324() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(8);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setname (type 8)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test269325() throws Throwable {
    int int0 = NodeUtil.precedence(9);
    assertEquals(5, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test270326() throws Throwable {
    int int0 = NodeUtil.precedence(11);
    assertEquals(7, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test271327() throws Throwable {
    int int0 = NodeUtil.precedence(12);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test272328() throws Throwable {
    int int0 = NodeUtil.precedence(13);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test273329() throws Throwable {
    int int0 = NodeUtil.precedence(14);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test274330() throws Throwable {
    int int0 = NodeUtil.precedence(15);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test275331() throws Throwable {
    int int0 = NodeUtil.precedence(16);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test276332() throws Throwable {
    int int0 = NodeUtil.precedence(17);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test277333() throws Throwable {
    int int0 = NodeUtil.precedence(18);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test278334() throws Throwable {
    int int0 = NodeUtil.precedence(19);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test279335() throws Throwable {
    int int0 = NodeUtil.precedence(20);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test280336() throws Throwable {
    int int0 = NodeUtil.precedence(21);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test281337() throws Throwable {
    int int0 = NodeUtil.precedence(22);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test282338() throws Throwable {
    int int0 = NodeUtil.precedence(23);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test283339() throws Throwable {
    int int0 = NodeUtil.precedence(24);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test284340() throws Throwable {
    int int0 = NodeUtil.precedence(25);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test285341() throws Throwable {
    int int0 = NodeUtil.precedence(26);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test286342() throws Throwable {
    int int0 = NodeUtil.precedence(27);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test287343() throws Throwable {
    int int0 = NodeUtil.precedence(28);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test288344() throws Throwable {
    int int0 = NodeUtil.precedence(29);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test289345() throws Throwable {
    int int0 = NodeUtil.precedence(30);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test290346() throws Throwable {
    int int0 = NodeUtil.precedence(31);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test291347() throws Throwable {
    int int0 = NodeUtil.precedence(32);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test292348() throws Throwable {
    int int0 = NodeUtil.precedence(33);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test293349() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setprop (type 34)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test294350() throws Throwable {
    int int0 = NodeUtil.precedence(35);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test295351() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(36);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setelem (type 36)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test296352() throws Throwable {
    int int0 = NodeUtil.precedence(37);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test297353() throws Throwable {
    int int0 = NodeUtil.precedence(38);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test298354() throws Throwable {
    int int0 = NodeUtil.precedence(39);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test299355() throws Throwable {
    int int0 = NodeUtil.precedence(40);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test300356() throws Throwable {
    int int0 = NodeUtil.precedence(41);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test301357() throws Throwable {
    int int0 = NodeUtil.precedence(42);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test302358() throws Throwable {
    int int0 = NodeUtil.precedence(43);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test303359() throws Throwable {
    int int0 = NodeUtil.precedence(44);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test304360() throws Throwable {
    int int0 = NodeUtil.precedence(45);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test305361() throws Throwable {
    int int0 = NodeUtil.precedence(46);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test306362() throws Throwable {
    int int0 = NodeUtil.precedence(47);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test307363() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for bindname (type 48)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test308364() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for throw (type 49)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test309365() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=50> (type 50)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test310366() throws Throwable {
    int int0 = NodeUtil.precedence(51);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test311367() throws Throwable {
    int int0 = NodeUtil.precedence(52);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test312368() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=53> (type 53)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test313369() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(54);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for getvar (type 54)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test314370() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(55);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setvar (type 55)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test315371() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=56> (type 56)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test316372() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(57);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=57> (type 57)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test317373() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=58> (type 58)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test318374() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=59> (type 59)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test319375() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=60> (type 60)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test320376() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(61);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for thisfn (type 61)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test321377() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=62> (type 62)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test322378() throws Throwable {
    int int0 = NodeUtil.precedence(63);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test323379() throws Throwable {
    int int0 = NodeUtil.precedence(64);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test324380() throws Throwable {
    int int0 = NodeUtil.precedence(65);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test325381() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=66> (type 66)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test326382() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=67> (type 67)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test327383() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=68> (type 68)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test328384() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(69);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ref_special (type 69)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test329385() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=70> (type 70)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test330386() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(71);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=71> (type 71)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test331387() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=72> (type 72)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test332388() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=73> (type 73)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test333389() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(74);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=74> (type 74)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test334390() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=75> (type 75)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test335391() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 76);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=76> (type 76)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test336392() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for try (type 77)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test337393() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(78);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for semi (type 78)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test338394() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lb (type 79)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test339395() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(80);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rb (type 80)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test340396() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lc (type 81)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test341397() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rc (type 82)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test342398() throws Throwable {
    int int0 = NodeUtil.precedence(83);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test343399() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(84);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rp (type 84)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test344400() throws Throwable {
    int int0 = NodeUtil.precedence(85);
    assertEquals(0, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test345401() throws Throwable {
    int int0 = NodeUtil.precedence(86);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test346402() throws Throwable {
    int int0 = NodeUtil.precedence(87);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test347403() throws Throwable {
    int int0 = NodeUtil.precedence(88);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test348404() throws Throwable {
    int int0 = NodeUtil.precedence(89);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test349405() throws Throwable {
    int int0 = NodeUtil.precedence(90);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test350406() throws Throwable {
    int int0 = NodeUtil.precedence(91);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test351407() throws Throwable {
    int int0 = NodeUtil.precedence(92);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test352408() throws Throwable {
    int int0 = NodeUtil.precedence(93);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test353409() throws Throwable {
    int int0 = NodeUtil.precedence(94);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test354410() throws Throwable {
    int int0 = NodeUtil.precedence(95);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test355411() throws Throwable {
    int int0 = NodeUtil.precedence(96);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test356412() throws Throwable {
    int int0 = NodeUtil.precedence(97);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test357413() throws Throwable {
    int int0 = NodeUtil.precedence(98);
    assertEquals(2, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test358414() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(99);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for colon (type 99)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test359415() throws Throwable {
    int int0 = NodeUtil.precedence(100);
    assertEquals(3, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test360416() throws Throwable {
    int int0 = NodeUtil.precedence(101);
    assertEquals(4, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test361417() throws Throwable {
    int int0 = NodeUtil.precedence(102);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test362418() throws Throwable {
    int int0 = NodeUtil.precedence(103);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test363419() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for dot (type 104)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test364420() throws Throwable {
    int int0 = NodeUtil.precedence(105);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test365421() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for export (type 106)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test366422() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for import (type 107)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test367423() throws Throwable {
    int int0 = NodeUtil.precedence(108);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test368424() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for else (type 109)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test369425() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for switch (type 110)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test370426() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for case (type 111)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test371427() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(112);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for default (type 112)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test372428() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for while (type 113)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test373429() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for do (type 114)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test374430() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for for (type 115)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test375431() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for break (type 116)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test376432() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for continue (type 117)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test377433() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for var (type 118)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test378434() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for with (type 119)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test379435() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for catch (type 120)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test380436() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for finally (type 121)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test381437() throws Throwable {
    int int0 = NodeUtil.precedence(122);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test382438() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(123);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for reserved (type 123)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test383439() throws Throwable {
    int int0 = NodeUtil.precedence(124);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test384440() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((-2093));
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=-2093> (type -2093)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test385441() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(9);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatentation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test386442() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(101);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatentation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test387443() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(11);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatentation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test388444() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatentation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test389445() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(100);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatentation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test390446() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(74);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatentation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test391447() throws Throwable {
    Node node0 = new Node(87, 87, 87);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(9, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test392448() throws Throwable {
    Node node0 = new Node(77);
    // Undeclared exception!
    try {
        NodeUtil.getOpFromAssignmentOp(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Not an assiment op
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test393449() throws Throwable {
    Node node0 = new Node(88);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(10, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test394450() throws Throwable {
    Node node0 = new Node(89);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(11, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test395451() throws Throwable {
    Node node0 = new Node(90);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(18, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test396452() throws Throwable {
    Node node0 = new Node(91, 91, 90);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(19, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test397453() throws Throwable {
    Node node0 = new Node(92);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(20, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test398454() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(21, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test399455() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(22, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test400456() throws Throwable {
    Node node0 = new Node(95);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(23, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test401457() throws Throwable {
    Node node0 = new Node(96);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(24, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test402458() throws Throwable {
    Node node0 = new Node(97, 1718, 1718);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(25, int0);
}",""
"static boolean isExpressionNode(Node n) {
    return n.getType() == Token.EXPR_RESULT;
}","public void test403459() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertFalse(boolean0);
}",""
"static boolean isExpressionNode(Node n) {
    return n.getType() == Token.EXPR_RESULT;
}","public void test404460() throws Throwable {
    Node node0 = new Node(130);
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertTrue(boolean0);
}",""
"static boolean isFunctionObjectApply(Node callNode) {
    return isObjectCallMethod(callNode, ""apply"");
}","public void test405461() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = Node.newString(33, ""j"", 13, 42);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.apply(...)
 *    x['apply'](...)
 */"
"static boolean isGet(Node n) {
    return n.getType() == Token.GETPROP || n.getType() == Token.GETELEM;
}","public void test406462() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertTrue(boolean0);
}","/**
 * Is this a GETPROP or GETELEM node?
 */"
"static boolean isSimpleFunctionObjectCall(Node callNode) {
    if (isFunctionObjectCall(callNode)) {
        if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME) {
            return true;
        }
    }
    return false;
}","public void test407463() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    node0.addChildToFront(node0);
    boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.call(...)
 *    x['call'](...)
 * where x is a NAME node.
 */"
"static Node getPrototypeClassName(Node qName) {
    Node cur = qName;
    while (isGetProp(cur)) {
        if (cur.getLastChild().getString().equals(""prototype"")) {
            return cur.getFirstChild();
        } else {
            cur = cur.getFirstChild();
        }
    }
    return null;
}","public void test408464() throws Throwable {
    Node node0 = new Node(77);
    Node node1 = NodeUtil.newQualifiedNameNode("".prototype"", node0, "".prototype"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertNotNull(node2);
}","/**
 * @return The class name part of a qualified prototype name.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test408465() throws Throwable {
    Node node0 = new Node(77);
    Node node1 = NodeUtil.newQualifiedNameNode("".prototype"", node0, "".prototype"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertTrue(node2.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name
 * without a ""this"" reference, such as <code>a.b.c</code>, but not
 * <code>this.a</code>.
 */"
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty() && !isLabelName(n);
}","public void test409466() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty anonymous function name).
 */"
"static boolean isNew(Node n) {
    return n.getType() == Token.NEW;
}","public void test410467() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isNew(node0);
    assertFalse(boolean0);
}","/**
 * Is this a NEW node?
 */"
"static boolean isNew(Node n) {
    return n.getType() == Token.NEW;
}","public void test411468() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.isNew(node0);
    assertTrue(boolean0);
}","/**
 * Is this a NEW node?
 */"
"static Node getAssignedValue(Node n) {
    Preconditions.checkState(isName(n));
    Node parent = n.getParent();
    if (isVar(parent)) {
        return n.getFirstChild();
    } else if (isAssign(parent) && parent.getFirstChild() == n) {
        return n.getNext();
    } else {
        return null;
    }
}","public void test412469() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newName("">>=Oh38f3Z<hEGe<"", node0, "">>=Oh38f3Z<hEGe<"");
    Node node2 = new Node(30, node0, node1, node0, node1);
    Node node3 = NodeUtil.getAssignedValue(node1);
    assertNull(node3);
}","/**
 * For an assignment or variable declaration get the assigned value.
 * @return The value node representing the new value.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test413470() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""VDFq_J#>ulR_GA"", 89, 1221);
    Node node1 = new Node(118, node0);
    Node node2 = NodeUtil.getAssignedValue(node0);
    assertEquals(1221, node0.getCharno());
}",""
"static Node getAssignedValue(Node n) {
    Preconditions.checkState(isName(n));
    Node parent = n.getParent();
    if (isVar(parent)) {
        return n.getFirstChild();
    } else if (isAssign(parent) && parent.getFirstChild() == n) {
        return n.getNext();
    } else {
        return null;
    }
}","public void test413471() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""VDFq_J#>ulR_GA"", 89, 1221);
    Node node1 = new Node(118, node0);
    Node node2 = NodeUtil.getAssignedValue(node0);
    assertNull(node2);
}","/**
 * For an assignment or variable declaration get the assigned value.
 * @return The value node representing the new value.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test413472() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""VDFq_J#>ulR_GA"", 89, 1221);
    Node node1 = new Node(118, node0);
    Node node2 = NodeUtil.getAssignedValue(node0);
    assertEquals(89, node0.getLineno());
}",""
"static boolean isVarDeclaration(Node n) {
    // There is no need to verify that parent != null because a NAME node
    // always has a parent in a valid parse tree.
    return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;
}","public void test414473() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isVarDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * Is this node the name of a variable being declared?
 *
 * @param n The node
 * @return True if {@code n} is NAME and {@code parent} is VAR
 */"
"static boolean isVarDeclaration(Node n) {
    // There is no need to verify that parent != null because a NAME node
    // always has a parent in a valid parse tree.
    return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;
}","public void test415474() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isVarDeclaration(node1);
    assertFalse(boolean0);
}","/**
 * Is this node the name of a variable being declared?
 *
 * @param n The node
 * @return True if {@code n} is NAME and {@code parent} is VAR
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test415475() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isVarDeclaration(node1);
    assertEquals(1, node1.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test415476() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isVarDeclaration(node1);
    assertEquals(12, node1.getLineno());
}",""
"static boolean isVarDeclaration(Node n) {
    // There is no need to verify that parent != null because a NAME node
    // always has a parent in a valid parse tree.
    return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;
}","public void test416477() throws Throwable {
    Node node0 = Node.newString("""");
    Node node1 = NodeUtil.newVarNode("""", node0);
    Node node2 = NodeUtil.newQualifiedNameNode("""", node1, """");
    node1.addChildToFront(node2);
    boolean boolean0 = NodeUtil.isVarDeclaration(node2);
    assertTrue(boolean0);
}","/**
 * Is this node the name of a variable being declared?
 *
 * @param n The node
 * @return True if {@code n} is NAME and {@code parent} is VAR
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test416478() throws Throwable {
    Node node0 = Node.newString("""");
    Node node1 = NodeUtil.newVarNode("""", node0);
    Node node2 = NodeUtil.newQualifiedNameNode("""", node1, """");
    node1.addChildToFront(node2);
    boolean boolean0 = NodeUtil.isVarDeclaration(node2);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 * @return Whether the node has exactly one child.
 */"
"static boolean isString(Node n) {
    return n.getType() == Token.STRING;
}","public void test417479() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isString(node0);
    assertFalse(boolean0);
}","/**
 * Is this a STRING node?
 */"
"static boolean isString(Node n) {
    return n.getType() == Token.STRING;
}","public void test418480() throws Throwable {
    Node node0 = Node.newString(""undgfined"", 108, 34);
    boolean boolean0 = NodeUtil.isString(node0);
    assertTrue(boolean0);
}","/**
 * Is this a STRING node?
 */"
"static boolean isPrototypePropertyDeclaration(Node n) {
    if (!NodeUtil.isExprAssign(n)) {
        return false;
    }
    return isPrototypeProperty(n.getFirstChild().getFirstChild());
}","public void test419481() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * @return {@code true} if the node an assignment to a prototype property of
 *     some constructor.
 */"
"static boolean isPrototypePropertyDeclaration(Node n) {
    if (!NodeUtil.isExprAssign(n)) {
        return false;
    }
    return isPrototypeProperty(n.getFirstChild().getFirstChild());
}","public void test420482() throws Throwable {
    Node node0 = Node.newString(86, ""}9 #'w!Aq|"", 95, 3165);
    Node node1 = NodeUtil.newExpr(node0);
    // Undeclared exception!
    try {
        NodeUtil.isPrototypePropertyDeclaration(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return {@code true} if the node an assignment to a prototype property of
 *     some constructor.
 */"
"static boolean isExprAssign(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.ASSIGN;
}","public void test421483() throws Throwable {
    Node node0 = Node.newNumber((double) 43);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprAssign(node1);
    assertFalse(boolean0);
}","/**
 * Is this node an assignment expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is ASSIGN
 */"
"public int getType() {
    return type;
}","public void test421484() throws Throwable {
    Node node0 = Node.newNumber((double) 43);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprAssign(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean isAssign(Node n) {
    return n.getType() == Token.ASSIGN;
}","public void test422485() throws Throwable {
    Node node0 = new Node(86, 86, 86);
    boolean boolean0 = NodeUtil.isAssign(node0);
    assertTrue(boolean0);
}","/**
 * Is this an ASSIGN node?
 */"
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test423486() throws Throwable {
    Node node0 = Node.newString((-1830), ""!="", (-1830), (-1830));
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test424487() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertTrue(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"static boolean isForIn(Node n) {
    return n.getType() == Token.FOR && n.getChildCount() == 3;
}","public void test425488() throws Throwable {
    Node node0 = new Node(73, 73, 73);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a FOR-IN loop.
 */"
"static boolean isForIn(Node n) {
    return n.getType() == Token.FOR && n.getChildCount() == 3;
}","public void test426489() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a FOR-IN loop.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test427490() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""5Z~p\""!~"", node0, ""5Z~p\""!~"");
    node0.addChildrenToFront(node1);
    assertEquals(115, node1.getCharno());
}",""
"static boolean isForIn(Node n) {
    return n.getType() == Token.FOR && n.getChildCount() == 3;
}","public void test427491() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""5Z~p\""!~"", node0, ""5Z~p\""!~"");
    node0.addChildrenToFront(node1);
    Node node2 = Node.newString(""5Z~p\""!~"", 40, 29);
    node0.addChildToBack(node2);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node represents a FOR-IN loop.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test428492() throws Throwable {
    Node node0 = new Node(121);
    node0.setType(113);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test429493() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test430494() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test431495() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test432496() throws Throwable {
    Node node0 = Node.newString(113, ""rzt~p0s"");
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test433497() throws Throwable {
    Node node0 = new Node(115);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test434498() throws Throwable {
    Node node0 = Node.newString(114, ""bM(~_-_iESpMr"", 114, 114);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test435499() throws Throwable {
    Node node0 = new Node(110);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test436500() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test437501() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test438502() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    Node node1 = new Node(108, node0, node0, node0, 1964, 85);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test439503() throws Throwable {
    Node node0 = new Node(110);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test440504() throws Throwable {
    Node node0 = Node.newString(111, ""bM(~_-_iESpMr"", 111, 111);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test441505() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test442506() throws Throwable {
    Node node0 = new Node(113, 113, 113);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test443507() throws Throwable {
    Node node0 = Node.newString(114, ""bM(~_-_iESpMr"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test444508() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = new Node(115, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test445509() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test446510() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Z"", 133, 133);
    Node node1 = new Node(120, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test446511() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Z"", 133, 133);
    Node node1 = new Node(120, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertEquals(133, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test446512() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Z"", 133, 133);
    Node node1 = new Node(120, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertEquals(133, node0.getCharno());
}",""
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test447513() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = new Node(126, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test448514() throws Throwable {
    Node node0 = new Node(106, 106, 106);
    node0.setType(77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test449515() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = new Node(108, (-563), 47);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test450516() throws Throwable {
    Node node0 = new Node(111);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test451517() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test452518() throws Throwable {
    Node node0 = new Node(113, 113, 113);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test453519() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test454520() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test455521() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test456522() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test457523() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    Node node1 = new Node(119, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test458524() throws Throwable {
    Node node0 = new Node((-2705), (byte) (-13), (-1600));
    Node node1 = new Node(114, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test459525() throws Throwable {
    Node node0 = new Node(108, 108, 2734);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test460526() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test461527() throws Throwable {
    Node node0 = new Node(106, 106, 106);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""rztO~p0s"", node0, ""rztO~p0s"");
    node0.addChildrenToFront(node1);
    assertEquals(106, node1.getCharno());
}",""
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test461528() throws Throwable {
    Node node0 = new Node(106, 106, 106);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""rztO~p0s"", node0, ""rztO~p0s"");
    node0.addChildrenToFront(node1);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test462529() throws Throwable {
    Node node0 = new Node(120);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test463530() throws Throwable {
    Node node0 = new Node(110);
    Node node1 = new Node(110, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test464531() throws Throwable {
    Node node0 = new Node(108, 121, 125);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test465532() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // malformed 'for' statement FOR 5Z~p\""!~ 115
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test466533() throws Throwable {
    Node node0 = new Node(109);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ELSE does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test467534() throws Throwable {
    Node node0 = new Node(110);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // SWITCH does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test468535() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test469536() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // DEFAULT 112 does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test470537() throws Throwable {
    Node node0 = new Node(113, 37, 113);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test471538() throws Throwable {
    Node node0 = new Node(114);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test472539() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // VOID does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test473540() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = NodeUtil.newName(""5Z~p\""!~"", node0, ""5Z~p\""!~"");
    node0.addChildrenToFront(node1);
    Node node2 = Node.newString(""5Z~p\""!~"", 40, 29);
    node0.addChildToBack(node2);
    node0.addChildrenToBack(node0);
    Node node3 = NodeUtil.getConditionExpression(node0);
    assertNull(node3);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test474541() throws Throwable {
    Node node0 = Node.newString(115, ""5Z~p\""!~"", 115, 115);
    Node node1 = Node.newString((-554), ""C"");
    node0.addChildrenToFront(node1);
    Node node2 = NodeUtil.newName(""5Z~p\""!~"", node0, ""5Z~p\""!~"");
    node0.addChildrenToFront(node2);
    Node node3 = Node.newString(""5Z~p\""!~"", 40, 29);
    node0.addChildToBack(node3);
    node0.addChildrenToBack(node0);
    Node node4 = NodeUtil.getConditionExpression(node0);
    assertNotSame(node0, node4);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test475542() throws Throwable {
    Node node0 = Node.newString(132, ""undgfined"");
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test476543() throws Throwable {
    Node node0 = new Node(111);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (NodeUtil.isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else if (parent.getType() == Token.LABEL && block.hasOneChild()) {
        parent.replaceChild(block, block.removeFirstChild());
        return true;
    } else {
        return false;
    }
}","public void test477544() throws Throwable {
    Node node0 = new Node(125);
    node0.addChildToBack(node0);
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return checkForStateChangeHelper(n, true);
}","public void test478545() throws Throwable {
    Node node0 = new Node(105, 103, 103);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isFunctionAnonymous(Node n) {
    return !isStatement(n);
}","public void test479546() throws Throwable {
    Node node0 = new Node(126);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.isFunctionAnonymous(node0);
    assertFalse(boolean0);
}","/**
 * Is a FUNCTION node an anonymous function? An anonymous function is one that
 * has either no name or a name that is not added to the current scope.
 *
 * <p>Some examples of anonymous functions:
 * <pre>
 * function () {}
 * (function f() {})()
 * [ function f() {} ]
 * var f = function f() {};
 * for (function f() {};;) {}
 * </pre>
 *
 * <p>Some examples of functions that are <em>not</em> anonymous:
 * <pre>
 * function f() {}
 * if (x); else function f() {}
 * for (;;) { function f() {} }
 * </pre>
 *
 * @param n A FUNCTION node
 * @return Whether n is an anonymous function
 */"
"static boolean isStatement(Node n) {
    Node parent = n.getParent();
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node, for instance,
    // is either part of an expression (as a anonymous function) or as
    // a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getType()) {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
            return true;
        default:
            return false;
    }
}","public void test480547() throws Throwable {
    Node node0 = new Node(125);
    Node node1 = new Node(132, (-1412), 31);
    node1.addChildToBack(node0);
    boolean boolean0 = NodeUtil.isStatement(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is used as a statement.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test481548() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty() && !isLabelName(n);
}","public void test482549() throws Throwable {
    Node node0 = Node.newNumber((double) 72);
    Node node1 = NodeUtil.newName("""", node0);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty anonymous function name).
 */"
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty() && !isLabelName(n);
}","public void test483550() throws Throwable {
    Node node0 = Node.newString(116, ""oS"", 116, 116);
    Node node1 = NodeUtil.newQualifiedNameNode(""oS"", node0, ""oS"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty anonymous function name).
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test483551() throws Throwable {
    Node node0 = Node.newString(116, ""oS"", 116, 116);
    Node node1 = NodeUtil.newQualifiedNameNode(""oS"", node0, ""oS"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name
 * without a ""this"" reference, such as <code>a.b.c</code>, but not
 * <code>this.a</code>.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test483552() throws Throwable {
    Node node0 = Node.newString(116, ""oS"", 116, 116);
    Node node1 = NodeUtil.newQualifiedNameNode(""oS"", node0, ""oS"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertEquals(116, node1.getCharno());
}",""
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty() && !isLabelName(n);
}","public void test484553() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""JSR"", node0, ""JSR"");
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertTrue(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty anonymous function name).
 */"
"static boolean isLabelName(Node n) {
    if (n != null && n.getType() == Token.NAME) {
        Node parent = n.getParent();
        switch(parent.getType()) {
            case Token.LABEL:
            case Token.BREAK:
            case Token.CONTINUE:
                if (n == parent.getFirstChild()) {
                    return true;
                }
        }
    }
    return false;
}","public void test485554() throws Throwable {
    boolean boolean0 = NodeUtil.isLabelName((Node) null);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"static boolean isLabelName(Node n) {
    if (n != null && n.getType() == Token.NAME) {
        Node parent = n.getParent();
        switch(parent.getType()) {
            case Token.LABEL:
            case Token.BREAK:
            case Token.CONTINUE:
                if (n == parent.getFirstChild()) {
                    return true;
                }
        }
    }
    return false;
}","public void test486555() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isLabelName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test487556() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertEquals(12, node1.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test487557() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertEquals(1, node1.getCharno());
}",""
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty() && !isLabelName(n);
}","public void test487558() throws Throwable {
    Node node0 = new Node(117);
    Node node1 = NodeUtil.newQualifiedNameNode(""@"", 12, 1);
    node0.addChildrenToFront(node1);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty anonymous function name).
 */"
"static boolean isTryFinallyNode(Node parent, Node child) {
    return parent.getType() == Token.TRY && parent.getChildCount() == 3 && child == parent.getLastChild();
}","public void test488559() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    node0.setType(77);
    boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
    assertFalse(boolean0);
}","/**
 * Whether the child node is the FINALLY block of a try.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test489560() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""AiD,'e~S~8<Dk"", node0, ""AiD,'e~S~8<Dk"");
    node0.addChildrenToFront(node1);
    assertEquals(117, node1.getCharno());
}",""
"static boolean isTryFinallyNode(Node parent, Node child) {
    return parent.getType() == Token.TRY && parent.getChildCount() == 3 && child == parent.getLastChild();
}","public void test489561() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""AiD,'e~S~8<Dk"", node0, ""AiD,'e~S~8<Dk"");
    node0.addChildrenToFront(node1);
    Node node2 = new Node(7, 29, 24);
    node0.addChildToBack(node2);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
    assertTrue(boolean0);
}","/**
 * Whether the child node is the FINALLY block of a try.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test490562() throws Throwable {
    Node node0 = Node.newString(115, ""5B~p\""!s"", 115, 115);
    node0.setType(77);
    Node node1 = NodeUtil.newName(""5B~p\""!s"", node0, ""5B~p\""!s"");
    node0.addChildrenToFront(node1);
    Node node2 = Node.newString(""5B~p\""!s"", 40, 29);
    node0.addChildToBack(node2);
    node0.addChildrenToBack(node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node2);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: STRING 5B~p\""!s 40 of TRY 5B~p\""!s 115
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test491563() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""S{stFDph!"", node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // node is not a child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test492564() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newVarNode(""S{stFDph!"", node0);
    node1.addChildToBack(node1);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // node is not a child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"public int getType() {
    return type;
}","public void test493565() throws Throwable {
    Node node0 = new Node(125);
    Node node1 = new Node(3220);
    NodeUtil.removeChild(node1, node0);
    assertEquals(125, node0.getType());
}",""
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test494566() throws Throwable {
    Node node0 = new Node(126);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: LABEL of LABEL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test495567() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = new Node(126, node0, node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test496568() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: FOR 115 of FOR 115
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (NodeUtil.isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else if (parent.getType() == Token.LABEL && block.hasOneChild()) {
        parent.replaceChild(block, block.removeFirstChild());
        return true;
    } else {
        return false;
    }
}","public void test497569() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (NodeUtil.isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else if (parent.getType() == Token.LABEL && block.hasOneChild()) {
        parent.replaceChild(block, block.removeFirstChild());
        return true;
    } else {
        return false;
    }
}","public void test498570() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    Node node1 = new Node(40, node0, node0, node0, 49, 45);
    boolean boolean0 = NodeUtil.tryMergeBlock(node0);
    assertFalse(boolean0);
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean isCall(Node n) {
    return n.getType() == Token.CALL;
}","public void test499571() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this a CALL node?
 */"
"static boolean isCall(Node n) {
    return n.getType() == Token.CALL;
}","public void test500572() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.isCall(node0);
    assertTrue(boolean0);
}","/**
 * Is this a CALL node?
 */"
"static boolean isVarArgsFunction(Node function) {
    Preconditions.checkArgument(isFunction(function));
    return NodeUtil.isNameReferenced(function.getLastChild(), ""arguments"", Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));
}","public void test501573() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.isVarArgsFunction(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines if a function takes a variable number of arguments by
 * looking for references to the ""arguments"" var_args object.
 */"
"static boolean isThis(Node node) {
    return node.getType() == Token.THIS;
}","public void test502574() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isThis(node0);
    assertFalse(boolean0);
}","/**
 * Is this a THIS node?
 */"
"static boolean isThis(Node node) {
    return node.getType() == Token.THIS;
}","public void test503575() throws Throwable {
    Node node0 = new Node(42);
    boolean boolean0 = NodeUtil.isThis(node0);
    assertTrue(boolean0);
}","/**
 * Is this a THIS node?
 */"
"static boolean isHoistedFunctionDeclaration(Node n) {
    return NodeUtil.isFunctionDeclaration(n) && (n.getParent().getType() == Token.SCRIPT || n.getParent().getParent().getType() == Token.FUNCTION);
}","public void test504576() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * Is this node a hoisted function declaration? A function declaration in the
 * scope root is hoisted to the top of the scope.
 * See {@link #isFunctionDeclaration}).
 */"
"public String getFunctionName() {
    return functionName;
}","public void test505577() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminEted.re.it"", linkedList0, node0, 34, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(""msg.unterminEted.re.it"", functionNode0.getFunctionName());
}",""
"static boolean isHoistedFunctionDeclaration(Node n) {
    return NodeUtil.isFunctionDeclaration(n) && (n.getParent().getType() == Token.SCRIPT || n.getParent().getParent().getType() == Token.FUNCTION);
}","public void test505578() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminEted.re.it"", linkedList0, node0, 34, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertFalse(boolean0);
}","/**
 * Is this node a hoisted function declaration? A function declaration in the
 * scope root is hoisted to the top of the scope.
 * See {@link #isFunctionDeclaration}).
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test505579() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminEted.re.it"", linkedList0, node0, 34, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(40, functionNode0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test505580() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminEted.re.it"", linkedList0, node0, 34, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(34, functionNode0.getLineno());
}",""
"static boolean isHoistedFunctionDeclaration(Node n) {
    return NodeUtil.isFunctionDeclaration(n) && (n.getParent().getType() == Token.SCRIPT || n.getParent().getParent().getType() == Token.FUNCTION);
}","public void test506581() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertTrue(boolean0);
}","/**
 * Is this node a hoisted function declaration? A function declaration in the
 * scope root is hoisted to the top of the scope.
 * See {@link #isFunctionDeclaration}).
 */"
"public String getFunctionName() {
    return functionName;
}","public void test506582() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(""ak7@j&'.a"", functionNode0.getFunctionName());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test506583() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(46, functionNode0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test506584() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 9, 46);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    assertEquals(9, functionNode0.getLineno());
}",""
"static boolean isAnonymousFunction(Node n) {
    return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);
}","public void test507585() throws Throwable {
    Node node0 = new Node(117);
    boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
    assertFalse(boolean0);
}","/**
 * Is this node an anonymous function? An anonymous function is one that has
 * either no name or a name that is not added to the current scope (see
 * {@link #isFunctionAnonymous}).
 */"
"static boolean isAnonymousFunction(Node n) {
    return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);
}","public void test508586() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    // Undeclared exception!
    try {
        NodeUtil.isAnonymousFunction(functionNode0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Is this node an anonymous function? An anonymous function is one that has
 * either no name or a name that is not added to the current scope (see
 * {@link #isFunctionAnonymous}).
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test509587() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(426, functionNode0.getCharno());
}",""
"static boolean isAnonymousFunction(Node n) {
    return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);
}","public void test509588() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertFalse(boolean0);
}","/**
 * Is this node an anonymous function? An anonymous function is one that has
 * either no name or a name that is not added to the current scope (see
 * {@link #isFunctionAnonymous}).
 */"
"public String getFunctionName() {
    return functionName;
}","public void test509589() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(""ak7@j&'.a"", functionNode0.getFunctionName());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test509590() throws Throwable {
    Node node0 = new Node(125);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""ak7@j&'.a"", linkedList0, node0, 2056, 426);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(2056, functionNode0.getLineno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test510591() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(40, functionNode0.getLineno());
}",""
"static boolean isAnonymousFunction(Node n) {
    return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);
}","public void test510592() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertTrue(boolean0);
}","/**
 * Is this node an anonymous function? An anonymous function is one that has
 * either no name or a name that is not added to the current scope (see
 * {@link #isFunctionAnonymous}).
 */"
"public String getFunctionName() {
    return functionName;
}","public void test510593() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(""msg.unterminated.re.lit"", functionNode0.getFunctionName());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test510594() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 40, 40);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    assertEquals(40, functionNode0.getCharno());
}",""
"static boolean isFunctionObjectApply(Node callNode) {
    return isObjectCallMethod(callNode, ""apply"");
}","public void test511595() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.apply(...)
 *    x['apply'](...)
 */"
"static boolean isFunctionObjectApply(Node callNode) {
    return isObjectCallMethod(callNode, ""apply"");
}","public void test512596() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = Node.newString(33, ""j"", 13, 42);
    node1.addChildToBack(node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.apply(...)
 *    x['apply'](...)
 */"
"static boolean isLhs(Node n, Node parent) {
    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) || parent.getType() == Token.VAR;
}","public void test513597() throws Throwable {
    Node node0 = new Node(86);
    boolean boolean0 = NodeUtil.isLhs(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"static boolean isLhs(Node n, Node parent) {
    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) || parent.getType() == Token.VAR;
}","public void test514598() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = NodeUtil.isLhs(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"static boolean isObjectLitKey(Node node, Node parent) {
    if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT) {
        int index = 0;
        for (Node current = parent.getFirstChild(); current != null; current = current.getNext()) {
            if (current == node) {
                return index % 2 == 0;
            }
            index++;
        }
    }
    return false;
}","public void test515599() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal key
 * (e.g. key1 in {key1: value1, key2: value2}).
 *
 * @param node A node
 * @param parent The node's parent
 */"
"static boolean isObjectLitKey(Node node, Node parent) {
    if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT) {
        int index = 0;
        for (Node current = parent.getFirstChild(); current != null; current = current.getNext()) {
            if (current == node) {
                return index % 2 == 0;
            }
            index++;
        }
    }
    return false;
}","public void test516600() throws Throwable {
    Node node0 = Node.newString(""MbtwtLoi"");
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal key
 * (e.g. key1 in {key1: value1, key2: value2}).
 *
 * @param node A node
 * @param parent The node's parent
 */"
"static boolean isObjectLitKey(Node node, Node parent) {
    if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT) {
        int index = 0;
        for (Node current = parent.getFirstChild(); current != null; current = current.getNext()) {
            if (current == node) {
                return index % 2 == 0;
            }
            index++;
        }
    }
    return false;
}","public void test517604() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""msg.unterminated.re.lit"", linkedList0, node0, 25, 25);
    node0.addChildrenToFront(functionNode0);
    Node node1 = Node.newString(""msg.unterminated.re.lit"");
    boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal key
 * (e.g. key1 in {key1: value1, key2: value2}).
 *
 * @param node A node
 * @param parent The node's parent
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test518605() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(9);
    assertEquals(""|"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test519606() throws Throwable {
    String string0 = NodeUtil.opToStr(19);
    assertEquals("">>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test520607() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(10);
    assertEquals(""^"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test521608() throws Throwable {
    String string0 = NodeUtil.opToStr(11);
    assertEquals(""&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test522609() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(12);
    assertEquals(""=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test523610() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(13);
    assertEquals(""!="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test524611() throws Throwable {
    String string0 = NodeUtil.opToStr(14);
    assertEquals(""<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test525612() throws Throwable {
    String string0 = NodeUtil.opToStr(15);
    assertEquals(""<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test526613() throws Throwable {
    String string0 = NodeUtil.opToStr(16);
    assertEquals("">"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test527614() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(17);
    assertEquals("">="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test528615() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(18);
    assertEquals(""<<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test529616() throws Throwable {
    String string0 = NodeUtil.opToStr(20);
    assertEquals("">>>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test530617() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(21);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test531618() throws Throwable {
    String string0 = NodeUtil.opToStr(22);
    assertEquals(""-"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test532619() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(23);
    assertEquals(""*"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test533620() throws Throwable {
    String string0 = NodeUtil.opToStr(24);
    assertEquals(""/"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test534621() throws Throwable {
    String string0 = NodeUtil.opToStr(25);
    assertEquals(""%"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test535622() throws Throwable {
    String string0 = NodeUtil.opToStr(26);
    assertEquals(""!"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test536623() throws Throwable {
    String string0 = NodeUtil.opToStr(27);
    assertEquals(""~"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test537624() throws Throwable {
    String string0 = NodeUtil.opToStr(28);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test538625() throws Throwable {
    String string0 = NodeUtil.opToStr(29);
    assertEquals(""-"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test539627() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(30);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 30: NEW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test540628() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(31);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 31: DELPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test541629() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(32);
    assertEquals(""typeof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test542630() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(33);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 33: GETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test543631() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 34: SETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test544632() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(35);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 35: GETELEM
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test545633() throws Throwable {
    String string0 = NodeUtil.opToStr(36);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test546634() throws Throwable {
    String string0 = NodeUtil.opToStr(37);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test547635() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(38);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 38: NAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test548636() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(39);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 39: NUMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test549637() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(40);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 40: STRING
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test550638() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(41);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 41: NULL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test551639() throws Throwable {
    String string0 = NodeUtil.opToStr(42);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test552640() throws Throwable {
    String string0 = NodeUtil.opToStr(43);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test553641() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(44);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 44: TRUE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test554642() throws Throwable {
    String string0 = NodeUtil.opToStr(45);
    assertEquals(""==="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test555643() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(46);
    assertEquals(""!=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test556644() throws Throwable {
    String string0 = NodeUtil.opToStr(47);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test557645() throws Throwable {
    String string0 = NodeUtil.opToStr(48);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test558646() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 49: THROW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test559647() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 50: RETHROW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test560648() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(51);
    assertEquals(""in"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test561649() throws Throwable {
    String string0 = NodeUtil.opToStr(52);
    assertEquals(""instanceof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test562650() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 53: LOCAL_LOAD
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test563651() throws Throwable {
    String string0 = NodeUtil.opToStr(54);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test564652() throws Throwable {
    String string0 = NodeUtil.opToStr(55);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test565653() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 56: CATCH_SCOPE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test566654() throws Throwable {
    String string0 = NodeUtil.opToStr(57);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test567655() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 58: ENUM_INIT_VALUES
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test568656() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 59: ENUM_NEXT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test569657() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 60: ENUM_ID
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test570658() throws Throwable {
    String string0 = NodeUtil.opToStr(61);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test571659() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 62: RETURN_RESULT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test572660() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(63);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 63: ARRAYLIT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test573661() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(64);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 64: OBJECTLIT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test574662() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(65);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 65: GET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test575663() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 66: SET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test576664() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 67: DEL_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test577665() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 68: REF_CALL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test578666() throws Throwable {
    String string0 = NodeUtil.opToStr(69);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test579667() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 70: DEFAULTNAMESPACE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test580668() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(71);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 71: ESCXMLATTR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test581669() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 72: ESCXMLTEXT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test582670() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 73: REF_MEMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test583671() throws Throwable {
    String string0 = NodeUtil.opToStr(74);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test584672() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 75: REF_NAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test585673() throws Throwable {
    String string0 = NodeUtil.opToStr(76);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test586674() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 77: TRY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test587675() throws Throwable {
    String string0 = NodeUtil.opToStr(78);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test588676() throws Throwable {
    String string0 = NodeUtil.opToStr(79);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test589677() throws Throwable {
    String string0 = NodeUtil.opToStr(80);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test590678() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 81: LC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test591679() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 82: RC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test592680() throws Throwable {
    String string0 = NodeUtil.opToStr(83);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test593681() throws Throwable {
    String string0 = NodeUtil.opToStr(84);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test594682() throws Throwable {
    String string0 = NodeUtil.opToStr(85);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test595683() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(86);
    assertEquals(""="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test596684() throws Throwable {
    String string0 = NodeUtil.opToStr(87);
    assertEquals(""|="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test597685() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(88);
    assertEquals(""^="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test598686() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(89);
    assertEquals(""&="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test599687() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(90);
    assertEquals(""<<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test600688() throws Throwable {
    String string0 = NodeUtil.opToStr(91);
    assertEquals("">>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test601689() throws Throwable {
    String string0 = NodeUtil.opToStr(92);
    assertEquals("">>>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test602690() throws Throwable {
    String string0 = NodeUtil.opToStr(93);
    assertEquals(""+="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test603691() throws Throwable {
    String string0 = NodeUtil.opToStr(94);
    assertEquals(""-="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test604692() throws Throwable {
    String string0 = NodeUtil.opToStr(95);
    assertEquals(""*="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test605693() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(96);
    assertEquals(""/="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test606694() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(97);
    assertEquals(""%="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test607695() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(98);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 98: HOOK
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test608696() throws Throwable {
    String string0 = NodeUtil.opToStr(99);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test609697() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(100);
    assertEquals(""||"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test610698() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(101);
    assertEquals(""&&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test611699() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(102);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 102: INC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test612700() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(103);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 103: DEC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test613701() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 104: DOT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test614702() throws Throwable {
    String string0 = NodeUtil.opToStr(105);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test615703() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 106: EXPORT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test616704() throws Throwable {
    String string0 = NodeUtil.opToStr(107);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test617705() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(108);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 108: IF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test618706() throws Throwable {
    String string0 = NodeUtil.opToStr(109);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test619707() throws Throwable {
    String string0 = NodeUtil.opToStr(110);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test620708() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 111: CASE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test621709() throws Throwable {
    String string0 = NodeUtil.opToStr(112);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test622710() throws Throwable {
    String string0 = NodeUtil.opToStr(113);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test623711() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 114: DO
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test624712() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 115: FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test625713() throws Throwable {
    String string0 = NodeUtil.opToStr(116);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test626714() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 117: CONTINUE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test627715() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 118: VAR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test628716() throws Throwable {
    String string0 = NodeUtil.opToStr((byte) 119);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test629717() throws Throwable {
    String string0 = NodeUtil.opToStr(120);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test630718() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 121: FINALLY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test631719() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(122);
    assertEquals(""void"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test632720() throws Throwable {
    String string0 = NodeUtil.opToStr(764);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static void redeclareVarsInsideBranch(Node branch) {
    Collection<Node> vars = getVarsDeclaredInBranch(branch);
    if (vars.isEmpty()) {
        return;
    }
    Node parent = getAddingRoot(branch);
    for (Node nameNode : vars) {
        Node var = new Node(Token.VAR, Node.newString(Token.NAME, nameNode.getString()));
        copyNameAnnotations(nameNode, var.getFirstChild());
        parent.addChildToFront(var);
    }
}","public void test633721() throws Throwable {
    Node node0 = NodeUtil.newVarNode("""", (Node) null);
    // Undeclared exception!
    try {
        NodeUtil.redeclareVarsInsideBranch(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Given a node tree, finds all the VAR declarations in that tree that are
 * not in an inner scope. Then adds a new VAR node at the top of the current
 * scope that redeclares them, if necessary.
 */"
"static void copyNameAnnotations(Node source, Node destination) {
    if (source.getBooleanProp(Node.IS_CONSTANT_NAME)) {
        destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);
    }
}","public void test634722() throws Throwable {
    Node node0 = new Node(77);
    NodeUtil.copyNameAnnotations(node0, (Node) null);
    assertEquals(4, Node.ENUM_PROP);
}","/**
 * Copy any annotations that follow a named value.
 * @param source
 * @param destination
 */"
"public static FunctionNode newFunctionNode(String name, List<Node> params, Node body, int lineno, int charno) {
    Node parameterParen = new Node(Token.LP, lineno, charno);
    for (Node param : params) {
        parameterParen.addChildToBack(param);
    }
    FunctionNode function = new FunctionNode(name, lineno, charno);
    function.addChildrenToBack(Node.newString(Token.NAME, name, lineno, charno));
    function.addChildToBack(parameterParen);
    function.addChildToBack(body);
    return function;
}","public void test635723() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    linkedList0.add(node0);
    // Undeclared exception!
    try {
        NodeUtil.newFunctionNode(""msg.unterminted.re.it"", linkedList0, node0, 34, 40);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Creates function name(params_0, ..., params_n) { body }.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    NodeUtil.isLatin(name);
}","public void test636724() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""Math"");
    assertTrue(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    NodeUtil.isLatin(name);
}","public void test637725() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName("">>>="");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    NodeUtil.isLatin(name);
}","public void test638726() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""interface"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test639727() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Infinity"", 29, 29);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(29, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test639728() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""Infinity"", 29, 29);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(29, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test640729() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    NodeUtil.redeclareVarsInsideBranch(node1);
    assertEquals(96, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test640730() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""second new child has existing parent"", 96, 96);
    Node node1 = new Node(96, node0, node0, node0, node0);
    NodeUtil.redeclareVarsInsideBranch(node1);
    assertEquals(96, node0.getLineno());
}",""
"static void redeclareVarsInsideBranch(Node branch) {
    Collection<Node> vars = getVarsDeclaredInBranch(branch);
    if (vars.isEmpty()) {
        return;
    }
    Node parent = getAddingRoot(branch);
    for (Node nameNode : vars) {
        Node var = new Node(Token.VAR, Node.newString(Token.NAME, nameNode.getString()));
        copyNameAnnotations(nameNode, var.getFirstChild());
        parent.addChildToFront(var);
    }
}","public void test641731() throws Throwable {
    Node node0 = new Node(125);
    Node node1 = NodeUtil.newVarNode(""S{stFDph!"", node0);
    node0.addChildToBack(node1);
    // Undeclared exception!
    NodeUtil.redeclareVarsInsideBranch(node1);
}","/**
 * Given a node tree, finds all the VAR declarations in that tree that are
 * not in an inner scope. Then adds a new VAR node at the top of the current
 * scope that redeclares them, if necessary.
 */"
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test642732() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""9"", 56, 56);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test642733() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""9"", 56, 56);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(56, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test642734() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode(""9"", 56, 56);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(56, node0.getCharno());
}",""
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test643735() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test644736() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".prototype."", 89, 33);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(33, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test644737() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".prototype."", 89, 33);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(89, node0.getLineno());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test644738() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".prototype."", 89, 33);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(2, node0.getChildCount());
}",""
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test644739() throws Throwable {
    Node node0 = NodeUtil.newQualifiedNameNode("".prototype."", 89, 33);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertTrue(boolean0);
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test645740() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name
 * without a ""this"" reference, such as <code>a.b.c</code>, but not
 * <code>this.a</code>.
 */"
"static Node getPrototypeClassName(Node qName) {
    Node cur = qName;
    while (isGetProp(cur)) {
        if (cur.getLastChild().getString().equals(""prototype"")) {
            return cur.getFirstChild();
        } else {
            cur = cur.getFirstChild();
        }
    }
    return null;
}","public void test645741() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertNull(node2);
}","/**
 * @return The class name part of a qualified prototype name.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test645742() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertEquals(2, node1.getChildCount());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test645743() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    Node node1 = NodeUtil.newQualifiedNameNode(""com.googl.commn.collect.Iterables"", node0, ""com.googl.commn.collect.Iterables"");
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertTrue(node1.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such
 * as <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test646744() throws Throwable {
    Node node0 = new Node(3674, (-986), 3674);
    Node node1 = NodeUtil.newQualifiedNameNode(""cases"", node0, ""EoSBc8"");
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""EoSBc8"");
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name
 * without a ""this"" reference, such as <code>a.b.c</code>, but not
 * <code>this.a</code>.
 */"
"static boolean isNameReferenced(Node node, String name) {
    return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());
}","public void test646745() throws Throwable {
    Node node0 = new Node(3674, (-986), 3674);
    Node node1 = NodeUtil.newQualifiedNameNode(""cases"", node0, ""EoSBc8"");
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""EoSBc8"");
    assertFalse(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test647746() throws Throwable {
    Node node0 = new Node(105);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 * @return Whether the node has exactly one child.
 */"
"static boolean has(Node node, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    if (pred.apply(node)) {
        return true;
    }
    if (!traverseChildrenPred.apply(node)) {
        return false;
    }
    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
        if (has(c, pred, traverseChildrenPred)) {
            return true;
        }
    }
    return false;
}","public void test648747() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(48);
    boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
    assertFalse(boolean0);
}","/**
 * @return Whether the predicate is true for the node or any of its children.
 */"
"static boolean containsType(Node node, int type) {
    return containsType(node, type, Predicates.<Node>alwaysTrue());
}","public void test649748() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    boolean boolean0 = NodeUtil.containsType(node0, 39);
    assertTrue(boolean0);
}","/**
 * @return true if n or any of its children are of the specified type
 */"
"static int getNameReferenceCount(Node node, String name) {
    return getCount(node, new MatchNameNode(name));
}","public void test650749() throws Throwable {
    Node[] nodeArray0 = new Node[2];
    Node node0 = Node.newString((-5426), ""H:f"");
    Node node1 = NodeUtil.newName(""H:f"", node0);
    nodeArray0[1] = node1;
    int int0 = NodeUtil.getNameReferenceCount(nodeArray0[1], ""H:f"");
    assertEquals(1, int0);
}","/**
 * Finds the number of times a simple name is referenced within the node tree.
 */"
"static void visitPostOrder(Node node, Visitor vistor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, vistor, traverseChildrenPred);
        }
    }
    vistor.visit(node);
}","public void test651750() throws Throwable {
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(90);
    Node node0 = new Node(90, 90, 90);
    Node node1 = NodeUtil.newQualifiedNameNode(""Nf\""sYV"", 8192, 1);
    node0.addChildToFront(node1);
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * A post-order traversal, calling Vistor.visit for each child matching
 * the predicate.
 */"
"static void visitPostOrder(Node node, Visitor vistor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, vistor, traverseChildrenPred);
        }
    }
    vistor.visit(node);
}","public void test652751() throws Throwable {
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(90);
    Node node0 = new Node(90, 90, 90);
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * A post-order traversal, calling Vistor.visit for each child matching
 * the predicate.
 */"
"static boolean hasFinally(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getChildCount() == 3;
}","public void test653752() throws Throwable {
    Node node0 = new Node(47);
    // Undeclared exception!
    try {
        NodeUtil.hasFinally(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether a TRY node has a finally block.
 */"
"static boolean hasFinally(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getChildCount() == 3;
}","public void test654753() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.hasFinally(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether a TRY node has a finally block.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test655754() throws Throwable {
    Node node0 = new Node(77);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    node0.addChildrenToFront(node1);
    LinkedList<Node> linkedList1 = new LinkedList<Node>();
    Node node2 = new Node((-1), 2, (-1));
    node0.addChildToBack(node2);
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""C'Q)FG,hx*m2XE"", linkedList1, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(1, functionNode0.getCharno());
}",""
"public String getFunctionName() {
    return functionName;
}","public void test655755() throws Throwable {
    Node node0 = new Node(77);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    node0.addChildrenToFront(node1);
    LinkedList<Node> linkedList1 = new LinkedList<Node>();
    Node node2 = new Node((-1), 2, (-1));
    node0.addChildToBack(node2);
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""C'Q)FG,hx*m2XE"", linkedList1, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(""C'Q)FG,hx*m2XE"", functionNode0.getFunctionName());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test655756() throws Throwable {
    Node node0 = new Node(77);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    node0.addChildrenToFront(node1);
    LinkedList<Node> linkedList1 = new LinkedList<Node>();
    Node node2 = new Node((-1), 2, (-1));
    node0.addChildToBack(node2);
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""C'Q)FG,hx*m2XE"", linkedList1, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    assertEquals(2, functionNode0.getLineno());
}",""
"static boolean hasFinally(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getChildCount() == 3;
}","public void test655757() throws Throwable {
    Node node0 = new Node(77);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    node0.addChildrenToFront(node1);
    LinkedList<Node> linkedList1 = new LinkedList<Node>();
    Node node2 = new Node((-1), 2, (-1));
    node0.addChildToBack(node2);
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""C'Q)FG,hx*m2XE"", linkedList1, node0, 2, 1);
    node0.addChildrenToFront(functionNode0);
    boolean boolean0 = NodeUtil.hasFinally(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether a TRY node has a finally block.
 */"
"static Node getCatchBlock(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getFirstChild().getNext();
}","public void test656758() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return The BLOCK node containing the CATCH node (if any)
 * of a TRY.
 */"
"static Node getCatchBlock(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getFirstChild().getNext();
}","public void test657759() throws Throwable {
    Node node0 = new Node(77);
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The BLOCK node containing the CATCH node (if any)
 * of a TRY.
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test658760() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.hasCatchHandler(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test659761() throws Throwable {
    Node node0 = new Node(125);
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test660762() throws Throwable {
    Node node0 = new Node(125);
    node0.addChildToBack(node0);
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"static Node getFnParameters(Node fnNode) {
    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]
    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
    return fnNode.getFirstChild().getNext();
}","public void test661763() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    // Undeclared exception!
    try {
        NodeUtil.getFnParameters(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @param fnNode The function.
 * @return The Node containing the Function parameters.
 */"
"public String getFunctionName() {
    return functionName;
}","public void test662764() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(""y"", functionNode0.getFunctionName());
}",""
"public int getType() {
    return type;
}","public void test662765() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(83, node1.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test662766() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(27, functionNode0.getLineno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test662767() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(27, node1.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test662768() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(46, node1.getCharno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test662769() throws Throwable {
    Node node0 = new Node(115);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    FunctionNode functionNode0 = NodeUtil.newFunctionNode(""y"", linkedList0, node0, 27, 46);
    Node node1 = NodeUtil.getFnParameters(functionNode0);
    assertEquals(46, functionNode0.getCharno());
}",""
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test663770() throws Throwable {
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test664771() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"public Visibility getVisibility() {
    return visibility;
}","public void test665772() throws Throwable {
    Node node0 = new Node(117, 117, 117);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    JSDocInfo jSDocInfo1 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo1.getVisibility());
}","/**
 * Gets the visibility specified by {@code @private}, {@code @protected} or
 * {@code @public} annotation. If no visibility is specified, visibility
 * is inherited from the base class.
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test666773() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode();
    node0.addChildrenToBack(node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test667774() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    node0.addChildrenToBack(node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static String getSourceName(Node n) {
    String sourceName = null;
    while (sourceName == null && n != null) {
        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);
        n = n.getParent();
    }
    return sourceName;
}","public void test668775() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    String string0 = NodeUtil.getSourceName(node0);
    assertNull(string0);
}","/**
 * @param n The node.
 * @return The source name property on the node or its ancestors.
 */"
