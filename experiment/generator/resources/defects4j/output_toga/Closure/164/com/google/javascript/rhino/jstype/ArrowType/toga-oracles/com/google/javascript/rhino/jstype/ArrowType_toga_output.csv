project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""ASSIGN_URSH"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    arrowType0.returnType = null;
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,assertTrue(errorFunctionType0.isReturnTypeInferred())
project,0,test001,"public void test001() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""ASSIGN_URSH"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    arrowType0.returnType = null;
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test012,"public void test012() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""9?:g:zS~,yOWV<_"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    // Undeclared exception!
    try {
        arrowType0.testForEquality(errorFunctionType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",1,
project,0,test023,"public void test023() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    // Undeclared exception!
    try {
        arrowType0.getTypesUnderShallowEquality(errorFunctionType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",0,
project,0,test034,"public void test034() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""GG:s`"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    // Undeclared exception!
    try {
        arrowType0.getLeastSupertype(errorFunctionType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",1,
project,0,test045,"public void test045() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    // Undeclared exception!
    try {
        arrowType0.toString();
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test056,"public void test056() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    // Undeclared exception!
    try {
        arrowType0.visit((Visitor<IndexedType>) null);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",1,
project,0,test067,"public void test067() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    NoType noType0 = (NoType) arrowType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertFalse(noType0.isReturnTypeInferred());
}",0,
project,0,test078,"public void test078() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType[] jSTypeArray0 = new JSType[1];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    boolean boolean0 = arrowType0.isSubtype(arrowType0);
    assertTrue(boolean0);
}",0,
project,0,test089,"public void test089() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, (Node) null, arrowType0);
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertFalse(boolean0);
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    JSType jSType0 = JSType.getLeastSupertype((JSType) arrowType1, (JSType) arrowType0);
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,assertTrue(errorFunctionType0.isReturnTypeInferred())
project,0,test0911,"public void test0911() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    JSType jSType0 = JSType.getLeastSupertype((JSType) arrowType1, (JSType) arrowType0);
    assertFalse(jSType0.equals((Object) arrowType0));
}",0,
project,0,test0912,"public void test0912() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    JSType jSType0 = JSType.getLeastSupertype((JSType) arrowType1, (JSType) arrowType0);
    assertSame(jSType0, arrowType1);
}",0,
project,0,test1013,"public void test1013() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""already specified useForNull"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    Node node0 = Node.newString(1, ""Unknown class name"");
    Node node1 = new Node(1, node0, node0, node0, node0);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertFalse(boolean0);
}",0,
project,0,test1014,"public void test1014() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""already specified useForNull"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    Node node0 = Node.newString(1, ""Unknown class name"");
    Node node1 = new Node(1, node0, node0, node0, node0);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test1015,"public void test1015() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""already specified useForNull"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    Node node0 = Node.newString(1, ""Unknown class name"");
    Node node1 = new Node(1, node0, node0, node0, node0);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,
project,0,test1116,"public void test1116() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""W2JoTp4|YTwH"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) errorFunctionType0;
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test1117,"public void test1117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""W2JoTp4|YTwH"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) errorFunctionType0;
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertFalse(boolean0);
}",0,
project,0,test1218,"public void test1218() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    boolean boolean0 = arrowType0.isSubtype(arrowType0);
    assertTrue(boolean0);
}",0,
project,0,test1319,"public void test1319() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    JSType jSType0 = JSType.getLeastSupertype((JSType) arrowType0, (JSType) arrowType0);
    assertFalse(jSType0.isNoType());
}",0,assertTrue(jSType0.isNoType())
project,0,test1420,"public void test1420() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a constructor"", 0, 1);
    Node node1 = new Node(0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1, noResolvedType0);
    boolean boolean0 = arrowType0.hasEqualParameters(arrowType0);
    assertFalse(noResolvedType0.isReturnTypeInferred());
}",0,
project,0,test1421,"public void test1421() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a constructor"", 0, 1);
    Node node1 = new Node(0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1, noResolvedType0);
    boolean boolean0 = arrowType0.hasEqualParameters(arrowType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1522,"public void test1522() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""S#AI-o'u91%9~:"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    Node node0 = Node.newString(""Unknown class name"", 0, 1);
    Node node1 = new Node(0, node0, node0, node0, node0, 4095, 50);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.hasEqualParameters(arrowType1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1523,"public void test1523() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""S#AI-o'u91%9~:"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    Node node0 = Node.newString(""Unknown class name"", 0, 1);
    Node node1 = new Node(0, node0, node0, node0, node0, 4095, 50);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.hasEqualParameters(arrowType1);
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,assertTrue(errorFunctionType0.isReturnTypeInferred())
project,0,test1624,"public void test1624() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
    ArrowType arrowType1 = jSTypeRegistry1.createArrowType((Node) null);
    boolean boolean0 = arrowType0.hasEqualParameters(arrowType1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1725,"public void test1725() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a constructor"", 0, 1);
    Node node1 = new Node(0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1, noResolvedType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.hasEqualParameters(arrowType1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1726,"public void test1726() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a constructor"", 0, 1);
    Node node1 = new Node(0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1, noResolvedType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.hasEqualParameters(arrowType1);
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,assertTrue(errorFunctionType0.isReturnTypeInferred())
project,0,test1827,"public void test1827() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, (Node) null, arrowType0);
    boolean boolean0 = arrowType1.equals(arrowType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1928,"public void test1928() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    arrowType0.returnType = null;
    arrowType0.hashCode();
}",0,
project,0,test2029,"public void test2029() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, (Node) null, arrowType0, true);
    arrowType1.hashCode();
    assertFalse(arrowType1.equals((Object) arrowType0));
}",0,
project,0,test2130,"public void test2130() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a constructor"", 0, 1);
    Node node1 = new Node(0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1, noResolvedType0);
    arrowType0.hashCode();
    assertFalse(noResolvedType0.isReturnTypeInferred());
}",0,assertTrue(noResolvedType0.isReturnTypeInferred())
project,0,test2231,"public void test2231() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a constructor"", 0, 1);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, noResolvedType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    arrowType0.resolveInternal((ErrorReporter) null, errorFunctionType0);
    assertTrue(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test2332,"public void test2332() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a constructor"", 0, 1);
    Node node1 = new Node(0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1, noResolvedType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    // Undeclared exception!
    try {
        arrowType0.resolveInternal((ErrorReporter) null, errorFunctionType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",0,
project,0,test2433,"public void test2433() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType[] jSTypeArray0 = new JSType[1];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2534,"public void test2534() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""W2JoTp4|YTwH"");
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,assertTrue(errorFunctionType0.isReturnTypeInferred())
project,0,test2535,"public void test2535() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""W2JoTp4|YTwH"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) errorFunctionType0;
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2636,"public void test2636() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2737,"public void test2737() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""W2JoTp4|YTwH"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test2738,"public void test2738() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""W2JoTp4|YTwH"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
