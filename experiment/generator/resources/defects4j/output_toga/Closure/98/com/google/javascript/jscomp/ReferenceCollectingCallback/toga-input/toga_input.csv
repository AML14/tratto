focal_method,test_prefix,docstring
"public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
}","public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
    Node node0 = compiler0.parseTestCode(""cym.google.javascript.jRcomp.ReferenqeCollectingCallback$ReferenceCollection"");
    referenceCollectingCallback0.process(node0, node0);
    assertEquals(1, Node.TARGET_PROP);
}","/**
 * Convenience method for running this pass over a tree with this
 * class as a callback.
 */"
"public ReferenceCollection getReferenceCollection(Var v) {
    return referenceMap.get(v);
}","public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
    ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferenceCollection((Scope.Var) null);
    assertNull(referenceCollectingCallback_ReferenceCollection0);
}","/**
 * Gets the reference collection for the given variable.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    Node node0 = new Node(100);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test1111() throws Throwable {
    Node node0 = new Node((-522), (-522), (-522));
    Node node1 = Node.newString(77, "".O[^[1n)sk"", 16384, 6);
    Compiler compiler0 = new Compiler();
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node1);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1212() throws Throwable {
    Node node0 = new Node(98, 98, 98);
    Compiler compiler0 = new Compiler();
    Denormalize denormalize0 = new Denormalize(compiler0);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1313() throws Throwable {
    Node node0 = new Node(101, 101, 420);
    Compiler compiler0 = new Compiler();
    Denormalize denormalize0 = new Denormalize(compiler0);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, syntacticScopeCreator0);
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1414() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(113, 113, 113);
    Denormalize denormalize0 = new Denormalize(compiler0);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1515() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(114, (-2497), 114);
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1616() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(115, (-2497), 115);
    Denormalize denormalize0 = new Denormalize(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test1717() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    Node node0 = new Node(119);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1818() throws Throwable {
    Node node0 = new Node(108);
    Compiler compiler0 = new Compiler();
    Node node1 = new Node(108, node0);
    Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0, (ScopeCreator) null);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    referenceCollectingCallback0.visit(nodeTraversal0, node0, node1);
    assertEquals(34, Node.PARENTHESIZED_PROP);
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1919() throws Throwable {
    Node node0 = new Node(111, 111, 111);
    Compiler compiler0 = new Compiler();
    Denormalize denormalize0 = new Denormalize(compiler0);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
