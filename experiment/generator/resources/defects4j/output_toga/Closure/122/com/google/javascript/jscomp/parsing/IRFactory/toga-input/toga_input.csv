focal_method,test_prefix,docstring
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test000() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    ConditionalExpression conditionalExpression0 = new ConditionalExpression();
    astRoot0.addChildToFront(conditionalExpression0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Sd$Uz</G_q>.r)wvl_a"", true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""#-yuX5NDX0O/z"", config0, (ErrorReporter) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test011() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(astRoot0);
    astRoot0.addChildToFront(parenthesizedExpression0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""UoY_Dq3oVoJjL:"", true);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""oE?S`,Zd"", config0, errorCollector0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test022() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    DoLoop doLoop0 = new DoLoop(8, 24);
    astRoot0.addChildToFront(doLoop0);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, """", config0, errorCollector0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test033() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    AstRoot astRoot0 = new AstRoot();
    EmptyExpression emptyExpression0 = new EmptyExpression();
    astRoot0.addChildToFront(emptyExpression0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("""", false);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, (String) null, config0, toolErrorReporter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.parsing.IRFactory"", e);
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test044() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
    AstRoot astRoot0 = new AstRoot(33);
    ElementGet elementGet0 = new ElementGet(astRoot0, astRoot0);
    astRoot0.addChildToFront(elementGet0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("">6.cG(jlY\""oINT9dr3"", false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""com.google.javascript.rhino.JSDocInfo$TypePosition"", config0, errorCollector0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test055() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    InfixExpression infixExpression0 = new InfixExpression(13, astRoot0, astRoot0, 18);
    astRoot0.addChildToFront(infixExpression0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""/* @"", true);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(linkedHashSet0, treeSet0, true, config_LanguageMode0, false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""/* @"", config0, errorCollector0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test066() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    WithStatement withStatement0 = new WithStatement();
    astRoot0.addChildToFront(withStatement0);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ""case"", config0, toolErrorReporter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test077() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    AstRoot astRoot0 = new AstRoot();
    ForLoop forLoop0 = new ForLoop(14, 4);
    astRoot0.addChildToFront(forLoop0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""AV>tQ[Lr"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""AV>tQ[Lr"", config0, toolErrorReporter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test088() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Label label0 = new Label(135);
    astRoot0.addChildToFront(label0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("""", false);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, """", config0, errorCollector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test099() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    NumberLiteral numberLiteral0 = new NumberLiteral(18, 0);
    astRoot0.addChildToFront(numberLiteral0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""9I]$=!;o*T:8~P\"""", true);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""-8"", config0, errorCollector0);
    assertEquals(1, node0.getLength());
}",""
"public int getType() {
    return type;
}","public void test0910() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    NumberLiteral numberLiteral0 = new NumberLiteral(18, 0);
    astRoot0.addChildToFront(numberLiteral0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""9I]$=!;o*T:8~P\"""", true);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""-8"", config0, errorCollector0);
    assertEquals(132, node0.getType());
}",""
"public boolean isFromExterns() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? false : file.isExtern();
}","public void test0911() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    NumberLiteral numberLiteral0 = new NumberLiteral(18, 0);
    astRoot0.addChildToFront(numberLiteral0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""9I]$=!;o*T:8~P\"""", true);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""-8"", config0, errorCollector0);
    assertTrue(node0.isFromExterns());
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test1012() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot0, true);
    astRoot0.addChildToFront(expressionStatement0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("""", true);
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, true);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""!8vOs[}"", config0, errorCollector0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test1113() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    AstRoot astRoot0 = new AstRoot();
    EmptyStatement emptyStatement0 = new EmptyStatement(0);
    astRoot0.addChildToFront(emptyStatement0);
    Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ""com.google.common.collect.AbstractMapBasedMultimap$WrappedList"", config0, toolErrorReporter0);
    assertEquals(0, node0.getLength());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test1114() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    AstRoot astRoot0 = new AstRoot();
    EmptyStatement emptyStatement0 = new EmptyStatement(0);
    astRoot0.addChildToFront(emptyStatement0);
    Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ""com.google.common.collect.AbstractMapBasedMultimap$WrappedList"", config0, toolErrorReporter0);
    assertTrue(node0.hasChildren());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test1215() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    Locale locale0 = Locale.GERMANY;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
    Scope scope0 = new Scope(98);
    astRoot0.addChildToFront(scope0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""$C2gvjig67;,j;F_%!"", false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""out of rangeHincrement"", config0, errorCollector0);
    assertEquals(0, node0.getLength());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test1216() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    Locale locale0 = Locale.GERMANY;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
    Scope scope0 = new Scope(98);
    astRoot0.addChildToFront(scope0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""$C2gvjig67;,j;F_%!"", false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""out of rangeHincrement"", config0, errorCollector0);
    assertTrue(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test1317() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    WhileLoop whileLoop0 = new WhileLoop(2, (-1987));
    astRoot0.addChildrenToFront(whileLoop0);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, (String) null, config0, (ErrorReporter) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test1418() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    AstRoot astRoot0 = new AstRoot();
    Block block0 = new Block(85);
    astRoot0.addChildToFront(block0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""!@djS5N"", false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""%3<T>34*X4[2[[^Z"", config0, errorCollector0);
    assertEquals(0, node0.getLength());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test1419() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    AstRoot astRoot0 = new AstRoot();
    Block block0 = new Block(85);
    astRoot0.addChildToFront(block0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""!@djS5N"", false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""%3<T>34*X4[2[[^Z"", config0, errorCollector0);
    assertTrue(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test1520() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Name name0 = new Name(5, ""%3<T>34*X4[2[[^Z"");
    FunctionNode functionNode0 = new FunctionNode((-354), name0);
    astRoot0.addChildToFront(functionNode0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""com.google.javascript.rhino.head.tools.shell.Environment"", false);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(linkedHashSet0, treeSet0, false, config_LanguageMode0, false);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""com.google.javascript.rhino.head.tools.shell.Environment"", config0, toolErrorReporter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test1621() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    AstRoot astRoot0 = new AstRoot();
    ObjectProperty objectProperty0 = new ObjectProperty();
    astRoot0.addChildToFront(objectProperty0);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ""pow"", config0, toolErrorReporter0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 103
        //
        verifyException(""com.google.javascript.jscomp.parsing.IRFactory"", e);
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test1722() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    ThrowStatement throwStatement0 = new ThrowStatement(5);
    astRoot0.addChildToBack(throwStatement0);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("".sOZ$kAVC@isD[?\""x"", true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "".sOZ$kAVC@isD[?\""x"", config0, (ErrorReporter) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test1823() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    FunctionNode functionNode0 = new FunctionNode();
    astRoot0.addChildToFront(functionNode0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("")]Wr^5"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "")]Wr^5"", config0, toolErrorReporter0);
    assertEquals(1, node0.getLength());
}",""
"public boolean isFromExterns() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? false : file.isExtern();
}","public void test1824() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    FunctionNode functionNode0 = new FunctionNode();
    astRoot0.addChildToFront(functionNode0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("")]Wr^5"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "")]Wr^5"", config0, toolErrorReporter0);
    assertTrue(node0.isFromExterns());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test1925() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
    Comment comment0 = new Comment(2, 1, token_CommentType0, ""invalid assignment target"");
    astRoot0.addComment(comment0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""invalid assignment target"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""invalid assignment target"", config0, toolErrorReporter0);
    assertEquals(1, node0.getLength());
}",""
"public boolean isFromExterns() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? false : file.isExtern();
}","public void test1926() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
    Comment comment0 = new Comment(2, 1, token_CommentType0, ""invalid assignment target"");
    astRoot0.addComment(comment0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""invalid assignment target"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""invalid assignment target"", config0, toolErrorReporter0);
    assertTrue(node0.isFromExterns());
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test2027() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    RegExpLiteral regExpLiteral0 = new RegExpLiteral();
    astRoot0.addChildToFront(regExpLiteral0);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""~{iXlu~0"", true);
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""~{iXlu~0"", config0, (ErrorReporter) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test2128() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    Token.CommentType token_CommentType0 = Token.CommentType.HTML;
    Comment comment0 = new Comment(22, 26, token_CommentType0, ""idetifier is a reservUd word"");
    astRoot0.addComment(comment0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""idetifier is a reservUd word"", false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""idetifier is a reservUd word"", config0, errorCollector0);
    assertEquals(0, node0.getLength());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test2229() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
    Comment comment0 = new Comment(22, 26, token_CommentType0, ""identifier is a reservUd word"");
    astRoot0.addComment(comment0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""identifier is a reservUd word"", true);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""identifier is a reservUd word"", config0, (ErrorReporter) null);
    assertEquals(1, node0.getLength());
}",""
"public boolean isFromExterns() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? false : file.isExtern();
}","public void test2230() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
    Comment comment0 = new Comment(22, 26, token_CommentType0, ""identifier is a reservUd word"");
    astRoot0.addComment(comment0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""identifier is a reservUd word"", true);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""identifier is a reservUd word"", config0, (ErrorReporter) null);
    assertTrue(node0.isFromExterns());
}",""
"public boolean isFromExterns() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? false : file.isExtern();
}","public void test2331() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    XmlElemRef xmlElemRef0 = new XmlElemRef();
    Token.CommentType token_CommentType0 = Token.CommentType.LINE;
    Comment comment0 = new Comment(2, 0, token_CommentType0, ""com.google.common.collect.Iterators$MergingIterator"");
    xmlElemRef0.setJsDocNode(comment0);
    Name name0 = new Name(22, ""com.google.common.collect.Iterators$MergingIterator"");
    PropertyGet propertyGet0 = new PropertyGet(xmlElemRef0, name0);
    astRoot0.addChildToFront(propertyGet0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""M(.T>w=ni.$"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""OUXYW(5q_,WfLU{4r"", config0, toolErrorReporter0);
    assertTrue(node0.isFromExterns());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test2332() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    XmlElemRef xmlElemRef0 = new XmlElemRef();
    Token.CommentType token_CommentType0 = Token.CommentType.LINE;
    Comment comment0 = new Comment(2, 0, token_CommentType0, ""com.google.common.collect.Iterators$MergingIterator"");
    xmlElemRef0.setJsDocNode(comment0);
    Name name0 = new Name(22, ""com.google.common.collect.Iterators$MergingIterator"");
    PropertyGet propertyGet0 = new PropertyGet(xmlElemRef0, name0);
    astRoot0.addChildToFront(propertyGet0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""M(.T>w=ni.$"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""OUXYW(5q_,WfLU{4r"", config0, toolErrorReporter0);
    assertEquals(1, node0.getLength());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test2433() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    AstRoot astRoot0 = new AstRoot((-7));
    VariableDeclaration variableDeclaration0 = new VariableDeclaration(16);
    astRoot0.addChildToFront(variableDeclaration0);
    Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ""\n * @"", config0, toolErrorReporter0);
    assertTrue(node0.hasChildren());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test2434() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    AstRoot astRoot0 = new AstRoot((-7));
    VariableDeclaration variableDeclaration0 = new VariableDeclaration(16);
    astRoot0.addChildToFront(variableDeclaration0);
    Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ""\n * @"", config0, toolErrorReporter0);
    assertEquals(0, node0.getLength());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test2535() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    ArrayLiteral arrayLiteral0 = new ArrayLiteral(20, 20);
    astRoot0.addChildToFront(arrayLiteral0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Type annotations are not allowed here. Are you missing parentheses?"", false);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(linkedHashSet0, treeSet0, false, config_LanguageMode0, false);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""Type annotations are not allowed here. Are you missing parentheses?"", config0, (ErrorReporter) null);
    assertEquals(0, node0.getLength());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test2536() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    ArrayLiteral arrayLiteral0 = new ArrayLiteral(20, 20);
    astRoot0.addChildToFront(arrayLiteral0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Type annotations are not allowed here. Are you missing parentheses?"", false);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(linkedHashSet0, treeSet0, false, config_LanguageMode0, false);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""Type annotations are not allowed here. Are you missing parentheses?"", config0, (ErrorReporter) null);
    assertTrue(node0.hasChildren());
}",""
"public boolean isFromExterns() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? false : file.isExtern();
}","public void test2637() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    BreakStatement breakStatement0 = new BreakStatement(15);
    astRoot0.addChildToFront(breakStatement0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("".sOZ$kAVC@isD[?\""x"", true);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "".sOZ$kAVC@isD[?\""x"", config0, (ErrorReporter) null);
    assertTrue(node0.isFromExterns());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test2638() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    BreakStatement breakStatement0 = new BreakStatement(15);
    astRoot0.addChildToFront(breakStatement0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("".sOZ$kAVC@isD[?\""x"", true);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "".sOZ$kAVC@isD[?\""x"", config0, (ErrorReporter) null);
    assertEquals(1, node0.getLength());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test2739() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    ContinueStatement continueStatement0 = new ContinueStatement(23);
    astRoot0.addChildrenToFront(continueStatement0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""ft/88ipDggHDU."", false);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""ft/88ipDggHDU."", config0, (ErrorReporter) null);
    assertTrue(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test2740() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    ContinueStatement continueStatement0 = new ContinueStatement(23);
    astRoot0.addChildrenToFront(continueStatement0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""ft/88ipDggHDU."", false);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""ft/88ipDggHDU."", config0, (ErrorReporter) null);
    assertEquals(0, node0.getLength());
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test2841() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(1);
    astRoot0.addChildToFront(arrayComprehensionLoop0);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("""", true);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, """", config0, errorCollector0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test2942() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
    AstRoot astRoot0 = new AstRoot();
    FunctionNode functionNode0 = new FunctionNode();
    functionNode0.setFunctionType(2);
    astRoot0.addChildToFront(functionNode0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""#-yuX5NDX0O/z"", true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, ""#-yuX5NDX0O/z"", config0, toolErrorReporter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test3043() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    LabeledStatement labeledStatement0 = new LabeledStatement(1, 20);
    astRoot0.addChildrenToFront(labeledStatement0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, (String) null, config0, errorCollector0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test3144() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    Name name0 = new Name();
    astRoot0.addChildToFront(name0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, (String) null, config0, (ErrorReporter) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.TokenStream"", e);
    }
}",""
"public boolean isFromExterns() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? false : file.isExtern();
}","public void test3245() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    ObjectLiteral objectLiteral0 = new ObjectLiteral();
    astRoot0.addChildToFront(objectLiteral0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""I%W}S~,Rm0___K:O8r"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""I%W}S~,Rm0___K:O8r"", config0, toolErrorReporter0);
    assertTrue(node0.isFromExterns());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test3246() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    ObjectLiteral objectLiteral0 = new ObjectLiteral();
    astRoot0.addChildToFront(objectLiteral0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""I%W}S~,Rm0___K:O8r"", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, ""I%W}S~,Rm0___K:O8r"", config0, toolErrorReporter0);
    assertEquals(0, node0.getLength());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test3347() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    SwitchCase switchCase0 = new SwitchCase(25, 3);
    astRoot0.addChildToFront(switchCase0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("""", true);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, """", config0, errorCollector0);
    assertEquals(1, node0.getLength());
}",""
"public boolean isFromExterns() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? false : file.isExtern();
}","public void test3348() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    SwitchCase switchCase0 = new SwitchCase(25, 3);
    astRoot0.addChildToFront(switchCase0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("""", true);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
    ErrorCollector errorCollector0 = new ErrorCollector();
    Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, """", config0, errorCollector0);
    assertTrue(node0.isFromExterns());
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test3449() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
    AstRoot astRoot0 = new AstRoot();
    VariableDeclaration variableDeclaration0 = new VariableDeclaration();
    astRoot0.addChildToFront(variableDeclaration0);
    Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ""equalsIgnoreCase"", config0, toolErrorReporter0);
    assertEquals(1, node0.getLength());
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test3550() throws Throwable {
    HashSet<String> hashSet0 = new HashSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
    Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
    AstRoot astRoot0 = new AstRoot();
    NewExpression newExpression0 = new NewExpression();
    astRoot0.addChildToFront(newExpression0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("""", true);
    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, """", config0, toolErrorReporter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test3651() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    FunctionCall functionCall0 = new FunctionCall();
    astRoot0.addChildToFront(functionCall0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("""", true);
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
    Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
    ErrorCollector errorCollector0 = new ErrorCollector();
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, """", config0, errorCollector0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static Node transformTree(AstRoot node, StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter) {
    IRFactory irFactory = new IRFactory(sourceString, sourceFile, config, errorReporter);
    Node irNode = irFactory.transform(node);
    if (node.getComments() != null) {
        for (Comment comment : node.getComments()) {
            if (comment.getCommentType() == CommentType.JSDOC && !irFactory.parsedComments.contains(comment)) {
                irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
            } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {
                irFactory.handleBlockComment(comment);
            }
        }
    }
    irFactory.setFileOverviewJsDoc(irNode);
    return irNode;
}","public void test3752() throws Throwable {
    AstRoot astRoot0 = new AstRoot();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
    Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
    ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot0);
    astRoot0.addChildrenToFront(expressionStatement0);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("".sOZ$kAVC@isD[?\""x"", true);
    // Undeclared exception!
    try {
        IRFactory.transformTree(astRoot0, simpleSourceFile0, "".sOZ$kAVC@isD[?\""x"", config0, (ErrorReporter) null);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
