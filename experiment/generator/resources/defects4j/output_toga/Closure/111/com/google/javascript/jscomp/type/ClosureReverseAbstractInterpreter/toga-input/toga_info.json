{
  "test00" : {
    "methodSignature" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition, FlowScope blindScope, boolean outcome)",
    "methodName" : "getPreciserScopeKnowingConditionOutcome",
    "className" : "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Node node0 = new Node(1283, 1283, 1283);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);\n    FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition, FlowScope blindScope, boolean outcome)",
    "methodName" : "getPreciserScopeKnowingConditionOutcome",
    "className" : "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Node node0 = Node.newString(\"API tried to add two incompatible type tags. This should have been blocked and emitted a warning.\");\n    Node node1 = new Node(37, node0, node0, node0, 4095, 52);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);\n    FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition, FlowScope blindScope, boolean outcome)",
    "methodName" : "getPreciserScopeKnowingConditionOutcome",
    "className" : "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Node node0 = Node.newString(\"API tried to add two incompatible type tags. This should have been blocked and emitted a warning.\");\n    Node node1 = Node.newString(54, \"API tried to add two incompatible type tags. This should have been blocked and emitted a warning.\", 0, 43);\n    Node node2 = new Node(37, node1, node1, node0, 4095, 52);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);\n    FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node2, (FlowScope) null, true);\n}",
    "testName" : "test22"
  }
}