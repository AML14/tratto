{
  "test06470" : {
    "methodSignature" : "public void optimize()",
    "methodName" : "optimize",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06470() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.reportCodeChange();\n    compiler0.optimize();\n}",
    "testName" : "test06470"
  },
  "test08495" : {
    "methodSignature" : "void throwInternalError(String message, Exception cause)",
    "methodName" : "throwInternalError",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08495() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.throwInternalError(\"A1b_3yH6oVq,6|}azO\", (Exception) null);\n}",
    "testName" : "test08495"
  },
  "test07280" : {
    "methodSignature" : "public boolean isAdd()",
    "methodName" : "isAdd",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07280() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.getSynthesizedExternsInput();\n    Node node0 = compiler0.parseInputs();\n    node0.isAdd();\n}",
    "testName" : "test07280"
  },
  "test0000" : {
    "methodSignature" : "public String toSource(final JSModule module)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource((JSModule) null);\n}",
    "testName" : "test0000"
  },
  "test08899" : {
    "methodSignature" : "public boolean isExtern()",
    "methodName" : "isExtern",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08899() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"*pJ?g%~l\", \":rb[Ps+]^DnBZdH.ui\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);\n    jSSourceFile0.isExtern();\n}",
    "testName" : "test08899"
  },
  "test06876" : {
    "methodSignature" : "public void replaceScript(JsAst ast)",
    "methodName" : "replaceScript",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06876() throws Throwable {\n    SourceFile sourceFile0 = SourceFile.fromFile(\"4k\");\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"4k\");\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.replaceScript(jsAst0);\n}",
    "testName" : "test06876"
  },
  "test088100" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088100() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"*pJ?g%~l\", \":rb[Ps+]^DnBZdH.ui\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test088100"
  },
  "test05662" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05662() throws Throwable {\n    Callable<CrossModuleMethodMotion> callable0 = (Callable<CrossModuleMethodMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(callable0).call();\n    CrossModuleMethodMotion crossModuleMethodMotion0 = Compiler.runCallable(callable0, false, true);\n}",
    "testName" : "test05662"
  },
  "test01214" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01214() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.disableThreads();\n    compiler0.getProgress();\n}",
    "testName" : "test01214"
  },
  "test03639" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03639() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;\n    compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);\n    compiler0.getProgress();\n}",
    "testName" : "test03639"
  },
  "test02427" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02427() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getWarningCount();\n}",
    "testName" : "test02427"
  },
  "test01619" : {
    "methodSignature" : "public static String getReleaseDate()",
    "methodName" : "getReleaseDate",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01619() throws Throwable {\n    String string0 = Compiler.getReleaseDate();\n}",
    "testName" : "test01619"
  },
  "test08088" : {
    "methodSignature" : "boolean isInliningForbidden()",
    "methodName" : "isInliningForbidden",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"*pJ?d%<~l\");\n    boolean boolean0 = compiler0.isInliningForbidden();\n}",
    "testName" : "test08088"
  },
  "test08089" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08089() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"*pJ?d%<~l\");\n    boolean boolean0 = compiler0.isInliningForbidden();\n    compiler0.getProgress();\n}",
    "testName" : "test08089"
  },
  "test0011" : {
    "methodSignature" : "public String[] toSourceArray()",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray();\n}",
    "testName" : "test0011"
  },
  "test05257" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05257() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"variables, functions, and arguments cannot be deleted in ES5 strict mode\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05257"
  },
  "test03235" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03235() throws Throwable {\n    Logger logger0 = Tracer.logger;\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    compiler0.getSourceMap();\n    compiler0.getProgress();\n}",
    "testName" : "test03235"
  },
  "test05258" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05258() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"variables, functions, and arguments cannot be deleted in ES5 strict mode\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test05258"
  },
  "test04043" : {
    "methodSignature" : "public JSError[] getMessages()",
    "methodName" : "getMessages",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04043() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getMessages();\n}",
    "testName" : "test04043"
  },
  "test06066" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.getPassConfig();\n    compiler0.setPassConfig(passConfig0);\n}",
    "testName" : "test06066"
  },
  "test02023" : {
    "methodSignature" : "public void processDefines()",
    "methodName" : "processDefines",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02023() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.processDefines();\n}",
    "testName" : "test02023"
  },
  "test01720" : {
    "methodSignature" : "ControlFlowGraph<Node> computeCFG()",
    "methodName" : "computeCFG",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01720() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.computeCFG();\n}",
    "testName" : "test01720"
  },
  "test099113" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"PassConfigs must eventually delegate to the DefaultPassConfig\");\n    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    compiler0.updateGlobalVarReferences(treeMap0, node0);\n}",
    "testName" : "test099113"
  },
  "test00910" : {
    "methodSignature" : "CssRenamingMap getCssRenamingMap()",
    "methodName" : "getCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00910() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    compiler0.getCssRenamingMap();\n}",
    "testName" : "test00910"
  },
  "test04952" : {
    "methodSignature" : "String toSource(Node n)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04952() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"GGco'%\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    compiler0.toSource((Node) null);\n}",
    "testName" : "test04952"
  },
  "test06977" : {
    "methodSignature" : "public void addNewScript(JsAst ast)",
    "methodName" : "addNewScript",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06977() throws Throwable {\n    SourceFile sourceFile0 = SourceFile.fromFile(\"4k\");\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"4k\");\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.addNewScript(jsAst0);\n}",
    "testName" : "test06977"
  },
  "test02932" : {
    "methodSignature" : "void recordFunctionInformation()",
    "methodName" : "recordFunctionInformation",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02932() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.recordFunctionInformation();\n}",
    "testName" : "test02932"
  },
  "test094106" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094106() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"com.google.javascript.rhino.head.gen.\");\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"computeCFG\");\n    jSModule0.add((SourceFile) jSSourceFile0);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test094106"
  },
  "test06571" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06571() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"variables, functions, and arguments cannot be deleted in ES5 strict mode\", \"!NjVE\\\":o:'^od||M\");\n    compiler0.areNodesEqualForInlining(node0, node0);\n    compiler0.getProgress();\n}",
    "testName" : "test06571"
  },
  "test0022" : {
    "methodSignature" : "public String toSource()",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource();\n}",
    "testName" : "test0022"
  },
  "test07381" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07381() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.processAMDAndCommonJSModules();\n    compiler0.getWarningCount();\n}",
    "testName" : "test07381"
  },
  "test05763" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05763() throws Throwable {\n    Compiler.runCallable((Callable<CrossModuleMethodMotion>) null, false, false);\n}",
    "testName" : "test05763"
  },
  "test03740" : {
    "methodSignature" : "public Map<InputId, CompilerInput> getInputsById()",
    "methodName" : "getInputsById",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03740() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getInputsById();\n}",
    "testName" : "test03740"
  },
  "test102117" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102117() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setProgress(68.4);\n    compiler0.getProgress();\n}",
    "testName" : "test102117"
  },
  "test08596" : {
    "methodSignature" : "public void optimize()",
    "methodName" : "optimize",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08596() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"JSC_BASE_CLASS_ERROR\");\n    compiler0.optimize();\n}",
    "testName" : "test08596"
  },
  "test02528" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02528() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getVariableMap();\n    compiler0.getProgress();\n}",
    "testName" : "test02528"
  },
  "test03336" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03336() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test03336"
  },
  "test05359" : {
    "methodSignature" : "public <T1 extends SourceFile, T2 extends SourceFile> Result compile(List<T1> externs, List<T2> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05359() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n}",
    "testName" : "test05359"
  },
  "test01315" : {
    "methodSignature" : "Node parseSyntheticCode(String fileName, String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01315() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"Duplicte input {0}\", \"Duplicte input {0}\");\n}",
    "testName" : "test01315"
  },
  "test08191" : {
    "methodSignature" : "public boolean acceptEcmaScript5()",
    "methodName" : "acceptEcmaScript5",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08191() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    boolean boolean0 = compiler0.acceptEcmaScript5();\n}",
    "testName" : "test08191"
  },
  "test091103" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091103() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"com.google.javascript.rhino.head.gen.\");\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test091103"
  },
  "test0033" : {
    "methodSignature" : "public void toSource(final CodeBuilder cb, final int inputSeqNum, final Node root)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();\n    Node node0 = Node.newNumber((-974.8539));\n    compiler0.toSource(compiler_CodeBuilder0, (-2559), node0);\n}",
    "testName" : "test0033"
  },
  "test02124" : {
    "methodSignature" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
    "methodName" : "runCallableWithLargeStack",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02124() throws Throwable {\n    Compiler.runCallableWithLargeStack((Callable<Object>) null);\n}",
    "testName" : "test02124"
  },
  "test04144" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04144() throws Throwable {\n    Logger logger0 = Logger.getAnonymousLogger();\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    compiler0.getExternsForTesting();\n    compiler0.getProgress();\n}",
    "testName" : "test04144"
  },
  "test06167" : {
    "methodSignature" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
    "methodName" : "stripCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06167() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.aliasableStrings);\n}",
    "testName" : "test06167"
  },
  "test03841" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03841() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setHasRegExpGlobalReferences(false);\n    compiler0.getProgress();\n}",
    "testName" : "test03841"
  },
  "test01821" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01821() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getPropertyMap();\n    compiler0.getProgress();\n}",
    "testName" : "test01821"
  },
  "test096109" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096109() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test096109"
  },
  "test07482" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07482() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"M+cS}@$n{0u@t@EE\");\n    compiler0.parseTestCode(\"M+cS}@$n{0u@t@EE\");\n    compiler0.getProgress();\n}",
    "testName" : "test07482"
  },
  "test05460" : {
    "methodSignature" : "public <T extends SourceFile> Result compileModules(List<T> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05460() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();\n    compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);\n}",
    "testName" : "test05460"
  },
  "test08293" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08293() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;\n    compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\",^\", \"!NjVL\\\":o:'^od||M\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    jSSourceFileArray0[2] = jSSourceFile0;\n    jSSourceFileArray0[3] = jSSourceFile0;\n    jSSourceFileArray0[4] = jSSourceFile0;\n    jSSourceFileArray0[5] = jSSourceFile0;\n    jSSourceFileArray0[6] = jSSourceFile0;\n    compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.getErrorCount();\n}",
    "testName" : "test08293"
  },
  "test0044" : {
    "methodSignature" : "public String[] toSourceArray(final JSModule module)",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    File file0 = MockFile.createTempFile(\"goog.isArray\", \"goog.isArray\");\n    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    compiler0.toSourceArray((JSModule) null);\n}",
    "testName" : "test0044"
  },
  "test08292" : {
    "methodSignature" : "public boolean isExtern()",
    "methodName" : "isExtern",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08292() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;\n    compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\",^\", \"!NjVL\\\":o:'^od||M\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    jSSourceFileArray0[2] = jSSourceFile0;\n    jSSourceFileArray0[3] = jSSourceFile0;\n    jSSourceFileArray0[4] = jSSourceFile0;\n    jSSourceFileArray0[5] = jSSourceFile0;\n    jSSourceFileArray0[6] = jSSourceFile0;\n    compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);\n    jSSourceFile0.isExtern();\n}",
    "testName" : "test08292"
  },
  "test05864" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05864() throws Throwable {\n    Compiler.runCallable((Callable<CrossModuleMethodMotion>) null, false, true);\n}",
    "testName" : "test05864"
  },
  "test08697" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08697() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getSourceRegion((String) null, 8506);\n    compiler0.getProgress();\n}",
    "testName" : "test08697"
  },
  "test100114" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100114() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    Node node0 = Node.newString(\"Root module has no inputs\");\n    compiler0.updateGlobalVarReferences(treeMap0, node0);\n}",
    "testName" : "test100114"
  },
  "test06674" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06674() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    CompilerInput compilerInput0 = compiler0.getSynthesizedExternsInput();\n    ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);\n    InputId inputId0 = referenceCollectingCallback_Reference0.getInputId();\n    compiler0.removeExternInput(inputId0);\n    compilerInput0.getName();\n}",
    "testName" : "test06674"
  },
  "test06673" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06673() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test06673"
  },
  "test02225" : {
    "methodSignature" : "public LanguageMode languageMode()",
    "methodName" : "languageMode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02225() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.languageMode();\n}",
    "testName" : "test02225"
  },
  "test098112" : {
    "methodSignature" : "public ErrorManager getErrorManager()",
    "methodName" : "getErrorManager",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n}",
    "testName" : "test098112"
  },
  "test098111" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    compiler0.getProgress();\n}",
    "testName" : "test098111"
  },
  "test01416" : {
    "methodSignature" : "public void rebuildInputsFromModules()",
    "methodName" : "rebuildInputsFromModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01416() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.rebuildInputsFromModules();\n}",
    "testName" : "test01416"
  },
  "test03437" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03437() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    compiler0.getInputsForTesting();\n    compiler0.getProgress();\n}",
    "testName" : "test03437"
  },
  "test02629" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02629() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getFunctionalInformationMap();\n    compiler0.getProgress();\n}",
    "testName" : "test02629"
  },
  "test093105" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093105() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<SourceFile> stack0 = new Stack<SourceFile>();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) linkedList0, compilerOptions0);\n    compiler0.getNodeForCodeInsertion((JSModule) null);\n}",
    "testName" : "test093105"
  },
  "test05053" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05053() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getProgress();\n}",
    "testName" : "test05053"
  },
  "test0055" : {
    "methodSignature" : "public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "init",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    Logger logger0 = Logger.getAnonymousLogger();\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];\n    JSModule[] jSModuleArray0 = new JSModule[3];\n    compiler0.init(jSSourceFileArray0, jSModuleArray0, (CompilerOptions) null);\n}",
    "testName" : "test0055"
  },
  "test04245" : {
    "methodSignature" : "void removeTryCatchFinally()",
    "methodName" : "removeTryCatchFinally",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04245() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.removeTryCatchFinally();\n}",
    "testName" : "test04245"
  },
  "test06268" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06268() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"*pJ?d%<~l\");\n    compiler0.check();\n    compiler0.getProgress();\n}",
    "testName" : "test06268"
  },
  "test103118" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103118() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setProgress((-1.0));\n    compiler0.getProgress();\n}",
    "testName" : "test103118"
  },
  "test01012" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01012() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.hasRegExpGlobalReferences();\n    compiler0.getProgress();\n}",
    "testName" : "test01012"
  },
  "test05054" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05054() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setCheckSymbols(true);\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test05054"
  },
  "test07078" : {
    "methodSignature" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
    "methodName" : "getReverseAbstractInterpreter",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07078() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();\n}",
    "testName" : "test07078"
  },
  "test01011" : {
    "methodSignature" : "boolean hasRegExpGlobalReferences()",
    "methodName" : "hasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.hasRegExpGlobalReferences();\n}",
    "testName" : "test01011"
  },
  "test03033" : {
    "methodSignature" : "public Result compile(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03033() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);\n}",
    "testName" : "test03033"
  },
  "test02730" : {
    "methodSignature" : "public void parse()",
    "methodName" : "parse",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02730() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parse();\n}",
    "testName" : "test02730"
  },
  "test05965" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05965() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.createPassConfigInternal();\n    compiler0.setPassConfig(passConfig0);\n    compiler0.getProgress();\n}",
    "testName" : "test05965"
  },
  "test01922" : {
    "methodSignature" : "public static String getReleaseVersion()",
    "methodName" : "getReleaseVersion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01922() throws Throwable {\n    String string0 = Compiler.getReleaseVersion();\n}",
    "testName" : "test01922"
  },
  "test03942" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03942() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    MockFile mockFile0 = new MockFile(\"2L).R<U@:8[PYeE<]V\");\n    Charset charset0 = Charset.defaultCharset();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);\n    JSModule[] jSModuleArray0 = new JSModule[1];\n    compiler0.compile(jSSourceFile0, jSModuleArray0, (CompilerOptions) null);\n}",
    "testName" : "test03942"
  },
  "test090102" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090102() throws Throwable {\n    SourceFile sourceFile0 = SourceFile.fromFile(\"4k\");\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"4k\");\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.getSourceRegion(\"4k\", 48);\n    compiler0.getProgress();\n}",
    "testName" : "test090102"
  },
  "test08394" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08394() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SourceFile sourceFile0 = SourceFile.fromFile(\"fk\");\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(\"fk\");\n    FileSystemHandling.appendStringToFile(evoSuiteFile0, \"com.google.javascript.jscomp.Compiler$IntermediateState\");\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addNewScript(jsAst0);\n    compiler0.hasErrors();\n}",
    "testName" : "test08394"
  },
  "test0066" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.resetUniqueNameId();\n    compiler0.getProgress();\n}",
    "testName" : "test0066"
  },
  "test06775" : {
    "methodSignature" : "void addIncrementalSourceAst(JsAst ast)",
    "methodName" : "addIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06775() throws Throwable {\n    SourceFile sourceFile0 = SourceFile.fromFile(\"4k\");\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"com.google.javascript.jscomp.AbstractMessageFormatter$Color\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addNewScript(jsAst0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test06775"
  },
  "test07987" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07987() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.ideMode = true;\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    compiler0.optimize();\n    compiler0.getProgress();\n}",
    "testName" : "test07987"
  },
  "test08798" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08798() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"*pJ?d%<~l\");\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test08798"
  },
  "test05561" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05561() throws Throwable {\n    Callable<ConstCheck> callable0 = (Callable<ConstCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(callable0).call();\n    ConstCheck constCheck0 = Compiler.runCallable(callable0, false, false);\n}",
    "testName" : "test05561"
  },
  "test02326" : {
    "methodSignature" : "void setCssRenamingMap(CssRenamingMap map)",
    "methodName" : "setCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02326() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setCssRenamingMap((CssRenamingMap) null);\n}",
    "testName" : "test02326"
  },
  "test03538" : {
    "methodSignature" : "public Result compile(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03538() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    compiler0.compile((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test03538"
  },
  "test01113" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    compiler0.setState(compiler_IntermediateState0);\n    compiler0.getProgress();\n}",
    "testName" : "test01113"
  },
  "test01518" : {
    "methodSignature" : "boolean precheck()",
    "methodName" : "precheck",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01518() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.precheck();\n}",
    "testName" : "test01518"
  },
  "test01517" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01517() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.precheck();\n    compiler0.getProgress();\n}",
    "testName" : "test01517"
  },
  "test095107" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095107() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getAstDotGraph();\n    compiler0.getProgress();\n}",
    "testName" : "test095107"
  },
  "test0077" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<SourceFile> stack0 = new Stack<SourceFile>();\n    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test0077"
  },
  "test0078" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0078() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<SourceFile> stack0 = new Stack<SourceFile>();\n    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);\n    compiler0.parseInputs();\n    MockFile mockFile0 = new MockFile(\"unexpected: \", \"Bad dependency: {0} -> {1}. Modules must be listed in dependency order.\");\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    compiler0.addNewScript(jsAst0);\n    compiler0.hasErrors();\n}",
    "testName" : "test0078"
  },
  "test03134" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03134() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getModuleGraph();\n    compiler0.getProgress();\n}",
    "testName" : "test03134"
  },
  "test089101" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089101() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getSourceRegion((String) null, (-1));\n    compiler0.getProgress();\n}",
    "testName" : "test089101"
  },
  "test04346" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04346() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getTopScope();\n    compiler0.getProgress();\n}",
    "testName" : "test04346"
  },
  "test06369" : {
    "methodSignature" : "void endPass()",
    "methodName" : "endPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06369() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.endPass();\n}",
    "testName" : "test06369"
  },
  "test05156" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05156() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compilerOptions0.sourceMapOutputPath = \"goog.tweak.registerBoolean\";\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test05156"
  },
  "test05155" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05155() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compilerOptions0.sourceMapOutputPath = \"goog.tweak.registerBoolean\";\n    compiler0.getProgress();\n}",
    "testName" : "test05155"
  },
  "test07179" : {
    "methodSignature" : "TypedScopeCreator(AbstractCompiler compiler)",
    "methodName" : "TypedScopeCreator",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07179() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    InlineProperties inlineProperties0 = new InlineProperties(compiler0);\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);\n}",
    "testName" : "test07179"
  },
  "test02831" : {
    "methodSignature" : "Node ensureLibraryInjected(String resourceName)",
    "methodName" : "ensureLibraryInjected",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02831() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SourceFile sourceFile0 = SourceFile.fromFile(\"!NjVE\\\":o:'^od||M\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    compiler0.ensureLibraryInjected((String) null);\n}",
    "testName" : "test02831"
  },
  "test097110" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097110() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"*pJ?d%<~l\");\n    compiler0.getErrorManager();\n    compiler0.getProgress();\n}",
    "testName" : "test097110"
  },
  "test092104" : {
    "methodSignature" : "Node ensureLibraryInjected(String resourceName)",
    "methodName" : "ensureLibraryInjected",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092104() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.ensureLibraryInjected(\"// Input %num%\");\n}",
    "testName" : "test092104"
  }
}