focal_method,test_prefix,docstring
"public int getVarCount() {
    return vars.size();
}","public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""KeyworLiteral"", ""KeyworLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = compiler0.parseTestCode(""msg.illegal.character"");
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    assertEquals(33, scope0.getVarCount());
}","/**
 * Returns number of variables in this scope
 */"
"public int getVarCount() {
    return vars.size();
}","public void test001() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""KeyworLiteral"", ""KeyworLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = compiler0.parseTestCode(""msg.illegal.character"");
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    typedScopeCreator0.patchGlobalScope(scope0, node0);
    assertEquals(32, scope0.getVarCount());
}","/**
 * Returns number of variables in this scope
 */"
"@Override
public Scope createScope(Node root, Scope parent) {
    // Constructing the global scope is very different than constructing
    // inner scopes, because only global scopes can contain named classes that
    // show up in the type registry.
    Scope newScope = null;
    AbstractScopeBuilder scopeBuilder = null;
    if (parent == null) {
        JSType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
        // Mark the main root, the externs root, and the src root
        // with the global this type.
        root.setJSType(globalThis);
        root.getFirstChild().setJSType(globalThis);
        root.getLastChild().setJSType(globalThis);
        // Run a first-order analysis over the syntax tree.
        (new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults)).process(root.getFirstChild(), root.getLastChild());
        // Find all the classes in the global scope.
        newScope = createInitialScope(root);
        GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);
        scopeBuilder = globalScopeBuilder;
        NodeTraversal.traverse(compiler, root, scopeBuilder);
    } else {
        newScope = new Scope(parent, root);
        LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);
        scopeBuilder = localScopeBuilder;
        localScopeBuilder.build();
    }
    scopeBuilder.resolveStubDeclarations();
    // Gather the properties in each function that we found in the
    // global scope, if that function has a @this type that we can
    // build properties on.
    for (Node functionNode : scopeBuilder.nonExternFunctions) {
        JSType type = functionNode.getJSType();
        if (type != null && type.isFunctionType()) {
            FunctionType fnType = type.toMaybeFunctionType();
            JSType fnThisType = fnType.getTypeOfThis();
            if (!fnThisType.isUnknownType()) {
                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));
            }
        }
    }
    if (parent == null) {
        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes, delegateCallingConventions);
    }
    newScope.setTypeResolver(scopeBuilder);
    return newScope;
}","public void test012() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"", ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    Node node0 = Node.newString(120, ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    Node node1 = new Node(37, node0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = Scope.createGlobalScope(node0);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node1, scope0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Creates a scope with all types declared. Declares newly discovered types
 * and type properties in the type registry.
 */"
"public boolean isGlobal() {
    return parent == null;
}","public void test023() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    Node node0 = Node.newString("""");
    Node node1 = new Node(37, node0, 49, 29);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
    assertTrue(scope0.isGlobal());
}","/**
 * Returns whether this is the global scope.
 */"
"public int getVarCount() {
    return vars.size();
}","public void test034() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"", ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    scope0.resolveTypes();
    assertEquals(33, scope0.getVarCount());
}","/**
 * Returns number of variables in this scope
 */"
"public int getVarCount() {
    return vars.size();
}","public void test045() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"", ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = typedScopeCreator0.createInitialScope(node0);
    Node node1 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
    assertEquals(1, scope1.getVarCount());
}","/**
 * Returns number of variables in this scope
 */"
"@Override
public Scope createScope(Node root, Scope parent) {
    // Constructing the global scope is very different than constructing
    // inner scopes, because only global scopes can contain named classes that
    // show up in the type registry.
    Scope newScope = null;
    AbstractScopeBuilder scopeBuilder = null;
    if (parent == null) {
        JSType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
        // Mark the main root, the externs root, and the src root
        // with the global this type.
        root.setJSType(globalThis);
        root.getFirstChild().setJSType(globalThis);
        root.getLastChild().setJSType(globalThis);
        // Run a first-order analysis over the syntax tree.
        (new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults)).process(root.getFirstChild(), root.getLastChild());
        // Find all the classes in the global scope.
        newScope = createInitialScope(root);
        GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);
        scopeBuilder = globalScopeBuilder;
        NodeTraversal.traverse(compiler, root, scopeBuilder);
    } else {
        newScope = new Scope(parent, root);
        LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);
        scopeBuilder = localScopeBuilder;
        localScopeBuilder.build();
    }
    scopeBuilder.resolveStubDeclarations();
    // Gather the properties in each function that we found in the
    // global scope, if that function has a @this type that we can
    // build properties on.
    for (Node functionNode : scopeBuilder.nonExternFunctions) {
        JSType type = functionNode.getJSType();
        if (type != null && type.isFunctionType()) {
            FunctionType fnType = type.toMaybeFunctionType();
            JSType fnThisType = fnType.getTypeOfThis();
            if (!fnThisType.isUnknownType()) {
                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));
            }
        }
    }
    if (parent == null) {
        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes, delegateCallingConventions);
    }
    newScope.setTypeResolver(scopeBuilder);
    return newScope;
}","public void test056() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""Node$ObjectPropListItem"", ""\""@\"""");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node1 = new Node(118, node0, (-1876), 53);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node1, (Scope) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //   Node(VAR): [source unknown]
        //   Parent: NULL
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Creates a scope with all types declared. Declares newly discovered types
 * and type properties in the type registry.
 */"
"@Override
public Scope createScope(Node root, Scope parent) {
    // Constructing the global scope is very different than constructing
    // inner scopes, because only global scopes can contain named classes that
    // show up in the type registry.
    Scope newScope = null;
    AbstractScopeBuilder scopeBuilder = null;
    if (parent == null) {
        JSType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
        // Mark the main root, the externs root, and the src root
        // with the global this type.
        root.setJSType(globalThis);
        root.getFirstChild().setJSType(globalThis);
        root.getLastChild().setJSType(globalThis);
        // Run a first-order analysis over the syntax tree.
        (new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults)).process(root.getFirstChild(), root.getLastChild());
        // Find all the classes in the global scope.
        newScope = createInitialScope(root);
        GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);
        scopeBuilder = globalScopeBuilder;
        NodeTraversal.traverse(compiler, root, scopeBuilder);
    } else {
        newScope = new Scope(parent, root);
        LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);
        scopeBuilder = localScopeBuilder;
        localScopeBuilder.build();
    }
    scopeBuilder.resolveStubDeclarations();
    // Gather the properties in each function that we found in the
    // global scope, if that function has a @this type that we can
    // build properties on.
    for (Node functionNode : scopeBuilder.nonExternFunctions) {
        JSType type = functionNode.getJSType();
        if (type != null && type.isFunctionType()) {
            FunctionType fnType = type.toMaybeFunctionType();
            JSType fnThisType = fnType.getTypeOfThis();
            if (!fnThisType.isUnknownType()) {
                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));
            }
        }
    }
    if (parent == null) {
        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes, delegateCallingConventions);
    }
    newScope.setTypeResolver(scopeBuilder);
    return newScope;
}","public void test067() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"", ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = typedScopeCreator0.createInitialScope(node0);
    Node node1 = new Node(105, node0, 37, 281);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node1, scope0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Creates a scope with all types declared. Declares newly discovered types
 * and type properties in the type registry.
 */"
"public int getVarCount() {
    return vars.size();
}","public void test078() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.Keyworditeral"", ""com.google.javascript.rhino.head.ast.Keyworditeral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = Node.newString(49, ""com.google.javascript.rhino.head.ast.Keyworditeral"");
    Node node1 = new Node(86, node0, 40, 49);
    Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
    assertEquals(32, scope0.getVarCount());
}","/**
 * Returns number of variables in this scope
 */"
"public boolean isLocal() {
    return parent != null;
}","public void test089() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"", ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    Node node0 = Node.newString(39, ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    Node node1 = new Node(37, node0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = Scope.createGlobalScope(node0);
    Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
    assertTrue(scope1.isLocal());
}","/**
 * Returns whether this is a local scope (i.e. not the global scope).
 */"
"public boolean isGlobal() {
    return parent == null;
}","public void test0910() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""Keyworiteral"", ""Keyworiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node1 = new Node(41, node0);
    Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
    assertTrue(scope0.isGlobal());
}","/**
 * Returns whether this is the global scope.
 */"
"public boolean isLocal() {
    return parent != null;
}","public void test1011() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    Node node0 = Node.newString(43, ""Keyworiteral"");
    Node node1 = new Node(44, node0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
    assertFalse(scope0.isLocal());
}","/**
 * Returns whether this is a local scope (i.e. not the global scope).
 */"
"public int getVarCount() {
    return vars.size();
}","public void test1112() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.Keyworditeral"", ""com.google.javascript.rhino.head.ast.Keyworditeral"");
    Node node0 = Node.newString(""com.google.javascript.rhino.head.ast.Keyworditeral"");
    Node node1 = new Node(47, node0, 37, 50);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
    assertEquals(32, scope0.getVarCount());
}","/**
 * Returns number of variables in this scope
 */"
"public boolean isGlobal() {
    return parent == null;
}","public void test1213() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"", ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node0 = Node.newString(64, ""ignoreCajaProperties"");
    Node node1 = new Node(36, node0, 0, 1448);
    Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
    assertTrue(scope0.isGlobal());
}","/**
 * Returns whether this is the global scope.
 */"
"public boolean isGlobal() {
    return parent == null;
}","public void test1314() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""KeyworLiteral"", ""KeyworLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node1 = new Node(122, node0, (-775), 37);
    Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
    assertTrue(scope0.isGlobal());
}","/**
 * Returns whether this is the global scope.
 */"
"@Override
public Scope createScope(Node root, Scope parent) {
    // Constructing the global scope is very different than constructing
    // inner scopes, because only global scopes can contain named classes that
    // show up in the type registry.
    Scope newScope = null;
    AbstractScopeBuilder scopeBuilder = null;
    if (parent == null) {
        JSType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
        // Mark the main root, the externs root, and the src root
        // with the global this type.
        root.setJSType(globalThis);
        root.getFirstChild().setJSType(globalThis);
        root.getLastChild().setJSType(globalThis);
        // Run a first-order analysis over the syntax tree.
        (new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults)).process(root.getFirstChild(), root.getLastChild());
        // Find all the classes in the global scope.
        newScope = createInitialScope(root);
        GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);
        scopeBuilder = globalScopeBuilder;
        NodeTraversal.traverse(compiler, root, scopeBuilder);
    } else {
        newScope = new Scope(parent, root);
        LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);
        scopeBuilder = localScopeBuilder;
        localScopeBuilder.build();
    }
    scopeBuilder.resolveStubDeclarations();
    // Gather the properties in each function that we found in the
    // global scope, if that function has a @this type that we can
    // build properties on.
    for (Node functionNode : scopeBuilder.nonExternFunctions) {
        JSType type = functionNode.getJSType();
        if (type != null && type.isFunctionType()) {
            FunctionType fnType = type.toMaybeFunctionType();
            JSType fnThisType = fnType.getTypeOfThis();
            if (!fnThisType.isUnknownType()) {
                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));
            }
        }
    }
    if (parent == null) {
        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes, delegateCallingConventions);
    }
    newScope.setTypeResolver(scopeBuilder);
    return newScope;
}","public void test1415() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"", ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node1 = Node.newString(15, ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    Node node2 = new Node(64, node1, 47, 57);
    node0.addChildToBack(node2);
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node2, (Scope) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Creates a scope with all types declared. Declares newly discovered types
 * and type properties in the type registry.
 */"
"@Override
public Scope createScope(Node root, Scope parent) {
    // Constructing the global scope is very different than constructing
    // inner scopes, because only global scopes can contain named classes that
    // show up in the type registry.
    Scope newScope = null;
    AbstractScopeBuilder scopeBuilder = null;
    if (parent == null) {
        JSType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
        // Mark the main root, the externs root, and the src root
        // with the global this type.
        root.setJSType(globalThis);
        root.getFirstChild().setJSType(globalThis);
        root.getLastChild().setJSType(globalThis);
        // Run a first-order analysis over the syntax tree.
        (new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults)).process(root.getFirstChild(), root.getLastChild());
        // Find all the classes in the global scope.
        newScope = createInitialScope(root);
        GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);
        scopeBuilder = globalScopeBuilder;
        NodeTraversal.traverse(compiler, root, scopeBuilder);
    } else {
        newScope = new Scope(parent, root);
        LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);
        scopeBuilder = localScopeBuilder;
        localScopeBuilder.build();
    }
    scopeBuilder.resolveStubDeclarations();
    // Gather the properties in each function that we found in the
    // global scope, if that function has a @this type that we can
    // build properties on.
    for (Node functionNode : scopeBuilder.nonExternFunctions) {
        JSType type = functionNode.getJSType();
        if (type != null && type.isFunctionType()) {
            FunctionType fnType = type.toMaybeFunctionType();
            JSType fnThisType = fnType.getTypeOfThis();
            if (!fnThisType.isUnknownType()) {
                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));
            }
        }
    }
    if (parent == null) {
        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes, delegateCallingConventions);
    }
    newScope.setTypeResolver(scopeBuilder);
    return newScope;
}","public void test1516() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""Node$ObjectPropListItem"", ""\""@\"""");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Node node1 = new Node(118, node0, (-1876), 53);
    node1.addSuppression(""0\u0005T+m(Yj9rYZl?Qw"");
    // Undeclared exception!
    try {
        typedScopeCreator0.createScope(node1, (Scope) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //   Node(VAR): [source unknown]
        //   Parent: NULL
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Creates a scope with all types declared. Declares newly discovered types
 * and type properties in the type registry.
 */"
"public int getVarCount() {
    return vars.size();
}","public void test1617() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"", ""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.KeywordLiteral"");
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    assertEquals(33, scope0.getVarCount());
}","/**
 * Returns number of variables in this scope
 */"
