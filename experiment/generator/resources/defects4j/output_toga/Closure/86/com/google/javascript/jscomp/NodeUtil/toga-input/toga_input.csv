focal_method,test_prefix,docstring
"public int getSideEffectFlags() {
    return getIntProp(SIDE_EFFECT_FLAGS);
}","public void test0011() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""IXV"", (-1), (-1));
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(0, node0.getSideEffectFlags());
}","/**
 * Returns the side effects flags for this node.
 */"
"public int getType() {
    return type;
}","public void test0012() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""IXV"", (-1), (-1));
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(38, node0.getType());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test0013() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""IXV"", (-1), (-1));
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertTrue(node0.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"static boolean isNameReferenced(Node node, String name) {
    return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());
}","public void test0024() throws Throwable {
    Node node0 = new Node((-1701), (-1701), (-1701));
    boolean boolean0 = NodeUtil.isNameReferenced(node0, ""m+DEB*@?n"");
    assertFalse(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"static Node getArgumentForCallOrNew(Node call, int index) {
    Preconditions.checkState(isCallOrNew(call));
    return getNthSibling(call.getFirstChild().getNext(), index);
}","public void test0035() throws Throwable {
    Node node0 = new Node(108);
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForCallOrNew(node0, (-1784));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Given the new or call, this returns the nth
 * argument of the call or null if no such argument exists.
 */"
"static boolean isFunctionObjectCallOrApply(Node callNode) {
    return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);
}","public void test0046() throws Throwable {
    Node node0 = Node.newNumber(1241.5603038030308);
    boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.apply(...)
 *    x['apply'](...)
 *  or
 *    x.call(...)
 *    x['call'](...)
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test0057() throws Throwable {
    Node node0 = new Node(107);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static String getPrototypePropertyName(Node qName) {
    String qNameStr = qName.getQualifiedName();
    int prototypeIdx = qNameStr.lastIndexOf("".prototype."");
    int memberIndex = prototypeIdx + "".prototype"".length() + 1;
    return qNameStr.substring(memberIndex);
}","public void test0068() throws Throwable {
    Node node0 = new Node(11);
    // Undeclared exception!
    try {
        NodeUtil.getPrototypePropertyName(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The string property name part of a qualified prototype name.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test0079() throws Throwable {
    Node node0 = new Node(104, 104, 104);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDOT 104
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test00810() throws Throwable {
    Node node0 = new Node(104, 104, 104);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean functionCallHasSideEffects(Node callNode) {
    return functionCallHasSideEffects(callNode, null);
}","public void test00911() throws Throwable {
    Node node0 = Node.newNumber(Double.NaN);
    // Undeclared exception!
    try {
        NodeUtil.functionCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected CALL node, got NUMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if calls to this function have side effects.
 *
 * @param callNode - function call node
 */"
"static boolean containsCall(Node n) {
    return containsType(n, Token.CALL);
}","public void test01012() throws Throwable {
    Node node0 = Node.newString(2746, ""[Tq+(}`&.m1wg,5[y"");
    boolean boolean0 = NodeUtil.containsCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this node or any of its children a CALL?
 */"
"static Node newQualifiedNameNode(CodingConvention convention, String name, Node basisNode, String originalName) {
    Node node = newQualifiedNameNode(convention, name, -1, -1);
    setDebugInformation(node, basisNode, originalName);
    return node;
}","public void test01113() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    // Undeclared exception!
    try {
        NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ""Invalid attempt to remove node: "", (Node) null, ""Invalid attempt to remove node: "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Creates a node representing a qualified name, copying over the source
 * location information from the basis node and assigning the given original
 * name to the node.
 *
 * @param name A qualified name (e.g. ""foo"" or ""foo.bar.baz"")
 * @param basisNode The node that represents the name as currently found in
 *     the AST.
 * @param originalName The original name of the item being represented by the
 *     NAME node. Used for debugging information.
 *
 * @return A NAME or GETPROP node
 */"
"static Node getArgumentForFunction(Node function, int index) {
    Preconditions.checkState(isFunction(function));
    return getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
}","public void test01214() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForFunction(node0, 4);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Given the function, this returns the nth
 * argument or null if no such parameter exists.
 */"
"static boolean isVarArgsFunction(Node function) {
    Preconditions.checkArgument(isFunction(function));
    return isNameReferenced(function.getLastChild(), ""arguments"", new MatchNotFunction());
}","public void test01315() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    // Undeclared exception!
    try {
        NodeUtil.isVarArgsFunction(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines if a function takes a variable number of arguments by
 * looking for references to the ""arguments"" var_args object.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test01416() throws Throwable {
    Node node0 = Node.newString(30, ""arguments"");
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static Node getFunctionBody(Node fn) {
    Preconditions.checkArgument(isFunction(fn));
    return fn.getLastChild();
}","public void test01517() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    Node node1 = NodeUtil.getFunctionBody(node0);
    assertNull(node1);
}","/**
 * Return a BLOCK node for the given FUNCTION node.
 */"
"public int getType() {
    return type;
}","public void test01618() throws Throwable {
    Node node0 = Node.newNumber(1732.47788);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test01619() throws Throwable {
    Node node0 = Node.newNumber(1732.47788);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test01720() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test01821() throws Throwable {
    Node node0 = new Node(26, 26, (-6));
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test01922() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(85, node0, node0, node0, node0, 48, 8);
    NodeUtil.getExpressionBooleanValue(node1);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test02023() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test02124() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test02225() throws Throwable {
    Node node0 = new Node(100);
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test02326() throws Throwable {
    Node node0 = new Node(101);
    // Undeclared exception!
    try {
        NodeUtil.getExpressionBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"public int getType() {
    return type;
}","public void test02427() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    NodeUtil.getExpressionBooleanValue(node0);
    assertEquals(38, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test02428() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    NodeUtil.getExpressionBooleanValue(node0);
    assertEquals(77, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test02429() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    NodeUtil.getExpressionBooleanValue(node0);
    assertEquals(91, node0.getLineno());
}",""
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test02530() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    NodeUtil.getExpressionBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return TernaryValue.TRUE;
    }
    return TernaryValue.UNKNOWN;
}","public void test02631() throws Throwable {
    Node node0 = Node.newString("""");
    NodeUtil.getBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 */"
"static TernaryValue getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return TernaryValue.TRUE;
    }
    return TernaryValue.UNKNOWN;
}","public void test02732() throws Throwable {
    Node node0 = new Node(41);
    NodeUtil.getBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 */"
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test02833() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    NodeUtil.getExpressionBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return TernaryValue.TRUE;
    }
    return TernaryValue.UNKNOWN;
}","public void test02934() throws Throwable {
    Node node0 = Node.newString(44, ""1nfinity"");
    NodeUtil.getBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 */"
"static TernaryValue getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return TernaryValue.TRUE;
    }
    return TernaryValue.UNKNOWN;
}","public void test03035() throws Throwable {
    Node node0 = new Node(47, 47, 47);
    NodeUtil.getBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 */"
"static TernaryValue getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return TernaryValue.TRUE;
    }
    return TernaryValue.UNKNOWN;
}","public void test03136() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    NodeUtil.getBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 */"
"static TernaryValue getBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
        case Token.REGEXP:
            return TernaryValue.TRUE;
    }
    return TernaryValue.UNKNOWN;
}","public void test03237() throws Throwable {
    Node node0 = new Node(64);
    NodeUtil.getBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 */"
"public int getType() {
    return type;
}","public void test03338() throws Throwable {
    Node node0 = new Node(89);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    NodeUtil.getBooleanValue(node1);
    assertEquals(122, node1.getType());
}",""
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test03439() throws Throwable {
    Node node0 = Node.newString(""=DYN1"");
    NodeUtil.getExpressionBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test03540() throws Throwable {
    Node node0 = Node.newNumber(Double.NaN);
    NodeUtil.getExpressionBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"public int getType() {
    return type;
}","public void test03641() throws Throwable {
    Node node0 = Node.newString(67, ""%="");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""NaN"", node0);
    NodeUtil.getExpressionBooleanValue(node1);
    assertEquals(38, node1.getType());
}",""
"static TernaryValue getExpressionBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getExpressionBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getExpressionBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());
                TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getExpressionBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        default:
            return getBooleanValue(n);
    }
}","public void test03642() throws Throwable {
    Node node0 = Node.newString(67, ""%="");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""NaN"", node0);
    NodeUtil.getExpressionBooleanValue(node1);
    assertNotSame(node0, node1);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03743() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""undefined"", 8, (-2187));
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""undefined"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test03745() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""undefined"", 8, (-2187));
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals((-1), node0.getLineno());
}",""
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03846() throws Throwable {
    Node node0 = Node.newString(""1l"");
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""1l"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test03947() throws Throwable {
    Node node0 = Node.newNumber(1241.5603038030308);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""1241.5603038030308"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test04048() throws Throwable {
    Node node0 = Node.newString(41, ""k"");
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""null"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test04149() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""false"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test04250() throws Throwable {
    Node node0 = Node.newString("""");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(""undefined"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public int getType() {
    return type;
}","public void test04251() throws Throwable {
    Node node0 = Node.newString("""");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(122, node1.getType());
}",""
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test04352() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    String string0 = NodeUtil.getStringValue(node0);
    assertNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test04453() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""iD_gCF"", 106, 106);
    String string0 = NodeUtil.getStringValue(node0);
    assertNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04454() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""iD_gCF"", 106, 106);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(106, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test04455() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""iD_gCF"", 106, 106);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(38, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04456() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""iD_gCF"", 106, 106);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(106, node0.getCharno());
}",""
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test04557() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", 94, 94);
    String string0 = NodeUtil.getStringValue(node0);
    assertNotNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04558() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", 94, 94);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(94, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04559() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", 94, 94);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(94, node0.getCharno());
}",""
"static String getStringValue(Node n) {
    // TODO(user): Convert constant array, object, and regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
    }
    return null;
}","public void test04661() throws Throwable {
    Node node0 = Node.newNumber((double) 17);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""17"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04762() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""PRIVATE"", 3292, 3292);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(3292, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04763() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""PRIVATE"", 3292, 3292);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(3292, node0.getLineno());
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            return Double.NaN;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
    }
    return null;
}","public void test04764() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""PRIVATE"", 3292, 3292);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"public int getType() {
    return type;
}","public void test04765() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""PRIVATE"", 3292, 3292);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(38, node0.getType());
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            return Double.NaN;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
    }
    return null;
}","public void test04866() throws Throwable {
    Node node0 = Node.newString(114, ""rI"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            return Double.NaN;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
    }
    return null;
}","public void test04967() throws Throwable {
    Node node0 = Node.newNumber((double) 57, 57, (-48));
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(57.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            return Double.NaN;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
    }
    return null;
}","public void test05068() throws Throwable {
    Node node0 = new Node(41);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            return Double.NaN;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
    }
    return null;
}","public void test05169() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            return Double.NaN;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
    }
    return null;
}","public void test05270() throws Throwable {
    Node node0 = Node.newString(44, ""^="");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(1.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Node newUndefinedNode(Node srcReferenceNode) {
    // TODO(johnlenz): Why this instead of the more common ""undefined""?
    Node node = new Node(Token.VOID, Node.newNumber(0));
    if (srcReferenceNode != null) {
        node.copyInformationFromForTree(srcReferenceNode);
    }
    return node;
}","public void test05371() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    assertNotNull(node0);
}","/**
 * Create a node for an empty result expression:
 *   ""void 0""
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            return Double.NaN;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
    }
    return null;
}","public void test05372() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(Double.NaN, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            return Double.NaN;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
    }
    return null;
}","public void test05474() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 16, (-3788));
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(Double.NaN, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test05476() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 16, (-3788));
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals((-1), node0.getCharno());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test05577() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""try "", (-46), 117);
    node0.addChildrenToBack(node0);
    String string0 = NodeUtil.getFunctionName(node0);
    assertEquals(1, node0.getChildCount());
}",""
"static String getFunctionName(Node n) {
    Node parent = n.getParent();
    String name = n.getFirstChild().getString();
    switch(parent.getType()) {
        case Token.NAME:
            // var name = function() ...
            // var name2 = function name1() ...
            return parent.getString();
        case Token.ASSIGN:
            // qualified.name = function() ...
            // qualified.name2 = function name1() ...
            return parent.getFirstChild().getQualifiedName();
        default:
            // function name() ...
            return name != null && name.length() != 0 ? name : null;
    }
}","public void test05578() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""try "", (-46), 117);
    node0.addChildrenToBack(node0);
    String string0 = NodeUtil.getFunctionName(node0);
    assertEquals(""try "", string0);
}","/**
 * Gets the function's name. This method recognizes five forms:
 * <ul>
 * <li>{@code function name() ...}</li>
 * <li>{@code var name = function() ...}</li>
 * <li>{@code qualified.name = function() ...}</li>
 * <li>{@code var name2 = function name1() ...}</li>
 * <li>{@code qualified.name2 = function name1() ...}</li>
 * </ul>
 * In two last cases with named function expressions, the second name is
 * returned (the variable of qualified name).
 *
 * @param n a node whose type is {@link Token#FUNCTION}
 * @return the function's name, or {@code null} if it has no name
 */"
"static String getNearestFunctionName(Node n) {
    String name = getFunctionName(n);
    if (name != null) {
        return name;
    }
    // Check for the form { 'x' : function() { } }
    Node parent = n.getParent();
    switch(parent.getType()) {
        case Token.STRING:
            // Return the name of the literal's key.
            return getStringValue(parent);
    }
    return null;
}","public void test05679() throws Throwable {
    Node node0 = Node.newString(77, ""<,R3,Np^"", 39, 39);
    Node node1 = new Node(105, node0, node0, node0, node0, (-2094), (-3));
    Node node2 = new Node((-37), node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertEquals(""<,R3,Np^"", string0);
}","/**
 * Gets the function's name. This method recognizes the forms:
 * <ul>
 * <li>{@code &#123;'name': function() ...&#125;}</li>
 * <li>{@code &#123;name: function() ...&#125;}</li>
 * <li>{@code function name() ...}</li>
 * <li>{@code var name = function() ...}</li>
 * <li>{@code qualified.name = function() ...}</li>
 * <li>{@code var name2 = function name1() ...}</li>
 * <li>{@code qualified.name2 = function name1() ...}</li>
 * </ul>
 *
 * @param n a node whose type is {@link Token#FUNCTION}
 * @return the function's name, or {@code null} if it has no name
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test05781() throws Throwable {
    Node node0 = Node.newNumber(1241.5603038030308);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test05882() throws Throwable {
    Node node0 = Node.newString(""1l"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test05983() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test06084() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test06185() throws Throwable {
    Node node0 = new Node(44, 44, 44);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test06286() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test06387() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""p('e]9@Gp7Gpu"", node0, """");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertEquals(43, node1.getCharno());
}",""
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test06388() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""p('e]9@Gp7Gpu"", node0, """");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test06389() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""p('e]9@Gp7Gpu"", node0, """");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test06490() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", 94, 94);
    NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test06491() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", 94, 94);
    NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    assertEquals(94, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test06492() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", 94, 94);
    NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    assertEquals(38, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test06493() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", 94, 94);
    NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
    assertEquals(94, node0.getCharno());
}",""
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test06594() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test06695() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test06796() throws Throwable {
    Node node0 = new Node(64);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test06897() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertFalse(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test06998() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(85, node0, node0, node0, node0, 48, 8);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test07099() throws Throwable {
    Node node0 = Node.newString(11, ""Uw*{eDIZ&"");
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test071100() throws Throwable {
    Node node0 = new Node(12, 12, 12);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test072101() throws Throwable {
    Node node0 = new Node(14, 14, 14);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test073102() throws Throwable {
    Node node0 = new Node(17, (-1953), 37);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test074103() throws Throwable {
    Node node0 = new Node(18, 153, 18);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test075104() throws Throwable {
    Node node0 = new Node(25);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test076105() throws Throwable {
    Node node0 = Node.newString(19, ""c!7klT78fg"");
    Vector<String> vector0 = new Vector<String>();
    ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.withExplicitOrder((List<String>) vector0);
    Node node1 = new Node(27, node0, node0, node0, 32, 32);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node1, immutableSortedSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test077106() throws Throwable {
    Node node0 = new Node(28, 2, 42);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test078107() throws Throwable {
    Node node0 = new Node(2770);
    Node node1 = new Node(29, node0, node0, node0, node0, 1856, 2);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test079108() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test080109() throws Throwable {
    Node node0 = new Node(31);
    Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(iterator0).hasNext();
    ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends String>) iterator0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSortedSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test081110() throws Throwable {
    Node node0 = Node.newString(32, ""OR ryX] \n"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test082111() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$10"", 76, 76);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertEquals(76, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test082112() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$10"", 76, 76);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertEquals(33, node0.getType());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test082113() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$10"", 76, 76);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test082114() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$10"", 76, 76);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertEquals(76, node0.getCharno());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test082115() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$10"", 76, 76);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertEquals(2, node0.getChildCount());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test083116() throws Throwable {
    Node node0 = Node.newString(35, ""Uw*{eDIZ&"");
    ImmutableSet<String> immutableSet0 = ImmutableSet.of(""GETELEM Uw*{eDIZ&\n"", ""AK{"", "">>"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test084117() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""IXV"", (-1), (-1));
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getSideEffectFlags() {
    return getIntProp(SIDE_EFFECT_FLAGS);
}","public void test084118() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""IXV"", (-1), (-1));
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertEquals(0, node0.getSideEffectFlags());
}","/**
 * Returns the side effects flags for this node.
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test084119() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""IXV"", (-1), (-1));
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertFalse(node0.hasChildren());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test085120() throws Throwable {
    Node node0 = Node.newNumber((double) 14);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test086121() throws Throwable {
    Node node0 = Node.newString("""");
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test087122() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test088123() throws Throwable {
    Node node0 = new Node(100);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    Node node1 = new Node(42, node0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test089124() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test090125() throws Throwable {
    Node node0 = Node.newString(44, ""toStr[jig"");
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test091126() throws Throwable {
    Node node0 = new Node(45, 45, (-6));
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test092127() throws Throwable {
    Node node0 = new Node(46);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test093128() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""rNyecV2~b"", 49, (-9));
    ImmutableSet<String> immutableSet0 = ImmutableSet.of(""IXV"", ""rNyecV2~b"", ""IXV"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    assertEquals((-1), node0.getCharno());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test093129() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""rNyecV2~b"", 49, (-9));
    ImmutableSet<String> immutableSet0 = ImmutableSet.of(""IXV"", ""rNyecV2~b"", ""IXV"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test094130() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""zXGQ6R[X!B *I&lY*Mh"", ""H(qb585z`v+&gM9|+"");
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertTrue(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test095131() throws Throwable {
    Node node0 = new Node(61);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test096132() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""zXGQ6R[X!B *I&lY*Mh"", ""H(qb585z`v+&gM9|+"");
    node0.addChildToFront(node0);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test097133() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test098134() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test099135() throws Throwable {
    Node node0 = new Node(11);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test100136() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test101137() throws Throwable {
    Node node0 = Node.newString(13, ""Inciniey"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test102138() throws Throwable {
    Node node0 = new Node(14);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test103139() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test104140() throws Throwable {
    Node node0 = new Node(16);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test105141() throws Throwable {
    Node node0 = Node.newString(126, """");
    Node node1 = new Node(17, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test106142() throws Throwable {
    Node node0 = new Node(18, 18, 18);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test107143() throws Throwable {
    Node node0 = Node.newString(19, ""FNHS[WTZWSDlN|"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test108144() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test109145() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test110146() throws Throwable {
    Node node0 = new Node(23, 23, 23);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test111147() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test112148() throws Throwable {
    Node node0 = new Node(25);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test113149() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test114150() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test115151() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test116152() throws Throwable {
    Node node0 = new Node(2770);
    Node node1 = new Node(29, node0, node0, node0, node0, 1856, 2);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test117153() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test118154() throws Throwable {
    Node node0 = new Node(31);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDELPROP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test119155() throws Throwable {
    Node node0 = new Node(32, 51, (-3100));
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test120156() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertEquals(80, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test120157() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertEquals(80, node0.getLineno());
}",""
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test120158() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"public int getType() {
    return type;
}","public void test120159() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertEquals(33, node0.getType());
}",""
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test121160() throws Throwable {
    Node node0 = Node.newString(104, "")"");
    Node node1 = new Node(34, node0, node0, node0, (-2010), 29);
    Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node1, predicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETPROP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test122161() throws Throwable {
    Node node0 = new Node(81);
    Node node1 = new Node(36, node0, node0, node0, node0);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETELEM
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test123162() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test124163() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test125164() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test126165() throws Throwable {
    Node node0 = new Node(46, 46, 46);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test127166() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test128167() throws Throwable {
    Node node0 = Node.newString(48, ""y7cX^k9JL\u0003-MT[V/"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test129168() throws Throwable {
    Node node0 = new Node(112);
    Node node1 = new Node(49, node0, node0, node0, node0, 256, 28);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTHROW 256
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test130169() throws Throwable {
    Node node0 = Node.newString(50, ""catch("");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test131170() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test132171() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(53);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test133172() throws Throwable {
    Node node0 = new Node(54, 54, 54);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeGETVAR 54
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test134173() throws Throwable {
    Node node0 = new Node(55);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETVAR
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test135174() throws Throwable {
    Node node0 = Node.newString(56, ""+=XL"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test136175() throws Throwable {
    Node node0 = Node.newString(57, ""exe"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test137176() throws Throwable {
    Node node0 = new Node(58, 43, 43);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_INIT_VALUES 43
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test138177() throws Throwable {
    Node node0 = new Node(59);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_NEXT
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test139178() throws Throwable {
    Node node0 = Node.newString(60, ""NodeUtil$VarCollector"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test140179() throws Throwable {
    Node node0 = new Node(61, (-61), 61);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test141180() throws Throwable {
    Node node0 = new Node(62, 62, 62);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRETURN_RESULT 62
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test142181() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test143182() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test144183() throws Throwable {
    Node node0 = Node.newString(65, ""FNHS[WTZWSDlNj"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test145184() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test146185() throws Throwable {
    Node node0 = new Node(67);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDEL_REF
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test147186() throws Throwable {
    Node node0 = Node.newString(68, ""nL"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test148187() throws Throwable {
    Node node0 = Node.newString(69, ""EXTn8RS"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test149188() throws Throwable {
    Node node0 = Node.newString(71, ""NodeUtil$VarCollector"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test150189() throws Throwable {
    Node node0 = new Node(72, 72, 72);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeESCXMLTEXT 72
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test151190() throws Throwable {
    Node node0 = new Node(73, 73, 73);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_MEMBER 73
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test152191() throws Throwable {
    Node node0 = new Node(74, 74, 74);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NS_MEMBER 74
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test153192() throws Throwable {
    Node node0 = new Node(75, 75, (-1763));
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NAME
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test154193() throws Throwable {
    Node node0 = Node.newString(76, ""FNHS[WTZWSDlN|"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test155194() throws Throwable {
    Node node0 = new Node(77);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTRY
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test156195() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test157196() throws Throwable {
    Node node0 = Node.newString(79, ""e6exoHo?]7$mVo9rE"", 79, 51);
    NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLB e6exoHo?]7$mVo9rE 79
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test158197() throws Throwable {
    Node node0 = new Node(80);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRB
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test159198() throws Throwable {
    Node node0 = new Node(81);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLC
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test160199() throws Throwable {
    Node node0 = new Node(41);
    Node node1 = new Node(82, node0, node0, node0, node0, (-1), 1946);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRC
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test161200() throws Throwable {
    Node node0 = new Node(83, 83, 83);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLP 83
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test162201() throws Throwable {
    Node node0 = new Node(84, 84, 84);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test163202() throws Throwable {
    Node node0 = new Node(85);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test164203() throws Throwable {
    Node node0 = new Node(86, 86, 86);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test165204() throws Throwable {
    Node node0 = new Node(87, 87, 87);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test166205() throws Throwable {
    Node node0 = Node.newString(88, "")"");
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test167206() throws Throwable {
    Node node0 = new Node(89);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test168207() throws Throwable {
    Node node0 = new Node(91, 91, 91);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test169208() throws Throwable {
    Node node0 = Node.newString(92, ""S`h+{H}S"");
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test170209() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test171210() throws Throwable {
    Node node0 = Node.newString(95, ""try "");
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test172211() throws Throwable {
    Node node0 = Node.newString(96, ""Ndp3@$E1kCNI}GBT"");
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test173212() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test174213() throws Throwable {
    Node node0 = new Node(99, 99, 99);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCOLON 99
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test175214() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test176215() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test177216() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test178217() throws Throwable {
    Node node0 = Node.newString(103, ""F`oD0{gLd/|t'[b/D"", 1887, 1887);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test179218() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test180219() throws Throwable {
    Node node0 = new Node(106, 106, 65136);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test181220() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test182221() throws Throwable {
    Node node0 = new Node(109);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test183222() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test184223() throws Throwable {
    Node node0 = new Node(111);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test185224() throws Throwable {
    Node node0 = new Node(112);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test186225() throws Throwable {
    Node node0 = new Node(113, 113, 113);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test187226() throws Throwable {
    Node node0 = Node.newString(114, ""rI"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test188227() throws Throwable {
    Node node0 = Node.newString(""$R~"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test189228() throws Throwable {
    Node node0 = Node.newString(117, ""com.google.common.collect.ExplicitOrdering"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test190229() throws Throwable {
    Node node0 = Node.newString(68, ""nL"");
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    Node node1 = NodeUtil.newVarNode(""0h4ahDRK)"", node0);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeVAR
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test191230() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test192231() throws Throwable {
    Node node0 = Node.newString(120, ""Dae"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test193232() throws Throwable {
    Node node0 = Node.newString(121, ""Dae"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test194233() throws Throwable {
    Node node0 = new Node(664);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test195234() throws Throwable {
    Node node0 = Node.newString(31, "")"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test196235() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test197236() throws Throwable {
    Node node0 = Node.newString(34, ""s+gw,~GRk9t#ac}Gd"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test198237() throws Throwable {
    Node node0 = Node.newString(35, ""UI*{eDOJ&"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test199238() throws Throwable {
    Node node0 = Node.newString(37, "")"");
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test200239() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test201240() throws Throwable {
    Node node0 = Node.newString(42, ""iE\""nD?]I&5s^c[Pt#NZ"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test202241() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test203242() throws Throwable {
    Node node0 = Node.newString(44, ""1nfinity"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test204243() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test205244() throws Throwable {
    Node node0 = Node.newString(46, ""Dv*;f;1\"""");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test206245() throws Throwable {
    Node node0 = Node.newString(49, ""=DYN1"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test207246() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test208247() throws Throwable {
    Node node0 = Node.newString(54, ""FNHS[WTZWSDlNj"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test209248() throws Throwable {
    Node node0 = new Node(58);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test210249() throws Throwable {
    Node node0 = Node.newString(59, ""D{"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test211250() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test212251() throws Throwable {
    Node node0 = new Node(64);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test213252() throws Throwable {
    Node node0 = Node.newString(67, ""catch("");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test214253() throws Throwable {
    Node node0 = Node.newString(70, ""Mvj`FMfK3y`6J jQ5"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test215254() throws Throwable {
    Node node0 = Node.newString(72, ""FNHS[WTZWSDlN|"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test216255() throws Throwable {
    Node node0 = new Node(73, 73, 73);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test217256() throws Throwable {
    Node node0 = new Node(74);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test218257() throws Throwable {
    Node node0 = new Node(75, 75, 65136);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test219258() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test220259() throws Throwable {
    Node node0 = Node.newString(80, ""+ 6S%O.PGCiL}Y"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test221260() throws Throwable {
    Node node0 = new Node(81);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test222261() throws Throwable {
    Node node0 = Node.newString(83, ""FNS[WTWSDlN|"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test223262() throws Throwable {
    Node node0 = new Node(98);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test224263() throws Throwable {
    Node node0 = Node.newString(99, ""N'ZK`[Na!DfssM"", 99, 64336);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test225264() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test226265() throws Throwable {
    Node node0 = Node.newString(101, ""exec"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test227266() throws Throwable {
    Node node0 = new Node(108, 108, 108);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test228267() throws Throwable {
    Node node0 = Node.newString(110, ""FNHS[WTZWSDlNj"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test229268() throws Throwable {
    Node node0 = Node.newString(115, ""~e"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test230269() throws Throwable {
    Node node0 = Node.newString(""ENUM_INIT_ARRAY"");
    Node node1 = new Node(118, node0, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test231270() throws Throwable {
    Node node0 = Node.newString(123, ""\""h'B5gAgku7$FP*/`@"", 123, 123);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test232271() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test233272() throws Throwable {
    Node node0 = new Node(125);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test234273() throws Throwable {
    Node node0 = new Node(127, 127, 127);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test235274() throws Throwable {
    Node node0 = new Node(128);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test236275() throws Throwable {
    Node node0 = new Node(129);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test237276() throws Throwable {
    Node node0 = Node.newString(64, ""=XnL"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test238277() throws Throwable {
    Node node0 = new Node(47, 47, 47);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test239278() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test240279() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    Node node1 = new Node(22, node0, node0, node0, node0, 48, 8);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test241280() throws Throwable {
    Node node0 = Node.newString(30, ""catch("");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test242281() throws Throwable {
    Node node0 = Node.newString(97, ""catch("", 97, 97);
    Node node1 = new Node(97, node0, 46, (-2));
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test243282() throws Throwable {
    Node node0 = Node.newString(93, ""9 F9s%|Z1!'i"");
    Node node1 = new Node(38, node0, node0, node0, node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean constructorCallHasSideEffects(Node callNode) {
    return constructorCallHasSideEffects(callNode, null);
}","public void test244283() throws Throwable {
    Node node0 = new Node(100);
    // Undeclared exception!
    try {
        NodeUtil.constructorCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NEW node, got OR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Do calls to this constructor have side effects?
 *
 * @param callNode - construtor call node
 */"
"static boolean callHasLocalResult(Node n) {
    Preconditions.checkState(n.getType() == Token.CALL);
    return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;
}","public void test245284() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    // Undeclared exception!
    try {
        NodeUtil.callHasLocalResult(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether the call has a local result.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test246285() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test247286() throws Throwable {
    Node node0 = new Node(89);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test248287() throws Throwable {
    Node node0 = new Node(30, 30, 3719);
    // Undeclared exception!
    try {
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test249288() throws Throwable {
    Node node0 = Node.newString(31, "")"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test250289() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertEquals(91, node0.getLineno());
}",""
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test250290() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test250291() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertEquals(77, node0.getCharno());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test250292() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test251293() throws Throwable {
    Node node0 = Node.newString(49, ""=DYN1"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler) {
    if (isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.DELPROP:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.CALL:
            return NodeUtil.functionCallHasSideEffects(n, compiler);
        case Token.NEW:
            return NodeUtil.constructorCallHasSideEffects(n, compiler);
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test252294() throws Throwable {
    Node node0 = Node.newString(113, ""p-%"", (-1386), 92);
    Node node1 = new Node(102, node0);
    Compiler compiler0 = new Compiler();
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
    assertTrue(boolean0);
}",""
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test253295() throws Throwable {
    Node node0 = Node.newString(103, ""nL"", 165, 1042);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test254296() throws Throwable {
    Node node0 = new Node(37, 37, (-751));
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test255297() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test255298() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertEquals(91, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test255299() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertEquals(77, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test255300() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""::oQ67/=*"", 91, 77);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertEquals(38, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test256301() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+GsUyeJhn!.+Aq4"", (-3), 118);
    Node node1 = NodeUtil.newExpr(node0);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
    assertEquals(130, node1.getType());
}",""
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test256302() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+GsUyeJhn!.+Aq4"", (-3), 118);
    Node node1 = NodeUtil.newExpr(node0);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getType() {
    return type;
}","public void test256303() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+GsUyeJhn!.+Aq4"", (-3), 118);
    Node node1 = NodeUtil.newExpr(node0);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
    assertEquals(33, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test256304() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+GsUyeJhn!.+Aq4"", (-3), 118);
    Node node1 = NodeUtil.newExpr(node0);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
    assertEquals((-1), node1.getLineno());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test256305() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+GsUyeJhn!.+Aq4"", (-3), 118);
    Node node1 = NodeUtil.newExpr(node0);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
    assertTrue(node0.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test257306() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(85, node0, node0, node0, node0, 48, 8);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test258307() throws Throwable {
    int int0 = NodeUtil.precedence(4);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test259308() throws Throwable {
    int int0 = NodeUtil.precedence(39);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test260309() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(5);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for goto (type 5)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test261310() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(6);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ifeq (type 6)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test262311() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(7);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ifne (type 7)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test263312() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(8);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setname (type 8)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test264313() throws Throwable {
    int int0 = NodeUtil.precedence(9);
    assertEquals(5, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test265314() throws Throwable {
    int int0 = NodeUtil.precedence(10);
    assertEquals(6, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test266315() throws Throwable {
    int int0 = NodeUtil.precedence(11);
    assertEquals(7, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test267316() throws Throwable {
    int int0 = NodeUtil.precedence(12);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test268317() throws Throwable {
    int int0 = NodeUtil.precedence(13);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test269318() throws Throwable {
    int int0 = NodeUtil.precedence(14);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test270319() throws Throwable {
    int int0 = NodeUtil.precedence(15);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test271320() throws Throwable {
    int int0 = NodeUtil.precedence(16);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test272321() throws Throwable {
    int int0 = NodeUtil.precedence(17);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test273322() throws Throwable {
    int int0 = NodeUtil.precedence(18);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test274323() throws Throwable {
    int int0 = NodeUtil.precedence(19);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test275324() throws Throwable {
    int int0 = NodeUtil.precedence(20);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test276325() throws Throwable {
    int int0 = NodeUtil.precedence(21);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test277326() throws Throwable {
    int int0 = NodeUtil.precedence(22);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test278327() throws Throwable {
    int int0 = NodeUtil.precedence(23);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test279328() throws Throwable {
    int int0 = NodeUtil.precedence(24);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test280329() throws Throwable {
    int int0 = NodeUtil.precedence(25);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test281330() throws Throwable {
    int int0 = NodeUtil.precedence(26);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test282331() throws Throwable {
    int int0 = NodeUtil.precedence(27);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test283332() throws Throwable {
    int int0 = NodeUtil.precedence(28);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test284333() throws Throwable {
    int int0 = NodeUtil.precedence(29);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test285334() throws Throwable {
    int int0 = NodeUtil.precedence(30);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test286335() throws Throwable {
    int int0 = NodeUtil.precedence(31);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test287336() throws Throwable {
    int int0 = NodeUtil.precedence(32);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test288337() throws Throwable {
    int int0 = NodeUtil.precedence(33);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test289338() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setprop (type 34)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test290339() throws Throwable {
    int int0 = NodeUtil.precedence(35);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test291340() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(36);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setelem (type 36)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test292341() throws Throwable {
    int int0 = NodeUtil.precedence(37);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test293342() throws Throwable {
    int int0 = NodeUtil.precedence(38);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test294343() throws Throwable {
    int int0 = NodeUtil.precedence(40);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test295344() throws Throwable {
    int int0 = NodeUtil.precedence(41);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test296345() throws Throwable {
    int int0 = NodeUtil.precedence(42);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test297346() throws Throwable {
    int int0 = NodeUtil.precedence(43);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test298347() throws Throwable {
    int int0 = NodeUtil.precedence(44);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test299348() throws Throwable {
    int int0 = NodeUtil.precedence(45);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test300349() throws Throwable {
    int int0 = NodeUtil.precedence(46);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test301350() throws Throwable {
    int int0 = NodeUtil.precedence(47);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test302351() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for bindname (type 48)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test303352() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for throw (type 49)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test304353() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=50> (type 50)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test305354() throws Throwable {
    int int0 = NodeUtil.precedence(51);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test306355() throws Throwable {
    int int0 = NodeUtil.precedence(52);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test307356() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=53> (type 53)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test308357() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(54);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for getvar (type 54)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test309358() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(55);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setvar (type 55)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test310359() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=56> (type 56)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test311360() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(57);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=57> (type 57)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test312361() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=58> (type 58)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test313362() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=59> (type 59)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test314363() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=60> (type 60)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test315364() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(61);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for thisfn (type 61)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test316365() throws Throwable {
    int int0 = NodeUtil.precedence(63);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test317366() throws Throwable {
    int int0 = NodeUtil.precedence(64);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test318367() throws Throwable {
    int int0 = NodeUtil.precedence(65);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test319368() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=66> (type 66)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test320369() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=67> (type 67)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test321370() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=68> (type 68)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test322371() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(69);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ref_special (type 69)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test323372() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=70> (type 70)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test324373() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(71);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=71> (type 71)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test325374() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=72> (type 72)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test326375() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=73> (type 73)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test327376() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(74);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=74> (type 74)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test328377() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=75> (type 75)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test329378() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(76);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=76> (type 76)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test330379() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for try (type 77)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test331380() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(78);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for semi (type 78)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test332381() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lb (type 79)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test333382() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(80);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rb (type 80)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test334383() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lc (type 81)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test335384() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rc (type 82)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test336385() throws Throwable {
    int int0 = NodeUtil.precedence(83);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test337386() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(84);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rp (type 84)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test338387() throws Throwable {
    int int0 = NodeUtil.precedence(85);
    assertEquals(0, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test339388() throws Throwable {
    int int0 = NodeUtil.precedence(86);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test340389() throws Throwable {
    int int0 = NodeUtil.precedence(87);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test341390() throws Throwable {
    int int0 = NodeUtil.precedence(88);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test342391() throws Throwable {
    int int0 = NodeUtil.precedence(89);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test343392() throws Throwable {
    int int0 = NodeUtil.precedence(90);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test344393() throws Throwable {
    int int0 = NodeUtil.precedence(91);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test345394() throws Throwable {
    int int0 = NodeUtil.precedence(92);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test346395() throws Throwable {
    int int0 = NodeUtil.precedence(93);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test347396() throws Throwable {
    int int0 = NodeUtil.precedence(94);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test348397() throws Throwable {
    int int0 = NodeUtil.precedence(95);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test349398() throws Throwable {
    int int0 = NodeUtil.precedence(96);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test350399() throws Throwable {
    int int0 = NodeUtil.precedence(97);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test351400() throws Throwable {
    int int0 = NodeUtil.precedence(98);
    assertEquals(2, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test352401() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(99);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for colon (type 99)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test353402() throws Throwable {
    int int0 = NodeUtil.precedence(100);
    assertEquals(3, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test354403() throws Throwable {
    int int0 = NodeUtil.precedence(101);
    assertEquals(4, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test355404() throws Throwable {
    int int0 = NodeUtil.precedence(102);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test356405() throws Throwable {
    int int0 = NodeUtil.precedence(103);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test357406() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for dot (type 104)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test358407() throws Throwable {
    int int0 = NodeUtil.precedence(105);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test359408() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for export (type 106)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test360409() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for import (type 107)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test361410() throws Throwable {
    int int0 = NodeUtil.precedence(108);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test362411() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for else (type 109)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test363412() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for switch (type 110)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test364413() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for case (type 111)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test365414() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(112);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for default (type 112)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test366415() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for while (type 113)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test367416() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for do (type 114)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test368417() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for for (type 115)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test369418() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for break (type 116)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test370419() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for continue (type 117)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test371420() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for var (type 118)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test372421() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for with (type 119)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test373422() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for catch (type 120)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test374423() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for finally (type 121)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test375424() throws Throwable {
    int int0 = NodeUtil.precedence(122);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test376425() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(123);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for reserved (type 123)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test377426() throws Throwable {
    int int0 = NodeUtil.precedence(124);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.RETURN:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test378427() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(2);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for enterwith (type 2)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test379428() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(9);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test380429() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(39);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test381430() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(11);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test382431() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test383432() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(100);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test384433() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(101);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test385434() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(9);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test386435() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(11);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test387436() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test388437() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(118);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test389438() throws Throwable {
    Node node0 = new Node(90);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test390439() throws Throwable {
    Node node0 = new Node(89);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(11, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test391440() throws Throwable {
    Node node0 = Node.newString(97, ""catch("", 97, 97);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(25, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test392441() throws Throwable {
    Node node0 = Node.newString(93, ""com.google.javascript.jscomp.DefaultPassConfig$10"");
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(21, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test393442() throws Throwable {
    Node node0 = Node.newString(95, ""Zy "");
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(23, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test394443() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.getOpFromAssignmentOp(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Not an assiment op
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean isExpressionNode(Node n) {
    return n.getType() == Token.EXPR_RESULT;
}","public void test395444() throws Throwable {
    Node node0 = new Node(127, 127, 64);
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test396445() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExpressionNode(node1);
    assertEquals(80, node1.getLineno());
}",""
"public int getType() {
    return type;
}","public void test396446() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExpressionNode(node1);
    assertEquals(33, node0.getType());
}",""
"static boolean isExpressionNode(Node n) {
    return n.getType() == Token.EXPR_RESULT;
}","public void test396447() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExpressionNode(node1);
    assertTrue(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test396448() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExpressionNode(node1);
    assertEquals(80, node1.getCharno());
}",""
"static boolean isGet(Node n) {
    return n.getType() == Token.GETPROP || n.getType() == Token.GETELEM;
}","public void test397449() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.common.collect.StandardRowSortedTable"", 110, 110);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertTrue(boolean0);
}","/**
 * Is this a GETPROP or GETELEM node?
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test397450() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.common.collect.StandardRowSortedTable"", 110, 110);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertEquals(110, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test397451() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.common.collect.StandardRowSortedTable"", 110, 110);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertEquals(110, node0.getCharno());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test397452() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.common.collect.StandardRowSortedTable"", 110, 110);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertTrue(node0.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test398453() throws Throwable {
    Node node0 = Node.newString(35, ""a5!;a N2(7Lywh%"", 84, 89);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test399454() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""Dv*;f;1\"""", (-46), 88);
    Node node1 = new Node(8, node0, node0, node0, node0, 5, 2264);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 7, compilerOptions0.sourceMapDetailLevel);
    assertEquals((-1), node0.getCharno());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test399455() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""Dv*;f;1\"""", (-46), 88);
    Node node1 = new Node(8, node0, node0, node0, node0, 5, 2264);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 7, compilerOptions0.sourceMapDetailLevel);
    assertFalse(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"static int getNodeTypeReferenceCount(Node node, int type, Predicate<Node> traverseChildrenPred) {
    return getCount(node, new MatchNodeType(type), traverseChildrenPred);
}","public void test399456() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""Dv*;f;1\"""", (-46), 88);
    Node node1 = new Node(8, node0, node0, node0, node0, 5, 2264);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 7, compilerOptions0.sourceMapDetailLevel);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a type is referenced within the node tree.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test400457() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google*javascript.jscomp._odeUtil$VarCollector"", 88, 2894);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(88, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test400458() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google*javascript.jscomp._odeUtil$VarCollector"", 88, 2894);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(33, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test400459() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google*javascript.jscomp._odeUtil$VarCollector"", 88, 2894);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(2894, node0.getCharno());
}",""
"static Node getPrototypeClassName(Node qName) {
    Node cur = qName;
    while (isGetProp(cur)) {
        if (cur.getLastChild().getString().equals(""prototype"")) {
            return cur.getFirstChild();
        } else {
            cur = cur.getFirstChild();
        }
    }
    return null;
}","public void test400460() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google*javascript.jscomp._odeUtil$VarCollector"", 88, 2894);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertNull(node1);
}","/**
 * @return The class name part of a qualified prototype name.
 */"
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test400461() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google*javascript.jscomp._odeUtil$VarCollector"", 88, 2894);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertTrue(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"static boolean isVar(Node n) {
    return n.getType() == Token.VAR;
}","public void test401462() throws Throwable {
    Node node0 = Node.newString(940, "")"");
    boolean boolean0 = NodeUtil.isVar(node0);
    assertFalse(boolean0);
}","/**
 * Is this a VAR node?
 */"
"static boolean isVar(Node n) {
    return n.getType() == Token.VAR;
}","public void test402463() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = NodeUtil.isVar(node0);
    assertTrue(boolean0);
}","/**
 * Is this a VAR node?
 */"
"public boolean isLocalResultCall() {
    return areBitFlagsSet(getSideEffectFlags(), FLAG_LOCAL_RESULTS);
}","public void test403464() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""rk"", (String) null);
    assertFalse(node0.isLocalResultCall());
}","/**
 * Returns true if this node is a function or constructor call that
 * returns a primitive or a local object (an object that has no other
 * references).
 */"
"static boolean isString(Node n) {
    return n.getType() == Token.STRING;
}","public void test404465() throws Throwable {
    Node node0 = Node.newString(""rI"");
    boolean boolean0 = NodeUtil.isString(node0);
    assertTrue(boolean0);
}","/**
 * Is this a STRING node?
 */"
"static boolean isPrototypePropertyDeclaration(Node n) {
    if (!isExprAssign(n)) {
        return false;
    }
    return isPrototypeProperty(n.getFirstChild().getFirstChild());
}","public void test405466() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * @return {@code true} if the node an assignment to a prototype property of
 *     some constructor.
 */"
"public int getType() {
    return type;
}","public void test406467() throws Throwable {
    Node node0 = new Node(80, 80, 80);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprAssign(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean isExprAssign(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.ASSIGN;
}","public void test406468() throws Throwable {
    Node node0 = new Node(80, 80, 80);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprAssign(node1);
    assertFalse(boolean0);
}","/**
 * Is this node an assignment expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is ASSIGN
 */"
"static boolean isAssign(Node n) {
    return n.getType() == Token.ASSIGN;
}","public void test407469() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.isAssign(node0);
    assertFalse(boolean0);
}","/**
 * Is this an ASSIGN node?
 */"
"static boolean isAssign(Node n) {
    return n.getType() == Token.ASSIGN;
}","public void test408470() throws Throwable {
    Node node0 = new Node(86);
    boolean boolean0 = NodeUtil.isAssign(node0);
    assertTrue(boolean0);
}","/**
 * Is this an ASSIGN node?
 */"
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test409471() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"public int getType() {
    return type;
}","public void test410472() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test410473() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"static boolean isForIn(Node n) {
    return n.getType() == Token.FOR && n.getChildCount() == 3;
}","public void test411474() throws Throwable {
    Node node0 = Node.newString(77, ""<,R3,Np^"", 39, 39);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a FOR-IN loop.
 */"
"@Override
@SuppressWarnings(""fallthrough"")
public Node optimizeSubtree(Node node) {
    switch(node.getType()) {
        case Token.RETURN:
            return tryReduceReturn(node);
        case Token.NOT:
            tryMinimizeCondition(node.getFirstChild());
            return tryMinimizeNot(node);
        case Token.IF:
            tryMinimizeCondition(node.getFirstChild());
            return tryMinimizeIf(node);
        case Token.EXPR_RESULT:
            tryMinimizeCondition(node.getFirstChild());
            return node;
        case Token.HOOK:
            tryMinimizeCondition(node.getFirstChild());
            return node;
        case Token.WHILE:
        case Token.DO:
            tryMinimizeCondition(NodeUtil.getConditionExpression(node));
            return node;
        case Token.FOR:
            if (!NodeUtil.isForIn(node)) {
                tryMinimizeCondition(NodeUtil.getConditionExpression(node));
            }
            return node;
        case Token.NEW:
            node = tryFoldStandardConstructors(node);
            if (node.getType() != Token.CALL) {
                return node;
            }
        // Fall through on purpose because tryFoldStandardConstructors() may
        // convert a NEW node into a CALL node
        case Token.CALL:
            return tryFoldLiteralConstructor(node);
        default:
            //Nothing changed
            return node;
    }
}","public void test412475() throws Throwable {
    Node node0 = new Node(115);
    PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
    // Undeclared exception!
    try {
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // malformed 'for' statement FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Tries apply our various peephole minimizations on the passed in node.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test413476() throws Throwable {
    Node node0 = Node.newString(114, ""rI"");
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test414477() throws Throwable {
    Node node0 = Node.newString(115, "")"");
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test415478() throws Throwable {
    Node node0 = Node.newString(113, ""RegExP"");
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test416479() throws Throwable {
    Node node0 = Node.newString(115, "")"");
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test417480() throws Throwable {
    Node node0 = Node.newString(114, ""RegExP"");
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test418481() throws Throwable {
    Node node0 = new Node((-4096));
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static boolean isWithinLoop(Node n) {
    for (Node parent : n.getAncestors()) {
        if (NodeUtil.isLoopStructure(parent)) {
            return true;
        }
        if (NodeUtil.isFunction(parent)) {
            break;
        }
    }
    return false;
}","public void test419482() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(85, node0, node0, node0, node0, 48, 8);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the specified node has a loop parent that
 * is within the current scope.
 */"
"static boolean isWithinLoop(Node n) {
    for (Node parent : n.getAncestors()) {
        if (NodeUtil.isLoopStructure(parent)) {
            return true;
        }
        if (NodeUtil.isFunction(parent)) {
            break;
        }
    }
    return false;
}","public void test420483() throws Throwable {
    Node node0 = new Node(105);
    node0.addChildAfter(node0, node0);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the specified node has a loop parent that
 * is within the current scope.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test421484() throws Throwable {
    Node node0 = new Node(126, 126, 126);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test422485() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test423486() throws Throwable {
    Node node0 = new Node(111);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test424487() throws Throwable {
    Node node0 = Node.newString(112, "" Sw<=jv=s|arM^Vq"", 112, 112);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test425488() throws Throwable {
    Node node0 = Node.newString(113, ""RegExp"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test426489() throws Throwable {
    Node node0 = Node.newString(114, ""XTV85#7JMtIu_<{S[CE"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test427490() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test428491() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test429492() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test430493() throws Throwable {
    Node node0 = new Node(111);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test431494() throws Throwable {
    Node node0 = Node.newString(112, ""ux.Lj2"");
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test432495() throws Throwable {
    Node node0 = new Node(113, 113, 113);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test433496() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test434497() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test435498() throws Throwable {
    Node node0 = new Node(126, 126, 126);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test436499() throws Throwable {
    Node node0 = new Node((-4096));
    // Undeclared exception!
    try {
        NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test437500() throws Throwable {
    Node node0 = Node.newString(97, ""catch("", 97, 97);
    Node node1 = new Node(115, node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test438501() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test439502() throws Throwable {
    Node node0 = new Node(112, (-2326), 112);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // DEFAULT does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test440503() throws Throwable {
    Node node0 = Node.newString(113, ""RegExp"");
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test441504() throws Throwable {
    Node node0 = new Node(74);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // REF_NS_MEMBER does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static boolean isStatement(Node n) {
    Node parent = n.getParent();
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node can be
    // either part of an expression or a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getType()) {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
            return true;
        default:
            return false;
    }
}","public void test442505() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""zXGQ6R[X!B *I&lY*Mh"", ""H(qb585z`v+&gM9|+"");
    node0.addChildToFront(node0);
    boolean boolean0 = NodeUtil.isStatement(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is used as a statement.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test443506() throws Throwable {
    Node node0 = Node.newString(111, ""~e"");
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test444507() throws Throwable {
    Node node0 = new Node(112);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty();
}","public void test445508() throws Throwable {
    Node node0 = new Node(81);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty();
}","public void test446509() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, """", (-473), 35);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test446510() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, """", (-473), 35);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals((-1), node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test447511() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""hkN^+v"", 483, 23);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals(483, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test447512() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""hkN^+v"", 483, 23);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals(23, node0.getCharno());
}",""
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty();
}","public void test447513() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""hkN^+v"", 483, 23);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"static boolean isLabelName(Node n) {
    return (n != null && n.getType() == Token.LABEL_NAME);
}","public void test448514() throws Throwable {
    boolean boolean0 = NodeUtil.isLabelName((Node) null);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"static boolean isLabelName(Node n) {
    return (n != null && n.getType() == Token.LABEL_NAME);
}","public void test449515() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    boolean boolean0 = NodeUtil.isLabelName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"static boolean isLabelName(Node n) {
    return (n != null && n.getType() == Token.LABEL_NAME);
}","public void test450516() throws Throwable {
    Node node0 = Node.newString(153, ""XTV85#7JMtIu_<{S[CE"");
    boolean boolean0 = NodeUtil.isLabelName(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test451517() throws Throwable {
    Node node0 = new Node(100);
    Node node1 = new Node(77, (-68), 4095);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: OR of TRY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test452518() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""XJQ6R[X!B **&lY&Mh"", ""XJQ6R[X!B **&lY&Mh"");
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test453519() throws Throwable {
    Node node0 = new Node(118);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test454520() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""XJQ6R[X!B **&lY&Mh"", ""Infinity"");
    Node node1 = new Node(16, node0, node0);
    NodeUtil.removeChild(node1, node0);
    assertTrue(node1.hasChildren());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test454521() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""XJQ6R[X!B **&lY&Mh"", ""Infinity"");
    Node node1 = new Node(16, node0, node0);
    NodeUtil.removeChild(node1, node0);
    assertTrue(node1.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"static void removeChild(Node parent, Node node) {
    // Node parent = node.getParent();
    if (isStatementBlock(parent) || isSwitchCase(node) || isTryFinallyNode(parent, node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test455522() throws Throwable {
    Node node0 = Node.newString(115, ""~e"");
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: FOR ~e of FOR ~e
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else {
        return false;
    }
}","public void test456523() throws Throwable {
    Node node0 = new Node(51, 51, 51);
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else {
        return false;
    }
}","public void test457524() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""XJQ6R[X!B **&lY&Mh"", ""Infinity"");
    Node node1 = new Node(41, node0, node0);
    boolean boolean0 = NodeUtil.tryMergeBlock(node0);
    assertFalse(boolean0);
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else {
        return false;
    }
}","public void test458525() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""zXGQ6R[X!B *I&lY*Mh"", ""H(qb585z`v+&gM9|+"");
    node0.addChildToFront(node0);
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean isCallOrNew(Node node) {
    return NodeUtil.isCall(node) || NodeUtil.isNew(node);
}","public void test459526() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.isCallOrNew(node0);
    assertTrue(boolean0);
}","/**
 * @param node A node
 * @return Whether the call is a NEW or CALL node.
 */"
"static boolean isCallOrNew(Node node) {
    return NodeUtil.isCall(node) || NodeUtil.isNew(node);
}","public void test460527() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.isCallOrNew(node0);
    assertTrue(boolean0);
}","/**
 * @param node A node
 * @return Whether the call is a NEW or CALL node.
 */"
"static boolean isThis(Node node) {
    return node.getType() == Token.THIS;
}","public void test461528() throws Throwable {
    Node node0 = new Node(45, 45, (-6));
    boolean boolean0 = NodeUtil.isThis(node0);
    assertFalse(boolean0);
}","/**
 * Is this a THIS node?
 */"
"static boolean isHoistedFunctionDeclaration(Node n) {
    return isFunctionDeclaration(n) && (n.getParent().getType() == Token.SCRIPT || n.getParent().getParent().getType() == Token.FUNCTION);
}","public void test462529() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    Node node1 = new Node(22, node0, node0, node0, node0, 48, 8);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node1);
    assertFalse(boolean0);
}","/**
 * Is this node a hoisted function declaration? A function declaration in the
 * scope root is hoisted to the top of the scope.
 * See {@link #isFunctionDeclaration}).
 */"
"static boolean isEmptyFunctionExpression(Node node) {
    return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());
}","public void test463530() throws Throwable {
    Node node0 = Node.newString(65, ""FNHS[WTZWSDlNj"");
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    assertFalse(boolean0);
}","/**
 * Determines if a node is a function expression that has an empty body.
 *
 * @param node a node
 * @return whether the given node is a function expression that is empty
 */"
"static boolean isSimpleFunctionObjectCall(Node callNode) {
    if (isFunctionObjectCall(callNode)) {
        if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME) {
            return true;
        }
    }
    return false;
}","public void test464531() throws Throwable {
    Node node0 = Node.newString(37, ""5+[=8'\""tERm(<T%X"");
    // Undeclared exception!
    try {
        NodeUtil.isSimpleFunctionObjectCall(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.call(...)
 *    x['call'](...)
 * where x is a NAME node.
 */"
"static boolean isSimpleFunctionObjectCall(Node callNode) {
    if (isFunctionObjectCall(callNode)) {
        if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME) {
            return true;
        }
    }
    return false;
}","public void test465532() throws Throwable {
    Node node0 = Node.newNumber(1241.5603038030308);
    boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.call(...)
 *    x['call'](...)
 * where x is a NAME node.
 */"
"static boolean isLhs(Node n, Node parent) {
    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) || parent.getType() == Token.VAR;
}","public void test466533() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = NodeUtil.isLhs(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"static boolean isObjectLitKey(Node node, Node parent) {
    switch(node.getType()) {
        case Token.NUMBER:
        case Token.STRING:
            return parent.getType() == Token.OBJECTLIT;
        case Token.GET:
        case Token.SET:
            return true;
    }
    return false;
}","public void test467534() throws Throwable {
    Node node0 = Node.newNumber(1241.560303803);
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal key
 * (e.g. key1 in {key1: value1, key2: value2}).
 *
 * @param node A node
 * @param parent The node's parent
 */"
"static Node getFnParameters(Node fnNode) {
    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]
    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
    return fnNode.getFirstChild().getNext();
}","public void test468535() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""goog.asserts.assertInstanceof"", ""var xx=;"");
    // Undeclared exception!
    try {
        NodeUtil.getFnParameters(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @param fnNode The function.
 * @return The Node containing the Function parameters.
 */"
"static boolean isGetOrSetKey(Node node) {
    switch(node.getType()) {
        case Token.GET:
        case Token.SET:
            return true;
    }
    return false;
}","public void test469536() throws Throwable {
    Node node0 = new Node(60, 60, 60);
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal get or set key
 * (e.g. key1 in {get key1() {}, set key2(a){}).
 *
 * @param node A node
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test470537() throws Throwable {
    String string0 = NodeUtil.opToStr(9);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test471539() throws Throwable {
    String string0 = NodeUtil.opToStr(12);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test472541() throws Throwable {
    String string0 = NodeUtil.opToStr(10);
    assertEquals(""^"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test473543() throws Throwable {
    String string0 = NodeUtil.opToStr(11);
    assertEquals(""&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test474545() throws Throwable {
    String string0 = NodeUtil.opToStr(13);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test475547() throws Throwable {
    String string0 = NodeUtil.opToStr(14);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test476549() throws Throwable {
    String string0 = NodeUtil.opToStr(15);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test477551() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(16);
    assertEquals("">"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test478552() throws Throwable {
    String string0 = NodeUtil.opToStr(17);
    assertEquals("">="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test479553() throws Throwable {
    String string0 = NodeUtil.opToStr(18);
    assertEquals(""<<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test480554() throws Throwable {
    String string0 = NodeUtil.opToStr(19);
    assertEquals("">>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test481555() throws Throwable {
    String string0 = NodeUtil.opToStr(20);
    assertEquals("">>>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test482556() throws Throwable {
    String string0 = NodeUtil.opToStr(21);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test483557() throws Throwable {
    String string0 = NodeUtil.opToStr(22);
    assertEquals(""-"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test484558() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(23);
    assertEquals(""*"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test485559() throws Throwable {
    String string0 = NodeUtil.opToStr(24);
    assertEquals(""/"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test486560() throws Throwable {
    String string0 = NodeUtil.opToStr(25);
    assertEquals(""%"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test487561() throws Throwable {
    String string0 = NodeUtil.opToStr(26);
    assertEquals(""!"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test488562() throws Throwable {
    String string0 = NodeUtil.opToStr(27);
    assertEquals(""~"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test489563() throws Throwable {
    String string0 = NodeUtil.opToStr(28);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test490564() throws Throwable {
    String string0 = NodeUtil.opToStr(29);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test491566() throws Throwable {
    String string0 = NodeUtil.opToStr(30);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test492567() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(31);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 31: DELPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test493568() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(32);
    assertEquals(""typeof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test494569() throws Throwable {
    String string0 = NodeUtil.opToStr(33);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test495570() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 34: SETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test496571() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(35);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 35: GETELEM
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test497572() throws Throwable {
    String string0 = NodeUtil.opToStr(36);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test498573() throws Throwable {
    String string0 = NodeUtil.opToStr(37);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test499574() throws Throwable {
    String string0 = NodeUtil.opToStr(38);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test500575() throws Throwable {
    String string0 = NodeUtil.opToStr(39);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test501576() throws Throwable {
    String string0 = NodeUtil.opToStr(40);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test502577() throws Throwable {
    String string0 = NodeUtil.opToStr(41);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test503578() throws Throwable {
    String string0 = NodeUtil.opToStr(42);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test504579() throws Throwable {
    String string0 = NodeUtil.opToStr(43);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test505580() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(44);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 44: TRUE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test506581() throws Throwable {
    String string0 = NodeUtil.opToStr(45);
    assertEquals(""==="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test507582() throws Throwable {
    String string0 = NodeUtil.opToStr(46);
    assertEquals(""!=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test508583() throws Throwable {
    String string0 = NodeUtil.opToStr(47);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test509584() throws Throwable {
    String string0 = NodeUtil.opToStr(48);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test510585() throws Throwable {
    String string0 = NodeUtil.opToStr(49);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test511586() throws Throwable {
    String string0 = NodeUtil.opToStr(50);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test512587() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(51);
    assertEquals(""in"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test513588() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(52);
    assertEquals(""instanceof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test514589() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 53: LOCAL_LOAD
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test515590() throws Throwable {
    String string0 = NodeUtil.opToStr(54);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test516591() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(55);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 55: SETVAR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test517592() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 56: CATCH_SCOPE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test518593() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(57);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 57: ENUM_INIT_KEYS
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test519594() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 58: ENUM_INIT_VALUES
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test520595() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 59: ENUM_NEXT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test521596() throws Throwable {
    String string0 = NodeUtil.opToStr(60);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test522597() throws Throwable {
    String string0 = NodeUtil.opToStr(61);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test523598() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 62: RETURN_RESULT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test524599() throws Throwable {
    String string0 = NodeUtil.opToStr(63);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test525600() throws Throwable {
    String string0 = NodeUtil.opToStr(64);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test526601() throws Throwable {
    String string0 = NodeUtil.opToStr(65);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test527602() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 66: SET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test528603() throws Throwable {
    String string0 = NodeUtil.opToStr(67);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test529604() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 68: REF_CALL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test530605() throws Throwable {
    String string0 = NodeUtil.opToStr(69);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test531606() throws Throwable {
    String string0 = NodeUtil.opToStr(71);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test532607() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 72: ESCXMLTEXT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test533608() throws Throwable {
    String string0 = NodeUtil.opToStr(73);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test534609() throws Throwable {
    String string0 = NodeUtil.opToStr(75);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test535610() throws Throwable {
    String string0 = NodeUtil.opToStr(76);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test536611() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 77: TRY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test537612() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(78);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 78: SEMI
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test538613() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 79: LB
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test539614() throws Throwable {
    String string0 = NodeUtil.opToStr(80);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test540615() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 81: LC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test541616() throws Throwable {
    String string0 = NodeUtil.opToStr(82);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test542617() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(83);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 83: LP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test543618() throws Throwable {
    String string0 = NodeUtil.opToStr(84);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test544619() throws Throwable {
    String string0 = NodeUtil.opToStr(85);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test545620() throws Throwable {
    String string0 = NodeUtil.opToStr(86);
    assertEquals(""="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test546621() throws Throwable {
    String string0 = NodeUtil.opToStr(87);
    assertEquals(""|="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test547622() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(88);
    assertEquals(""^="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test548623() throws Throwable {
    String string0 = NodeUtil.opToStr(89);
    assertEquals(""&="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test549624() throws Throwable {
    String string0 = NodeUtil.opToStr(90);
    assertEquals(""<<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test550625() throws Throwable {
    String string0 = NodeUtil.opToStr(91);
    assertEquals("">>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test551626() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(92);
    assertEquals("">>>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test552627() throws Throwable {
    String string0 = NodeUtil.opToStr(93);
    assertEquals(""+="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test553628() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(94);
    assertEquals(""-="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test554629() throws Throwable {
    String string0 = NodeUtil.opToStr(95);
    assertEquals(""*="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test555630() throws Throwable {
    String string0 = NodeUtil.opToStr(96);
    assertEquals(""/="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test556631() throws Throwable {
    String string0 = NodeUtil.opToStr(97);
    assertEquals(""%="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test557632() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(98);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 98: HOOK
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test558633() throws Throwable {
    String string0 = NodeUtil.opToStr(99);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test559634() throws Throwable {
    String string0 = NodeUtil.opToStr(100);
    assertEquals(""||"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test560635() throws Throwable {
    String string0 = NodeUtil.opToStr(101);
    assertEquals(""&&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test561636() throws Throwable {
    String string0 = NodeUtil.opToStr(102);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test562637() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(103);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 103: DEC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test563638() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 104: DOT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test564639() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(105);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 105: FUNCTION
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test565640() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 106: EXPORT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test566641() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 107: IMPORT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test567642() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(108);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 108: IF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test568643() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 109: ELSE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test569644() throws Throwable {
    String string0 = NodeUtil.opToStr(110);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test570645() throws Throwable {
    String string0 = NodeUtil.opToStr(111);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test571646() throws Throwable {
    String string0 = NodeUtil.opToStr(112);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test572647() throws Throwable {
    String string0 = NodeUtil.opToStr(113);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test573648() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 114: DO
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test574649() throws Throwable {
    String string0 = NodeUtil.opToStr(115);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test575650() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 116: BREAK
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test576651() throws Throwable {
    String string0 = NodeUtil.opToStr(117);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test577652() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 118: VAR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test578653() throws Throwable {
    String string0 = NodeUtil.opToStr(119);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test579654() throws Throwable {
    String string0 = NodeUtil.opToStr(120);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test580655() throws Throwable {
    String string0 = NodeUtil.opToStr(121);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test581656() throws Throwable {
    String string0 = NodeUtil.opToStr(122);
    assertEquals(""void"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test582657() throws Throwable {
    String string0 = NodeUtil.opToStr((-2367));
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static void redeclareVarsInsideBranch(Node branch) {
    Collection<Node> vars = getVarsDeclaredInBranch(branch);
    if (vars.isEmpty()) {
        return;
    }
    Node parent = getAddingRoot(branch);
    for (Node nameNode : vars) {
        Node var = new Node(Token.VAR, Node.newString(Token.NAME, nameNode.getString()).copyInformationFrom(nameNode)).copyInformationFrom(nameNode);
        copyNameAnnotations(nameNode, var.getFirstChild());
        parent.addChildToFront(var);
    }
}","public void test583658() throws Throwable {
    Node node0 = Node.newString(""Fz9"");
    Node node1 = NodeUtil.newVarNode(""Fz9"", node0);
    // Undeclared exception!
    try {
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Given a node tree, finds all the VAR declarations in that tree that are
 * not in an inner scope. Then adds a new VAR node at the top of the current
 * scope that redeclares them, if necessary.
 */"
"public boolean isNoSideEffectsCall() {
    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);
}","public void test584659() throws Throwable {
    Node node0 = new Node(100);
    NodeUtil.copyNameAnnotations(node0, node0);
    assertFalse(node0.isNoSideEffectsCall());
}","/**
 * Returns true if this node is a function or constructor call that
 * has no side effects.
 */"
"public static Node newFunctionNode(String name, List<Node> params, Node body, int lineno, int charno) {
    Node parameterParen = new Node(Token.LP, lineno, charno);
    for (Node param : params) {
        parameterParen.addChildToBack(param);
    }
    Node function = new Node(Token.FUNCTION, lineno, charno);
    function.addChildrenToBack(Node.newString(Token.NAME, name, lineno, charno));
    function.addChildToBack(parameterParen);
    function.addChildToBack(body);
    return function;
}","public void test585660() throws Throwable {
    Node node0 = new Node((-4063), 101, 101);
    Vector<Node> vector0 = new Vector<Node>();
    vector0.add(node0);
    // Undeclared exception!
    try {
        NodeUtil.newFunctionNode(""com.google.common.collect.NullsFirstOrdering"", vector0, node0, 4, (-5057));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Creates function name(params_0, ..., params_n) { body }.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test586661() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "" 5__0m3'P&7_12(.B5<"", 7, 0);
    assertEquals(0, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test586662() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "" 5__0m3'P&7_12(.B5<"", 7, 0);
    assertEquals(33, node0.getType());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test586663() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "" 5__0m3'P&7_12(.B5<"", 7, 0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test586664() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "" 5__0m3'P&7_12(.B5<"", 7, 0);
    assertEquals(7, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test587665() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""&T.=7oJ^^yY&>F3q"", 3, 8);
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(8, node1.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test587666() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""&T.=7oJ^^yY&>F3q"", 3, 8);
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(3, node1.getLineno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test587667() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""&T.=7oJ^^yY&>F3q"", 3, 8);
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(3, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test587668() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""&T.=7oJ^^yY&>F3q"", 3, 8);
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(8, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test587669() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""&T.=7oJ^^yY&>F3q"", 3, 8);
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(33, node0.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test587670() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""&T.=7oJ^^yY&>F3q"", 3, 8);
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(0, node1.getChildCount());
}",""
"static Node getRootOfQualifiedName(Node qName) {
    for (Node current = qName; true; current = current.getFirstChild()) {
        int type = current.getType();
        if (type == Token.NAME || type == Token.THIS) {
            return current;
        }
        Preconditions.checkState(type == Token.GETPROP);
    }
}","public void test588671() throws Throwable {
    Node node0 = new Node(113);
    // Undeclared exception!
    try {
        NodeUtil.getRootOfQualifiedName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Gets the root node of a qualified name. Must be either NAME or THIS.
 */"
"static Node newName(CodingConvention convention, String name, Node basisNode) {
    Node nameNode = Node.newString(Token.NAME, name);
    if (convention.isConstantKey(name)) {
        nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
    }
    nameNode.copyInformationFrom(basisNode);
    return nameNode;
}","public void test589672() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    // Undeclared exception!
    try {
        NodeUtil.newName(googleCodingConvention0, ""IXV"", (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Creates a new node representing an *existing* name, copying over the source
 * location information from the basis node.
 *
 * @param name The name for the new NAME node.
 * @param basisNode The node that represents the name as currently found in
 *     the AST.
 *
 * @return The node created.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test590673() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""/="");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test591674() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""void"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test592675() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""NaN"");
    assertTrue(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test593676() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.common.collect.StandardRowSortedTable"", 110, 110);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(110, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test593677() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.common.collect.StandardRowSortedTable"", 110, 110);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(110, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test593678() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.common.collect.StandardRowSortedTable"", 110, 110);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(33, node0.getType());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test593679() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.common.collect.StandardRowSortedTable"", 110, 110);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test594680() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""!"", (-46), (-46));
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",""
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test595681() throws Throwable {
    Node node0 = Node.newString((-8), ""7&)`r#!$G6q @n]"");
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test596682() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""VsFoop"", (Node) null);
    assertEquals(118, node0.getType());
}",""
"static Node newVarNode(String name, Node value) {
    Node nodeName = Node.newString(Token.NAME, name);
    if (value != null) {
        Preconditions.checkState(value.getNext() == null);
        nodeName.addChildToBack(value);
        nodeName.copyInformationFrom(value);
    }
    Node var = new Node(Token.VAR, nodeName).copyInformationFrom(nodeName);
    return var;
}","public void test596683() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""VsFoop"", (Node) null);
    assertNotNull(node0);
}","/**
 * Create a VAR node containing the given name and initial value expression.
 */"
"static int getNameReferenceCount(Node node, String name) {
    return getCount(node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());
}","public void test597684() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""!"", (-46), (-46));
    int int0 = NodeUtil.getNameReferenceCount(node0, ""!"");
    assertEquals(1, int0);
}","/**
 * Finds the number of times a simple name is referenced within the node tree.
 */"
"static boolean isNameReferenced(Node node, String name, Predicate<Node> traverseChildrenPred) {
    return has(node, new MatchNameNode(name), traverseChildrenPred);
}","public void test598685() throws Throwable {
    Node node0 = Node.newString("""", 3, 16);
    Node node1 = NodeUtil.newVarNode(""com.google.protobuf.DescriptorProtos$MethodOptions"", node0);
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""JSR"", nodeUtil_MatchDeclaration0);
    assertFalse(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"public int getType() {
    return type;
}","public void test598686() throws Throwable {
    Node node0 = Node.newString("""", 3, 16);
    Node node1 = NodeUtil.newVarNode(""com.google.protobuf.DescriptorProtos$MethodOptions"", node0);
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""JSR"", nodeUtil_MatchDeclaration0);
    assertEquals(118, node1.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test598687() throws Throwable {
    Node node0 = Node.newString("""", 3, 16);
    Node node1 = NodeUtil.newVarNode(""com.google.protobuf.DescriptorProtos$MethodOptions"", node0);
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""JSR"", nodeUtil_MatchDeclaration0);
    assertEquals(3, node1.getLineno());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test598688() throws Throwable {
    Node node0 = Node.newString("""", 3, 16);
    Node node1 = NodeUtil.newVarNode(""com.google.protobuf.DescriptorProtos$MethodOptions"", node0);
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""JSR"", nodeUtil_MatchDeclaration0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"static boolean containsFunction(Node n) {
    return containsType(n, Token.FUNCTION);
}","public void test599689() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    boolean boolean0 = NodeUtil.containsFunction(node0);
    assertTrue(boolean0);
}","/**
 * Determines if the given node contains a function statement or function
 * expression.
 */"
"static boolean referencesThis(Node n) {
    return containsType(n, Token.THIS, new MatchNotFunction());
}","public void test600690() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the shallow scope contains references to 'this' keyword
 */"
"public int getType() {
    return type;
}","public void test601692() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+GsUyeJhn!.+Aq4"", (-3), 118);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    assertEquals(33, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test601693() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+GsUyeJhn!.+Aq4"", (-3), 118);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    assertEquals((-1), node0.getLineno());
}",""
"static int getNameReferenceCount(Node node, String name) {
    return getCount(node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());
}","public void test605697() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""XJQ6R[X!B **&lY&Mh"", ""XJQ6R[X!B **&lY&Mh"");
    Node node1 = new Node((-4063), node0, node0);
    int int0 = NodeUtil.getNameReferenceCount(node1, (String) null);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a simple name is referenced within the node tree.
 */"
"static void visitPostOrder(Node node, Visitor vistor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, vistor, traverseChildrenPred);
        }
    }
    vistor.visit(node);
}","public void test606698() throws Throwable {
    Node node0 = new Node(94);
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1198);
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * A post-order traversal, calling Vistor.visit for each child matching
 * the predicate.
 */"
"static void visitPostOrder(Node node, Visitor vistor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, vistor, traverseChildrenPred);
        }
    }
    vistor.visit(node);
}","public void test607699() throws Throwable {
    Node node0 = Node.newNumber(1571.204828491857);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, sourceMap_DetailLevel0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * A post-order traversal, calling Vistor.visit for each child matching
 * the predicate.
 */"
"static boolean hasFinally(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getChildCount() == 3;
}","public void test608700() throws Throwable {
    Node node0 = Node.newString(""ENUM_INIT_ARRAY"");
    // Undeclared exception!
    try {
        NodeUtil.hasFinally(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether a TRY node has a finally block.
 */"
"static Node getCatchBlock(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getFirstChild().getNext();
}","public void test609701() throws Throwable {
    Node node0 = new Node(89, 89, 89);
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return The BLOCK node containing the CATCH node (if any)
 * of a TRY.
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test610702() throws Throwable {
    Node node0 = new Node(51, 51, 51);
    // Undeclared exception!
    try {
        NodeUtil.hasCatchHandler(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test611703() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""XJQ6R[X!B **&lY&Mh"", ""XJQ6R[X!B **&lY&Mh"");
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test612704() throws Throwable {
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test613705() throws Throwable {
    Node node0 = Node.newString(""ENUM_INIT_ARRAY"");
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"public boolean isNoCompile() {
    return getFlag(MASK_NOCOMPILE);
}","public void test614706() throws Throwable {
    Node node0 = Node.newString(""NaN"");
    node0.addSuppression(""NaN"");
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertFalse(jSDocInfo0.isNoCompile());
}","/**
 * Returns whether the {@code @nocompile} annotation is present on this
 * {@link JSDocInfo}.
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test615707() throws Throwable {
    Node node0 = Node.newString(""ENUM_INIT_ARRAY"");
    Node node1 = new Node(118, node0, node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test616708() throws Throwable {
    Node node0 = Node.newString(""ENUM_INIT_ARRAY"");
    Node node1 = new Node((-1), node0, node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test617709() throws Throwable {
    Node node0 = Node.newString(""NaN"");
    Node node1 = new Node(105, node0, node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static JSDocInfo getFunctionInfo(Node n) {
    Preconditions.checkState(n.getType() == Token.FUNCTION);
    JSDocInfo fnInfo = n.getJSDocInfo();
    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {
        // Look for the info on other nodes.
        Node parent = n.getParent();
        if (parent.getType() == Token.ASSIGN) {
            // on ASSIGNs
            fnInfo = parent.getJSDocInfo();
        } else if (parent.getType() == Token.NAME) {
            // on var NAME = function() { ... };
            fnInfo = parent.getParent().getJSDocInfo();
        }
    }
    return fnInfo;
}","public void test618710() throws Throwable {
    Node node0 = new Node(108, 108, 108);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionInfo(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Get the JSDocInfo for a function.
 */"
"static JSDocInfo getFunctionInfo(Node n) {
    Preconditions.checkState(n.getType() == Token.FUNCTION);
    JSDocInfo fnInfo = n.getJSDocInfo();
    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {
        // Look for the info on other nodes.
        Node parent = n.getParent();
        if (parent.getType() == Token.ASSIGN) {
            // on ASSIGNs
            fnInfo = parent.getJSDocInfo();
        } else if (parent.getType() == Token.NAME) {
            // on var NAME = function() { ... };
            fnInfo = parent.getParent().getJSDocInfo();
        }
    }
    return fnInfo;
}","public void test619711() throws Throwable {
    Node node0 = new Node(105);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionInfo(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Get the JSDocInfo for a function.
 */"
"static String getSourceName(Node n) {
    String sourceName = null;
    while (sourceName == null && n != null) {
        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);
        n = n.getParent();
    }
    return sourceName;
}","public void test620712() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""XJQ6R[X!B **&lY&Mh"", ""XJQ6R[X!B **&lY&Mh"");
    String string0 = NodeUtil.getSourceName(node0);
    assertNotNull(string0);
}","/**
 * @param n The node.
 * @return The source name property on the node or its ancestors.
 */"
"static String getSourceName(Node n) {
    String sourceName = null;
    while (sourceName == null && n != null) {
        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);
        n = n.getParent();
    }
    return sourceName;
}","public void test621714() throws Throwable {
    Node node0 = Node.newString(113, ""RegExp"");
    String string0 = NodeUtil.getSourceName(node0);
    assertNull(string0);
}","/**
 * @param n The node.
 * @return The source name property on the node or its ancestors.
 */"
"public int getType() {
    return type;
}","public void test622715() throws Throwable {
    Node node0 = Node.newString(""Inciniey"");
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    assertEquals(37, node1.getType());
}",""
"static Node newCallNode(Node callTarget, Node... parameters) {
    boolean isFreeCall = isName(callTarget);
    Node call = new Node(Token.CALL, callTarget);
    call.putBooleanProp(Node.FREE_CALL, isFreeCall);
    for (Node parameter : parameters) {
        call.addChildToBack(parameter);
    }
    return call;
}","public void test623716() throws Throwable {
    Node node0 = Node.newNumber((double) 1970);
    Node[] nodeArray0 = new Node[1];
    // Undeclared exception!
    try {
        NodeUtil.newCallNode(node0, nodeArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * A new CALL node with the ""FREE_CALL"" set based on call target.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test624717() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test625718() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    NodeUtil.evaluatesToLocalValue(node0);
    assertEquals(80, node0.getCharno());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test625719() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test625720() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    NodeUtil.evaluatesToLocalValue(node0);
    assertEquals(80, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test625721() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    NodeUtil.evaluatesToLocalValue(node0);
    assertEquals(33, node0.getType());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test625722() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""+ 6S%O.PGCiL}Y"", 80, 80);
    NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test626723() throws Throwable {
    Node node0 = new Node(100);
    Node node1 = new Node(42, node0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test627724() throws Throwable {
    Node node0 = new Node(45, 45, (-6));
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test628725() throws Throwable {
    Node node0 = new Node(47, 47, 47);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test629726() throws Throwable {
    Node node0 = Node.newString(48, """");
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeBINDNAME
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test630727() throws Throwable {
    Node node0 = new Node(51, 51, 51);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test631728() throws Throwable {
    Node node0 = new Node(57);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_INIT_KEYS
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test632729() throws Throwable {
    Node node0 = new Node(60, 60, 60);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_ID 60
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test633730() throws Throwable {
    Node node0 = new Node(61);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTHISFN
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test634731() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test635732() throws Throwable {
    Node node0 = new Node(64, (-1697), 64);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test636733() throws Throwable {
    Node node0 = new Node(65);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeGET_REF
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test637734() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSET_REF 66
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test638735() throws Throwable {
    Node node0 = new Node(68);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_CALL
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test639736() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_SPECIAL 69
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test640737() throws Throwable {
    Node node0 = new Node(70);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDEFAULTNAMESPACE
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test641738() throws Throwable {
    Node node0 = new Node(71, 118, 118);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeESCXMLATTR 118
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test642739() throws Throwable {
    Node node0 = new Node(76, 76, 76);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NS_NAME 76
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test643740() throws Throwable {
    Node node0 = Node.newString(78, ""1nfinity"", 78, 78);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSEMI 1nfinity 78
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test644741() throws Throwable {
    Node node0 = new Node(84, 84, 84);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRP 84
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test645742() throws Throwable {
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test646743() throws Throwable {
    Node node0 = new Node(86, 86, 86);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test647744() throws Throwable {
    Node node0 = Node.newString(87, ""com/google/javiscript/jscomp/mozilla/rhino/Scriptable"", 87, 87);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test648745() throws Throwable {
    Node node0 = new Node(88);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test649746() throws Throwable {
    Node node0 = new Node(89, 89, 89);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test650747() throws Throwable {
    Node node0 = new Node(91);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test651748() throws Throwable {
    Node node0 = Node.newString(92, ""8I-n^C"", 742, 91);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test652749() throws Throwable {
    Node node0 = new Node(93);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test653750() throws Throwable {
    Node node0 = new Node(94);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test654751() throws Throwable {
    Node node0 = Node.newString(95, ""com/google/javascript/jscomp/mozilla/rhino/Scriptable"", 95, 742);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test655752() throws Throwable {
    Node node0 = Node.newString(97, ""catch("", 97, 97);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test656753() throws Throwable {
    Node node0 = new Node(98, 98, 98);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test657754() throws Throwable {
    Node node0 = new Node(100);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test658755() throws Throwable {
    Node node0 = new Node(101, 101, 189);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test659756() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test660757() throws Throwable {
    Node node0 = Node.newString(103, ""F`oD0{gLd/|t'[b/D"", 1887, 1887);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test661758() throws Throwable {
    Node node0 = new Node(105);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test662759() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""O3H`f/_"", 440, 440);
    Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    assertEquals(440, node0.getCharno());
}",""
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            // TODO(nicksantos): This needs to be changed so that it
            // returns true iff we're sure the value was never aliased from inside
            // the constructor (similar to callHasLocalResult)
            return true;
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test662760() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""O3H`f/_"", 440, 440);
    Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test662761() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""O3H`f/_"", 440, 440);
    Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    assertEquals(440, node0.getLineno());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test662762() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""O3H`f/_"", 440, 440);
    Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    assertEquals(0, node0.getChildCount());
}",""
