focal_method,test_prefix,docstring
"@Override
public void process(Node externs, Node root) {
    // Do variable reference counting.
    NodeTraversal.traverse(compiler, root, new ProcessLabels());
}","public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    RenameLabels renameLabels0 = new RenameLabels(compiler0);
    Node node0 = compiler0.parseTestCode(""e:mUdd"");
    Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, ""e:mUdd"", ""e:mUdd"");
    node0.addChildToBack(node1);
    renameLabels0.process(node0, node0);
    assertEquals(49, Node.DIRECT_EVAL);
}",""
"@Override
public void process(Node externs, Node root) {
    // Do variable reference counting.
    NodeTraversal.traverse(compiler, root, new ProcessLabels());
}","public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    RenameLabels renameLabels0 = new RenameLabels(compiler0);
    Node node0 = Node.newString(""Sbm}5u(|^nA"");
    Node node1 = new Node(116, node0, 34, 27);
    renameLabels0.process(node1, node1);
    assertEquals(22, Node.TARGETBLOCK_PROP);
}",""
"@Override
public void process(Node externs, Node root) {
    // Do variable reference counting.
    NodeTraversal.traverse(compiler, root, new ProcessLabels());
}","public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(117, 117, 117);
    RenameLabels renameLabels0 = new RenameLabels(compiler0);
    renameLabels0.process(node0, node0);
    assertEquals(2, Node.POST_FLAG);
}",""
"@Override
public void process(Node externs, Node root) {
    // Do variable reference counting.
    NodeTraversal.traverse(compiler, root, new ProcessLabels());
}","public void test44() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(150);
    RenameLabels renameLabels0 = new RenameLabels(compiler0);
    Node node1 = Node.newString((-1), """");
    Node node2 = new Node(117, node1, node0, (-1), 10);
    // Undeclared exception!
    try {
        renameLabels0.process(node1, node2);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    // Do variable reference counting.
    NodeTraversal.traverse(compiler, root, new ProcessLabels());
}","public void test55() throws Throwable {
    Compiler compiler0 = new Compiler();
    RenameLabels renameLabels0 = new RenameLabels(compiler0);
    Node node0 = Node.newString(""Sbm}5u(|^nA"");
    Node node1 = new Node(116, node0, 34, 27);
    Node node2 = Node.newString(""Sbm}5u(|^nA"");
    Node node3 = new Node(126, node2, node1, 13, 29);
    renameLabels0.process(node1, node3);
    RenameLabels.DefaultNameSupplier renameLabels_DefaultNameSupplier0 = new RenameLabels.DefaultNameSupplier();
    RenameLabels renameLabels1 = new RenameLabels(compiler0, renameLabels_DefaultNameSupplier0, false);
    renameLabels1.process(node1, node3);
    assertEquals(48, Node.DIRECTIVES);
}",""
