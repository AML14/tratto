{
  "test05260" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05260() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"no a StringNPde\", \"no a StringNPde\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(56, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test05260"
  },
  "test07283" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07283() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(89, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07283"
  },
  "test088105" : {
    "methodSignature" : "public boolean isGetElem()",
    "methodName" : "isGetElem",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088105() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(112, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isGetElem();\n}",
    "testName" : "test088105"
  },
  "test06472" : {
    "methodSignature" : "public boolean isDo()",
    "methodName" : "isDo",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06472() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(77, \"\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.isDo();\n}",
    "testName" : "test06472"
  },
  "test08097" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08097() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(103, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test08097"
  },
  "test143164" : {
    "methodSignature" : "double getTypedPercent()",
    "methodName" : "getTypedPercent",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143164() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"O\", \"O\");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    double double0 = typeCheck0.getTypedPercent();\n}",
    "testName" : "test143164"
  },
  "test115132" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115132() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"z,l\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    Node node1 = new Node(141, node0, node0);\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test115132"
  },
  "test0000" : {
    "methodSignature" : "public void traverse(Node root)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"C.Y*5\", \"C.Y*5\");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    nodeTraversal0.traverse(node0);\n}",
    "testName" : "test0000"
  },
  "test0088" : {
    "methodSignature" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
    "methodName" : "shouldTraverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node1 = Node.newString(105, \"0g`X^-3\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.shouldTraverse(nodeTraversal0, node1, node0);\n}",
    "testName" : "test0088"
  },
  "test07282" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07282() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(89, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07282"
  },
  "test05664" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05664() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\", \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(61, node0, 1, 4095);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test05664"
  },
  "test06876" : {
    "methodSignature" : "public boolean isName()",
    "methodName" : "isName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06876() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"E*5L\", \"E*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(83, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isName();\n}",
    "testName" : "test06876"
  },
  "test132150" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132150() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"c/xz`. z,xX<C>\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(19, node0, node0);\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test132150"
  },
  "test132151" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132151() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"c/xz`. z,xX<C>\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(19, node0, node0);\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test132151"
  },
  "test03240" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03240() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"JSC_TEMPLATE_TYPE_EXPECTED\", \"JSC_TEMPLATE_TYPE_EXPECTED\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(30, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03240"
  },
  "test121138" : {
    "methodSignature" : "public boolean isStringKey()",
    "methodName" : "isStringKey",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121138() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(147, node0, node0, 39, 48);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isStringKey();\n}",
    "testName" : "test121138"
  },
  "test04452" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04452() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(48, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test04452"
  },
  "test109126" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109126() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(135, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test109126"
  },
  "test01212" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(6, node0, 138, 2);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test01212"
  },
  "test02429" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02429() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"C.Y*5\", \"C.Y*5\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    VarCheck varCheck0 = new VarCheck(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(21, node0, 55, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test02429"
  },
  "test02428" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02428() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"C.Y*5\", \"C.Y*5\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    VarCheck varCheck0 = new VarCheck(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(21, node0, 55, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02428"
  },
  "test126143" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126143() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"G_E\", \"G_E\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(152, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test126143"
  },
  "test02427" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02427() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"C.Y*5\", \"C.Y*5\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    VarCheck varCheck0 = new VarCheck(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(21, node0, 55, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test02427"
  },
  "test01618" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01618() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"d$g0TEhcEpJ7za>goEQ\", \"d$g0TEhcEpJ7za>goEQ\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    Node node1 = new Node(11, node0, node0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01618"
  },
  "test01617" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01617() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"d$g0TEhcEpJ7za>goEQ\", \"d$g0TEhcEpJ7za>goEQ\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    Node node1 = new Node(11, node0, node0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01617"
  },
  "test094111" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(118, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test094111"
  },
  "test110127" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110127() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(136, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test110127"
  },
  "test091108" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091108() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"not a StringNode\", \"not a StringNode\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(115, node0, 38, 115);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test091108"
  },
  "test0011" : {
    "methodSignature" : "public void process(Node externsRoot, Node jsRoot)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(154, node0, node0);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.process(node0, node1);\n}",
    "testName" : "test0011"
  },
  "test0099" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"DXt-(ejHHx5\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    node0.addSuppression(\"DXt-(ejHHx5\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test0099"
  },
  "test135154" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135154() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"E*5L\", \"E*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(83, node0, node0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);\n}",
    "testName" : "test135154"
  },
  "test04048" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04048() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(44, node0, 37, 133);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test04048"
  },
  "test07793" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07793() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(97, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07793"
  },
  "test083100" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083100() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Cannot add a property to a struct instance after it is constructed.\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(107, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test083100"
  },
  "test02022" : {
    "methodSignature" : "public int getSourcePosition()",
    "methodName" : "getSourcePosition",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(15, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.getSourcePosition();\n}",
    "testName" : "test02022"
  },
  "test06068" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06068() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"C6*5\", \"C6*5\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(71, node0, node0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test06068"
  },
  "test07794" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07794() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(97, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07794"
  },
  "test04957" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04957() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(53, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test04957"
  },
  "test06977" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06977() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"ai*L0\", \"hNeqrUg/ONy/v,Nc`\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(84, node0, node0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test06977"
  },
  "test104121" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104121() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"not a StringNode\", \"not a StringNode\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(128, node0, (-1761), 2);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test104121"
  },
  "test03745" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03745() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(37, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03745"
  },
  "test02937" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02937() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(27, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test02937"
  },
  "test123140" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123140() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(149, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test123140"
  },
  "test130147" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130147() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"not a StringNode\", \"not a StringNode\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(16, node0, node0, node0, 52, 12);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test130147"
  },
  "test099116" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099116() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"!P0Ev};Xn.R:6Q33?*I\", \"!P0Ev};Xn.R:6Q33?*I\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(123, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test099116"
  },
  "test08198" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08198() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node0 = Node.newString(105, \"0g`X^-3\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test08198"
  },
  "test05361" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05361() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"SpkCC'(%GO\\\"T!'$FBi\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(57, \"PG+b4G1WtV:]H\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test05361"
  },
  "test07385" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07385() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(91, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test07385"
  },
  "test102119" : {
    "methodSignature" : "public boolean isAnd()",
    "methodName" : "isAnd",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102119() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\", \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(126, node0, 1, 149);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isAnd();\n}",
    "testName" : "test102119"
  },
  "test07384" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07384() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(91, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07384"
  },
  "test113130" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113130() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"o\", \"o\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(139, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test113130"
  },
  "test0022" : {
    "methodSignature" : "public int getVarCount()",
    "methodName" : "getVarCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node((-3033), node0, node0);\n    Scope scope0 = typeCheck0.processForTesting((Node) null, node0);\n    scope0.getVarCount();\n}",
    "testName" : "test0022"
  },
  "test04553" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04553() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(49, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test04553"
  },
  "test05765" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05765() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(66, node0, 4, 43);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test05765"
  },
  "test134153" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134153() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(120, 8, (-951));\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);\n}",
    "testName" : "test134153"
  },
  "test02531" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02531() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"z$-\", \"sg.invalid.type\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(22, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test02531"
  },
  "test06573" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06573() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(78, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test06573"
  },
  "test02530" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02530() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"z$-\", \"sg.invalid.type\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(22, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02530"
  },
  "test03341" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03341() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"z#/dC>Q,ed-D}[l73F$\", \"z#/dC>Q,ed-D}[l73F$\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(31, node0, node0, 52, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test03341"
  },
  "test01313" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"+\", \"+\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(7, node0, 924, 124);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test01313"
  },
  "test107124" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107124() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node1 = new Node(133, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test107124"
  },
  "test04149" : {
    "methodSignature" : "public boolean isInc()",
    "methodName" : "isInc",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04149() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(45, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isInc();\n}",
    "testName" : "test04149"
  },
  "test124141" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124141() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"AV\", \"AV\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(150, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test124141"
  },
  "test096113" : {
    "methodSignature" : "public boolean isScript()",
    "methodName" : "isScript",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(120, 8, (-951));\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.isScript();\n}",
    "testName" : "test096113"
  },
  "test01719" : {
    "methodSignature" : "public String getSourceName()",
    "methodName" : "getSourceName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01719() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"not a StringNode\", \"not a StringNode\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    Node node1 = new Node(12, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    nodeTraversal0.getSourceName();\n}",
    "testName" : "test01719"
  },
  "test140160" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140160() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(37, node0, node0);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test140160"
  },
  "test0033" : {
    "methodSignature" : "public void process(Node externsRoot, Node jsRoot)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(66, node0, 4, (-719));\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.process(node1, node0);\n}",
    "testName" : "test0033"
  },
  "test118135" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118135() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = Node.newString(144, \"\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test118135"
  },
  "test06169" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06169() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(73, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test06169"
  },
  "test137156" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137156() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"msg.invalid.type\", \"Cannot set maximumInterpreterStackDepth to less than 1\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(16, node0, node0, node0, node0);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test137156"
  },
  "test02123" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(17, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test02123"
  },
  "test07895" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07895() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"kwUWdf&7(1:+\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(99, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test07895"
  },
  "test085102" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085102() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(109, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test085102"
  },
  "test01820" : {
    "methodSignature" : "public boolean isCatch()",
    "methodName" : "isCatch",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01820() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(13, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isCatch();\n}",
    "testName" : "test01820"
  },
  "test03846" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03846() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"M\", \"M\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(42, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03846"
  },
  "test02632" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02632() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"+\", \"+\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = Node.newString(24, \"+\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test02632"
  },
  "test05866" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05866() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(67, node0, 30, 55);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n}",
    "testName" : "test05866"
  },
  "test129146" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129146() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test129146"
  },
  "test137157" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137157() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"msg.invalid.type\", \"Cannot set maximumInterpreterStackDepth to less than 1\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(16, node0, node0, node0, node0);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test137157"
  },
  "test093110" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093110() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(117, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test093110"
  },
  "test090107" : {
    "methodSignature" : "public boolean isComma()",
    "methodName" : "isComma",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090107() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(114, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isComma();\n}",
    "testName" : "test090107"
  },
  "test100117" : {
    "methodSignature" : "public boolean isString()",
    "methodName" : "isString",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100117() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"j\", \"j\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(124, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node1.isString();\n}",
    "testName" : "test100117"
  },
  "test04250" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04250() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(46, node0, 414, 30);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test04250"
  },
  "test0044" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(37, node0, node0);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test0044"
  },
  "test06270" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06270() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"+\", \"+\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(74, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n}",
    "testName" : "test06270"
  },
  "test119136" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119136() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Cannot add a property to a struct instance after it is constructed.\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(145, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test119136"
  },
  "test03442" : {
    "methodSignature" : "public boolean isDefaultCase()",
    "methodName" : "isDefaultCase",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03442() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(32, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node1.isDefaultCase();\n}",
    "testName" : "test03442"
  },
  "test136155" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136155() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \">\", \">\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(118, \"x?YAC\");\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);\n}",
    "testName" : "test136155"
  },
  "test04654" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04654() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(50, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test04654"
  },
  "test05462" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05462() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"+\", \"+\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(58, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n}",
    "testName" : "test05462"
  },
  "test07486" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07486() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\", \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(92, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test07486"
  },
  "test06674" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06674() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(79, node0, 2, 4);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test06674"
  },
  "test08299" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08299() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"e\", \"c/xz`. z,xX<C>\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(106, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test08299"
  },
  "test07487" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07487() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\", \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(92, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07487"
  },
  "test084101" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084101() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = Node.newString(108, \"\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test084101"
  },
  "test02224" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02224() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"c/xz`. z,xX<C>\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);\n    MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();\n    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, makeDeclaredNamesUnique0);\n    Node node1 = new Node(18, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test02224"
  },
  "test03038" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03038() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    Node node1 = new Node(28, node0, node0);\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03038"
  },
  "test105122" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105122() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(129, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test105122"
  },
  "test01414" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(8, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test01414"
  },
  "test131148" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131148() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\", \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(31, node0, 1, 4095);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test131148"
  },
  "test131149" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131149() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\", \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(31, node0, 1, 4095);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test131149"
  },
  "test098115" : {
    "methodSignature" : "public boolean isString()",
    "methodName" : "isString",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098115() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    CompilerOptions compilerOptions0 = compiler0.options;\n    CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);\n    InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);\n    Node node1 = new Node(122, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isString();\n}",
    "testName" : "test098115"
  },
  "test087104" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087104() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(111, \"\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test087104"
  },
  "test142163" : {
    "methodSignature" : "double getTypedPercent()",
    "methodName" : "getTypedPercent",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142163() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();\n    JsMessage.Style jsMessage_Style0 = JsMessage.Style.CLOSURE;\n    ReplaceMessages replaceMessages0 = new ReplaceMessages(compiler0, emptyMessageBundle0, true, jsMessage_Style0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, replaceMessages0);\n    Node node0 = Node.newString(\"Bnv_{\");\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);\n    TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    double double0 = typeCheck0.getTypedPercent();\n}",
    "testName" : "test142163"
  },
  "test0055" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(15, node0, node0);\n    Scope scope0 = typeCheck0.processForTesting(node0, node0);\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    TypeCheck typeCheck1 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, checkLevel0, checkLevel0);\n    typeCheck1.processForTesting(node0, node0);\n}",
    "testName" : "test0055"
  },
  "test07590" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07590() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(93, node0, 2, 4);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07590"
  },
  "test116133" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116133() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"c/xz`. z,xX<C>\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(142, node0, 16, 1);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test116133"
  },
  "test05058" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05058() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"5!v|6+HbQhL/zlkq _\", \"5!v|6+HbQhL/zlkq _\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(54, node0, 153, 32);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test05058"
  },
  "test07996" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07996() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(100, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07996"
  },
  "test07078" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07078() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"com.google.javascript.jscomp.NodeUtil$MatchDeclaration\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(85, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07078"
  },
  "test122139" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122139() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(148, node0, 39, 124);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test122139"
  },
  "test01010" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"G_E\", \"G_E\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(4, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test01010"
  },
  "test02733" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02733() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(25, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02733"
  },
  "test108125" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108125() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"j\", \"j\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(134, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test108125"
  },
  "test111128" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111128() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"j\", \"j\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(137, \"M;iC[_BY$68,t\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test111128"
  },
  "test03947" : {
    "methodSignature" : "public boolean isBreak()",
    "methodName" : "isBreak",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03947() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"o#vI5%.Xf?4{])<@\", (String) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(43, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isBreak();\n}",
    "testName" : "test03947"
  },
  "test04755" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04755() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(51, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test04755"
  },
  "test127144" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127144() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"JSC_TEMPLATE_TYPE_EXPECTED\", \"JSC_TEMPLATE_TYPE_EXPECTED\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(153, node0, 148, 4095);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test127144"
  },
  "test01921" : {
    "methodSignature" : "public boolean isHook()",
    "methodName" : "isHook",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01921() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"c/xz`. z,xX<C>\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(14, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node1.isHook();\n}",
    "testName" : "test01921"
  },
  "test02735" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02735() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(25, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test02735"
  },
  "test05967" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05967() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"not a StringNode\", \"not a StringNode\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(70, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test05967"
  },
  "test02734" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02734() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(25, node0, 31, 47);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test02734"
  },
  "test139159" : {
    "methodSignature" : "public boolean isExprResult()",
    "methodName" : "isExprResult",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139159() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = Node.newString(118, \"\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isExprResult();\n}",
    "testName" : "test139159"
  },
  "test095112" : {
    "methodSignature" : "public boolean isNumber()",
    "methodName" : "isNumber",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"not a StringNode\", \"not a StringNode\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(119, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isNumber();\n}",
    "testName" : "test095112"
  },
  "test06371" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06371() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"+\", \"+\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(76, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test06371"
  },
  "test086103" : {
    "methodSignature" : "public boolean isIf()",
    "methodName" : "isIf",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086103() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", (String) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, (NodeTraversal.Callback) null);\n    Node node1 = new Node(110, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node1.isIf();\n}",
    "testName" : "test086103"
  },
  "test141161" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141161() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"operator {0} cannot be applied to {1}\", \"operator {0} cannot be applied to {1}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(10, node0, node0);\n    node1.addSuppression(\"operator {0} cannot be applied to {1}\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test141161"
  },
  "test141162" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141162() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"operator {0} cannot be applied to {1}\", \"operator {0} cannot be applied to {1}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(10, node0, node0);\n    node1.addSuppression(\"operator {0} cannot be applied to {1}\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test141162"
  },
  "test07181" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07181() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(88, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test07181"
  },
  "test07180" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07180() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(88, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07180"
  },
  "test0066" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"j\", \"j\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test0066"
  },
  "test092109" : {
    "methodSignature" : "public boolean isNot()",
    "methodName" : "isNot",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092109() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(116, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isNot();\n}",
    "testName" : "test092109"
  },
  "test117134" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117134() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(143, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n}",
    "testName" : "test117134"
  },
  "test06775" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06775() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(82, node0, (-520), 4);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test06775"
  },
  "test07589" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07589() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(93, node0, 2, 4);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07589"
  },
  "test07588" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07588() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(93, node0, 2, 4);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test07588"
  },
  "test03543" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03543() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*5L\", \".*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(34, node0, 55, 0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03543"
  },
  "test04351" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04351() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"+\", \"+\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(47, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test04351"
  },
  "test05563" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05563() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"C.Y*5\", \"C.Y*5\");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(59, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test05563"
  },
  "test02326" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02326() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(20, node0, (-2479), 46);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02326"
  },
  "test112129" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112129() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"LNu5qL\", \"LNu5qL\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(138, node0, 2, 135);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n}",
    "testName" : "test112129"
  },
  "test02325" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02325() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(20, node0, (-2479), 46);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test02325"
  },
  "test01516" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01516() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(9, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01516"
  },
  "test128145" : {
    "methodSignature" : "public boolean isHook()",
    "methodName" : "isHook",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128145() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(154, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isHook();\n}",
    "testName" : "test128145"
  },
  "test01515" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01515() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"Tsm1d`pvoy\", \"Tsm1d`pvoy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(9, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01515"
  },
  "test03139" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03139() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"G_E\", \"G_E\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(29, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03139"
  },
  "test103120" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103120() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"j\", \"j\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = new Node(127, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test103120"
  },
  "test138158" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138158() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\", \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.reportMissingProperties(false);\n    Node node1 = new Node(31, node0, 1, 4095);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test138158"
  },
  "test07692" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07692() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"not a StringNode\", \"not a StringNode\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(94, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07692"
  },
  "test089106" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089106() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(113, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.getType();\n}",
    "testName" : "test089106"
  },
  "test101118" : {
    "methodSignature" : "public boolean isGetElem()",
    "methodName" : "isGetElem",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101118() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"5!v|6+HbQhL/zlkq _\", \"5!v|6+HbQhL/zlkq _\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node1 = new Node(125, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node1.isGetElem();\n}",
    "testName" : "test101118"
  },
  "test07691" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07691() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"not a StringNode\", \"not a StringNode\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(94, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07691"
  },
  "test114131" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114131() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"5!v|6+HbQhL/zlkq (`_\", \"5!v|6+HbQhL/zlkq (`_\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(140, node0, 146, 2810);\n    typeCheck0.visit((NodeTraversal) null, node1, node0);\n}",
    "testName" : "test114131"
  },
  "test0077" : {
    "methodSignature" : "public boolean isAssignAdd()",
    "methodName" : "isAssignAdd",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\", \"com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(86, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isAssignAdd();\n}",
    "testName" : "test0077"
  },
  "test133152" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133152() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Normalize.PropagateConstantAnnotationsOverVars normalize_PropagateConstantAnnotationsOverVars0 = new Normalize.PropagateConstantAnnotationsOverVars(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropagateConstantAnnotationsOverVars0);\n    Node node1 = Node.newString(105, \"0g`X^-3\");\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);\n}",
    "testName" : "test133152"
  },
  "test05159" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05159() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"FieldCleaupPassFactory\", (String) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(55, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test05159"
  },
  "test01111" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(5, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test01111"
  },
  "test120137" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120137() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"j\", \"j\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(146, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test120137"
  },
  "test07179" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07179() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(88, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07179"
  },
  "test106123" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"E*5L\", \"E*5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(131, node0, 709, (-1517));\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test106123"
  },
  "test02836" : {
    "methodSignature" : "public boolean isGetProp()",
    "methodName" : "isGetProp",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02836() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(26, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isGetProp();\n}",
    "testName" : "test02836"
  },
  "test03644" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03644() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \".*u5L\", \".*u5L\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(36, node0, 30, 43);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03644"
  },
  "test04856" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04856() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"0g`X^-3\", \"0g`X^-3\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = Node.newString(52, \"0g`X^-3\", 46, 47);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test04856"
  },
  "test125142" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125142() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(151, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test125142"
  },
  "test097114" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(121, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test097114"
  }
}