project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.jaascript.jscomp.TypeInfeence$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascrpt.jscomp.TyeInfeence$TemplateTypeReplcer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascriyt.jscobp.TypeInference$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    Scope scope0 = Scope.createGlobalScope(node0);
    CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"");
    ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of(""com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer"", codingConvention_AssertionFunctionSpec0);
    TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
    LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
    Node node1 = new Node(6, node0);
    // Undeclared exception!
    try {
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 6
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javasBript.jscomp.TypeInference$emplatTypeRplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javascript.jscomp.TypeInfernnce$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""prototype"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseTestCode(""com.google.javscript.jscom.TypeInferece$TemplateTypeReplacer"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
        //
        verifyException(""com.google.common.collect.ImmutableMap"", e);
    }
}",0,
project,0,test9191,"public void test9191() throws Throwable {
    BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
    BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);
    assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet1);
}",0,
project,0,test9292,"public void test9292() throws Throwable {
    BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
    BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
    assertSame(booleanLiteralSet0, booleanLiteralSet1);
}",0,
