{
  "test1010" : {
    "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
    "methodName" : "branchedFlowThrough",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = Scope.createGlobalScope(node0);\n    CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec(\"com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer\");\n    ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of(\"com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer\", codingConvention_AssertionFunctionSpec0);\n    TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);\n    LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);\n    Node node1 = new Node(6, node0);\n    typeInference0.branchedFlowThrough(node1, linkedFlowScope0);\n}",
    "testName" : "test1010"
  },
  "test2222" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.javasBript.jscomp.TypeInference$emplatTypeRplacer\");\n}",
    "testName" : "test2222"
  },
  "test000" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer\");\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.jaascript.jscomp.TypeInfeence$TemplateTypeReplacer\");\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.javscript.jscomp.TypeInference$TemplateTypeReplacer\");\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.javascrpt.jscomp.TyeInfeence$TemplateTypeReplcer\");\n}",
    "testName" : "test066"
  },
  "test099" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.javascriyt.jscobp.TypeInference$TemplateTypeReplacer\");\n}",
    "testName" : "test099"
  },
  "test9191" : {
    "methodSignature" : "static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left, BooleanLiteralSet right, boolean condition)",
    "methodName" : "getBooleanOutcomes",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9191() throws Throwable {\n    BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;\n    BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);\n}",
    "testName" : "test9191"
  },
  "test3939" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"prototype\");\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.javscript.jscom.TypeInferece$TemplateTypeReplacer\");\n}",
    "testName" : "test5959"
  },
  "test9292" : {
    "methodSignature" : "static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left, BooleanLiteralSet right, boolean condition)",
    "methodName" : "getBooleanOutcomes",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9292() throws Throwable {\n    BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;\n    BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);\n}",
    "testName" : "test9292"
  },
  "test2525" : {
    "methodSignature" : "Node parseTestCode(String js)",
    "methodName" : "parseTestCode",
    "className" : "com.google.javascript.jscomp.TypeInference",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.javascript.jscomp.TypeInfernnce$TemplateTypeReplacer\");\n}",
    "testName" : "test2525"
  }
}