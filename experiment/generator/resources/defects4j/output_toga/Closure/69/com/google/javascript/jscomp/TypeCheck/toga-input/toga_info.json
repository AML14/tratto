{
  "test06591" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06591() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(67);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06591"
  },
  "test06590" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06590() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(67);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06590"
  },
  "test114162" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114162() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(123, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test114162"
  },
  "test114163" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114163() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(123, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test114163"
  },
  "test0000" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(35);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test0000"
  },
  "test05268" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05268() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(54);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test05268"
  },
  "test119170" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119170() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(129);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test119170"
  },
  "test05269" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05269() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(54);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05269"
  },
  "test02431" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02431() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(118);\n    Node node1 = new Node(18, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test02431"
  },
  "test04054" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04054() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((-3109.550227217214));\n    Node node1 = new Node(37, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test04054"
  },
  "test02430" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02430() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(118);\n    Node node1 = new Node(18, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02430"
  },
  "test082121" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082121() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(84, 84, 84);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test082121"
  },
  "test082122" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082122() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(84, 84, 84);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test082122"
  },
  "test119171" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119171() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(129);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test119171"
  },
  "test140209" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140209() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(152, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test140209"
  },
  "test01213" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01213() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(100.0);\n    Node node1 = new Node(5, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test01213"
  },
  "test01212" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(100.0);\n    Node node1 = new Node(5, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01212"
  },
  "test04964" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04964() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(51);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test04964"
  },
  "test108155" : {
    "methodSignature" : "public boolean isUnscopedQualifiedName()",
    "methodName" : "isUnscopedQualifiedName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108155() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(116);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.isUnscopedQualifiedName();\n}",
    "testName" : "test108155"
  },
  "test05370" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05370() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(55, (-1663), 1);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test05370"
  },
  "test0011" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.reportMissingProperties(false);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(16, node0, node0, node0, 151, 19);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test0011"
  },
  "test131194" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131194() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(143);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test131194"
  },
  "test103150" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103150() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(111);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test103150"
  },
  "test02534" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02534() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"T[=28Ba1$#{H5n\\\"Cz\");\n    Node node1 = new Node(19, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test02534"
  },
  "test02533" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02533() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"T[=28Ba1$#{H5n\\\"Cz\");\n    Node node1 = new Node(19, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test02533"
  },
  "test02532" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02532() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"T[=28Ba1$#{H5n\\\"Cz\");\n    Node node1 = new Node(19, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02532"
  },
  "test03749" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03749() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(105);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(32, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test03749"
  },
  "test098143" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098143() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(106);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test098143"
  },
  "test131195" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131195() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(143);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test131195"
  },
  "test098142" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098142() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(106);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test098142"
  },
  "test151221" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151221() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(120);\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);\n    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);\n}",
    "testName" : "test151221"
  },
  "test162234" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test162234() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(97, \" \");\n    node0.addChildToFront(node0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test162234"
  },
  "test093136" : {
    "methodSignature" : "public int getSourcePosition()",
    "methodName" : "getSourcePosition",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093136() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(101);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.getSourcePosition();\n}",
    "testName" : "test093136"
  },
  "test06692" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06692() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(68);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06692"
  },
  "test0022" : {
    "methodSignature" : "public void process(Node externsRoot, Node jsRoot)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((-36.6706435269342));\n    Node node1 = new Node(43, node0);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.process(node0, node1);\n}",
    "testName" : "test0022"
  },
  "test130193" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130193() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(142);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test130193"
  },
  "test06693" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06693() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(68);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06693"
  },
  "test130192" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130192() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(142);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test130192"
  },
  "test04155" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04155() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseSyntheticCode(\"<TS0.1wr&V+'z4fXzE\", \"<TS0.1wr&V+'z4fXzE\");\n    Node node1 = new Node(41, node0, node0, node0, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test04155"
  },
  "test01314" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01314() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = Node.newString(\"{8a\");\n    Node node1 = new Node(6, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test01314"
  },
  "test139207" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139207() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Node node0 = new Node(151);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test139207"
  },
  "test156227" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test156227() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(118);\n    Node node1 = new Node(118, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test156227"
  },
  "test01315" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01315() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = Node.newString(\"{8a\");\n    Node node1 = new Node(6, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01315"
  },
  "test05471" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05471() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(56);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05471"
  },
  "test07099" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(72);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test07099"
  },
  "test087128" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087128() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(92);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test087128"
  },
  "test145215" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145215() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((-3109.134516841137));\n    Node node1 = new Node(37, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test145215"
  },
  "test120173" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120173() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(131);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test120173"
  },
  "test0033" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((double) 1);\n    Node node1 = new Node(30, node0);\n    typeCheck0.processForTesting((Node) null, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test0033"
  },
  "test03850" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03850() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(121);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(34, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test03850"
  },
  "test03851" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03851() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(121);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(34, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test03851"
  },
  "test05472" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05472() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(56);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test05472"
  },
  "test140208" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140208() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(152, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test140208"
  },
  "test02635" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02635() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(150);\n    Node node1 = new Node(20, node0);\n    typeCheck0.visit((NodeTraversal) null, node1, node0);\n}",
    "testName" : "test02635"
  },
  "test109156" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109156() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(117);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test109156"
  },
  "test134200" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134200() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(146);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test134200"
  },
  "test076110" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076110() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(78);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test076110"
  },
  "test120172" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120172() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(131);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test120172"
  },
  "test071102" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071102() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(73);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test071102"
  },
  "test071101" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071101() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(73);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test071101"
  },
  "test125183" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125183() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(137);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test125183"
  },
  "test076111" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(78);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test076111"
  },
  "test125182" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125182() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(137);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test125182"
  },
  "test086127" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086127() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((-889.9064));\n    Node node1 = new Node(91, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test086127"
  },
  "test121174" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121174() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(133);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test121174"
  },
  "test121175" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121175() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(133);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test121175"
  },
  "test04256" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04256() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((double) 88);\n    Node node1 = new Node(42, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test04256"
  },
  "test03041" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03041() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((double) 105);\n    Node node1 = new Node(24, node0, node0, 49, 0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03041"
  },
  "test06794" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06794() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(69, \"\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.getType();\n}",
    "testName" : "test06794"
  },
  "test104151" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104151() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(112);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test104151"
  },
  "test126184" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126184() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(138);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test126184"
  },
  "test126185" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126185() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(138);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test126185"
  },
  "test01417" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01417() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(7);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test01417"
  },
  "test097141" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097141() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(105);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test097141"
  },
  "test132196" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132196() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(144);\n    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test132196"
  },
  "test158229" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test158229() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((double) 1);\n    Node node1 = new Node(30, node0);\n    node1.setSourcePositionForTree(0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test158229"
  },
  "test01416" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01416() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(7);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01416"
  },
  "test03952" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03952() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(36, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test03952"
  },
  "test03953" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03953() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(36, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test03953"
  },
  "test092135" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092135() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(100, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test092135"
  },
  "test070100" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070100() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(72);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test070100"
  },
  "test092134" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092134() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(100, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test092134"
  },
  "test147217" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test147217() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(47);\n    Node node1 = new Node(15, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test147217"
  },
  "test115164" : {
    "methodSignature" : "public int getLineNumber()",
    "methodName" : "getLineNumber",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115164() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(124);\n    typeCheck0.visit(nodeTraversal0, node0, (Node) null);\n    nodeTraversal0.getLineNumber();\n}",
    "testName" : "test115164"
  },
  "test081120" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081120() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(105);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    JSType[] jSTypeArray0 = new JSType[1];\n    JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    jSTypeArray0[0] = jSType0;\n    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test081120"
  },
  "test05574" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05574() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(57, 57, 57);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test05574"
  },
  "test05573" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05573() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(57, 57, 57);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05573"
  },
  "test110157" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110157() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(119);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test110157"
  },
  "test136202" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136202() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(148);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test136202"
  },
  "test02736" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02736() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber(0.0);\n    Node node1 = new Node(21, node0, node0, node0, node0, 48, 50);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test02736"
  },
  "test146216" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test146216() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(15, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test146216"
  },
  "test116165" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116165() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(126);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test116165"
  },
  "test06896" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06896() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(70, 70, 70);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test06896"
  },
  "test06895" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06895() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(70, 70, 70);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06895"
  },
  "test04357" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04357() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(2705.904);\n    Node node1 = new Node(43, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test04357"
  },
  "test03142" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03142() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(118);\n    Node node1 = new Node(25, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test03142"
  },
  "test03143" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03143() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(118);\n    Node node1 = new Node(25, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test03143"
  },
  "test135201" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135201() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(147);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test135201"
  },
  "test080119" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080119() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(82, \"\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test080119"
  },
  "test152222" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test152222() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(0.0);\n    ArrayList<JSType> arrayList0 = new ArrayList<JSType>();\n    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);\n}",
    "testName" : "test152222"
  },
  "test080118" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080118() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(82, \"\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test080118"
  },
  "test163235" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test163235() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = Node.newString(\"  parent:\");\n    Node node1 = new Node(93, node0, 18, 2);\n    node1.addSuppression(\"  parent:\");\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test163235"
  },
  "test01519" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01519() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node((-76));\n    Node node1 = new Node(8, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01519"
  },
  "test01518" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01518() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node((-76));\n    Node node1 = new Node(8, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test01518"
  },
  "test111158" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111158() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(120);\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);\n    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test111158"
  },
  "test06084" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06084() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(2726.155);\n    Node node1 = new Node(62, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test06084"
  },
  "test06083" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06083() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(2726.155);\n    Node node1 = new Node(62, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06083"
  },
  "test141210" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141210() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(153);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test141210"
  },
  "test05675" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05675() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(58);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05675"
  },
  "test05676" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05676() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(58);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test05676"
  },
  "test100146" : {
    "methodSignature" : "public boolean isSyntheticBlock()",
    "methodName" : "isSyntheticBlock",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100146() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(108);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.isSyntheticBlock();\n}",
    "testName" : "test100146"
  },
  "test01621" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01621() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(0.0);\n    Node node1 = new Node(9, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01621"
  },
  "test105152" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105152() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(113);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test105152"
  },
  "test01620" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01620() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(0.0);\n    Node node1 = new Node(9, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01620"
  },
  "test096140" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096140() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(104);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test096140"
  },
  "test157228" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test157228() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((double) 1);\n    Node node1 = new Node(30, node0);\n    Node node2 = new Node(15, node1);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test157228"
  },
  "test06998" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06998() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(71);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06998"
  },
  "test075109" : {
    "methodSignature" : "public boolean isVarArgs()",
    "methodName" : "isVarArgs",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075109() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(77);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.isVarArgs();\n}",
    "testName" : "test075109"
  },
  "test091133" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091133() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(99, \"d/Joz{w4<if\\\"o``$z\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test091133"
  },
  "test02839" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02839() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regp\");\n    Node node1 = new Node(22, node0, node0, node0, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test02839"
  },
  "test091132" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091132() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(99, \"d/Joz{w4<if\\\"o``$z\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test091132"
  },
  "test02838" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02838() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regp\");\n    Node node1 = new Node(22, node0, node0, node0, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test02838"
  },
  "test02837" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02837() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regp\");\n    Node node1 = new Node(22, node0, node0, node0, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02837"
  },
  "test148218" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test148218() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(64);\n    node0.addChildToFront(node0);\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test148218"
  },
  "test0088" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((-33.72289608628942));\n    Node node1 = new Node(86, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test0088"
  },
  "test165237" : {
    "methodSignature" : "double getTypedPercent()",
    "methodName" : "getTypedPercent",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test165237() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    double double0 = typeCheck0.getTypedPercent();\n}",
    "testName" : "test165237"
  },
  "test03244" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03244() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\" }@'\");\n    Node node1 = new Node(26, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test03244"
  },
  "test159231" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test159231() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(50);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = compiler0.parseTestCode(\"com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel\");\n    Node node2 = new Node(30, node1, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node2, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test159231"
  },
  "test06997" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06997() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(71);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06997"
  },
  "test02940" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02940() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(\"\");\n    Node node1 = new Node(23, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test02940"
  },
  "test02026" : {
    "methodSignature" : "public boolean isSyntheticBlock()",
    "methodName" : "isSyntheticBlock",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02026() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((-33.72289608628942));\n    Node node1 = new Node(13, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.isSyntheticBlock();\n}",
    "testName" : "test02026"
  },
  "test05778" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05778() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(59);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05778"
  },
  "test074107" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074107() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(76);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test074107"
  },
  "test137203" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137203() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(149);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test137203"
  },
  "test05777" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05777() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(59);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test05777"
  },
  "test137204" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137204() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(149);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test137204"
  },
  "test154225" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test154225() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(16, node0, node0, node0, 23, 19);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test154225"
  },
  "test074108" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074108() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(76);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test074108"
  },
  "test154224" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test154224() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"msg.no.regexp\");\n    Node node1 = new Node(16, node0, node0, node0, 23, 19);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test154224"
  },
  "test096139" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096139() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(104);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test096139"
  },
  "test079117" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079117() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber(Double.NaN);\n    Node node1 = new Node(81, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test079117"
  },
  "test079116" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079116() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber(Double.NaN);\n    Node node1 = new Node(81, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test079116"
  },
  "test06185" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06185() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(63, \"Eq\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test06185"
  },
  "test122177" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122177() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(134);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test122177"
  },
  "test143213" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143213() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(83);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test143213"
  },
  "test0099" : {
    "methodSignature" : "public boolean isSyntheticBlock()",
    "methodName" : "isSyntheticBlock",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(118);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.isSyntheticBlock();\n}",
    "testName" : "test0099"
  },
  "test122176" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122176() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(134);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test122176"
  },
  "test085126" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085126() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(90);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test085126"
  },
  "test127186" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127186() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(139);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test127186"
  },
  "test127187" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127187() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(139);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test127187"
  },
  "test01723" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01723() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(0.0);\n    Node node1 = new Node(10, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01723"
  },
  "test01722" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01722() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(0.0);\n    Node node1 = new Node(10, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01722"
  },
  "test04559" : {
    "methodSignature" : "public int getCharno()",
    "methodName" : "getCharno",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04559() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"<TS0.1ir&V+o'z4ftzE\");\n    Node node1 = new Node(45, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    node1.getCharno();\n}",
    "testName" : "test04559"
  },
  "test112160" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112160() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(121);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test112160"
  },
  "test123179" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123179() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(135);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test123179"
  },
  "test142212" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"/OYJO0LbBJ?7%emi\");\n    Node node1 = new Node(3, node0, node0, 153, 45);\n    Node node2 = new Node(88, node1);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test142212"
  },
  "test123178" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123178() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(135);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test123178"
  },
  "test142211" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142211() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"/OYJO0LbBJ?7%emi\");\n    Node node1 = new Node(3, node0, node0, 153, 45);\n    Node node2 = new Node(88, node1);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test142211"
  },
  "test03345" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03345() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = compiler0.parseTestCode(\"vtJ\");\n    Node node1 = new Node(27, node0, node0, node0, 2, 42);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test03345"
  },
  "test05880" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05880() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(60);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test05880"
  },
  "test101148" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101148() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(109);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test101148"
  },
  "test084125" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084125() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((-33.72289608628942));\n    Node node1 = new Node(87, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test084125"
  },
  "test101147" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101147() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(109);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test101147"
  },
  "test084124" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084124() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((-33.72289608628942));\n    Node node1 = new Node(87, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test084124"
  },
  "test02127" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02127() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(1374.4969655242487);\n    Node node1 = new Node(14, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test02127"
  },
  "test128189" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128189() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(140);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test128189"
  },
  "test128188" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128188() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(140);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test128188"
  },
  "test05879" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05879() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(60);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test05879"
  },
  "test089130" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089130() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((-35.17328011595348));\n    Node node1 = new Node(96, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test089130"
  },
  "test106153" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106153() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(114);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test106153"
  },
  "test090131" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090131() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(98);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test090131"
  },
  "test117166" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117166() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Node node0 = new Node(127);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test117166"
  },
  "test117167" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117167() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Node node0 = new Node(127);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test117167"
  },
  "test06286" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06286() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(64);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test06286"
  },
  "test04660" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04660() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(105);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node1 = new Node(46);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test04660"
  },
  "test158230" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test158230() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((double) 1);\n    Node node1 = new Node(30, node0);\n    node1.setSourcePositionForTree(0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n    compiler0.hasErrors();\n}",
    "testName" : "test158230"
  },
  "test01824" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01824() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = compiler0.parseTestCode(\" }@'\");\n    Node node1 = new Node(11, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01824"
  },
  "test133198" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133198() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(145);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test133198"
  },
  "test03446" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03446() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(28, node0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test03446"
  },
  "test133197" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133197() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(145);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test133197"
  },
  "test153223" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test153223() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(118);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);\n}",
    "testName" : "test153223"
  },
  "test164236" : {
    "methodSignature" : "double getTypedPercent()",
    "methodName" : "getTypedPercent",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test164236() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = compiler0.parseTestCode(\" }'\");\n    Node node1 = Node.newNumber(2826.5521567642);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    double double0 = typeCheck0.getTypedPercent();\n}",
    "testName" : "test164236"
  },
  "test095138" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095138() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber((-889.9064));\n    Node node1 = new Node(103, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test095138"
  },
  "test112159" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112159() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(121);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test112159"
  },
  "test118169" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118169() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(128);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test118169"
  },
  "test144214" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test144214() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(64, node0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test144214"
  },
  "test0044" : {
    "methodSignature" : "public void process(Node externsRoot, Node jsRoot)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((-36.6706435269342));\n    Node node1 = new Node(43, node0);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.process(node1, node0);\n}",
    "testName" : "test0044"
  },
  "test118168" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118168() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(128);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test118168"
  },
  "test05982" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05982() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(61);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05982"
  },
  "test05065" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05065() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(52);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test05065"
  },
  "test05981" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05981() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(61);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test05981"
  },
  "test161233" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test161233() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(95, \"\");\n    node0.addChildToFront(node0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test161233"
  },
  "test02228" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02228() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"F>J\");\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02228"
  },
  "test0055" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = compiler0.parseTestCode(\"vJ\");\n    Node node1 = new Node(27, node0, node0, node0, 2, 42);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.processForTesting(node1, node1);\n}",
    "testName" : "test0055"
  },
  "test04761" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04761() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(48);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test04761"
  },
  "test04762" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04762() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(48);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test04762"
  },
  "test150220" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test150220() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(105);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);\n}",
    "testName" : "test150220"
  },
  "test01010" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(105);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    node0.addSuppression((String) null);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test01010"
  },
  "test06387" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06387() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(65);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test06387"
  },
  "test102149" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102149() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(110);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test102149"
  },
  "test073105" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073105() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(75);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test073105"
  },
  "test073106" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073106() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(75);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test073106"
  },
  "test155226" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test155226() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, \"MLs8xB9TL=eW.*g|X\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);\n    Node node0 = Node.newString(\"km{!\");\n    Node node1 = new Node(33, node0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test155226"
  },
  "test107154" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107154() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(115);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test107154"
  },
  "test03547" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03547() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(29);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test03547"
  },
  "test01925" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01925() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(12);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test01925"
  },
  "test078115" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078115() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(80);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test078115"
  },
  "test078114" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(80);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test078114"
  },
  "test088129" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088129() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(94, 94, 94);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test088129"
  },
  "test0066" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Node node0 = Node.newNumber(1.1654429604646246);\n    Scope scope0 = new Scope(node0, compiler0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.reportUnknownTypes, compilerOptions0.checkShadowVars);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test0066"
  },
  "test05167" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05167() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(53);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test05167"
  },
  "test05166" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05166() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(53);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05166"
  },
  "test072103" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072103() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(74);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test072103"
  },
  "test099145" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099145() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(107);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test099145"
  },
  "test072104" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072104() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(74);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test072104"
  },
  "test099144" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099144() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(107);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test099144"
  },
  "test134199" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134199() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(146);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test134199"
  },
  "test02329" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02329() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(17);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test02329"
  },
  "test094137" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094137() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(102);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test094137"
  },
  "test129191" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129191() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(141);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test129191"
  },
  "test129190" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129190() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(141);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test129190"
  },
  "test077112" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(79);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test077112"
  },
  "test124181" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124181() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(136);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test124181"
  },
  "test077113" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(79);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test077113"
  },
  "test124180" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124180() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(136);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test124180"
  },
  "test113161" : {
    "methodSignature" : "public static void traverse(AbstractCompiler compiler, Node root, Callback cb)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113161() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(122);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);\n}",
    "testName" : "test113161"
  },
  "test149219" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test149219() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(50);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    TypeCheck typeCheck1 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, checkLevel0, checkLevel0);\n    typeCheck1.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test149219"
  },
  "test0077" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = new Node(105);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test0077"
  },
  "test06489" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06489() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);\n    Node node0 = new Node(66);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test06489"
  },
  "test06488" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06488() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);\n    Node node0 = new Node(66);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06488"
  },
  "test04863" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04863() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newNumber(0.0);\n    Node node1 = new Node(49, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test04863"
  },
  "test01111" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(4);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test01111"
  },
  "test083123" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = Node.newString(85, \"\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test083123"
  },
  "test03648" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03648() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newNumber((double) 105);\n    Node node1 = new Node(31, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03648"
  },
  "test138206" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138206() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(78);\n    Node node1 = new Node(150);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test138206"
  },
  "test138205" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138205() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(78);\n    Node node1 = new Node(150);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test138205"
  },
  "test160232" : {
    "methodSignature" : "public int getChildCount()",
    "methodName" : "getChildCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test160232() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    compiler0.initCompilerOptionsIfTesting();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(89);\n    Node node1 = new Node(89, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node1.getChildCount();\n}",
    "testName" : "test160232"
  }
}